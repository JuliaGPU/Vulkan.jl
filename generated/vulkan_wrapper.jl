@cenum ImageLayout::UInt32 begin
        IMAGE_LAYOUT_UNDEFINED = 0
        IMAGE_LAYOUT_GENERAL = 1
        IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
        IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
        IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
        IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
        IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
        IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
        IMAGE_LAYOUT_PREINITIALIZED = 8
        IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
        IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
        IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
        IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
        IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
        IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000
        IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001
        IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002
        IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000
        IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001
        IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002
        IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
        IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
        IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
        IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000
        IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001
    end

@cenum AttachmentLoadOp::UInt32 begin
        ATTACHMENT_LOAD_OP_LOAD = 0
        ATTACHMENT_LOAD_OP_CLEAR = 1
        ATTACHMENT_LOAD_OP_DONT_CARE = 2
    end

@cenum AttachmentStoreOp::UInt32 begin
        ATTACHMENT_STORE_OP_STORE = 0
        ATTACHMENT_STORE_OP_DONT_CARE = 1
        ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
    end

@cenum ImageType::UInt32 begin
        IMAGE_TYPE_1D = 0
        IMAGE_TYPE_2D = 1
        IMAGE_TYPE_3D = 2
    end

@cenum ImageTiling::UInt32 begin
        IMAGE_TILING_OPTIMAL = 0
        IMAGE_TILING_LINEAR = 1
        IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
    end

@cenum ImageViewType::UInt32 begin
        IMAGE_VIEW_TYPE_1D = 0
        IMAGE_VIEW_TYPE_2D = 1
        IMAGE_VIEW_TYPE_3D = 2
        IMAGE_VIEW_TYPE_CUBE = 3
        IMAGE_VIEW_TYPE_1D_ARRAY = 4
        IMAGE_VIEW_TYPE_2D_ARRAY = 5
        IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
    end

@cenum CommandBufferLevel::UInt32 begin
        COMMAND_BUFFER_LEVEL_PRIMARY = 0
        COMMAND_BUFFER_LEVEL_SECONDARY = 1
    end

@cenum ComponentSwizzle::UInt32 begin
        COMPONENT_SWIZZLE_IDENTITY = 0
        COMPONENT_SWIZZLE_ZERO = 1
        COMPONENT_SWIZZLE_ONE = 2
        COMPONENT_SWIZZLE_R = 3
        COMPONENT_SWIZZLE_G = 4
        COMPONENT_SWIZZLE_B = 5
        COMPONENT_SWIZZLE_A = 6
    end

@cenum DescriptorType::UInt32 begin
        DESCRIPTOR_TYPE_SAMPLER = 0
        DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
        DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
        DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
        DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
        DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
        DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
        DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
        DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
        DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
        DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
        DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
    end

@cenum QueryType::UInt32 begin
        QUERY_TYPE_OCCLUSION = 0
        QUERY_TYPE_PIPELINE_STATISTICS = 1
        QUERY_TYPE_TIMESTAMP = 2
        QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000
        QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000
        QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
        QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
        QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
        QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
        QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
        QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
    end

@cenum BorderColor::UInt32 begin
        BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
        BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
        BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
        BORDER_COLOR_INT_OPAQUE_BLACK = 3
        BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
        BORDER_COLOR_INT_OPAQUE_WHITE = 5
        BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
        BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
    end

@cenum PipelineBindPoint::UInt32 begin
        PIPELINE_BIND_POINT_GRAPHICS = 0
        PIPELINE_BIND_POINT_COMPUTE = 1
        PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
    end

@cenum PipelineCacheHeaderVersion::UInt32 begin
        PIPELINE_CACHE_HEADER_VERSION_ONE = 1
    end

@cenum PrimitiveTopology::UInt32 begin
        PRIMITIVE_TOPOLOGY_POINT_LIST = 0
        PRIMITIVE_TOPOLOGY_LINE_LIST = 1
        PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
        PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
        PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
        PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
        PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
    end

@cenum SharingMode::UInt32 begin
        SHARING_MODE_EXCLUSIVE = 0
        SHARING_MODE_CONCURRENT = 1
    end

@cenum IndexType::UInt32 begin
        INDEX_TYPE_UINT16 = 0
        INDEX_TYPE_UINT32 = 1
        INDEX_TYPE_NONE_KHR = 1000165000
        INDEX_TYPE_UINT8_EXT = 1000265000
    end

@cenum Filter::UInt32 begin
        FILTER_NEAREST = 0
        FILTER_LINEAR = 1
        FILTER_CUBIC_IMG = 1000015000
    end

@cenum SamplerMipmapMode::UInt32 begin
        SAMPLER_MIPMAP_MODE_NEAREST = 0
        SAMPLER_MIPMAP_MODE_LINEAR = 1
    end

@cenum SamplerAddressMode::UInt32 begin
        SAMPLER_ADDRESS_MODE_REPEAT = 0
        SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
        SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
        SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
        SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
    end

@cenum CompareOp::UInt32 begin
        COMPARE_OP_NEVER = 0
        COMPARE_OP_LESS = 1
        COMPARE_OP_EQUAL = 2
        COMPARE_OP_LESS_OR_EQUAL = 3
        COMPARE_OP_GREATER = 4
        COMPARE_OP_NOT_EQUAL = 5
        COMPARE_OP_GREATER_OR_EQUAL = 6
        COMPARE_OP_ALWAYS = 7
    end

@cenum PolygonMode::UInt32 begin
        POLYGON_MODE_FILL = 0
        POLYGON_MODE_LINE = 1
        POLYGON_MODE_POINT = 2
        POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
    end

@cenum FrontFace::UInt32 begin
        FRONT_FACE_COUNTER_CLOCKWISE = 0
        FRONT_FACE_CLOCKWISE = 1
    end

@cenum BlendFactor::UInt32 begin
        BLEND_FACTOR_ZERO = 0
        BLEND_FACTOR_ONE = 1
        BLEND_FACTOR_SRC_COLOR = 2
        BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
        BLEND_FACTOR_DST_COLOR = 4
        BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
        BLEND_FACTOR_SRC_ALPHA = 6
        BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
        BLEND_FACTOR_DST_ALPHA = 8
        BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
        BLEND_FACTOR_CONSTANT_COLOR = 10
        BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
        BLEND_FACTOR_CONSTANT_ALPHA = 12
        BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
        BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
        BLEND_FACTOR_SRC1_COLOR = 15
        BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
        BLEND_FACTOR_SRC1_ALPHA = 17
        BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    end

@cenum BlendOp::UInt32 begin
        BLEND_OP_ADD = 0
        BLEND_OP_SUBTRACT = 1
        BLEND_OP_REVERSE_SUBTRACT = 2
        BLEND_OP_MIN = 3
        BLEND_OP_MAX = 4
        BLEND_OP_ZERO_EXT = 1000148000
        BLEND_OP_SRC_EXT = 1000148001
        BLEND_OP_DST_EXT = 1000148002
        BLEND_OP_SRC_OVER_EXT = 1000148003
        BLEND_OP_DST_OVER_EXT = 1000148004
        BLEND_OP_SRC_IN_EXT = 1000148005
        BLEND_OP_DST_IN_EXT = 1000148006
        BLEND_OP_SRC_OUT_EXT = 1000148007
        BLEND_OP_DST_OUT_EXT = 1000148008
        BLEND_OP_SRC_ATOP_EXT = 1000148009
        BLEND_OP_DST_ATOP_EXT = 1000148010
        BLEND_OP_XOR_EXT = 1000148011
        BLEND_OP_MULTIPLY_EXT = 1000148012
        BLEND_OP_SCREEN_EXT = 1000148013
        BLEND_OP_OVERLAY_EXT = 1000148014
        BLEND_OP_DARKEN_EXT = 1000148015
        BLEND_OP_LIGHTEN_EXT = 1000148016
        BLEND_OP_COLORDODGE_EXT = 1000148017
        BLEND_OP_COLORBURN_EXT = 1000148018
        BLEND_OP_HARDLIGHT_EXT = 1000148019
        BLEND_OP_SOFTLIGHT_EXT = 1000148020
        BLEND_OP_DIFFERENCE_EXT = 1000148021
        BLEND_OP_EXCLUSION_EXT = 1000148022
        BLEND_OP_INVERT_EXT = 1000148023
        BLEND_OP_INVERT_RGB_EXT = 1000148024
        BLEND_OP_LINEARDODGE_EXT = 1000148025
        BLEND_OP_LINEARBURN_EXT = 1000148026
        BLEND_OP_VIVIDLIGHT_EXT = 1000148027
        BLEND_OP_LINEARLIGHT_EXT = 1000148028
        BLEND_OP_PINLIGHT_EXT = 1000148029
        BLEND_OP_HARDMIX_EXT = 1000148030
        BLEND_OP_HSL_HUE_EXT = 1000148031
        BLEND_OP_HSL_SATURATION_EXT = 1000148032
        BLEND_OP_HSL_COLOR_EXT = 1000148033
        BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
        BLEND_OP_PLUS_EXT = 1000148035
        BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
        BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
        BLEND_OP_PLUS_DARKER_EXT = 1000148038
        BLEND_OP_MINUS_EXT = 1000148039
        BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
        BLEND_OP_CONTRAST_EXT = 1000148041
        BLEND_OP_INVERT_OVG_EXT = 1000148042
        BLEND_OP_RED_EXT = 1000148043
        BLEND_OP_GREEN_EXT = 1000148044
        BLEND_OP_BLUE_EXT = 1000148045
    end

@cenum StencilOp::UInt32 begin
        STENCIL_OP_KEEP = 0
        STENCIL_OP_ZERO = 1
        STENCIL_OP_REPLACE = 2
        STENCIL_OP_INCREMENT_AND_CLAMP = 3
        STENCIL_OP_DECREMENT_AND_CLAMP = 4
        STENCIL_OP_INVERT = 5
        STENCIL_OP_INCREMENT_AND_WRAP = 6
        STENCIL_OP_DECREMENT_AND_WRAP = 7
    end

@cenum LogicOp::UInt32 begin
        LOGIC_OP_CLEAR = 0
        LOGIC_OP_AND = 1
        LOGIC_OP_AND_REVERSE = 2
        LOGIC_OP_COPY = 3
        LOGIC_OP_AND_INVERTED = 4
        LOGIC_OP_NO_OP = 5
        LOGIC_OP_XOR = 6
        LOGIC_OP_OR = 7
        LOGIC_OP_NOR = 8
        LOGIC_OP_EQUIVALENT = 9
        LOGIC_OP_INVERT = 10
        LOGIC_OP_OR_REVERSE = 11
        LOGIC_OP_COPY_INVERTED = 12
        LOGIC_OP_OR_INVERTED = 13
        LOGIC_OP_NAND = 14
        LOGIC_OP_SET = 15
    end

@cenum InternalAllocationType::UInt32 begin
        INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
    end

@cenum SystemAllocationScope::UInt32 begin
        SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
        SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
        SYSTEM_ALLOCATION_SCOPE_CACHE = 2
        SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
        SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
    end

@cenum PhysicalDeviceType::UInt32 begin
        PHYSICAL_DEVICE_TYPE_OTHER = 0
        PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
        PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
        PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
        PHYSICAL_DEVICE_TYPE_CPU = 4
    end

@cenum VertexInputRate::UInt32 begin
        VERTEX_INPUT_RATE_VERTEX = 0
        VERTEX_INPUT_RATE_INSTANCE = 1
    end

@cenum Format::UInt32 begin
        FORMAT_UNDEFINED = 0
        FORMAT_R4G4_UNORM_PACK8 = 1
        FORMAT_R4G4B4A4_UNORM_PACK16 = 2
        FORMAT_B4G4R4A4_UNORM_PACK16 = 3
        FORMAT_R5G6B5_UNORM_PACK16 = 4
        FORMAT_B5G6R5_UNORM_PACK16 = 5
        FORMAT_R5G5B5A1_UNORM_PACK16 = 6
        FORMAT_B5G5R5A1_UNORM_PACK16 = 7
        FORMAT_A1R5G5B5_UNORM_PACK16 = 8
        FORMAT_R8_UNORM = 9
        FORMAT_R8_SNORM = 10
        FORMAT_R8_USCALED = 11
        FORMAT_R8_SSCALED = 12
        FORMAT_R8_UINT = 13
        FORMAT_R8_SINT = 14
        FORMAT_R8_SRGB = 15
        FORMAT_R8G8_UNORM = 16
        FORMAT_R8G8_SNORM = 17
        FORMAT_R8G8_USCALED = 18
        FORMAT_R8G8_SSCALED = 19
        FORMAT_R8G8_UINT = 20
        FORMAT_R8G8_SINT = 21
        FORMAT_R8G8_SRGB = 22
        FORMAT_R8G8B8_UNORM = 23
        FORMAT_R8G8B8_SNORM = 24
        FORMAT_R8G8B8_USCALED = 25
        FORMAT_R8G8B8_SSCALED = 26
        FORMAT_R8G8B8_UINT = 27
        FORMAT_R8G8B8_SINT = 28
        FORMAT_R8G8B8_SRGB = 29
        FORMAT_B8G8R8_UNORM = 30
        FORMAT_B8G8R8_SNORM = 31
        FORMAT_B8G8R8_USCALED = 32
        FORMAT_B8G8R8_SSCALED = 33
        FORMAT_B8G8R8_UINT = 34
        FORMAT_B8G8R8_SINT = 35
        FORMAT_B8G8R8_SRGB = 36
        FORMAT_R8G8B8A8_UNORM = 37
        FORMAT_R8G8B8A8_SNORM = 38
        FORMAT_R8G8B8A8_USCALED = 39
        FORMAT_R8G8B8A8_SSCALED = 40
        FORMAT_R8G8B8A8_UINT = 41
        FORMAT_R8G8B8A8_SINT = 42
        FORMAT_R8G8B8A8_SRGB = 43
        FORMAT_B8G8R8A8_UNORM = 44
        FORMAT_B8G8R8A8_SNORM = 45
        FORMAT_B8G8R8A8_USCALED = 46
        FORMAT_B8G8R8A8_SSCALED = 47
        FORMAT_B8G8R8A8_UINT = 48
        FORMAT_B8G8R8A8_SINT = 49
        FORMAT_B8G8R8A8_SRGB = 50
        FORMAT_A8B8G8R8_UNORM_PACK32 = 51
        FORMAT_A8B8G8R8_SNORM_PACK32 = 52
        FORMAT_A8B8G8R8_USCALED_PACK32 = 53
        FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
        FORMAT_A8B8G8R8_UINT_PACK32 = 55
        FORMAT_A8B8G8R8_SINT_PACK32 = 56
        FORMAT_A8B8G8R8_SRGB_PACK32 = 57
        FORMAT_A2R10G10B10_UNORM_PACK32 = 58
        FORMAT_A2R10G10B10_SNORM_PACK32 = 59
        FORMAT_A2R10G10B10_USCALED_PACK32 = 60
        FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
        FORMAT_A2R10G10B10_UINT_PACK32 = 62
        FORMAT_A2R10G10B10_SINT_PACK32 = 63
        FORMAT_A2B10G10R10_UNORM_PACK32 = 64
        FORMAT_A2B10G10R10_SNORM_PACK32 = 65
        FORMAT_A2B10G10R10_USCALED_PACK32 = 66
        FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
        FORMAT_A2B10G10R10_UINT_PACK32 = 68
        FORMAT_A2B10G10R10_SINT_PACK32 = 69
        FORMAT_R16_UNORM = 70
        FORMAT_R16_SNORM = 71
        FORMAT_R16_USCALED = 72
        FORMAT_R16_SSCALED = 73
        FORMAT_R16_UINT = 74
        FORMAT_R16_SINT = 75
        FORMAT_R16_SFLOAT = 76
        FORMAT_R16G16_UNORM = 77
        FORMAT_R16G16_SNORM = 78
        FORMAT_R16G16_USCALED = 79
        FORMAT_R16G16_SSCALED = 80
        FORMAT_R16G16_UINT = 81
        FORMAT_R16G16_SINT = 82
        FORMAT_R16G16_SFLOAT = 83
        FORMAT_R16G16B16_UNORM = 84
        FORMAT_R16G16B16_SNORM = 85
        FORMAT_R16G16B16_USCALED = 86
        FORMAT_R16G16B16_SSCALED = 87
        FORMAT_R16G16B16_UINT = 88
        FORMAT_R16G16B16_SINT = 89
        FORMAT_R16G16B16_SFLOAT = 90
        FORMAT_R16G16B16A16_UNORM = 91
        FORMAT_R16G16B16A16_SNORM = 92
        FORMAT_R16G16B16A16_USCALED = 93
        FORMAT_R16G16B16A16_SSCALED = 94
        FORMAT_R16G16B16A16_UINT = 95
        FORMAT_R16G16B16A16_SINT = 96
        FORMAT_R16G16B16A16_SFLOAT = 97
        FORMAT_R32_UINT = 98
        FORMAT_R32_SINT = 99
        FORMAT_R32_SFLOAT = 100
        FORMAT_R32G32_UINT = 101
        FORMAT_R32G32_SINT = 102
        FORMAT_R32G32_SFLOAT = 103
        FORMAT_R32G32B32_UINT = 104
        FORMAT_R32G32B32_SINT = 105
        FORMAT_R32G32B32_SFLOAT = 106
        FORMAT_R32G32B32A32_UINT = 107
        FORMAT_R32G32B32A32_SINT = 108
        FORMAT_R32G32B32A32_SFLOAT = 109
        FORMAT_R64_UINT = 110
        FORMAT_R64_SINT = 111
        FORMAT_R64_SFLOAT = 112
        FORMAT_R64G64_UINT = 113
        FORMAT_R64G64_SINT = 114
        FORMAT_R64G64_SFLOAT = 115
        FORMAT_R64G64B64_UINT = 116
        FORMAT_R64G64B64_SINT = 117
        FORMAT_R64G64B64_SFLOAT = 118
        FORMAT_R64G64B64A64_UINT = 119
        FORMAT_R64G64B64A64_SINT = 120
        FORMAT_R64G64B64A64_SFLOAT = 121
        FORMAT_B10G11R11_UFLOAT_PACK32 = 122
        FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
        FORMAT_D16_UNORM = 124
        FORMAT_X8_D24_UNORM_PACK32 = 125
        FORMAT_D32_SFLOAT = 126
        FORMAT_S8_UINT = 127
        FORMAT_D16_UNORM_S8_UINT = 128
        FORMAT_D24_UNORM_S8_UINT = 129
        FORMAT_D32_SFLOAT_S8_UINT = 130
        FORMAT_BC1_RGB_UNORM_BLOCK = 131
        FORMAT_BC1_RGB_SRGB_BLOCK = 132
        FORMAT_BC1_RGBA_UNORM_BLOCK = 133
        FORMAT_BC1_RGBA_SRGB_BLOCK = 134
        FORMAT_BC2_UNORM_BLOCK = 135
        FORMAT_BC2_SRGB_BLOCK = 136
        FORMAT_BC3_UNORM_BLOCK = 137
        FORMAT_BC3_SRGB_BLOCK = 138
        FORMAT_BC4_UNORM_BLOCK = 139
        FORMAT_BC4_SNORM_BLOCK = 140
        FORMAT_BC5_UNORM_BLOCK = 141
        FORMAT_BC5_SNORM_BLOCK = 142
        FORMAT_BC6H_UFLOAT_BLOCK = 143
        FORMAT_BC6H_SFLOAT_BLOCK = 144
        FORMAT_BC7_UNORM_BLOCK = 145
        FORMAT_BC7_SRGB_BLOCK = 146
        FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
        FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
        FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
        FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
        FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
        FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
        FORMAT_EAC_R11_UNORM_BLOCK = 153
        FORMAT_EAC_R11_SNORM_BLOCK = 154
        FORMAT_EAC_R11G11_UNORM_BLOCK = 155
        FORMAT_EAC_R11G11_SNORM_BLOCK = 156
        FORMAT_ASTC_4x4_UNORM_BLOCK = 157
        FORMAT_ASTC_4x4_SRGB_BLOCK = 158
        FORMAT_ASTC_5x4_UNORM_BLOCK = 159
        FORMAT_ASTC_5x4_SRGB_BLOCK = 160
        FORMAT_ASTC_5x5_UNORM_BLOCK = 161
        FORMAT_ASTC_5x5_SRGB_BLOCK = 162
        FORMAT_ASTC_6x5_UNORM_BLOCK = 163
        FORMAT_ASTC_6x5_SRGB_BLOCK = 164
        FORMAT_ASTC_6x6_UNORM_BLOCK = 165
        FORMAT_ASTC_6x6_SRGB_BLOCK = 166
        FORMAT_ASTC_8x5_UNORM_BLOCK = 167
        FORMAT_ASTC_8x5_SRGB_BLOCK = 168
        FORMAT_ASTC_8x6_UNORM_BLOCK = 169
        FORMAT_ASTC_8x6_SRGB_BLOCK = 170
        FORMAT_ASTC_8x8_UNORM_BLOCK = 171
        FORMAT_ASTC_8x8_SRGB_BLOCK = 172
        FORMAT_ASTC_10x5_UNORM_BLOCK = 173
        FORMAT_ASTC_10x5_SRGB_BLOCK = 174
        FORMAT_ASTC_10x6_UNORM_BLOCK = 175
        FORMAT_ASTC_10x6_SRGB_BLOCK = 176
        FORMAT_ASTC_10x8_UNORM_BLOCK = 177
        FORMAT_ASTC_10x8_SRGB_BLOCK = 178
        FORMAT_ASTC_10x10_UNORM_BLOCK = 179
        FORMAT_ASTC_10x10_SRGB_BLOCK = 180
        FORMAT_ASTC_12x10_UNORM_BLOCK = 181
        FORMAT_ASTC_12x10_SRGB_BLOCK = 182
        FORMAT_ASTC_12x12_UNORM_BLOCK = 183
        FORMAT_ASTC_12x12_SRGB_BLOCK = 184
        FORMAT_G8B8G8R8_422_UNORM = 1000156000
        FORMAT_B8G8R8G8_422_UNORM = 1000156001
        FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
        FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
        FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
        FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
        FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
        FORMAT_R10X6_UNORM_PACK16 = 1000156007
        FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
        FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
        FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
        FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
        FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
        FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
        FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
        FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
        FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
        FORMAT_R12X4_UNORM_PACK16 = 1000156017
        FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
        FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
        FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
        FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
        FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
        FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
        FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
        FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
        FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
        FORMAT_G16B16G16R16_422_UNORM = 1000156027
        FORMAT_B16G16R16G16_422_UNORM = 1000156028
        FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
        FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
        FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
        FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
        FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
        FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
        FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
        FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
        FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
        FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
        FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
        FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
        FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
        FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
        FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
        FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
        FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
        FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
        FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
        FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
        FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
        FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
        FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
        FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
        FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
        FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
        FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
        FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000
        FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001
        FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002
        FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003
        FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004
        FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005
        FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006
        FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007
        FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008
        FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009
        FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010
        FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011
        FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012
        FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013
        FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014
        FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015
        FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016
        FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017
        FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018
        FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019
        FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020
        FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021
        FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022
        FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023
        FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024
        FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025
        FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026
        FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027
        FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028
        FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029
        FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000
        FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001
        FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002
        FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003
        FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
        FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
    end

@cenum StructureType::UInt32 begin
        STRUCTURE_TYPE_APPLICATION_INFO = 0
        STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
        STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
        STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
        STRUCTURE_TYPE_SUBMIT_INFO = 4
        STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
        STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
        STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
        STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
        STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
        STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
        STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
        STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
        STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
        STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
        STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
        STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
        STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
        STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
        STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
        STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
        STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
        STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
        STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
        STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
        STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
        STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
        STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
        STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
        STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
        STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
        STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
        STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
        STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
        STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
        STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
        STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
        STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
        STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
        STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
        STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
        STRUCTURE_TYPE_MEMORY_BARRIER = 46
        STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
        STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
        STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
        STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
        STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
        STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
        STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
        STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
        STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
        STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
        STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
        STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
        STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
        STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
        STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
        STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
        STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
        STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
        STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
        STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
        STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
        STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
        STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
        STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
        STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
        STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
        STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
        STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
        STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
        STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
        STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
        STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
        STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
        STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
        STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
        STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
        STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
        STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
        STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
        STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
        STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
        STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
        STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
        STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
        STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
        STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
        STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
        STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
        STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
        STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
        STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
        STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
        STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
        STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
        STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
        STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
        STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
        STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
        STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
        STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
        STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
        STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
        STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
        STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
        STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
        STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
        STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
        STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
        STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
        STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
        STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
        STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
        STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
        STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
        STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
        STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
        STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
        STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
        STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
        STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
        STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
        STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
        STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000
        STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002
        STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
        STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
        STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
        STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
        STRUCTURE_TYPE_VIDEO_PROFILE_KHR = 1000023000
        STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001
        STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR = 1000023002
        STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR = 1000023003
        STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR = 1000023004
        STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005
        STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006
        STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007
        STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008
        STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009
        STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010
        STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR = 1000023011
        STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000023012
        STRUCTURE_TYPE_VIDEO_PROFILES_KHR = 1000023013
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014
        STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015
        STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000
        STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000
        STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
        STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
        STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = 1000038001
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038002
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038003
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038004
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038005
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT = 1000038006
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT = 1000038007
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT = 1000038008
        STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT = 1000040001
        STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040002
        STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT = 1000040003
        STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT = 1000040004
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040005
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040006
        STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040007
        STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
        STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
        STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
        STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
        STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
        STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
        STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
        STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
        STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
        STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
        STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
        STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
        STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
        STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
        STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
        STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
        STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
        STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
        STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
        STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
        STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
        STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
        STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
        STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
        STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
        STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
        STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
        STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
        STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
        STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
        STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
        STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
        STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
        STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
        STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
        STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
        STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
        STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
        STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
        STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
        STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
        STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
        STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
        STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
        STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
        STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
        STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
        STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
        STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
        STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
        STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
        STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
        STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
        STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
        STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
        STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
        STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
        STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
        STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
        STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
        STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
        STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
        STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
        STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
        STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
        STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
        STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
        STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
        STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
        STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
        STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
        STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
        STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
        STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
        STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
        STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
        STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
        STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
        STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
        STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
        STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
        STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
        STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
        STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
        STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
        STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
        STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT = 1000187001
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187002
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187003
        STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT = 1000187004
        STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187005
        STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187006
        STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
        STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
        STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
        STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
        STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
        STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
        STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
        STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
        STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
        STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
        STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
        STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
        STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
        STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
        STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000
        STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
        STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
        STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
        STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
        STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
        STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
        STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
        STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
        STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
        STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
        STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
        STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
        STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
        STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
        STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
        STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
        STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
        STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
        STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
        STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
        STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
        STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
        STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
        STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
        STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
        STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
        STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
        STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
        STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
        STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
        STRUCTURE_TYPE_RESERVED_QCOM = 1000309000
        STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000
        STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001
        STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002
        STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003
        STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004
        STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005
        STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007
        STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
        STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
        STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
        STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
        STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
        STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
        STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
        STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
        STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
        STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
        STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
        STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
        STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
        STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
        STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
        STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
        STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
        STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
        STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
        STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
        STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
        STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
        STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
        STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
        STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
        STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
    end

@cenum SubpassContents::UInt32 begin
        SUBPASS_CONTENTS_INLINE = 0
        SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    end

@cenum Result::Int32 begin
        SUCCESS = 0
        NOT_READY = 1
        TIMEOUT = 2
        EVENT_SET = 3
        EVENT_RESET = 4
        INCOMPLETE = 5
        ERROR_OUT_OF_HOST_MEMORY = -1
        ERROR_OUT_OF_DEVICE_MEMORY = -2
        ERROR_INITIALIZATION_FAILED = -3
        ERROR_DEVICE_LOST = -4
        ERROR_MEMORY_MAP_FAILED = -5
        ERROR_LAYER_NOT_PRESENT = -6
        ERROR_EXTENSION_NOT_PRESENT = -7
        ERROR_FEATURE_NOT_PRESENT = -8
        ERROR_INCOMPATIBLE_DRIVER = -9
        ERROR_TOO_MANY_OBJECTS = -10
        ERROR_FORMAT_NOT_SUPPORTED = -11
        ERROR_FRAGMENTED_POOL = -12
        ERROR_UNKNOWN = -13
        ERROR_OUT_OF_POOL_MEMORY = -1000069000
        ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
        ERROR_FRAGMENTATION = -1000161000
        ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
        ERROR_SURFACE_LOST_KHR = -1000000000
        ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
        SUBOPTIMAL_KHR = 1000001003
        ERROR_OUT_OF_DATE_KHR = -1000001004
        ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
        ERROR_VALIDATION_FAILED_EXT = -1000011001
        ERROR_INVALID_SHADER_NV = -1000012000
        ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
        ERROR_NOT_PERMITTED_EXT = -1000174001
        ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
        THREAD_IDLE_KHR = 1000268000
        THREAD_DONE_KHR = 1000268001
        OPERATION_DEFERRED_KHR = 1000268002
        OPERATION_NOT_DEFERRED_KHR = 1000268003
        PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    end

@cenum DynamicState::UInt32 begin
        DYNAMIC_STATE_VIEWPORT = 0
        DYNAMIC_STATE_SCISSOR = 1
        DYNAMIC_STATE_LINE_WIDTH = 2
        DYNAMIC_STATE_DEPTH_BIAS = 3
        DYNAMIC_STATE_BLEND_CONSTANTS = 4
        DYNAMIC_STATE_DEPTH_BOUNDS = 5
        DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
        DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
        DYNAMIC_STATE_STENCIL_REFERENCE = 8
        DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
        DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
        DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
        DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
        DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
        DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
        DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
        DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
        DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
        DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
        DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
        DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
        DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
        DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
        DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
        DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
        DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
        DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
        DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
        DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
        DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
        DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
        DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
        DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001
        DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002
        DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
        DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004
        DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
    end

@cenum DescriptorUpdateTemplateType::UInt32 begin
        DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
        DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
    end

@cenum ObjectType::UInt32 begin
        OBJECT_TYPE_UNKNOWN = 0
        OBJECT_TYPE_INSTANCE = 1
        OBJECT_TYPE_PHYSICAL_DEVICE = 2
        OBJECT_TYPE_DEVICE = 3
        OBJECT_TYPE_QUEUE = 4
        OBJECT_TYPE_SEMAPHORE = 5
        OBJECT_TYPE_COMMAND_BUFFER = 6
        OBJECT_TYPE_FENCE = 7
        OBJECT_TYPE_DEVICE_MEMORY = 8
        OBJECT_TYPE_BUFFER = 9
        OBJECT_TYPE_IMAGE = 10
        OBJECT_TYPE_EVENT = 11
        OBJECT_TYPE_QUERY_POOL = 12
        OBJECT_TYPE_BUFFER_VIEW = 13
        OBJECT_TYPE_IMAGE_VIEW = 14
        OBJECT_TYPE_SHADER_MODULE = 15
        OBJECT_TYPE_PIPELINE_CACHE = 16
        OBJECT_TYPE_PIPELINE_LAYOUT = 17
        OBJECT_TYPE_RENDER_PASS = 18
        OBJECT_TYPE_PIPELINE = 19
        OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
        OBJECT_TYPE_SAMPLER = 21
        OBJECT_TYPE_DESCRIPTOR_POOL = 22
        OBJECT_TYPE_DESCRIPTOR_SET = 23
        OBJECT_TYPE_FRAMEBUFFER = 24
        OBJECT_TYPE_COMMAND_POOL = 25
        OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
        OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
        OBJECT_TYPE_SURFACE_KHR = 1000000000
        OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
        OBJECT_TYPE_DISPLAY_KHR = 1000002000
        OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
        OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
        OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000
        OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001
        OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
        OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
        OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
        OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
        OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
        OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
        OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
    end

@cenum SemaphoreType::UInt32 begin
        SEMAPHORE_TYPE_BINARY = 0
        SEMAPHORE_TYPE_TIMELINE = 1
    end

@cenum PresentModeKHR::UInt32 begin
        PRESENT_MODE_IMMEDIATE_KHR = 0
        PRESENT_MODE_MAILBOX_KHR = 1
        PRESENT_MODE_FIFO_KHR = 2
        PRESENT_MODE_FIFO_RELAXED_KHR = 3
        PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
        PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
    end

@cenum ColorSpaceKHR::UInt32 begin
        COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
        COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
        COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
        COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
        COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
        COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
        COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
        COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
        COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
        COLOR_SPACE_DOLBYVISION_EXT = 1000104009
        COLOR_SPACE_HDR10_HLG_EXT = 1000104010
        COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
        COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
        COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
        COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
        COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
    end

@cenum TimeDomainEXT::UInt32 begin
        TIME_DOMAIN_DEVICE_EXT = 0
        TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
        TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
        TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
    end

@cenum DebugReportObjectTypeEXT::UInt32 begin
        DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
        DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
        DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
        DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
        DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
        DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
        DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
        DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
        DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
        DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
        DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
        DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
        DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
        DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
        DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
        DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
        DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
        DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
        DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
        DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
        DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
        DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
        DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
        DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
        DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
        DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
        DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
        DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
        DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
    end

@cenum DeviceMemoryReportEventTypeEXT::UInt32 begin
        DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
        DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
        DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
        DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
        DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
    end

@cenum RasterizationOrderAMD::UInt32 begin
        RASTERIZATION_ORDER_STRICT_AMD = 0
        RASTERIZATION_ORDER_RELAXED_AMD = 1
    end

@cenum ValidationCheckEXT::UInt32 begin
        VALIDATION_CHECK_ALL_EXT = 0
        VALIDATION_CHECK_SHADERS_EXT = 1
    end

@cenum ValidationFeatureEnableEXT::UInt32 begin
        VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
        VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
        VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
        VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
        VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
    end

@cenum ValidationFeatureDisableEXT::UInt32 begin
        VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
        VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
        VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
        VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
        VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
        VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
        VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
    end

@cenum IndirectCommandsTokenTypeNV::UInt32 begin
        INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
        INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
        INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
        INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
        INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
    end

@cenum DisplayPowerStateEXT::UInt32 begin
        DISPLAY_POWER_STATE_OFF_EXT = 0
        DISPLAY_POWER_STATE_SUSPEND_EXT = 1
        DISPLAY_POWER_STATE_ON_EXT = 2
    end

@cenum DeviceEventTypeEXT::UInt32 begin
        DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
    end

@cenum DisplayEventTypeEXT::UInt32 begin
        DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
    end

@cenum ViewportCoordinateSwizzleNV::UInt32 begin
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
    end

@cenum DiscardRectangleModeEXT::UInt32 begin
        DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
        DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
    end

@cenum PointClippingBehavior::UInt32 begin
        POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
        POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
    end

@cenum SamplerReductionMode::UInt32 begin
        SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
        SAMPLER_REDUCTION_MODE_MIN = 1
        SAMPLER_REDUCTION_MODE_MAX = 2
    end

@cenum TessellationDomainOrigin::UInt32 begin
        TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
        TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
    end

@cenum SamplerYcbcrModelConversion::UInt32 begin
        SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
    end

@cenum SamplerYcbcrRange::UInt32 begin
        SAMPLER_YCBCR_RANGE_ITU_FULL = 0
        SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
    end

@cenum ChromaLocation::UInt32 begin
        CHROMA_LOCATION_COSITED_EVEN = 0
        CHROMA_LOCATION_MIDPOINT = 1
    end

@cenum BlendOverlapEXT::UInt32 begin
        BLEND_OVERLAP_UNCORRELATED_EXT = 0
        BLEND_OVERLAP_DISJOINT_EXT = 1
        BLEND_OVERLAP_CONJOINT_EXT = 2
    end

@cenum CoverageModulationModeNV::UInt32 begin
        COVERAGE_MODULATION_MODE_NONE_NV = 0
        COVERAGE_MODULATION_MODE_RGB_NV = 1
        COVERAGE_MODULATION_MODE_ALPHA_NV = 2
        COVERAGE_MODULATION_MODE_RGBA_NV = 3
    end

@cenum CoverageReductionModeNV::UInt32 begin
        COVERAGE_REDUCTION_MODE_MERGE_NV = 0
        COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
    end

@cenum ValidationCacheHeaderVersionEXT::UInt32 begin
        VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
    end

@cenum ShaderInfoTypeAMD::UInt32 begin
        SHADER_INFO_TYPE_STATISTICS_AMD = 0
        SHADER_INFO_TYPE_BINARY_AMD = 1
        SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
    end

@cenum QueueGlobalPriorityEXT::UInt32 begin
        QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
        QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
        QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
        QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
    end

@cenum ConservativeRasterizationModeEXT::UInt32 begin
        CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
        CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
        CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
    end

@cenum VendorId::UInt32 begin
        VENDOR_ID_VIV = 0x00010001
        VENDOR_ID_VSI = 0x00010002
        VENDOR_ID_KAZAN = 0x00010003
        VENDOR_ID_CODEPLAY = 0x00010004
        VENDOR_ID_MESA = 0x00010005
        VENDOR_ID_POCL = 0x00010006
    end

@cenum DriverId::UInt32 begin
        DRIVER_ID_AMD_PROPRIETARY = 1
        DRIVER_ID_AMD_OPEN_SOURCE = 2
        DRIVER_ID_MESA_RADV = 3
        DRIVER_ID_NVIDIA_PROPRIETARY = 4
        DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
        DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
        DRIVER_ID_IMAGINATION_PROPRIETARY = 7
        DRIVER_ID_QUALCOMM_PROPRIETARY = 8
        DRIVER_ID_ARM_PROPRIETARY = 9
        DRIVER_ID_GOOGLE_SWIFTSHADER = 10
        DRIVER_ID_GGP_PROPRIETARY = 11
        DRIVER_ID_BROADCOM_PROPRIETARY = 12
        DRIVER_ID_MESA_LLVMPIPE = 13
        DRIVER_ID_MOLTENVK = 14
        DRIVER_ID_COREAVI_PROPRIETARY = 15
    end

@cenum ShadingRatePaletteEntryNV::UInt32 begin
        SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
        SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
        SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
        SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
        SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
    end

@cenum CoarseSampleOrderTypeNV::UInt32 begin
        COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
        COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
        COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
        COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
    end

@cenum CopyAccelerationStructureModeKHR::UInt32 begin
        COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
        COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
        COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
        COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
    end

@cenum BuildAccelerationStructureModeKHR::UInt32 begin
        BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
        BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
    end

@cenum AccelerationStructureTypeKHR::UInt32 begin
        ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
        ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
        ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
    end

@cenum GeometryTypeKHR::UInt32 begin
        GEOMETRY_TYPE_TRIANGLES_KHR = 0
        GEOMETRY_TYPE_AABBS_KHR = 1
        GEOMETRY_TYPE_INSTANCES_KHR = 2
    end

@cenum AccelerationStructureMemoryRequirementsTypeNV::UInt32 begin
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
    end

@cenum AccelerationStructureBuildTypeKHR::UInt32 begin
        ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
        ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
        ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
    end

@cenum RayTracingShaderGroupTypeKHR::UInt32 begin
        RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
        RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
        RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
    end

@cenum AccelerationStructureCompatibilityKHR::UInt32 begin
        ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
        ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
    end

@cenum ShaderGroupShaderKHR::UInt32 begin
        SHADER_GROUP_SHADER_GENERAL_KHR = 0
        SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
        SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
        SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
    end

@cenum MemoryOverallocationBehaviorAMD::UInt32 begin
        MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
        MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
        MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
    end

@cenum ScopeNV::UInt32 begin
        SCOPE_DEVICE_NV = 1
        SCOPE_WORKGROUP_NV = 2
        SCOPE_SUBGROUP_NV = 3
        SCOPE_QUEUE_FAMILY_NV = 5
    end

@cenum ComponentTypeNV::UInt32 begin
        COMPONENT_TYPE_FLOAT16_NV = 0
        COMPONENT_TYPE_FLOAT32_NV = 1
        COMPONENT_TYPE_FLOAT64_NV = 2
        COMPONENT_TYPE_SINT8_NV = 3
        COMPONENT_TYPE_SINT16_NV = 4
        COMPONENT_TYPE_SINT32_NV = 5
        COMPONENT_TYPE_SINT64_NV = 6
        COMPONENT_TYPE_UINT8_NV = 7
        COMPONENT_TYPE_UINT16_NV = 8
        COMPONENT_TYPE_UINT32_NV = 9
        COMPONENT_TYPE_UINT64_NV = 10
    end

@cenum FullScreenExclusiveEXT::UInt32 begin
        FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0
        FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1
        FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2
        FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3
    end

@cenum PerformanceCounterScopeKHR::UInt32 begin
        PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
        PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
        PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
    end

@cenum PerformanceCounterUnitKHR::UInt32 begin
        PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
        PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
        PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
        PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
        PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
        PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
        PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
        PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
        PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
        PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
        PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
    end

@cenum PerformanceCounterStorageKHR::UInt32 begin
        PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
        PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
        PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
        PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
        PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
        PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
    end

@cenum PerformanceConfigurationTypeINTEL::UInt32 begin
        PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
    end

@cenum QueryPoolSamplingModeINTEL::UInt32 begin
        QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
    end

@cenum PerformanceOverrideTypeINTEL::UInt32 begin
        PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
        PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
    end

@cenum PerformanceParameterTypeINTEL::UInt32 begin
        PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
        PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
    end

@cenum PerformanceValueTypeINTEL::UInt32 begin
        PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
        PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
        PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
        PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
        PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
    end

@cenum ShaderFloatControlsIndependence::UInt32 begin
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
    end

@cenum PipelineExecutableStatisticFormatKHR::UInt32 begin
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
    end

@cenum LineRasterizationModeEXT::UInt32 begin
        LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
        LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
        LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
        LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
    end

@cenum FragmentShadingRateCombinerOpKHR::UInt32 begin
        FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
        FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
        FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
        FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
        FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
    end

@cenum FragmentShadingRateNV::UInt32 begin
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
        FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
        FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
        FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
        FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
        FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
    end

@cenum FragmentShadingRateTypeNV::UInt32 begin
        FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
        FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
    end

@cenum ProvokingVertexModeEXT::UInt32 begin
        PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
        PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
    end

@cenum QueryResultStatusKHR::Int32 begin
        QUERY_RESULT_STATUS_ERROR_KHR = -1
        QUERY_RESULT_STATUS_NOT_READY_KHR = 0
        QUERY_RESULT_STATUS_COMPLETE_KHR = 1
    end


@bitmask_flag PipelineCacheCreateFlag::UInt32 begin
        PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT = 2
        PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
        PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT = 4
    end

@bitmask_flag QueueFlag::UInt32 begin
        QUEUE_GRAPHICS_BIT = 1
        QUEUE_COMPUTE_BIT = 2
        QUEUE_TRANSFER_BIT = 4
        QUEUE_SPARSE_BINDING_BIT = 8
        QUEUE_PROTECTED_BIT = 16
        QUEUE_VIDEO_DECODE_BIT_KHR = 32
        QUEUE_VIDEO_ENCODE_BIT_KHR = 64
    end

@bitmask_flag CullModeFlag::UInt32 begin
        CULL_MODE_NONE = 1
        CULL_MODE_FRONT_BIT = 1
        CULL_MODE_BACK_BIT = 2
        CULL_MODE_FRONT_AND_BACK = 8
    end

@bitmask_flag RenderPassCreateFlag::UInt32 begin
        RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1
        RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
    end

@bitmask_flag DeviceQueueCreateFlag::UInt32 begin
        DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
    end

@bitmask_flag MemoryPropertyFlag::UInt32 begin
        MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
        MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
        MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
        MEMORY_PROPERTY_HOST_CACHED_BIT = 8
        MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
        MEMORY_PROPERTY_PROTECTED_BIT = 32
        MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
        MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
        MEMORY_PROPERTY_RESERVED_8_BIT_NV = 256
    end

@bitmask_flag MemoryHeapFlag::UInt32 begin
        MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
        MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
        MEMORY_HEAP_RESERVED_2_BIT_KHR = 4
    end

@bitmask_flag AccessFlag::UInt32 begin
        ACCESS_INDIRECT_COMMAND_READ_BIT = 1
        ACCESS_INDEX_READ_BIT = 2
        ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
        ACCESS_UNIFORM_READ_BIT = 8
        ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
        ACCESS_SHADER_READ_BIT = 32
        ACCESS_SHADER_WRITE_BIT = 64
        ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
        ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
        ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
        ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
        ACCESS_TRANSFER_READ_BIT = 2048
        ACCESS_TRANSFER_WRITE_BIT = 4096
        ACCESS_HOST_READ_BIT = 8192
        ACCESS_HOST_WRITE_BIT = 16384
        ACCESS_MEMORY_READ_BIT = 32768
        ACCESS_MEMORY_WRITE_BIT = 65536
        ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
        ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
        ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
        ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
        ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
        ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
        ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
        ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
        ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
        ACCESS_NONE_KHR = 1
    end

@bitmask_flag BufferUsageFlag::UInt32 begin
        BUFFER_USAGE_TRANSFER_SRC_BIT = 1
        BUFFER_USAGE_TRANSFER_DST_BIT = 2
        BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
        BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
        BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
        BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
        BUFFER_USAGE_INDEX_BUFFER_BIT = 64
        BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
        BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
        BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
        BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
        BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
        BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
        BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
        BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
        BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
        BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
        BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
        BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
        BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
        BUFFER_USAGE_RESERVED_18_BIT_QCOM = 262144
    end

@bitmask_flag BufferCreateFlag::UInt32 begin
        BUFFER_CREATE_SPARSE_BINDING_BIT = 1
        BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
        BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
        BUFFER_CREATE_PROTECTED_BIT = 8
        BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
    end

@bitmask_flag ShaderStageFlag::UInt32 begin
        SHADER_STAGE_VERTEX_BIT = 1
        SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
        SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
        SHADER_STAGE_GEOMETRY_BIT = 8
        SHADER_STAGE_FRAGMENT_BIT = 16
        SHADER_STAGE_COMPUTE_BIT = 32
        SHADER_STAGE_ALL_GRAPHICS = 2147483648
        SHADER_STAGE_ALL = 0
        SHADER_STAGE_RAYGEN_BIT_KHR = 256
        SHADER_STAGE_ANY_HIT_BIT_KHR = 512
        SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
        SHADER_STAGE_MISS_BIT_KHR = 2048
        SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
        SHADER_STAGE_CALLABLE_BIT_KHR = 8192
        SHADER_STAGE_TASK_BIT_NV = 64
        SHADER_STAGE_MESH_BIT_NV = 128
    end

@bitmask_flag ImageUsageFlag::UInt32 begin
        IMAGE_USAGE_TRANSFER_SRC_BIT = 1
        IMAGE_USAGE_TRANSFER_DST_BIT = 2
        IMAGE_USAGE_SAMPLED_BIT = 4
        IMAGE_USAGE_STORAGE_BIT = 8
        IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
        IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
        IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
        IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
        IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024
        IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048
        IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
        IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192
        IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384
        IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
        IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
        IMAGE_USAGE_RESERVED_16_BIT_QCOM = 65536
        IMAGE_USAGE_RESERVED_17_BIT_QCOM = 131072
        IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    end

@bitmask_flag ImageCreateFlag::UInt32 begin
        IMAGE_CREATE_SPARSE_BINDING_BIT = 1
        IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
        IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
        IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
        IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
        IMAGE_CREATE_ALIAS_BIT = 1024
        IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
        IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
        IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
        IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
        IMAGE_CREATE_PROTECTED_BIT = 2048
        IMAGE_CREATE_DISJOINT_BIT = 512
        IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
        IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
        IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
    end

@bitmask_flag ImageViewCreateFlag::UInt32 begin
        IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
        IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
    end

@bitmask_flag SamplerCreateFlag::UInt32 begin
        SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
        SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
    end

@bitmask_flag PipelineCreateFlag::UInt32 begin
        PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
        PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
        PIPELINE_CREATE_DERIVATIVE_BIT = 4
        PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
        PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
        PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
        PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
        PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
        PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
        PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
        PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
        PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
        PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
        PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
        PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
        PIPELINE_CREATE_RESERVED_BIT_20_NV = 1048576
    end

@bitmask_flag PipelineShaderStageCreateFlag::UInt32 begin
        PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 4
        PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
        PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
        PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR = 8
    end

@bitmask_flag ColorComponentFlag::UInt32 begin
        COLOR_COMPONENT_R_BIT = 1
        COLOR_COMPONENT_G_BIT = 2
        COLOR_COMPONENT_B_BIT = 4
        COLOR_COMPONENT_A_BIT = 8
    end

@bitmask_flag FenceCreateFlag::UInt32 begin
        FENCE_CREATE_SIGNALED_BIT = 1
    end

@bitmask_flag FormatFeatureFlag::UInt32 begin
        FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
        FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
        FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
        FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
        FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
        FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
        FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
        FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
        FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
        FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
        FORMAT_FEATURE_BLIT_SRC_BIT = 1024
        FORMAT_FEATURE_BLIT_DST_BIT = 2048
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
        FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
        FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
        FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
        FORMAT_FEATURE_DISJOINT_BIT = 4194304
        FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
        FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432
        FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864
        FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728
        FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456
        FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
        FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
        FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
    end

@bitmask_flag QueryControlFlag::UInt32 begin
        QUERY_CONTROL_PRECISE_BIT = 1
    end

@bitmask_flag QueryResultFlag::UInt32 begin
        QUERY_RESULT_64_BIT = 1
        QUERY_RESULT_WAIT_BIT = 2
        QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
        QUERY_RESULT_PARTIAL_BIT = 8
        QUERY_RESULT_WITH_STATUS_BIT_KHR = 16
    end

@bitmask_flag CommandBufferUsageFlag::UInt32 begin
        COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
        COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
        COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
    end

@bitmask_flag QueryPipelineStatisticFlag::UInt32 begin
        QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
        QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
        QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
        QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
        QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
        QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
        QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
        QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
        QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
        QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
        QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
    end

@bitmask_flag ImageAspectFlag::UInt32 begin
        IMAGE_ASPECT_COLOR_BIT = 1
        IMAGE_ASPECT_DEPTH_BIT = 2
        IMAGE_ASPECT_STENCIL_BIT = 4
        IMAGE_ASPECT_METADATA_BIT = 8
        IMAGE_ASPECT_PLANE_0_BIT = 16
        IMAGE_ASPECT_PLANE_1_BIT = 32
        IMAGE_ASPECT_PLANE_2_BIT = 64
        IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
        IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
        IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
        IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
    end

@bitmask_flag SparseImageFormatFlag::UInt32 begin
        SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
        SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
        SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
    end

@bitmask_flag SparseMemoryBindFlag::UInt32 begin
        SPARSE_MEMORY_BIND_METADATA_BIT = 1
    end

@bitmask_flag PipelineStageFlag::UInt32 begin
        PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
        PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
        PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
        PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
        PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
        PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
        PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
        PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
        PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
        PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
        PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
        PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
        PIPELINE_STAGE_TRANSFER_BIT = 4096
        PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
        PIPELINE_STAGE_HOST_BIT = 16384
        PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
        PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
        PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
        PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
        PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
        PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
        PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
        PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
        PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
        PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
        PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
        PIPELINE_STAGE_NONE_KHR = 1
    end

@bitmask_flag CommandPoolCreateFlag::UInt32 begin
        COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
        COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
        COMMAND_POOL_CREATE_PROTECTED_BIT = 4
    end

@bitmask_flag CommandPoolResetFlag::UInt32 begin
        COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
    end

@bitmask_flag CommandBufferResetFlag::UInt32 begin
        COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
    end

@bitmask_flag SampleCountFlag::UInt32 begin
        SAMPLE_COUNT_1_BIT = 1
        SAMPLE_COUNT_2_BIT = 2
        SAMPLE_COUNT_4_BIT = 4
        SAMPLE_COUNT_8_BIT = 8
        SAMPLE_COUNT_16_BIT = 16
        SAMPLE_COUNT_32_BIT = 32
        SAMPLE_COUNT_64_BIT = 64
    end

@bitmask_flag AttachmentDescriptionFlag::UInt32 begin
        ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
    end

@bitmask_flag StencilFaceFlag::UInt32 begin
        STENCIL_FACE_FRONT_BIT = 1
        STENCIL_FACE_BACK_BIT = 2
        STENCIL_FACE_FRONT_AND_BACK = 8
    end

@bitmask_flag DescriptorPoolCreateFlag::UInt32 begin
        DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
        DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
        DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
    end

@bitmask_flag DependencyFlag::UInt32 begin
        DEPENDENCY_BY_REGION_BIT = 1
        DEPENDENCY_DEVICE_GROUP_BIT = 4
        DEPENDENCY_VIEW_LOCAL_BIT = 2
    end

@bitmask_flag SemaphoreWaitFlag::UInt32 begin
        SEMAPHORE_WAIT_ANY_BIT = 1
    end

@bitmask_flag DisplayPlaneAlphaFlagKHR::UInt32 begin
        DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
        DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
        DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
        DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
    end

@bitmask_flag CompositeAlphaFlagKHR::UInt32 begin
        COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
        COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
        COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
        COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
    end

@bitmask_flag SurfaceTransformFlagKHR::UInt32 begin
        SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
        SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
        SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
        SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
        SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
    end

@bitmask_flag DebugReportFlagEXT::UInt32 begin
        DEBUG_REPORT_INFORMATION_BIT_EXT = 1
        DEBUG_REPORT_WARNING_BIT_EXT = 2
        DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
        DEBUG_REPORT_ERROR_BIT_EXT = 8
        DEBUG_REPORT_DEBUG_BIT_EXT = 16
    end

@bitmask_flag ExternalMemoryHandleTypeFlagNV::UInt32 begin
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
    end

@bitmask_flag ExternalMemoryFeatureFlagNV::UInt32 begin
        EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
        EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
        EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
    end

@bitmask_flag SubgroupFeatureFlag::UInt32 begin
        SUBGROUP_FEATURE_BASIC_BIT = 1
        SUBGROUP_FEATURE_VOTE_BIT = 2
        SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
        SUBGROUP_FEATURE_BALLOT_BIT = 8
        SUBGROUP_FEATURE_SHUFFLE_BIT = 16
        SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
        SUBGROUP_FEATURE_CLUSTERED_BIT = 64
        SUBGROUP_FEATURE_QUAD_BIT = 128
        SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
    end

@bitmask_flag IndirectCommandsLayoutUsageFlagNV::UInt32 begin
        INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
        INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
        INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
    end

@bitmask_flag IndirectStateFlagNV::UInt32 begin
        INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
    end

@bitmask_flag PrivateDataSlotCreateFlagEXT::UInt32 begin
    end

@bitmask_flag DescriptorSetLayoutCreateFlag::UInt32 begin
        DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
        DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
        DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
    end

@bitmask_flag ExternalMemoryHandleTypeFlag::UInt32 begin
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
        EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
        EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
        EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
        EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
        EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
        EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_12_BIT_NV = 4096
    end

@bitmask_flag ExternalMemoryFeatureFlag::UInt32 begin
        EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
        EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
        EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
    end

@bitmask_flag ExternalSemaphoreHandleTypeFlag::UInt32 begin
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_6_BIT_NV = 64
    end

@bitmask_flag ExternalSemaphoreFeatureFlag::UInt32 begin
        EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
        EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
    end

@bitmask_flag SemaphoreImportFlag::UInt32 begin
        SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
    end

@bitmask_flag ExternalFenceHandleTypeFlag::UInt32 begin
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
        EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV = 16
        EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32
    end

@bitmask_flag ExternalFenceFeatureFlag::UInt32 begin
        EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
        EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
    end

@bitmask_flag FenceImportFlag::UInt32 begin
        FENCE_IMPORT_TEMPORARY_BIT = 1
    end

@bitmask_flag SurfaceCounterFlagEXT::UInt32 begin
        SURFACE_COUNTER_VBLANK_BIT_EXT = 1
    end

@bitmask_flag PeerMemoryFeatureFlag::UInt32 begin
        PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
        PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
        PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
        PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
    end

@bitmask_flag MemoryAllocateFlag::UInt32 begin
        MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
        MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
        MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
    end

@bitmask_flag DeviceGroupPresentModeFlagKHR::UInt32 begin
        DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
        DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
        DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
        DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
    end

@bitmask_flag SwapchainCreateFlagKHR::UInt32 begin
        SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
        SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
        SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
        SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
    end

@bitmask_flag SubpassDescriptionFlag::UInt32 begin
        SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
        SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
        SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
        SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
    end

@bitmask_flag DebugUtilsMessageSeverityFlagEXT::UInt32 begin
        DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
        DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
        DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
        DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
    end

@bitmask_flag DebugUtilsMessageTypeFlagEXT::UInt32 begin
        DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
        DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
        DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
    end

@bitmask_flag DescriptorBindingFlag::UInt32 begin
        DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
        DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
        DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
        DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
        DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM = 16
    end

@bitmask_flag ConditionalRenderingFlagEXT::UInt32 begin
        CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
    end

@bitmask_flag ResolveModeFlag::UInt32 begin
        RESOLVE_MODE_NONE = 1
        RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
        RESOLVE_MODE_AVERAGE_BIT = 2
        RESOLVE_MODE_MIN_BIT = 4
        RESOLVE_MODE_MAX_BIT = 8
    end

@bitmask_flag GeometryInstanceFlagKHR::UInt32 begin
        GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
        GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
        GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
        GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
    end

@bitmask_flag GeometryFlagKHR::UInt32 begin
        GEOMETRY_OPAQUE_BIT_KHR = 1
        GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
    end

@bitmask_flag BuildAccelerationStructureFlagKHR::UInt32 begin
        BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
        BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
        BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
        BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
        BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
        BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_5_NV = 32
    end

@bitmask_flag AccelerationStructureCreateFlagKHR::UInt32 begin
        ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
        ACCELERATION_STRUCTURE_CREATE_RESERVED_BIT_2_NV = 4
    end

@bitmask_flag FramebufferCreateFlag::UInt32 begin
        FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
    end

@bitmask_flag DeviceDiagnosticsConfigFlagNV::UInt32 begin
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
    end

@bitmask_flag PipelineCreationFeedbackFlagEXT::UInt32 begin
        PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
        PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
        PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
    end

@bitmask_flag PerformanceCounterDescriptionFlagKHR::UInt32 begin
        PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
        PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
    end

@bitmask_flag AcquireProfilingLockFlagKHR::UInt32 begin
    end

@bitmask_flag ShaderCorePropertiesFlagAMD::UInt32 begin
    end

@bitmask_flag ShaderModuleCreateFlag::UInt32 begin
        SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 1
    end

@bitmask_flag PipelineCompilerControlFlagAMD::UInt32 begin
    end

@bitmask_flag ToolPurposeFlagEXT::UInt32 begin
        TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
        TOOL_PURPOSE_PROFILING_BIT_EXT = 2
        TOOL_PURPOSE_TRACING_BIT_EXT = 4
        TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
        TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
        TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
        TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
        TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
        TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
    end

@bitmask_flag AccessFlag2KHR::UInt64 begin
        ACCESS_2_NONE_KHR = 1
        ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1
        ACCESS_2_INDEX_READ_BIT_KHR = 2
        ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4
        ACCESS_2_UNIFORM_READ_BIT_KHR = 8
        ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16
        ACCESS_2_SHADER_READ_BIT_KHR = 32
        ACCESS_2_SHADER_WRITE_BIT_KHR = 64
        ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128
        ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256
        ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512
        ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024
        ACCESS_2_TRANSFER_READ_BIT_KHR = 2048
        ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096
        ACCESS_2_HOST_READ_BIT_KHR = 8192
        ACCESS_2_HOST_WRITE_BIT_KHR = 16384
        ACCESS_2_MEMORY_READ_BIT_KHR = 32768
        ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536
        ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296
        ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592
        ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184
        ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368
        ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736
        ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472
        ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944
        ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
        ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
        ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
        ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
        ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072
        ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
        ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
        ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
        ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
        ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
        ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    end

@bitmask_flag PipelineStageFlag2KHR::UInt64 begin
        PIPELINE_STAGE_2_NONE_KHR = 1
        PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1
        PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2
        PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4
        PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8
        PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16
        PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32
        PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64
        PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128
        PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256
        PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512
        PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024
        PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048
        PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096
        PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192
        PIPELINE_STAGE_2_HOST_BIT_KHR = 16384
        PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768
        PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536
        PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296
        PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592
        PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184
        PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368
        PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736
        PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472
        PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944
        PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864
        PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728
        PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
        PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144
        PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072
        PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
        PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
        PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152
        PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
        PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288
        PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576
    end

@bitmask_flag SubmitFlagKHR::UInt32 begin
        SUBMIT_PROTECTED_BIT_KHR = 1
    end

@bitmask_flag EventCreateFlag::UInt32 begin
        EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1
    end

@bitmask_flag VideoCodecOperationFlagKHR::UInt32 begin
        VIDEO_CODEC_OPERATION_INVALID_BIT_KHR = 1
        VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = 65536
        VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT = 1
        VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT = 2
    end

@bitmask_flag VideoChromaSubsamplingFlagKHR::UInt32 begin
        VIDEO_CHROMA_SUBSAMPLING_INVALID_BIT_KHR = 1
        VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1
        VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2
        VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4
        VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8
    end

@bitmask_flag VideoComponentBitDepthFlagKHR::UInt32 begin
        VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 1
        VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1
        VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4
        VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16
    end

@bitmask_flag VideoCapabilitiesFlagKHR::UInt32 begin
        VIDEO_CAPABILITIES_PROTECTED_CONTENT_BIT_KHR = 1
        VIDEO_CAPABILITIES_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2
    end

@bitmask_flag VideoSessionCreateFlagKHR::UInt32 begin
        VIDEO_SESSION_CREATE_DEFAULT_KHR = 1
        VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1
    end

@bitmask_flag VideoCodingQualityPresetFlagKHR::UInt32 begin
        VIDEO_CODING_QUALITY_PRESET_DEFAULT_BIT_KHR = 1
        VIDEO_CODING_QUALITY_PRESET_NORMAL_BIT_KHR = 1
        VIDEO_CODING_QUALITY_PRESET_POWER_BIT_KHR = 2
        VIDEO_CODING_QUALITY_PRESET_QUALITY_BIT_KHR = 4
    end

@bitmask_flag VideoDecodeH264FieldLayoutFlagEXT::UInt32 begin
        VIDEO_DECODE_H264_PROGRESSIVE_PICTURES_ONLY_EXT = 1
        VIDEO_DECODE_H264_FIELD_LAYOUT_LINE_INTERLACED_PLANE_BIT_EXT = 1
        VIDEO_DECODE_H264_FIELD_LAYOUT_SEPARATE_INTERLACED_PLANE_BIT_EXT = 2
    end

@bitmask_flag VideoCodingControlFlagKHR::UInt32 begin
        VIDEO_CODING_CONTROL_DEFAULT_KHR = 1
        VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1
    end

@bitmask_flag VideoDecodeFlagKHR::UInt32 begin
        VIDEO_DECODE_DEFAULT_KHR = 1
        VIDEO_DECODE_RESERVED_0_BIT_KHR = 1
    end

@bitmask_flag VideoEncodeFlagKHR::UInt32 begin
        VIDEO_ENCODE_DEFAULT_KHR = 1
        VIDEO_ENCODE_RESERVED_0_BIT_KHR = 1
    end

@bitmask_flag VideoEncodeRateControlFlagKHR::UInt32 begin
        VIDEO_ENCODE_RATE_CONTROL_DEFAULT_KHR = 1
        VIDEO_ENCODE_RATE_CONTROL_RESET_BIT_KHR = 1
    end

@bitmask_flag VideoEncodeRateControlModeFlagKHR::UInt32 begin
        VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR = 1
        VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2
        VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4
    end

@bitmask_flag VideoEncodeH264CapabilitiesFlagEXT::UInt32 begin
        VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT = 1
        VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT = 2
        VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT = 4
        VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT = 8
        VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT = 16
        VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT = 32
        VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT = 64
        VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT = 128
        VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT = 256
        VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT = 512
        VIDEO_ENCODE_H264_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT = 1024
    end

@bitmask_flag VideoEncodeH264InputModeFlagEXT::UInt32 begin
        VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT = 1
        VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT = 2
        VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT = 4
    end

@bitmask_flag VideoEncodeH264OutputModeFlagEXT::UInt32 begin
        VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT = 1
        VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT = 2
        VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT = 4
    end

@bitmask_flag VideoEncodeH264CreateFlagEXT::UInt32 begin
        VIDEO_ENCODE_H264_CREATE_DEFAULT_EXT = 1
        VIDEO_ENCODE_H264_CREATE_RESERVED_0_BIT_EXT = 1
    end


mutable struct Instance <: Handle
    vks::VkInstance
    refcount::RefCounter
    destructor
    Instance(vks::VkInstance, refcount::RefCounter) = new(vks, refcount, undef)
end

mutable struct DebugUtilsMessengerEXT <: Handle
    vks::VkDebugUtilsMessengerEXT
    instance::Instance
    refcount::RefCounter
    destructor
    DebugUtilsMessengerEXT(vks::VkDebugUtilsMessengerEXT, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

mutable struct DebugReportCallbackEXT <: Handle
    vks::VkDebugReportCallbackEXT
    instance::Instance
    refcount::RefCounter
    destructor
    DebugReportCallbackEXT(vks::VkDebugReportCallbackEXT, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

mutable struct SurfaceKHR <: Handle
    vks::VkSurfaceKHR
    instance::Instance
    refcount::RefCounter
    destructor
    SurfaceKHR(vks::VkSurfaceKHR, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

mutable struct SwapchainKHR <: Handle
    vks::VkSwapchainKHR
    surface::SurfaceKHR
    refcount::RefCounter
    destructor
    SwapchainKHR(vks::VkSwapchainKHR, surface::SurfaceKHR, refcount::RefCounter) = new(vks, surface, refcount, undef)
end

mutable struct PhysicalDevice <: Handle
    vks::VkPhysicalDevice
    instance::Instance
    refcount::RefCounter
    destructor
    PhysicalDevice(vks::VkPhysicalDevice, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

mutable struct DisplayKHR <: Handle
    vks::VkDisplayKHR
    physical_device::PhysicalDevice
    refcount::RefCounter
    destructor
    DisplayKHR(vks::VkDisplayKHR, physical_device::PhysicalDevice, refcount::RefCounter) = new(vks, physical_device, refcount, undef)
end

mutable struct DisplayModeKHR <: Handle
    vks::VkDisplayModeKHR
    display::DisplayKHR
    refcount::RefCounter
    destructor
    DisplayModeKHR(vks::VkDisplayModeKHR, display::DisplayKHR, refcount::RefCounter) = new(vks, display, refcount, undef)
end

mutable struct Device <: Handle
    vks::VkDevice
    physical_device::PhysicalDevice
    refcount::RefCounter
    destructor
    Device(vks::VkDevice, physical_device::PhysicalDevice, refcount::RefCounter) = new(vks, physical_device, refcount, undef)
end

mutable struct VideoSessionKHR <: Handle
    vks::VkVideoSessionKHR
    device::Device
    refcount::RefCounter
    destructor
    VideoSessionKHR(vks::VkVideoSessionKHR, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct VideoSessionParametersKHR <: Handle
    vks::VkVideoSessionParametersKHR
    video_session::VideoSessionKHR
    refcount::RefCounter
    destructor
    VideoSessionParametersKHR(vks::VkVideoSessionParametersKHR, video_session::VideoSessionKHR, refcount::RefCounter) = new(vks, video_session, refcount, undef)
end

mutable struct PrivateDataSlotEXT <: Handle
    vks::VkPrivateDataSlotEXT
    device::Device
    refcount::RefCounter
    destructor
    PrivateDataSlotEXT(vks::VkPrivateDataSlotEXT, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct DeferredOperationKHR <: Handle
    vks::VkDeferredOperationKHR
    device::Device
    refcount::RefCounter
    destructor
    DeferredOperationKHR(vks::VkDeferredOperationKHR, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct PerformanceConfigurationINTEL <: Handle
    vks::VkPerformanceConfigurationINTEL
    device::Device
    refcount::RefCounter
    destructor
    PerformanceConfigurationINTEL(vks::VkPerformanceConfigurationINTEL, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct AccelerationStructureNV <: Handle
    vks::VkAccelerationStructureNV
    device::Device
    refcount::RefCounter
    destructor
    AccelerationStructureNV(vks::VkAccelerationStructureNV, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct AccelerationStructureKHR <: Handle
    vks::VkAccelerationStructureKHR
    device::Device
    refcount::RefCounter
    destructor
    AccelerationStructureKHR(vks::VkAccelerationStructureKHR, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct ValidationCacheEXT <: Handle
    vks::VkValidationCacheEXT
    device::Device
    refcount::RefCounter
    destructor
    ValidationCacheEXT(vks::VkValidationCacheEXT, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct SamplerYcbcrConversion <: Handle
    vks::VkSamplerYcbcrConversion
    device::Device
    refcount::RefCounter
    destructor
    SamplerYcbcrConversion(vks::VkSamplerYcbcrConversion, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct DescriptorUpdateTemplate <: Handle
    vks::VkDescriptorUpdateTemplate
    device::Device
    refcount::RefCounter
    destructor
    DescriptorUpdateTemplate(vks::VkDescriptorUpdateTemplate, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct IndirectCommandsLayoutNV <: Handle
    vks::VkIndirectCommandsLayoutNV
    device::Device
    refcount::RefCounter
    destructor
    IndirectCommandsLayoutNV(vks::VkIndirectCommandsLayoutNV, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct PipelineCache <: Handle
    vks::VkPipelineCache
    device::Device
    refcount::RefCounter
    destructor
    PipelineCache(vks::VkPipelineCache, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct RenderPass <: Handle
    vks::VkRenderPass
    device::Device
    refcount::RefCounter
    destructor
    RenderPass(vks::VkRenderPass, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Framebuffer <: Handle
    vks::VkFramebuffer
    device::Device
    refcount::RefCounter
    destructor
    Framebuffer(vks::VkFramebuffer, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct QueryPool <: Handle
    vks::VkQueryPool
    device::Device
    refcount::RefCounter
    destructor
    QueryPool(vks::VkQueryPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Event <: Handle
    vks::VkEvent
    device::Device
    refcount::RefCounter
    destructor
    Event(vks::VkEvent, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Semaphore <: Handle
    vks::VkSemaphore
    device::Device
    refcount::RefCounter
    destructor
    Semaphore(vks::VkSemaphore, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Fence <: Handle
    vks::VkFence
    device::Device
    refcount::RefCounter
    destructor
    Fence(vks::VkFence, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct DescriptorPool <: Handle
    vks::VkDescriptorPool
    device::Device
    refcount::RefCounter
    destructor
    DescriptorPool(vks::VkDescriptorPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct DescriptorSet <: Handle
    vks::VkDescriptorSet
    descriptor_pool::DescriptorPool
    refcount::RefCounter
    destructor
    DescriptorSet(vks::VkDescriptorSet, descriptor_pool::DescriptorPool, refcount::RefCounter) = new(vks, descriptor_pool, refcount, undef)
end

mutable struct DescriptorSetLayout <: Handle
    vks::VkDescriptorSetLayout
    device::Device
    refcount::RefCounter
    destructor
    DescriptorSetLayout(vks::VkDescriptorSetLayout, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Sampler <: Handle
    vks::VkSampler
    device::Device
    refcount::RefCounter
    destructor
    Sampler(vks::VkSampler, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct PipelineLayout <: Handle
    vks::VkPipelineLayout
    device::Device
    refcount::RefCounter
    destructor
    PipelineLayout(vks::VkPipelineLayout, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Pipeline <: Handle
    vks::VkPipeline
    device::Device
    refcount::RefCounter
    destructor
    Pipeline(vks::VkPipeline, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct ShaderModule <: Handle
    vks::VkShaderModule
    device::Device
    refcount::RefCounter
    destructor
    ShaderModule(vks::VkShaderModule, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct ImageView <: Handle
    vks::VkImageView
    device::Device
    refcount::RefCounter
    destructor
    ImageView(vks::VkImageView, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Image <: Handle
    vks::VkImage
    device::Device
    refcount::RefCounter
    destructor
    Image(vks::VkImage, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct BufferView <: Handle
    vks::VkBufferView
    device::Device
    refcount::RefCounter
    destructor
    BufferView(vks::VkBufferView, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Buffer <: Handle
    vks::VkBuffer
    device::Device
    refcount::RefCounter
    destructor
    Buffer(vks::VkBuffer, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct CommandPool <: Handle
    vks::VkCommandPool
    device::Device
    refcount::RefCounter
    destructor
    CommandPool(vks::VkCommandPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct CommandBuffer <: Handle
    vks::VkCommandBuffer
    command_pool::CommandPool
    refcount::RefCounter
    destructor
    CommandBuffer(vks::VkCommandBuffer, command_pool::CommandPool, refcount::RefCounter) = new(vks, command_pool, refcount, undef)
end

mutable struct DeviceMemory <: Handle
    vks::VkDeviceMemory
    device::Device
    refcount::RefCounter
    destructor
    DeviceMemory(vks::VkDeviceMemory, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

mutable struct Queue <: Handle
    vks::VkQueue
    device::Device
    refcount::RefCounter
    destructor
    Queue(vks::VkQueue, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end


struct _PipelineRasterizationProvokingVertexStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceProvokingVertexPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    provoking_vertex_mode_per_pipeline::Bool
    transform_feedback_preserves_triangle_fan_provoking_vertex::Bool
end

struct _PhysicalDeviceProvokingVertexFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceProvokingVertexFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
    deps::Vector{Any}
end

struct _CommandBufferInheritanceViewportScissorInfoNV <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceViewportScissorInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceInheritedViewportScissorFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceInheritedViewportScissorFeaturesNV
    deps::Vector{Any}
end

struct _VideoEncodeH264NaluSliceEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264NaluSliceEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264ProfileEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264ProfileEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264EmitPictureParametersEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264EmitPictureParametersEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264VclFrameInfoEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264VclFrameInfoEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264DpbSlotInfoEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264DpbSlotInfoEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264SessionParametersCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264SessionParametersCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264SessionParametersAddInfoEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264SessionParametersAddInfoEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264SessionCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264SessionCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoEncodeH264CapabilitiesEXT <: VulkanStruct{true}
    vks::VkVideoEncodeH264CapabilitiesEXT
    deps::Vector{Any}
end

struct _VideoEncodeRateControlInfoKHR <: VulkanStruct{true}
    vks::VkVideoEncodeRateControlInfoKHR
    deps::Vector{Any}
end

struct _VideoEncodeInfoKHR <: VulkanStruct{true}
    vks::VkVideoEncodeInfoKHR
    deps::Vector{Any}
    dst_bitstream_buffer::Buffer
end

struct _VideoCodingControlInfoKHR <: VulkanStruct{true}
    vks::VkVideoCodingControlInfoKHR
    deps::Vector{Any}
end

struct _VideoEndCodingInfoKHR <: VulkanStruct{true}
    vks::VkVideoEndCodingInfoKHR
    deps::Vector{Any}
end

struct _VideoBeginCodingInfoKHR <: VulkanStruct{true}
    vks::VkVideoBeginCodingInfoKHR
    deps::Vector{Any}
    video_session::VideoSessionKHR
    video_session_parameters::OptionalPtr{VideoSessionParametersKHR}
end

struct _VideoSessionParametersUpdateInfoKHR <: VulkanStruct{true}
    vks::VkVideoSessionParametersUpdateInfoKHR
    deps::Vector{Any}
end

struct _VideoSessionParametersCreateInfoKHR <: VulkanStruct{true}
    vks::VkVideoSessionParametersCreateInfoKHR
    deps::Vector{Any}
    video_session_parameters_template::VideoSessionParametersKHR
    video_session::VideoSessionKHR
end

struct _VideoSessionCreateInfoKHR <: VulkanStruct{true}
    vks::VkVideoSessionCreateInfoKHR
    deps::Vector{Any}
end

struct _VideoDecodeH265DpbSlotInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265DpbSlotInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH265PictureInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265PictureInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH265SessionParametersCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265SessionParametersCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH265SessionParametersAddInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265SessionParametersAddInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH265SessionCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265SessionCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH265ProfileEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH265ProfileEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264MvcEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264MvcEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264DpbSlotInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264DpbSlotInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264PictureInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264PictureInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264SessionParametersCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264SessionParametersCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264SessionParametersAddInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264SessionParametersAddInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264SessionCreateInfoEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264SessionCreateInfoEXT
    deps::Vector{Any}
end

struct _VideoDecodeH264ProfileEXT <: VulkanStruct{true}
    vks::VkVideoDecodeH264ProfileEXT
    deps::Vector{Any}
end

struct _VideoDecodeInfoKHR <: VulkanStruct{true}
    vks::VkVideoDecodeInfoKHR
    deps::Vector{Any}
    src_buffer::Buffer
end

struct _VideoReferenceSlotKHR <: VulkanStruct{true}
    vks::VkVideoReferenceSlotKHR
    deps::Vector{Any}
end

struct _VideoPictureResourceKHR <: VulkanStruct{true}
    vks::VkVideoPictureResourceKHR
    deps::Vector{Any}
    image_view_binding::ImageView
end

struct _VideoBindMemoryKHR <: VulkanStruct{true}
    vks::VkVideoBindMemoryKHR
    deps::Vector{Any}
    memory::DeviceMemory
end

struct _VideoGetMemoryPropertiesKHR <: VulkanStruct{true}
    vks::VkVideoGetMemoryPropertiesKHR
    deps::Vector{Any}
end

struct _VideoProfileKHR <: VulkanStruct{true}
    vks::VkVideoProfileKHR
    deps::Vector{Any}
end

struct VideoFormatPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    format::Format
end

struct _VideoProfilesKHR <: VulkanStruct{true}
    vks::VkVideoProfilesKHR
    deps::Vector{Any}
end

struct PhysicalDeviceVideoFormatInfoKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    image_usage::ImageUsageFlag
    video_profiles::_VideoProfilesKHR
end

struct _VideoQueueFamilyProperties2KHR <: VulkanStruct{true}
    vks::VkVideoQueueFamilyProperties2KHR
    deps::Vector{Any}
end

struct _PhysicalDeviceSynchronization2FeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceSynchronization2FeaturesKHR
    deps::Vector{Any}
end

struct CheckpointData2NV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stage::UInt64
    checkpoint_marker::Ptr{Cvoid}
end

struct QueueFamilyCheckpointProperties2NV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    checkpoint_execution_stage_mask::UInt64
end

struct _SubmitInfo2KHR <: VulkanStruct{true}
    vks::VkSubmitInfo2KHR
    deps::Vector{Any}
end

struct _CommandBufferSubmitInfoKHR <: VulkanStruct{true}
    vks::VkCommandBufferSubmitInfoKHR
    deps::Vector{Any}
    command_buffer::CommandBuffer
end

struct _SemaphoreSubmitInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreSubmitInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _DependencyInfoKHR <: VulkanStruct{true}
    vks::VkDependencyInfoKHR
    deps::Vector{Any}
end

struct _BufferMemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkBufferMemoryBarrier2KHR
    deps::Vector{Any}
    buffer::Buffer
end

struct _ImageMemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkImageMemoryBarrier2KHR
    deps::Vector{Any}
    image::Image
end

struct _MemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkMemoryBarrier2KHR
    deps::Vector{Any}
end

struct _PipelineColorWriteCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineColorWriteCreateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceColorWriteEnableFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceColorWriteEnableFeaturesEXT
    deps::Vector{Any}
end

struct _VertexInputAttributeDescription2EXT <: VulkanStruct{true}
    vks::VkVertexInputAttributeDescription2EXT
    deps::Vector{Any}
end

struct _VertexInputBindingDescription2EXT <: VulkanStruct{true}
    vks::VkVertexInputBindingDescription2EXT
    deps::Vector{Any}
end

struct _PhysicalDeviceVertexInputDynamicStateFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
    deps::Vector{Any}
end

struct _MutableDescriptorTypeCreateInfoVALVE <: VulkanStruct{true}
    vks::VkMutableDescriptorTypeCreateInfoVALVE
    deps::Vector{Any}
end

struct _MutableDescriptorTypeListVALVE <: VulkanStruct{true}
    vks::VkMutableDescriptorTypeListVALVE
    deps::Vector{Any}
end

struct _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE <: VulkanStruct{true}
    vks::VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
    deps::Vector{Any}
end

struct _AccelerationStructureBuildSizesInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureBuildSizesInfoKHR
    deps::Vector{Any}
end

struct _PipelineFragmentShadingRateEnumStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderTerminateInvocationFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentShadingRateFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    deps::Vector{Any}
end

struct _PipelineFragmentShadingRateStateCreateInfoKHR <: VulkanStruct{true}
    vks::VkPipelineFragmentShadingRateStateCreateInfoKHR
    deps::Vector{Any}
end

struct _FragmentShadingRateAttachmentInfoKHR <: VulkanStruct{true}
    vks::VkFragmentShadingRateAttachmentInfoKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    deps::Vector{Any}
end

struct _ResolveImageInfo2KHR <: VulkanStruct{true}
    vks::VkResolveImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

struct _CopyImageToBufferInfo2KHR <: VulkanStruct{true}
    vks::VkCopyImageToBufferInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_buffer::Buffer
end

struct _CopyBufferToImageInfo2KHR <: VulkanStruct{true}
    vks::VkCopyBufferToImageInfo2KHR
    deps::Vector{Any}
    src_buffer::Buffer
    dst_image::Image
end

struct _BlitImageInfo2KHR <: VulkanStruct{true}
    vks::VkBlitImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

struct _CopyImageInfo2KHR <: VulkanStruct{true}
    vks::VkCopyImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

struct _CopyBufferInfo2KHR <: VulkanStruct{true}
    vks::VkCopyBufferInfo2KHR
    deps::Vector{Any}
    src_buffer::Buffer
    dst_buffer::Buffer
end

struct _ImageResolve2KHR <: VulkanStruct{true}
    vks::VkImageResolve2KHR
    deps::Vector{Any}
end

struct _BufferImageCopy2KHR <: VulkanStruct{true}
    vks::VkBufferImageCopy2KHR
    deps::Vector{Any}
end

struct _ImageBlit2KHR <: VulkanStruct{true}
    vks::VkImageBlit2KHR
    deps::Vector{Any}
end

struct _ImageCopy2KHR <: VulkanStruct{true}
    vks::VkImageCopy2KHR
    deps::Vector{Any}
end

struct _BufferCopy2KHR <: VulkanStruct{true}
    vks::VkBufferCopy2KHR
    deps::Vector{Any}
end

struct _PhysicalDevice4444FormatsFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevice4444FormatsFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDevicePortabilitySubsetPropertiesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePortabilitySubsetPropertiesKHR
    deps::Vector{Any}
end

struct _PhysicalDevicePortabilitySubsetFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePortabilitySubsetFeaturesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceImageRobustnessFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageRobustnessFeaturesEXT
    deps::Vector{Any}
end

struct PhysicalDeviceRobustness2PropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    robust_storage_buffer_access_size_alignment::UInt64
    robust_uniform_buffer_access_size_alignment::UInt64
end

struct _PhysicalDeviceRobustness2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceRobustness2FeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR
    deps::Vector{Any}
end

struct _DeviceDiagnosticsConfigCreateInfoNV <: VulkanStruct{true}
    vks::VkDeviceDiagnosticsConfigCreateInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceDiagnosticsConfigFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    deps::Vector{Any}
end

struct _CommandBufferInheritanceRenderPassTransformInfoQCOM <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    deps::Vector{Any}
end

struct _CopyCommandTransformInfoQCOM <: VulkanStruct{true}
    vks::VkCopyCommandTransformInfoQCOM
    deps::Vector{Any}
end

struct _RenderPassTransformBeginInfoQCOM <: VulkanStruct{true}
    vks::VkRenderPassTransformBeginInfoQCOM
    deps::Vector{Any}
end

struct _PhysicalDeviceExtendedDynamicState2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceExtendedDynamicStateFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    deps::Vector{Any}
end

struct _PipelineLibraryCreateInfoKHR <: VulkanStruct{true}
    vks::VkPipelineLibraryCreateInfoKHR
    deps::Vector{Any}
end

struct _RayTracingPipelineInterfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingPipelineInterfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _CopyMemoryToAccelerationStructureInfoKHR <: VulkanStruct{true}
    vks::VkCopyMemoryToAccelerationStructureInfoKHR
    deps::Vector{Any}
    dst::AccelerationStructureKHR
end

struct _CopyAccelerationStructureToMemoryInfoKHR <: VulkanStruct{true}
    vks::VkCopyAccelerationStructureToMemoryInfoKHR
    deps::Vector{Any}
    src::AccelerationStructureKHR
end

struct _CopyAccelerationStructureInfoKHR <: VulkanStruct{true}
    vks::VkCopyAccelerationStructureInfoKHR
    deps::Vector{Any}
    src::AccelerationStructureKHR
    dst::AccelerationStructureKHR
end

struct _AccelerationStructureVersionInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureVersionInfoKHR
    deps::Vector{Any}
end

struct _AccelerationStructureDeviceAddressInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureDeviceAddressInfoKHR
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureKHR
end

struct _AccelerationStructureInstanceKHR <: VulkanStruct{false}
    vks::VkAccelerationStructureInstanceKHR
end

struct _TransformMatrixKHR <: VulkanStruct{false}
    vks::VkTransformMatrixKHR
end

struct _AabbPositionsKHR <: VulkanStruct{false}
    vks::VkAabbPositionsKHR
end

struct _AccelerationStructureCreateInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureCreateInfoKHR
    deps::Vector{Any}
    buffer::Buffer
end

struct _AccelerationStructureBuildRangeInfoKHR <: VulkanStruct{false}
    vks::VkAccelerationStructureBuildRangeInfoKHR
end

struct _AccelerationStructureBuildGeometryInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureBuildGeometryInfoKHR
    deps::Vector{Any}
    src_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
    dst_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
end

struct _AccelerationStructureGeometryKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryKHR
    deps::Vector{Any}
end

struct _AccelerationStructureGeometryInstancesDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryInstancesDataKHR
    deps::Vector{Any}
end

struct _AccelerationStructureGeometryAabbsDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryAabbsDataKHR
    deps::Vector{Any}
end

struct _AccelerationStructureGeometryTrianglesDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryTrianglesDataKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceCustomBorderColorFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceCustomBorderColorFeaturesEXT
    deps::Vector{Any}
end

struct PhysicalDeviceCustomBorderColorPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_custom_border_color_samplers::UInt32
end

struct _SamplerCustomBorderColorCreateInfoEXT <: VulkanStruct{true}
    vks::VkSamplerCustomBorderColorCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceToolPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    version::String
    purposes::ToolPurposeFlagEXT
    description::String
    layer::String
end

struct _PhysicalDeviceCoherentMemoryFeaturesAMD <: VulkanStruct{true}
    vks::VkPhysicalDeviceCoherentMemoryFeaturesAMD
    deps::Vector{Any}
end

struct _PipelineCompilerControlCreateInfoAMD <: VulkanStruct{true}
    vks::VkPipelineCompilerControlCreateInfoAMD
    deps::Vector{Any}
end

struct _PhysicalDeviceVulkan12Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkan12Features
    deps::Vector{Any}
end

struct PhysicalDeviceVulkan11Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
    subgroup_size::UInt32
    subgroup_supported_stages::ShaderStageFlag
    subgroup_supported_operations::SubgroupFeatureFlag
    subgroup_quad_operations_in_all_stages::Bool
    point_clipping_behavior::PointClippingBehavior
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
    protected_no_fault::Bool
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::UInt64
end

struct _PhysicalDeviceVulkan11Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkan11Features
    deps::Vector{Any}
end

struct _PhysicalDevicePipelineCreationCacheControlFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    deps::Vector{Any}
end

struct _PipelineRasterizationLineStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationLineStateCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceLineRasterizationPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    line_sub_pixel_precision_bits::UInt32
end

struct _PhysicalDeviceLineRasterizationFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceLineRasterizationFeaturesEXT
    deps::Vector{Any}
end

struct _DeviceMemoryOpaqueCaptureAddressInfo <: VulkanStruct{true}
    vks::VkDeviceMemoryOpaqueCaptureAddressInfo
    deps::Vector{Any}
    memory::DeviceMemory
end

struct _MemoryOpaqueCaptureAddressAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryOpaqueCaptureAddressAllocateInfo
    deps::Vector{Any}
end

struct PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    required_subgroup_size::UInt32
end

struct PhysicalDeviceSubgroupSizeControlPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_subgroup_size::UInt32
    max_subgroup_size::UInt32
    max_compute_workgroup_subgroups::UInt32
    required_subgroup_size_stages::ShaderStageFlag
end

struct _PhysicalDeviceSubgroupSizeControlFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
    deps::Vector{Any}
end

struct PhysicalDeviceTexelBufferAlignmentPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    storage_texel_buffer_offset_alignment_bytes::UInt64
    storage_texel_buffer_offset_single_texel_alignment::Bool
    uniform_texel_buffer_offset_alignment_bytes::UInt64
    uniform_texel_buffer_offset_single_texel_alignment::Bool
end

struct _PhysicalDeviceTexelBufferAlignmentFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    deps::Vector{Any}
end

struct PipelineExecutableInternalRepresentationKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    description::String
    is_text::Bool
    data_size::UInt
    data::Ptr{Cvoid}
end

struct PipelineExecutableStatisticKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    description::String
    format::PipelineExecutableStatisticFormatKHR
    value::VkPipelineExecutableStatisticValueKHR
end

struct _PipelineExecutableInfoKHR <: VulkanStruct{true}
    vks::VkPipelineExecutableInfoKHR
    deps::Vector{Any}
    pipeline::Pipeline
end

struct PipelineExecutablePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stages::ShaderStageFlag
    name::String
    description::String
    subgroup_size::UInt32
end

struct _PipelineInfoKHR <: VulkanStruct{true}
    vks::VkPipelineInfoKHR
    deps::Vector{Any}
    pipeline::Pipeline
end

struct _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    deps::Vector{Any}
end

struct _AttachmentDescriptionStencilLayout <: VulkanStruct{true}
    vks::VkAttachmentDescriptionStencilLayout
    deps::Vector{Any}
end

struct _AttachmentReferenceStencilLayout <: VulkanStruct{true}
    vks::VkAttachmentReferenceStencilLayout
    deps::Vector{Any}
end

struct _PhysicalDeviceSeparateDepthStencilLayoutsFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentShaderInterlockFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderSMBuiltinsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    deps::Vector{Any}
end

struct PhysicalDeviceShaderSMBuiltinsPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_sm_count::UInt32
    shader_warps_per_sm::UInt32
end

struct _PhysicalDeviceIndexTypeUint8FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderClockFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderClockFeaturesKHR
    deps::Vector{Any}
end

struct _PerformanceConfigurationAcquireInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceConfigurationAcquireInfoINTEL
    deps::Vector{Any}
end

struct _PerformanceOverrideInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceOverrideInfoINTEL
    deps::Vector{Any}
end

struct _PerformanceStreamMarkerInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceStreamMarkerInfoINTEL
    deps::Vector{Any}
end

struct _PerformanceMarkerInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceMarkerInfoINTEL
    deps::Vector{Any}
end

struct _QueryPoolPerformanceQueryCreateInfoINTEL <: VulkanStruct{true}
    vks::VkQueryPoolPerformanceQueryCreateInfoINTEL
    deps::Vector{Any}
end

struct _InitializePerformanceApiInfoINTEL <: VulkanStruct{true}
    vks::VkInitializePerformanceApiInfoINTEL
    deps::Vector{Any}
end

struct _PerformanceValueINTEL <: VulkanStruct{false}
    vks::VkPerformanceValueINTEL
end

struct _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    deps::Vector{Any}
end

struct FramebufferMixedSamplesCombinationNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    coverage_reduction_mode::CoverageReductionModeNV
    rasterization_samples::SampleCountFlag
    depth_stencil_samples::SampleCountFlag
    color_samples::SampleCountFlag
end

struct _PipelineCoverageReductionStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageReductionStateCreateInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceCoverageReductionModeFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCoverageReductionModeFeaturesNV
    deps::Vector{Any}
end

struct _HeadlessSurfaceCreateInfoEXT <: VulkanStruct{true}
    vks::VkHeadlessSurfaceCreateInfoEXT
    deps::Vector{Any}
end

struct _PerformanceQuerySubmitInfoKHR <: VulkanStruct{true}
    vks::VkPerformanceQuerySubmitInfoKHR
    deps::Vector{Any}
end

struct _AcquireProfilingLockInfoKHR <: VulkanStruct{true}
    vks::VkAcquireProfilingLockInfoKHR
    deps::Vector{Any}
end

struct _QueryPoolPerformanceCreateInfoKHR <: VulkanStruct{true}
    vks::VkQueryPoolPerformanceCreateInfoKHR
    deps::Vector{Any}
end

struct PerformanceCounterDescriptionKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    flags::PerformanceCounterDescriptionFlagKHR
    name::String
    category::String
    description::String
end

struct PerformanceCounterKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    unit::PerformanceCounterUnitKHR
    scope::PerformanceCounterScopeKHR
    storage::PerformanceCounterStorageKHR
    uuid::String
end

struct PhysicalDevicePerformanceQueryPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    allow_command_buffer_query_copies::Bool
end

struct _PhysicalDevicePerformanceQueryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePerformanceQueryFeaturesKHR
    deps::Vector{Any}
end

struct _SurfaceCapabilitiesFullScreenExclusiveEXT <: VulkanStruct{true}
    vks::VkSurfaceCapabilitiesFullScreenExclusiveEXT
    deps::Vector{Any}
end

struct _SurfaceFullScreenExclusiveWin32InfoEXT <: VulkanStruct{true}
    vks::VkSurfaceFullScreenExclusiveWin32InfoEXT
    deps::Vector{Any}
end

struct _SurfaceFullScreenExclusiveInfoEXT <: VulkanStruct{true}
    vks::VkSurfaceFullScreenExclusiveInfoEXT
    deps::Vector{Any}
end

struct _PipelineCreationFeedbackCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineCreationFeedbackCreateInfoEXT
    deps::Vector{Any}
end

struct PipelineCreationFeedbackEXT <: ReturnedOnly
    flags::PipelineCreationFeedbackFlagEXT
    duration::UInt64
end

struct _PresentFrameTokenGGP <: VulkanStruct{true}
    vks::VkPresentFrameTokenGGP
    deps::Vector{Any}
end

struct ImageViewAddressPropertiesNVX <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_address::UInt64
    size::UInt64
end

struct _ImageViewHandleInfoNVX <: VulkanStruct{true}
    vks::VkImageViewHandleInfoNVX
    deps::Vector{Any}
    image_view::ImageView
    sampler::OptionalPtr{Sampler}
end

struct _PhysicalDeviceYcbcrImageArraysFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    deps::Vector{Any}
end

struct _CooperativeMatrixPropertiesNV <: VulkanStruct{true}
    vks::VkCooperativeMatrixPropertiesNV
    deps::Vector{Any}
end

struct PhysicalDeviceCooperativeMatrixPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    cooperative_matrix_supported_stages::ShaderStageFlag
end

struct _PhysicalDeviceCooperativeMatrixFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCooperativeMatrixFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    deps::Vector{Any}
end

struct _RenderPassAttachmentBeginInfo <: VulkanStruct{true}
    vks::VkRenderPassAttachmentBeginInfo
    deps::Vector{Any}
end

struct _FramebufferAttachmentImageInfo <: VulkanStruct{true}
    vks::VkFramebufferAttachmentImageInfo
    deps::Vector{Any}
end

struct _FramebufferAttachmentsCreateInfo <: VulkanStruct{true}
    vks::VkFramebufferAttachmentsCreateInfo
    deps::Vector{Any}
end

struct _PhysicalDeviceImagelessFramebufferFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceImagelessFramebufferFeatures
    deps::Vector{Any}
end

struct FilterCubicImageViewImageFormatPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    filter_cubic::Bool
    filter_cubic_minmax::Bool
end

struct _PhysicalDeviceImageViewImageFormatInfoEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageViewImageFormatInfoEXT
    deps::Vector{Any}
end

struct _BufferDeviceAddressCreateInfoEXT <: VulkanStruct{true}
    vks::VkBufferDeviceAddressCreateInfoEXT
    deps::Vector{Any}
end

struct _BufferOpaqueCaptureAddressCreateInfo <: VulkanStruct{true}
    vks::VkBufferOpaqueCaptureAddressCreateInfo
    deps::Vector{Any}
end

struct _BufferDeviceAddressInfo <: VulkanStruct{true}
    vks::VkBufferDeviceAddressInfo
    deps::Vector{Any}
    buffer::Buffer
end

struct _PhysicalDeviceBufferDeviceAddressFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceBufferDeviceAddressFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceBufferDeviceAddressFeatures
    deps::Vector{Any}
end

struct _MemoryPriorityAllocateInfoEXT <: VulkanStruct{true}
    vks::VkMemoryPriorityAllocateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceMemoryPriorityFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceMemoryPriorityFeaturesEXT
    deps::Vector{Any}
end

struct PhysicalDeviceMemoryBudgetPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    heap_budget::NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}
    heap_usage::NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}
end

struct _PipelineRasterizationDepthClipStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationDepthClipStateCreateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceDepthClipEnableFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceDepthClipEnableFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceUniformBufferStandardLayoutFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    deps::Vector{Any}
end

struct _SurfaceProtectedCapabilitiesKHR <: VulkanStruct{true}
    vks::VkSurfaceProtectedCapabilitiesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceScalarBlockLayoutFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceScalarBlockLayoutFeatures
    deps::Vector{Any}
end

struct _RenderPassFragmentDensityMapCreateInfoEXT <: VulkanStruct{true}
    vks::VkRenderPassFragmentDensityMapCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceFragmentDensityMap2PropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    subsampled_loads::Bool
    subsampled_coarse_reconstruction_early_access::Bool
    max_subsampled_array_layers::UInt32
    max_descriptor_set_subsampled_samplers::UInt32
end

struct _PhysicalDeviceFragmentDensityMap2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentDensityMapFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    deps::Vector{Any}
end

struct _DeviceMemoryOverallocationCreateInfoAMD <: VulkanStruct{true}
    vks::VkDeviceMemoryOverallocationCreateInfoAMD
    deps::Vector{Any}
end

struct _ImageStencilUsageCreateInfo <: VulkanStruct{true}
    vks::VkImageStencilUsageCreateInfo
    deps::Vector{Any}
end

struct ImageDrmFormatModifierPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    drm_format_modifier::UInt64
end

struct _ImageDrmFormatModifierExplicitCreateInfoEXT <: VulkanStruct{true}
    vks::VkImageDrmFormatModifierExplicitCreateInfoEXT
    deps::Vector{Any}
end

struct _ImageDrmFormatModifierListCreateInfoEXT <: VulkanStruct{true}
    vks::VkImageDrmFormatModifierListCreateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceImageDrmFormatModifierInfoEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    deps::Vector{Any}
end

struct DrmFormatModifierPropertiesEXT <: ReturnedOnly
    drm_format_modifier::UInt64
    drm_format_modifier_plane_count::UInt32
    drm_format_modifier_tiling_features::FormatFeatureFlag
end

struct DrmFormatModifierPropertiesListEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    drm_format_modifier_count::UInt32
    drm_format_modifier_properties::Vector{DrmFormatModifierPropertiesEXT}
end

struct _TraceRaysIndirectCommandKHR <: VulkanStruct{false}
    vks::VkTraceRaysIndirectCommandKHR
end

struct _StridedDeviceAddressRegionKHR <: VulkanStruct{false}
    vks::VkStridedDeviceAddressRegionKHR
end

struct PhysicalDeviceRayTracingPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_triangle_count::UInt64
    max_descriptor_set_acceleration_structures::UInt32
end

struct PhysicalDeviceRayTracingPipelinePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_ray_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    shader_group_handle_capture_replay_size::UInt32
    max_ray_dispatch_invocation_count::UInt32
    shader_group_handle_alignment::UInt32
    max_ray_hit_attribute_size::UInt32
end

struct PhysicalDeviceAccelerationStructurePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_primitive_count::UInt64
    max_per_stage_descriptor_acceleration_structures::UInt32
    max_per_stage_descriptor_update_after_bind_acceleration_structures::UInt32
    max_descriptor_set_acceleration_structures::UInt32
    max_descriptor_set_update_after_bind_acceleration_structures::UInt32
    min_acceleration_structure_scratch_offset_alignment::UInt32
end

struct _PhysicalDeviceRayQueryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceRayQueryFeaturesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceRayTracingPipelineFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    deps::Vector{Any}
end

struct _PhysicalDeviceAccelerationStructureFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceAccelerationStructureFeaturesKHR
    deps::Vector{Any}
end

struct _AccelerationStructureMemoryRequirementsInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureMemoryRequirementsInfoNV
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureNV
end

struct _WriteDescriptorSetAccelerationStructureNV <: VulkanStruct{true}
    vks::VkWriteDescriptorSetAccelerationStructureNV
    deps::Vector{Any}
end

struct _WriteDescriptorSetAccelerationStructureKHR <: VulkanStruct{true}
    vks::VkWriteDescriptorSetAccelerationStructureKHR
    deps::Vector{Any}
end

struct _BindAccelerationStructureMemoryInfoNV <: VulkanStruct{true}
    vks::VkBindAccelerationStructureMemoryInfoNV
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureNV
    memory::DeviceMemory
end

struct _AccelerationStructureCreateInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureCreateInfoNV
    deps::Vector{Any}
end

struct _AccelerationStructureInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureInfoNV
    deps::Vector{Any}
end

struct _GeometryNV <: VulkanStruct{true}
    vks::VkGeometryNV
    deps::Vector{Any}
end

struct _GeometryDataNV <: VulkanStruct{false}
    vks::VkGeometryDataNV
end

struct _GeometryAABBNV <: VulkanStruct{true}
    vks::VkGeometryAABBNV
    deps::Vector{Any}
    aabb_data::OptionalPtr{Buffer}
end

struct _GeometryTrianglesNV <: VulkanStruct{true}
    vks::VkGeometryTrianglesNV
    deps::Vector{Any}
    vertex_data::OptionalPtr{Buffer}
    index_data::OptionalPtr{Buffer}
    transform_data::OptionalPtr{Buffer}
end

struct _RayTracingPipelineCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingPipelineCreateInfoKHR
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

struct _RayTracingPipelineCreateInfoNV <: VulkanStruct{true}
    vks::VkRayTracingPipelineCreateInfoNV
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

struct _RayTracingShaderGroupCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingShaderGroupCreateInfoKHR
    deps::Vector{Any}
end

struct _RayTracingShaderGroupCreateInfoNV <: VulkanStruct{true}
    vks::VkRayTracingShaderGroupCreateInfoNV
    deps::Vector{Any}
end

struct _DrawMeshTasksIndirectCommandNV <: VulkanStruct{false}
    vks::VkDrawMeshTasksIndirectCommandNV
end

struct PhysicalDeviceMeshShaderPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_draw_mesh_tasks_count::UInt32
    max_task_work_group_invocations::UInt32
    max_task_work_group_size::NTuple{3, UInt32}
    max_task_total_memory_size::UInt32
    max_task_output_count::UInt32
    max_mesh_work_group_invocations::UInt32
    max_mesh_work_group_size::NTuple{3, UInt32}
    max_mesh_total_memory_size::UInt32
    max_mesh_output_vertices::UInt32
    max_mesh_output_primitives::UInt32
    max_mesh_multiview_view_count::UInt32
    mesh_output_per_vertex_granularity::UInt32
    mesh_output_per_primitive_granularity::UInt32
end

struct _PhysicalDeviceMeshShaderFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceMeshShaderFeaturesNV
    deps::Vector{Any}
end

struct _PipelineViewportCoarseSampleOrderStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    deps::Vector{Any}
end

struct _CoarseSampleOrderCustomNV <: VulkanStruct{true}
    vks::VkCoarseSampleOrderCustomNV
    deps::Vector{Any}
end

struct _CoarseSampleLocationNV <: VulkanStruct{false}
    vks::VkCoarseSampleLocationNV
end

struct _PhysicalDeviceShadingRateImageFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShadingRateImageFeaturesNV
    deps::Vector{Any}
end

struct _PipelineViewportShadingRateImageStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportShadingRateImageStateCreateInfoNV
    deps::Vector{Any}
end

struct _ShadingRatePaletteNV <: VulkanStruct{true}
    vks::VkShadingRatePaletteNV
    deps::Vector{Any}
end

struct _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderImageFootprintFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderImageFootprintFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceFragmentShaderBarycentricFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceComputeShaderDerivativesFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    deps::Vector{Any}
end

struct _PhysicalDeviceCornerSampledImageFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCornerSampledImageFeaturesNV
    deps::Vector{Any}
end

struct _PipelineViewportExclusiveScissorStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportExclusiveScissorStateCreateInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceExclusiveScissorFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceExclusiveScissorFeaturesNV
    deps::Vector{Any}
end

struct _PipelineRepresentativeFragmentTestStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    deps::Vector{Any}
end

struct _PhysicalDeviceRepresentativeFragmentTestFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    deps::Vector{Any}
end

struct _PipelineRasterizationStateStreamCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateStreamCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceTransformFeedbackPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_transform_feedback_streams::UInt32
    max_transform_feedback_buffers::UInt32
    max_transform_feedback_buffer_size::UInt64
    max_transform_feedback_stream_data_size::UInt32
    max_transform_feedback_buffer_data_size::UInt32
    max_transform_feedback_buffer_data_stride::UInt32
    transform_feedback_queries::Bool
    transform_feedback_streams_lines_triangles::Bool
    transform_feedback_rasterization_stream_select::Bool
    transform_feedback_draw::Bool
end

struct _PhysicalDeviceTransformFeedbackFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTransformFeedbackFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceASTCDecodeFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceASTCDecodeFeaturesEXT
    deps::Vector{Any}
end

struct _ImageViewASTCDecodeModeEXT <: VulkanStruct{true}
    vks::VkImageViewASTCDecodeModeEXT
    deps::Vector{Any}
end

struct _SubpassDescriptionDepthStencilResolve <: VulkanStruct{true}
    vks::VkSubpassDescriptionDepthStencilResolve
    deps::Vector{Any}
end

struct PhysicalDeviceDepthStencilResolveProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supported_depth_resolve_modes::ResolveModeFlag
    supported_stencil_resolve_modes::ResolveModeFlag
    independent_resolve_none::Bool
    independent_resolve::Bool
end

struct CheckpointDataNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stage::PipelineStageFlag
    checkpoint_marker::Ptr{Cvoid}
end

struct QueueFamilyCheckpointPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    checkpoint_execution_stage_mask::PipelineStageFlag
end

struct _PhysicalDeviceVertexAttributeDivisorFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderAtomicFloatFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderAtomicInt64Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderAtomicInt64Features
    deps::Vector{Any}
end

struct _PhysicalDeviceVulkanMemoryModelFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkanMemoryModelFeatures
    deps::Vector{Any}
end

struct _PhysicalDeviceConditionalRenderingFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceConditionalRenderingFeaturesEXT
    deps::Vector{Any}
end

struct _PhysicalDevice8BitStorageFeatures <: VulkanStruct{true}
    vks::VkPhysicalDevice8BitStorageFeatures
    deps::Vector{Any}
end

struct _ExternalFormatANDROID <: VulkanStruct{true}
    vks::VkExternalFormatANDROID
    deps::Vector{Any}
end

struct _CommandBufferInheritanceConditionalRenderingInfoEXT <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceConditionalRenderingInfoEXT
    deps::Vector{Any}
end

struct _MemoryGetAndroidHardwareBufferInfoANDROID <: VulkanStruct{true}
    vks::VkMemoryGetAndroidHardwareBufferInfoANDROID
    deps::Vector{Any}
    memory::DeviceMemory
end

struct AndroidHardwareBufferPropertiesANDROID <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    allocation_size::UInt64
    memory_type_bits::UInt32
end

struct AndroidHardwareBufferUsageANDROID <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    android_hardware_buffer_usage::UInt64
end

struct _ImportAndroidHardwareBufferInfoANDROID <: VulkanStruct{true}
    vks::VkImportAndroidHardwareBufferInfoANDROID
    deps::Vector{Any}
end

struct PhysicalDevicePCIBusInfoPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    pci_domain::UInt32
    pci_bus::UInt32
    pci_device::UInt32
    pci_function::UInt32
end

struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_vertex_attrib_divisor::UInt32
end

struct _PipelineVertexInputDivisorStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineVertexInputDivisorStateCreateInfoEXT
    deps::Vector{Any}
end

struct _VertexInputBindingDivisorDescriptionEXT <: VulkanStruct{false}
    vks::VkVertexInputBindingDivisorDescriptionEXT
end

struct _SemaphoreSignalInfo <: VulkanStruct{true}
    vks::VkSemaphoreSignalInfo
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _SemaphoreWaitInfo <: VulkanStruct{true}
    vks::VkSemaphoreWaitInfo
    deps::Vector{Any}
end

struct _TimelineSemaphoreSubmitInfo <: VulkanStruct{true}
    vks::VkTimelineSemaphoreSubmitInfo
    deps::Vector{Any}
end

struct _SemaphoreTypeCreateInfo <: VulkanStruct{true}
    vks::VkSemaphoreTypeCreateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceTimelineSemaphoreProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_timeline_semaphore_value_difference::UInt64
end

struct _PhysicalDeviceTimelineSemaphoreFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceTimelineSemaphoreFeatures
    deps::Vector{Any}
end

struct _SubpassEndInfo <: VulkanStruct{true}
    vks::VkSubpassEndInfo
    deps::Vector{Any}
end

struct _SubpassBeginInfo <: VulkanStruct{true}
    vks::VkSubpassBeginInfo
    deps::Vector{Any}
end

struct _RenderPassCreateInfo2 <: VulkanStruct{true}
    vks::VkRenderPassCreateInfo2
    deps::Vector{Any}
end

struct _SubpassDependency2 <: VulkanStruct{true}
    vks::VkSubpassDependency2
    deps::Vector{Any}
end

struct _SubpassDescription2 <: VulkanStruct{true}
    vks::VkSubpassDescription2
    deps::Vector{Any}
end

struct _AttachmentReference2 <: VulkanStruct{true}
    vks::VkAttachmentReference2
    deps::Vector{Any}
end

struct _AttachmentDescription2 <: VulkanStruct{true}
    vks::VkAttachmentDescription2
    deps::Vector{Any}
end

struct DescriptorSetVariableDescriptorCountLayoutSupport <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_variable_descriptor_count::UInt32
end

struct _DescriptorSetVariableDescriptorCountAllocateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetVariableDescriptorCountAllocateInfo
    deps::Vector{Any}
end

struct _DescriptorSetLayoutBindingFlagsCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutBindingFlagsCreateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceDescriptorIndexingProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
end

struct _PhysicalDeviceDescriptorIndexingFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceDescriptorIndexingFeatures
    deps::Vector{Any}
end

struct _PipelineRasterizationConservativeStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationConservativeStateCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceShaderCoreProperties2AMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_core_features::ShaderCorePropertiesFlagAMD
    active_compute_unit_count::UInt32
end

struct PhysicalDeviceShaderCorePropertiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_engine_count::UInt32
    shader_arrays_per_engine_count::UInt32
    compute_units_per_shader_array::UInt32
    simd_per_compute_unit::UInt32
    wavefronts_per_simd::UInt32
    wavefront_size::UInt32
    sgprs_per_simd::UInt32
    min_sgpr_allocation::UInt32
    max_sgpr_allocation::UInt32
    sgpr_allocation_granularity::UInt32
    vgprs_per_simd::UInt32
    min_vgpr_allocation::UInt32
    max_vgpr_allocation::UInt32
    vgpr_allocation_granularity::UInt32
end

struct _CalibratedTimestampInfoEXT <: VulkanStruct{true}
    vks::VkCalibratedTimestampInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceConservativeRasterizationPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    primitive_overestimation_size::Float32
    max_extra_primitive_overestimation_size::Float32
    extra_primitive_overestimation_size_granularity::Float32
    primitive_underestimation::Bool
    conservative_point_and_line_rasterization::Bool
    degenerate_triangles_rasterized::Bool
    degenerate_lines_rasterized::Bool
    fully_covered_fragment_shader_input_variable::Bool
    conservative_rasterization_post_depth_coverage::Bool
end

struct PhysicalDeviceExternalMemoryHostPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_imported_host_pointer_alignment::UInt64
end

struct MemoryHostPointerPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct _ImportMemoryHostPointerInfoEXT <: VulkanStruct{true}
    vks::VkImportMemoryHostPointerInfoEXT
    deps::Vector{Any}
end

struct DeviceMemoryReportCallbackDataEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    flags::UInt32
    type::DeviceMemoryReportEventTypeEXT
    memory_object_id::UInt64
    size::UInt64
    object_type::ObjectType
    object_handle::UInt64
    heap_index::UInt32
end

struct _DeviceDeviceMemoryReportCreateInfoEXT <: VulkanStruct{true}
    vks::VkDeviceDeviceMemoryReportCreateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceDeviceMemoryReportFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    deps::Vector{Any}
end

struct _DebugUtilsMessengerCallbackDataEXT <: VulkanStruct{true}
    vks::VkDebugUtilsMessengerCallbackDataEXT
    deps::Vector{Any}
end

struct _DebugUtilsMessengerCreateInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsMessengerCreateInfoEXT
    deps::Vector{Any}
end

struct _DebugUtilsLabelEXT <: VulkanStruct{true}
    vks::VkDebugUtilsLabelEXT
    deps::Vector{Any}
end

struct _DebugUtilsObjectTagInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsObjectTagInfoEXT
    deps::Vector{Any}
end

struct _DebugUtilsObjectNameInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsObjectNameInfoEXT
    deps::Vector{Any}
end

struct _DeviceQueueGlobalPriorityCreateInfoEXT <: VulkanStruct{true}
    vks::VkDeviceQueueGlobalPriorityCreateInfoEXT
    deps::Vector{Any}
end

struct ShaderResourceUsageAMD <: ReturnedOnly
    num_used_vgprs::UInt32
    num_used_sgprs::UInt32
    lds_size_per_local_work_group::UInt32
    lds_usage_size_in_bytes::UInt
    scratch_mem_usage_in_bytes::UInt
end

struct ShaderStatisticsInfoAMD <: ReturnedOnly
    shader_stage_mask::ShaderStageFlag
    resource_usage::ShaderResourceUsageAMD
    num_physical_vgprs::UInt32
    num_physical_sgprs::UInt32
    num_available_vgprs::UInt32
    num_available_sgprs::UInt32
    compute_work_group_size::NTuple{3, UInt32}
end

struct _PhysicalDeviceHostQueryResetFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceHostQueryResetFeatures
    deps::Vector{Any}
end

struct PhysicalDeviceFloatControlsProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
end

struct _PhysicalDeviceShaderFloat16Int8Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderFloat16Int8Features
    deps::Vector{Any}
end

struct _PhysicalDeviceShaderDrawParametersFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderDrawParametersFeatures
    deps::Vector{Any}
end

struct DescriptorSetLayoutSupport <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supported::Bool
end

struct PhysicalDeviceMaintenance3Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::UInt64
end

struct _ShaderModuleValidationCacheCreateInfoEXT <: VulkanStruct{true}
    vks::VkShaderModuleValidationCacheCreateInfoEXT
    deps::Vector{Any}
    validation_cache::ValidationCacheEXT
end

struct _ValidationCacheCreateInfoEXT <: VulkanStruct{true}
    vks::VkValidationCacheCreateInfoEXT
    deps::Vector{Any}
end

struct _ImageFormatListCreateInfo <: VulkanStruct{true}
    vks::VkImageFormatListCreateInfo
    deps::Vector{Any}
end

struct _PipelineCoverageModulationStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageModulationStateCreateInfoNV
    deps::Vector{Any}
end

struct _DescriptorPoolInlineUniformBlockCreateInfoEXT <: VulkanStruct{true}
    vks::VkDescriptorPoolInlineUniformBlockCreateInfoEXT
    deps::Vector{Any}
end

struct _WriteDescriptorSetInlineUniformBlockEXT <: VulkanStruct{true}
    vks::VkWriteDescriptorSetInlineUniformBlockEXT
    deps::Vector{Any}
end

struct PhysicalDeviceInlineUniformBlockPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_inline_uniform_block_size::UInt32
    max_per_stage_descriptor_inline_uniform_blocks::UInt32
    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks::UInt32
    max_descriptor_set_inline_uniform_blocks::UInt32
    max_descriptor_set_update_after_bind_inline_uniform_blocks::UInt32
end

struct _PhysicalDeviceInlineUniformBlockFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceInlineUniformBlockFeaturesEXT
    deps::Vector{Any}
end

struct _PipelineColorBlendAdvancedStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineColorBlendAdvancedStateCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    advanced_blend_max_color_attachments::UInt32
    advanced_blend_independent_blend::Bool
    advanced_blend_non_premultiplied_src_color::Bool
    advanced_blend_non_premultiplied_dst_color::Bool
    advanced_blend_correlated_overlap::Bool
    advanced_blend_all_operations::Bool
end

struct _PhysicalDeviceBlendOperationAdvancedFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    deps::Vector{Any}
end

struct _SamplerReductionModeCreateInfo <: VulkanStruct{true}
    vks::VkSamplerReductionModeCreateInfo
    deps::Vector{Any}
end

struct _PipelineSampleLocationsStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineSampleLocationsStateCreateInfoEXT
    deps::Vector{Any}
end

struct _RenderPassSampleLocationsBeginInfoEXT <: VulkanStruct{true}
    vks::VkRenderPassSampleLocationsBeginInfoEXT
    deps::Vector{Any}
end

struct _SubpassSampleLocationsEXT <: VulkanStruct{false}
    vks::VkSubpassSampleLocationsEXT
end

struct _AttachmentSampleLocationsEXT <: VulkanStruct{false}
    vks::VkAttachmentSampleLocationsEXT
end

struct _SampleLocationsInfoEXT <: VulkanStruct{true}
    vks::VkSampleLocationsInfoEXT
    deps::Vector{Any}
end

struct _SampleLocationEXT <: VulkanStruct{false}
    vks::VkSampleLocationEXT
end

struct PhysicalDeviceSamplerFilterMinmaxProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
end

struct _PipelineCoverageToColorStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageToColorStateCreateInfoNV
    deps::Vector{Any}
end

struct _DeviceQueueInfo2 <: VulkanStruct{true}
    vks::VkDeviceQueueInfo2
    deps::Vector{Any}
end

struct PhysicalDeviceProtectedMemoryProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    protected_no_fault::Bool
end

struct _PhysicalDeviceProtectedMemoryFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceProtectedMemoryFeatures
    deps::Vector{Any}
end

struct _ProtectedSubmitInfo <: VulkanStruct{true}
    vks::VkProtectedSubmitInfo
    deps::Vector{Any}
end

struct _ConditionalRenderingBeginInfoEXT <: VulkanStruct{true}
    vks::VkConditionalRenderingBeginInfoEXT
    deps::Vector{Any}
    buffer::Buffer
end

struct TextureLODGatherFormatPropertiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supports_texture_gather_lod_bias_amd::Bool
end

struct SamplerYcbcrConversionImageFormatProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    combined_image_sampler_descriptor_count::UInt32
end

struct _PhysicalDeviceSamplerYcbcrConversionFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceSamplerYcbcrConversionFeatures
    deps::Vector{Any}
end

struct _ImagePlaneMemoryRequirementsInfo <: VulkanStruct{true}
    vks::VkImagePlaneMemoryRequirementsInfo
    deps::Vector{Any}
end

struct _BindImagePlaneMemoryInfo <: VulkanStruct{true}
    vks::VkBindImagePlaneMemoryInfo
    deps::Vector{Any}
end

struct _SamplerYcbcrConversionCreateInfo <: VulkanStruct{true}
    vks::VkSamplerYcbcrConversionCreateInfo
    deps::Vector{Any}
end

struct _SamplerYcbcrConversionInfo <: VulkanStruct{true}
    vks::VkSamplerYcbcrConversionInfo
    deps::Vector{Any}
    conversion::SamplerYcbcrConversion
end

struct _PipelineTessellationDomainOriginStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineTessellationDomainOriginStateCreateInfo
    deps::Vector{Any}
end

struct _ImageViewUsageCreateInfo <: VulkanStruct{true}
    vks::VkImageViewUsageCreateInfo
    deps::Vector{Any}
end

struct _MemoryDedicatedAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryDedicatedAllocateInfo
    deps::Vector{Any}
    image::OptionalPtr{Image}
    buffer::OptionalPtr{Buffer}
end

struct MemoryDedicatedRequirements <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    prefers_dedicated_allocation::Bool
    requires_dedicated_allocation::Bool
end

struct PhysicalDevicePointClippingProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    point_clipping_behavior::PointClippingBehavior
end

struct _ImageSparseMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkImageSparseMemoryRequirementsInfo2
    deps::Vector{Any}
    image::Image
end

struct _ImageMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkImageMemoryRequirementsInfo2
    deps::Vector{Any}
    image::Image
end

struct _BufferMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkBufferMemoryRequirementsInfo2
    deps::Vector{Any}
    buffer::Buffer
end

struct _PhysicalDeviceShaderSubgroupExtendedTypesFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    deps::Vector{Any}
end

struct PhysicalDeviceSubgroupProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    subgroup_size::UInt32
    supported_stages::ShaderStageFlag
    supported_operations::SubgroupFeatureFlag
    quad_operations_in_all_stages::Bool
end

struct _PhysicalDevice16BitStorageFeatures <: VulkanStruct{true}
    vks::VkPhysicalDevice16BitStorageFeatures
    deps::Vector{Any}
end

struct SharedPresentSurfaceCapabilitiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shared_present_supported_usage_flags::ImageUsageFlag
end

struct _DisplayPlaneInfo2KHR <: VulkanStruct{true}
    vks::VkDisplayPlaneInfo2KHR
    deps::Vector{Any}
    mode::DisplayModeKHR
end

struct _PhysicalDeviceSurfaceInfo2KHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceSurfaceInfo2KHR
    deps::Vector{Any}
    surface::SurfaceKHR
end

struct _RenderPassInputAttachmentAspectCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassInputAttachmentAspectCreateInfo
    deps::Vector{Any}
end

struct _InputAttachmentAspectReference <: VulkanStruct{false}
    vks::VkInputAttachmentAspectReference
end

struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    per_view_position_all_components::Bool
end

struct _PipelineDiscardRectangleStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineDiscardRectangleStateCreateInfoEXT
    deps::Vector{Any}
end

struct PhysicalDeviceDiscardRectanglePropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_discard_rectangles::UInt32
end

struct _PipelineViewportSwizzleStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportSwizzleStateCreateInfoNV
    deps::Vector{Any}
end

struct _ViewportSwizzleNV <: VulkanStruct{false}
    vks::VkViewportSwizzleNV
end

struct _PipelineViewportWScalingStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportWScalingStateCreateInfoNV
    deps::Vector{Any}
end

struct _ViewportWScalingNV <: VulkanStruct{false}
    vks::VkViewportWScalingNV
end

struct _MetalSurfaceCreateInfoEXT <: VulkanStruct{true}
    vks::VkMetalSurfaceCreateInfoEXT
    deps::Vector{Any}
end

struct _MacOSSurfaceCreateInfoMVK <: VulkanStruct{true}
    vks::VkMacOSSurfaceCreateInfoMVK
    deps::Vector{Any}
end

struct _IOSSurfaceCreateInfoMVK <: VulkanStruct{true}
    vks::VkIOSSurfaceCreateInfoMVK
    deps::Vector{Any}
end

struct _PresentTimeGOOGLE <: VulkanStruct{false}
    vks::VkPresentTimeGOOGLE
end

struct _PresentTimesInfoGOOGLE <: VulkanStruct{true}
    vks::VkPresentTimesInfoGOOGLE
    deps::Vector{Any}
end

struct PastPresentationTimingGOOGLE <: ReturnedOnly
    present_id::UInt32
    desired_present_time::UInt64
    actual_present_time::UInt64
    earliest_present_time::UInt64
    present_margin::UInt64
end

struct RefreshCycleDurationGOOGLE <: ReturnedOnly
    refresh_duration::UInt64
end

struct _SwapchainDisplayNativeHdrCreateInfoAMD <: VulkanStruct{true}
    vks::VkSwapchainDisplayNativeHdrCreateInfoAMD
    deps::Vector{Any}
end

struct DisplayNativeHdrSurfaceCapabilitiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    local_dimming_support::Bool
end

struct _HdrMetadataEXT <: VulkanStruct{true}
    vks::VkHdrMetadataEXT
    deps::Vector{Any}
end

struct _XYColorEXT <: VulkanStruct{false}
    vks::VkXYColorEXT
end

struct _DescriptorUpdateTemplateCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorUpdateTemplateCreateInfo
    deps::Vector{Any}
    descriptor_set_layout::DescriptorSetLayout
    pipeline_layout::PipelineLayout
end

struct _DescriptorUpdateTemplateEntry <: VulkanStruct{false}
    vks::VkDescriptorUpdateTemplateEntry
end

struct _DeviceGroupSwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkDeviceGroupSwapchainCreateInfoKHR
    deps::Vector{Any}
end

struct _DeviceGroupDeviceCreateInfo <: VulkanStruct{true}
    vks::VkDeviceGroupDeviceCreateInfo
    deps::Vector{Any}
end

struct _DeviceGroupPresentInfoKHR <: VulkanStruct{true}
    vks::VkDeviceGroupPresentInfoKHR
    deps::Vector{Any}
end

struct _AcquireNextImageInfoKHR <: VulkanStruct{true}
    vks::VkAcquireNextImageInfoKHR
    deps::Vector{Any}
    swapchain::SwapchainKHR
    semaphore::OptionalPtr{Semaphore}
    fence::OptionalPtr{Fence}
end

struct _BindImageMemorySwapchainInfoKHR <: VulkanStruct{true}
    vks::VkBindImageMemorySwapchainInfoKHR
    deps::Vector{Any}
    swapchain::SwapchainKHR
end

struct _ImageSwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkImageSwapchainCreateInfoKHR
    deps::Vector{Any}
    swapchain::OptionalPtr{SwapchainKHR}
end

struct DeviceGroupPresentCapabilitiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    present_mask::NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), UInt32}
    modes::DeviceGroupPresentModeFlagKHR
end

struct _DeviceGroupBindSparseInfo <: VulkanStruct{true}
    vks::VkDeviceGroupBindSparseInfo
    deps::Vector{Any}
end

struct _DeviceGroupSubmitInfo <: VulkanStruct{true}
    vks::VkDeviceGroupSubmitInfo
    deps::Vector{Any}
end

struct _DeviceGroupCommandBufferBeginInfo <: VulkanStruct{true}
    vks::VkDeviceGroupCommandBufferBeginInfo
    deps::Vector{Any}
end

struct _DeviceGroupRenderPassBeginInfo <: VulkanStruct{true}
    vks::VkDeviceGroupRenderPassBeginInfo
    deps::Vector{Any}
end

struct _BindImageMemoryDeviceGroupInfo <: VulkanStruct{true}
    vks::VkBindImageMemoryDeviceGroupInfo
    deps::Vector{Any}
end

struct _BindImageMemoryInfo <: VulkanStruct{true}
    vks::VkBindImageMemoryInfo
    deps::Vector{Any}
    image::Image
    memory::DeviceMemory
end

struct _BindBufferMemoryDeviceGroupInfo <: VulkanStruct{true}
    vks::VkBindBufferMemoryDeviceGroupInfo
    deps::Vector{Any}
end

struct _BindBufferMemoryInfo <: VulkanStruct{true}
    vks::VkBindBufferMemoryInfo
    deps::Vector{Any}
    buffer::Buffer
    memory::DeviceMemory
end

struct _MemoryAllocateFlagsInfo <: VulkanStruct{true}
    vks::VkMemoryAllocateFlagsInfo
    deps::Vector{Any}
end

struct PhysicalDeviceGroupProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    physical_device_count::UInt32
    physical_devices::NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), PhysicalDevice}
    subset_allocation::Bool
end

struct _SwapchainCounterCreateInfoEXT <: VulkanStruct{true}
    vks::VkSwapchainCounterCreateInfoEXT
    deps::Vector{Any}
end

struct _DisplayEventInfoEXT <: VulkanStruct{true}
    vks::VkDisplayEventInfoEXT
    deps::Vector{Any}
end

struct _DeviceEventInfoEXT <: VulkanStruct{true}
    vks::VkDeviceEventInfoEXT
    deps::Vector{Any}
end

struct _DisplayPowerInfoEXT <: VulkanStruct{true}
    vks::VkDisplayPowerInfoEXT
    deps::Vector{Any}
end

struct _RenderPassMultiviewCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassMultiviewCreateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceMultiviewProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
end

struct _PhysicalDeviceMultiviewFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceMultiviewFeatures
    deps::Vector{Any}
end

struct _FenceGetFdInfoKHR <: VulkanStruct{true}
    vks::VkFenceGetFdInfoKHR
    deps::Vector{Any}
    fence::Fence
end

struct _ImportFenceFdInfoKHR <: VulkanStruct{true}
    vks::VkImportFenceFdInfoKHR
    deps::Vector{Any}
    fence::Fence
end

struct _FenceGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkFenceGetWin32HandleInfoKHR
    deps::Vector{Any}
    fence::Fence
end

struct _ExportFenceWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportFenceWin32HandleInfoKHR
    deps::Vector{Any}
end

struct _ImportFenceWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportFenceWin32HandleInfoKHR
    deps::Vector{Any}
    fence::Fence
end

struct _ExportFenceCreateInfo <: VulkanStruct{true}
    vks::VkExportFenceCreateInfo
    deps::Vector{Any}
end

struct ExternalFenceProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalFenceHandleTypeFlag
    compatible_handle_types::ExternalFenceHandleTypeFlag
    external_fence_features::ExternalFenceFeatureFlag
end

struct _PhysicalDeviceExternalFenceInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalFenceInfo
    deps::Vector{Any}
end

struct _SemaphoreGetZirconHandleInfoFUCHSIA <: VulkanStruct{true}
    vks::VkSemaphoreGetZirconHandleInfoFUCHSIA
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _ImportSemaphoreZirconHandleInfoFUCHSIA <: VulkanStruct{true}
    vks::VkImportSemaphoreZirconHandleInfoFUCHSIA
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _SemaphoreGetFdInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreGetFdInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _ImportSemaphoreFdInfoKHR <: VulkanStruct{true}
    vks::VkImportSemaphoreFdInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _SemaphoreGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreGetWin32HandleInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _D3D12FenceSubmitInfoKHR <: VulkanStruct{true}
    vks::VkD3D12FenceSubmitInfoKHR
    deps::Vector{Any}
end

struct _ExportSemaphoreWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportSemaphoreWin32HandleInfoKHR
    deps::Vector{Any}
end

struct _ImportSemaphoreWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportSemaphoreWin32HandleInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

struct _ExportSemaphoreCreateInfo <: VulkanStruct{true}
    vks::VkExportSemaphoreCreateInfo
    deps::Vector{Any}
end

struct ExternalSemaphoreProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalSemaphoreHandleTypeFlag
    compatible_handle_types::ExternalSemaphoreHandleTypeFlag
    external_semaphore_features::ExternalSemaphoreFeatureFlag
end

struct _PhysicalDeviceExternalSemaphoreInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalSemaphoreInfo
    deps::Vector{Any}
end

struct _Win32KeyedMutexAcquireReleaseInfoKHR <: VulkanStruct{true}
    vks::VkWin32KeyedMutexAcquireReleaseInfoKHR
    deps::Vector{Any}
end

struct _MemoryGetFdInfoKHR <: VulkanStruct{true}
    vks::VkMemoryGetFdInfoKHR
    deps::Vector{Any}
    memory::DeviceMemory
end

struct MemoryFdPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct _ImportMemoryFdInfoKHR <: VulkanStruct{true}
    vks::VkImportMemoryFdInfoKHR
    deps::Vector{Any}
end

struct _MemoryGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkMemoryGetWin32HandleInfoKHR
    deps::Vector{Any}
    memory::DeviceMemory
end

struct MemoryWin32HandlePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct _MemoryGetZirconHandleInfoFUCHSIA <: VulkanStruct{true}
    vks::VkMemoryGetZirconHandleInfoFUCHSIA
    deps::Vector{Any}
    memory::DeviceMemory
end

struct MemoryZirconHandlePropertiesFUCHSIA <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct _ImportMemoryZirconHandleInfoFUCHSIA <: VulkanStruct{true}
    vks::VkImportMemoryZirconHandleInfoFUCHSIA
    deps::Vector{Any}
end

struct _ExportMemoryWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportMemoryWin32HandleInfoKHR
    deps::Vector{Any}
end

struct _ImportMemoryWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportMemoryWin32HandleInfoKHR
    deps::Vector{Any}
end

struct _ExportMemoryAllocateInfo <: VulkanStruct{true}
    vks::VkExportMemoryAllocateInfo
    deps::Vector{Any}
end

struct _ExternalMemoryBufferCreateInfo <: VulkanStruct{true}
    vks::VkExternalMemoryBufferCreateInfo
    deps::Vector{Any}
end

struct _ExternalMemoryImageCreateInfo <: VulkanStruct{true}
    vks::VkExternalMemoryImageCreateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceIDProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
end

struct _PhysicalDeviceExternalBufferInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalBufferInfo
    deps::Vector{Any}
end

struct _PhysicalDeviceExternalImageFormatInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalImageFormatInfo
    deps::Vector{Any}
end

struct ExternalMemoryProperties <: ReturnedOnly
    external_memory_features::ExternalMemoryFeatureFlag
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlag
    compatible_handle_types::ExternalMemoryHandleTypeFlag
end

struct ExternalBufferProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

struct ExternalImageFormatProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

struct _PhysicalDeviceVariablePointersFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceVariablePointersFeatures
    deps::Vector{Any}
end

struct _RectLayerKHR <: VulkanStruct{false}
    vks::VkRectLayerKHR
end

struct _PresentRegionKHR <: VulkanStruct{true}
    vks::VkPresentRegionKHR
    deps::Vector{Any}
end

struct _PresentRegionsKHR <: VulkanStruct{true}
    vks::VkPresentRegionsKHR
    deps::Vector{Any}
end

struct _ConformanceVersion <: VulkanStruct{false}
    vks::VkConformanceVersion
end

struct PhysicalDeviceVulkan12Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::_ConformanceVersion
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
    supported_depth_resolve_modes::ResolveModeFlag
    supported_stencil_resolve_modes::ResolveModeFlag
    independent_resolve_none::Bool
    independent_resolve::Bool
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
    max_timeline_semaphore_value_difference::UInt64
    framebuffer_integer_color_sample_counts::SampleCountFlag
end

struct PhysicalDeviceDriverProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::_ConformanceVersion
end

struct PhysicalDevicePushDescriptorPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_push_descriptors::UInt32
end

struct _PhysicalDeviceSparseImageFormatInfo2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceSparseImageFormatInfo2
    deps::Vector{Any}
end

struct _PhysicalDeviceImageFormatInfo2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageFormatInfo2
    deps::Vector{Any}
end

struct _PhysicalDeviceFeatures2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceFeatures2
    deps::Vector{Any}
end

struct _GeneratedCommandsMemoryRequirementsInfoNV <: VulkanStruct{true}
    vks::VkGeneratedCommandsMemoryRequirementsInfoNV
    deps::Vector{Any}
    pipeline::Pipeline
    indirect_commands_layout::IndirectCommandsLayoutNV
end

struct _GeneratedCommandsInfoNV <: VulkanStruct{true}
    vks::VkGeneratedCommandsInfoNV
    deps::Vector{Any}
    pipeline::Pipeline
    indirect_commands_layout::IndirectCommandsLayoutNV
    preprocess_buffer::Buffer
    sequences_count_buffer::OptionalPtr{Buffer}
    sequences_index_buffer::OptionalPtr{Buffer}
end

struct _IndirectCommandsLayoutCreateInfoNV <: VulkanStruct{true}
    vks::VkIndirectCommandsLayoutCreateInfoNV
    deps::Vector{Any}
end

struct _IndirectCommandsLayoutTokenNV <: VulkanStruct{true}
    vks::VkIndirectCommandsLayoutTokenNV
    deps::Vector{Any}
    pushconstant_pipeline_layout::OptionalPtr{PipelineLayout}
end

struct _IndirectCommandsStreamNV <: VulkanStruct{false}
    vks::VkIndirectCommandsStreamNV
    buffer::Buffer
end

struct _SetStateFlagsIndirectCommandNV <: VulkanStruct{false}
    vks::VkSetStateFlagsIndirectCommandNV
end

struct _BindVertexBufferIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindVertexBufferIndirectCommandNV
end

struct _BindIndexBufferIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindIndexBufferIndirectCommandNV
end

struct _BindShaderGroupIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindShaderGroupIndirectCommandNV
end

struct _GraphicsPipelineShaderGroupsCreateInfoNV <: VulkanStruct{true}
    vks::VkGraphicsPipelineShaderGroupsCreateInfoNV
    deps::Vector{Any}
end

struct _GraphicsShaderGroupCreateInfoNV <: VulkanStruct{true}
    vks::VkGraphicsShaderGroupCreateInfoNV
    deps::Vector{Any}
end

struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_graphics_shader_group_count::UInt32
    max_indirect_sequence_count::UInt32
    max_indirect_commands_token_count::UInt32
    max_indirect_commands_stream_count::UInt32
    max_indirect_commands_token_offset::UInt32
    max_indirect_commands_stream_stride::UInt32
    min_sequences_count_buffer_offset_alignment::UInt32
    min_sequences_index_buffer_offset_alignment::UInt32
    min_indirect_commands_buffer_offset_alignment::UInt32
end

struct _PhysicalDevicePrivateDataFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevicePrivateDataFeaturesEXT
    deps::Vector{Any}
end

struct _PrivateDataSlotCreateInfoEXT <: VulkanStruct{true}
    vks::VkPrivateDataSlotCreateInfoEXT
    deps::Vector{Any}
end

struct _DevicePrivateDataCreateInfoEXT <: VulkanStruct{true}
    vks::VkDevicePrivateDataCreateInfoEXT
    deps::Vector{Any}
end

struct _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    deps::Vector{Any}
end

struct _Win32KeyedMutexAcquireReleaseInfoNV <: VulkanStruct{true}
    vks::VkWin32KeyedMutexAcquireReleaseInfoNV
    deps::Vector{Any}
end

struct _ExportMemoryWin32HandleInfoNV <: VulkanStruct{true}
    vks::VkExportMemoryWin32HandleInfoNV
    deps::Vector{Any}
end

struct _ImportMemoryWin32HandleInfoNV <: VulkanStruct{true}
    vks::VkImportMemoryWin32HandleInfoNV
    deps::Vector{Any}
end

struct _ExportMemoryAllocateInfoNV <: VulkanStruct{true}
    vks::VkExportMemoryAllocateInfoNV
    deps::Vector{Any}
end

struct _ExternalMemoryImageCreateInfoNV <: VulkanStruct{true}
    vks::VkExternalMemoryImageCreateInfoNV
    deps::Vector{Any}
end

struct _DedicatedAllocationMemoryAllocateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationMemoryAllocateInfoNV
    deps::Vector{Any}
    image::OptionalPtr{Image}
    buffer::OptionalPtr{Buffer}
end

struct _DedicatedAllocationBufferCreateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationBufferCreateInfoNV
    deps::Vector{Any}
end

struct _DedicatedAllocationImageCreateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationImageCreateInfoNV
    deps::Vector{Any}
end

struct _DebugMarkerMarkerInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerMarkerInfoEXT
    deps::Vector{Any}
end

struct _DebugMarkerObjectTagInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerObjectTagInfoEXT
    deps::Vector{Any}
end

struct _DebugMarkerObjectNameInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerObjectNameInfoEXT
    deps::Vector{Any}
end

struct _PipelineRasterizationStateRasterizationOrderAMD <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateRasterizationOrderAMD
    deps::Vector{Any}
end

struct _ValidationFeaturesEXT <: VulkanStruct{true}
    vks::VkValidationFeaturesEXT
    deps::Vector{Any}
end

struct _ValidationFlagsEXT <: VulkanStruct{true}
    vks::VkValidationFlagsEXT
    deps::Vector{Any}
end

struct _DebugReportCallbackCreateInfoEXT <: VulkanStruct{true}
    vks::VkDebugReportCallbackCreateInfoEXT
    deps::Vector{Any}
end

struct _PresentInfoKHR <: VulkanStruct{true}
    vks::VkPresentInfoKHR
    deps::Vector{Any}
end

struct _SwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkSwapchainCreateInfoKHR
    deps::Vector{Any}
    surface::SurfaceKHR
    old_swapchain::OptionalPtr{SwapchainKHR}
end

struct SurfaceFormatKHR <: ReturnedOnly
    format::Format
    color_space::ColorSpaceKHR
end

struct SurfaceFormat2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    surface_format::SurfaceFormatKHR
end

struct _ScreenSurfaceCreateInfoQNX <: VulkanStruct{true}
    vks::VkScreenSurfaceCreateInfoQNX
    deps::Vector{Any}
end

struct _StreamDescriptorSurfaceCreateInfoGGP <: VulkanStruct{true}
    vks::VkStreamDescriptorSurfaceCreateInfoGGP
    deps::Vector{Any}
end

struct _ImagePipeSurfaceCreateInfoFUCHSIA <: VulkanStruct{true}
    vks::VkImagePipeSurfaceCreateInfoFUCHSIA
    deps::Vector{Any}
end

struct _DirectFBSurfaceCreateInfoEXT <: VulkanStruct{true}
    vks::VkDirectFBSurfaceCreateInfoEXT
    deps::Vector{Any}
end

struct _XcbSurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkXcbSurfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _XlibSurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkXlibSurfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _Win32SurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkWin32SurfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _WaylandSurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkWaylandSurfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _ViSurfaceCreateInfoNN <: VulkanStruct{true}
    vks::VkViSurfaceCreateInfoNN
    deps::Vector{Any}
end

struct _AndroidSurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkAndroidSurfaceCreateInfoKHR
    deps::Vector{Any}
end

struct _DisplayPresentInfoKHR <: VulkanStruct{true}
    vks::VkDisplayPresentInfoKHR
    deps::Vector{Any}
end

struct _DisplaySurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkDisplaySurfaceCreateInfoKHR
    deps::Vector{Any}
    display_mode::DisplayModeKHR
end

struct _DisplayModeCreateInfoKHR <: VulkanStruct{true}
    vks::VkDisplayModeCreateInfoKHR
    deps::Vector{Any}
end

struct _DisplayModeParametersKHR <: VulkanStruct{false}
    vks::VkDisplayModeParametersKHR
end

struct DisplayModePropertiesKHR <: ReturnedOnly
    display_mode::DisplayModeKHR
    parameters::_DisplayModeParametersKHR
end

struct DisplayModeProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_mode_properties::DisplayModePropertiesKHR
end

struct DisplayPlanePropertiesKHR <: ReturnedOnly
    current_display::DisplayKHR
    current_stack_index::UInt32
end

struct DisplayPlaneProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_plane_properties::DisplayPlanePropertiesKHR
end

struct _SubmitInfo <: VulkanStruct{true}
    vks::VkSubmitInfo
    deps::Vector{Any}
end

struct _DispatchIndirectCommand <: VulkanStruct{false}
    vks::VkDispatchIndirectCommand
end

struct _DrawIndexedIndirectCommand <: VulkanStruct{false}
    vks::VkDrawIndexedIndirectCommand
end

struct _DrawIndirectCommand <: VulkanStruct{false}
    vks::VkDrawIndirectCommand
end

struct _FramebufferCreateInfo <: VulkanStruct{true}
    vks::VkFramebufferCreateInfo
    deps::Vector{Any}
    render_pass::RenderPass
end

struct _QueryPoolCreateInfo <: VulkanStruct{true}
    vks::VkQueryPoolCreateInfo
    deps::Vector{Any}
end

struct _SemaphoreCreateInfo <: VulkanStruct{true}
    vks::VkSemaphoreCreateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceLimits <: ReturnedOnly
    max_image_dimension_1_d::UInt32
    max_image_dimension_2_d::UInt32
    max_image_dimension_3_d::UInt32
    max_image_dimension_cube::UInt32
    max_image_array_layers::UInt32
    max_texel_buffer_elements::UInt32
    max_uniform_buffer_range::UInt32
    max_storage_buffer_range::UInt32
    max_push_constants_size::UInt32
    max_memory_allocation_count::UInt32
    max_sampler_allocation_count::UInt32
    buffer_image_granularity::UInt64
    sparse_address_space_size::UInt64
    max_bound_descriptor_sets::UInt32
    max_per_stage_descriptor_samplers::UInt32
    max_per_stage_descriptor_uniform_buffers::UInt32
    max_per_stage_descriptor_storage_buffers::UInt32
    max_per_stage_descriptor_sampled_images::UInt32
    max_per_stage_descriptor_storage_images::UInt32
    max_per_stage_descriptor_input_attachments::UInt32
    max_per_stage_resources::UInt32
    max_descriptor_set_samplers::UInt32
    max_descriptor_set_uniform_buffers::UInt32
    max_descriptor_set_uniform_buffers_dynamic::UInt32
    max_descriptor_set_storage_buffers::UInt32
    max_descriptor_set_storage_buffers_dynamic::UInt32
    max_descriptor_set_sampled_images::UInt32
    max_descriptor_set_storage_images::UInt32
    max_descriptor_set_input_attachments::UInt32
    max_vertex_input_attributes::UInt32
    max_vertex_input_bindings::UInt32
    max_vertex_input_attribute_offset::UInt32
    max_vertex_input_binding_stride::UInt32
    max_vertex_output_components::UInt32
    max_tessellation_generation_level::UInt32
    max_tessellation_patch_size::UInt32
    max_tessellation_control_per_vertex_input_components::UInt32
    max_tessellation_control_per_vertex_output_components::UInt32
    max_tessellation_control_per_patch_output_components::UInt32
    max_tessellation_control_total_output_components::UInt32
    max_tessellation_evaluation_input_components::UInt32
    max_tessellation_evaluation_output_components::UInt32
    max_geometry_shader_invocations::UInt32
    max_geometry_input_components::UInt32
    max_geometry_output_components::UInt32
    max_geometry_output_vertices::UInt32
    max_geometry_total_output_components::UInt32
    max_fragment_input_components::UInt32
    max_fragment_output_attachments::UInt32
    max_fragment_dual_src_attachments::UInt32
    max_fragment_combined_output_resources::UInt32
    max_compute_shared_memory_size::UInt32
    max_compute_work_group_count::NTuple{3, UInt32}
    max_compute_work_group_invocations::UInt32
    max_compute_work_group_size::NTuple{3, UInt32}
    sub_pixel_precision_bits::UInt32
    sub_texel_precision_bits::UInt32
    mipmap_precision_bits::UInt32
    max_draw_indexed_index_value::UInt32
    max_draw_indirect_count::UInt32
    max_sampler_lod_bias::Float32
    max_sampler_anisotropy::Float32
    max_viewports::UInt32
    max_viewport_dimensions::NTuple{2, UInt32}
    viewport_bounds_range::NTuple{2, Float32}
    viewport_sub_pixel_bits::UInt32
    min_memory_map_alignment::UInt
    min_texel_buffer_offset_alignment::UInt64
    min_uniform_buffer_offset_alignment::UInt64
    min_storage_buffer_offset_alignment::UInt64
    min_texel_offset::Int32
    max_texel_offset::UInt32
    min_texel_gather_offset::Int32
    max_texel_gather_offset::UInt32
    min_interpolation_offset::Float32
    max_interpolation_offset::Float32
    sub_pixel_interpolation_offset_bits::UInt32
    max_framebuffer_width::UInt32
    max_framebuffer_height::UInt32
    max_framebuffer_layers::UInt32
    framebuffer_color_sample_counts::SampleCountFlag
    framebuffer_depth_sample_counts::SampleCountFlag
    framebuffer_stencil_sample_counts::SampleCountFlag
    framebuffer_no_attachments_sample_counts::SampleCountFlag
    max_color_attachments::UInt32
    sampled_image_color_sample_counts::SampleCountFlag
    sampled_image_integer_sample_counts::SampleCountFlag
    sampled_image_depth_sample_counts::SampleCountFlag
    sampled_image_stencil_sample_counts::SampleCountFlag
    storage_image_sample_counts::SampleCountFlag
    max_sample_mask_words::UInt32
    timestamp_compute_and_graphics::Bool
    timestamp_period::Float32
    max_clip_distances::UInt32
    max_cull_distances::UInt32
    max_combined_clip_and_cull_distances::UInt32
    discrete_queue_priorities::UInt32
    point_size_range::NTuple{2, Float32}
    line_width_range::NTuple{2, Float32}
    point_size_granularity::Float32
    line_width_granularity::Float32
    strict_lines::Bool
    standard_sample_locations::Bool
    optimal_buffer_copy_offset_alignment::UInt64
    optimal_buffer_copy_row_pitch_alignment::UInt64
    non_coherent_atom_size::UInt64
end

struct PhysicalDeviceSparseProperties <: ReturnedOnly
    residency_standard_2_d_block_shape::Bool
    residency_standard_2_d_multisample_block_shape::Bool
    residency_standard_3_d_block_shape::Bool
    residency_aligned_mip_size::Bool
    residency_non_resident_strict::Bool
end

struct _PhysicalDeviceFeatures <: VulkanStruct{false}
    vks::VkPhysicalDeviceFeatures
end

struct _FenceCreateInfo <: VulkanStruct{true}
    vks::VkFenceCreateInfo
    deps::Vector{Any}
end

struct _EventCreateInfo <: VulkanStruct{true}
    vks::VkEventCreateInfo
    deps::Vector{Any}
end

struct _RenderPassCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassCreateInfo
    deps::Vector{Any}
end

struct _SubpassDependency <: VulkanStruct{false}
    vks::VkSubpassDependency
end

struct _SubpassDescription <: VulkanStruct{true}
    vks::VkSubpassDescription
    deps::Vector{Any}
end

struct _AttachmentReference <: VulkanStruct{false}
    vks::VkAttachmentReference
end

struct _AttachmentDescription <: VulkanStruct{false}
    vks::VkAttachmentDescription
end

struct _ClearAttachment <: VulkanStruct{false}
    vks::VkClearAttachment
end

struct _ClearDepthStencilValue <: VulkanStruct{false}
    vks::VkClearDepthStencilValue
end

struct _RenderPassBeginInfo <: VulkanStruct{true}
    vks::VkRenderPassBeginInfo
    deps::Vector{Any}
    render_pass::RenderPass
    framebuffer::Framebuffer
end

struct _CommandBufferBeginInfo <: VulkanStruct{true}
    vks::VkCommandBufferBeginInfo
    deps::Vector{Any}
end

struct _CommandBufferInheritanceInfo <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceInfo
    deps::Vector{Any}
    render_pass::OptionalPtr{RenderPass}
    framebuffer::OptionalPtr{Framebuffer}
end

struct _CommandBufferAllocateInfo <: VulkanStruct{true}
    vks::VkCommandBufferAllocateInfo
    deps::Vector{Any}
    command_pool::CommandPool
end

struct _CommandPoolCreateInfo <: VulkanStruct{true}
    vks::VkCommandPoolCreateInfo
    deps::Vector{Any}
end

struct _SamplerCreateInfo <: VulkanStruct{true}
    vks::VkSamplerCreateInfo
    deps::Vector{Any}
end

struct _PipelineLayoutCreateInfo <: VulkanStruct{true}
    vks::VkPipelineLayoutCreateInfo
    deps::Vector{Any}
end

struct _PushConstantRange <: VulkanStruct{false}
    vks::VkPushConstantRange
end

struct _PipelineCacheCreateInfo <: VulkanStruct{true}
    vks::VkPipelineCacheCreateInfo
    deps::Vector{Any}
end

struct _GraphicsPipelineCreateInfo <: VulkanStruct{true}
    vks::VkGraphicsPipelineCreateInfo
    deps::Vector{Any}
    layout::PipelineLayout
    render_pass::RenderPass
    base_pipeline_handle::OptionalPtr{Pipeline}
end

struct _PipelineDepthStencilStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineDepthStencilStateCreateInfo
    deps::Vector{Any}
end

struct _StencilOpState <: VulkanStruct{false}
    vks::VkStencilOpState
end

struct _PipelineDynamicStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineDynamicStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineColorBlendStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineColorBlendStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineColorBlendAttachmentState <: VulkanStruct{false}
    vks::VkPipelineColorBlendAttachmentState
end

struct _PipelineMultisampleStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineMultisampleStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineRasterizationStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineViewportStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineViewportStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineTessellationStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineTessellationStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineInputAssemblyStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineInputAssemblyStateCreateInfo
    deps::Vector{Any}
end

struct _PipelineVertexInputStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineVertexInputStateCreateInfo
    deps::Vector{Any}
end

struct _VertexInputAttributeDescription <: VulkanStruct{false}
    vks::VkVertexInputAttributeDescription
end

struct _VertexInputBindingDescription <: VulkanStruct{false}
    vks::VkVertexInputBindingDescription
end

struct _ComputePipelineCreateInfo <: VulkanStruct{true}
    vks::VkComputePipelineCreateInfo
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

struct _PipelineShaderStageCreateInfo <: VulkanStruct{true}
    vks::VkPipelineShaderStageCreateInfo
    deps::Vector{Any}
    _module::ShaderModule
end

struct _SpecializationInfo <: VulkanStruct{true}
    vks::VkSpecializationInfo
    deps::Vector{Any}
end

struct _SpecializationMapEntry <: VulkanStruct{false}
    vks::VkSpecializationMapEntry
end

struct _DescriptorSetAllocateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetAllocateInfo
    deps::Vector{Any}
    descriptor_pool::DescriptorPool
end

struct _DescriptorPoolCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorPoolCreateInfo
    deps::Vector{Any}
end

struct _DescriptorPoolSize <: VulkanStruct{false}
    vks::VkDescriptorPoolSize
end

struct _DescriptorSetLayoutCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutCreateInfo
    deps::Vector{Any}
end

struct _DescriptorSetLayoutBinding <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutBinding
    deps::Vector{Any}
end

struct _ShaderModuleCreateInfo <: VulkanStruct{true}
    vks::VkShaderModuleCreateInfo
    deps::Vector{Any}
end

struct _ImageResolve <: VulkanStruct{false}
    vks::VkImageResolve
end

struct _BufferImageCopy <: VulkanStruct{false}
    vks::VkBufferImageCopy
end

struct _ImageBlit <: VulkanStruct{false}
    vks::VkImageBlit
end

struct _ImageCopy <: VulkanStruct{false}
    vks::VkImageCopy
end

struct _BindSparseInfo <: VulkanStruct{true}
    vks::VkBindSparseInfo
    deps::Vector{Any}
end

struct _SparseImageMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseImageMemoryBindInfo
    deps::Vector{Any}
    image::Image
end

struct _SparseImageOpaqueMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseImageOpaqueMemoryBindInfo
    deps::Vector{Any}
    image::Image
end

struct _SparseBufferMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseBufferMemoryBindInfo
    deps::Vector{Any}
    buffer::Buffer
end

struct _SparseImageMemoryBind <: VulkanStruct{false}
    vks::VkSparseImageMemoryBind
    memory::OptionalPtr{DeviceMemory}
end

struct _SparseMemoryBind <: VulkanStruct{false}
    vks::VkSparseMemoryBind
    memory::OptionalPtr{DeviceMemory}
end

struct _BufferCopy <: VulkanStruct{false}
    vks::VkBufferCopy
end

struct _ImageViewCreateInfo <: VulkanStruct{true}
    vks::VkImageViewCreateInfo
    deps::Vector{Any}
    image::Image
end

struct SubresourceLayout <: ReturnedOnly
    offset::UInt64
    size::UInt64
    row_pitch::UInt64
    array_pitch::UInt64
    depth_pitch::UInt64
end

struct _ImageCreateInfo <: VulkanStruct{true}
    vks::VkImageCreateInfo
    deps::Vector{Any}
end

struct _ImageMemoryBarrier <: VulkanStruct{true}
    vks::VkImageMemoryBarrier
    deps::Vector{Any}
    image::Image
end

struct _BufferMemoryBarrier <: VulkanStruct{true}
    vks::VkBufferMemoryBarrier
    deps::Vector{Any}
    buffer::Buffer
end

struct _MemoryBarrier <: VulkanStruct{true}
    vks::VkMemoryBarrier
    deps::Vector{Any}
end

struct _ImageSubresourceRange <: VulkanStruct{false}
    vks::VkImageSubresourceRange
end

struct _ImageSubresourceLayers <: VulkanStruct{false}
    vks::VkImageSubresourceLayers
end

struct _ImageSubresource <: VulkanStruct{false}
    vks::VkImageSubresource
end

struct _BufferViewCreateInfo <: VulkanStruct{true}
    vks::VkBufferViewCreateInfo
    deps::Vector{Any}
    buffer::Buffer
end

struct _BufferCreateInfo <: VulkanStruct{true}
    vks::VkBufferCreateInfo
    deps::Vector{Any}
end

struct _CopyDescriptorSet <: VulkanStruct{true}
    vks::VkCopyDescriptorSet
    deps::Vector{Any}
    src_set::DescriptorSet
    dst_set::DescriptorSet
end

struct _WriteDescriptorSet <: VulkanStruct{true}
    vks::VkWriteDescriptorSet
    deps::Vector{Any}
    dst_set::DescriptorSet
end

struct _DescriptorImageInfo <: VulkanStruct{false}
    vks::VkDescriptorImageInfo
    sampler::Sampler
    image_view::ImageView
end

struct _DescriptorBufferInfo <: VulkanStruct{false}
    vks::VkDescriptorBufferInfo
    buffer::OptionalPtr{Buffer}
end

struct FormatProperties <: ReturnedOnly
    linear_tiling_features::FormatFeatureFlag
    optimal_tiling_features::FormatFeatureFlag
    buffer_features::FormatFeatureFlag
end

struct FormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    format_properties::FormatProperties
end

struct _MappedMemoryRange <: VulkanStruct{true}
    vks::VkMappedMemoryRange
    deps::Vector{Any}
    memory::DeviceMemory
end

struct MemoryHeap <: ReturnedOnly
    size::UInt64
    flags::MemoryHeapFlag
end

struct MemoryType <: ReturnedOnly
    property_flags::MemoryPropertyFlag
    heap_index::UInt32
end

struct MemoryRequirements <: ReturnedOnly
    size::UInt64
    alignment::UInt64
    memory_type_bits::UInt32
end

struct MemoryRequirements2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_requirements::MemoryRequirements
end

struct _MemoryAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryAllocateInfo
    deps::Vector{Any}
end

struct PhysicalDeviceMemoryProperties <: ReturnedOnly
    memory_type_count::UInt32
    memory_types::NTuple{Int(VK_MAX_MEMORY_TYPES), MemoryType}
    memory_heap_count::UInt32
    memory_heaps::NTuple{Int(VK_MAX_MEMORY_HEAPS), MemoryHeap}
end

struct PhysicalDeviceMemoryProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_properties::PhysicalDeviceMemoryProperties
end

struct _InstanceCreateInfo <: VulkanStruct{true}
    vks::VkInstanceCreateInfo
    deps::Vector{Any}
end

struct _DeviceCreateInfo <: VulkanStruct{true}
    vks::VkDeviceCreateInfo
    deps::Vector{Any}
end

struct _DeviceQueueCreateInfo <: VulkanStruct{true}
    vks::VkDeviceQueueCreateInfo
    deps::Vector{Any}
end

struct _AllocationCallbacks <: VulkanStruct{true}
    vks::VkAllocationCallbacks
    deps::Vector{Any}
end

struct _ApplicationInfo <: VulkanStruct{true}
    vks::VkApplicationInfo
    deps::Vector{Any}
end

struct LayerProperties <: ReturnedOnly
    layer_name::String
    spec_version::VersionNumber
    implementation_version::VersionNumber
    description::String
end

struct ExtensionProperties <: ReturnedOnly
    extension_name::String
    spec_version::VersionNumber
end

struct VideoDecodeH265CapabilitiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_level::UInt32
    std_extension_version::ExtensionProperties
end

struct PhysicalDeviceProperties <: ReturnedOnly
    api_version::VersionNumber
    driver_version::VersionNumber
    vendor_id::UInt32
    device_id::UInt32
    device_type::PhysicalDeviceType
    device_name::String
    pipeline_cache_uuid::String
    limits::PhysicalDeviceLimits
    sparse_properties::PhysicalDeviceSparseProperties
end

struct PhysicalDeviceProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    properties::PhysicalDeviceProperties
end

struct _ComponentMapping <: VulkanStruct{false}
    vks::VkComponentMapping
end

struct AndroidHardwareBufferFormatPropertiesANDROID <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    format::Format
    external_format::UInt64
    format_features::FormatFeatureFlag
    sampler_ycbcr_conversion_components::_ComponentMapping
    suggested_ycbcr_model::SamplerYcbcrModelConversion
    suggested_ycbcr_range::SamplerYcbcrRange
    suggested_x_chroma_offset::ChromaLocation
    suggested_y_chroma_offset::ChromaLocation
end

struct _ClearRect <: VulkanStruct{false}
    vks::VkClearRect
end

struct _Rect2D <: VulkanStruct{false}
    vks::VkRect2D
end

struct _Viewport <: VulkanStruct{false}
    vks::VkViewport
end

struct _Extent3D <: VulkanStruct{false}
    vks::VkExtent3D
end

struct ImageFormatProperties <: ReturnedOnly
    max_extent::_Extent3D
    max_mip_levels::UInt32
    max_array_layers::UInt32
    sample_counts::SampleCountFlag
    max_resource_size::UInt64
end

struct ImageFormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    image_format_properties::ImageFormatProperties
end

struct ExternalImageFormatPropertiesNV <: ReturnedOnly
    image_format_properties::ImageFormatProperties
    external_memory_features::ExternalMemoryFeatureFlagNV
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlagNV
    compatible_handle_types::ExternalMemoryHandleTypeFlagNV
end

struct SparseImageFormatProperties <: ReturnedOnly
    aspect_mask::ImageAspectFlag
    image_granularity::_Extent3D
    flags::SparseImageFormatFlag
end

struct SparseImageFormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    properties::SparseImageFormatProperties
end

struct SparseImageMemoryRequirements <: ReturnedOnly
    format_properties::SparseImageFormatProperties
    image_mip_tail_first_lod::UInt32
    image_mip_tail_size::UInt64
    image_mip_tail_offset::UInt64
    image_mip_tail_stride::UInt64
end

struct SparseImageMemoryRequirements2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_requirements::SparseImageMemoryRequirements
end

struct QueueFamilyProperties <: ReturnedOnly
    queue_flags::QueueFlag
    queue_count::UInt32
    timestamp_valid_bits::UInt32
    min_image_transfer_granularity::_Extent3D
end

struct QueueFamilyProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    queue_family_properties::QueueFamilyProperties
end

struct _Extent2D <: VulkanStruct{false}
    vks::VkExtent2D
end

struct VideoCapabilitiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    capability_flags::VideoCapabilitiesFlagKHR
    min_bitstream_buffer_offset_alignment::UInt64
    min_bitstream_buffer_size_alignment::UInt64
    video_picture_extent_granularity::_Extent2D
    min_extent::_Extent2D
    max_extent::_Extent2D
    max_reference_pictures_slots_count::UInt32
    max_reference_pictures_active_count::UInt32
end

struct PhysicalDeviceFragmentShadingRateKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    sample_counts::SampleCountFlag
    fragment_size::_Extent2D
end

struct PhysicalDeviceFragmentShadingRatePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_fragment_shading_rate_attachment_texel_size::_Extent2D
    max_fragment_shading_rate_attachment_texel_size::_Extent2D
    max_fragment_shading_rate_attachment_texel_size_aspect_ratio::UInt32
    primitive_fragment_shading_rate_with_multiple_viewports::Bool
    layered_shading_rate_attachments::Bool
    fragment_shading_rate_non_trivial_combiner_ops::Bool
    max_fragment_size::_Extent2D
    max_fragment_size_aspect_ratio::UInt32
    max_fragment_shading_rate_coverage_samples::UInt32
    max_fragment_shading_rate_rasterization_samples::SampleCountFlag
    fragment_shading_rate_with_shader_depth_stencil_writes::Bool
    fragment_shading_rate_with_sample_mask::Bool
    fragment_shading_rate_with_shader_sample_mask::Bool
    fragment_shading_rate_with_conservative_rasterization::Bool
    fragment_shading_rate_with_fragment_shader_interlock::Bool
    fragment_shading_rate_with_custom_sample_locations::Bool
    fragment_shading_rate_strict_multiply_combiner::Bool
end

struct PhysicalDeviceFragmentDensityMapPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_fragment_density_texel_size::_Extent2D
    max_fragment_density_texel_size::_Extent2D
    fragment_density_invocations::Bool
end

struct PhysicalDeviceShadingRateImagePropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shading_rate_texel_size::_Extent2D
    shading_rate_palette_size::UInt32
    shading_rate_max_coarse_samples::UInt32
end

struct MultisamplePropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_sample_location_grid_size::_Extent2D
end

struct PhysicalDeviceSampleLocationsPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    sample_location_sample_counts::SampleCountFlag
    max_sample_location_grid_size::_Extent2D
    sample_location_coordinate_range::NTuple{2, Float32}
    sample_location_sub_pixel_bits::UInt32
    variable_sample_locations::Bool
end

struct SurfaceCapabilities2EXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::_Extent2D
    min_image_extent::_Extent2D
    max_image_extent::_Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagKHR
    current_transform::SurfaceTransformFlagKHR
    supported_composite_alpha::CompositeAlphaFlagKHR
    supported_usage_flags::ImageUsageFlag
    supported_surface_counters::SurfaceCounterFlagEXT
end

struct SurfaceCapabilitiesKHR <: ReturnedOnly
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::_Extent2D
    min_image_extent::_Extent2D
    max_image_extent::_Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagKHR
    current_transform::SurfaceTransformFlagKHR
    supported_composite_alpha::CompositeAlphaFlagKHR
    supported_usage_flags::ImageUsageFlag
end

struct SurfaceCapabilities2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    surface_capabilities::SurfaceCapabilitiesKHR
end

struct DisplayPropertiesKHR <: ReturnedOnly
    display::DisplayKHR
    display_name::String
    physical_dimensions::_Extent2D
    physical_resolution::_Extent2D
    supported_transforms::SurfaceTransformFlagKHR
    plane_reorder_possible::Bool
    persistent_content::Bool
end

struct DisplayProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_properties::DisplayPropertiesKHR
end

struct _Offset3D <: VulkanStruct{false}
    vks::VkOffset3D
end

struct _Offset2D <: VulkanStruct{false}
    vks::VkOffset2D
end

struct VideoDecodeH264CapabilitiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_level::UInt32
    field_offset_granularity::_Offset2D
    std_extension_version::ExtensionProperties
end

struct DisplayPlaneCapabilitiesKHR <: ReturnedOnly
    supported_alpha::DisplayPlaneAlphaFlagKHR
    min_src_position::_Offset2D
    max_src_position::_Offset2D
    min_src_extent::_Extent2D
    max_src_extent::_Extent2D
    min_dst_position::_Offset2D
    max_dst_position::_Offset2D
    min_dst_extent::_Extent2D
    max_dst_extent::_Extent2D
end

struct DisplayPlaneCapabilities2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    capabilities::DisplayPlaneCapabilitiesKHR
end

struct _BaseInStructure <: VulkanStruct{true}
    vks::VkBaseInStructure
    deps::Vector{Any}
end

struct _BaseOutStructure <: VulkanStruct{true}
    vks::VkBaseOutStructure
    deps::Vector{Any}
end


function _BaseOutStructure(; next = C_NULL)
    next = cconvert(Ptr{VkBaseOutStructure}, next)
    deps = [next]
    vks = VkBaseOutStructure(s_type, unsafe_convert(Ptr{VkBaseOutStructure}, next))
    _BaseOutStructure(vks, deps)
end

function _BaseInStructure(; next = C_NULL)
    next = cconvert(Ptr{VkBaseInStructure}, next)
    deps = [next]
    vks = VkBaseInStructure(s_type, unsafe_convert(Ptr{VkBaseInStructure}, next))
    _BaseInStructure(vks, deps)
end

function _Offset2D(x::Integer, y::Integer)
    _Offset2D(VkOffset2D(x, y))
end

function _Offset3D(x::Integer, y::Integer, z::Integer)
    _Offset3D(VkOffset3D(x, y, z))
end

function _Extent2D(width::Integer, height::Integer)
    _Extent2D(VkExtent2D(width, height))
end

function _Extent3D(width::Integer, height::Integer, depth::Integer)
    _Extent3D(VkExtent3D(width, height, depth))
end

function _Viewport(x::Real, y::Real, width::Real, height::Real, min_depth::Real, max_depth::Real)
    _Viewport(VkViewport(x, y, width, height, min_depth, max_depth))
end

function _Rect2D(offset::_Offset2D, extent::_Extent2D)
    _Rect2D(VkRect2D(offset.vks, extent.vks))
end

function _ClearRect(rect::_Rect2D, base_array_layer::Integer, layer_count::Integer)
    _ClearRect(VkClearRect(rect.vks, base_array_layer, layer_count))
end

function _ComponentMapping(r::ComponentSwizzle, g::ComponentSwizzle, b::ComponentSwizzle, a::ComponentSwizzle)
    _ComponentMapping(VkComponentMapping(r, g, b, a))
end

function _ApplicationInfo(application_version::VersionNumber, engine_version::VersionNumber, api_version::VersionNumber; next = C_NULL, application_name = C_NULL, engine_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    application_name = cconvert(Cstring, application_name)
    engine_name = cconvert(Cstring, engine_name)
    deps = [next, application_name, engine_name]
    vks = VkApplicationInfo(VK_STRUCTURE_TYPE_APPLICATION_INFO, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, application_name), to_vk(UInt32, application_version), unsafe_convert(Cstring, engine_name), to_vk(UInt32, engine_version), to_vk(UInt32, api_version))
    _ApplicationInfo(vks, deps)
end

function _AllocationCallbacks(pfn_allocation::FunctionPtr, pfn_reallocation::FunctionPtr, pfn_free::FunctionPtr; user_data = C_NULL, pfn_internal_allocation = 0, pfn_internal_free = 0)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [user_data]
    vks = VkAllocationCallbacks(unsafe_convert(Ptr{Cvoid}, user_data), pfn_allocation, pfn_reallocation, pfn_free, pfn_internal_allocation, pfn_internal_free)
    _AllocationCallbacks(vks, deps)
end

function _DeviceQueueCreateInfo(queue_family_index::Integer, queue_priorities::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_priorities = cconvert(Ptr{Float32}, queue_priorities)
    deps = [next, queue_priorities]
    vks = VkDeviceQueueCreateInfo(VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index, pointer_length(queue_priorities), unsafe_convert(Ptr{Float32}, queue_priorities))
    _DeviceQueueCreateInfo(vks, deps)
end

function _DeviceCreateInfo(queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, enabled_features = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_create_infos = cconvert(Ptr{VkDeviceQueueCreateInfo}, queue_create_infos)
    enabled_layer_names = cconvert(Ptr{Cstring}, enabled_layer_names)
    enabled_extension_names = cconvert(Ptr{Cstring}, enabled_extension_names)
    enabled_features = cconvert(Ptr{VkPhysicalDeviceFeatures}, enabled_features)
    deps = [next, queue_create_infos, enabled_layer_names, enabled_extension_names, enabled_features]
    vks = VkDeviceCreateInfo(VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(queue_create_infos), unsafe_convert(Ptr{VkDeviceQueueCreateInfo}, queue_create_infos), pointer_length(enabled_layer_names), unsafe_convert(Ptr{Cstring}, enabled_layer_names), pointer_length(enabled_extension_names), unsafe_convert(Ptr{Cstring}, enabled_extension_names), unsafe_convert(Ptr{VkPhysicalDeviceFeatures}, enabled_features))
    _DeviceCreateInfo(vks, deps)
end

function _InstanceCreateInfo(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, application_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    application_info = cconvert(Ptr{VkApplicationInfo}, application_info)
    enabled_layer_names = cconvert(Ptr{Cstring}, enabled_layer_names)
    enabled_extension_names = cconvert(Ptr{Cstring}, enabled_extension_names)
    deps = [next, application_info, enabled_layer_names, enabled_extension_names]
    vks = VkInstanceCreateInfo(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkApplicationInfo}, application_info), pointer_length(enabled_layer_names), unsafe_convert(Ptr{Cstring}, enabled_layer_names), pointer_length(enabled_extension_names), unsafe_convert(Ptr{Cstring}, enabled_extension_names))
    _InstanceCreateInfo(vks, deps)
end

function _MemoryAllocateInfo(allocation_size::Integer, memory_type_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), allocation_size, memory_type_index)
    _MemoryAllocateInfo(vks, deps)
end

function _MappedMemoryRange(memory::DeviceMemory, offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMappedMemoryRange(VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, unsafe_convert(Ptr{Cvoid}, next), memory, offset, size)
    _MappedMemoryRange(vks, deps, memory)
end

function _DescriptorBufferInfo(offset::Integer, range::Integer; buffer = C_NULL)
    _DescriptorBufferInfo(VkDescriptorBufferInfo(buffer, offset, range), buffer)
end

function _DescriptorImageInfo(sampler::Sampler, image_view::ImageView, image_layout::ImageLayout)
    _DescriptorImageInfo(VkDescriptorImageInfo(sampler, image_view, image_layout), sampler, image_view)
end

function _WriteDescriptorSet(dst_set::DescriptorSet, dst_binding::Integer, dst_array_element::Integer, descriptor_type::DescriptorType, image_info::AbstractArray, buffer_info::AbstractArray, texel_buffer_view::AbstractArray; next = C_NULL, descriptor_count = max(pointer_length(image_info), pointer_length(buffer_info), pointer_length(texel_buffer_view)))
    next = cconvert(Ptr{Cvoid}, next)
    image_info = cconvert(Ptr{VkDescriptorImageInfo}, image_info)
    buffer_info = cconvert(Ptr{VkDescriptorBufferInfo}, buffer_info)
    texel_buffer_view = cconvert(Ptr{VkBufferView}, texel_buffer_view)
    deps = [next, image_info, buffer_info, texel_buffer_view]
    vks = VkWriteDescriptorSet(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, unsafe_convert(Ptr{Cvoid}, next), dst_set, dst_binding, dst_array_element, descriptor_count, descriptor_type, unsafe_convert(Ptr{VkDescriptorImageInfo}, image_info), unsafe_convert(Ptr{VkDescriptorBufferInfo}, buffer_info), unsafe_convert(Ptr{VkBufferView}, texel_buffer_view))
    _WriteDescriptorSet(vks, deps, dst_set)
end

function _CopyDescriptorSet(src_set::DescriptorSet, src_binding::Integer, src_array_element::Integer, dst_set::DescriptorSet, dst_binding::Integer, dst_array_element::Integer, descriptor_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyDescriptorSet(VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, unsafe_convert(Ptr{Cvoid}, next), src_set, src_binding, src_array_element, dst_set, dst_binding, dst_array_element, descriptor_count)
    _CopyDescriptorSet(vks, deps, src_set, dst_set)
end

function _BufferCreateInfo(size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkBufferCreateInfo(VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, size, usage, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices))
    _BufferCreateInfo(vks, deps)
end

function _BufferViewCreateInfo(buffer::Buffer, format::Format, offset::Integer, range::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferViewCreateInfo(VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, buffer, format, offset, range)
    _BufferViewCreateInfo(vks, deps, buffer)
end

function _ImageSubresource(aspect_mask::ImageAspectFlag, mip_level::Integer, array_layer::Integer)
    _ImageSubresource(VkImageSubresource(aspect_mask, mip_level, array_layer))
end

function _ImageSubresourceLayers(aspect_mask::ImageAspectFlag, mip_level::Integer, base_array_layer::Integer, layer_count::Integer)
    _ImageSubresourceLayers(VkImageSubresourceLayers(aspect_mask, mip_level, base_array_layer, layer_count))
end

function _ImageSubresourceRange(aspect_mask::ImageAspectFlag, base_mip_level::Integer, level_count::Integer, base_array_layer::Integer, layer_count::Integer)
    _ImageSubresourceRange(VkImageSubresourceRange(aspect_mask, base_mip_level, level_count, base_array_layer, layer_count))
end

function _MemoryBarrier(; next = C_NULL, src_access_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryBarrier(VK_STRUCTURE_TYPE_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask)
    _MemoryBarrier(vks, deps)
end

function _BufferMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer::Buffer, offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryBarrier(VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)
    _BufferMemoryBarrier(vks, deps, buffer)
end

function _ImageMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image::Image, subresource_range::_ImageSubresourceRange; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryBarrier(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range.vks)
    _ImageMemoryBarrier(vks, deps, image)
end

function _ImageCreateInfo(image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkImageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, image_type, format, extent.vks, mip_levels, array_layers, VkSampleCountFlagBits(samples.val), tiling, usage, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices), initial_layout)
    _ImageCreateInfo(vks, deps)
end

function _ImageViewCreateInfo(image::Image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewCreateInfo(VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, image, view_type, format, components.vks, subresource_range.vks)
    _ImageViewCreateInfo(vks, deps, image)
end

function _BufferCopy(src_offset::Integer, dst_offset::Integer, size::Integer)
    _BufferCopy(VkBufferCopy(src_offset, dst_offset, size))
end

function _SparseMemoryBind(resource_offset::Integer, size::Integer, memory_offset::Integer; memory = C_NULL, flags = 0)
    _SparseMemoryBind(VkSparseMemoryBind(resource_offset, size, memory, memory_offset, flags), memory)
end

function _SparseImageMemoryBind(subresource::_ImageSubresource, offset::_Offset3D, extent::_Extent3D, memory_offset::Integer; memory = C_NULL, flags = 0)
    _SparseImageMemoryBind(VkSparseImageMemoryBind(subresource.vks, offset.vks, extent.vks, memory, memory_offset, flags), memory)
end

function _SparseBufferMemoryBindInfo(buffer::Buffer, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseBufferMemoryBindInfo(buffer, pointer_length(binds), unsafe_convert(Ptr{VkSparseMemoryBind}, binds))
    _SparseBufferMemoryBindInfo(vks, deps, buffer)
end

function _SparseImageOpaqueMemoryBindInfo(image::Image, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseImageOpaqueMemoryBindInfo(image, pointer_length(binds), unsafe_convert(Ptr{VkSparseMemoryBind}, binds))
    _SparseImageOpaqueMemoryBindInfo(vks, deps, image)
end

function _SparseImageMemoryBindInfo(image::Image, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseImageMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseImageMemoryBindInfo(image, pointer_length(binds), unsafe_convert(Ptr{VkSparseImageMemoryBind}, binds))
    _SparseImageMemoryBindInfo(vks, deps, image)
end

function _BindSparseInfo(wait_semaphores::AbstractArray, buffer_binds::AbstractArray, image_opaque_binds::AbstractArray, image_binds::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    buffer_binds = cconvert(Ptr{VkSparseBufferMemoryBindInfo}, buffer_binds)
    image_opaque_binds = cconvert(Ptr{VkSparseImageOpaqueMemoryBindInfo}, image_opaque_binds)
    image_binds = cconvert(Ptr{VkSparseImageMemoryBindInfo}, image_binds)
    signal_semaphores = cconvert(Ptr{VkSemaphore}, signal_semaphores)
    deps = [next, wait_semaphores, buffer_binds, image_opaque_binds, image_binds, signal_semaphores]
    vks = VkBindSparseInfo(VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), pointer_length(buffer_binds), unsafe_convert(Ptr{VkSparseBufferMemoryBindInfo}, buffer_binds), pointer_length(image_opaque_binds), unsafe_convert(Ptr{VkSparseImageOpaqueMemoryBindInfo}, image_opaque_binds), pointer_length(image_binds), unsafe_convert(Ptr{VkSparseImageMemoryBindInfo}, image_binds), pointer_length(signal_semaphores), unsafe_convert(Ptr{VkSemaphore}, signal_semaphores))
    _BindSparseInfo(vks, deps)
end

function _ImageCopy(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D)
    _ImageCopy(VkImageCopy(src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks))
end

function _ImageBlit(src_subresource::_ImageSubresourceLayers, src_offsets::NTuple{2, _Offset3D}, dst_subresource::_ImageSubresourceLayers, dst_offsets::NTuple{2, _Offset3D})
    _ImageBlit(VkImageBlit(src_subresource.vks, to_vk(NTuple{2, VkOffset3D}, src_offsets), dst_subresource.vks, to_vk(NTuple{2, VkOffset3D}, dst_offsets)))
end

function _BufferImageCopy(buffer_offset::Integer, buffer_row_length::Integer, buffer_image_height::Integer, image_subresource::_ImageSubresourceLayers, image_offset::_Offset3D, image_extent::_Extent3D)
    _BufferImageCopy(VkBufferImageCopy(buffer_offset, buffer_row_length, buffer_image_height, image_subresource.vks, image_offset.vks, image_extent.vks))
end

function _ImageResolve(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D)
    _ImageResolve(VkImageResolve(src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks))
end

function _ShaderModuleCreateInfo(code_size::Integer, code::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    code = cconvert(Ptr{UInt32}, code)
    deps = [next, code]
    vks = VkShaderModuleCreateInfo(VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, code_size, unsafe_convert(Ptr{UInt32}, code))
    _ShaderModuleCreateInfo(vks, deps)
end

function _DescriptorSetLayoutBinding(binding::Integer, descriptor_type::DescriptorType, stage_flags::ShaderStageFlag; descriptor_count = 0, immutable_samplers = C_NULL)
    immutable_samplers = cconvert(Ptr{VkSampler}, immutable_samplers)
    deps = [immutable_samplers]
    vks = VkDescriptorSetLayoutBinding(binding, descriptor_type, descriptor_count, stage_flags, unsafe_convert(Ptr{VkSampler}, immutable_samplers))
    _DescriptorSetLayoutBinding(vks, deps)
end

function _DescriptorSetLayoutCreateInfo(bindings::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    bindings = cconvert(Ptr{VkDescriptorSetLayoutBinding}, bindings)
    deps = [next, bindings]
    vks = VkDescriptorSetLayoutCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(bindings), unsafe_convert(Ptr{VkDescriptorSetLayoutBinding}, bindings))
    _DescriptorSetLayoutCreateInfo(vks, deps)
end

function _DescriptorPoolSize(type::DescriptorType, descriptor_count::Integer)
    _DescriptorPoolSize(VkDescriptorPoolSize(type, descriptor_count))
end

function _DescriptorPoolCreateInfo(max_sets::Integer, pool_sizes::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    pool_sizes = cconvert(Ptr{VkDescriptorPoolSize}, pool_sizes)
    deps = [next, pool_sizes]
    vks = VkDescriptorPoolCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, max_sets, pointer_length(pool_sizes), unsafe_convert(Ptr{VkDescriptorPoolSize}, pool_sizes))
    _DescriptorPoolCreateInfo(vks, deps)
end

function _DescriptorSetAllocateInfo(descriptor_pool::DescriptorPool, set_layouts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    set_layouts = cconvert(Ptr{VkDescriptorSetLayout}, set_layouts)
    deps = [next, set_layouts]
    vks = VkDescriptorSetAllocateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), descriptor_pool, pointer_length(set_layouts), unsafe_convert(Ptr{VkDescriptorSetLayout}, set_layouts))
    _DescriptorSetAllocateInfo(vks, deps, descriptor_pool)
end

function _SpecializationMapEntry(constant_id::Integer, offset::Integer, size::Integer)
    _SpecializationMapEntry(VkSpecializationMapEntry(constant_id, offset, size))
end

function _SpecializationInfo(map_entries::AbstractArray, data::Ptr{Cvoid}; data_size = 0)
    map_entries = cconvert(Ptr{VkSpecializationMapEntry}, map_entries)
    data = cconvert(Ptr{Cvoid}, data)
    deps = [map_entries, data]
    vks = VkSpecializationInfo(pointer_length(map_entries), unsafe_convert(Ptr{VkSpecializationMapEntry}, map_entries), data_size, unsafe_convert(Ptr{Cvoid}, data))
    _SpecializationInfo(vks, deps)
end

function _PipelineShaderStageCreateInfo(stage::ShaderStageFlag, _module::ShaderModule, name::AbstractString; next = C_NULL, flags = 0, specialization_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    name = cconvert(Cstring, name)
    specialization_info = cconvert(Ptr{VkSpecializationInfo}, specialization_info)
    deps = [next, name, specialization_info]
    vks = VkPipelineShaderStageCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, VkShaderStageFlagBits(stage.val), _module, unsafe_convert(Cstring, name), unsafe_convert(Ptr{VkSpecializationInfo}, specialization_info))
    _PipelineShaderStageCreateInfo(vks, deps, _module)
end

function _ComputePipelineCreateInfo(stage::_PipelineShaderStageCreateInfo, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkComputePipelineCreateInfo(VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, stage.vks, layout, base_pipeline_handle, base_pipeline_index)
    _ComputePipelineCreateInfo(vks, deps, layout, base_pipeline_handle)
end

function _VertexInputBindingDescription(binding::Integer, stride::Integer, input_rate::VertexInputRate)
    _VertexInputBindingDescription(VkVertexInputBindingDescription(binding, stride, input_rate))
end

function _VertexInputAttributeDescription(location::Integer, binding::Integer, format::Format, offset::Integer)
    _VertexInputAttributeDescription(VkVertexInputAttributeDescription(location, binding, format, offset))
end

function _PipelineVertexInputStateCreateInfo(vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    vertex_binding_descriptions = cconvert(Ptr{VkVertexInputBindingDescription}, vertex_binding_descriptions)
    vertex_attribute_descriptions = cconvert(Ptr{VkVertexInputAttributeDescription}, vertex_attribute_descriptions)
    deps = [next, vertex_binding_descriptions, vertex_attribute_descriptions]
    vks = VkPipelineVertexInputStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(vertex_binding_descriptions), unsafe_convert(Ptr{VkVertexInputBindingDescription}, vertex_binding_descriptions), pointer_length(vertex_attribute_descriptions), unsafe_convert(Ptr{VkVertexInputAttributeDescription}, vertex_attribute_descriptions))
    _PipelineVertexInputStateCreateInfo(vks, deps)
end

function _PipelineInputAssemblyStateCreateInfo(topology::PrimitiveTopology, primitive_restart_enable::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineInputAssemblyStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, topology, primitive_restart_enable)
    _PipelineInputAssemblyStateCreateInfo(vks, deps)
end

function _PipelineTessellationStateCreateInfo(patch_control_points::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineTessellationStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, patch_control_points)
    _PipelineTessellationStateCreateInfo(vks, deps)
end

function _PipelineViewportStateCreateInfo(; next = C_NULL, flags = 0, viewports = C_NULL, scissors = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewports = cconvert(Ptr{VkViewport}, viewports)
    scissors = cconvert(Ptr{VkRect2D}, scissors)
    deps = [next, viewports, scissors]
    vks = VkPipelineViewportStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(viewports), unsafe_convert(Ptr{VkViewport}, viewports), pointer_length(scissors), unsafe_convert(Ptr{VkRect2D}, scissors))
    _PipelineViewportStateCreateInfo(vks, deps)
end

function _PipelineRasterizationStateCreateInfo(depth_clamp_enable::Bool, rasterizer_discard_enable::Bool, polygon_mode::PolygonMode, front_face::FrontFace, depth_bias_enable::Bool, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, line_width::Real; next = C_NULL, flags = 0, cull_mode = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, depth_clamp_enable, rasterizer_discard_enable, polygon_mode, cull_mode, front_face, depth_bias_enable, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor, line_width)
    _PipelineRasterizationStateCreateInfo(vks, deps)
end

function _PipelineMultisampleStateCreateInfo(rasterization_samples::SampleCountFlag, sample_shading_enable::Bool, min_sample_shading::Real, alpha_to_coverage_enable::Bool, alpha_to_one_enable::Bool; next = C_NULL, flags = 0, sample_mask = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sample_mask = cconvert(Ptr{VkSampleMask}, sample_mask)
    deps = [next, sample_mask]
    vks = VkPipelineMultisampleStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, VkSampleCountFlagBits(rasterization_samples.val), sample_shading_enable, min_sample_shading, unsafe_convert(Ptr{VkSampleMask}, sample_mask), alpha_to_coverage_enable, alpha_to_one_enable)
    _PipelineMultisampleStateCreateInfo(vks, deps)
end

function _PipelineColorBlendAttachmentState(blend_enable::Bool, src_color_blend_factor::BlendFactor, dst_color_blend_factor::BlendFactor, color_blend_op::BlendOp, src_alpha_blend_factor::BlendFactor, dst_alpha_blend_factor::BlendFactor, alpha_blend_op::BlendOp; color_write_mask = 0)
    _PipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState(blend_enable, src_color_blend_factor, dst_color_blend_factor, color_blend_op, src_alpha_blend_factor, dst_alpha_blend_factor, alpha_blend_op, color_write_mask))
end

function _PipelineColorBlendStateCreateInfo(logic_op_enable::Bool, logic_op::LogicOp, attachments::AbstractArray, blend_constants::NTuple{4, Float32}; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkPipelineColorBlendAttachmentState}, attachments)
    deps = [next, attachments]
    vks = VkPipelineColorBlendStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, logic_op_enable, logic_op, pointer_length(attachments), unsafe_convert(Ptr{VkPipelineColorBlendAttachmentState}, attachments), blend_constants)
    _PipelineColorBlendStateCreateInfo(vks, deps)
end

function _PipelineDynamicStateCreateInfo(dynamic_states::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    dynamic_states = cconvert(Ptr{VkDynamicState}, dynamic_states)
    deps = [next, dynamic_states]
    vks = VkPipelineDynamicStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(dynamic_states), unsafe_convert(Ptr{VkDynamicState}, dynamic_states))
    _PipelineDynamicStateCreateInfo(vks, deps)
end

function _StencilOpState(fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp, compare_mask::Integer, write_mask::Integer, reference::Integer)
    _StencilOpState(VkStencilOpState(fail_op, pass_op, depth_fail_op, compare_op, compare_mask, write_mask, reference))
end

function _PipelineDepthStencilStateCreateInfo(depth_test_enable::Bool, depth_write_enable::Bool, depth_compare_op::CompareOp, depth_bounds_test_enable::Bool, stencil_test_enable::Bool, front::_StencilOpState, back::_StencilOpState, min_depth_bounds::Real, max_depth_bounds::Real; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineDepthStencilStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, depth_test_enable, depth_write_enable, depth_compare_op, depth_bounds_test_enable, stencil_test_enable, front.vks, back.vks, min_depth_bounds, max_depth_bounds)
    _PipelineDepthStencilStateCreateInfo(vks, deps)
end

function _GraphicsPipelineCreateInfo(stages::AbstractArray, rasterization_state::_PipelineRasterizationStateCreateInfo, layout::PipelineLayout, render_pass::RenderPass, subpass::Integer, base_pipeline_index::Integer; next = C_NULL, flags = 0, vertex_input_state = C_NULL, input_assembly_state = C_NULL, tessellation_state = C_NULL, viewport_state = C_NULL, multisample_state = C_NULL, depth_stencil_state = C_NULL, color_blend_state = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    vertex_input_state = cconvert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state)
    input_assembly_state = cconvert(Ptr{VkPipelineInputAssemblyStateCreateInfo}, input_assembly_state)
    tessellation_state = cconvert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state)
    viewport_state = cconvert(Ptr{VkPipelineViewportStateCreateInfo}, viewport_state)
    rasterization_state = cconvert(Ptr{VkPipelineRasterizationStateCreateInfo}, rasterization_state)
    multisample_state = cconvert(Ptr{VkPipelineMultisampleStateCreateInfo}, multisample_state)
    depth_stencil_state = cconvert(Ptr{VkPipelineDepthStencilStateCreateInfo}, depth_stencil_state)
    color_blend_state = cconvert(Ptr{VkPipelineColorBlendStateCreateInfo}, color_blend_state)
    dynamic_state = cconvert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state)
    deps = [next, stages, vertex_input_state, input_assembly_state, tessellation_state, viewport_state, rasterization_state, multisample_state, depth_stencil_state, color_blend_state, dynamic_state]
    vks = VkGraphicsPipelineCreateInfo(VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), unsafe_convert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state), unsafe_convert(Ptr{VkPipelineInputAssemblyStateCreateInfo}, input_assembly_state), unsafe_convert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state), unsafe_convert(Ptr{VkPipelineViewportStateCreateInfo}, viewport_state), unsafe_convert(Ptr{VkPipelineRasterizationStateCreateInfo}, rasterization_state), unsafe_convert(Ptr{VkPipelineMultisampleStateCreateInfo}, multisample_state), unsafe_convert(Ptr{VkPipelineDepthStencilStateCreateInfo}, depth_stencil_state), unsafe_convert(Ptr{VkPipelineColorBlendStateCreateInfo}, color_blend_state), unsafe_convert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state), layout, render_pass, subpass, base_pipeline_handle, base_pipeline_index)
    _GraphicsPipelineCreateInfo(vks, deps, layout, render_pass, base_pipeline_handle)
end

function _PipelineCacheCreateInfo(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = 0)
    next = cconvert(Ptr{Cvoid}, next)
    initial_data = cconvert(Ptr{Cvoid}, initial_data)
    deps = [next, initial_data]
    vks = VkPipelineCacheCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, initial_data_size, unsafe_convert(Ptr{Cvoid}, initial_data))
    _PipelineCacheCreateInfo(vks, deps)
end

function _PushConstantRange(stage_flags::ShaderStageFlag, offset::Integer, size::Integer)
    _PushConstantRange(VkPushConstantRange(stage_flags, offset, size))
end

function _PipelineLayoutCreateInfo(set_layouts::AbstractArray, push_constant_ranges::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    set_layouts = cconvert(Ptr{VkDescriptorSetLayout}, set_layouts)
    push_constant_ranges = cconvert(Ptr{VkPushConstantRange}, push_constant_ranges)
    deps = [next, set_layouts, push_constant_ranges]
    vks = VkPipelineLayoutCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(set_layouts), unsafe_convert(Ptr{VkDescriptorSetLayout}, set_layouts), pointer_length(push_constant_ranges), unsafe_convert(Ptr{VkPushConstantRange}, push_constant_ranges))
    _PipelineLayoutCreateInfo(vks, deps)
end

function _SamplerCreateInfo(mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates)
    _SamplerCreateInfo(vks, deps)
end

function _CommandPoolCreateInfo(queue_family_index::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandPoolCreateInfo(VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index)
    _CommandPoolCreateInfo(vks, deps)
end

function _CommandBufferAllocateInfo(command_pool::CommandPool, level::CommandBufferLevel, command_buffer_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferAllocateInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), command_pool, level, command_buffer_count)
    _CommandBufferAllocateInfo(vks, deps, command_pool)
end

function _CommandBufferInheritanceInfo(subpass::Integer, occlusion_query_enable::Bool; next = C_NULL, render_pass = C_NULL, framebuffer = C_NULL, query_flags = 0, pipeline_statistics = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, unsafe_convert(Ptr{Cvoid}, next), render_pass, subpass, framebuffer, occlusion_query_enable, query_flags, pipeline_statistics)
    _CommandBufferInheritanceInfo(vks, deps, render_pass, framebuffer)
end

function _CommandBufferBeginInfo(; next = C_NULL, flags = 0, inheritance_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    inheritance_info = cconvert(Ptr{VkCommandBufferInheritanceInfo}, inheritance_info)
    deps = [next, inheritance_info]
    vks = VkCommandBufferBeginInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkCommandBufferInheritanceInfo}, inheritance_info))
    _CommandBufferBeginInfo(vks, deps)
end

function _RenderPassBeginInfo(render_pass::RenderPass, framebuffer::Framebuffer, render_area::_Rect2D, clear_values::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    clear_values = cconvert(Ptr{VkClearValue}, clear_values)
    deps = [next, clear_values]
    vks = VkRenderPassBeginInfo(VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), render_pass, framebuffer, render_area.vks, pointer_length(clear_values), unsafe_convert(Ptr{VkClearValue}, clear_values))
    _RenderPassBeginInfo(vks, deps, render_pass, framebuffer)
end

function _ClearDepthStencilValue(depth::Real, stencil::Integer)
    _ClearDepthStencilValue(VkClearDepthStencilValue(depth, stencil))
end

function _ClearAttachment(aspect_mask::ImageAspectFlag, color_attachment::Integer, clear_value::VkClearValue)
    _ClearAttachment(VkClearAttachment(aspect_mask, color_attachment, clear_value))
end

function _AttachmentDescription(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; flags = 0)
    _AttachmentDescription(VkAttachmentDescription(flags, format, VkSampleCountFlagBits(samples.val), load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout))
end

function _AttachmentReference(attachment::Integer, layout::ImageLayout)
    _AttachmentReference(VkAttachmentReference(attachment, layout))
end

function _SubpassDescription(pipeline_bind_point::PipelineBindPoint, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL)
    input_attachments = cconvert(Ptr{VkAttachmentReference}, input_attachments)
    color_attachments = cconvert(Ptr{VkAttachmentReference}, color_attachments)
    resolve_attachments = cconvert(Ptr{VkAttachmentReference}, resolve_attachments)
    depth_stencil_attachment = cconvert(Ptr{VkAttachmentReference}, depth_stencil_attachment)
    preserve_attachments = cconvert(Ptr{UInt32}, preserve_attachments)
    deps = [input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments]
    vks = VkSubpassDescription(flags, pipeline_bind_point, pointer_length(input_attachments), unsafe_convert(Ptr{VkAttachmentReference}, input_attachments), pointer_length(color_attachments), unsafe_convert(Ptr{VkAttachmentReference}, color_attachments), unsafe_convert(Ptr{VkAttachmentReference}, resolve_attachments), unsafe_convert(Ptr{VkAttachmentReference}, depth_stencil_attachment), pointer_length(preserve_attachments), unsafe_convert(Ptr{UInt32}, preserve_attachments))
    _SubpassDescription(vks, deps)
end

function _SubpassDependency(src_subpass::Integer, dst_subpass::Integer; src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0)
    _SubpassDependency(VkSubpassDependency(src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags))
end

function _RenderPassCreateInfo(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkAttachmentDescription}, attachments)
    subpasses = cconvert(Ptr{VkSubpassDescription}, subpasses)
    dependencies = cconvert(Ptr{VkSubpassDependency}, dependencies)
    deps = [next, attachments, subpasses, dependencies]
    vks = VkRenderPassCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(attachments), unsafe_convert(Ptr{VkAttachmentDescription}, attachments), pointer_length(subpasses), unsafe_convert(Ptr{VkSubpassDescription}, subpasses), pointer_length(dependencies), unsafe_convert(Ptr{VkSubpassDependency}, dependencies))
    _RenderPassCreateInfo(vks, deps)
end

function _EventCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkEventCreateInfo(VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _EventCreateInfo(vks, deps)
end

function _FenceCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceCreateInfo(VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _FenceCreateInfo(vks, deps)
end

function _PhysicalDeviceFeatures(robust_buffer_access::Bool, full_draw_index_uint_32::Bool, image_cube_array::Bool, independent_blend::Bool, geometry_shader::Bool, tessellation_shader::Bool, sample_rate_shading::Bool, dual_src_blend::Bool, logic_op::Bool, multi_draw_indirect::Bool, draw_indirect_first_instance::Bool, depth_clamp::Bool, depth_bias_clamp::Bool, fill_mode_non_solid::Bool, depth_bounds::Bool, wide_lines::Bool, large_points::Bool, alpha_to_one::Bool, multi_viewport::Bool, sampler_anisotropy::Bool, texture_compression_etc_2::Bool, texture_compression_astc_ldr::Bool, texture_compression_bc::Bool, occlusion_query_precise::Bool, pipeline_statistics_query::Bool, vertex_pipeline_stores_and_atomics::Bool, fragment_stores_and_atomics::Bool, shader_tessellation_and_geometry_point_size::Bool, shader_image_gather_extended::Bool, shader_storage_image_extended_formats::Bool, shader_storage_image_multisample::Bool, shader_storage_image_read_without_format::Bool, shader_storage_image_write_without_format::Bool, shader_uniform_buffer_array_dynamic_indexing::Bool, shader_sampled_image_array_dynamic_indexing::Bool, shader_storage_buffer_array_dynamic_indexing::Bool, shader_storage_image_array_dynamic_indexing::Bool, shader_clip_distance::Bool, shader_cull_distance::Bool, shader_float_64::Bool, shader_int_64::Bool, shader_int_16::Bool, shader_resource_residency::Bool, shader_resource_min_lod::Bool, sparse_binding::Bool, sparse_residency_buffer::Bool, sparse_residency_image_2_d::Bool, sparse_residency_image_3_d::Bool, sparse_residency_2_samples::Bool, sparse_residency_4_samples::Bool, sparse_residency_8_samples::Bool, sparse_residency_16_samples::Bool, sparse_residency_aliased::Bool, variable_multisample_rate::Bool, inherited_queries::Bool)
    _PhysicalDeviceFeatures(VkPhysicalDeviceFeatures(robust_buffer_access, full_draw_index_uint_32, image_cube_array, independent_blend, geometry_shader, tessellation_shader, sample_rate_shading, dual_src_blend, logic_op, multi_draw_indirect, draw_indirect_first_instance, depth_clamp, depth_bias_clamp, fill_mode_non_solid, depth_bounds, wide_lines, large_points, alpha_to_one, multi_viewport, sampler_anisotropy, texture_compression_etc_2, texture_compression_astc_ldr, texture_compression_bc, occlusion_query_precise, pipeline_statistics_query, vertex_pipeline_stores_and_atomics, fragment_stores_and_atomics, shader_tessellation_and_geometry_point_size, shader_image_gather_extended, shader_storage_image_extended_formats, shader_storage_image_multisample, shader_storage_image_read_without_format, shader_storage_image_write_without_format, shader_uniform_buffer_array_dynamic_indexing, shader_sampled_image_array_dynamic_indexing, shader_storage_buffer_array_dynamic_indexing, shader_storage_image_array_dynamic_indexing, shader_clip_distance, shader_cull_distance, shader_float_64, shader_int_64, shader_int_16, shader_resource_residency, shader_resource_min_lod, sparse_binding, sparse_residency_buffer, sparse_residency_image_2_d, sparse_residency_image_3_d, sparse_residency_2_samples, sparse_residency_4_samples, sparse_residency_8_samples, sparse_residency_16_samples, sparse_residency_aliased, variable_multisample_rate, inherited_queries))
end

function _SemaphoreCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreCreateInfo(VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _SemaphoreCreateInfo(vks, deps)
end

function _QueryPoolCreateInfo(query_type::QueryType, query_count::Integer; next = C_NULL, flags = 0, pipeline_statistics = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkQueryPoolCreateInfo(VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, query_type, query_count, pipeline_statistics)
    _QueryPoolCreateInfo(vks, deps)
end

function _FramebufferCreateInfo(render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkImageView}, attachments)
    deps = [next, attachments]
    vks = VkFramebufferCreateInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, render_pass, pointer_length(attachments), unsafe_convert(Ptr{VkImageView}, attachments), width, height, layers)
    _FramebufferCreateInfo(vks, deps, render_pass)
end

function _DrawIndirectCommand(vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer)
    _DrawIndirectCommand(VkDrawIndirectCommand(vertex_count, instance_count, first_vertex, first_instance))
end

function _DrawIndexedIndirectCommand(index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer)
    _DrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand(index_count, instance_count, first_index, vertex_offset, first_instance))
end

function _DispatchIndirectCommand(x::Integer, y::Integer, z::Integer)
    _DispatchIndirectCommand(VkDispatchIndirectCommand(x, y, z))
end

function _SubmitInfo(wait_semaphores::AbstractArray, wait_dst_stage_mask::AbstractArray, command_buffers::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    wait_dst_stage_mask = cconvert(Ptr{VkPipelineStageFlags}, wait_dst_stage_mask)
    command_buffers = cconvert(Ptr{VkCommandBuffer}, command_buffers)
    signal_semaphores = cconvert(Ptr{VkSemaphore}, signal_semaphores)
    deps = [next, wait_semaphores, wait_dst_stage_mask, command_buffers, signal_semaphores]
    vks = VkSubmitInfo(VK_STRUCTURE_TYPE_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), unsafe_convert(Ptr{VkPipelineStageFlags}, wait_dst_stage_mask), pointer_length(command_buffers), unsafe_convert(Ptr{VkCommandBuffer}, command_buffers), pointer_length(signal_semaphores), unsafe_convert(Ptr{VkSemaphore}, signal_semaphores))
    _SubmitInfo(vks, deps)
end

function _DisplayModeParametersKHR(visible_region::_Extent2D, refresh_rate::Integer)
    _DisplayModeParametersKHR(VkDisplayModeParametersKHR(visible_region.vks, refresh_rate))
end

function _DisplayModeCreateInfoKHR(parameters::_DisplayModeParametersKHR; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayModeCreateInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, parameters.vks)
    _DisplayModeCreateInfoKHR(vks, deps)
end

function _DisplaySurfaceCreateInfoKHR(display_mode::DisplayModeKHR, plane_index::Integer, plane_stack_index::Integer, transform::SurfaceTransformFlagKHR, global_alpha::Real, alpha_mode::DisplayPlaneAlphaFlagKHR, image_extent::_Extent2D; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplaySurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, display_mode, plane_index, plane_stack_index, VkSurfaceTransformFlagBitsKHR(transform.val), global_alpha, VkDisplayPlaneAlphaFlagBitsKHR(alpha_mode.val), image_extent.vks)
    _DisplaySurfaceCreateInfoKHR(vks, deps, display_mode)
end

function _DisplayPresentInfoKHR(src_rect::_Rect2D, dst_rect::_Rect2D, persistent::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPresentInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src_rect.vks, dst_rect.vks, persistent)
    _DisplayPresentInfoKHR(vks, deps)
end

function _AndroidSurfaceCreateInfoKHR(window::vk.ANativeWindow; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    window = cconvert(Ptr{ANativeWindow}, window)
    deps = [next, window]
    vks = VkAndroidSurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{ANativeWindow}, window))
    _AndroidSurfaceCreateInfoKHR(vks, deps)
end

function _ViSurfaceCreateInfoNN(window::Ptr{Cvoid}; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    window = cconvert(Ptr{Cvoid}, window)
    deps = [next, window]
    vks = VkViSurfaceCreateInfoNN(VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{Cvoid}, window))
    _ViSurfaceCreateInfoNN(vks, deps)
end

function _WaylandSurfaceCreateInfoKHR(display::vk.wl_display, surface::vk.wl_surface; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    display = cconvert(Ptr{wl_display}, display)
    surface = cconvert(Ptr{wl_surface}, surface)
    deps = [next, display, surface]
    vks = VkWaylandSurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{wl_display}, display), unsafe_convert(Ptr{wl_surface}, surface))
    _WaylandSurfaceCreateInfoKHR(vks, deps)
end

function _Win32SurfaceCreateInfoKHR(hinstance::vk.HINSTANCE, hwnd::vk.HWND; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkWin32SurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, hinstance, hwnd)
    _Win32SurfaceCreateInfoKHR(vks, deps)
end

function _XlibSurfaceCreateInfoKHR(dpy::vk.Display, window::vk.Window; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    dpy = cconvert(Ptr{Display}, dpy)
    deps = [next, dpy]
    vks = VkXlibSurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{Display}, dpy), window)
    _XlibSurfaceCreateInfoKHR(vks, deps)
end

function _XcbSurfaceCreateInfoKHR(connection::vk.xcb_connection_t, window::vk.xcb_window_t; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    connection = cconvert(Ptr{xcb_connection_t}, connection)
    deps = [next, connection]
    vks = VkXcbSurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{xcb_connection_t}, connection), window)
    _XcbSurfaceCreateInfoKHR(vks, deps)
end

function _DirectFBSurfaceCreateInfoEXT(dfb::vk.IDirectFB, surface::vk.IDirectFBSurface; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    dfb = cconvert(Ptr{IDirectFB}, dfb)
    surface = cconvert(Ptr{IDirectFBSurface}, surface)
    deps = [next, dfb, surface]
    vks = VkDirectFBSurfaceCreateInfoEXT(VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{IDirectFB}, dfb), unsafe_convert(Ptr{IDirectFBSurface}, surface))
    _DirectFBSurfaceCreateInfoEXT(vks, deps)
end

function _ImagePipeSurfaceCreateInfoFUCHSIA(image_pipe_handle::vk.zx_handle_t; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImagePipeSurfaceCreateInfoFUCHSIA(VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, unsafe_convert(Ptr{Cvoid}, next), flags, image_pipe_handle)
    _ImagePipeSurfaceCreateInfoFUCHSIA(vks, deps)
end

function _StreamDescriptorSurfaceCreateInfoGGP(stream_descriptor::vk.GgpStreamDescriptor; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkStreamDescriptorSurfaceCreateInfoGGP(VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, unsafe_convert(Ptr{Cvoid}, next), flags, stream_descriptor)
    _StreamDescriptorSurfaceCreateInfoGGP(vks, deps)
end

function _ScreenSurfaceCreateInfoQNX(context::vk._screen_context, window::vk._screen_window; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    context = cconvert(Ptr{_screen_context}, context)
    window = cconvert(Ptr{_screen_window}, window)
    deps = [next, context, window]
    vks = VkScreenSurfaceCreateInfoQNX(VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{_screen_context}, context), unsafe_convert(Ptr{_screen_window}, window))
    _ScreenSurfaceCreateInfoQNX(vks, deps)
end

function _SwapchainCreateInfoKHR(surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; next = C_NULL, flags = 0, old_swapchain = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, surface, min_image_count, image_format, image_color_space, image_extent.vks, image_array_layers, image_usage, image_sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices), VkSurfaceTransformFlagBitsKHR(pre_transform.val), VkCompositeAlphaFlagBitsKHR(composite_alpha.val), present_mode, clipped, old_swapchain)
    _SwapchainCreateInfoKHR(vks, deps, surface, old_swapchain)
end

function _PresentInfoKHR(wait_semaphores::AbstractArray, swapchains::AbstractArray, image_indices::AbstractArray; next = C_NULL, results = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    swapchains = cconvert(Ptr{VkSwapchainKHR}, swapchains)
    image_indices = cconvert(Ptr{UInt32}, image_indices)
    results = cconvert(Ptr{VkResult}, results)
    deps = [next, wait_semaphores, swapchains, image_indices, results]
    vks = VkPresentInfoKHR(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), pointer_length(swapchains), unsafe_convert(Ptr{VkSwapchainKHR}, swapchains), unsafe_convert(Ptr{UInt32}, image_indices), unsafe_convert(Ptr{VkResult}, results))
    _PresentInfoKHR(vks, deps)
end

function _DebugReportCallbackCreateInfoEXT(pfn_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDebugReportCallbackCreateInfoEXT(VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, pfn_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DebugReportCallbackCreateInfoEXT(vks, deps)
end

function _ValidationFlagsEXT(disabled_validation_checks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    disabled_validation_checks = cconvert(Ptr{VkValidationCheckEXT}, disabled_validation_checks)
    deps = [next, disabled_validation_checks]
    vks = VkValidationFlagsEXT(VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(disabled_validation_checks), unsafe_convert(Ptr{VkValidationCheckEXT}, disabled_validation_checks))
    _ValidationFlagsEXT(vks, deps)
end

function _ValidationFeaturesEXT(enabled_validation_features::AbstractArray, disabled_validation_features::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    enabled_validation_features = cconvert(Ptr{VkValidationFeatureEnableEXT}, enabled_validation_features)
    disabled_validation_features = cconvert(Ptr{VkValidationFeatureDisableEXT}, disabled_validation_features)
    deps = [next, enabled_validation_features, disabled_validation_features]
    vks = VkValidationFeaturesEXT(VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(enabled_validation_features), unsafe_convert(Ptr{VkValidationFeatureEnableEXT}, enabled_validation_features), pointer_length(disabled_validation_features), unsafe_convert(Ptr{VkValidationFeatureDisableEXT}, disabled_validation_features))
    _ValidationFeaturesEXT(vks, deps)
end

function _PipelineRasterizationStateRasterizationOrderAMD(rasterization_order::RasterizationOrderAMD; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateRasterizationOrderAMD(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, unsafe_convert(Ptr{Cvoid}, next), rasterization_order)
    _PipelineRasterizationStateRasterizationOrderAMD(vks, deps)
end

function _DebugMarkerObjectNameInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, object_name::AbstractString; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    object_name = cconvert(Cstring, object_name)
    deps = [next, object_name]
    vks = VkDebugMarkerObjectNameInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object, unsafe_convert(Cstring, object_name))
    _DebugMarkerObjectNameInfoEXT(vks, deps)
end

function _DebugMarkerObjectTagInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    tag = cconvert(Ptr{Cvoid}, tag)
    deps = [next, tag]
    vks = VkDebugMarkerObjectTagInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object, tag_name, tag_size, unsafe_convert(Ptr{Cvoid}, tag))
    _DebugMarkerObjectTagInfoEXT(vks, deps)
end

function _DebugMarkerMarkerInfoEXT(marker_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    marker_name = cconvert(Cstring, marker_name)
    deps = [next, marker_name]
    vks = VkDebugMarkerMarkerInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, marker_name), color)
    _DebugMarkerMarkerInfoEXT(vks, deps)
end

function _DedicatedAllocationImageCreateInfoNV(dedicated_allocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationImageCreateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation)
    _DedicatedAllocationImageCreateInfoNV(vks, deps)
end

function _DedicatedAllocationBufferCreateInfoNV(dedicated_allocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationBufferCreateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation)
    _DedicatedAllocationBufferCreateInfoNV(vks, deps)
end

function _DedicatedAllocationMemoryAllocateInfoNV(; next = C_NULL, image = C_NULL, buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationMemoryAllocateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), image, buffer)
    _DedicatedAllocationMemoryAllocateInfoNV(vks, deps, image, buffer)
end

function _ExternalMemoryImageCreateInfoNV(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryImageCreateInfoNV(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryImageCreateInfoNV(vks, deps)
end

function _ExportMemoryAllocateInfoNV(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportMemoryAllocateInfoNV(VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportMemoryAllocateInfoNV(vks, deps)
end

function _ImportMemoryWin32HandleInfoNV(; next = C_NULL, handle_type = 0, handle = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryWin32HandleInfoNV(VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_type, handle)
    _ImportMemoryWin32HandleInfoNV(vks, deps)
end

function _ExportMemoryWin32HandleInfoNV(; next = C_NULL, attributes = C_NULL, dw_access = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportMemoryWin32HandleInfoNV(VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{SECURITY_ATTRIBUTES}, attributes), dw_access)
    _ExportMemoryWin32HandleInfoNV(vks, deps)
end

function _Win32KeyedMutexAcquireReleaseInfoNV(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeout_milliseconds::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acquire_syncs = cconvert(Ptr{VkDeviceMemory}, acquire_syncs)
    acquire_keys = cconvert(Ptr{UInt64}, acquire_keys)
    acquire_timeout_milliseconds = cconvert(Ptr{UInt32}, acquire_timeout_milliseconds)
    release_syncs = cconvert(Ptr{VkDeviceMemory}, release_syncs)
    release_keys = cconvert(Ptr{UInt64}, release_keys)
    deps = [next, acquire_syncs, acquire_keys, acquire_timeout_milliseconds, release_syncs, release_keys]
    vks = VkWin32KeyedMutexAcquireReleaseInfoNV(VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acquire_syncs), unsafe_convert(Ptr{VkDeviceMemory}, acquire_syncs), unsafe_convert(Ptr{UInt64}, acquire_keys), unsafe_convert(Ptr{UInt32}, acquire_timeout_milliseconds), pointer_length(release_syncs), unsafe_convert(Ptr{VkDeviceMemory}, release_syncs), unsafe_convert(Ptr{UInt64}, release_keys))
    _Win32KeyedMutexAcquireReleaseInfoNV(vks, deps)
end

function _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(device_generated_commands::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), device_generated_commands)
    _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(vks, deps)
end

function _DevicePrivateDataCreateInfoEXT(private_data_slot_request_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDevicePrivateDataCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), private_data_slot_request_count)
    _DevicePrivateDataCreateInfoEXT(vks, deps)
end

function _PrivateDataSlotCreateInfoEXT(flags::PrivateDataSlotCreateFlagEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPrivateDataSlotCreateInfoEXT(VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags)
    _PrivateDataSlotCreateInfoEXT(vks, deps)
end

function _PhysicalDevicePrivateDataFeaturesEXT(private_data::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePrivateDataFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), private_data)
    _PhysicalDevicePrivateDataFeaturesEXT(vks, deps)
end

function _GraphicsShaderGroupCreateInfoNV(stages::AbstractArray; next = C_NULL, vertex_input_state = C_NULL, tessellation_state = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    vertex_input_state = cconvert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state)
    tessellation_state = cconvert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state)
    deps = [next, stages, vertex_input_state, tessellation_state]
    vks = VkGraphicsShaderGroupCreateInfoNV(VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), unsafe_convert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state), unsafe_convert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state))
    _GraphicsShaderGroupCreateInfoNV(vks, deps)
end

function _GraphicsPipelineShaderGroupsCreateInfoNV(groups::AbstractArray, pipelines::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    groups = cconvert(Ptr{VkGraphicsShaderGroupCreateInfoNV}, groups)
    pipelines = cconvert(Ptr{VkPipeline}, pipelines)
    deps = [next, groups, pipelines]
    vks = VkGraphicsPipelineShaderGroupsCreateInfoNV(VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(groups), unsafe_convert(Ptr{VkGraphicsShaderGroupCreateInfoNV}, groups), pointer_length(pipelines), unsafe_convert(Ptr{VkPipeline}, pipelines))
    _GraphicsPipelineShaderGroupsCreateInfoNV(vks, deps)
end

function _BindShaderGroupIndirectCommandNV(group_index::Integer)
    _BindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV(group_index))
end

function _BindIndexBufferIndirectCommandNV(buffer_address::Integer, size::Integer, index_type::IndexType)
    _BindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV(buffer_address, size, index_type))
end

function _BindVertexBufferIndirectCommandNV(buffer_address::Integer, size::Integer, stride::Integer)
    _BindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV(buffer_address, size, stride))
end

function _SetStateFlagsIndirectCommandNV(data::Integer)
    _SetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV(data))
end

function _IndirectCommandsStreamNV(buffer::Buffer, offset::Integer)
    _IndirectCommandsStreamNV(VkIndirectCommandsStreamNV(buffer, offset), buffer)
end

function _IndirectCommandsLayoutTokenNV(token_type::IndirectCommandsTokenTypeNV, stream::Integer, offset::Integer, vertex_binding_unit::Integer, vertex_dynamic_stride::Bool, pushconstant_offset::Integer, pushconstant_size::Integer, index_types::AbstractArray, index_type_values::AbstractArray; next = C_NULL, pushconstant_pipeline_layout = C_NULL, pushconstant_shader_stage_flags = 0, indirect_state_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    index_types = cconvert(Ptr{VkIndexType}, index_types)
    index_type_values = cconvert(Ptr{UInt32}, index_type_values)
    deps = [next, index_types, index_type_values]
    vks = VkIndirectCommandsLayoutTokenNV(VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, unsafe_convert(Ptr{Cvoid}, next), token_type, stream, offset, vertex_binding_unit, vertex_dynamic_stride, pushconstant_pipeline_layout, pushconstant_shader_stage_flags, pushconstant_offset, pushconstant_size, indirect_state_flags, pointer_length(index_types), unsafe_convert(Ptr{VkIndexType}, index_types), unsafe_convert(Ptr{UInt32}, index_type_values))
    _IndirectCommandsLayoutTokenNV(vks, deps, pushconstant_pipeline_layout)
end

function _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    tokens = cconvert(Ptr{VkIndirectCommandsLayoutTokenNV}, tokens)
    stream_strides = cconvert(Ptr{UInt32}, stream_strides)
    deps = [next, tokens, stream_strides]
    vks = VkIndirectCommandsLayoutCreateInfoNV(VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pipeline_bind_point, pointer_length(tokens), unsafe_convert(Ptr{VkIndirectCommandsLayoutTokenNV}, tokens), pointer_length(stream_strides), unsafe_convert(Ptr{UInt32}, stream_strides))
    _IndirectCommandsLayoutCreateInfoNV(vks, deps)
end

function _GeneratedCommandsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, indirect_commands_layout::IndirectCommandsLayoutNV, streams::AbstractArray, sequences_count::Integer, preprocess_buffer::Buffer, preprocess_offset::Integer, preprocess_size::Integer, sequences_count_offset::Integer, sequences_index_offset::Integer; next = C_NULL, sequences_count_buffer = C_NULL, sequences_index_buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    streams = cconvert(Ptr{VkIndirectCommandsStreamNV}, streams)
    deps = [next, streams]
    vks = VkGeneratedCommandsInfoNV(VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pipeline_bind_point, pipeline, indirect_commands_layout, pointer_length(streams), unsafe_convert(Ptr{VkIndirectCommandsStreamNV}, streams), sequences_count, preprocess_buffer, preprocess_offset, preprocess_size, sequences_count_buffer, sequences_count_offset, sequences_index_buffer, sequences_index_offset)
    _GeneratedCommandsInfoNV(vks, deps, pipeline, indirect_commands_layout, preprocess_buffer, sequences_count_buffer, sequences_index_buffer)
end

function _GeneratedCommandsMemoryRequirementsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, indirect_commands_layout::IndirectCommandsLayoutNV, max_sequences_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeneratedCommandsMemoryRequirementsInfoNV(VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pipeline_bind_point, pipeline, indirect_commands_layout, max_sequences_count)
    _GeneratedCommandsMemoryRequirementsInfoNV(vks, deps, pipeline, indirect_commands_layout)
end

function _PhysicalDeviceFeatures2(features::_PhysicalDeviceFeatures; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFeatures2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, unsafe_convert(Ptr{Cvoid}, next), features.vks)
    _PhysicalDeviceFeatures2(vks, deps)
end

function _PhysicalDeviceImageFormatInfo2(format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageFormatInfo2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, unsafe_convert(Ptr{Cvoid}, next), format, type, tiling, usage, flags)
    _PhysicalDeviceImageFormatInfo2(vks, deps)
end

function _PhysicalDeviceSparseImageFormatInfo2(format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSparseImageFormatInfo2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, unsafe_convert(Ptr{Cvoid}, next), format, type, VkSampleCountFlagBits(samples.val), usage, tiling)
    _PhysicalDeviceSparseImageFormatInfo2(vks, deps)
end

function _ConformanceVersion(major::Integer, minor::Integer, subminor::Integer, patch::Integer)
    _ConformanceVersion(VkConformanceVersion(major, minor, subminor, patch))
end

function _PresentRegionsKHR(; next = C_NULL, regions = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkPresentRegionKHR}, regions)
    deps = [next, regions]
    vks = VkPresentRegionsKHR(VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(regions), unsafe_convert(Ptr{VkPresentRegionKHR}, regions))
    _PresentRegionsKHR(vks, deps)
end

function _PresentRegionKHR(; rectangles = C_NULL)
    rectangles = cconvert(Ptr{VkRectLayerKHR}, rectangles)
    deps = [rectangles]
    vks = VkPresentRegionKHR(pointer_length(rectangles), unsafe_convert(Ptr{VkRectLayerKHR}, rectangles))
    _PresentRegionKHR(vks, deps)
end

function _RectLayerKHR(offset::_Offset2D, extent::_Extent2D, layer::Integer)
    _RectLayerKHR(VkRectLayerKHR(offset.vks, extent.vks, layer))
end

function _PhysicalDeviceVariablePointersFeatures(variable_pointers_storage_buffer::Bool, variable_pointers::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVariablePointersFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), variable_pointers_storage_buffer, variable_pointers)
    _PhysicalDeviceVariablePointersFeatures(vks, deps)
end

function _PhysicalDeviceExternalImageFormatInfo(; next = C_NULL, handle_type = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalImageFormatInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalImageFormatInfo(vks, deps)
end

function _PhysicalDeviceExternalBufferInfo(usage::BufferUsageFlag, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalBufferInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, usage, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalBufferInfo(vks, deps)
end

function _ExternalMemoryImageCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryImageCreateInfo(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryImageCreateInfo(vks, deps)
end

function _ExternalMemoryBufferCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryBufferCreateInfo(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryBufferCreateInfo(vks, deps)
end

function _ExportMemoryAllocateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportMemoryAllocateInfo(VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportMemoryAllocateInfo(vks, deps)
end

function _ImportMemoryWin32HandleInfoKHR(; next = C_NULL, handle_type = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportMemoryWin32HandleInfoKHR(vks, deps)
end

function _ExportMemoryWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportMemoryWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportMemoryWin32HandleInfoKHR(vks, deps)
end

function _ImportMemoryZirconHandleInfoFUCHSIA(; next = C_NULL, handle_type = 0, handle = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryZirconHandleInfoFUCHSIA(VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle)
    _ImportMemoryZirconHandleInfoFUCHSIA(vks, deps)
end

function _MemoryGetZirconHandleInfoFUCHSIA(memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetZirconHandleInfoFUCHSIA(VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, unsafe_convert(Ptr{Cvoid}, next), memory, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _MemoryGetZirconHandleInfoFUCHSIA(vks, deps, memory)
end

function _MemoryGetWin32HandleInfoKHR(memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), memory, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _MemoryGetWin32HandleInfoKHR(vks, deps, memory)
end

function _ImportMemoryFdInfoKHR(fd::Integer; next = C_NULL, handle_type = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd)
    _ImportMemoryFdInfoKHR(vks, deps)
end

function _MemoryGetFdInfoKHR(memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetFdInfoKHR(VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), memory, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _MemoryGetFdInfoKHR(vks, deps, memory)
end

function _Win32KeyedMutexAcquireReleaseInfoKHR(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeouts::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acquire_syncs = cconvert(Ptr{VkDeviceMemory}, acquire_syncs)
    acquire_keys = cconvert(Ptr{UInt64}, acquire_keys)
    acquire_timeouts = cconvert(Ptr{UInt32}, acquire_timeouts)
    release_syncs = cconvert(Ptr{VkDeviceMemory}, release_syncs)
    release_keys = cconvert(Ptr{UInt64}, release_keys)
    deps = [next, acquire_syncs, acquire_keys, acquire_timeouts, release_syncs, release_keys]
    vks = VkWin32KeyedMutexAcquireReleaseInfoKHR(VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acquire_syncs), unsafe_convert(Ptr{VkDeviceMemory}, acquire_syncs), unsafe_convert(Ptr{UInt64}, acquire_keys), unsafe_convert(Ptr{UInt32}, acquire_timeouts), pointer_length(release_syncs), unsafe_convert(Ptr{VkDeviceMemory}, release_syncs), unsafe_convert(Ptr{UInt64}, release_keys))
    _Win32KeyedMutexAcquireReleaseInfoKHR(vks, deps)
end

function _PhysicalDeviceExternalSemaphoreInfo(handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalSemaphoreInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalSemaphoreInfo(vks, deps)
end

function _ExportSemaphoreCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportSemaphoreCreateInfo(VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportSemaphoreCreateInfo(vks, deps)
end

function _ImportSemaphoreWin32HandleInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL, flags = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportSemaphoreWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, flags, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportSemaphoreWin32HandleInfoKHR(vks, deps, semaphore)
end

function _ExportSemaphoreWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportSemaphoreWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportSemaphoreWin32HandleInfoKHR(vks, deps)
end

function _D3D12FenceSubmitInfoKHR(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_values = cconvert(Ptr{UInt64}, wait_semaphore_values)
    signal_semaphore_values = cconvert(Ptr{UInt64}, signal_semaphore_values)
    deps = [next, wait_semaphore_values, signal_semaphore_values]
    vks = VkD3D12FenceSubmitInfoKHR(VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_values), unsafe_convert(Ptr{UInt64}, wait_semaphore_values), pointer_length(signal_semaphore_values), unsafe_convert(Ptr{UInt64}, signal_semaphore_values))
    _D3D12FenceSubmitInfoKHR(vks, deps)
end

function _SemaphoreGetWin32HandleInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _SemaphoreGetWin32HandleInfoKHR(vks, deps, semaphore)
end

function _ImportSemaphoreFdInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportSemaphoreFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, flags, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val), fd)
    _ImportSemaphoreFdInfoKHR(vks, deps, semaphore)
end

function _SemaphoreGetFdInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreGetFdInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _SemaphoreGetFdInfoKHR(vks, deps, semaphore)
end

function _ImportSemaphoreZirconHandleInfoFUCHSIA(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag, zircon_handle::vk.zx_handle_t; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportSemaphoreZirconHandleInfoFUCHSIA(VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, unsafe_convert(Ptr{Cvoid}, next), semaphore, flags, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val), zircon_handle)
    _ImportSemaphoreZirconHandleInfoFUCHSIA(vks, deps, semaphore)
end

function _SemaphoreGetZirconHandleInfoFUCHSIA(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreGetZirconHandleInfoFUCHSIA(VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, unsafe_convert(Ptr{Cvoid}, next), semaphore, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _SemaphoreGetZirconHandleInfoFUCHSIA(vks, deps, semaphore)
end

function _PhysicalDeviceExternalFenceInfo(handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalFenceInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalFenceInfo(vks, deps)
end

function _ExportFenceCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportFenceCreateInfo(VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportFenceCreateInfo(vks, deps)
end

function _ImportFenceWin32HandleInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL, flags = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportFenceWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, flags, VkExternalFenceHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportFenceWin32HandleInfoKHR(vks, deps, fence)
end

function _ExportFenceWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportFenceWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportFenceWin32HandleInfoKHR(vks, deps)
end

function _FenceGetWin32HandleInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _FenceGetWin32HandleInfoKHR(vks, deps, fence)
end

function _ImportFenceFdInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportFenceFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, flags, VkExternalFenceHandleTypeFlagBits(handle_type.val), fd)
    _ImportFenceFdInfoKHR(vks, deps, fence)
end

function _FenceGetFdInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceGetFdInfoKHR(VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _FenceGetFdInfoKHR(vks, deps, fence)
end

function _PhysicalDeviceMultiviewFeatures(multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMultiviewFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, unsafe_convert(Ptr{Cvoid}, next), multiview, multiview_geometry_shader, multiview_tessellation_shader)
    _PhysicalDeviceMultiviewFeatures(vks, deps)
end

function _RenderPassMultiviewCreateInfo(view_masks::AbstractArray, view_offsets::AbstractArray, correlation_masks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    view_masks = cconvert(Ptr{UInt32}, view_masks)
    view_offsets = cconvert(Ptr{Int32}, view_offsets)
    correlation_masks = cconvert(Ptr{UInt32}, correlation_masks)
    deps = [next, view_masks, view_offsets, correlation_masks]
    vks = VkRenderPassMultiviewCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(view_masks), unsafe_convert(Ptr{UInt32}, view_masks), pointer_length(view_offsets), unsafe_convert(Ptr{Int32}, view_offsets), pointer_length(correlation_masks), unsafe_convert(Ptr{UInt32}, correlation_masks))
    _RenderPassMultiviewCreateInfo(vks, deps)
end

function _DisplayPowerInfoEXT(power_state::DisplayPowerStateEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPowerInfoEXT(VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), power_state)
    _DisplayPowerInfoEXT(vks, deps)
end

function _DeviceEventInfoEXT(device_event::DeviceEventTypeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceEventInfoEXT(VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), device_event)
    _DeviceEventInfoEXT(vks, deps)
end

function _DisplayEventInfoEXT(display_event::DisplayEventTypeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayEventInfoEXT(VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), display_event)
    _DisplayEventInfoEXT(vks, deps)
end

function _SwapchainCounterCreateInfoEXT(; next = C_NULL, surface_counters = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSwapchainCounterCreateInfoEXT(VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), surface_counters)
    _SwapchainCounterCreateInfoEXT(vks, deps)
end

function _MemoryAllocateFlagsInfo(device_mask::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryAllocateFlagsInfo(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, device_mask)
    _MemoryAllocateFlagsInfo(vks, deps)
end

function _BindBufferMemoryInfo(buffer::Buffer, memory::DeviceMemory, memory_offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindBufferMemoryInfo(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), buffer, memory, memory_offset)
    _BindBufferMemoryInfo(vks, deps, buffer, memory)
end

function _BindBufferMemoryDeviceGroupInfo(device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    deps = [next, device_indices]
    vks = VkBindBufferMemoryDeviceGroupInfo(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices))
    _BindBufferMemoryDeviceGroupInfo(vks, deps)
end

function _BindImageMemoryInfo(image::Image, memory::DeviceMemory, memory_offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImageMemoryInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), image, memory, memory_offset)
    _BindImageMemoryInfo(vks, deps, image, memory)
end

function _BindImageMemoryDeviceGroupInfo(device_indices::AbstractArray, split_instance_bind_regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    split_instance_bind_regions = cconvert(Ptr{VkRect2D}, split_instance_bind_regions)
    deps = [next, device_indices, split_instance_bind_regions]
    vks = VkBindImageMemoryDeviceGroupInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices), pointer_length(split_instance_bind_regions), unsafe_convert(Ptr{VkRect2D}, split_instance_bind_regions))
    _BindImageMemoryDeviceGroupInfo(vks, deps)
end

function _DeviceGroupRenderPassBeginInfo(device_mask::Integer, device_render_areas::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_render_areas = cconvert(Ptr{VkRect2D}, device_render_areas)
    deps = [next, device_render_areas]
    vks = VkDeviceGroupRenderPassBeginInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), device_mask, pointer_length(device_render_areas), unsafe_convert(Ptr{VkRect2D}, device_render_areas))
    _DeviceGroupRenderPassBeginInfo(vks, deps)
end

function _DeviceGroupCommandBufferBeginInfo(device_mask::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupCommandBufferBeginInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), device_mask)
    _DeviceGroupCommandBufferBeginInfo(vks, deps)
end

function _DeviceGroupSubmitInfo(wait_semaphore_device_indices::AbstractArray, command_buffer_device_masks::AbstractArray, signal_semaphore_device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_device_indices = cconvert(Ptr{UInt32}, wait_semaphore_device_indices)
    command_buffer_device_masks = cconvert(Ptr{UInt32}, command_buffer_device_masks)
    signal_semaphore_device_indices = cconvert(Ptr{UInt32}, signal_semaphore_device_indices)
    deps = [next, wait_semaphore_device_indices, command_buffer_device_masks, signal_semaphore_device_indices]
    vks = VkDeviceGroupSubmitInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_device_indices), unsafe_convert(Ptr{UInt32}, wait_semaphore_device_indices), pointer_length(command_buffer_device_masks), unsafe_convert(Ptr{UInt32}, command_buffer_device_masks), pointer_length(signal_semaphore_device_indices), unsafe_convert(Ptr{UInt32}, signal_semaphore_device_indices))
    _DeviceGroupSubmitInfo(vks, deps)
end

function _DeviceGroupBindSparseInfo(resource_device_index::Integer, memory_device_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupBindSparseInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, unsafe_convert(Ptr{Cvoid}, next), resource_device_index, memory_device_index)
    _DeviceGroupBindSparseInfo(vks, deps)
end

function _ImageSwapchainCreateInfoKHR(; next = C_NULL, swapchain = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain)
    _ImageSwapchainCreateInfoKHR(vks, deps, swapchain)
end

function _BindImageMemorySwapchainInfoKHR(swapchain::SwapchainKHR, image_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImageMemorySwapchainInfoKHR(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain, image_index)
    _BindImageMemorySwapchainInfoKHR(vks, deps, swapchain)
end

function _AcquireNextImageInfoKHR(swapchain::SwapchainKHR, timeout::Integer, device_mask::Integer; next = C_NULL, semaphore = C_NULL, fence = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAcquireNextImageInfoKHR(VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain, timeout, semaphore, fence, device_mask)
    _AcquireNextImageInfoKHR(vks, deps, swapchain, semaphore, fence)
end

function _DeviceGroupPresentInfoKHR(device_masks::AbstractArray, mode::DeviceGroupPresentModeFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_masks = cconvert(Ptr{UInt32}, device_masks)
    deps = [next, device_masks]
    vks = VkDeviceGroupPresentInfoKHR(VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_masks), unsafe_convert(Ptr{UInt32}, device_masks), VkDeviceGroupPresentModeFlagBitsKHR(mode.val))
    _DeviceGroupPresentInfoKHR(vks, deps)
end

function _DeviceGroupDeviceCreateInfo(physical_devices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    physical_devices = cconvert(Ptr{VkPhysicalDevice}, physical_devices)
    deps = [next, physical_devices]
    vks = VkDeviceGroupDeviceCreateInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(physical_devices), unsafe_convert(Ptr{VkPhysicalDevice}, physical_devices))
    _DeviceGroupDeviceCreateInfo(vks, deps)
end

function _DeviceGroupSwapchainCreateInfoKHR(modes::DeviceGroupPresentModeFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), modes)
    _DeviceGroupSwapchainCreateInfoKHR(vks, deps)
end

function _DescriptorUpdateTemplateEntry(dst_binding::Integer, dst_array_element::Integer, descriptor_count::Integer, descriptor_type::DescriptorType, offset::Integer, stride::Integer)
    _DescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry(dst_binding, dst_array_element, descriptor_count, descriptor_type, offset, stride))
end

function _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    descriptor_update_entries = cconvert(Ptr{VkDescriptorUpdateTemplateEntry}, descriptor_update_entries)
    deps = [next, descriptor_update_entries]
    vks = VkDescriptorUpdateTemplateCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(descriptor_update_entries), unsafe_convert(Ptr{VkDescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set)
    _DescriptorUpdateTemplateCreateInfo(vks, deps, descriptor_set_layout, pipeline_layout)
end

function _XYColorEXT(x::Real, y::Real)
    _XYColorEXT(VkXYColorEXT(x, y))
end

function _HdrMetadataEXT(display_primary_red::_XYColorEXT, display_primary_green::_XYColorEXT, display_primary_blue::_XYColorEXT, white_point::_XYColorEXT, max_luminance::Real, min_luminance::Real, max_content_light_level::Real, max_frame_average_light_level::Real; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkHdrMetadataEXT(VK_STRUCTURE_TYPE_HDR_METADATA_EXT, unsafe_convert(Ptr{Cvoid}, next), display_primary_red.vks, display_primary_green.vks, display_primary_blue.vks, white_point.vks, max_luminance, min_luminance, max_content_light_level, max_frame_average_light_level)
    _HdrMetadataEXT(vks, deps)
end

function _SwapchainDisplayNativeHdrCreateInfoAMD(local_dimming_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSwapchainDisplayNativeHdrCreateInfoAMD(VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), local_dimming_enable)
    _SwapchainDisplayNativeHdrCreateInfoAMD(vks, deps)
end

function _PresentTimesInfoGOOGLE(; next = C_NULL, times = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    times = cconvert(Ptr{VkPresentTimeGOOGLE}, times)
    deps = [next, times]
    vks = VkPresentTimesInfoGOOGLE(VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, unsafe_convert(Ptr{Cvoid}, next), pointer_length(times), unsafe_convert(Ptr{VkPresentTimeGOOGLE}, times))
    _PresentTimesInfoGOOGLE(vks, deps)
end

function _PresentTimeGOOGLE(present_id::Integer, desired_present_time::Integer)
    _PresentTimeGOOGLE(VkPresentTimeGOOGLE(present_id, desired_present_time))
end

function _IOSSurfaceCreateInfoMVK(view::Ptr{Cvoid}; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    view = cconvert(Ptr{Cvoid}, view)
    deps = [next, view]
    vks = VkIOSSurfaceCreateInfoMVK(VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{Cvoid}, view))
    _IOSSurfaceCreateInfoMVK(vks, deps)
end

function _MacOSSurfaceCreateInfoMVK(view::Ptr{Cvoid}; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    view = cconvert(Ptr{Cvoid}, view)
    deps = [next, view]
    vks = VkMacOSSurfaceCreateInfoMVK(VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{Cvoid}, view))
    _MacOSSurfaceCreateInfoMVK(vks, deps)
end

function _MetalSurfaceCreateInfoEXT(layer::vk.CAMetalLayer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    layer = cconvert(Ptr{CAMetalLayer}, layer)
    deps = [next, layer]
    vks = VkMetalSurfaceCreateInfoEXT(VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{CAMetalLayer}, layer))
    _MetalSurfaceCreateInfoEXT(vks, deps)
end

function _ViewportWScalingNV(xcoeff::Real, ycoeff::Real)
    _ViewportWScalingNV(VkViewportWScalingNV(xcoeff, ycoeff))
end

function _PipelineViewportWScalingStateCreateInfoNV(viewport_w_scaling_enable::Bool; next = C_NULL, viewport_w_scalings = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_w_scalings = cconvert(Ptr{VkViewportWScalingNV}, viewport_w_scalings)
    deps = [next, viewport_w_scalings]
    vks = VkPipelineViewportWScalingStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), viewport_w_scaling_enable, pointer_length(viewport_w_scalings), unsafe_convert(Ptr{VkViewportWScalingNV}, viewport_w_scalings))
    _PipelineViewportWScalingStateCreateInfoNV(vks, deps)
end

function _ViewportSwizzleNV(x::ViewportCoordinateSwizzleNV, y::ViewportCoordinateSwizzleNV, z::ViewportCoordinateSwizzleNV, w::ViewportCoordinateSwizzleNV)
    _ViewportSwizzleNV(VkViewportSwizzleNV(x, y, z, w))
end

function _PipelineViewportSwizzleStateCreateInfoNV(viewport_swizzles::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_swizzles = cconvert(Ptr{VkViewportSwizzleNV}, viewport_swizzles)
    deps = [next, viewport_swizzles]
    vks = VkPipelineViewportSwizzleStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(viewport_swizzles), unsafe_convert(Ptr{VkViewportSwizzleNV}, viewport_swizzles))
    _PipelineViewportSwizzleStateCreateInfoNV(vks, deps)
end

function _PipelineDiscardRectangleStateCreateInfoEXT(discard_rectangle_mode::DiscardRectangleModeEXT, discard_rectangles::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    discard_rectangles = cconvert(Ptr{VkRect2D}, discard_rectangles)
    deps = [next, discard_rectangles]
    vks = VkPipelineDiscardRectangleStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, discard_rectangle_mode, pointer_length(discard_rectangles), unsafe_convert(Ptr{VkRect2D}, discard_rectangles))
    _PipelineDiscardRectangleStateCreateInfoEXT(vks, deps)
end

function _InputAttachmentAspectReference(subpass::Integer, input_attachment_index::Integer, aspect_mask::ImageAspectFlag)
    _InputAttachmentAspectReference(VkInputAttachmentAspectReference(subpass, input_attachment_index, aspect_mask))
end

function _RenderPassInputAttachmentAspectCreateInfo(aspect_references::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    aspect_references = cconvert(Ptr{VkInputAttachmentAspectReference}, aspect_references)
    deps = [next, aspect_references]
    vks = VkRenderPassInputAttachmentAspectCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(aspect_references), unsafe_convert(Ptr{VkInputAttachmentAspectReference}, aspect_references))
    _RenderPassInputAttachmentAspectCreateInfo(vks, deps)
end

function _PhysicalDeviceSurfaceInfo2KHR(surface::SurfaceKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSurfaceInfo2KHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), surface)
    _PhysicalDeviceSurfaceInfo2KHR(vks, deps, surface)
end

function _DisplayPlaneInfo2KHR(mode::DisplayModeKHR, plane_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPlaneInfo2KHR(VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), mode, plane_index)
    _DisplayPlaneInfo2KHR(vks, deps, mode)
end

function _PhysicalDevice16BitStorageFeatures(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice16BitStorageFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16)
    _PhysicalDevice16BitStorageFeatures(vks, deps)
end

function _PhysicalDeviceShaderSubgroupExtendedTypesFeatures(shader_subgroup_extended_types::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_subgroup_extended_types)
    _PhysicalDeviceShaderSubgroupExtendedTypesFeatures(vks, deps)
end

function _BufferMemoryRequirementsInfo2(buffer::Buffer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), buffer)
    _BufferMemoryRequirementsInfo2(vks, deps, buffer)
end

function _ImageMemoryRequirementsInfo2(image::Image; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), image)
    _ImageMemoryRequirementsInfo2(vks, deps, image)
end

function _ImageSparseMemoryRequirementsInfo2(image::Image; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageSparseMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), image)
    _ImageSparseMemoryRequirementsInfo2(vks, deps, image)
end

function _MemoryDedicatedAllocateInfo(; next = C_NULL, image = C_NULL, buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryDedicatedAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), image, buffer)
    _MemoryDedicatedAllocateInfo(vks, deps, image, buffer)
end

function _ImageViewUsageCreateInfo(usage::ImageUsageFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewUsageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), usage)
    _ImageViewUsageCreateInfo(vks, deps)
end

function _PipelineTessellationDomainOriginStateCreateInfo(domain_origin::TessellationDomainOrigin; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineTessellationDomainOriginStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), domain_origin)
    _PipelineTessellationDomainOriginStateCreateInfo(vks, deps)
end

function _SamplerYcbcrConversionInfo(conversion::SamplerYcbcrConversion; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerYcbcrConversionInfo(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, unsafe_convert(Ptr{Cvoid}, next), conversion)
    _SamplerYcbcrConversionInfo(vks, deps, conversion)
end

function _SamplerYcbcrConversionCreateInfo(format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerYcbcrConversionCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), format, ycbcr_model, ycbcr_range, components.vks, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction)
    _SamplerYcbcrConversionCreateInfo(vks, deps)
end

function _BindImagePlaneMemoryInfo(plane_aspect::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImagePlaneMemoryInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), VkImageAspectFlagBits(plane_aspect.val))
    _BindImagePlaneMemoryInfo(vks, deps)
end

function _ImagePlaneMemoryRequirementsInfo(plane_aspect::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImagePlaneMemoryRequirementsInfo(VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, unsafe_convert(Ptr{Cvoid}, next), VkImageAspectFlagBits(plane_aspect.val))
    _ImagePlaneMemoryRequirementsInfo(vks, deps)
end

function _PhysicalDeviceSamplerYcbcrConversionFeatures(sampler_ycbcr_conversion::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSamplerYcbcrConversionFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, unsafe_convert(Ptr{Cvoid}, next), sampler_ycbcr_conversion)
    _PhysicalDeviceSamplerYcbcrConversionFeatures(vks, deps)
end

function _ConditionalRenderingBeginInfoEXT(buffer::Buffer, offset::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkConditionalRenderingBeginInfoEXT(VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), buffer, offset, flags)
    _ConditionalRenderingBeginInfoEXT(vks, deps, buffer)
end

function _ProtectedSubmitInfo(protected_submit::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkProtectedSubmitInfo(VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), protected_submit)
    _ProtectedSubmitInfo(vks, deps)
end

function _PhysicalDeviceProtectedMemoryFeatures(protected_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceProtectedMemoryFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, unsafe_convert(Ptr{Cvoid}, next), protected_memory)
    _PhysicalDeviceProtectedMemoryFeatures(vks, deps)
end

function _DeviceQueueInfo2(queue_family_index::Integer, queue_index::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceQueueInfo2(VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index, queue_index)
    _DeviceQueueInfo2(vks, deps)
end

function _PipelineCoverageToColorStateCreateInfoNV(coverage_to_color_enable::Bool; next = C_NULL, flags = 0, coverage_to_color_location = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCoverageToColorStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_to_color_enable, coverage_to_color_location)
    _PipelineCoverageToColorStateCreateInfoNV(vks, deps)
end

function _SampleLocationEXT(x::Real, y::Real)
    _SampleLocationEXT(VkSampleLocationEXT(x, y))
end

function _SampleLocationsInfoEXT(sample_locations_per_pixel::SampleCountFlag, sample_location_grid_size::_Extent2D, sample_locations::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sample_locations = cconvert(Ptr{VkSampleLocationEXT}, sample_locations)
    deps = [next, sample_locations]
    vks = VkSampleLocationsInfoEXT(VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), VkSampleCountFlagBits(sample_locations_per_pixel.val), sample_location_grid_size.vks, pointer_length(sample_locations), unsafe_convert(Ptr{VkSampleLocationEXT}, sample_locations))
    _SampleLocationsInfoEXT(vks, deps)
end

function _AttachmentSampleLocationsEXT(attachment_index::Integer, sample_locations_info::_SampleLocationsInfoEXT)
    _AttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT(attachment_index, sample_locations_info.vks))
end

function _SubpassSampleLocationsEXT(subpass_index::Integer, sample_locations_info::_SampleLocationsInfoEXT)
    _SubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT(subpass_index, sample_locations_info.vks))
end

function _RenderPassSampleLocationsBeginInfoEXT(attachment_initial_sample_locations::AbstractArray, post_subpass_sample_locations::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachment_initial_sample_locations = cconvert(Ptr{VkAttachmentSampleLocationsEXT}, attachment_initial_sample_locations)
    post_subpass_sample_locations = cconvert(Ptr{VkSubpassSampleLocationsEXT}, post_subpass_sample_locations)
    deps = [next, attachment_initial_sample_locations, post_subpass_sample_locations]
    vks = VkRenderPassSampleLocationsBeginInfoEXT(VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachment_initial_sample_locations), unsafe_convert(Ptr{VkAttachmentSampleLocationsEXT}, attachment_initial_sample_locations), pointer_length(post_subpass_sample_locations), unsafe_convert(Ptr{VkSubpassSampleLocationsEXT}, post_subpass_sample_locations))
    _RenderPassSampleLocationsBeginInfoEXT(vks, deps)
end

function _PipelineSampleLocationsStateCreateInfoEXT(sample_locations_enable::Bool, sample_locations_info::_SampleLocationsInfoEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineSampleLocationsStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), sample_locations_enable, sample_locations_info.vks)
    _PipelineSampleLocationsStateCreateInfoEXT(vks, deps)
end

function _SamplerReductionModeCreateInfo(reduction_mode::SamplerReductionMode; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerReductionModeCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), reduction_mode)
    _SamplerReductionModeCreateInfo(vks, deps)
end

function _PhysicalDeviceBlendOperationAdvancedFeaturesEXT(advanced_blend_coherent_operations::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), advanced_blend_coherent_operations)
    _PhysicalDeviceBlendOperationAdvancedFeaturesEXT(vks, deps)
end

function _PipelineColorBlendAdvancedStateCreateInfoEXT(src_premultiplied::Bool, dst_premultiplied::Bool, blend_overlap::BlendOverlapEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineColorBlendAdvancedStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), src_premultiplied, dst_premultiplied, blend_overlap)
    _PipelineColorBlendAdvancedStateCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceInlineUniformBlockFeaturesEXT(inline_uniform_block::Bool, descriptor_binding_inline_uniform_block_update_after_bind::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceInlineUniformBlockFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), inline_uniform_block, descriptor_binding_inline_uniform_block_update_after_bind)
    _PhysicalDeviceInlineUniformBlockFeaturesEXT(vks, deps)
end

function _WriteDescriptorSetInlineUniformBlockEXT(data_size::Integer, data::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    data = cconvert(Ptr{Cvoid}, data)
    deps = [next, data]
    vks = VkWriteDescriptorSetInlineUniformBlockEXT(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, unsafe_convert(Ptr{Cvoid}, next), data_size, unsafe_convert(Ptr{Cvoid}, data))
    _WriteDescriptorSetInlineUniformBlockEXT(vks, deps)
end

function _DescriptorPoolInlineUniformBlockCreateInfoEXT(max_inline_uniform_block_bindings::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDescriptorPoolInlineUniformBlockCreateInfoEXT(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), max_inline_uniform_block_bindings)
    _DescriptorPoolInlineUniformBlockCreateInfoEXT(vks, deps)
end

function _PipelineCoverageModulationStateCreateInfoNV(coverage_modulation_mode::CoverageModulationModeNV, coverage_modulation_table_enable::Bool; next = C_NULL, flags = 0, coverage_modulation_table = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    coverage_modulation_table = cconvert(Ptr{Float32}, coverage_modulation_table)
    deps = [next, coverage_modulation_table]
    vks = VkPipelineCoverageModulationStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_modulation_mode, coverage_modulation_table_enable, pointer_length(coverage_modulation_table), unsafe_convert(Ptr{Float32}, coverage_modulation_table))
    _PipelineCoverageModulationStateCreateInfoNV(vks, deps)
end

function _ImageFormatListCreateInfo(view_formats::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    view_formats = cconvert(Ptr{VkFormat}, view_formats)
    deps = [next, view_formats]
    vks = VkImageFormatListCreateInfo(VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(view_formats), unsafe_convert(Ptr{VkFormat}, view_formats))
    _ImageFormatListCreateInfo(vks, deps)
end

function _ValidationCacheCreateInfoEXT(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = 0)
    next = cconvert(Ptr{Cvoid}, next)
    initial_data = cconvert(Ptr{Cvoid}, initial_data)
    deps = [next, initial_data]
    vks = VkValidationCacheCreateInfoEXT(VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, initial_data_size, unsafe_convert(Ptr{Cvoid}, initial_data))
    _ValidationCacheCreateInfoEXT(vks, deps)
end

function _ShaderModuleValidationCacheCreateInfoEXT(validation_cache::ValidationCacheEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkShaderModuleValidationCacheCreateInfoEXT(VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), validation_cache)
    _ShaderModuleValidationCacheCreateInfoEXT(vks, deps, validation_cache)
end

function _PhysicalDeviceShaderDrawParametersFeatures(shader_draw_parameters::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderDrawParametersFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_draw_parameters)
    _PhysicalDeviceShaderDrawParametersFeatures(vks, deps)
end

function _PhysicalDeviceShaderFloat16Int8Features(shader_float_16::Bool, shader_int_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderFloat16Int8Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_float_16, shader_int_8)
    _PhysicalDeviceShaderFloat16Int8Features(vks, deps)
end

function _PhysicalDeviceHostQueryResetFeatures(host_query_reset::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceHostQueryResetFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, unsafe_convert(Ptr{Cvoid}, next), host_query_reset)
    _PhysicalDeviceHostQueryResetFeatures(vks, deps)
end

function _DeviceQueueGlobalPriorityCreateInfoEXT(global_priority::QueueGlobalPriorityEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceQueueGlobalPriorityCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), global_priority)
    _DeviceQueueGlobalPriorityCreateInfoEXT(vks, deps)
end

function _DebugUtilsObjectNameInfoEXT(object_type::ObjectType, object_handle::Integer; next = C_NULL, object_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    object_name = cconvert(Cstring, object_name)
    deps = [next, object_name]
    vks = VkDebugUtilsObjectNameInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object_handle, unsafe_convert(Cstring, object_name))
    _DebugUtilsObjectNameInfoEXT(vks, deps)
end

function _DebugUtilsObjectTagInfoEXT(object_type::ObjectType, object_handle::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    tag = cconvert(Ptr{Cvoid}, tag)
    deps = [next, tag]
    vks = VkDebugUtilsObjectTagInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object_handle, tag_name, tag_size, unsafe_convert(Ptr{Cvoid}, tag))
    _DebugUtilsObjectTagInfoEXT(vks, deps)
end

function _DebugUtilsLabelEXT(label_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    label_name = cconvert(Cstring, label_name)
    deps = [next, label_name]
    vks = VkDebugUtilsLabelEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, label_name), color)
    _DebugUtilsLabelEXT(vks, deps)
end

function _DebugUtilsMessengerCreateInfoEXT(message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDebugUtilsMessengerCreateInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, message_severity, message_type, pfn_user_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DebugUtilsMessengerCreateInfoEXT(vks, deps)
end

function _DebugUtilsMessengerCallbackDataEXT(message_id_number::Integer, message::AbstractString, queue_labels::AbstractArray, cmd_buf_labels::AbstractArray, objects::AbstractArray; next = C_NULL, flags = 0, message_id_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    message_id_name = cconvert(Cstring, message_id_name)
    message = cconvert(Cstring, message)
    queue_labels = cconvert(Ptr{VkDebugUtilsLabelEXT}, queue_labels)
    cmd_buf_labels = cconvert(Ptr{VkDebugUtilsLabelEXT}, cmd_buf_labels)
    objects = cconvert(Ptr{VkDebugUtilsObjectNameInfoEXT}, objects)
    deps = [next, message_id_name, message, queue_labels, cmd_buf_labels, objects]
    vks = VkDebugUtilsMessengerCallbackDataEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Cstring, message_id_name), message_id_number, unsafe_convert(Cstring, message), pointer_length(queue_labels), unsafe_convert(Ptr{VkDebugUtilsLabelEXT}, queue_labels), pointer_length(cmd_buf_labels), unsafe_convert(Ptr{VkDebugUtilsLabelEXT}, cmd_buf_labels), pointer_length(objects), unsafe_convert(Ptr{VkDebugUtilsObjectNameInfoEXT}, objects))
    _DebugUtilsMessengerCallbackDataEXT(vks, deps)
end

function _PhysicalDeviceDeviceMemoryReportFeaturesEXT(device_memory_report::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), device_memory_report)
    _PhysicalDeviceDeviceMemoryReportFeaturesEXT(vks, deps)
end

function _DeviceDeviceMemoryReportCreateInfoEXT(flags::Integer, pfn_user_callback::FunctionPtr, user_data::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDeviceDeviceMemoryReportCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, pfn_user_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DeviceDeviceMemoryReportCreateInfoEXT(vks, deps)
end

function _ImportMemoryHostPointerInfoEXT(handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    host_pointer = cconvert(Ptr{Cvoid}, host_pointer)
    deps = [next, host_pointer]
    vks = VkImportMemoryHostPointerInfoEXT(VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), unsafe_convert(Ptr{Cvoid}, host_pointer))
    _ImportMemoryHostPointerInfoEXT(vks, deps)
end

function _CalibratedTimestampInfoEXT(time_domain::TimeDomainEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCalibratedTimestampInfoEXT(VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), time_domain)
    _CalibratedTimestampInfoEXT(vks, deps)
end

function _PipelineRasterizationConservativeStateCreateInfoEXT(conservative_rasterization_mode::ConservativeRasterizationModeEXT, extra_primitive_overestimation_size::Real; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationConservativeStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, conservative_rasterization_mode, extra_primitive_overestimation_size)
    _PipelineRasterizationConservativeStateCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceDescriptorIndexingFeatures(shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDescriptorIndexingFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array)
    _PhysicalDeviceDescriptorIndexingFeatures(vks, deps)
end

function _DescriptorSetLayoutBindingFlagsCreateInfo(binding_flags::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    binding_flags = cconvert(Ptr{VkDescriptorBindingFlags}, binding_flags)
    deps = [next, binding_flags]
    vks = VkDescriptorSetLayoutBindingFlagsCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(binding_flags), unsafe_convert(Ptr{VkDescriptorBindingFlags}, binding_flags))
    _DescriptorSetLayoutBindingFlagsCreateInfo(vks, deps)
end

function _DescriptorSetVariableDescriptorCountAllocateInfo(descriptor_counts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    descriptor_counts = cconvert(Ptr{UInt32}, descriptor_counts)
    deps = [next, descriptor_counts]
    vks = VkDescriptorSetVariableDescriptorCountAllocateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(descriptor_counts), unsafe_convert(Ptr{UInt32}, descriptor_counts))
    _DescriptorSetVariableDescriptorCountAllocateInfo(vks, deps)
end

function _AttachmentDescription2(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentDescription2(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, unsafe_convert(Ptr{Cvoid}, next), flags, format, VkSampleCountFlagBits(samples.val), load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout)
    _AttachmentDescription2(vks, deps)
end

function _AttachmentReference2(attachment::Integer, layout::ImageLayout, aspect_mask::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentReference2(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, unsafe_convert(Ptr{Cvoid}, next), attachment, layout, aspect_mask)
    _AttachmentReference2(vks, deps)
end

function _SubpassDescription2(pipeline_bind_point::PipelineBindPoint, view_mask::Integer, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; next = C_NULL, flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    input_attachments = cconvert(Ptr{VkAttachmentReference2}, input_attachments)
    color_attachments = cconvert(Ptr{VkAttachmentReference2}, color_attachments)
    resolve_attachments = cconvert(Ptr{VkAttachmentReference2}, resolve_attachments)
    depth_stencil_attachment = cconvert(Ptr{VkAttachmentReference2}, depth_stencil_attachment)
    preserve_attachments = cconvert(Ptr{UInt32}, preserve_attachments)
    deps = [next, input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments]
    vks = VkSubpassDescription2(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, unsafe_convert(Ptr{Cvoid}, next), flags, pipeline_bind_point, view_mask, pointer_length(input_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, input_attachments), pointer_length(color_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, color_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, resolve_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, depth_stencil_attachment), pointer_length(preserve_attachments), unsafe_convert(Ptr{UInt32}, preserve_attachments))
    _SubpassDescription2(vks, deps)
end

function _SubpassDependency2(src_subpass::Integer, dst_subpass::Integer, view_offset::Integer; next = C_NULL, src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassDependency2(VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, unsafe_convert(Ptr{Cvoid}, next), src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags, view_offset)
    _SubpassDependency2(vks, deps)
end

function _RenderPassCreateInfo2(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkAttachmentDescription2}, attachments)
    subpasses = cconvert(Ptr{VkSubpassDescription2}, subpasses)
    dependencies = cconvert(Ptr{VkSubpassDependency2}, dependencies)
    correlated_view_masks = cconvert(Ptr{UInt32}, correlated_view_masks)
    deps = [next, attachments, subpasses, dependencies, correlated_view_masks]
    vks = VkRenderPassCreateInfo2(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(attachments), unsafe_convert(Ptr{VkAttachmentDescription2}, attachments), pointer_length(subpasses), unsafe_convert(Ptr{VkSubpassDescription2}, subpasses), pointer_length(dependencies), unsafe_convert(Ptr{VkSubpassDependency2}, dependencies), pointer_length(correlated_view_masks), unsafe_convert(Ptr{UInt32}, correlated_view_masks))
    _RenderPassCreateInfo2(vks, deps)
end

function _SubpassBeginInfo(contents::SubpassContents; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassBeginInfo(VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), contents)
    _SubpassBeginInfo(vks, deps)
end

function _SubpassEndInfo(; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassEndInfo(VK_STRUCTURE_TYPE_SUBPASS_END_INFO, unsafe_convert(Ptr{Cvoid}, next))
    _SubpassEndInfo(vks, deps)
end

function _PhysicalDeviceTimelineSemaphoreFeatures(timeline_semaphore::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTimelineSemaphoreFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), timeline_semaphore)
    _PhysicalDeviceTimelineSemaphoreFeatures(vks, deps)
end

function _SemaphoreTypeCreateInfo(semaphore_type::SemaphoreType, initial_value::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreTypeCreateInfo(VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), semaphore_type, initial_value)
    _SemaphoreTypeCreateInfo(vks, deps)
end

function _TimelineSemaphoreSubmitInfo(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_values = cconvert(Ptr{UInt64}, wait_semaphore_values)
    signal_semaphore_values = cconvert(Ptr{UInt64}, signal_semaphore_values)
    deps = [next, wait_semaphore_values, signal_semaphore_values]
    vks = VkTimelineSemaphoreSubmitInfo(VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_values), unsafe_convert(Ptr{UInt64}, wait_semaphore_values), pointer_length(signal_semaphore_values), unsafe_convert(Ptr{UInt64}, signal_semaphore_values))
    _TimelineSemaphoreSubmitInfo(vks, deps)
end

function _SemaphoreWaitInfo(semaphores::AbstractArray, values::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    semaphores = cconvert(Ptr{VkSemaphore}, semaphores)
    values = cconvert(Ptr{UInt64}, values)
    deps = [next, semaphores, values]
    vks = VkSemaphoreWaitInfo(VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(semaphores), unsafe_convert(Ptr{VkSemaphore}, semaphores), unsafe_convert(Ptr{UInt64}, values))
    _SemaphoreWaitInfo(vks, deps)
end

function _SemaphoreSignalInfo(semaphore::Semaphore, value::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreSignalInfo(VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, unsafe_convert(Ptr{Cvoid}, next), semaphore, value)
    _SemaphoreSignalInfo(vks, deps, semaphore)
end

function _VertexInputBindingDivisorDescriptionEXT(binding::Integer, divisor::Integer)
    _VertexInputBindingDivisorDescriptionEXT(VkVertexInputBindingDivisorDescriptionEXT(binding, divisor))
end

function _PipelineVertexInputDivisorStateCreateInfoEXT(vertex_binding_divisors::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    vertex_binding_divisors = cconvert(Ptr{VkVertexInputBindingDivisorDescriptionEXT}, vertex_binding_divisors)
    deps = [next, vertex_binding_divisors]
    vks = VkPipelineVertexInputDivisorStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(vertex_binding_divisors), unsafe_convert(Ptr{VkVertexInputBindingDivisorDescriptionEXT}, vertex_binding_divisors))
    _PipelineVertexInputDivisorStateCreateInfoEXT(vks, deps)
end

function _ImportAndroidHardwareBufferInfoANDROID(buffer::vk.AHardwareBuffer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    buffer = cconvert(Ptr{AHardwareBuffer}, buffer)
    deps = [next, buffer]
    vks = VkImportAndroidHardwareBufferInfoANDROID(VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{AHardwareBuffer}, buffer))
    _ImportAndroidHardwareBufferInfoANDROID(vks, deps)
end

function _MemoryGetAndroidHardwareBufferInfoANDROID(memory::DeviceMemory; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetAndroidHardwareBufferInfoANDROID(VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, unsafe_convert(Ptr{Cvoid}, next), memory)
    _MemoryGetAndroidHardwareBufferInfoANDROID(vks, deps, memory)
end

function _CommandBufferInheritanceConditionalRenderingInfoEXT(conditional_rendering_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceConditionalRenderingInfoEXT(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), conditional_rendering_enable)
    _CommandBufferInheritanceConditionalRenderingInfoEXT(vks, deps)
end

function _ExternalFormatANDROID(external_format::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalFormatANDROID(VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, unsafe_convert(Ptr{Cvoid}, next), external_format)
    _ExternalFormatANDROID(vks, deps)
end

function _PhysicalDevice8BitStorageFeatures(storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice8BitStorageFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8)
    _PhysicalDevice8BitStorageFeatures(vks, deps)
end

function _PhysicalDeviceConditionalRenderingFeaturesEXT(conditional_rendering::Bool, inherited_conditional_rendering::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceConditionalRenderingFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), conditional_rendering, inherited_conditional_rendering)
    _PhysicalDeviceConditionalRenderingFeaturesEXT(vks, deps)
end

function _PhysicalDeviceVulkanMemoryModelFeatures(vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkanMemoryModelFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, unsafe_convert(Ptr{Cvoid}, next), vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains)
    _PhysicalDeviceVulkanMemoryModelFeatures(vks, deps)
end

function _PhysicalDeviceShaderAtomicInt64Features(shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderAtomicInt64Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_buffer_int_64_atomics, shader_shared_int_64_atomics)
    _PhysicalDeviceShaderAtomicInt64Features(vks, deps)
end

function _PhysicalDeviceShaderAtomicFloatFeaturesEXT(shader_buffer_float_32_atomics::Bool, shader_buffer_float_32_atomic_add::Bool, shader_buffer_float_64_atomics::Bool, shader_buffer_float_64_atomic_add::Bool, shader_shared_float_32_atomics::Bool, shader_shared_float_32_atomic_add::Bool, shader_shared_float_64_atomics::Bool, shader_shared_float_64_atomic_add::Bool, shader_image_float_32_atomics::Bool, shader_image_float_32_atomic_add::Bool, sparse_image_float_32_atomics::Bool, sparse_image_float_32_atomic_add::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_buffer_float_32_atomics, shader_buffer_float_32_atomic_add, shader_buffer_float_64_atomics, shader_buffer_float_64_atomic_add, shader_shared_float_32_atomics, shader_shared_float_32_atomic_add, shader_shared_float_64_atomics, shader_shared_float_64_atomic_add, shader_image_float_32_atomics, shader_image_float_32_atomic_add, sparse_image_float_32_atomics, sparse_image_float_32_atomic_add)
    _PhysicalDeviceShaderAtomicFloatFeaturesEXT(vks, deps)
end

function _PhysicalDeviceVertexAttributeDivisorFeaturesEXT(vertex_attribute_instance_rate_divisor::Bool, vertex_attribute_instance_rate_zero_divisor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), vertex_attribute_instance_rate_divisor, vertex_attribute_instance_rate_zero_divisor)
    _PhysicalDeviceVertexAttributeDivisorFeaturesEXT(vks, deps)
end

function _SubpassDescriptionDepthStencilResolve(depth_resolve_mode::ResolveModeFlag, stencil_resolve_mode::ResolveModeFlag; next = C_NULL, depth_stencil_resolve_attachment = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    depth_stencil_resolve_attachment = cconvert(Ptr{VkAttachmentReference2}, depth_stencil_resolve_attachment)
    deps = [next, depth_stencil_resolve_attachment]
    vks = VkSubpassDescriptionDepthStencilResolve(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, unsafe_convert(Ptr{Cvoid}, next), VkResolveModeFlagBits(depth_resolve_mode.val), VkResolveModeFlagBits(stencil_resolve_mode.val), unsafe_convert(Ptr{VkAttachmentReference2}, depth_stencil_resolve_attachment))
    _SubpassDescriptionDepthStencilResolve(vks, deps)
end

function _ImageViewASTCDecodeModeEXT(decode_mode::Format; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewASTCDecodeModeEXT(VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, unsafe_convert(Ptr{Cvoid}, next), decode_mode)
    _ImageViewASTCDecodeModeEXT(vks, deps)
end

function _PhysicalDeviceASTCDecodeFeaturesEXT(decode_mode_shared_exponent::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceASTCDecodeFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), decode_mode_shared_exponent)
    _PhysicalDeviceASTCDecodeFeaturesEXT(vks, deps)
end

function _PhysicalDeviceTransformFeedbackFeaturesEXT(transform_feedback::Bool, geometry_streams::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTransformFeedbackFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), transform_feedback, geometry_streams)
    _PhysicalDeviceTransformFeedbackFeaturesEXT(vks, deps)
end

function _PipelineRasterizationStateStreamCreateInfoEXT(rasterization_stream::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateStreamCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, rasterization_stream)
    _PipelineRasterizationStateStreamCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceRepresentativeFragmentTestFeaturesNV(representative_fragment_test::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), representative_fragment_test)
    _PhysicalDeviceRepresentativeFragmentTestFeaturesNV(vks, deps)
end

function _PipelineRepresentativeFragmentTestStateCreateInfoNV(representative_fragment_test_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRepresentativeFragmentTestStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), representative_fragment_test_enable)
    _PipelineRepresentativeFragmentTestStateCreateInfoNV(vks, deps)
end

function _PhysicalDeviceExclusiveScissorFeaturesNV(exclusive_scissor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExclusiveScissorFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), exclusive_scissor)
    _PhysicalDeviceExclusiveScissorFeaturesNV(vks, deps)
end

function _PipelineViewportExclusiveScissorStateCreateInfoNV(exclusive_scissors::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    exclusive_scissors = cconvert(Ptr{VkRect2D}, exclusive_scissors)
    deps = [next, exclusive_scissors]
    vks = VkPipelineViewportExclusiveScissorStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(exclusive_scissors), unsafe_convert(Ptr{VkRect2D}, exclusive_scissors))
    _PipelineViewportExclusiveScissorStateCreateInfoNV(vks, deps)
end

function _PhysicalDeviceCornerSampledImageFeaturesNV(corner_sampled_image::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCornerSampledImageFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), corner_sampled_image)
    _PhysicalDeviceCornerSampledImageFeaturesNV(vks, deps)
end

function _PhysicalDeviceComputeShaderDerivativesFeaturesNV(compute_derivative_group_quads::Bool, compute_derivative_group_linear::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), compute_derivative_group_quads, compute_derivative_group_linear)
    _PhysicalDeviceComputeShaderDerivativesFeaturesNV(vks, deps)
end

function _PhysicalDeviceFragmentShaderBarycentricFeaturesNV(fragment_shader_barycentric::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), fragment_shader_barycentric)
    _PhysicalDeviceFragmentShaderBarycentricFeaturesNV(vks, deps)
end

function _PhysicalDeviceShaderImageFootprintFeaturesNV(image_footprint::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderImageFootprintFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), image_footprint)
    _PhysicalDeviceShaderImageFootprintFeaturesNV(vks, deps)
end

function _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(dedicated_allocation_image_aliasing::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation_image_aliasing)
    _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(vks, deps)
end

function _ShadingRatePaletteNV(shading_rate_palette_entries::AbstractArray)
    shading_rate_palette_entries = cconvert(Ptr{VkShadingRatePaletteEntryNV}, shading_rate_palette_entries)
    deps = [shading_rate_palette_entries]
    vks = VkShadingRatePaletteNV(pointer_length(shading_rate_palette_entries), unsafe_convert(Ptr{VkShadingRatePaletteEntryNV}, shading_rate_palette_entries))
    _ShadingRatePaletteNV(vks, deps)
end

function _PipelineViewportShadingRateImageStateCreateInfoNV(shading_rate_image_enable::Bool, shading_rate_palettes::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    shading_rate_palettes = cconvert(Ptr{VkShadingRatePaletteNV}, shading_rate_palettes)
    deps = [next, shading_rate_palettes]
    vks = VkPipelineViewportShadingRateImageStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_image_enable, pointer_length(shading_rate_palettes), unsafe_convert(Ptr{VkShadingRatePaletteNV}, shading_rate_palettes))
    _PipelineViewportShadingRateImageStateCreateInfoNV(vks, deps)
end

function _PhysicalDeviceShadingRateImageFeaturesNV(shading_rate_image::Bool, shading_rate_coarse_sample_order::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShadingRateImageFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_image, shading_rate_coarse_sample_order)
    _PhysicalDeviceShadingRateImageFeaturesNV(vks, deps)
end

function _CoarseSampleLocationNV(pixel_x::Integer, pixel_y::Integer, sample::Integer)
    _CoarseSampleLocationNV(VkCoarseSampleLocationNV(pixel_x, pixel_y, sample))
end

function _CoarseSampleOrderCustomNV(shading_rate::ShadingRatePaletteEntryNV, sample_count::Integer, sample_locations::AbstractArray)
    sample_locations = cconvert(Ptr{VkCoarseSampleLocationNV}, sample_locations)
    deps = [sample_locations]
    vks = VkCoarseSampleOrderCustomNV(shading_rate, sample_count, pointer_length(sample_locations), unsafe_convert(Ptr{VkCoarseSampleLocationNV}, sample_locations))
    _CoarseSampleOrderCustomNV(vks, deps)
end

function _PipelineViewportCoarseSampleOrderStateCreateInfoNV(sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    custom_sample_orders = cconvert(Ptr{VkCoarseSampleOrderCustomNV}, custom_sample_orders)
    deps = [next, custom_sample_orders]
    vks = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), sample_order_type, pointer_length(custom_sample_orders), unsafe_convert(Ptr{VkCoarseSampleOrderCustomNV}, custom_sample_orders))
    _PipelineViewportCoarseSampleOrderStateCreateInfoNV(vks, deps)
end

function _PhysicalDeviceMeshShaderFeaturesNV(task_shader::Bool, mesh_shader::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMeshShaderFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), task_shader, mesh_shader)
    _PhysicalDeviceMeshShaderFeaturesNV(vks, deps)
end

function _DrawMeshTasksIndirectCommandNV(task_count::Integer, first_task::Integer)
    _DrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV(task_count, first_task))
end

function _RayTracingShaderGroupCreateInfoNV(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRayTracingShaderGroupCreateInfoNV(VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader)
    _RayTracingShaderGroupCreateInfoNV(vks, deps)
end

function _RayTracingShaderGroupCreateInfoKHR(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL, shader_group_capture_replay_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    shader_group_capture_replay_handle = cconvert(Ptr{Cvoid}, shader_group_capture_replay_handle)
    deps = [next, shader_group_capture_replay_handle]
    vks = VkRayTracingShaderGroupCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader, unsafe_convert(Ptr{Cvoid}, shader_group_capture_replay_handle))
    _RayTracingShaderGroupCreateInfoKHR(vks, deps)
end

function _RayTracingPipelineCreateInfoNV(stages::AbstractArray, groups::AbstractArray, max_recursion_depth::Integer, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    groups = cconvert(Ptr{VkRayTracingShaderGroupCreateInfoNV}, groups)
    deps = [next, stages, groups]
    vks = VkRayTracingPipelineCreateInfoNV(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), pointer_length(groups), unsafe_convert(Ptr{VkRayTracingShaderGroupCreateInfoNV}, groups), max_recursion_depth, layout, base_pipeline_handle, base_pipeline_index)
    _RayTracingPipelineCreateInfoNV(vks, deps, layout, base_pipeline_handle)
end

function _RayTracingPipelineCreateInfoKHR(stages::AbstractArray, groups::AbstractArray, max_pipeline_ray_recursion_depth::Integer, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, library_info = C_NULL, library_interface = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    groups = cconvert(Ptr{VkRayTracingShaderGroupCreateInfoKHR}, groups)
    library_info = cconvert(Ptr{VkPipelineLibraryCreateInfoKHR}, library_info)
    library_interface = cconvert(Ptr{VkRayTracingPipelineInterfaceCreateInfoKHR}, library_interface)
    dynamic_state = cconvert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state)
    deps = [next, stages, groups, library_info, library_interface, dynamic_state]
    vks = VkRayTracingPipelineCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), pointer_length(groups), unsafe_convert(Ptr{VkRayTracingShaderGroupCreateInfoKHR}, groups), max_pipeline_ray_recursion_depth, unsafe_convert(Ptr{VkPipelineLibraryCreateInfoKHR}, library_info), unsafe_convert(Ptr{VkRayTracingPipelineInterfaceCreateInfoKHR}, library_interface), unsafe_convert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state), layout, base_pipeline_handle, base_pipeline_index)
    _RayTracingPipelineCreateInfoKHR(vks, deps, layout, base_pipeline_handle)
end

function _GeometryTrianglesNV(vertex_offset::Integer, vertex_count::Integer, vertex_stride::Integer, vertex_format::Format, index_offset::Integer, index_count::Integer, index_type::IndexType, transform_offset::Integer; next = C_NULL, vertex_data = C_NULL, index_data = C_NULL, transform_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryTrianglesNV(VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, unsafe_convert(Ptr{Cvoid}, next), vertex_data, vertex_offset, vertex_count, vertex_stride, vertex_format, index_data, index_offset, index_count, index_type, transform_data, transform_offset)
    _GeometryTrianglesNV(vks, deps, vertex_data, index_data, transform_data)
end

function _GeometryAABBNV(num_aab_bs::Integer, stride::Integer, offset::Integer; next = C_NULL, aabb_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryAABBNV(VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, unsafe_convert(Ptr{Cvoid}, next), aabb_data, num_aab_bs, stride, offset)
    _GeometryAABBNV(vks, deps, aabb_data)
end

function _GeometryDataNV(triangles::_GeometryTrianglesNV, aabbs::_GeometryAABBNV)
    _GeometryDataNV(VkGeometryDataNV(triangles.vks, aabbs.vks))
end

function _GeometryNV(geometry_type::GeometryTypeKHR, geometry::_GeometryDataNV; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryNV(VK_STRUCTURE_TYPE_GEOMETRY_NV, unsafe_convert(Ptr{Cvoid}, next), geometry_type, geometry.vks, flags)
    _GeometryNV(vks, deps)
end

function _AccelerationStructureInfoNV(type::VkAccelerationStructureTypeNV, geometries::AbstractArray; next = C_NULL, flags = 0, instance_count = 0)
    next = cconvert(Ptr{Cvoid}, next)
    geometries = cconvert(Ptr{VkGeometryNV}, geometries)
    deps = [next, geometries]
    vks = VkAccelerationStructureInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, flags, instance_count, pointer_length(geometries), unsafe_convert(Ptr{VkGeometryNV}, geometries))
    _AccelerationStructureInfoNV(vks, deps)
end

function _AccelerationStructureCreateInfoNV(compacted_size::Integer, info::_AccelerationStructureInfoNV; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureCreateInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), compacted_size, info.vks)
    _AccelerationStructureCreateInfoNV(vks, deps)
end

function _BindAccelerationStructureMemoryInfoNV(acceleration_structure::AccelerationStructureNV, memory::DeviceMemory, memory_offset::Integer, device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    deps = [next, device_indices]
    vks = VkBindAccelerationStructureMemoryInfoNV(VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure, memory, memory_offset, pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices))
    _BindAccelerationStructureMemoryInfoNV(vks, deps, acceleration_structure, memory)
end

function _WriteDescriptorSetAccelerationStructureKHR(acceleration_structures::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acceleration_structures = cconvert(Ptr{VkAccelerationStructureKHR}, acceleration_structures)
    deps = [next, acceleration_structures]
    vks = VkWriteDescriptorSetAccelerationStructureKHR(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acceleration_structures), unsafe_convert(Ptr{VkAccelerationStructureKHR}, acceleration_structures))
    _WriteDescriptorSetAccelerationStructureKHR(vks, deps)
end

function _WriteDescriptorSetAccelerationStructureNV(acceleration_structures::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acceleration_structures = cconvert(Ptr{VkAccelerationStructureNV}, acceleration_structures)
    deps = [next, acceleration_structures]
    vks = VkWriteDescriptorSetAccelerationStructureNV(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acceleration_structures), unsafe_convert(Ptr{VkAccelerationStructureNV}, acceleration_structures))
    _WriteDescriptorSetAccelerationStructureNV(vks, deps)
end

function _AccelerationStructureMemoryRequirementsInfoNV(type::AccelerationStructureMemoryRequirementsTypeNV, acceleration_structure::AccelerationStructureNV; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureMemoryRequirementsInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, acceleration_structure)
    _AccelerationStructureMemoryRequirementsInfoNV(vks, deps, acceleration_structure)
end

function _PhysicalDeviceAccelerationStructureFeaturesKHR(acceleration_structure::Bool, acceleration_structure_capture_replay::Bool, acceleration_structure_indirect_build::Bool, acceleration_structure_host_commands::Bool, descriptor_binding_acceleration_structure_update_after_bind::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceAccelerationStructureFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure, acceleration_structure_capture_replay, acceleration_structure_indirect_build, acceleration_structure_host_commands, descriptor_binding_acceleration_structure_update_after_bind)
    _PhysicalDeviceAccelerationStructureFeaturesKHR(vks, deps)
end

function _PhysicalDeviceRayTracingPipelineFeaturesKHR(ray_tracing_pipeline::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed::Bool, ray_tracing_pipeline_trace_rays_indirect::Bool, ray_traversal_primitive_culling::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRayTracingPipelineFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), ray_tracing_pipeline, ray_tracing_pipeline_shader_group_handle_capture_replay, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed, ray_tracing_pipeline_trace_rays_indirect, ray_traversal_primitive_culling)
    _PhysicalDeviceRayTracingPipelineFeaturesKHR(vks, deps)
end

function _PhysicalDeviceRayQueryFeaturesKHR(ray_query::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRayQueryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), ray_query)
    _PhysicalDeviceRayQueryFeaturesKHR(vks, deps)
end

function _StridedDeviceAddressRegionKHR(stride::Integer, size::Integer; device_address = 0)
    _StridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR(device_address, stride, size))
end

function _TraceRaysIndirectCommandKHR(width::Integer, height::Integer, depth::Integer)
    _TraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR(width, height, depth))
end

function _PhysicalDeviceImageDrmFormatModifierInfoEXT(drm_format_modifier::Integer, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkPhysicalDeviceImageDrmFormatModifierInfoEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), drm_format_modifier, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices))
    _PhysicalDeviceImageDrmFormatModifierInfoEXT(vks, deps)
end

function _ImageDrmFormatModifierListCreateInfoEXT(drm_format_modifiers::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    drm_format_modifiers = cconvert(Ptr{UInt64}, drm_format_modifiers)
    deps = [next, drm_format_modifiers]
    vks = VkImageDrmFormatModifierListCreateInfoEXT(VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(drm_format_modifiers), unsafe_convert(Ptr{UInt64}, drm_format_modifiers))
    _ImageDrmFormatModifierListCreateInfoEXT(vks, deps)
end

function _ImageDrmFormatModifierExplicitCreateInfoEXT(drm_format_modifier::Integer, plane_layouts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    plane_layouts = cconvert(Ptr{VkSubresourceLayout}, plane_layouts)
    deps = [next, plane_layouts]
    vks = VkImageDrmFormatModifierExplicitCreateInfoEXT(VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), drm_format_modifier, pointer_length(plane_layouts), unsafe_convert(Ptr{VkSubresourceLayout}, plane_layouts))
    _ImageDrmFormatModifierExplicitCreateInfoEXT(vks, deps)
end

function _ImageStencilUsageCreateInfo(stencil_usage::ImageUsageFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageStencilUsageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), stencil_usage)
    _ImageStencilUsageCreateInfo(vks, deps)
end

function _DeviceMemoryOverallocationCreateInfoAMD(overallocation_behavior::MemoryOverallocationBehaviorAMD; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceMemoryOverallocationCreateInfoAMD(VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), overallocation_behavior)
    _DeviceMemoryOverallocationCreateInfoAMD(vks, deps)
end

function _PhysicalDeviceFragmentDensityMapFeaturesEXT(fragment_density_map::Bool, fragment_density_map_dynamic::Bool, fragment_density_map_non_subsampled_images::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentDensityMapFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map, fragment_density_map_dynamic, fragment_density_map_non_subsampled_images)
    _PhysicalDeviceFragmentDensityMapFeaturesEXT(vks, deps)
end

function _PhysicalDeviceFragmentDensityMap2FeaturesEXT(fragment_density_map_deferred::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map_deferred)
    _PhysicalDeviceFragmentDensityMap2FeaturesEXT(vks, deps)
end

function _RenderPassFragmentDensityMapCreateInfoEXT(fragment_density_map_attachment::_AttachmentReference; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRenderPassFragmentDensityMapCreateInfoEXT(VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map_attachment.vks)
    _RenderPassFragmentDensityMapCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceScalarBlockLayoutFeatures(scalar_block_layout::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceScalarBlockLayoutFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, unsafe_convert(Ptr{Cvoid}, next), scalar_block_layout)
    _PhysicalDeviceScalarBlockLayoutFeatures(vks, deps)
end

function _SurfaceProtectedCapabilitiesKHR(supports_protected::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceProtectedCapabilitiesKHR(VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, unsafe_convert(Ptr{Cvoid}, next), supports_protected)
    _SurfaceProtectedCapabilitiesKHR(vks, deps)
end

function _PhysicalDeviceUniformBufferStandardLayoutFeatures(uniform_buffer_standard_layout::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceUniformBufferStandardLayoutFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, unsafe_convert(Ptr{Cvoid}, next), uniform_buffer_standard_layout)
    _PhysicalDeviceUniformBufferStandardLayoutFeatures(vks, deps)
end

function _PhysicalDeviceDepthClipEnableFeaturesEXT(depth_clip_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDepthClipEnableFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), depth_clip_enable)
    _PhysicalDeviceDepthClipEnableFeaturesEXT(vks, deps)
end

function _PipelineRasterizationDepthClipStateCreateInfoEXT(depth_clip_enable::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationDepthClipStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, depth_clip_enable)
    _PipelineRasterizationDepthClipStateCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceMemoryPriorityFeaturesEXT(memory_priority::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMemoryPriorityFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), memory_priority)
    _PhysicalDeviceMemoryPriorityFeaturesEXT(vks, deps)
end

function _MemoryPriorityAllocateInfoEXT(priority::Real; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryPriorityAllocateInfoEXT(VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), priority)
    _MemoryPriorityAllocateInfoEXT(vks, deps)
end

function _PhysicalDeviceBufferDeviceAddressFeatures(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBufferDeviceAddressFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)
    _PhysicalDeviceBufferDeviceAddressFeatures(vks, deps)
end

function _PhysicalDeviceBufferDeviceAddressFeaturesEXT(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)
    _PhysicalDeviceBufferDeviceAddressFeaturesEXT(vks, deps)
end

function _BufferDeviceAddressInfo(buffer::Buffer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferDeviceAddressInfo(VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, unsafe_convert(Ptr{Cvoid}, next), buffer)
    _BufferDeviceAddressInfo(vks, deps, buffer)
end

function _BufferOpaqueCaptureAddressCreateInfo(opaque_capture_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferOpaqueCaptureAddressCreateInfo(VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), opaque_capture_address)
    _BufferOpaqueCaptureAddressCreateInfo(vks, deps)
end

function _BufferDeviceAddressCreateInfoEXT(device_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferDeviceAddressCreateInfoEXT(VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), device_address)
    _BufferDeviceAddressCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceImageViewImageFormatInfoEXT(image_view_type::ImageViewType; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageViewImageFormatInfoEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), image_view_type)
    _PhysicalDeviceImageViewImageFormatInfoEXT(vks, deps)
end

function _PhysicalDeviceImagelessFramebufferFeatures(imageless_framebuffer::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImagelessFramebufferFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, unsafe_convert(Ptr{Cvoid}, next), imageless_framebuffer)
    _PhysicalDeviceImagelessFramebufferFeatures(vks, deps)
end

function _FramebufferAttachmentsCreateInfo(attachment_image_infos::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachment_image_infos = cconvert(Ptr{VkFramebufferAttachmentImageInfo}, attachment_image_infos)
    deps = [next, attachment_image_infos]
    vks = VkFramebufferAttachmentsCreateInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachment_image_infos), unsafe_convert(Ptr{VkFramebufferAttachmentImageInfo}, attachment_image_infos))
    _FramebufferAttachmentsCreateInfo(vks, deps)
end

function _FramebufferAttachmentImageInfo(usage::ImageUsageFlag, width::Integer, height::Integer, layer_count::Integer, view_formats::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    view_formats = cconvert(Ptr{VkFormat}, view_formats)
    deps = [next, view_formats]
    vks = VkFramebufferAttachmentImageInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, usage, width, height, layer_count, pointer_length(view_formats), unsafe_convert(Ptr{VkFormat}, view_formats))
    _FramebufferAttachmentImageInfo(vks, deps)
end

function _RenderPassAttachmentBeginInfo(attachments::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkImageView}, attachments)
    deps = [next, attachments]
    vks = VkRenderPassAttachmentBeginInfo(VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachments), unsafe_convert(Ptr{VkImageView}, attachments))
    _RenderPassAttachmentBeginInfo(vks, deps)
end

function _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(texture_compression_astc_hdr::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), texture_compression_astc_hdr)
    _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(vks, deps)
end

function _PhysicalDeviceCooperativeMatrixFeaturesNV(cooperative_matrix::Bool, cooperative_matrix_robust_buffer_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCooperativeMatrixFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), cooperative_matrix, cooperative_matrix_robust_buffer_access)
    _PhysicalDeviceCooperativeMatrixFeaturesNV(vks, deps)
end

function _CooperativeMatrixPropertiesNV(m_size::Integer, n_size::Integer, k_size::Integer, a_type::ComponentTypeNV, b_type::ComponentTypeNV, c_type::ComponentTypeNV, d_type::ComponentTypeNV, scope::ScopeNV; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCooperativeMatrixPropertiesNV(VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, unsafe_convert(Ptr{Cvoid}, next), m_size, n_size, k_size, a_type, b_type, c_type, d_type, scope)
    _CooperativeMatrixPropertiesNV(vks, deps)
end

function _PhysicalDeviceYcbcrImageArraysFeaturesEXT(ycbcr_image_arrays::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), ycbcr_image_arrays)
    _PhysicalDeviceYcbcrImageArraysFeaturesEXT(vks, deps)
end

function _ImageViewHandleInfoNVX(image_view::ImageView, descriptor_type::DescriptorType; next = C_NULL, sampler = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewHandleInfoNVX(VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, unsafe_convert(Ptr{Cvoid}, next), image_view, descriptor_type, sampler)
    _ImageViewHandleInfoNVX(vks, deps, image_view, sampler)
end

function _PresentFrameTokenGGP(frame_token::vk.GgpFrameToken; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPresentFrameTokenGGP(VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, unsafe_convert(Ptr{Cvoid}, next), frame_token)
    _PresentFrameTokenGGP(vks, deps)
end

function _PipelineCreationFeedbackCreateInfoEXT(pipeline_creation_feedback::PipelineCreationFeedbackEXT, pipeline_stage_creation_feedbacks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    pipeline_creation_feedback = cconvert(Ptr{VkPipelineCreationFeedbackEXT}, pipeline_creation_feedback)
    pipeline_stage_creation_feedbacks = cconvert(Ptr{Ptr{VkPipelineCreationFeedbackEXT}}, pipeline_stage_creation_feedbacks)
    deps = [next, pipeline_creation_feedback, pipeline_stage_creation_feedbacks]
    vks = VkPipelineCreationFeedbackCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{VkPipelineCreationFeedbackEXT}, pipeline_creation_feedback), pointer_length(pipeline_stage_creation_feedbacks), unsafe_convert(Ptr{Ptr{VkPipelineCreationFeedbackEXT}}, pipeline_stage_creation_feedbacks))
    _PipelineCreationFeedbackCreateInfoEXT(vks, deps)
end

function _SurfaceFullScreenExclusiveInfoEXT(full_screen_exclusive::FullScreenExclusiveEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceFullScreenExclusiveInfoEXT(VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), full_screen_exclusive)
    _SurfaceFullScreenExclusiveInfoEXT(vks, deps)
end

function _SurfaceFullScreenExclusiveWin32InfoEXT(hmonitor::vk.HMONITOR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceFullScreenExclusiveWin32InfoEXT(VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), hmonitor)
    _SurfaceFullScreenExclusiveWin32InfoEXT(vks, deps)
end

function _SurfaceCapabilitiesFullScreenExclusiveEXT(full_screen_exclusive_supported::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceCapabilitiesFullScreenExclusiveEXT(VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, unsafe_convert(Ptr{Cvoid}, next), full_screen_exclusive_supported)
    _SurfaceCapabilitiesFullScreenExclusiveEXT(vks, deps)
end

function _PhysicalDevicePerformanceQueryFeaturesKHR(performance_counter_query_pools::Bool, performance_counter_multiple_query_pools::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePerformanceQueryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), performance_counter_query_pools, performance_counter_multiple_query_pools)
    _PhysicalDevicePerformanceQueryFeaturesKHR(vks, deps)
end

function _QueryPoolPerformanceCreateInfoKHR(queue_family_index::Integer, counter_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    counter_indices = cconvert(Ptr{UInt32}, counter_indices)
    deps = [next, counter_indices]
    vks = VkQueryPoolPerformanceCreateInfoKHR(VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), queue_family_index, pointer_length(counter_indices), unsafe_convert(Ptr{UInt32}, counter_indices))
    _QueryPoolPerformanceCreateInfoKHR(vks, deps)
end

function _AcquireProfilingLockInfoKHR(timeout::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAcquireProfilingLockInfoKHR(VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, timeout)
    _AcquireProfilingLockInfoKHR(vks, deps)
end

function _PerformanceQuerySubmitInfoKHR(counter_pass_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceQuerySubmitInfoKHR(VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), counter_pass_index)
    _PerformanceQuerySubmitInfoKHR(vks, deps)
end

function _HeadlessSurfaceCreateInfoEXT(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkHeadlessSurfaceCreateInfoEXT(VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags)
    _HeadlessSurfaceCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceCoverageReductionModeFeaturesNV(coverage_reduction_mode::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCoverageReductionModeFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), coverage_reduction_mode)
    _PhysicalDeviceCoverageReductionModeFeaturesNV(vks, deps)
end

function _PipelineCoverageReductionStateCreateInfoNV(coverage_reduction_mode::CoverageReductionModeNV; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCoverageReductionStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_reduction_mode)
    _PipelineCoverageReductionStateCreateInfoNV(vks, deps)
end

function _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(shader_integer_functions_2::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, unsafe_convert(Ptr{Cvoid}, next), shader_integer_functions_2)
    _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(vks, deps)
end

function _PerformanceValueINTEL(type::PerformanceValueTypeINTEL, data::VkPerformanceValueDataINTEL)
    _PerformanceValueINTEL(VkPerformanceValueINTEL(type, data))
end

function _InitializePerformanceApiInfoINTEL(; next = C_NULL, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkInitializePerformanceApiInfoINTEL(VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{Cvoid}, user_data))
    _InitializePerformanceApiInfoINTEL(vks, deps)
end

function _QueryPoolPerformanceQueryCreateInfoINTEL(performance_counters_sampling::QueryPoolSamplingModeINTEL; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkQueryPoolPerformanceQueryCreateInfoINTEL(VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), performance_counters_sampling)
    _QueryPoolPerformanceQueryCreateInfoINTEL(vks, deps)
end

function _PerformanceMarkerInfoINTEL(marker::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceMarkerInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), marker)
    _PerformanceMarkerInfoINTEL(vks, deps)
end

function _PerformanceStreamMarkerInfoINTEL(marker::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceStreamMarkerInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), marker)
    _PerformanceStreamMarkerInfoINTEL(vks, deps)
end

function _PerformanceOverrideInfoINTEL(type::PerformanceOverrideTypeINTEL, enable::Bool, parameter::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceOverrideInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), type, enable, parameter)
    _PerformanceOverrideInfoINTEL(vks, deps)
end

function _PerformanceConfigurationAcquireInfoINTEL(type::PerformanceConfigurationTypeINTEL; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceConfigurationAcquireInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), type)
    _PerformanceConfigurationAcquireInfoINTEL(vks, deps)
end

function _PhysicalDeviceShaderClockFeaturesKHR(shader_subgroup_clock::Bool, shader_device_clock::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderClockFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_subgroup_clock, shader_device_clock)
    _PhysicalDeviceShaderClockFeaturesKHR(vks, deps)
end

function _PhysicalDeviceIndexTypeUint8FeaturesEXT(index_type_uint_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceIndexTypeUint8FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), index_type_uint_8)
    _PhysicalDeviceIndexTypeUint8FeaturesEXT(vks, deps)
end

function _PhysicalDeviceShaderSMBuiltinsFeaturesNV(shader_sm_builtins::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), shader_sm_builtins)
    _PhysicalDeviceShaderSMBuiltinsFeaturesNV(vks, deps)
end

function _PhysicalDeviceFragmentShaderInterlockFeaturesEXT(fragment_shader_sample_interlock::Bool, fragment_shader_pixel_interlock::Bool, fragment_shader_shading_rate_interlock::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_shader_sample_interlock, fragment_shader_pixel_interlock, fragment_shader_shading_rate_interlock)
    _PhysicalDeviceFragmentShaderInterlockFeaturesEXT(vks, deps)
end

function _PhysicalDeviceSeparateDepthStencilLayoutsFeatures(separate_depth_stencil_layouts::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), separate_depth_stencil_layouts)
    _PhysicalDeviceSeparateDepthStencilLayoutsFeatures(vks, deps)
end

function _AttachmentReferenceStencilLayout(stencil_layout::ImageLayout; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentReferenceStencilLayout(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, unsafe_convert(Ptr{Cvoid}, next), stencil_layout)
    _AttachmentReferenceStencilLayout(vks, deps)
end

function _AttachmentDescriptionStencilLayout(stencil_initial_layout::ImageLayout, stencil_final_layout::ImageLayout; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentDescriptionStencilLayout(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, unsafe_convert(Ptr{Cvoid}, next), stencil_initial_layout, stencil_final_layout)
    _AttachmentDescriptionStencilLayout(vks, deps)
end

function _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(pipeline_executable_info::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline_executable_info)
    _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(vks, deps)
end

function _PipelineInfoKHR(pipeline::Pipeline; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline)
    _PipelineInfoKHR(vks, deps, pipeline)
end

function _PipelineExecutableInfoKHR(pipeline::Pipeline, executable_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineExecutableInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline, executable_index)
    _PipelineExecutableInfoKHR(vks, deps, pipeline)
end

function _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(shader_demote_to_helper_invocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_demote_to_helper_invocation)
    _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(vks, deps)
end

function _PhysicalDeviceTexelBufferAlignmentFeaturesEXT(texel_buffer_alignment::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), texel_buffer_alignment)
    _PhysicalDeviceTexelBufferAlignmentFeaturesEXT(vks, deps)
end

function _PhysicalDeviceSubgroupSizeControlFeaturesEXT(subgroup_size_control::Bool, compute_full_subgroups::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), subgroup_size_control, compute_full_subgroups)
    _PhysicalDeviceSubgroupSizeControlFeaturesEXT(vks, deps)
end

function _MemoryOpaqueCaptureAddressAllocateInfo(opaque_capture_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryOpaqueCaptureAddressAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), opaque_capture_address)
    _MemoryOpaqueCaptureAddressAllocateInfo(vks, deps)
end

function _DeviceMemoryOpaqueCaptureAddressInfo(memory::DeviceMemory; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceMemoryOpaqueCaptureAddressInfo(VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, unsafe_convert(Ptr{Cvoid}, next), memory)
    _DeviceMemoryOpaqueCaptureAddressInfo(vks, deps, memory)
end

function _PhysicalDeviceLineRasterizationFeaturesEXT(rectangular_lines::Bool, bresenham_lines::Bool, smooth_lines::Bool, stippled_rectangular_lines::Bool, stippled_bresenham_lines::Bool, stippled_smooth_lines::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceLineRasterizationFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), rectangular_lines, bresenham_lines, smooth_lines, stippled_rectangular_lines, stippled_bresenham_lines, stippled_smooth_lines)
    _PhysicalDeviceLineRasterizationFeaturesEXT(vks, deps)
end

function _PipelineRasterizationLineStateCreateInfoEXT(line_rasterization_mode::LineRasterizationModeEXT, stippled_line_enable::Bool, line_stipple_factor::Integer, line_stipple_pattern::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationLineStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), line_rasterization_mode, stippled_line_enable, line_stipple_factor, line_stipple_pattern)
    _PipelineRasterizationLineStateCreateInfoEXT(vks, deps)
end

function _PhysicalDevicePipelineCreationCacheControlFeaturesEXT(pipeline_creation_cache_control::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), pipeline_creation_cache_control)
    _PhysicalDevicePipelineCreationCacheControlFeaturesEXT(vks, deps)
end

function _PhysicalDeviceVulkan11Features(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool, multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool, variable_pointers_storage_buffer::Bool, variable_pointers::Bool, protected_memory::Bool, sampler_ycbcr_conversion::Bool, shader_draw_parameters::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkan11Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16, multiview, multiview_geometry_shader, multiview_tessellation_shader, variable_pointers_storage_buffer, variable_pointers, protected_memory, sampler_ycbcr_conversion, shader_draw_parameters)
    _PhysicalDeviceVulkan11Features(vks, deps)
end

function _PhysicalDeviceVulkan12Features(sampler_mirror_clamp_to_edge::Bool, draw_indirect_count::Bool, storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool, shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool, shader_float_16::Bool, shader_int_8::Bool, descriptor_indexing::Bool, shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool, sampler_filter_minmax::Bool, scalar_block_layout::Bool, imageless_framebuffer::Bool, uniform_buffer_standard_layout::Bool, shader_subgroup_extended_types::Bool, separate_depth_stencil_layouts::Bool, host_query_reset::Bool, timeline_semaphore::Bool, buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool, vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool, shader_output_viewport_index::Bool, shader_output_layer::Bool, subgroup_broadcast_dynamic_id::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkan12Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, unsafe_convert(Ptr{Cvoid}, next), sampler_mirror_clamp_to_edge, draw_indirect_count, storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8, shader_buffer_int_64_atomics, shader_shared_int_64_atomics, shader_float_16, shader_int_8, descriptor_indexing, shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array, sampler_filter_minmax, scalar_block_layout, imageless_framebuffer, uniform_buffer_standard_layout, shader_subgroup_extended_types, separate_depth_stencil_layouts, host_query_reset, timeline_semaphore, buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device, vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains, shader_output_viewport_index, shader_output_layer, subgroup_broadcast_dynamic_id)
    _PhysicalDeviceVulkan12Features(vks, deps)
end

function _PipelineCompilerControlCreateInfoAMD(; next = C_NULL, compiler_control_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCompilerControlCreateInfoAMD(VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), compiler_control_flags)
    _PipelineCompilerControlCreateInfoAMD(vks, deps)
end

function _PhysicalDeviceCoherentMemoryFeaturesAMD(device_coherent_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCoherentMemoryFeaturesAMD(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, unsafe_convert(Ptr{Cvoid}, next), device_coherent_memory)
    _PhysicalDeviceCoherentMemoryFeaturesAMD(vks, deps)
end

function _SamplerCustomBorderColorCreateInfoEXT(custom_border_color::VkClearColorValue, format::Format; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerCustomBorderColorCreateInfoEXT(VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), custom_border_color, format)
    _SamplerCustomBorderColorCreateInfoEXT(vks, deps)
end

function _PhysicalDeviceCustomBorderColorFeaturesEXT(custom_border_colors::Bool, custom_border_color_without_format::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCustomBorderColorFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), custom_border_colors, custom_border_color_without_format)
    _PhysicalDeviceCustomBorderColorFeaturesEXT(vks, deps)
end

function _AccelerationStructureGeometryTrianglesDataKHR(vertex_format::Format, vertex_data::VkDeviceOrHostAddressConstKHR, vertex_stride::Integer, max_vertex::Integer, index_type::IndexType, index_data::VkDeviceOrHostAddressConstKHR, transform_data::VkDeviceOrHostAddressConstKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryTrianglesDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), vertex_format, vertex_data, vertex_stride, max_vertex, index_type, index_data, transform_data)
    _AccelerationStructureGeometryTrianglesDataKHR(vks, deps)
end

function _AccelerationStructureGeometryAabbsDataKHR(data::VkDeviceOrHostAddressConstKHR, stride::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryAabbsDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), data, stride)
    _AccelerationStructureGeometryAabbsDataKHR(vks, deps)
end

function _AccelerationStructureGeometryInstancesDataKHR(array_of_pointers::Bool, data::VkDeviceOrHostAddressConstKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryInstancesDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), array_of_pointers, data)
    _AccelerationStructureGeometryInstancesDataKHR(vks, deps)
end

function _AccelerationStructureGeometryKHR(geometry_type::GeometryTypeKHR, geometry::VkAccelerationStructureGeometryDataKHR; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, unsafe_convert(Ptr{Cvoid}, next), geometry_type, geometry, flags)
    _AccelerationStructureGeometryKHR(vks, deps)
end

function _AccelerationStructureBuildGeometryInfoKHR(type::AccelerationStructureTypeKHR, mode::BuildAccelerationStructureModeKHR, scratch_data::VkDeviceOrHostAddressKHR; next = C_NULL, flags = 0, src_acceleration_structure = C_NULL, dst_acceleration_structure = C_NULL, geometries = C_NULL, geometries_2 = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    geometries = cconvert(Ptr{VkAccelerationStructureGeometryKHR}, geometries)
    geometries_2 = cconvert(Ptr{Ptr{VkAccelerationStructureGeometryKHR}}, geometries_2)
    deps = [next, geometries, geometries_2]
    vks = VkAccelerationStructureBuildGeometryInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), type, flags, mode, src_acceleration_structure, dst_acceleration_structure, pointer_length(geometries), unsafe_convert(Ptr{VkAccelerationStructureGeometryKHR}, geometries), unsafe_convert(Ptr{Ptr{VkAccelerationStructureGeometryKHR}}, geometries), scratch_data)
    _AccelerationStructureBuildGeometryInfoKHR(vks, deps, src_acceleration_structure, dst_acceleration_structure)
end

function _AccelerationStructureBuildRangeInfoKHR(primitive_count::Integer, primitive_offset::Integer, first_vertex::Integer, transform_offset::Integer)
    _AccelerationStructureBuildRangeInfoKHR(VkAccelerationStructureBuildRangeInfoKHR(primitive_count, primitive_offset, first_vertex, transform_offset))
end

function _AccelerationStructureCreateInfoKHR(buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; next = C_NULL, create_flags = 0, device_address = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureCreateInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), create_flags, buffer, offset, size, type, device_address)
    _AccelerationStructureCreateInfoKHR(vks, deps, buffer)
end

function _AabbPositionsKHR(min_x::Real, min_y::Real, min_z::Real, max_x::Real, max_y::Real, max_z::Real)
    _AabbPositionsKHR(VkAabbPositionsKHR(min_x, min_y, min_z, max_x, max_y, max_z))
end

function _TransformMatrixKHR(matrix::NTuple{3, NTuple{4, Float32}})
    _TransformMatrixKHR(VkTransformMatrixKHR(matrix))
end

function _AccelerationStructureInstanceKHR(transform::_TransformMatrixKHR, instance_custom_index::Integer, mask::Integer, instance_shader_binding_table_record_offset::Integer, acceleration_structure_reference::Integer; flags = 0)
    _AccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR(transform.vks, instance_custom_index, mask, instance_shader_binding_table_record_offset, flags, acceleration_structure_reference))
end

function _AccelerationStructureDeviceAddressInfoKHR(acceleration_structure::AccelerationStructureKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureDeviceAddressInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure)
    _AccelerationStructureDeviceAddressInfoKHR(vks, deps, acceleration_structure)
end

function _AccelerationStructureVersionInfoKHR(version_data::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    version_data = cconvert(Ptr{UInt8}, version_data)
    deps = [next, version_data]
    vks = VkAccelerationStructureVersionInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{UInt8}, version_data))
    _AccelerationStructureVersionInfoKHR(vks, deps)
end

function _CopyAccelerationStructureInfoKHR(src::AccelerationStructureKHR, dst::AccelerationStructureKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyAccelerationStructureInfoKHR(VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src, dst, mode)
    _CopyAccelerationStructureInfoKHR(vks, deps, src, dst)
end

function _CopyAccelerationStructureToMemoryInfoKHR(src::AccelerationStructureKHR, dst::VkDeviceOrHostAddressKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyAccelerationStructureToMemoryInfoKHR(VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src, dst, mode)
    _CopyAccelerationStructureToMemoryInfoKHR(vks, deps, src)
end

function _CopyMemoryToAccelerationStructureInfoKHR(src::VkDeviceOrHostAddressConstKHR, dst::AccelerationStructureKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyMemoryToAccelerationStructureInfoKHR(VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src, dst, mode)
    _CopyMemoryToAccelerationStructureInfoKHR(vks, deps, dst)
end

function _RayTracingPipelineInterfaceCreateInfoKHR(max_pipeline_ray_payload_size::Integer, max_pipeline_ray_hit_attribute_size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRayTracingPipelineInterfaceCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), max_pipeline_ray_payload_size, max_pipeline_ray_hit_attribute_size)
    _RayTracingPipelineInterfaceCreateInfoKHR(vks, deps)
end

function _PipelineLibraryCreateInfoKHR(libraries::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    libraries = cconvert(Ptr{VkPipeline}, libraries)
    deps = [next, libraries]
    vks = VkPipelineLibraryCreateInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(libraries), unsafe_convert(Ptr{VkPipeline}, libraries))
    _PipelineLibraryCreateInfoKHR(vks, deps)
end

function _PhysicalDeviceExtendedDynamicStateFeaturesEXT(extended_dynamic_state::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), extended_dynamic_state)
    _PhysicalDeviceExtendedDynamicStateFeaturesEXT(vks, deps)
end

function _PhysicalDeviceExtendedDynamicState2FeaturesEXT(extended_dynamic_state_2::Bool, extended_dynamic_state_2_logic_op::Bool, extended_dynamic_state_2_patch_control_points::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), extended_dynamic_state_2, extended_dynamic_state_2_logic_op, extended_dynamic_state_2_patch_control_points)
    _PhysicalDeviceExtendedDynamicState2FeaturesEXT(vks, deps)
end

function _RenderPassTransformBeginInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRenderPassTransformBeginInfoQCOM(VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val))
    _RenderPassTransformBeginInfoQCOM(vks, deps)
end

function _CopyCommandTransformInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyCommandTransformInfoQCOM(VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val))
    _CopyCommandTransformInfoQCOM(vks, deps)
end

function _CommandBufferInheritanceRenderPassTransformInfoQCOM(transform::SurfaceTransformFlagKHR, render_area::_Rect2D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceRenderPassTransformInfoQCOM(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val), render_area.vks)
    _CommandBufferInheritanceRenderPassTransformInfoQCOM(vks, deps)
end

function _PhysicalDeviceDiagnosticsConfigFeaturesNV(diagnostics_config::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDiagnosticsConfigFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), diagnostics_config)
    _PhysicalDeviceDiagnosticsConfigFeaturesNV(vks, deps)
end

function _DeviceDiagnosticsConfigCreateInfoNV(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceDiagnosticsConfigCreateInfoNV(VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags)
    _DeviceDiagnosticsConfigCreateInfoNV(vks, deps)
end

function _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(shader_zero_initialize_workgroup_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_zero_initialize_workgroup_memory)
    _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(vks, deps)
end

function _PhysicalDeviceRobustness2FeaturesEXT(robust_buffer_access_2::Bool, robust_image_access_2::Bool, null_descriptor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRobustness2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), robust_buffer_access_2, robust_image_access_2, null_descriptor)
    _PhysicalDeviceRobustness2FeaturesEXT(vks, deps)
end

function _PhysicalDeviceImageRobustnessFeaturesEXT(robust_image_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageRobustnessFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), robust_image_access)
    _PhysicalDeviceImageRobustnessFeaturesEXT(vks, deps)
end

function _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(workgroup_memory_explicit_layout::Bool, workgroup_memory_explicit_layout_scalar_block_layout::Bool, workgroup_memory_explicit_layout_8_bit_access::Bool, workgroup_memory_explicit_layout_16_bit_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), workgroup_memory_explicit_layout, workgroup_memory_explicit_layout_scalar_block_layout, workgroup_memory_explicit_layout_8_bit_access, workgroup_memory_explicit_layout_16_bit_access)
    _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(vks, deps)
end

function _PhysicalDevicePortabilitySubsetFeaturesKHR(constant_alpha_color_blend_factors::Bool, events::Bool, image_view_format_reinterpretation::Bool, image_view_format_swizzle::Bool, image_view_2_d_on_3_d_image::Bool, multisample_array_image::Bool, mutable_comparison_samplers::Bool, point_polygons::Bool, sampler_mip_lod_bias::Bool, separate_stencil_mask_ref::Bool, shader_sample_rate_interpolation_functions::Bool, tessellation_isolines::Bool, tessellation_point_mode::Bool, triangle_fans::Bool, vertex_attribute_access_beyond_stride::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePortabilitySubsetFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), constant_alpha_color_blend_factors, events, image_view_format_reinterpretation, image_view_format_swizzle, image_view_2_d_on_3_d_image, multisample_array_image, mutable_comparison_samplers, point_polygons, sampler_mip_lod_bias, separate_stencil_mask_ref, shader_sample_rate_interpolation_functions, tessellation_isolines, tessellation_point_mode, triangle_fans, vertex_attribute_access_beyond_stride)
    _PhysicalDevicePortabilitySubsetFeaturesKHR(vks, deps)
end

function _PhysicalDevicePortabilitySubsetPropertiesKHR(min_vertex_input_binding_stride_alignment::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePortabilitySubsetPropertiesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, unsafe_convert(Ptr{Cvoid}, next), min_vertex_input_binding_stride_alignment)
    _PhysicalDevicePortabilitySubsetPropertiesKHR(vks, deps)
end

function _PhysicalDevice4444FormatsFeaturesEXT(format_a4r4g4b4::Bool, format_a4b4g4r4::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice4444FormatsFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), format_a4r4g4b4, format_a4b4g4r4)
    _PhysicalDevice4444FormatsFeaturesEXT(vks, deps)
end

function _BufferCopy2KHR(src_offset::Integer, dst_offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferCopy2KHR(VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_offset, dst_offset, size)
    _BufferCopy2KHR(vks, deps)
end

function _ImageCopy2KHR(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageCopy2KHR(VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks)
    _ImageCopy2KHR(vks, deps)
end

function _ImageBlit2KHR(src_subresource::_ImageSubresourceLayers, src_offsets::NTuple{2, _Offset3D}, dst_subresource::_ImageSubresourceLayers, dst_offsets::NTuple{2, _Offset3D}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageBlit2KHR(VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, to_vk(NTuple{2, VkOffset3D}, src_offsets), dst_subresource.vks, to_vk(NTuple{2, VkOffset3D}, dst_offsets))
    _ImageBlit2KHR(vks, deps)
end

function _BufferImageCopy2KHR(buffer_offset::Integer, buffer_row_length::Integer, buffer_image_height::Integer, image_subresource::_ImageSubresourceLayers, image_offset::_Offset3D, image_extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferImageCopy2KHR(VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), buffer_offset, buffer_row_length, buffer_image_height, image_subresource.vks, image_offset.vks, image_extent.vks)
    _BufferImageCopy2KHR(vks, deps)
end

function _ImageResolve2KHR(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageResolve2KHR(VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks)
    _ImageResolve2KHR(vks, deps)
end

function _CopyBufferInfo2KHR(src_buffer::Buffer, dst_buffer::Buffer, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyBufferInfo2KHR(VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_buffer, dst_buffer, pointer_length(regions), unsafe_convert(Ptr{VkBufferCopy2KHR}, regions))
    _CopyBufferInfo2KHR(vks, deps, src_buffer, dst_buffer)
end

function _CopyImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyImageInfo2KHR(VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageCopy2KHR}, regions))
    _CopyImageInfo2KHR(vks, deps, src_image, dst_image)
end

function _BlitImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageBlit2KHR}, regions)
    deps = [next, regions]
    vks = VkBlitImageInfo2KHR(VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageBlit2KHR}, regions), filter)
    _BlitImageInfo2KHR(vks, deps, src_image, dst_image)
end

function _CopyBufferToImageInfo2KHR(src_buffer::Buffer, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyBufferToImageInfo2KHR(VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_buffer, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkBufferImageCopy2KHR}, regions))
    _CopyBufferToImageInfo2KHR(vks, deps, src_buffer, dst_image)
end

function _CopyImageToBufferInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_buffer::Buffer, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyImageToBufferInfo2KHR(VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_buffer, pointer_length(regions), unsafe_convert(Ptr{VkBufferImageCopy2KHR}, regions))
    _CopyImageToBufferInfo2KHR(vks, deps, src_image, dst_buffer)
end

function _ResolveImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageResolve2KHR}, regions)
    deps = [next, regions]
    vks = VkResolveImageInfo2KHR(VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageResolve2KHR}, regions))
    _ResolveImageInfo2KHR(vks, deps, src_image, dst_image)
end

function _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(shader_image_int_64_atomics::Bool, sparse_image_int_64_atomics::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_image_int_64_atomics, sparse_image_int_64_atomics)
    _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(vks, deps)
end

function _FragmentShadingRateAttachmentInfoKHR(fragment_shading_rate_attachment::_AttachmentReference2, shading_rate_attachment_texel_size::_Extent2D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    fragment_shading_rate_attachment = cconvert(Ptr{VkAttachmentReference2}, fragment_shading_rate_attachment)
    deps = [next, fragment_shading_rate_attachment]
    vks = VkFragmentShadingRateAttachmentInfoKHR(VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{VkAttachmentReference2}, fragment_shading_rate_attachment), shading_rate_attachment_texel_size.vks)
    _FragmentShadingRateAttachmentInfoKHR(vks, deps)
end

function _PipelineFragmentShadingRateStateCreateInfoKHR(fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineFragmentShadingRateStateCreateInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fragment_size.vks, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))
    _PipelineFragmentShadingRateStateCreateInfoKHR(vks, deps)
end

function _PhysicalDeviceFragmentShadingRateFeaturesKHR(pipeline_fragment_shading_rate::Bool, primitive_fragment_shading_rate::Bool, attachment_fragment_shading_rate::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline_fragment_shading_rate, primitive_fragment_shading_rate, attachment_fragment_shading_rate)
    _PhysicalDeviceFragmentShadingRateFeaturesKHR(vks, deps)
end

function _PhysicalDeviceShaderTerminateInvocationFeaturesKHR(shader_terminate_invocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_terminate_invocation)
    _PhysicalDeviceShaderTerminateInvocationFeaturesKHR(vks, deps)
end

function _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(fragment_shading_rate_enums::Bool, supersample_fragment_shading_rates::Bool, no_invocation_fragment_shading_rates::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), fragment_shading_rate_enums, supersample_fragment_shading_rates, no_invocation_fragment_shading_rates)
    _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(vks, deps)
end

function _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(max_fragment_shading_rate_invocation_count::SampleCountFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, unsafe_convert(Ptr{Cvoid}, next), VkSampleCountFlagBits(max_fragment_shading_rate_invocation_count.val))
    _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(vks, deps)
end

function _PipelineFragmentShadingRateEnumStateCreateInfoNV(shading_rate_type::FragmentShadingRateTypeNV, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineFragmentShadingRateEnumStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_type, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))
    _PipelineFragmentShadingRateEnumStateCreateInfoNV(vks, deps)
end

function _AccelerationStructureBuildSizesInfoKHR(acceleration_structure_size::Integer, update_scratch_size::Integer, build_scratch_size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureBuildSizesInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure_size, update_scratch_size, build_scratch_size)
    _AccelerationStructureBuildSizesInfoKHR(vks, deps)
end

function _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(mutable_descriptor_type::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, unsafe_convert(Ptr{Cvoid}, next), mutable_descriptor_type)
    _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(vks, deps)
end

function _MutableDescriptorTypeListVALVE(descriptor_types::AbstractArray)
    descriptor_types = cconvert(Ptr{VkDescriptorType}, descriptor_types)
    deps = [descriptor_types]
    vks = VkMutableDescriptorTypeListVALVE(pointer_length(descriptor_types), unsafe_convert(Ptr{VkDescriptorType}, descriptor_types))
    _MutableDescriptorTypeListVALVE(vks, deps)
end

function _MutableDescriptorTypeCreateInfoVALVE(mutable_descriptor_type_lists::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    mutable_descriptor_type_lists = cconvert(Ptr{VkMutableDescriptorTypeListVALVE}, mutable_descriptor_type_lists)
    deps = [next, mutable_descriptor_type_lists]
    vks = VkMutableDescriptorTypeCreateInfoVALVE(VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, unsafe_convert(Ptr{Cvoid}, next), pointer_length(mutable_descriptor_type_lists), unsafe_convert(Ptr{VkMutableDescriptorTypeListVALVE}, mutable_descriptor_type_lists))
    _MutableDescriptorTypeCreateInfoVALVE(vks, deps)
end

function _PhysicalDeviceVertexInputDynamicStateFeaturesEXT(vertex_input_dynamic_state::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), vertex_input_dynamic_state)
    _PhysicalDeviceVertexInputDynamicStateFeaturesEXT(vks, deps)
end

function _VertexInputBindingDescription2EXT(binding::Integer, stride::Integer, input_rate::VertexInputRate, divisor::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVertexInputBindingDescription2EXT(VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, unsafe_convert(Ptr{Cvoid}, next), binding, stride, input_rate, divisor)
    _VertexInputBindingDescription2EXT(vks, deps)
end

function _VertexInputAttributeDescription2EXT(location::Integer, binding::Integer, format::Format, offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVertexInputAttributeDescription2EXT(VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, unsafe_convert(Ptr{Cvoid}, next), location, binding, format, offset)
    _VertexInputAttributeDescription2EXT(vks, deps)
end

function _PhysicalDeviceColorWriteEnableFeaturesEXT(color_write_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceColorWriteEnableFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), color_write_enable)
    _PhysicalDeviceColorWriteEnableFeaturesEXT(vks, deps)
end

function _PipelineColorWriteCreateInfoEXT(color_write_enables::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    color_write_enables = cconvert(Ptr{VkBool32}, color_write_enables)
    deps = [next, color_write_enables]
    vks = VkPipelineColorWriteCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(color_write_enables), unsafe_convert(Ptr{VkBool32}, color_write_enables))
    _PipelineColorWriteCreateInfoEXT(vks, deps)
end

function _MemoryBarrier2KHR(; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryBarrier2KHR(VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask)
    _MemoryBarrier2KHR(vks, deps)
end

function _ImageMemoryBarrier2KHR(old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image::Image, subresource_range::_ImageSubresourceRange; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryBarrier2KHR(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range.vks)
    _ImageMemoryBarrier2KHR(vks, deps, image)
end

function _BufferMemoryBarrier2KHR(src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer::Buffer, offset::Integer, size::Integer; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryBarrier2KHR(VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)
    _BufferMemoryBarrier2KHR(vks, deps, buffer)
end

function _DependencyInfoKHR(memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; next = C_NULL, dependency_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    memory_barriers = cconvert(Ptr{VkMemoryBarrier2KHR}, memory_barriers)
    buffer_memory_barriers = cconvert(Ptr{VkBufferMemoryBarrier2KHR}, buffer_memory_barriers)
    image_memory_barriers = cconvert(Ptr{VkImageMemoryBarrier2KHR}, image_memory_barriers)
    deps = [next, memory_barriers, buffer_memory_barriers, image_memory_barriers]
    vks = VkDependencyInfoKHR(VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), dependency_flags, pointer_length(memory_barriers), unsafe_convert(Ptr{VkMemoryBarrier2KHR}, memory_barriers), pointer_length(buffer_memory_barriers), unsafe_convert(Ptr{VkBufferMemoryBarrier2KHR}, buffer_memory_barriers), pointer_length(image_memory_barriers), unsafe_convert(Ptr{VkImageMemoryBarrier2KHR}, image_memory_barriers))
    _DependencyInfoKHR(vks, deps)
end

function _SemaphoreSubmitInfoKHR(semaphore::Semaphore, value::Integer, device_index::Integer; next = C_NULL, stage_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreSubmitInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, value, stage_mask, device_index)
    _SemaphoreSubmitInfoKHR(vks, deps, semaphore)
end

function _CommandBufferSubmitInfoKHR(command_buffer::CommandBuffer, device_mask::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferSubmitInfoKHR(VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), command_buffer, device_mask)
    _CommandBufferSubmitInfoKHR(vks, deps, command_buffer)
end

function _SubmitInfo2KHR(wait_semaphore_infos::AbstractArray, command_buffer_infos::AbstractArray, signal_semaphore_infos::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_infos = cconvert(Ptr{VkSemaphoreSubmitInfoKHR}, wait_semaphore_infos)
    command_buffer_infos = cconvert(Ptr{VkCommandBufferSubmitInfoKHR}, command_buffer_infos)
    signal_semaphore_infos = cconvert(Ptr{VkSemaphoreSubmitInfoKHR}, signal_semaphore_infos)
    deps = [next, wait_semaphore_infos, command_buffer_infos, signal_semaphore_infos]
    vks = VkSubmitInfo2KHR(VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(wait_semaphore_infos), unsafe_convert(Ptr{VkSemaphoreSubmitInfoKHR}, wait_semaphore_infos), pointer_length(command_buffer_infos), unsafe_convert(Ptr{VkCommandBufferSubmitInfoKHR}, command_buffer_infos), pointer_length(signal_semaphore_infos), unsafe_convert(Ptr{VkSemaphoreSubmitInfoKHR}, signal_semaphore_infos))
    _SubmitInfo2KHR(vks, deps)
end

function _PhysicalDeviceSynchronization2FeaturesKHR(synchronization2::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSynchronization2FeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), synchronization2)
    _PhysicalDeviceSynchronization2FeaturesKHR(vks, deps)
end

function _VideoQueueFamilyProperties2KHR(video_codec_operations::VideoCodecOperationFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoQueueFamilyProperties2KHR(VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR, unsafe_convert(Ptr{Cvoid}, next), video_codec_operations)
    _VideoQueueFamilyProperties2KHR(vks, deps)
end

function _VideoProfilesKHR(profile_count::Integer, profiles::_VideoProfileKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    profiles = cconvert(Ptr{VkVideoProfileKHR}, profiles)
    deps = [next, profiles]
    vks = VkVideoProfilesKHR(VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR, unsafe_convert(Ptr{Cvoid}, next), profile_count, unsafe_convert(Ptr{VkVideoProfileKHR}, profiles))
    _VideoProfilesKHR(vks, deps)
end

function _VideoProfileKHR(video_codec_operation::VideoCodecOperationFlagKHR, chroma_subsampling::VideoChromaSubsamplingFlagKHR, luma_bit_depth::VideoComponentBitDepthFlagKHR, chroma_bit_depth::VideoComponentBitDepthFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoProfileKHR(VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR, unsafe_convert(Ptr{Cvoid}, next), VkVideoCodecOperationFlagBitsKHR(video_codec_operation.val), chroma_subsampling, luma_bit_depth, chroma_bit_depth)
    _VideoProfileKHR(vks, deps)
end

function _VideoGetMemoryPropertiesKHR(memory_bind_index::Integer, memory_requirements::MemoryRequirements2; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    memory_requirements = cconvert(Ptr{VkMemoryRequirements2}, memory_requirements)
    deps = [next, memory_requirements]
    vks = VkVideoGetMemoryPropertiesKHR(VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR, unsafe_convert(Ptr{Cvoid}, next), memory_bind_index, unsafe_convert(Ptr{VkMemoryRequirements2}, memory_requirements))
    _VideoGetMemoryPropertiesKHR(vks, deps)
end

function _VideoBindMemoryKHR(memory_bind_index::Integer, memory::DeviceMemory, memory_offset::Integer, memory_size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoBindMemoryKHR(VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR, unsafe_convert(Ptr{Cvoid}, next), memory_bind_index, memory, memory_offset, memory_size)
    _VideoBindMemoryKHR(vks, deps, memory)
end

function _VideoPictureResourceKHR(coded_offset::_Offset2D, coded_extent::_Extent2D, base_array_layer::Integer, image_view_binding::ImageView; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoPictureResourceKHR(VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR, unsafe_convert(Ptr{Cvoid}, next), coded_offset.vks, coded_extent.vks, base_array_layer, image_view_binding)
    _VideoPictureResourceKHR(vks, deps, image_view_binding)
end

function _VideoReferenceSlotKHR(slot_index::Integer, picture_resource::_VideoPictureResourceKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    picture_resource = cconvert(Ptr{VkVideoPictureResourceKHR}, picture_resource)
    deps = [next, picture_resource]
    vks = VkVideoReferenceSlotKHR(VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR, unsafe_convert(Ptr{Cvoid}, next), slot_index, unsafe_convert(Ptr{VkVideoPictureResourceKHR}, picture_resource))
    _VideoReferenceSlotKHR(vks, deps)
end

function _VideoDecodeInfoKHR(coded_offset::_Offset2D, coded_extent::_Extent2D, src_buffer::Buffer, src_buffer_offset::Integer, src_buffer_range::Integer, dst_picture_resource::_VideoPictureResourceKHR, setup_reference_slot::_VideoReferenceSlotKHR, reference_slots::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    setup_reference_slot = cconvert(Ptr{VkVideoReferenceSlotKHR}, setup_reference_slot)
    reference_slots = cconvert(Ptr{VkVideoReferenceSlotKHR}, reference_slots)
    deps = [next, setup_reference_slot, reference_slots]
    vks = VkVideoDecodeInfoKHR(VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, coded_offset.vks, coded_extent.vks, src_buffer, src_buffer_offset, src_buffer_range, dst_picture_resource.vks, unsafe_convert(Ptr{VkVideoReferenceSlotKHR}, setup_reference_slot), pointer_length(reference_slots), unsafe_convert(Ptr{VkVideoReferenceSlotKHR}, reference_slots))
    _VideoDecodeInfoKHR(vks, deps, src_buffer)
end

function _VideoDecodeH264ProfileEXT(std_profile_idc::StdVideoH264ProfileIdc, field_layout::VideoDecodeH264FieldLayoutFlagEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoDecodeH264ProfileEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT, unsafe_convert(Ptr{Cvoid}, next), std_profile_idc, field_layout)
    _VideoDecodeH264ProfileEXT(vks, deps)
end

function _VideoDecodeH264SessionCreateInfoEXT(flags::Integer, std_extension_version::ExtensionProperties; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_extension_version = cconvert(Ptr{VkExtensionProperties}, std_extension_version)
    deps = [next, std_extension_version]
    vks = VkVideoDecodeH264SessionCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkExtensionProperties}, std_extension_version))
    _VideoDecodeH264SessionCreateInfoEXT(vks, deps)
end

function _VideoDecodeH264SessionParametersAddInfoEXT(; next = C_NULL, sps_std = C_NULL, pps_std = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sps_std = cconvert(Ptr{StdVideoH264SequenceParameterSet}, sps_std)
    pps_std = cconvert(Ptr{StdVideoH264PictureParameterSet}, pps_std)
    deps = [next, sps_std, pps_std]
    vks = VkVideoDecodeH264SessionParametersAddInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(sps_std), unsafe_convert(Ptr{StdVideoH264SequenceParameterSet}, sps_std), pointer_length(pps_std), unsafe_convert(Ptr{StdVideoH264PictureParameterSet}, pps_std))
    _VideoDecodeH264SessionParametersAddInfoEXT(vks, deps)
end

function _VideoDecodeH264SessionParametersCreateInfoEXT(max_sps_std_count::Integer, max_pps_std_count::Integer; next = C_NULL, parameters_add_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    parameters_add_info = cconvert(Ptr{VkVideoDecodeH264SessionParametersAddInfoEXT}, parameters_add_info)
    deps = [next, parameters_add_info]
    vks = VkVideoDecodeH264SessionParametersCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), max_sps_std_count, max_pps_std_count, unsafe_convert(Ptr{VkVideoDecodeH264SessionParametersAddInfoEXT}, parameters_add_info))
    _VideoDecodeH264SessionParametersCreateInfoEXT(vks, deps)
end

function _VideoDecodeH264PictureInfoEXT(std_picture_info::StdVideoDecodeH264PictureInfo, slices_data_offsets::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_picture_info = cconvert(Ptr{StdVideoDecodeH264PictureInfo}, std_picture_info)
    slices_data_offsets = cconvert(Ptr{UInt32}, slices_data_offsets)
    deps = [next, std_picture_info, slices_data_offsets]
    vks = VkVideoDecodeH264PictureInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoDecodeH264PictureInfo}, std_picture_info), pointer_length(slices_data_offsets), unsafe_convert(Ptr{UInt32}, slices_data_offsets))
    _VideoDecodeH264PictureInfoEXT(vks, deps)
end

function _VideoDecodeH264DpbSlotInfoEXT(std_reference_info::StdVideoDecodeH264ReferenceInfo; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_reference_info = cconvert(Ptr{StdVideoDecodeH264ReferenceInfo}, std_reference_info)
    deps = [next, std_reference_info]
    vks = VkVideoDecodeH264DpbSlotInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoDecodeH264ReferenceInfo}, std_reference_info))
    _VideoDecodeH264DpbSlotInfoEXT(vks, deps)
end

function _VideoDecodeH264MvcEXT(std_mvc::StdVideoDecodeH264Mvc; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_mvc = cconvert(Ptr{StdVideoDecodeH264Mvc}, std_mvc)
    deps = [next, std_mvc]
    vks = VkVideoDecodeH264MvcEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoDecodeH264Mvc}, std_mvc))
    _VideoDecodeH264MvcEXT(vks, deps)
end

function _VideoDecodeH265ProfileEXT(std_profile_idc::StdVideoH265ProfileIdc; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoDecodeH265ProfileEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT, unsafe_convert(Ptr{Cvoid}, next), std_profile_idc)
    _VideoDecodeH265ProfileEXT(vks, deps)
end

function _VideoDecodeH265SessionCreateInfoEXT(flags::Integer, std_extension_version::ExtensionProperties; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_extension_version = cconvert(Ptr{VkExtensionProperties}, std_extension_version)
    deps = [next, std_extension_version]
    vks = VkVideoDecodeH265SessionCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkExtensionProperties}, std_extension_version))
    _VideoDecodeH265SessionCreateInfoEXT(vks, deps)
end

function _VideoDecodeH265SessionParametersAddInfoEXT(; next = C_NULL, sps_std = C_NULL, pps_std = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sps_std = cconvert(Ptr{StdVideoH265SequenceParameterSet}, sps_std)
    pps_std = cconvert(Ptr{StdVideoH265PictureParameterSet}, pps_std)
    deps = [next, sps_std, pps_std]
    vks = VkVideoDecodeH265SessionParametersAddInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(sps_std), unsafe_convert(Ptr{StdVideoH265SequenceParameterSet}, sps_std), pointer_length(pps_std), unsafe_convert(Ptr{StdVideoH265PictureParameterSet}, pps_std))
    _VideoDecodeH265SessionParametersAddInfoEXT(vks, deps)
end

function _VideoDecodeH265SessionParametersCreateInfoEXT(max_sps_std_count::Integer, max_pps_std_count::Integer; next = C_NULL, parameters_add_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    parameters_add_info = cconvert(Ptr{VkVideoDecodeH265SessionParametersAddInfoEXT}, parameters_add_info)
    deps = [next, parameters_add_info]
    vks = VkVideoDecodeH265SessionParametersCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), max_sps_std_count, max_pps_std_count, unsafe_convert(Ptr{VkVideoDecodeH265SessionParametersAddInfoEXT}, parameters_add_info))
    _VideoDecodeH265SessionParametersCreateInfoEXT(vks, deps)
end

function _VideoDecodeH265PictureInfoEXT(std_picture_info::StdVideoDecodeH265PictureInfo, slices_data_offsets::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_picture_info = cconvert(Ptr{StdVideoDecodeH265PictureInfo}, std_picture_info)
    slices_data_offsets = cconvert(Ptr{UInt32}, slices_data_offsets)
    deps = [next, std_picture_info, slices_data_offsets]
    vks = VkVideoDecodeH265PictureInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoDecodeH265PictureInfo}, std_picture_info), pointer_length(slices_data_offsets), unsafe_convert(Ptr{UInt32}, slices_data_offsets))
    _VideoDecodeH265PictureInfoEXT(vks, deps)
end

function _VideoDecodeH265DpbSlotInfoEXT(std_reference_info::StdVideoDecodeH265ReferenceInfo; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_reference_info = cconvert(Ptr{StdVideoDecodeH265ReferenceInfo}, std_reference_info)
    deps = [next, std_reference_info]
    vks = VkVideoDecodeH265DpbSlotInfoEXT(VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoDecodeH265ReferenceInfo}, std_reference_info))
    _VideoDecodeH265DpbSlotInfoEXT(vks, deps)
end

function _VideoSessionCreateInfoKHR(queue_family_index::Integer, video_profile::_VideoProfileKHR, picture_format::Format, max_coded_extent::_Extent2D, reference_pictures_format::Format, max_reference_pictures_slots_count::Integer, max_reference_pictures_active_count::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    video_profile = cconvert(Ptr{VkVideoProfileKHR}, video_profile)
    deps = [next, video_profile]
    vks = VkVideoSessionCreateInfoKHR(VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), queue_family_index, flags, unsafe_convert(Ptr{VkVideoProfileKHR}, video_profile), picture_format, max_coded_extent.vks, reference_pictures_format, max_reference_pictures_slots_count, max_reference_pictures_active_count)
    _VideoSessionCreateInfoKHR(vks, deps)
end

function _VideoSessionParametersCreateInfoKHR(video_session_parameters_template::VideoSessionParametersKHR, video_session::VideoSessionKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoSessionParametersCreateInfoKHR(VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), video_session_parameters_template, video_session)
    _VideoSessionParametersCreateInfoKHR(vks, deps, video_session_parameters_template, video_session)
end

function _VideoSessionParametersUpdateInfoKHR(update_sequence_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoSessionParametersUpdateInfoKHR(VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), update_sequence_count)
    _VideoSessionParametersUpdateInfoKHR(vks, deps)
end

function _VideoBeginCodingInfoKHR(codec_quality_preset::VideoCodingQualityPresetFlagKHR, video_session::VideoSessionKHR, reference_slots::AbstractArray; next = C_NULL, flags = 0, video_session_parameters = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    reference_slots = cconvert(Ptr{VkVideoReferenceSlotKHR}, reference_slots)
    deps = [next, reference_slots]
    vks = VkVideoBeginCodingInfoKHR(VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, codec_quality_preset, video_session, video_session_parameters, pointer_length(reference_slots), unsafe_convert(Ptr{VkVideoReferenceSlotKHR}, reference_slots))
    _VideoBeginCodingInfoKHR(vks, deps, video_session, video_session_parameters)
end

function _VideoEndCodingInfoKHR(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoEndCodingInfoKHR(VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags)
    _VideoEndCodingInfoKHR(vks, deps)
end

function _VideoCodingControlInfoKHR(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoCodingControlInfoKHR(VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags)
    _VideoCodingControlInfoKHR(vks, deps)
end

function _VideoEncodeInfoKHR(quality_level::Integer, coded_extent::_Extent2D, dst_bitstream_buffer::Buffer, dst_bitstream_buffer_offset::Integer, dst_bitstream_buffer_max_range::Integer, src_picture_resource::_VideoPictureResourceKHR, setup_reference_slot::_VideoReferenceSlotKHR, reference_slots::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    setup_reference_slot = cconvert(Ptr{VkVideoReferenceSlotKHR}, setup_reference_slot)
    reference_slots = cconvert(Ptr{VkVideoReferenceSlotKHR}, reference_slots)
    deps = [next, setup_reference_slot, reference_slots]
    vks = VkVideoEncodeInfoKHR(VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, quality_level, coded_extent.vks, dst_bitstream_buffer, dst_bitstream_buffer_offset, dst_bitstream_buffer_max_range, src_picture_resource.vks, unsafe_convert(Ptr{VkVideoReferenceSlotKHR}, setup_reference_slot), pointer_length(reference_slots), unsafe_convert(Ptr{VkVideoReferenceSlotKHR}, reference_slots))
    _VideoEncodeInfoKHR(vks, deps, dst_bitstream_buffer)
end

function _VideoEncodeRateControlInfoKHR(flags::VideoEncodeRateControlFlagKHR, rate_control_mode::VideoEncodeRateControlModeFlagKHR, average_bitrate::Integer, peak_to_average_bitrate_ratio::Integer, frame_rate_numerator::Integer, frame_rate_denominator::Integer, virtual_buffer_size_in_ms::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoEncodeRateControlInfoKHR(VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, VkVideoEncodeRateControlModeFlagBitsKHR(rate_control_mode.val), average_bitrate, peak_to_average_bitrate_ratio, frame_rate_numerator, frame_rate_denominator, virtual_buffer_size_in_ms)
    _VideoEncodeRateControlInfoKHR(vks, deps)
end

function _VideoEncodeH264CapabilitiesEXT(flags::VideoEncodeH264CapabilitiesFlagEXT, input_mode_flags::VideoEncodeH264InputModeFlagEXT, output_mode_flags::VideoEncodeH264OutputModeFlagEXT, min_picture_size_in_mbs::_Extent2D, max_picture_size_in_mbs::_Extent2D, input_image_data_alignment::_Extent2D, max_num_l_0_reference_for_p::Integer, max_num_l_0_reference_for_b::Integer, max_num_l_1_reference::Integer, quality_level_count::Integer, std_extension_version::ExtensionProperties; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoEncodeH264CapabilitiesEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, input_mode_flags, output_mode_flags, min_picture_size_in_mbs.vks, max_picture_size_in_mbs.vks, input_image_data_alignment.vks, max_num_l_0_reference_for_p, max_num_l_0_reference_for_b, max_num_l_1_reference, quality_level_count, std_extension_version.vks)
    _VideoEncodeH264CapabilitiesEXT(vks, deps)
end

function _VideoEncodeH264SessionCreateInfoEXT(flags::VideoEncodeH264CreateFlagEXT, max_picture_size_in_mbs::_Extent2D, std_extension_version::ExtensionProperties; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_extension_version = cconvert(Ptr{VkExtensionProperties}, std_extension_version)
    deps = [next, std_extension_version]
    vks = VkVideoEncodeH264SessionCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, max_picture_size_in_mbs.vks, unsafe_convert(Ptr{VkExtensionProperties}, std_extension_version))
    _VideoEncodeH264SessionCreateInfoEXT(vks, deps)
end

function _VideoEncodeH264SessionParametersAddInfoEXT(; next = C_NULL, sps_std = C_NULL, pps_std = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sps_std = cconvert(Ptr{StdVideoH264SequenceParameterSet}, sps_std)
    pps_std = cconvert(Ptr{StdVideoH264PictureParameterSet}, pps_std)
    deps = [next, sps_std, pps_std]
    vks = VkVideoEncodeH264SessionParametersAddInfoEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(sps_std), unsafe_convert(Ptr{StdVideoH264SequenceParameterSet}, sps_std), pointer_length(pps_std), unsafe_convert(Ptr{StdVideoH264PictureParameterSet}, pps_std))
    _VideoEncodeH264SessionParametersAddInfoEXT(vks, deps)
end

function _VideoEncodeH264SessionParametersCreateInfoEXT(max_sps_std_count::Integer, max_pps_std_count::Integer; next = C_NULL, parameters_add_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    parameters_add_info = cconvert(Ptr{VkVideoEncodeH264SessionParametersAddInfoEXT}, parameters_add_info)
    deps = [next, parameters_add_info]
    vks = VkVideoEncodeH264SessionParametersCreateInfoEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), max_sps_std_count, max_pps_std_count, unsafe_convert(Ptr{VkVideoEncodeH264SessionParametersAddInfoEXT}, parameters_add_info))
    _VideoEncodeH264SessionParametersCreateInfoEXT(vks, deps)
end

function _VideoEncodeH264DpbSlotInfoEXT(slot_index::Integer, std_picture_info::StdVideoEncodeH264PictureInfo; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    std_picture_info = cconvert(Ptr{StdVideoEncodeH264PictureInfo}, std_picture_info)
    deps = [next, std_picture_info]
    vks = VkVideoEncodeH264DpbSlotInfoEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), slot_index, unsafe_convert(Ptr{StdVideoEncodeH264PictureInfo}, std_picture_info))
    _VideoEncodeH264DpbSlotInfoEXT(vks, deps)
end

function _VideoEncodeH264VclFrameInfoEXT(ref_default_final_list_0_entries::AbstractArray, ref_default_final_list_1_entries::AbstractArray, nalu_slice_entries::AbstractArray, current_picture_info::_VideoEncodeH264DpbSlotInfoEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    ref_default_final_list_0_entries = cconvert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_default_final_list_0_entries)
    ref_default_final_list_1_entries = cconvert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_default_final_list_1_entries)
    nalu_slice_entries = cconvert(Ptr{VkVideoEncodeH264NaluSliceEXT}, nalu_slice_entries)
    current_picture_info = cconvert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, current_picture_info)
    deps = [next, ref_default_final_list_0_entries, ref_default_final_list_1_entries, nalu_slice_entries, current_picture_info]
    vks = VkVideoEncodeH264VclFrameInfoEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(ref_default_final_list_0_entries), unsafe_convert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_default_final_list_0_entries), pointer_length(ref_default_final_list_1_entries), unsafe_convert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_default_final_list_1_entries), pointer_length(nalu_slice_entries), unsafe_convert(Ptr{VkVideoEncodeH264NaluSliceEXT}, nalu_slice_entries), unsafe_convert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, current_picture_info))
    _VideoEncodeH264VclFrameInfoEXT(vks, deps)
end

function _VideoEncodeH264EmitPictureParametersEXT(sps_id::Integer, emit_sps_enable::Bool, pps_id_entries::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    pps_id_entries = cconvert(Ptr{UInt8}, pps_id_entries)
    deps = [next, pps_id_entries]
    vks = VkVideoEncodeH264EmitPictureParametersEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT, unsafe_convert(Ptr{Cvoid}, next), sps_id, emit_sps_enable, pointer_length(pps_id_entries), unsafe_convert(Ptr{UInt8}, pps_id_entries))
    _VideoEncodeH264EmitPictureParametersEXT(vks, deps)
end

function _VideoEncodeH264ProfileEXT(std_profile_idc::StdVideoH264ProfileIdc; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVideoEncodeH264ProfileEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT, unsafe_convert(Ptr{Cvoid}, next), std_profile_idc)
    _VideoEncodeH264ProfileEXT(vks, deps)
end

function _VideoEncodeH264NaluSliceEXT(slice_header_std::StdVideoEncodeH264SliceHeader, mb_count::Integer, ref_final_list_0_entries::AbstractArray, ref_final_list_1_entries::AbstractArray, preceding_nalu_bytes::Integer, min_qp::Integer, max_qp::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    slice_header_std = cconvert(Ptr{StdVideoEncodeH264SliceHeader}, slice_header_std)
    ref_final_list_0_entries = cconvert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_final_list_0_entries)
    ref_final_list_1_entries = cconvert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_final_list_1_entries)
    deps = [next, slice_header_std, ref_final_list_0_entries, ref_final_list_1_entries]
    vks = VkVideoEncodeH264NaluSliceEXT(VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{StdVideoEncodeH264SliceHeader}, slice_header_std), mb_count, pointer_length(ref_final_list_0_entries), unsafe_convert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_final_list_0_entries), pointer_length(ref_final_list_1_entries), unsafe_convert(Ptr{VkVideoEncodeH264DpbSlotInfoEXT}, ref_final_list_1_entries), preceding_nalu_bytes, min_qp, max_qp)
    _VideoEncodeH264NaluSliceEXT(vks, deps)
end

function _PhysicalDeviceInheritedViewportScissorFeaturesNV(inherited_viewport_scissor_2_d::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceInheritedViewportScissorFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), inherited_viewport_scissor_2_d)
    _PhysicalDeviceInheritedViewportScissorFeaturesNV(vks, deps)
end

function _CommandBufferInheritanceViewportScissorInfoNV(viewport_scissor_2_d::Bool, viewport_depth_count::Integer, viewport_depths::_Viewport; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_depths = cconvert(Ptr{VkViewport}, viewport_depths)
    deps = [next, viewport_depths]
    vks = VkCommandBufferInheritanceViewportScissorInfoNV(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), viewport_scissor_2_d, viewport_depth_count, unsafe_convert(Ptr{VkViewport}, viewport_depths))
    _CommandBufferInheritanceViewportScissorInfoNV(vks, deps)
end

function _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(ycbcr_444_formats::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), ycbcr_444_formats)
    _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(vks, deps)
end

function _PhysicalDeviceProvokingVertexFeaturesEXT(provoking_vertex_last::Bool, transform_feedback_preserves_provoking_vertex::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceProvokingVertexFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), provoking_vertex_last, transform_feedback_preserves_provoking_vertex)
    _PhysicalDeviceProvokingVertexFeaturesEXT(vks, deps)
end

function _PipelineRasterizationProvokingVertexStateCreateInfoEXT(provoking_vertex_mode::ProvokingVertexModeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), provoking_vertex_mode)
    _PipelineRasterizationProvokingVertexStateCreateInfoEXT(vks, deps)
end


Instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = unwrap(create_instance(enabled_layer_names, enabled_extension_names; allocator, next, flags, application_info))

Device(physical_device::PhysicalDevice, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = unwrap(create_device(physical_device, queue_create_infos, enabled_layer_names, enabled_extension_names; allocator, next, flags, enabled_features))

DeviceMemory(device::Device, allocation_size::Integer, memory_type_index::Integer; allocator = C_NULL, next = C_NULL) = unwrap(allocate_memory(device, allocation_size, memory_type_index; allocator, next))

CommandPool(device::Device, queue_family_index::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_command_pool(device, queue_family_index; allocator, next, flags))

Buffer(device::Device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer(device, size, usage, sharing_mode, queue_family_indices; allocator, next, flags))

BufferView(device::Device, buffer::Buffer, format::Format, offset::Integer, range::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer_view(device, buffer, format, offset, range; allocator, next, flags))

Image(device::Device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image(device, image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; allocator, next, flags))

ImageView(device::Device, image::Image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image_view(device, image, view_type, format, components, subresource_range; allocator, next, flags))

ShaderModule(device::Device, code_size::Integer, code::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_shader_module(device, code_size, code; allocator, next, flags))

PipelineLayout(device::Device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_pipeline_layout(device, set_layouts, push_constant_ranges; allocator, next, flags))

Sampler(device::Device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_sampler(device, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; allocator, next, flags))

DescriptorSetLayout(device::Device, bindings::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_set_layout(device, bindings; allocator, next, flags))

DescriptorPool(device::Device, max_sets::Integer, pool_sizes::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_pool(device, max_sets, pool_sizes; allocator, next, flags))

Fence(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_fence(device; allocator, next, flags))

Semaphore(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_semaphore(device; allocator, next, flags))

Event(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_event(device; allocator, next, flags))

QueryPool(device::Device, query_type::QueryType, query_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = unwrap(create_query_pool(device, query_type, query_count; allocator, next, flags, pipeline_statistics))

Framebuffer(device::Device, render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_framebuffer(device, render_pass, attachments, width, height, layers; allocator, next, flags))

RenderPass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass(device, attachments, subpasses, dependencies; allocator, next, flags))

RenderPass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass_2(device, attachments, subpasses, dependencies, correlated_view_masks; allocator, next, flags))

PipelineCache(device::Device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_pipeline_cache(device, initial_data; allocator, next, flags, initial_data_size))

IndirectCommandsLayoutNV(device::Device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_indirect_commands_layout_nv(device, pipeline_bind_point, tokens, stream_strides; allocator, next, flags))

DescriptorUpdateTemplate(device::Device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_update_template(device, descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; allocator, next, flags))

SamplerYcbcrConversion(device::Device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = unwrap(create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; allocator, next))

ValidationCacheEXT(device::Device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_validation_cache_ext(device, initial_data; allocator, next, flags, initial_data_size))

AccelerationStructureKHR(device::Device, buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = unwrap(create_acceleration_structure_khr(device, buffer, offset, size, type; allocator, next, create_flags, device_address))

AccelerationStructureNV(device::Device, compacted_size::Integer, info::_AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = unwrap(create_acceleration_structure_nv(device, compacted_size, info; allocator, next))

DeferredOperationKHR(device::Device; allocator = C_NULL) = create_deferred_operation_khr(device; allocator)

PrivateDataSlotEXT(device::Device, flags::PrivateDataSlotCreateFlagEXT; allocator = C_NULL, next = C_NULL) = unwrap(create_private_data_slot_ext(device, flags; allocator, next))

DisplayModeKHR(physical_device::PhysicalDevice, display::DisplayKHR, parameters::_DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_display_mode_khr(physical_device, display, parameters; allocator, next, flags))

SwapchainKHR(device::Device, surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = unwrap(create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; allocator, next, flags, old_swapchain))

DebugReportCallbackEXT(instance::Instance, pfn_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_report_callback_ext(instance, pfn_callback; allocator, next, flags, user_data))

DebugUtilsMessengerEXT(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_utils_messenger_ext(instance, message_severity, message_type, pfn_user_callback; allocator, next, flags, user_data))

VideoSessionKHR(device::Device, queue_family_index::Integer, video_profile::_VideoProfileKHR, picture_format::Format, max_coded_extent::_Extent2D, reference_pictures_format::Format, max_reference_pictures_slots_count::Integer, max_reference_pictures_active_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_video_session_khr(device, queue_family_index, video_profile, picture_format, max_coded_extent, reference_pictures_format, max_reference_pictures_slots_count, max_reference_pictures_active_count; allocator, next, flags))

VideoSessionParametersKHR(device::Device, video_session_parameters_template::VideoSessionParametersKHR, video_session::VideoSessionKHR; allocator = C_NULL, next = C_NULL) = unwrap(create_video_session_parameters_khr(device, video_session_parameters_template, video_session; allocator, next))

Instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = unwrap(create_instance(enabled_layer_names, enabled_extension_names, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, application_info))

Device(physical_device::PhysicalDevice, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = unwrap(create_device(physical_device, queue_create_infos, enabled_layer_names, enabled_extension_names, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, enabled_features))

DeviceMemory(device::Device, allocation_size::Integer, memory_type_index::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(allocate_memory(device, allocation_size, memory_type_index, fun_ptr_create, fun_ptr_destroy; allocator, next))

CommandPool(device::Device, queue_family_index::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_command_pool(device, queue_family_index, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Buffer(device::Device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer(device, size, usage, sharing_mode, queue_family_indices, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

BufferView(device::Device, buffer::Buffer, format::Format, offset::Integer, range::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer_view(device, buffer, format, offset, range, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Image(device::Device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image(device, image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

ImageView(device::Device, image::Image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image_view(device, image, view_type, format, components, subresource_range, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

ShaderModule(device::Device, code_size::Integer, code::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_shader_module(device, code_size, code, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

PipelineLayout(device::Device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_pipeline_layout(device, set_layouts, push_constant_ranges, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Sampler(device::Device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_sampler(device, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

DescriptorSetLayout(device::Device, bindings::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_set_layout(device, bindings, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

DescriptorPool(device::Device, max_sets::Integer, pool_sizes::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_pool(device, max_sets, pool_sizes, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Fence(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_fence(device, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Semaphore(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_semaphore(device, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

Event(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_event(device, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

QueryPool(device::Device, query_type::QueryType, query_count::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = unwrap(create_query_pool(device, query_type, query_count, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, pipeline_statistics))

Framebuffer(device::Device, render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_framebuffer(device, render_pass, attachments, width, height, layers, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

RenderPass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass(device, attachments, subpasses, dependencies, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

RenderPass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass_2(device, attachments, subpasses, dependencies, correlated_view_masks, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

PipelineCache(device::Device, initial_data::Ptr{Cvoid}, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_pipeline_cache(device, initial_data, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, initial_data_size))

IndirectCommandsLayoutNV(device::Device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_indirect_commands_layout_nv(device, pipeline_bind_point, tokens, stream_strides, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

DescriptorUpdateTemplate(device::Device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_update_template(device, descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

SamplerYcbcrConversion(device::Device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction, fun_ptr_create, fun_ptr_destroy; allocator, next))

ValidationCacheEXT(device::Device, initial_data::Ptr{Cvoid}, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_validation_cache_ext(device, initial_data, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, initial_data_size))

AccelerationStructureKHR(device::Device, buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = unwrap(create_acceleration_structure_khr(device, buffer, offset, size, type, fun_ptr_create, fun_ptr_destroy; allocator, next, create_flags, device_address))

AccelerationStructureNV(device::Device, compacted_size::Integer, info::_AccelerationStructureInfoNV, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_acceleration_structure_nv(device, compacted_size, info, fun_ptr_create, fun_ptr_destroy; allocator, next))

DeferredOperationKHR(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL) = create_deferred_operation_khr(device, fun_ptr_create, fun_ptr_destroy; allocator)

PrivateDataSlotEXT(device::Device, flags::PrivateDataSlotCreateFlagEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_private_data_slot_ext(device, flags, fun_ptr_create, fun_ptr_destroy; allocator, next))

DisplayModeKHR(physical_device::PhysicalDevice, display::DisplayKHR, parameters::_DisplayModeParametersKHR, fun_ptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_display_mode_khr(physical_device, display, parameters, fun_ptr_create; allocator, next, flags))

SwapchainKHR(device::Device, surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = unwrap(create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, old_swapchain))

DebugReportCallbackEXT(instance::Instance, pfn_callback::FunctionPtr, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_report_callback_ext(instance, pfn_callback, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, user_data))

DebugUtilsMessengerEXT(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_utils_messenger_ext(instance, message_severity, message_type, pfn_user_callback, fun_ptr_create, fun_ptr_destroy; allocator, next, flags, user_data))

VideoSessionKHR(device::Device, queue_family_index::Integer, video_profile::_VideoProfileKHR, picture_format::Format, max_coded_extent::_Extent2D, reference_pictures_format::Format, max_reference_pictures_slots_count::Integer, max_reference_pictures_active_count::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_video_session_khr(device, queue_family_index, video_profile, picture_format, max_coded_extent, reference_pictures_format, max_reference_pictures_slots_count, max_reference_pictures_active_count, fun_ptr_create, fun_ptr_destroy; allocator, next, flags))

VideoSessionParametersKHR(device::Device, video_session_parameters_template::VideoSessionParametersKHR, video_session::VideoSessionKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_video_session_parameters_khr(device, video_session_parameters_template, video_session, fun_ptr_create, fun_ptr_destroy; allocator, next))


create_instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = create_instance(_InstanceCreateInfo(enabled_layer_names, enabled_extension_names; next, flags, application_info); allocator)

create_device(physical_device::PhysicalDevice, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, _DeviceCreateInfo(queue_create_infos, enabled_layer_names, enabled_extension_names; next, flags, enabled_features); allocator)

allocate_memory(device::Device, allocation_size::Integer, memory_type_index::Integer; allocator = C_NULL, next = C_NULL) = allocate_memory(device, _MemoryAllocateInfo(allocation_size, memory_type_index; next); allocator)

create_command_pool(device::Device, queue_family_index::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_command_pool(device, _CommandPoolCreateInfo(queue_family_index; next, flags); allocator)

create_buffer(device::Device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer(device, _BufferCreateInfo(size, usage, sharing_mode, queue_family_indices; next, flags); allocator)

create_buffer_view(device::Device, buffer::Buffer, format::Format, offset::Integer, range::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer_view(device, _BufferViewCreateInfo(buffer, format, offset, range; next, flags); allocator)

create_image(device::Device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, _ImageCreateInfo(image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; next, flags); allocator)

create_image_view(device::Device, image::Image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, _ImageViewCreateInfo(image, view_type, format, components, subresource_range; next, flags); allocator)

create_shader_module(device::Device, code_size::Integer, code::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_shader_module(device, _ShaderModuleCreateInfo(code_size, code; next, flags); allocator)

create_pipeline_layout(device::Device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, _PipelineLayoutCreateInfo(set_layouts, push_constant_ranges; next, flags); allocator)

create_sampler(device::Device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; allocator = C_NULL, next = C_NULL, flags = 0) = create_sampler(device, _SamplerCreateInfo(mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; next, flags); allocator)

create_descriptor_set_layout(device::Device, bindings::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, _DescriptorSetLayoutCreateInfo(bindings; next, flags); allocator)

create_descriptor_pool(device::Device, max_sets::Integer, pool_sizes::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, _DescriptorPoolCreateInfo(max_sets, pool_sizes; next, flags); allocator)

create_fence(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = create_fence(device, _FenceCreateInfo(; next, flags); allocator)

create_semaphore(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = create_semaphore(device, _SemaphoreCreateInfo(; next, flags); allocator)

create_event(device::Device; allocator = C_NULL, next = C_NULL, flags = 0) = create_event(device, _EventCreateInfo(; next, flags); allocator)

create_query_pool(device::Device, query_type::QueryType, query_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = create_query_pool(device, _QueryPoolCreateInfo(query_type, query_count; next, flags, pipeline_statistics); allocator)

create_framebuffer(device::Device, render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_framebuffer(device, _FramebufferCreateInfo(render_pass, attachments, width, height, layers; next, flags); allocator)

create_render_pass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, _RenderPassCreateInfo(attachments, subpasses, dependencies; next, flags); allocator)

create_render_pass_2(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, _RenderPassCreateInfo2(attachments, subpasses, dependencies, correlated_view_masks; next, flags); allocator)

create_pipeline_cache(device::Device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_pipeline_cache(device, _PipelineCacheCreateInfo(initial_data; next, flags, initial_data_size); allocator)

create_indirect_commands_layout_nv(device::Device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point, tokens, stream_strides; next, flags); allocator)

create_descriptor_update_template(device::Device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; next, flags); allocator)

create_sampler_ycbcr_conversion(device::Device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, _SamplerYcbcrConversionCreateInfo(format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; next); allocator)

create_validation_cache_ext(device::Device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_validation_cache_ext(device, _ValidationCacheCreateInfoEXT(initial_data; next, flags, initial_data_size); allocator)

create_acceleration_structure_khr(device::Device, buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = create_acceleration_structure_khr(device, _AccelerationStructureCreateInfoKHR(buffer, offset, size, type; next, create_flags, device_address); allocator)

create_acceleration_structure_nv(device::Device, compacted_size::Integer, info::_AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, _AccelerationStructureCreateInfoNV(compacted_size, info; next); allocator)

create_private_data_slot_ext(device::Device, flags::PrivateDataSlotCreateFlagEXT; allocator = C_NULL, next = C_NULL) = create_private_data_slot_ext(device, _PrivateDataSlotCreateInfoEXT(flags; next); allocator)

create_display_mode_khr(physical_device::PhysicalDevice, display::DisplayKHR, parameters::_DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, _DisplayModeCreateInfoKHR(parameters; next, flags); allocator)

create_swapchain_khr(device::Device, surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, _SwapchainCreateInfoKHR(surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; next, flags, old_swapchain); allocator)

create_debug_report_callback_ext(instance::Instance, pfn_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_report_callback_ext(instance, _DebugReportCallbackCreateInfoEXT(pfn_callback; next, flags, user_data); allocator)

create_debug_utils_messenger_ext(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_utils_messenger_ext(instance, _DebugUtilsMessengerCreateInfoEXT(message_severity, message_type, pfn_user_callback; next, flags, user_data); allocator)

create_video_session_khr(device::Device, queue_family_index::Integer, video_profile::_VideoProfileKHR, picture_format::Format, max_coded_extent::_Extent2D, reference_pictures_format::Format, max_reference_pictures_slots_count::Integer, max_reference_pictures_active_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_video_session_khr(device, _VideoSessionCreateInfoKHR(queue_family_index, video_profile, picture_format, max_coded_extent, reference_pictures_format, max_reference_pictures_slots_count, max_reference_pictures_active_count; next, flags); allocator)

create_video_session_parameters_khr(device::Device, video_session_parameters_template::VideoSessionParametersKHR, video_session::VideoSessionKHR; allocator = C_NULL, next = C_NULL) = create_video_session_parameters_khr(device, _VideoSessionParametersCreateInfoKHR(video_session_parameters_template, video_session; next); allocator)

create_instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = create_instance(_InstanceCreateInfo(enabled_layer_names, enabled_extension_names; next, flags, application_info), fun_ptr_create, fun_ptr_destroy; allocator)

create_device(physical_device::PhysicalDevice, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, _DeviceCreateInfo(queue_create_infos, enabled_layer_names, enabled_extension_names; next, flags, enabled_features), fun_ptr_create, fun_ptr_destroy; allocator)

allocate_memory(device::Device, allocation_size::Integer, memory_type_index::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = allocate_memory(device, _MemoryAllocateInfo(allocation_size, memory_type_index; next), fun_ptr_create, fun_ptr_destroy; allocator)

create_command_pool(device::Device, queue_family_index::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_command_pool(device, _CommandPoolCreateInfo(queue_family_index; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_buffer(device::Device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer(device, _BufferCreateInfo(size, usage, sharing_mode, queue_family_indices; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_buffer_view(device::Device, buffer::Buffer, format::Format, offset::Integer, range::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer_view(device, _BufferViewCreateInfo(buffer, format, offset, range; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_image(device::Device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, _ImageCreateInfo(image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_image_view(device::Device, image::Image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, _ImageViewCreateInfo(image, view_type, format, components, subresource_range; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_shader_module(device::Device, code_size::Integer, code::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_shader_module(device, _ShaderModuleCreateInfo(code_size, code; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_pipeline_layout(device::Device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, _PipelineLayoutCreateInfo(set_layouts, push_constant_ranges; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_sampler(device::Device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_sampler(device, _SamplerCreateInfo(mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_descriptor_set_layout(device::Device, bindings::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, _DescriptorSetLayoutCreateInfo(bindings; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_descriptor_pool(device::Device, max_sets::Integer, pool_sizes::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, _DescriptorPoolCreateInfo(max_sets, pool_sizes; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_fence(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_fence(device, _FenceCreateInfo(; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_semaphore(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_semaphore(device, _SemaphoreCreateInfo(; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_event(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_event(device, _EventCreateInfo(; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_query_pool(device::Device, query_type::QueryType, query_count::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = create_query_pool(device, _QueryPoolCreateInfo(query_type, query_count; next, flags, pipeline_statistics), fun_ptr_create, fun_ptr_destroy; allocator)

create_framebuffer(device::Device, render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_framebuffer(device, _FramebufferCreateInfo(render_pass, attachments, width, height, layers; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_render_pass(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, _RenderPassCreateInfo(attachments, subpasses, dependencies; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_render_pass_2(device::Device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, _RenderPassCreateInfo2(attachments, subpasses, dependencies, correlated_view_masks; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_pipeline_cache(device::Device, initial_data::Ptr{Cvoid}, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_pipeline_cache(device, _PipelineCacheCreateInfo(initial_data; next, flags, initial_data_size), fun_ptr_create, fun_ptr_destroy; allocator)

create_indirect_commands_layout_nv(device::Device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point, tokens, stream_strides; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_descriptor_update_template(device::Device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_sampler_ycbcr_conversion(device::Device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, _SamplerYcbcrConversionCreateInfo(format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; next), fun_ptr_create, fun_ptr_destroy; allocator)

create_validation_cache_ext(device::Device, initial_data::Ptr{Cvoid}, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_validation_cache_ext(device, _ValidationCacheCreateInfoEXT(initial_data; next, flags, initial_data_size), fun_ptr_create, fun_ptr_destroy; allocator)

create_acceleration_structure_khr(device::Device, buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = create_acceleration_structure_khr(device, _AccelerationStructureCreateInfoKHR(buffer, offset, size, type; next, create_flags, device_address), fun_ptr_create, fun_ptr_destroy; allocator)

create_acceleration_structure_nv(device::Device, compacted_size::Integer, info::_AccelerationStructureInfoNV, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, _AccelerationStructureCreateInfoNV(compacted_size, info; next), fun_ptr_create, fun_ptr_destroy; allocator)

create_private_data_slot_ext(device::Device, flags::PrivateDataSlotCreateFlagEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_private_data_slot_ext(device, _PrivateDataSlotCreateInfoEXT(flags; next), fun_ptr_create, fun_ptr_destroy; allocator)

create_display_mode_khr(physical_device::PhysicalDevice, display::DisplayKHR, parameters::_DisplayModeParametersKHR, fun_ptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, _DisplayModeCreateInfoKHR(parameters; next, flags), fun_ptr_create; allocator)

create_swapchain_khr(device::Device, surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, _SwapchainCreateInfoKHR(surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; next, flags, old_swapchain), fun_ptr_create, fun_ptr_destroy; allocator)

create_debug_report_callback_ext(instance::Instance, pfn_callback::FunctionPtr, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_report_callback_ext(instance, _DebugReportCallbackCreateInfoEXT(pfn_callback; next, flags, user_data), fun_ptr_create, fun_ptr_destroy; allocator)

create_debug_utils_messenger_ext(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_utils_messenger_ext(instance, _DebugUtilsMessengerCreateInfoEXT(message_severity, message_type, pfn_user_callback; next, flags, user_data), fun_ptr_create, fun_ptr_destroy; allocator)

create_video_session_khr(device::Device, queue_family_index::Integer, video_profile::_VideoProfileKHR, picture_format::Format, max_coded_extent::_Extent2D, reference_pictures_format::Format, max_reference_pictures_slots_count::Integer, max_reference_pictures_active_count::Integer, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_video_session_khr(device, _VideoSessionCreateInfoKHR(queue_family_index, video_profile, picture_format, max_coded_extent, reference_pictures_format, max_reference_pictures_slots_count, max_reference_pictures_active_count; next, flags), fun_ptr_create, fun_ptr_destroy; allocator)

create_video_session_parameters_khr(device::Device, video_session_parameters_template::VideoSessionParametersKHR, video_session::VideoSessionKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_video_session_parameters_khr(device, _VideoSessionParametersCreateInfoKHR(video_session_parameters_template, video_session; next), fun_ptr_create, fun_ptr_destroy; allocator)


from_vk(T::Type{PhysicalDeviceProperties}, x::VkPhysicalDeviceProperties) = T(from_vk(VersionNumber, x.apiVersion), from_vk(VersionNumber, x.driverVersion), x.vendorID, x.deviceID, x.deviceType, from_vk(String, x.deviceName), from_vk(String, x.pipelineCacheUUID), from_vk(PhysicalDeviceLimits, x.limits), from_vk(PhysicalDeviceSparseProperties, x.sparseProperties))

from_vk(T::Type{ExtensionProperties}, x::VkExtensionProperties) = T(from_vk(String, x.extensionName), from_vk(VersionNumber, x.specVersion))

from_vk(T::Type{LayerProperties}, x::VkLayerProperties) = T(from_vk(String, x.layerName), from_vk(VersionNumber, x.specVersion), from_vk(VersionNumber, x.implementationVersion), from_vk(String, x.description))

from_vk(T::Type{QueueFamilyProperties}, x::VkQueueFamilyProperties) = T(x.queueFlags, x.queueCount, x.timestampValidBits, from_vk(_Extent3D, x.minImageTransferGranularity))

from_vk(T::Type{PhysicalDeviceMemoryProperties}, x::VkPhysicalDeviceMemoryProperties) = T(x.memoryTypeCount, from_vk.(MemoryType, x.memoryTypes), x.memoryHeapCount, from_vk.(MemoryHeap, x.memoryHeaps))

from_vk(T::Type{MemoryRequirements}, x::VkMemoryRequirements) = T(x.size, x.alignment, x.memoryTypeBits)

from_vk(T::Type{SparseImageFormatProperties}, x::VkSparseImageFormatProperties) = T(x.aspectMask, from_vk(_Extent3D, x.imageGranularity), x.flags)

from_vk(T::Type{SparseImageMemoryRequirements}, x::VkSparseImageMemoryRequirements) = T(from_vk(SparseImageFormatProperties, x.formatProperties), x.imageMipTailFirstLod, x.imageMipTailSize, x.imageMipTailOffset, x.imageMipTailStride)

from_vk(T::Type{MemoryType}, x::VkMemoryType) = T(x.propertyFlags, x.heapIndex)

from_vk(T::Type{MemoryHeap}, x::VkMemoryHeap) = T(x.size, x.flags)

from_vk(T::Type{FormatProperties}, x::VkFormatProperties) = T(x.linearTilingFeatures, x.optimalTilingFeatures, x.bufferFeatures)

from_vk(T::Type{ImageFormatProperties}, x::VkImageFormatProperties) = T(from_vk(_Extent3D, x.maxExtent), x.maxMipLevels, x.maxArrayLayers, x.sampleCounts, x.maxResourceSize)

from_vk(T::Type{SubresourceLayout}, x::VkSubresourceLayout) = T(x.offset, x.size, x.rowPitch, x.arrayPitch, x.depthPitch)

from_vk(T::Type{PhysicalDeviceSparseProperties}, x::VkPhysicalDeviceSparseProperties) = T(from_vk(Bool, x.residencyStandard2DBlockShape), from_vk(Bool, x.residencyStandard2DMultisampleBlockShape), from_vk(Bool, x.residencyStandard3DBlockShape), from_vk(Bool, x.residencyAlignedMipSize), from_vk(Bool, x.residencyNonResidentStrict))

from_vk(T::Type{PhysicalDeviceLimits}, x::VkPhysicalDeviceLimits) = T(x.maxImageDimension1D, x.maxImageDimension2D, x.maxImageDimension3D, x.maxImageDimensionCube, x.maxImageArrayLayers, x.maxTexelBufferElements, x.maxUniformBufferRange, x.maxStorageBufferRange, x.maxPushConstantsSize, x.maxMemoryAllocationCount, x.maxSamplerAllocationCount, x.bufferImageGranularity, x.sparseAddressSpaceSize, x.maxBoundDescriptorSets, x.maxPerStageDescriptorSamplers, x.maxPerStageDescriptorUniformBuffers, x.maxPerStageDescriptorStorageBuffers, x.maxPerStageDescriptorSampledImages, x.maxPerStageDescriptorStorageImages, x.maxPerStageDescriptorInputAttachments, x.maxPerStageResources, x.maxDescriptorSetSamplers, x.maxDescriptorSetUniformBuffers, x.maxDescriptorSetUniformBuffersDynamic, x.maxDescriptorSetStorageBuffers, x.maxDescriptorSetStorageBuffersDynamic, x.maxDescriptorSetSampledImages, x.maxDescriptorSetStorageImages, x.maxDescriptorSetInputAttachments, x.maxVertexInputAttributes, x.maxVertexInputBindings, x.maxVertexInputAttributeOffset, x.maxVertexInputBindingStride, x.maxVertexOutputComponents, x.maxTessellationGenerationLevel, x.maxTessellationPatchSize, x.maxTessellationControlPerVertexInputComponents, x.maxTessellationControlPerVertexOutputComponents, x.maxTessellationControlPerPatchOutputComponents, x.maxTessellationControlTotalOutputComponents, x.maxTessellationEvaluationInputComponents, x.maxTessellationEvaluationOutputComponents, x.maxGeometryShaderInvocations, x.maxGeometryInputComponents, x.maxGeometryOutputComponents, x.maxGeometryOutputVertices, x.maxGeometryTotalOutputComponents, x.maxFragmentInputComponents, x.maxFragmentOutputAttachments, x.maxFragmentDualSrcAttachments, x.maxFragmentCombinedOutputResources, x.maxComputeSharedMemorySize, x.maxComputeWorkGroupCount, x.maxComputeWorkGroupInvocations, x.maxComputeWorkGroupSize, x.subPixelPrecisionBits, x.subTexelPrecisionBits, x.mipmapPrecisionBits, x.maxDrawIndexedIndexValue, x.maxDrawIndirectCount, x.maxSamplerLodBias, x.maxSamplerAnisotropy, x.maxViewports, x.maxViewportDimensions, x.viewportBoundsRange, x.viewportSubPixelBits, x.minMemoryMapAlignment, x.minTexelBufferOffsetAlignment, x.minUniformBufferOffsetAlignment, x.minStorageBufferOffsetAlignment, x.minTexelOffset, x.maxTexelOffset, x.minTexelGatherOffset, x.maxTexelGatherOffset, x.minInterpolationOffset, x.maxInterpolationOffset, x.subPixelInterpolationOffsetBits, x.maxFramebufferWidth, x.maxFramebufferHeight, x.maxFramebufferLayers, x.framebufferColorSampleCounts, x.framebufferDepthSampleCounts, x.framebufferStencilSampleCounts, x.framebufferNoAttachmentsSampleCounts, x.maxColorAttachments, x.sampledImageColorSampleCounts, x.sampledImageIntegerSampleCounts, x.sampledImageDepthSampleCounts, x.sampledImageStencilSampleCounts, x.storageImageSampleCounts, x.maxSampleMaskWords, from_vk(Bool, x.timestampComputeAndGraphics), x.timestampPeriod, x.maxClipDistances, x.maxCullDistances, x.maxCombinedClipAndCullDistances, x.discreteQueuePriorities, x.pointSizeRange, x.lineWidthRange, x.pointSizeGranularity, x.lineWidthGranularity, from_vk(Bool, x.strictLines), from_vk(Bool, x.standardSampleLocations), x.optimalBufferCopyOffsetAlignment, x.optimalBufferCopyRowPitchAlignment, x.nonCoherentAtomSize)

from_vk(T::Type{DisplayPropertiesKHR}, x::VkDisplayPropertiesKHR) = T(DisplayKHR(x.display), unsafe_string(x.displayName), from_vk(_Extent2D, x.physicalDimensions), from_vk(_Extent2D, x.physicalResolution), x.supportedTransforms, from_vk(Bool, x.planeReorderPossible), from_vk(Bool, x.persistentContent))

from_vk(T::Type{DisplayPlanePropertiesKHR}, x::VkDisplayPlanePropertiesKHR) = T(DisplayKHR(x.currentDisplay), x.currentStackIndex)

from_vk(T::Type{DisplayModePropertiesKHR}, x::VkDisplayModePropertiesKHR) = T(DisplayModeKHR(x.displayMode), from_vk(_DisplayModeParametersKHR, x.parameters))

from_vk(T::Type{DisplayPlaneCapabilitiesKHR}, x::VkDisplayPlaneCapabilitiesKHR) = T(x.supportedAlpha, from_vk(_Offset2D, x.minSrcPosition), from_vk(_Offset2D, x.maxSrcPosition), from_vk(_Extent2D, x.minSrcExtent), from_vk(_Extent2D, x.maxSrcExtent), from_vk(_Offset2D, x.minDstPosition), from_vk(_Offset2D, x.maxDstPosition), from_vk(_Extent2D, x.minDstExtent), from_vk(_Extent2D, x.maxDstExtent))

from_vk(T::Type{SurfaceCapabilitiesKHR}, x::VkSurfaceCapabilitiesKHR) = T(x.minImageCount, x.maxImageCount, from_vk(_Extent2D, x.currentExtent), from_vk(_Extent2D, x.minImageExtent), from_vk(_Extent2D, x.maxImageExtent), x.maxImageArrayLayers, x.supportedTransforms, SurfaceTransformFlagKHR(UInt32(x.currentTransform)), x.supportedCompositeAlpha, x.supportedUsageFlags)

from_vk(T::Type{SurfaceFormatKHR}, x::VkSurfaceFormatKHR) = T(x.format, x.colorSpace)

from_vk(T::Type{ExternalImageFormatPropertiesNV}, x::VkExternalImageFormatPropertiesNV) = T(from_vk(ImageFormatProperties, x.imageFormatProperties), x.externalMemoryFeatures, x.exportFromImportedHandleTypes, x.compatibleHandleTypes)

from_vk(T::Type{PhysicalDeviceDeviceGeneratedCommandsPropertiesNV}, x::VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV) = T(x.sType, x.pNext, x.maxGraphicsShaderGroupCount, x.maxIndirectSequenceCount, x.maxIndirectCommandsTokenCount, x.maxIndirectCommandsStreamCount, x.maxIndirectCommandsTokenOffset, x.maxIndirectCommandsStreamStride, x.minSequencesCountBufferOffsetAlignment, x.minSequencesIndexBufferOffsetAlignment, x.minIndirectCommandsBufferOffsetAlignment)

from_vk(T::Type{PhysicalDeviceProperties2}, x::VkPhysicalDeviceProperties2) = T(x.sType, x.pNext, from_vk(PhysicalDeviceProperties, x.properties))

from_vk(T::Type{FormatProperties2}, x::VkFormatProperties2) = T(x.sType, x.pNext, from_vk(FormatProperties, x.formatProperties))

from_vk(T::Type{ImageFormatProperties2}, x::VkImageFormatProperties2) = T(x.sType, x.pNext, from_vk(ImageFormatProperties, x.imageFormatProperties))

from_vk(T::Type{QueueFamilyProperties2}, x::VkQueueFamilyProperties2) = T(x.sType, x.pNext, from_vk(QueueFamilyProperties, x.queueFamilyProperties))

from_vk(T::Type{PhysicalDeviceMemoryProperties2}, x::VkPhysicalDeviceMemoryProperties2) = T(x.sType, x.pNext, from_vk(PhysicalDeviceMemoryProperties, x.memoryProperties))

from_vk(T::Type{SparseImageFormatProperties2}, x::VkSparseImageFormatProperties2) = T(x.sType, x.pNext, from_vk(SparseImageFormatProperties, x.properties))

from_vk(T::Type{PhysicalDevicePushDescriptorPropertiesKHR}, x::VkPhysicalDevicePushDescriptorPropertiesKHR) = T(x.sType, x.pNext, x.maxPushDescriptors)

from_vk(T::Type{PhysicalDeviceDriverProperties}, x::VkPhysicalDeviceDriverProperties) = T(x.sType, x.pNext, x.driverID, from_vk(String, x.driverName), from_vk(String, x.driverInfo), from_vk(_ConformanceVersion, x.conformanceVersion))

from_vk(T::Type{ExternalMemoryProperties}, x::VkExternalMemoryProperties) = T(x.externalMemoryFeatures, x.exportFromImportedHandleTypes, x.compatibleHandleTypes)

from_vk(T::Type{ExternalImageFormatProperties}, x::VkExternalImageFormatProperties) = T(x.sType, x.pNext, from_vk(ExternalMemoryProperties, x.externalMemoryProperties))

from_vk(T::Type{ExternalBufferProperties}, x::VkExternalBufferProperties) = T(x.sType, x.pNext, from_vk(ExternalMemoryProperties, x.externalMemoryProperties))

from_vk(T::Type{PhysicalDeviceIDProperties}, x::VkPhysicalDeviceIDProperties) = T(x.sType, x.pNext, from_vk(String, x.deviceUUID), from_vk(String, x.driverUUID), from_vk(String, x.deviceLUID), x.deviceNodeMask, from_vk(Bool, x.deviceLUIDValid))

from_vk(T::Type{MemoryZirconHandlePropertiesFUCHSIA}, x::VkMemoryZirconHandlePropertiesFUCHSIA) = T(x.sType, x.pNext, x.memoryTypeBits)

from_vk(T::Type{MemoryWin32HandlePropertiesKHR}, x::VkMemoryWin32HandlePropertiesKHR) = T(x.sType, x.pNext, x.memoryTypeBits)

from_vk(T::Type{MemoryFdPropertiesKHR}, x::VkMemoryFdPropertiesKHR) = T(x.sType, x.pNext, x.memoryTypeBits)

from_vk(T::Type{ExternalSemaphoreProperties}, x::VkExternalSemaphoreProperties) = T(x.sType, x.pNext, x.exportFromImportedHandleTypes, x.compatibleHandleTypes, x.externalSemaphoreFeatures)

from_vk(T::Type{ExternalFenceProperties}, x::VkExternalFenceProperties) = T(x.sType, x.pNext, x.exportFromImportedHandleTypes, x.compatibleHandleTypes, x.externalFenceFeatures)

from_vk(T::Type{PhysicalDeviceMultiviewProperties}, x::VkPhysicalDeviceMultiviewProperties) = T(x.sType, x.pNext, x.maxMultiviewViewCount, x.maxMultiviewInstanceIndex)

from_vk(T::Type{SurfaceCapabilities2EXT}, x::VkSurfaceCapabilities2EXT) = T(x.sType, x.pNext, x.minImageCount, x.maxImageCount, from_vk(_Extent2D, x.currentExtent), from_vk(_Extent2D, x.minImageExtent), from_vk(_Extent2D, x.maxImageExtent), x.maxImageArrayLayers, x.supportedTransforms, SurfaceTransformFlagKHR(UInt32(x.currentTransform)), x.supportedCompositeAlpha, x.supportedUsageFlags, x.supportedSurfaceCounters)

from_vk(T::Type{PhysicalDeviceGroupProperties}, x::VkPhysicalDeviceGroupProperties) = T(x.sType, x.pNext, x.physicalDeviceCount, PhysicalDevice.(x.physicalDevices), from_vk(Bool, x.subsetAllocation))

from_vk(T::Type{DeviceGroupPresentCapabilitiesKHR}, x::VkDeviceGroupPresentCapabilitiesKHR) = T(x.sType, x.pNext, from_vk(NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), UInt32}, x.presentMask), x.modes)

from_vk(T::Type{DisplayNativeHdrSurfaceCapabilitiesAMD}, x::VkDisplayNativeHdrSurfaceCapabilitiesAMD) = T(x.sType, x.pNext, from_vk(Bool, x.localDimmingSupport))

from_vk(T::Type{RefreshCycleDurationGOOGLE}, x::VkRefreshCycleDurationGOOGLE) = T(x.refreshDuration)

from_vk(T::Type{PastPresentationTimingGOOGLE}, x::VkPastPresentationTimingGOOGLE) = T(x.presentID, x.desiredPresentTime, x.actualPresentTime, x.earliestPresentTime, x.presentMargin)

from_vk(T::Type{PhysicalDeviceDiscardRectanglePropertiesEXT}, x::VkPhysicalDeviceDiscardRectanglePropertiesEXT) = T(x.sType, x.pNext, x.maxDiscardRectangles)

from_vk(T::Type{PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX}, x::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) = T(x.sType, x.pNext, from_vk(Bool, x.perViewPositionAllComponents))

from_vk(T::Type{SurfaceCapabilities2KHR}, x::VkSurfaceCapabilities2KHR) = T(x.sType, x.pNext, from_vk(SurfaceCapabilitiesKHR, x.surfaceCapabilities))

from_vk(T::Type{SurfaceFormat2KHR}, x::VkSurfaceFormat2KHR) = T(x.sType, x.pNext, from_vk(SurfaceFormatKHR, x.surfaceFormat))

from_vk(T::Type{DisplayProperties2KHR}, x::VkDisplayProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayPropertiesKHR, x.displayProperties))

from_vk(T::Type{DisplayPlaneProperties2KHR}, x::VkDisplayPlaneProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayPlanePropertiesKHR, x.displayPlaneProperties))

from_vk(T::Type{DisplayModeProperties2KHR}, x::VkDisplayModeProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayModePropertiesKHR, x.displayModeProperties))

from_vk(T::Type{DisplayPlaneCapabilities2KHR}, x::VkDisplayPlaneCapabilities2KHR) = T(x.sType, x.pNext, from_vk(DisplayPlaneCapabilitiesKHR, x.capabilities))

from_vk(T::Type{SharedPresentSurfaceCapabilitiesKHR}, x::VkSharedPresentSurfaceCapabilitiesKHR) = T(x.sType, x.pNext, x.sharedPresentSupportedUsageFlags)

from_vk(T::Type{PhysicalDeviceSubgroupProperties}, x::VkPhysicalDeviceSubgroupProperties) = T(x.sType, x.pNext, x.subgroupSize, x.supportedStages, x.supportedOperations, from_vk(Bool, x.quadOperationsInAllStages))

from_vk(T::Type{MemoryRequirements2}, x::VkMemoryRequirements2) = T(x.sType, x.pNext, from_vk(MemoryRequirements, x.memoryRequirements))

from_vk(T::Type{SparseImageMemoryRequirements2}, x::VkSparseImageMemoryRequirements2) = T(x.sType, x.pNext, from_vk(SparseImageMemoryRequirements, x.memoryRequirements))

from_vk(T::Type{PhysicalDevicePointClippingProperties}, x::VkPhysicalDevicePointClippingProperties) = T(x.sType, x.pNext, x.pointClippingBehavior)

from_vk(T::Type{MemoryDedicatedRequirements}, x::VkMemoryDedicatedRequirements) = T(x.sType, x.pNext, from_vk(Bool, x.prefersDedicatedAllocation), from_vk(Bool, x.requiresDedicatedAllocation))

from_vk(T::Type{SamplerYcbcrConversionImageFormatProperties}, x::VkSamplerYcbcrConversionImageFormatProperties) = T(x.sType, x.pNext, x.combinedImageSamplerDescriptorCount)

from_vk(T::Type{TextureLODGatherFormatPropertiesAMD}, x::VkTextureLODGatherFormatPropertiesAMD) = T(x.sType, x.pNext, from_vk(Bool, x.supportsTextureGatherLODBiasAMD))

from_vk(T::Type{PhysicalDeviceProtectedMemoryProperties}, x::VkPhysicalDeviceProtectedMemoryProperties) = T(x.sType, x.pNext, from_vk(Bool, x.protectedNoFault))

from_vk(T::Type{PhysicalDeviceSamplerFilterMinmaxProperties}, x::VkPhysicalDeviceSamplerFilterMinmaxProperties) = T(x.sType, x.pNext, from_vk(Bool, x.filterMinmaxSingleComponentFormats), from_vk(Bool, x.filterMinmaxImageComponentMapping))

from_vk(T::Type{PhysicalDeviceSampleLocationsPropertiesEXT}, x::VkPhysicalDeviceSampleLocationsPropertiesEXT) = T(x.sType, x.pNext, x.sampleLocationSampleCounts, from_vk(_Extent2D, x.maxSampleLocationGridSize), x.sampleLocationCoordinateRange, x.sampleLocationSubPixelBits, from_vk(Bool, x.variableSampleLocations))

from_vk(T::Type{MultisamplePropertiesEXT}, x::VkMultisamplePropertiesEXT) = T(x.sType, x.pNext, from_vk(_Extent2D, x.maxSampleLocationGridSize))

from_vk(T::Type{PhysicalDeviceBlendOperationAdvancedPropertiesEXT}, x::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT) = T(x.sType, x.pNext, x.advancedBlendMaxColorAttachments, from_vk(Bool, x.advancedBlendIndependentBlend), from_vk(Bool, x.advancedBlendNonPremultipliedSrcColor), from_vk(Bool, x.advancedBlendNonPremultipliedDstColor), from_vk(Bool, x.advancedBlendCorrelatedOverlap), from_vk(Bool, x.advancedBlendAllOperations))

from_vk(T::Type{PhysicalDeviceInlineUniformBlockPropertiesEXT}, x::VkPhysicalDeviceInlineUniformBlockPropertiesEXT) = T(x.sType, x.pNext, x.maxInlineUniformBlockSize, x.maxPerStageDescriptorInlineUniformBlocks, x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, x.maxDescriptorSetInlineUniformBlocks, x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)

from_vk(T::Type{PhysicalDeviceMaintenance3Properties}, x::VkPhysicalDeviceMaintenance3Properties) = T(x.sType, x.pNext, x.maxPerSetDescriptors, x.maxMemoryAllocationSize)

from_vk(T::Type{DescriptorSetLayoutSupport}, x::VkDescriptorSetLayoutSupport) = T(x.sType, x.pNext, from_vk(Bool, x.supported))

from_vk(T::Type{PhysicalDeviceFloatControlsProperties}, x::VkPhysicalDeviceFloatControlsProperties) = T(x.sType, x.pNext, x.denormBehaviorIndependence, x.roundingModeIndependence, from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat16), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat32), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat64), from_vk(Bool, x.shaderDenormPreserveFloat16), from_vk(Bool, x.shaderDenormPreserveFloat32), from_vk(Bool, x.shaderDenormPreserveFloat64), from_vk(Bool, x.shaderDenormFlushToZeroFloat16), from_vk(Bool, x.shaderDenormFlushToZeroFloat32), from_vk(Bool, x.shaderDenormFlushToZeroFloat64), from_vk(Bool, x.shaderRoundingModeRTEFloat16), from_vk(Bool, x.shaderRoundingModeRTEFloat32), from_vk(Bool, x.shaderRoundingModeRTEFloat64), from_vk(Bool, x.shaderRoundingModeRTZFloat16), from_vk(Bool, x.shaderRoundingModeRTZFloat32), from_vk(Bool, x.shaderRoundingModeRTZFloat64))

from_vk(T::Type{ShaderResourceUsageAMD}, x::VkShaderResourceUsageAMD) = T(x.numUsedVgprs, x.numUsedSgprs, x.ldsSizePerLocalWorkGroup, x.ldsUsageSizeInBytes, x.scratchMemUsageInBytes)

from_vk(T::Type{ShaderStatisticsInfoAMD}, x::VkShaderStatisticsInfoAMD) = T(x.shaderStageMask, from_vk(ShaderResourceUsageAMD, x.resourceUsage), x.numPhysicalVgprs, x.numPhysicalSgprs, x.numAvailableVgprs, x.numAvailableSgprs, x.computeWorkGroupSize)

from_vk(T::Type{DeviceMemoryReportCallbackDataEXT}, x::VkDeviceMemoryReportCallbackDataEXT) = T(x.sType, x.pNext, x.flags, x.type, x.memoryObjectId, x.size, x.objectType, x.objectHandle, x.heapIndex)

from_vk(T::Type{MemoryHostPointerPropertiesEXT}, x::VkMemoryHostPointerPropertiesEXT) = T(x.sType, x.pNext, x.memoryTypeBits)

from_vk(T::Type{PhysicalDeviceExternalMemoryHostPropertiesEXT}, x::VkPhysicalDeviceExternalMemoryHostPropertiesEXT) = T(x.sType, x.pNext, x.minImportedHostPointerAlignment)

from_vk(T::Type{PhysicalDeviceConservativeRasterizationPropertiesEXT}, x::VkPhysicalDeviceConservativeRasterizationPropertiesEXT) = T(x.sType, x.pNext, x.primitiveOverestimationSize, x.maxExtraPrimitiveOverestimationSize, x.extraPrimitiveOverestimationSizeGranularity, from_vk(Bool, x.primitiveUnderestimation), from_vk(Bool, x.conservativePointAndLineRasterization), from_vk(Bool, x.degenerateTrianglesRasterized), from_vk(Bool, x.degenerateLinesRasterized), from_vk(Bool, x.fullyCoveredFragmentShaderInputVariable), from_vk(Bool, x.conservativeRasterizationPostDepthCoverage))

from_vk(T::Type{PhysicalDeviceShaderCorePropertiesAMD}, x::VkPhysicalDeviceShaderCorePropertiesAMD) = T(x.sType, x.pNext, x.shaderEngineCount, x.shaderArraysPerEngineCount, x.computeUnitsPerShaderArray, x.simdPerComputeUnit, x.wavefrontsPerSimd, x.wavefrontSize, x.sgprsPerSimd, x.minSgprAllocation, x.maxSgprAllocation, x.sgprAllocationGranularity, x.vgprsPerSimd, x.minVgprAllocation, x.maxVgprAllocation, x.vgprAllocationGranularity)

from_vk(T::Type{PhysicalDeviceShaderCoreProperties2AMD}, x::VkPhysicalDeviceShaderCoreProperties2AMD) = T(x.sType, x.pNext, x.shaderCoreFeatures, x.activeComputeUnitCount)

from_vk(T::Type{PhysicalDeviceDescriptorIndexingProperties}, x::VkPhysicalDeviceDescriptorIndexingProperties) = T(x.sType, x.pNext, x.maxUpdateAfterBindDescriptorsInAllPools, from_vk(Bool, x.shaderUniformBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderSampledImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderInputAttachmentArrayNonUniformIndexingNative), from_vk(Bool, x.robustBufferAccessUpdateAfterBind), from_vk(Bool, x.quadDivergentImplicitLod), x.maxPerStageDescriptorUpdateAfterBindSamplers, x.maxPerStageDescriptorUpdateAfterBindUniformBuffers, x.maxPerStageDescriptorUpdateAfterBindStorageBuffers, x.maxPerStageDescriptorUpdateAfterBindSampledImages, x.maxPerStageDescriptorUpdateAfterBindStorageImages, x.maxPerStageDescriptorUpdateAfterBindInputAttachments, x.maxPerStageUpdateAfterBindResources, x.maxDescriptorSetUpdateAfterBindSamplers, x.maxDescriptorSetUpdateAfterBindUniformBuffers, x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, x.maxDescriptorSetUpdateAfterBindStorageBuffers, x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, x.maxDescriptorSetUpdateAfterBindSampledImages, x.maxDescriptorSetUpdateAfterBindStorageImages, x.maxDescriptorSetUpdateAfterBindInputAttachments)

from_vk(T::Type{DescriptorSetVariableDescriptorCountLayoutSupport}, x::VkDescriptorSetVariableDescriptorCountLayoutSupport) = T(x.sType, x.pNext, x.maxVariableDescriptorCount)

from_vk(T::Type{PhysicalDeviceTimelineSemaphoreProperties}, x::VkPhysicalDeviceTimelineSemaphoreProperties) = T(x.sType, x.pNext, x.maxTimelineSemaphoreValueDifference)

from_vk(T::Type{PhysicalDeviceVertexAttributeDivisorPropertiesEXT}, x::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT) = T(x.sType, x.pNext, x.maxVertexAttribDivisor)

from_vk(T::Type{PhysicalDevicePCIBusInfoPropertiesEXT}, x::VkPhysicalDevicePCIBusInfoPropertiesEXT) = T(x.sType, x.pNext, x.pciDomain, x.pciBus, x.pciDevice, x.pciFunction)

from_vk(T::Type{AndroidHardwareBufferUsageANDROID}, x::VkAndroidHardwareBufferUsageANDROID) = T(x.sType, x.pNext, x.androidHardwareBufferUsage)

from_vk(T::Type{AndroidHardwareBufferPropertiesANDROID}, x::VkAndroidHardwareBufferPropertiesANDROID) = T(x.sType, x.pNext, x.allocationSize, x.memoryTypeBits)

from_vk(T::Type{AndroidHardwareBufferFormatPropertiesANDROID}, x::VkAndroidHardwareBufferFormatPropertiesANDROID) = T(x.sType, x.pNext, x.format, x.externalFormat, x.formatFeatures, from_vk(_ComponentMapping, x.samplerYcbcrConversionComponents), x.suggestedYcbcrModel, x.suggestedYcbcrRange, x.suggestedXChromaOffset, x.suggestedYChromaOffset)

from_vk(T::Type{QueueFamilyCheckpointPropertiesNV}, x::VkQueueFamilyCheckpointPropertiesNV) = T(x.sType, x.pNext, x.checkpointExecutionStageMask)

from_vk(T::Type{CheckpointDataNV}, x::VkCheckpointDataNV) = T(x.sType, x.pNext, PipelineStageFlag(UInt32(x.stage)), x.pCheckpointMarker)

from_vk(T::Type{PhysicalDeviceDepthStencilResolveProperties}, x::VkPhysicalDeviceDepthStencilResolveProperties) = T(x.sType, x.pNext, x.supportedDepthResolveModes, x.supportedStencilResolveModes, from_vk(Bool, x.independentResolveNone), from_vk(Bool, x.independentResolve))

from_vk(T::Type{PhysicalDeviceTransformFeedbackPropertiesEXT}, x::VkPhysicalDeviceTransformFeedbackPropertiesEXT) = T(x.sType, x.pNext, x.maxTransformFeedbackStreams, x.maxTransformFeedbackBuffers, x.maxTransformFeedbackBufferSize, x.maxTransformFeedbackStreamDataSize, x.maxTransformFeedbackBufferDataSize, x.maxTransformFeedbackBufferDataStride, from_vk(Bool, x.transformFeedbackQueries), from_vk(Bool, x.transformFeedbackStreamsLinesTriangles), from_vk(Bool, x.transformFeedbackRasterizationStreamSelect), from_vk(Bool, x.transformFeedbackDraw))

from_vk(T::Type{PhysicalDeviceShadingRateImagePropertiesNV}, x::VkPhysicalDeviceShadingRateImagePropertiesNV) = T(x.sType, x.pNext, from_vk(_Extent2D, x.shadingRateTexelSize), x.shadingRatePaletteSize, x.shadingRateMaxCoarseSamples)

from_vk(T::Type{PhysicalDeviceMeshShaderPropertiesNV}, x::VkPhysicalDeviceMeshShaderPropertiesNV) = T(x.sType, x.pNext, x.maxDrawMeshTasksCount, x.maxTaskWorkGroupInvocations, x.maxTaskWorkGroupSize, x.maxTaskTotalMemorySize, x.maxTaskOutputCount, x.maxMeshWorkGroupInvocations, x.maxMeshWorkGroupSize, x.maxMeshTotalMemorySize, x.maxMeshOutputVertices, x.maxMeshOutputPrimitives, x.maxMeshMultiviewViewCount, x.meshOutputPerVertexGranularity, x.meshOutputPerPrimitiveGranularity)

from_vk(T::Type{PhysicalDeviceAccelerationStructurePropertiesKHR}, x::VkPhysicalDeviceAccelerationStructurePropertiesKHR) = T(x.sType, x.pNext, x.maxGeometryCount, x.maxInstanceCount, x.maxPrimitiveCount, x.maxPerStageDescriptorAccelerationStructures, x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures, x.maxDescriptorSetAccelerationStructures, x.maxDescriptorSetUpdateAfterBindAccelerationStructures, x.minAccelerationStructureScratchOffsetAlignment)

from_vk(T::Type{PhysicalDeviceRayTracingPipelinePropertiesKHR}, x::VkPhysicalDeviceRayTracingPipelinePropertiesKHR) = T(x.sType, x.pNext, x.shaderGroupHandleSize, x.maxRayRecursionDepth, x.maxShaderGroupStride, x.shaderGroupBaseAlignment, x.shaderGroupHandleCaptureReplaySize, x.maxRayDispatchInvocationCount, x.shaderGroupHandleAlignment, x.maxRayHitAttributeSize)

from_vk(T::Type{PhysicalDeviceRayTracingPropertiesNV}, x::VkPhysicalDeviceRayTracingPropertiesNV) = T(x.sType, x.pNext, x.shaderGroupHandleSize, x.maxRecursionDepth, x.maxShaderGroupStride, x.shaderGroupBaseAlignment, x.maxGeometryCount, x.maxInstanceCount, x.maxTriangleCount, x.maxDescriptorSetAccelerationStructures)

from_vk(T::Type{DrmFormatModifierPropertiesListEXT}, x::VkDrmFormatModifierPropertiesListEXT) = T(x.sType, x.pNext, unsafe_wrap(Vector{DrmFormatModifierPropertiesEXT}, x.pDrmFormatModifierProperties, x.drmFormatModifierCount; own = true))

from_vk(T::Type{DrmFormatModifierPropertiesEXT}, x::VkDrmFormatModifierPropertiesEXT) = T(x.drmFormatModifier, x.drmFormatModifierPlaneCount, x.drmFormatModifierTilingFeatures)

from_vk(T::Type{ImageDrmFormatModifierPropertiesEXT}, x::VkImageDrmFormatModifierPropertiesEXT) = T(x.sType, x.pNext, x.drmFormatModifier)

from_vk(T::Type{PhysicalDeviceFragmentDensityMapPropertiesEXT}, x::VkPhysicalDeviceFragmentDensityMapPropertiesEXT) = T(x.sType, x.pNext, from_vk(_Extent2D, x.minFragmentDensityTexelSize), from_vk(_Extent2D, x.maxFragmentDensityTexelSize), from_vk(Bool, x.fragmentDensityInvocations))

from_vk(T::Type{PhysicalDeviceFragmentDensityMap2PropertiesEXT}, x::VkPhysicalDeviceFragmentDensityMap2PropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.subsampledLoads), from_vk(Bool, x.subsampledCoarseReconstructionEarlyAccess), x.maxSubsampledArrayLayers, x.maxDescriptorSetSubsampledSamplers)

from_vk(T::Type{PhysicalDeviceMemoryBudgetPropertiesEXT}, x::VkPhysicalDeviceMemoryBudgetPropertiesEXT) = T(x.sType, x.pNext, from_vk(NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}, x.heapBudget), from_vk(NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}, x.heapUsage))

from_vk(T::Type{FilterCubicImageViewImageFormatPropertiesEXT}, x::VkFilterCubicImageViewImageFormatPropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.filterCubic), from_vk(Bool, x.filterCubicMinmax))

from_vk(T::Type{PhysicalDeviceCooperativeMatrixPropertiesNV}, x::VkPhysicalDeviceCooperativeMatrixPropertiesNV) = T(x.sType, x.pNext, x.cooperativeMatrixSupportedStages)

from_vk(T::Type{ImageViewAddressPropertiesNVX}, x::VkImageViewAddressPropertiesNVX) = T(x.sType, x.pNext, x.deviceAddress, x.size)

from_vk(T::Type{PipelineCreationFeedbackEXT}, x::VkPipelineCreationFeedbackEXT) = T(x.flags, x.duration)

from_vk(T::Type{PhysicalDevicePerformanceQueryPropertiesKHR}, x::VkPhysicalDevicePerformanceQueryPropertiesKHR) = T(x.sType, x.pNext, from_vk(Bool, x.allowCommandBufferQueryCopies))

from_vk(T::Type{PerformanceCounterKHR}, x::VkPerformanceCounterKHR) = T(x.sType, x.pNext, x.unit, x.scope, x.storage, from_vk(String, x.uuid))

from_vk(T::Type{PerformanceCounterDescriptionKHR}, x::VkPerformanceCounterDescriptionKHR) = T(x.sType, x.pNext, x.flags, from_vk(String, x.name), from_vk(String, x.category), from_vk(String, x.description))

from_vk(T::Type{FramebufferMixedSamplesCombinationNV}, x::VkFramebufferMixedSamplesCombinationNV) = T(x.sType, x.pNext, x.coverageReductionMode, SampleCountFlag(UInt32(x.rasterizationSamples)), x.depthStencilSamples, x.colorSamples)

from_vk(T::Type{PhysicalDeviceShaderSMBuiltinsPropertiesNV}, x::VkPhysicalDeviceShaderSMBuiltinsPropertiesNV) = T(x.sType, x.pNext, x.shaderSMCount, x.shaderWarpsPerSM)

from_vk(T::Type{PipelineExecutablePropertiesKHR}, x::VkPipelineExecutablePropertiesKHR) = T(x.sType, x.pNext, x.stages, from_vk(String, x.name), from_vk(String, x.description), x.subgroupSize)

from_vk(T::Type{PipelineExecutableStatisticKHR}, x::VkPipelineExecutableStatisticKHR) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.description), x.format, x.value)

from_vk(T::Type{PipelineExecutableInternalRepresentationKHR}, x::VkPipelineExecutableInternalRepresentationKHR) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.description), from_vk(Bool, x.isText), x.dataSize, x.pData)

from_vk(T::Type{PhysicalDeviceTexelBufferAlignmentPropertiesEXT}, x::VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT) = T(x.sType, x.pNext, x.storageTexelBufferOffsetAlignmentBytes, from_vk(Bool, x.storageTexelBufferOffsetSingleTexelAlignment), x.uniformTexelBufferOffsetAlignmentBytes, from_vk(Bool, x.uniformTexelBufferOffsetSingleTexelAlignment))

from_vk(T::Type{PhysicalDeviceSubgroupSizeControlPropertiesEXT}, x::VkPhysicalDeviceSubgroupSizeControlPropertiesEXT) = T(x.sType, x.pNext, x.minSubgroupSize, x.maxSubgroupSize, x.maxComputeWorkgroupSubgroups, x.requiredSubgroupSizeStages)

from_vk(T::Type{PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT}, x::VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT) = T(x.sType, x.pNext, x.requiredSubgroupSize)

from_vk(T::Type{PhysicalDeviceLineRasterizationPropertiesEXT}, x::VkPhysicalDeviceLineRasterizationPropertiesEXT) = T(x.sType, x.pNext, x.lineSubPixelPrecisionBits)

from_vk(T::Type{PhysicalDeviceVulkan11Properties}, x::VkPhysicalDeviceVulkan11Properties) = T(x.sType, x.pNext, from_vk(String, x.deviceUUID), from_vk(String, x.driverUUID), from_vk(String, x.deviceLUID), x.deviceNodeMask, from_vk(Bool, x.deviceLUIDValid), x.subgroupSize, x.subgroupSupportedStages, x.subgroupSupportedOperations, from_vk(Bool, x.subgroupQuadOperationsInAllStages), x.pointClippingBehavior, x.maxMultiviewViewCount, x.maxMultiviewInstanceIndex, from_vk(Bool, x.protectedNoFault), x.maxPerSetDescriptors, x.maxMemoryAllocationSize)

from_vk(T::Type{PhysicalDeviceVulkan12Properties}, x::VkPhysicalDeviceVulkan12Properties) = T(x.sType, x.pNext, x.driverID, from_vk(String, x.driverName), from_vk(String, x.driverInfo), from_vk(_ConformanceVersion, x.conformanceVersion), x.denormBehaviorIndependence, x.roundingModeIndependence, from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat16), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat32), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat64), from_vk(Bool, x.shaderDenormPreserveFloat16), from_vk(Bool, x.shaderDenormPreserveFloat32), from_vk(Bool, x.shaderDenormPreserveFloat64), from_vk(Bool, x.shaderDenormFlushToZeroFloat16), from_vk(Bool, x.shaderDenormFlushToZeroFloat32), from_vk(Bool, x.shaderDenormFlushToZeroFloat64), from_vk(Bool, x.shaderRoundingModeRTEFloat16), from_vk(Bool, x.shaderRoundingModeRTEFloat32), from_vk(Bool, x.shaderRoundingModeRTEFloat64), from_vk(Bool, x.shaderRoundingModeRTZFloat16), from_vk(Bool, x.shaderRoundingModeRTZFloat32), from_vk(Bool, x.shaderRoundingModeRTZFloat64), x.maxUpdateAfterBindDescriptorsInAllPools, from_vk(Bool, x.shaderUniformBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderSampledImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderInputAttachmentArrayNonUniformIndexingNative), from_vk(Bool, x.robustBufferAccessUpdateAfterBind), from_vk(Bool, x.quadDivergentImplicitLod), x.maxPerStageDescriptorUpdateAfterBindSamplers, x.maxPerStageDescriptorUpdateAfterBindUniformBuffers, x.maxPerStageDescriptorUpdateAfterBindStorageBuffers, x.maxPerStageDescriptorUpdateAfterBindSampledImages, x.maxPerStageDescriptorUpdateAfterBindStorageImages, x.maxPerStageDescriptorUpdateAfterBindInputAttachments, x.maxPerStageUpdateAfterBindResources, x.maxDescriptorSetUpdateAfterBindSamplers, x.maxDescriptorSetUpdateAfterBindUniformBuffers, x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, x.maxDescriptorSetUpdateAfterBindStorageBuffers, x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, x.maxDescriptorSetUpdateAfterBindSampledImages, x.maxDescriptorSetUpdateAfterBindStorageImages, x.maxDescriptorSetUpdateAfterBindInputAttachments, x.supportedDepthResolveModes, x.supportedStencilResolveModes, from_vk(Bool, x.independentResolveNone), from_vk(Bool, x.independentResolve), from_vk(Bool, x.filterMinmaxSingleComponentFormats), from_vk(Bool, x.filterMinmaxImageComponentMapping), x.maxTimelineSemaphoreValueDifference, x.framebufferIntegerColorSampleCounts)

from_vk(T::Type{PhysicalDeviceToolPropertiesEXT}, x::VkPhysicalDeviceToolPropertiesEXT) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.version), x.purposes, from_vk(String, x.description), from_vk(String, x.layer))

from_vk(T::Type{PhysicalDeviceCustomBorderColorPropertiesEXT}, x::VkPhysicalDeviceCustomBorderColorPropertiesEXT) = T(x.sType, x.pNext, x.maxCustomBorderColorSamplers)

from_vk(T::Type{PhysicalDeviceRobustness2PropertiesEXT}, x::VkPhysicalDeviceRobustness2PropertiesEXT) = T(x.sType, x.pNext, x.robustStorageBufferAccessSizeAlignment, x.robustUniformBufferAccessSizeAlignment)

from_vk(T::Type{PhysicalDeviceFragmentShadingRatePropertiesKHR}, x::VkPhysicalDeviceFragmentShadingRatePropertiesKHR) = T(x.sType, x.pNext, from_vk(_Extent2D, x.minFragmentShadingRateAttachmentTexelSize), from_vk(_Extent2D, x.maxFragmentShadingRateAttachmentTexelSize), x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio, from_vk(Bool, x.primitiveFragmentShadingRateWithMultipleViewports), from_vk(Bool, x.layeredShadingRateAttachments), from_vk(Bool, x.fragmentShadingRateNonTrivialCombinerOps), from_vk(_Extent2D, x.maxFragmentSize), x.maxFragmentSizeAspectRatio, x.maxFragmentShadingRateCoverageSamples, SampleCountFlag(UInt32(x.maxFragmentShadingRateRasterizationSamples)), from_vk(Bool, x.fragmentShadingRateWithShaderDepthStencilWrites), from_vk(Bool, x.fragmentShadingRateWithSampleMask), from_vk(Bool, x.fragmentShadingRateWithShaderSampleMask), from_vk(Bool, x.fragmentShadingRateWithConservativeRasterization), from_vk(Bool, x.fragmentShadingRateWithFragmentShaderInterlock), from_vk(Bool, x.fragmentShadingRateWithCustomSampleLocations), from_vk(Bool, x.fragmentShadingRateStrictMultiplyCombiner))

from_vk(T::Type{PhysicalDeviceFragmentShadingRateKHR}, x::VkPhysicalDeviceFragmentShadingRateKHR) = T(x.sType, x.pNext, x.sampleCounts, from_vk(_Extent2D, x.fragmentSize))

from_vk(T::Type{QueueFamilyCheckpointProperties2NV}, x::VkQueueFamilyCheckpointProperties2NV) = T(x.sType, x.pNext, x.checkpointExecutionStageMask)

from_vk(T::Type{CheckpointData2NV}, x::VkCheckpointData2NV) = T(x.sType, x.pNext, x.stage, x.pCheckpointMarker)

from_vk(T::Type{PhysicalDeviceVideoFormatInfoKHR}, x::VkPhysicalDeviceVideoFormatInfoKHR) = T(x.sType, x.pNext, x.imageUsage, from_vk(_VideoProfilesKHR, x.pVideoProfiles))

from_vk(T::Type{VideoFormatPropertiesKHR}, x::VkVideoFormatPropertiesKHR) = T(x.sType, x.pNext, x.format)

from_vk(T::Type{VideoCapabilitiesKHR}, x::VkVideoCapabilitiesKHR) = T(x.sType, x.pNext, x.capabilityFlags, x.minBitstreamBufferOffsetAlignment, x.minBitstreamBufferSizeAlignment, from_vk(_Extent2D, x.videoPictureExtentGranularity), from_vk(_Extent2D, x.minExtent), from_vk(_Extent2D, x.maxExtent), x.maxReferencePicturesSlotsCount, x.maxReferencePicturesActiveCount)

from_vk(T::Type{VideoDecodeH264CapabilitiesEXT}, x::VkVideoDecodeH264CapabilitiesEXT) = T(x.sType, x.pNext, x.maxLevel, from_vk(_Offset2D, x.fieldOffsetGranularity), from_vk(ExtensionProperties, x.stdExtensionVersion))

from_vk(T::Type{VideoDecodeH265CapabilitiesEXT}, x::VkVideoDecodeH265CapabilitiesEXT) = T(x.sType, x.pNext, x.maxLevel, from_vk(ExtensionProperties, x.stdExtensionVersion))

from_vk(T::Type{PhysicalDeviceProvokingVertexPropertiesEXT}, x::VkPhysicalDeviceProvokingVertexPropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.provokingVertexModePerPipeline), from_vk(Bool, x.transformFeedbackPreservesTriangleFanProvokingVertex))


convert(T::Type{VkImageLayout}, x::ImageLayout) = Base.bitcast(VkImageLayout, x)

convert(T::Type{VkAttachmentLoadOp}, x::AttachmentLoadOp) = Base.bitcast(VkAttachmentLoadOp, x)

convert(T::Type{VkAttachmentStoreOp}, x::AttachmentStoreOp) = Base.bitcast(VkAttachmentStoreOp, x)

convert(T::Type{VkImageType}, x::ImageType) = Base.bitcast(VkImageType, x)

convert(T::Type{VkImageTiling}, x::ImageTiling) = Base.bitcast(VkImageTiling, x)

convert(T::Type{VkImageViewType}, x::ImageViewType) = Base.bitcast(VkImageViewType, x)

convert(T::Type{VkCommandBufferLevel}, x::CommandBufferLevel) = Base.bitcast(VkCommandBufferLevel, x)

convert(T::Type{VkComponentSwizzle}, x::ComponentSwizzle) = Base.bitcast(VkComponentSwizzle, x)

convert(T::Type{VkDescriptorType}, x::DescriptorType) = Base.bitcast(VkDescriptorType, x)

convert(T::Type{VkQueryType}, x::QueryType) = Base.bitcast(VkQueryType, x)

convert(T::Type{VkBorderColor}, x::BorderColor) = Base.bitcast(VkBorderColor, x)

convert(T::Type{VkPipelineBindPoint}, x::PipelineBindPoint) = Base.bitcast(VkPipelineBindPoint, x)

convert(T::Type{VkPipelineCacheHeaderVersion}, x::PipelineCacheHeaderVersion) = Base.bitcast(VkPipelineCacheHeaderVersion, x)

convert(T::Type{VkPrimitiveTopology}, x::PrimitiveTopology) = Base.bitcast(VkPrimitiveTopology, x)

convert(T::Type{VkSharingMode}, x::SharingMode) = Base.bitcast(VkSharingMode, x)

convert(T::Type{VkIndexType}, x::IndexType) = Base.bitcast(VkIndexType, x)

convert(T::Type{VkFilter}, x::Filter) = Base.bitcast(VkFilter, x)

convert(T::Type{VkSamplerMipmapMode}, x::SamplerMipmapMode) = Base.bitcast(VkSamplerMipmapMode, x)

convert(T::Type{VkSamplerAddressMode}, x::SamplerAddressMode) = Base.bitcast(VkSamplerAddressMode, x)

convert(T::Type{VkCompareOp}, x::CompareOp) = Base.bitcast(VkCompareOp, x)

convert(T::Type{VkPolygonMode}, x::PolygonMode) = Base.bitcast(VkPolygonMode, x)

convert(T::Type{VkFrontFace}, x::FrontFace) = Base.bitcast(VkFrontFace, x)

convert(T::Type{VkBlendFactor}, x::BlendFactor) = Base.bitcast(VkBlendFactor, x)

convert(T::Type{VkBlendOp}, x::BlendOp) = Base.bitcast(VkBlendOp, x)

convert(T::Type{VkStencilOp}, x::StencilOp) = Base.bitcast(VkStencilOp, x)

convert(T::Type{VkLogicOp}, x::LogicOp) = Base.bitcast(VkLogicOp, x)

convert(T::Type{VkInternalAllocationType}, x::InternalAllocationType) = Base.bitcast(VkInternalAllocationType, x)

convert(T::Type{VkSystemAllocationScope}, x::SystemAllocationScope) = Base.bitcast(VkSystemAllocationScope, x)

convert(T::Type{VkPhysicalDeviceType}, x::PhysicalDeviceType) = Base.bitcast(VkPhysicalDeviceType, x)

convert(T::Type{VkVertexInputRate}, x::VertexInputRate) = Base.bitcast(VkVertexInputRate, x)

convert(T::Type{VkFormat}, x::Format) = Base.bitcast(VkFormat, x)

convert(T::Type{VkStructureType}, x::StructureType) = Base.bitcast(VkStructureType, x)

convert(T::Type{VkSubpassContents}, x::SubpassContents) = Base.bitcast(VkSubpassContents, x)

convert(T::Type{VkResult}, x::Result) = Base.bitcast(VkResult, x)

convert(T::Type{VkDynamicState}, x::DynamicState) = Base.bitcast(VkDynamicState, x)

convert(T::Type{VkDescriptorUpdateTemplateType}, x::DescriptorUpdateTemplateType) = Base.bitcast(VkDescriptorUpdateTemplateType, x)

convert(T::Type{VkObjectType}, x::ObjectType) = Base.bitcast(VkObjectType, x)

convert(T::Type{VkSemaphoreType}, x::SemaphoreType) = Base.bitcast(VkSemaphoreType, x)

convert(T::Type{VkPresentModeKHR}, x::PresentModeKHR) = Base.bitcast(VkPresentModeKHR, x)

convert(T::Type{VkColorSpaceKHR}, x::ColorSpaceKHR) = Base.bitcast(VkColorSpaceKHR, x)

convert(T::Type{VkTimeDomainEXT}, x::TimeDomainEXT) = Base.bitcast(VkTimeDomainEXT, x)

convert(T::Type{VkDebugReportObjectTypeEXT}, x::DebugReportObjectTypeEXT) = Base.bitcast(VkDebugReportObjectTypeEXT, x)

convert(T::Type{VkDeviceMemoryReportEventTypeEXT}, x::DeviceMemoryReportEventTypeEXT) = Base.bitcast(VkDeviceMemoryReportEventTypeEXT, x)

convert(T::Type{VkRasterizationOrderAMD}, x::RasterizationOrderAMD) = Base.bitcast(VkRasterizationOrderAMD, x)

convert(T::Type{VkValidationCheckEXT}, x::ValidationCheckEXT) = Base.bitcast(VkValidationCheckEXT, x)

convert(T::Type{VkValidationFeatureEnableEXT}, x::ValidationFeatureEnableEXT) = Base.bitcast(VkValidationFeatureEnableEXT, x)

convert(T::Type{VkValidationFeatureDisableEXT}, x::ValidationFeatureDisableEXT) = Base.bitcast(VkValidationFeatureDisableEXT, x)

convert(T::Type{VkIndirectCommandsTokenTypeNV}, x::IndirectCommandsTokenTypeNV) = Base.bitcast(VkIndirectCommandsTokenTypeNV, x)

convert(T::Type{VkDisplayPowerStateEXT}, x::DisplayPowerStateEXT) = Base.bitcast(VkDisplayPowerStateEXT, x)

convert(T::Type{VkDeviceEventTypeEXT}, x::DeviceEventTypeEXT) = Base.bitcast(VkDeviceEventTypeEXT, x)

convert(T::Type{VkDisplayEventTypeEXT}, x::DisplayEventTypeEXT) = Base.bitcast(VkDisplayEventTypeEXT, x)

convert(T::Type{VkViewportCoordinateSwizzleNV}, x::ViewportCoordinateSwizzleNV) = Base.bitcast(VkViewportCoordinateSwizzleNV, x)

convert(T::Type{VkDiscardRectangleModeEXT}, x::DiscardRectangleModeEXT) = Base.bitcast(VkDiscardRectangleModeEXT, x)

convert(T::Type{VkPointClippingBehavior}, x::PointClippingBehavior) = Base.bitcast(VkPointClippingBehavior, x)

convert(T::Type{VkSamplerReductionMode}, x::SamplerReductionMode) = Base.bitcast(VkSamplerReductionMode, x)

convert(T::Type{VkTessellationDomainOrigin}, x::TessellationDomainOrigin) = Base.bitcast(VkTessellationDomainOrigin, x)

convert(T::Type{VkSamplerYcbcrModelConversion}, x::SamplerYcbcrModelConversion) = Base.bitcast(VkSamplerYcbcrModelConversion, x)

convert(T::Type{VkSamplerYcbcrRange}, x::SamplerYcbcrRange) = Base.bitcast(VkSamplerYcbcrRange, x)

convert(T::Type{VkChromaLocation}, x::ChromaLocation) = Base.bitcast(VkChromaLocation, x)

convert(T::Type{VkBlendOverlapEXT}, x::BlendOverlapEXT) = Base.bitcast(VkBlendOverlapEXT, x)

convert(T::Type{VkCoverageModulationModeNV}, x::CoverageModulationModeNV) = Base.bitcast(VkCoverageModulationModeNV, x)

convert(T::Type{VkCoverageReductionModeNV}, x::CoverageReductionModeNV) = Base.bitcast(VkCoverageReductionModeNV, x)

convert(T::Type{VkValidationCacheHeaderVersionEXT}, x::ValidationCacheHeaderVersionEXT) = Base.bitcast(VkValidationCacheHeaderVersionEXT, x)

convert(T::Type{VkShaderInfoTypeAMD}, x::ShaderInfoTypeAMD) = Base.bitcast(VkShaderInfoTypeAMD, x)

convert(T::Type{VkQueueGlobalPriorityEXT}, x::QueueGlobalPriorityEXT) = Base.bitcast(VkQueueGlobalPriorityEXT, x)

convert(T::Type{VkConservativeRasterizationModeEXT}, x::ConservativeRasterizationModeEXT) = Base.bitcast(VkConservativeRasterizationModeEXT, x)

convert(T::Type{VkVendorId}, x::VendorId) = Base.bitcast(VkVendorId, x)

convert(T::Type{VkDriverId}, x::DriverId) = Base.bitcast(VkDriverId, x)

convert(T::Type{VkShadingRatePaletteEntryNV}, x::ShadingRatePaletteEntryNV) = Base.bitcast(VkShadingRatePaletteEntryNV, x)

convert(T::Type{VkCoarseSampleOrderTypeNV}, x::CoarseSampleOrderTypeNV) = Base.bitcast(VkCoarseSampleOrderTypeNV, x)

convert(T::Type{VkCopyAccelerationStructureModeKHR}, x::CopyAccelerationStructureModeKHR) = Base.bitcast(VkCopyAccelerationStructureModeKHR, x)

convert(T::Type{VkBuildAccelerationStructureModeKHR}, x::BuildAccelerationStructureModeKHR) = Base.bitcast(VkBuildAccelerationStructureModeKHR, x)

convert(T::Type{VkAccelerationStructureTypeKHR}, x::AccelerationStructureTypeKHR) = Base.bitcast(VkAccelerationStructureTypeKHR, x)

convert(T::Type{VkGeometryTypeKHR}, x::GeometryTypeKHR) = Base.bitcast(VkGeometryTypeKHR, x)

convert(T::Type{VkAccelerationStructureMemoryRequirementsTypeNV}, x::AccelerationStructureMemoryRequirementsTypeNV) = Base.bitcast(VkAccelerationStructureMemoryRequirementsTypeNV, x)

convert(T::Type{VkAccelerationStructureBuildTypeKHR}, x::AccelerationStructureBuildTypeKHR) = Base.bitcast(VkAccelerationStructureBuildTypeKHR, x)

convert(T::Type{VkRayTracingShaderGroupTypeKHR}, x::RayTracingShaderGroupTypeKHR) = Base.bitcast(VkRayTracingShaderGroupTypeKHR, x)

convert(T::Type{VkAccelerationStructureCompatibilityKHR}, x::AccelerationStructureCompatibilityKHR) = Base.bitcast(VkAccelerationStructureCompatibilityKHR, x)

convert(T::Type{VkShaderGroupShaderKHR}, x::ShaderGroupShaderKHR) = Base.bitcast(VkShaderGroupShaderKHR, x)

convert(T::Type{VkMemoryOverallocationBehaviorAMD}, x::MemoryOverallocationBehaviorAMD) = Base.bitcast(VkMemoryOverallocationBehaviorAMD, x)

convert(T::Type{VkScopeNV}, x::ScopeNV) = Base.bitcast(VkScopeNV, x)

convert(T::Type{VkComponentTypeNV}, x::ComponentTypeNV) = Base.bitcast(VkComponentTypeNV, x)

convert(T::Type{VkFullScreenExclusiveEXT}, x::FullScreenExclusiveEXT) = Base.bitcast(VkFullScreenExclusiveEXT, x)

convert(T::Type{VkPerformanceCounterScopeKHR}, x::PerformanceCounterScopeKHR) = Base.bitcast(VkPerformanceCounterScopeKHR, x)

convert(T::Type{VkPerformanceCounterUnitKHR}, x::PerformanceCounterUnitKHR) = Base.bitcast(VkPerformanceCounterUnitKHR, x)

convert(T::Type{VkPerformanceCounterStorageKHR}, x::PerformanceCounterStorageKHR) = Base.bitcast(VkPerformanceCounterStorageKHR, x)

convert(T::Type{VkPerformanceConfigurationTypeINTEL}, x::PerformanceConfigurationTypeINTEL) = Base.bitcast(VkPerformanceConfigurationTypeINTEL, x)

convert(T::Type{VkQueryPoolSamplingModeINTEL}, x::QueryPoolSamplingModeINTEL) = Base.bitcast(VkQueryPoolSamplingModeINTEL, x)

convert(T::Type{VkPerformanceOverrideTypeINTEL}, x::PerformanceOverrideTypeINTEL) = Base.bitcast(VkPerformanceOverrideTypeINTEL, x)

convert(T::Type{VkPerformanceParameterTypeINTEL}, x::PerformanceParameterTypeINTEL) = Base.bitcast(VkPerformanceParameterTypeINTEL, x)

convert(T::Type{VkPerformanceValueTypeINTEL}, x::PerformanceValueTypeINTEL) = Base.bitcast(VkPerformanceValueTypeINTEL, x)

convert(T::Type{VkShaderFloatControlsIndependence}, x::ShaderFloatControlsIndependence) = Base.bitcast(VkShaderFloatControlsIndependence, x)

convert(T::Type{VkPipelineExecutableStatisticFormatKHR}, x::PipelineExecutableStatisticFormatKHR) = Base.bitcast(VkPipelineExecutableStatisticFormatKHR, x)

convert(T::Type{VkLineRasterizationModeEXT}, x::LineRasterizationModeEXT) = Base.bitcast(VkLineRasterizationModeEXT, x)

convert(T::Type{VkFragmentShadingRateCombinerOpKHR}, x::FragmentShadingRateCombinerOpKHR) = Base.bitcast(VkFragmentShadingRateCombinerOpKHR, x)

convert(T::Type{VkFragmentShadingRateNV}, x::FragmentShadingRateNV) = Base.bitcast(VkFragmentShadingRateNV, x)

convert(T::Type{VkFragmentShadingRateTypeNV}, x::FragmentShadingRateTypeNV) = Base.bitcast(VkFragmentShadingRateTypeNV, x)

convert(T::Type{VkProvokingVertexModeEXT}, x::ProvokingVertexModeEXT) = Base.bitcast(VkProvokingVertexModeEXT, x)

convert(T::Type{VkQueryResultStatusKHR}, x::QueryResultStatusKHR) = Base.bitcast(VkQueryResultStatusKHR, x)

convert(T::Type{ImageLayout}, x::VkImageLayout) = Base.bitcast(ImageLayout, x)

convert(T::Type{AttachmentLoadOp}, x::VkAttachmentLoadOp) = Base.bitcast(AttachmentLoadOp, x)

convert(T::Type{AttachmentStoreOp}, x::VkAttachmentStoreOp) = Base.bitcast(AttachmentStoreOp, x)

convert(T::Type{ImageType}, x::VkImageType) = Base.bitcast(ImageType, x)

convert(T::Type{ImageTiling}, x::VkImageTiling) = Base.bitcast(ImageTiling, x)

convert(T::Type{ImageViewType}, x::VkImageViewType) = Base.bitcast(ImageViewType, x)

convert(T::Type{CommandBufferLevel}, x::VkCommandBufferLevel) = Base.bitcast(CommandBufferLevel, x)

convert(T::Type{ComponentSwizzle}, x::VkComponentSwizzle) = Base.bitcast(ComponentSwizzle, x)

convert(T::Type{DescriptorType}, x::VkDescriptorType) = Base.bitcast(DescriptorType, x)

convert(T::Type{QueryType}, x::VkQueryType) = Base.bitcast(QueryType, x)

convert(T::Type{BorderColor}, x::VkBorderColor) = Base.bitcast(BorderColor, x)

convert(T::Type{PipelineBindPoint}, x::VkPipelineBindPoint) = Base.bitcast(PipelineBindPoint, x)

convert(T::Type{PipelineCacheHeaderVersion}, x::VkPipelineCacheHeaderVersion) = Base.bitcast(PipelineCacheHeaderVersion, x)

convert(T::Type{PrimitiveTopology}, x::VkPrimitiveTopology) = Base.bitcast(PrimitiveTopology, x)

convert(T::Type{SharingMode}, x::VkSharingMode) = Base.bitcast(SharingMode, x)

convert(T::Type{IndexType}, x::VkIndexType) = Base.bitcast(IndexType, x)

convert(T::Type{Filter}, x::VkFilter) = Base.bitcast(Filter, x)

convert(T::Type{SamplerMipmapMode}, x::VkSamplerMipmapMode) = Base.bitcast(SamplerMipmapMode, x)

convert(T::Type{SamplerAddressMode}, x::VkSamplerAddressMode) = Base.bitcast(SamplerAddressMode, x)

convert(T::Type{CompareOp}, x::VkCompareOp) = Base.bitcast(CompareOp, x)

convert(T::Type{PolygonMode}, x::VkPolygonMode) = Base.bitcast(PolygonMode, x)

convert(T::Type{FrontFace}, x::VkFrontFace) = Base.bitcast(FrontFace, x)

convert(T::Type{BlendFactor}, x::VkBlendFactor) = Base.bitcast(BlendFactor, x)

convert(T::Type{BlendOp}, x::VkBlendOp) = Base.bitcast(BlendOp, x)

convert(T::Type{StencilOp}, x::VkStencilOp) = Base.bitcast(StencilOp, x)

convert(T::Type{LogicOp}, x::VkLogicOp) = Base.bitcast(LogicOp, x)

convert(T::Type{InternalAllocationType}, x::VkInternalAllocationType) = Base.bitcast(InternalAllocationType, x)

convert(T::Type{SystemAllocationScope}, x::VkSystemAllocationScope) = Base.bitcast(SystemAllocationScope, x)

convert(T::Type{PhysicalDeviceType}, x::VkPhysicalDeviceType) = Base.bitcast(PhysicalDeviceType, x)

convert(T::Type{VertexInputRate}, x::VkVertexInputRate) = Base.bitcast(VertexInputRate, x)

convert(T::Type{Format}, x::VkFormat) = Base.bitcast(Format, x)

convert(T::Type{StructureType}, x::VkStructureType) = Base.bitcast(StructureType, x)

convert(T::Type{SubpassContents}, x::VkSubpassContents) = Base.bitcast(SubpassContents, x)

convert(T::Type{Result}, x::VkResult) = Base.bitcast(Result, x)

convert(T::Type{DynamicState}, x::VkDynamicState) = Base.bitcast(DynamicState, x)

convert(T::Type{DescriptorUpdateTemplateType}, x::VkDescriptorUpdateTemplateType) = Base.bitcast(DescriptorUpdateTemplateType, x)

convert(T::Type{ObjectType}, x::VkObjectType) = Base.bitcast(ObjectType, x)

convert(T::Type{SemaphoreType}, x::VkSemaphoreType) = Base.bitcast(SemaphoreType, x)

convert(T::Type{PresentModeKHR}, x::VkPresentModeKHR) = Base.bitcast(PresentModeKHR, x)

convert(T::Type{ColorSpaceKHR}, x::VkColorSpaceKHR) = Base.bitcast(ColorSpaceKHR, x)

convert(T::Type{TimeDomainEXT}, x::VkTimeDomainEXT) = Base.bitcast(TimeDomainEXT, x)

convert(T::Type{DebugReportObjectTypeEXT}, x::VkDebugReportObjectTypeEXT) = Base.bitcast(DebugReportObjectTypeEXT, x)

convert(T::Type{DeviceMemoryReportEventTypeEXT}, x::VkDeviceMemoryReportEventTypeEXT) = Base.bitcast(DeviceMemoryReportEventTypeEXT, x)

convert(T::Type{RasterizationOrderAMD}, x::VkRasterizationOrderAMD) = Base.bitcast(RasterizationOrderAMD, x)

convert(T::Type{ValidationCheckEXT}, x::VkValidationCheckEXT) = Base.bitcast(ValidationCheckEXT, x)

convert(T::Type{ValidationFeatureEnableEXT}, x::VkValidationFeatureEnableEXT) = Base.bitcast(ValidationFeatureEnableEXT, x)

convert(T::Type{ValidationFeatureDisableEXT}, x::VkValidationFeatureDisableEXT) = Base.bitcast(ValidationFeatureDisableEXT, x)

convert(T::Type{IndirectCommandsTokenTypeNV}, x::VkIndirectCommandsTokenTypeNV) = Base.bitcast(IndirectCommandsTokenTypeNV, x)

convert(T::Type{DisplayPowerStateEXT}, x::VkDisplayPowerStateEXT) = Base.bitcast(DisplayPowerStateEXT, x)

convert(T::Type{DeviceEventTypeEXT}, x::VkDeviceEventTypeEXT) = Base.bitcast(DeviceEventTypeEXT, x)

convert(T::Type{DisplayEventTypeEXT}, x::VkDisplayEventTypeEXT) = Base.bitcast(DisplayEventTypeEXT, x)

convert(T::Type{ViewportCoordinateSwizzleNV}, x::VkViewportCoordinateSwizzleNV) = Base.bitcast(ViewportCoordinateSwizzleNV, x)

convert(T::Type{DiscardRectangleModeEXT}, x::VkDiscardRectangleModeEXT) = Base.bitcast(DiscardRectangleModeEXT, x)

convert(T::Type{PointClippingBehavior}, x::VkPointClippingBehavior) = Base.bitcast(PointClippingBehavior, x)

convert(T::Type{SamplerReductionMode}, x::VkSamplerReductionMode) = Base.bitcast(SamplerReductionMode, x)

convert(T::Type{TessellationDomainOrigin}, x::VkTessellationDomainOrigin) = Base.bitcast(TessellationDomainOrigin, x)

convert(T::Type{SamplerYcbcrModelConversion}, x::VkSamplerYcbcrModelConversion) = Base.bitcast(SamplerYcbcrModelConversion, x)

convert(T::Type{SamplerYcbcrRange}, x::VkSamplerYcbcrRange) = Base.bitcast(SamplerYcbcrRange, x)

convert(T::Type{ChromaLocation}, x::VkChromaLocation) = Base.bitcast(ChromaLocation, x)

convert(T::Type{BlendOverlapEXT}, x::VkBlendOverlapEXT) = Base.bitcast(BlendOverlapEXT, x)

convert(T::Type{CoverageModulationModeNV}, x::VkCoverageModulationModeNV) = Base.bitcast(CoverageModulationModeNV, x)

convert(T::Type{CoverageReductionModeNV}, x::VkCoverageReductionModeNV) = Base.bitcast(CoverageReductionModeNV, x)

convert(T::Type{ValidationCacheHeaderVersionEXT}, x::VkValidationCacheHeaderVersionEXT) = Base.bitcast(ValidationCacheHeaderVersionEXT, x)

convert(T::Type{ShaderInfoTypeAMD}, x::VkShaderInfoTypeAMD) = Base.bitcast(ShaderInfoTypeAMD, x)

convert(T::Type{QueueGlobalPriorityEXT}, x::VkQueueGlobalPriorityEXT) = Base.bitcast(QueueGlobalPriorityEXT, x)

convert(T::Type{ConservativeRasterizationModeEXT}, x::VkConservativeRasterizationModeEXT) = Base.bitcast(ConservativeRasterizationModeEXT, x)

convert(T::Type{VendorId}, x::VkVendorId) = Base.bitcast(VendorId, x)

convert(T::Type{DriverId}, x::VkDriverId) = Base.bitcast(DriverId, x)

convert(T::Type{ShadingRatePaletteEntryNV}, x::VkShadingRatePaletteEntryNV) = Base.bitcast(ShadingRatePaletteEntryNV, x)

convert(T::Type{CoarseSampleOrderTypeNV}, x::VkCoarseSampleOrderTypeNV) = Base.bitcast(CoarseSampleOrderTypeNV, x)

convert(T::Type{CopyAccelerationStructureModeKHR}, x::VkCopyAccelerationStructureModeKHR) = Base.bitcast(CopyAccelerationStructureModeKHR, x)

convert(T::Type{BuildAccelerationStructureModeKHR}, x::VkBuildAccelerationStructureModeKHR) = Base.bitcast(BuildAccelerationStructureModeKHR, x)

convert(T::Type{AccelerationStructureTypeKHR}, x::VkAccelerationStructureTypeKHR) = Base.bitcast(AccelerationStructureTypeKHR, x)

convert(T::Type{GeometryTypeKHR}, x::VkGeometryTypeKHR) = Base.bitcast(GeometryTypeKHR, x)

convert(T::Type{AccelerationStructureMemoryRequirementsTypeNV}, x::VkAccelerationStructureMemoryRequirementsTypeNV) = Base.bitcast(AccelerationStructureMemoryRequirementsTypeNV, x)

convert(T::Type{AccelerationStructureBuildTypeKHR}, x::VkAccelerationStructureBuildTypeKHR) = Base.bitcast(AccelerationStructureBuildTypeKHR, x)

convert(T::Type{RayTracingShaderGroupTypeKHR}, x::VkRayTracingShaderGroupTypeKHR) = Base.bitcast(RayTracingShaderGroupTypeKHR, x)

convert(T::Type{AccelerationStructureCompatibilityKHR}, x::VkAccelerationStructureCompatibilityKHR) = Base.bitcast(AccelerationStructureCompatibilityKHR, x)

convert(T::Type{ShaderGroupShaderKHR}, x::VkShaderGroupShaderKHR) = Base.bitcast(ShaderGroupShaderKHR, x)

convert(T::Type{MemoryOverallocationBehaviorAMD}, x::VkMemoryOverallocationBehaviorAMD) = Base.bitcast(MemoryOverallocationBehaviorAMD, x)

convert(T::Type{ScopeNV}, x::VkScopeNV) = Base.bitcast(ScopeNV, x)

convert(T::Type{ComponentTypeNV}, x::VkComponentTypeNV) = Base.bitcast(ComponentTypeNV, x)

convert(T::Type{FullScreenExclusiveEXT}, x::VkFullScreenExclusiveEXT) = Base.bitcast(FullScreenExclusiveEXT, x)

convert(T::Type{PerformanceCounterScopeKHR}, x::VkPerformanceCounterScopeKHR) = Base.bitcast(PerformanceCounterScopeKHR, x)

convert(T::Type{PerformanceCounterUnitKHR}, x::VkPerformanceCounterUnitKHR) = Base.bitcast(PerformanceCounterUnitKHR, x)

convert(T::Type{PerformanceCounterStorageKHR}, x::VkPerformanceCounterStorageKHR) = Base.bitcast(PerformanceCounterStorageKHR, x)

convert(T::Type{PerformanceConfigurationTypeINTEL}, x::VkPerformanceConfigurationTypeINTEL) = Base.bitcast(PerformanceConfigurationTypeINTEL, x)

convert(T::Type{QueryPoolSamplingModeINTEL}, x::VkQueryPoolSamplingModeINTEL) = Base.bitcast(QueryPoolSamplingModeINTEL, x)

convert(T::Type{PerformanceOverrideTypeINTEL}, x::VkPerformanceOverrideTypeINTEL) = Base.bitcast(PerformanceOverrideTypeINTEL, x)

convert(T::Type{PerformanceParameterTypeINTEL}, x::VkPerformanceParameterTypeINTEL) = Base.bitcast(PerformanceParameterTypeINTEL, x)

convert(T::Type{PerformanceValueTypeINTEL}, x::VkPerformanceValueTypeINTEL) = Base.bitcast(PerformanceValueTypeINTEL, x)

convert(T::Type{ShaderFloatControlsIndependence}, x::VkShaderFloatControlsIndependence) = Base.bitcast(ShaderFloatControlsIndependence, x)

convert(T::Type{PipelineExecutableStatisticFormatKHR}, x::VkPipelineExecutableStatisticFormatKHR) = Base.bitcast(PipelineExecutableStatisticFormatKHR, x)

convert(T::Type{LineRasterizationModeEXT}, x::VkLineRasterizationModeEXT) = Base.bitcast(LineRasterizationModeEXT, x)

convert(T::Type{FragmentShadingRateCombinerOpKHR}, x::VkFragmentShadingRateCombinerOpKHR) = Base.bitcast(FragmentShadingRateCombinerOpKHR, x)

convert(T::Type{FragmentShadingRateNV}, x::VkFragmentShadingRateNV) = Base.bitcast(FragmentShadingRateNV, x)

convert(T::Type{FragmentShadingRateTypeNV}, x::VkFragmentShadingRateTypeNV) = Base.bitcast(FragmentShadingRateTypeNV, x)

convert(T::Type{ProvokingVertexModeEXT}, x::VkProvokingVertexModeEXT) = Base.bitcast(ProvokingVertexModeEXT, x)

convert(T::Type{QueryResultStatusKHR}, x::VkQueryResultStatusKHR) = Base.bitcast(QueryResultStatusKHR, x)


function create_instance(create_info::_InstanceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}
    pInstance = Ref{VkInstance}()
    @check vkCreateInstance(create_info, allocator, pInstance)
    Instance(pInstance[], (x->destroy_instance(x; allocator)))
end

destroy_instance(instance::Instance; allocator = C_NULL)::Cvoid = vkDestroyInstance(instance, allocator)

function enumerate_physical_devices(instance::Instance)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}
    pPhysicalDeviceCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, C_NULL)
            pPhysicalDevices = Vector{VkPhysicalDevice}(undef, pPhysicalDeviceCount[])
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices)
        end
    PhysicalDevice.(pPhysicalDevices, identity, instance)
end

get_device_proc_addr(device::Device, name::AbstractString)::FunctionPtr = vkGetDeviceProcAddr(device, name)

get_instance_proc_addr(name::AbstractString; instance = C_NULL)::FunctionPtr = vkGetInstanceProcAddr(instance, name)

function get_physical_device_properties(physical_device::PhysicalDevice)::PhysicalDeviceProperties
    pProperties = Ref{VkPhysicalDeviceProperties}()
    vkGetPhysicalDeviceProperties(physical_device, pProperties)
    from_vk(PhysicalDeviceProperties, pProperties[])
end

function get_physical_device_queue_family_properties(physical_device::PhysicalDevice)::Vector{QueueFamilyProperties}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, C_NULL)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    from_vk.(QueueFamilyProperties, pQueueFamilyProperties)
end

function get_physical_device_memory_properties(physical_device::PhysicalDevice)::PhysicalDeviceMemoryProperties
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties}()
    vkGetPhysicalDeviceMemoryProperties(physical_device, pMemoryProperties)
    from_vk(PhysicalDeviceMemoryProperties, pMemoryProperties[])
end

function get_physical_device_features(physical_device::PhysicalDevice)::_PhysicalDeviceFeatures
    pFeatures = Ref{VkPhysicalDeviceFeatures}()
    vkGetPhysicalDeviceFeatures(physical_device, pFeatures)
    from_vk(_PhysicalDeviceFeatures, pFeatures[])
end

function get_physical_device_format_properties(physical_device::PhysicalDevice, format::Format)::FormatProperties
    pFormatProperties = Ref{VkFormatProperties}()
    vkGetPhysicalDeviceFormatProperties(physical_device, format, pFormatProperties)
    from_vk(FormatProperties, pFormatProperties[])
end

function get_physical_device_image_format_properties(physical_device::PhysicalDevice, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties}()
    @check vkGetPhysicalDeviceImageFormatProperties(physical_device, format, type, tiling, usage, flags, pImageFormatProperties)
    from_vk(ImageFormatProperties, pImageFormatProperties[])
end

function create_device(physical_device::PhysicalDevice, create_info::_DeviceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}
    pDevice = Ref{VkDevice}()
    @check vkCreateDevice(physical_device, create_info, allocator, pDevice)
    Device(pDevice[], (x->destroy_device(x; allocator)), physical_device)
end

destroy_device(device::Device; allocator = C_NULL)::Cvoid = vkDestroyDevice(device, allocator)

function enumerate_instance_version()::ResultTypes.Result{VersionNumber, VulkanError}
    pApiVersion = Ref{UInt32}()
    @check vkEnumerateInstanceVersion(pApiVersion)
    from_vk(VersionNumber, pApiVersion[])
end

function enumerate_instance_layer_properties()::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, C_NULL)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties)
        end
    from_vk.(LayerProperties, pProperties)
end

function enumerate_instance_extension_properties(; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, C_NULL)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, pProperties)
        end
    from_vk.(ExtensionProperties, pProperties)
end

function enumerate_device_layer_properties(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(LayerProperties, pProperties)
end

function enumerate_device_extension_properties(physical_device::PhysicalDevice; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, C_NULL)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, pProperties)
        end
    from_vk.(ExtensionProperties, pProperties)
end

function get_device_queue(device::Device, queue_family_index::Integer, queue_index::Integer)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue(device, queue_family_index, queue_index, pQueue)
    Queue(pQueue[], identity, device)
end

queue_submit(queue::Queue, submits::AbstractArray; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit(queue, pointer_length(submits), submits, fence))

queue_wait_idle(queue::Queue)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueWaitIdle(queue))

device_wait_idle(device::Device)::ResultTypes.Result{Result, VulkanError} = @check(vkDeviceWaitIdle(device))

function allocate_memory(device::Device, allocate_info::_MemoryAllocateInfo; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}
    pMemory = Ref{VkDeviceMemory}()
    @check vkAllocateMemory(device, allocate_info, allocator, pMemory)
    DeviceMemory(pMemory[], (x->free_memory(device, x; allocator)), device)
end

free_memory(device::Device, memory::DeviceMemory; allocator = C_NULL)::Cvoid = vkFreeMemory(device, memory, allocator)

function map_memory(device::Device, memory::DeviceMemory, offset::Integer, size::Integer; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}
    ppData = Ref{Ptr{Cvoid}}()
    @check vkMapMemory(device, memory, offset, size, flags, ppData)
    ppData[]
end

unmap_memory(device::Device, memory::DeviceMemory)::Cvoid = vkUnmapMemory(device, memory)

flush_mapped_memory_ranges(device::Device, memory_ranges::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkFlushMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges))

invalidate_mapped_memory_ranges(device::Device, memory_ranges::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkInvalidateMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges))

function get_device_memory_commitment(device::Device, memory::DeviceMemory)::UInt64
    pCommittedMemoryInBytes = Ref{VkDeviceSize}()
    vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes)
    pCommittedMemoryInBytes[]
end

function get_buffer_memory_requirements(device::Device, buffer::Buffer)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

bind_buffer_memory(device::Device, buffer::Buffer, memory::DeviceMemory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory(device, buffer, memory, memory_offset))

function get_image_memory_requirements(device::Device, image::Image)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetImageMemoryRequirements(device, image, pMemoryRequirements)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

bind_image_memory(device::Device, image::Image, memory::DeviceMemory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory(device, image, memory, memory_offset))

function get_image_sparse_memory_requirements(device::Device, image::Image)::Vector{SparseImageMemoryRequirements}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, C_NULL)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    from_vk.(SparseImageMemoryRequirements, pSparseMemoryRequirements)
end

function get_physical_device_sparse_image_format_properties(physical_device::PhysicalDevice, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling)::Vector{SparseImageFormatProperties}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, C_NULL)
    pProperties = Vector{VkSparseImageFormatProperties}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, pProperties)
    from_vk.(SparseImageFormatProperties, pProperties)
end

queue_bind_sparse(queue::Queue, bind_info::AbstractArray; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueBindSparse(queue, pointer_length(bind_info), bind_info, fence))

function create_fence(device::Device, create_info::_FenceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkCreateFence(device, create_info, allocator, pFence)
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

destroy_fence(device::Device, fence::Fence; allocator = C_NULL)::Cvoid = vkDestroyFence(device, fence, allocator)

reset_fences(device::Device, fences::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkResetFences(device, pointer_length(fences), fences))

get_fence_status(device::Device, fence::Fence)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceStatus(device, fence))

wait_for_fences(device::Device, fences::AbstractArray, wait_all::Bool, timeout::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitForFences(device, pointer_length(fences), fences, wait_all, timeout))

function create_semaphore(device::Device, create_info::_SemaphoreCreateInfo; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}
    pSemaphore = Ref{VkSemaphore}()
    @check vkCreateSemaphore(device, create_info, allocator, pSemaphore)
    Semaphore(pSemaphore[], (x->destroy_semaphore(device, x; allocator)), device)
end

destroy_semaphore(device::Device, semaphore::Semaphore; allocator = C_NULL)::Cvoid = vkDestroySemaphore(device, semaphore, allocator)

function create_event(device::Device, create_info::_EventCreateInfo; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}
    pEvent = Ref{VkEvent}()
    @check vkCreateEvent(device, create_info, allocator, pEvent)
    Event(pEvent[], (x->destroy_event(device, x; allocator)), device)
end

destroy_event(device::Device, event::Event; allocator = C_NULL)::Cvoid = vkDestroyEvent(device, event, allocator)

get_event_status(device::Device, event::Event)::ResultTypes.Result{Result, VulkanError} = @check(vkGetEventStatus(device, event))

set_event(device::Device, event::Event)::ResultTypes.Result{Result, VulkanError} = @check(vkSetEvent(device, event))

reset_event(device::Device, event::Event)::ResultTypes.Result{Result, VulkanError} = @check(vkResetEvent(device, event))

function create_query_pool(device::Device, create_info::_QueryPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}
    pQueryPool = Ref{VkQueryPool}()
    @check vkCreateQueryPool(device, create_info, allocator, pQueryPool)
    QueryPool(pQueryPool[], (x->destroy_query_pool(device, x; allocator)), device)
end

destroy_query_pool(device::Device, query_pool::QueryPool; allocator = C_NULL)::Cvoid = vkDestroyQueryPool(device, query_pool, allocator)

get_query_pool_results(device::Device, query_pool::QueryPool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkGetQueryPoolResults(device, query_pool, first_query, query_count, data_size, data, stride, flags))

reset_query_pool(device::Device, query_pool::QueryPool, first_query::Integer, query_count::Integer)::Cvoid = vkResetQueryPool(device, query_pool, first_query, query_count)

function create_buffer(device::Device, create_info::_BufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}
    pBuffer = Ref{VkBuffer}()
    @check vkCreateBuffer(device, create_info, allocator, pBuffer)
    Buffer(pBuffer[], (x->destroy_buffer(device, x; allocator)), device)
end

destroy_buffer(device::Device, buffer::Buffer; allocator = C_NULL)::Cvoid = vkDestroyBuffer(device, buffer, allocator)

function create_buffer_view(device::Device, create_info::_BufferViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}
    pView = Ref{VkBufferView}()
    @check vkCreateBufferView(device, create_info, allocator, pView)
    BufferView(pView[], (x->destroy_buffer_view(device, x; allocator)), device)
end

destroy_buffer_view(device::Device, buffer_view::BufferView; allocator = C_NULL)::Cvoid = vkDestroyBufferView(device, buffer_view, allocator)

function create_image(device::Device, create_info::_ImageCreateInfo; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}
    pImage = Ref{VkImage}()
    @check vkCreateImage(device, create_info, allocator, pImage)
    Image(pImage[], (x->destroy_image(device, x; allocator)), device)
end

destroy_image(device::Device, image::Image; allocator = C_NULL)::Cvoid = vkDestroyImage(device, image, allocator)

function get_image_subresource_layout(device::Device, image::Image, subresource::_ImageSubresource)::SubresourceLayout
    pLayout = Ref{VkSubresourceLayout}()
    vkGetImageSubresourceLayout(device, image, subresource, pLayout)
    from_vk(SubresourceLayout, pLayout[])
end

function create_image_view(device::Device, create_info::_ImageViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}
    pView = Ref{VkImageView}()
    @check vkCreateImageView(device, create_info, allocator, pView)
    ImageView(pView[], (x->destroy_image_view(device, x; allocator)), device)
end

destroy_image_view(device::Device, image_view::ImageView; allocator = C_NULL)::Cvoid = vkDestroyImageView(device, image_view, allocator)

function create_shader_module(device::Device, create_info::_ShaderModuleCreateInfo; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}
    pShaderModule = Ref{VkShaderModule}()
    @check vkCreateShaderModule(device, create_info, allocator, pShaderModule)
    ShaderModule(pShaderModule[], (x->destroy_shader_module(device, x; allocator)), device)
end

destroy_shader_module(device::Device, shader_module::ShaderModule; allocator = C_NULL)::Cvoid = vkDestroyShaderModule(device, shader_module, allocator)

function create_pipeline_cache(device::Device, create_info::_PipelineCacheCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}
    pPipelineCache = Ref{VkPipelineCache}()
    @check vkCreatePipelineCache(device, create_info, allocator, pPipelineCache)
    PipelineCache(pPipelineCache[], (x->destroy_pipeline_cache(device, x; allocator)), device)
end

destroy_pipeline_cache(device::Device, pipeline_cache::PipelineCache; allocator = C_NULL)::Cvoid = vkDestroyPipelineCache(device, pipeline_cache, allocator)

function get_pipeline_cache_data(device::Device, pipeline_cache::PipelineCache)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, C_NULL)
            pData = Libc.malloc(pDataSize[])
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, pData)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

merge_pipeline_caches(device::Device, dst_cache::PipelineCache, src_caches::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkMergePipelineCaches(device, dst_cache, pointer_length(src_caches), src_caches))

function create_graphics_pipelines(device::Device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateGraphicsPipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

function create_compute_pipelines(device::Device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateComputePipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

destroy_pipeline(device::Device, pipeline::Pipeline; allocator = C_NULL)::Cvoid = vkDestroyPipeline(device, pipeline, allocator)

function create_pipeline_layout(device::Device, create_info::_PipelineLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}
    pPipelineLayout = Ref{VkPipelineLayout}()
    @check vkCreatePipelineLayout(device, create_info, allocator, pPipelineLayout)
    PipelineLayout(pPipelineLayout[], (x->destroy_pipeline_layout(device, x; allocator)), device)
end

destroy_pipeline_layout(device::Device, pipeline_layout::PipelineLayout; allocator = C_NULL)::Cvoid = vkDestroyPipelineLayout(device, pipeline_layout, allocator)

function create_sampler(device::Device, create_info::_SamplerCreateInfo; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}
    pSampler = Ref{VkSampler}()
    @check vkCreateSampler(device, create_info, allocator, pSampler)
    Sampler(pSampler[], (x->destroy_sampler(device, x; allocator)), device)
end

destroy_sampler(device::Device, sampler::Sampler; allocator = C_NULL)::Cvoid = vkDestroySampler(device, sampler, allocator)

function create_descriptor_set_layout(device::Device, create_info::_DescriptorSetLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}
    pSetLayout = Ref{VkDescriptorSetLayout}()
    @check vkCreateDescriptorSetLayout(device, create_info, allocator, pSetLayout)
    DescriptorSetLayout(pSetLayout[], (x->destroy_descriptor_set_layout(device, x; allocator)), device)
end

destroy_descriptor_set_layout(device::Device, descriptor_set_layout::DescriptorSetLayout; allocator = C_NULL)::Cvoid = vkDestroyDescriptorSetLayout(device, descriptor_set_layout, allocator)

function create_descriptor_pool(device::Device, create_info::_DescriptorPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}
    pDescriptorPool = Ref{VkDescriptorPool}()
    @check vkCreateDescriptorPool(device, create_info, allocator, pDescriptorPool)
    DescriptorPool(pDescriptorPool[], (x->destroy_descriptor_pool(device, x; allocator)), device)
end

destroy_descriptor_pool(device::Device, descriptor_pool::DescriptorPool; allocator = C_NULL)::Cvoid = vkDestroyDescriptorPool(device, descriptor_pool, allocator)

reset_descriptor_pool(device::Device, descriptor_pool::DescriptorPool; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetDescriptorPool(device, descriptor_pool, flags))

function allocate_descriptor_sets(device::Device, allocate_info::_DescriptorSetAllocateInfo)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}
    pDescriptorSets = Vector{VkDescriptorSet}(undef, allocate_info.vks.descriptorSetCount)
    @check vkAllocateDescriptorSets(device, allocate_info, pDescriptorSets)
    DescriptorSet.(pDescriptorSets, identity, getproperty(allocate_info, :descriptor_pool))
end

free_descriptor_sets(device::Device, descriptor_pool::DescriptorPool, descriptor_sets::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkFreeDescriptorSets(device, descriptor_pool, pointer_length(descriptor_sets), descriptor_sets))

update_descriptor_sets(device::Device, descriptor_writes::AbstractArray, descriptor_copies::AbstractArray)::Cvoid = vkUpdateDescriptorSets(device, pointer_length(descriptor_writes), descriptor_writes, pointer_length(descriptor_copies), descriptor_copies)

function create_framebuffer(device::Device, create_info::_FramebufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}
    pFramebuffer = Ref{VkFramebuffer}()
    @check vkCreateFramebuffer(device, create_info, allocator, pFramebuffer)
    Framebuffer(pFramebuffer[], (x->destroy_framebuffer(device, x; allocator)), device)
end

destroy_framebuffer(device::Device, framebuffer::Framebuffer; allocator = C_NULL)::Cvoid = vkDestroyFramebuffer(device, framebuffer, allocator)

function create_render_pass(device::Device, create_info::_RenderPassCreateInfo; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass(device, create_info, allocator, pRenderPass)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x; allocator)), device)
end

destroy_render_pass(device::Device, render_pass::RenderPass; allocator = C_NULL)::Cvoid = vkDestroyRenderPass(device, render_pass, allocator)

function get_render_area_granularity(device::Device, render_pass::RenderPass)::_Extent2D
    pGranularity = Ref{VkExtent2D}()
    vkGetRenderAreaGranularity(device, render_pass, pGranularity)
    from_vk(_Extent2D, pGranularity[])
end

function create_command_pool(device::Device, create_info::_CommandPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}
    pCommandPool = Ref{VkCommandPool}()
    @check vkCreateCommandPool(device, create_info, allocator, pCommandPool)
    CommandPool(pCommandPool[], (x->destroy_command_pool(device, x; allocator)), device)
end

destroy_command_pool(device::Device, command_pool::CommandPool; allocator = C_NULL)::Cvoid = vkDestroyCommandPool(device, command_pool, allocator)

reset_command_pool(device::Device, command_pool::CommandPool; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandPool(device, command_pool, flags))

function allocate_command_buffers(device::Device, allocate_info::_CommandBufferAllocateInfo)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}
    pCommandBuffers = Vector{VkCommandBuffer}(undef, allocate_info.vks.commandBufferCount)
    @check vkAllocateCommandBuffers(device, allocate_info, pCommandBuffers)
    CommandBuffer.(pCommandBuffers, identity, getproperty(allocate_info, :command_pool))
end

free_command_buffers(device::Device, command_pool::CommandPool, command_buffers::AbstractArray)::Cvoid = vkFreeCommandBuffers(device, command_pool, pointer_length(command_buffers), command_buffers)

begin_command_buffer(command_buffer::CommandBuffer, begin_info::_CommandBufferBeginInfo)::ResultTypes.Result{Result, VulkanError} = @check(vkBeginCommandBuffer(command_buffer, begin_info))

end_command_buffer(command_buffer::CommandBuffer)::ResultTypes.Result{Result, VulkanError} = @check(vkEndCommandBuffer(command_buffer))

reset_command_buffer(command_buffer::CommandBuffer; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandBuffer(command_buffer, flags))

cmd_bind_pipeline(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline)::Cvoid = vkCmdBindPipeline(command_buffer, pipeline_bind_point, pipeline)

cmd_set_viewport(command_buffer::CommandBuffer, viewports::AbstractArray)::Cvoid = vkCmdSetViewport(command_buffer, 0, pointer_length(viewports), viewports)

cmd_set_scissor(command_buffer::CommandBuffer, scissors::AbstractArray)::Cvoid = vkCmdSetScissor(command_buffer, 0, pointer_length(scissors), scissors)

cmd_set_line_width(command_buffer::CommandBuffer, line_width::Real)::Cvoid = vkCmdSetLineWidth(command_buffer, line_width)

cmd_set_depth_bias(command_buffer::CommandBuffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real)::Cvoid = vkCmdSetDepthBias(command_buffer, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor)

cmd_set_blend_constants(command_buffer::CommandBuffer, blend_constants::NTuple{4, Float32})::Cvoid = vkCmdSetBlendConstants(command_buffer, blend_constants)

cmd_set_depth_bounds(command_buffer::CommandBuffer, min_depth_bounds::Real, max_depth_bounds::Real)::Cvoid = vkCmdSetDepthBounds(command_buffer, min_depth_bounds, max_depth_bounds)

cmd_set_stencil_compare_mask(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, compare_mask::Integer)::Cvoid = vkCmdSetStencilCompareMask(command_buffer, face_mask, compare_mask)

cmd_set_stencil_write_mask(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, write_mask::Integer)::Cvoid = vkCmdSetStencilWriteMask(command_buffer, face_mask, write_mask)

cmd_set_stencil_reference(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, reference::Integer)::Cvoid = vkCmdSetStencilReference(command_buffer, face_mask, reference)

cmd_bind_descriptor_sets(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, layout::PipelineLayout, first_set::Integer, descriptor_sets::AbstractArray, dynamic_offsets::AbstractArray)::Cvoid = vkCmdBindDescriptorSets(command_buffer, pipeline_bind_point, layout, first_set, pointer_length(descriptor_sets), descriptor_sets, pointer_length(dynamic_offsets), dynamic_offsets)

cmd_bind_index_buffer(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, index_type::IndexType)::Cvoid = vkCmdBindIndexBuffer(command_buffer, buffer, offset, index_type)

cmd_bind_vertex_buffers(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray)::Cvoid = vkCmdBindVertexBuffers(command_buffer, 0, pointer_length(buffers), buffers, offsets)

cmd_draw(command_buffer::CommandBuffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer)::Cvoid = vkCmdDraw(command_buffer, vertex_count, instance_count, first_vertex, first_instance)

cmd_draw_indexed(command_buffer::CommandBuffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer)::Cvoid = vkCmdDrawIndexed(command_buffer, index_count, instance_count, first_index, vertex_offset, first_instance)

cmd_draw_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawIndirect(command_buffer, buffer, offset, draw_count, stride)

cmd_draw_indexed_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawIndexedIndirect(command_buffer, buffer, offset, draw_count, stride)

cmd_dispatch(command_buffer::CommandBuffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid = vkCmdDispatch(command_buffer, group_count_x, group_count_y, group_count_z)

cmd_dispatch_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer)::Cvoid = vkCmdDispatchIndirect(command_buffer, buffer, offset)

cmd_copy_buffer(command_buffer::CommandBuffer, src_buffer::Buffer, dst_buffer::Buffer, regions::AbstractArray)::Cvoid = vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, pointer_length(regions), regions)

cmd_copy_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray)::Cvoid = vkCmdCopyImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions)

cmd_blit_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter)::Cvoid = vkCmdBlitImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, filter)

cmd_copy_buffer_to_image(command_buffer::CommandBuffer, src_buffer::Buffer, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray)::Cvoid = vkCmdCopyBufferToImage(command_buffer, src_buffer, dst_image, dst_image_layout, pointer_length(regions), regions)

cmd_copy_image_to_buffer(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_buffer::Buffer, regions::AbstractArray)::Cvoid = vkCmdCopyImageToBuffer(command_buffer, src_image, src_image_layout, dst_buffer, pointer_length(regions), regions)

cmd_update_buffer(command_buffer::CommandBuffer, dst_buffer::Buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid})::Cvoid = vkCmdUpdateBuffer(command_buffer, dst_buffer, dst_offset, data_size, data)

cmd_fill_buffer(command_buffer::CommandBuffer, dst_buffer::Buffer, dst_offset::Integer, size::Integer, data::Integer)::Cvoid = vkCmdFillBuffer(command_buffer, dst_buffer, dst_offset, size, data)

cmd_clear_color_image(command_buffer::CommandBuffer, image::Image, image_layout::ImageLayout, color::VkClearColorValue, ranges::AbstractArray)::Cvoid = vkCmdClearColorImage(command_buffer, image, image_layout, Ref(color), pointer_length(ranges), ranges)

cmd_clear_depth_stencil_image(command_buffer::CommandBuffer, image::Image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray)::Cvoid = vkCmdClearDepthStencilImage(command_buffer, image, image_layout, depth_stencil, pointer_length(ranges), ranges)

cmd_clear_attachments(command_buffer::CommandBuffer, attachments::AbstractArray, rects::AbstractArray)::Cvoid = vkCmdClearAttachments(command_buffer, pointer_length(attachments), attachments, pointer_length(rects), rects)

cmd_resolve_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray)::Cvoid = vkCmdResolveImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions)

cmd_set_event(command_buffer::CommandBuffer, event::Event, stage_mask::PipelineStageFlag)::Cvoid = vkCmdSetEvent(command_buffer, event, stage_mask)

cmd_reset_event(command_buffer::CommandBuffer, event::Event, stage_mask::PipelineStageFlag)::Cvoid = vkCmdResetEvent(command_buffer, event, stage_mask)

cmd_wait_events(command_buffer::CommandBuffer, events::AbstractArray, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid = vkCmdWaitEvents(command_buffer, pointer_length(events), events, src_stage_mask, dst_stage_mask, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers)

cmd_pipeline_barrier(command_buffer::CommandBuffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; dependency_flags = 0)::Cvoid = vkCmdPipelineBarrier(command_buffer, src_stage_mask, dst_stage_mask, dependency_flags, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers)

cmd_begin_query(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer; flags = 0)::Cvoid = vkCmdBeginQuery(command_buffer, query_pool, query, flags)

cmd_end_query(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer)::Cvoid = vkCmdEndQuery(command_buffer, query_pool, query)

cmd_begin_conditional_rendering_ext(command_buffer::CommandBuffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT)::Cvoid = vkCmdBeginConditionalRenderingEXT(command_buffer, conditional_rendering_begin)

cmd_end_conditional_rendering_ext(command_buffer::CommandBuffer)::Cvoid = vkCmdEndConditionalRenderingEXT(command_buffer)

cmd_reset_query_pool(command_buffer::CommandBuffer, query_pool::QueryPool, first_query::Integer, query_count::Integer)::Cvoid = vkCmdResetQueryPool(command_buffer, query_pool, first_query, query_count)

cmd_write_timestamp(command_buffer::CommandBuffer, pipeline_stage::PipelineStageFlag, query_pool::QueryPool, query::Integer)::Cvoid = vkCmdWriteTimestamp(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), query_pool, query)

cmd_copy_query_pool_results(command_buffer::CommandBuffer, query_pool::QueryPool, first_query::Integer, query_count::Integer, dst_buffer::Buffer, dst_offset::Integer, stride::Integer; flags = 0)::Cvoid = vkCmdCopyQueryPoolResults(command_buffer, query_pool, first_query, query_count, dst_buffer, dst_offset, stride, flags)

cmd_push_constants(command_buffer::CommandBuffer, layout::PipelineLayout, stage_flags::ShaderStageFlag, offset::Integer, values::Ptr{Cvoid})::Cvoid = vkCmdPushConstants(command_buffer, layout, stage_flags, offset, pointer_length(values), values)

cmd_begin_render_pass(command_buffer::CommandBuffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents)::Cvoid = vkCmdBeginRenderPass(command_buffer, render_pass_begin, contents)

cmd_next_subpass(command_buffer::CommandBuffer, contents::SubpassContents)::Cvoid = vkCmdNextSubpass(command_buffer, contents)

cmd_end_render_pass(command_buffer::CommandBuffer)::Cvoid = vkCmdEndRenderPass(command_buffer)

cmd_execute_commands(command_buffer::CommandBuffer, command_buffers::AbstractArray)::Cvoid = vkCmdExecuteCommands(command_buffer, pointer_length(command_buffers), command_buffers)

function create_android_surface_khr(instance::Instance, create_info::_AndroidSurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateAndroidSurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function get_physical_device_display_properties_khr(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayPropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(DisplayPropertiesKHR, pProperties)
end

function get_physical_device_display_plane_properties_khr(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayPlanePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(DisplayPlanePropertiesKHR, pProperties)
end

function get_display_plane_supported_displays_khr(physical_device::PhysicalDevice, plane_index::Integer)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}
    pDisplayCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, C_NULL)
            pDisplays = Vector{VkDisplayKHR}(undef, pDisplayCount[])
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, pDisplays)
        end
    DisplayKHR.(pDisplays, identity, physical_device)
end

function get_display_mode_properties_khr(physical_device::PhysicalDevice, display::DisplayKHR)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayModePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, pProperties)
        end
    from_vk.(DisplayModePropertiesKHR, pProperties)
end

function create_display_mode_khr(physical_device::PhysicalDevice, display::DisplayKHR, create_info::_DisplayModeCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}
    pMode = Ref{VkDisplayModeKHR}()
    @check vkCreateDisplayModeKHR(physical_device, display, create_info, allocator, pMode)
    DisplayModeKHR(pMode[], identity, display)
end

function get_display_plane_capabilities_khr(physical_device::PhysicalDevice, mode::DisplayModeKHR, plane_index::Integer)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilitiesKHR}()
    @check vkGetDisplayPlaneCapabilitiesKHR(physical_device, mode, plane_index, pCapabilities)
    from_vk(DisplayPlaneCapabilitiesKHR, pCapabilities[])
end

function create_display_plane_surface_khr(instance::Instance, create_info::_DisplaySurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateDisplayPlaneSurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_shared_swapchains_khr(device::Device, create_infos::AbstractArray; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}
    pSwapchains = Vector{VkSwapchainKHR}(undef, pointer_length(create_infos))
    @check vkCreateSharedSwapchainsKHR(device, pointer_length(create_infos), create_infos, allocator, pSwapchains)
    SwapchainKHR.(pSwapchains, (x->destroy_swapchain_khr(device, x; allocator)), getproperty(create_infos, :surface))
end

destroy_surface_khr(instance::Instance, surface::SurfaceKHR; allocator = C_NULL)::Cvoid = vkDestroySurfaceKHR(instance, surface, allocator)

function get_physical_device_surface_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, surface::SurfaceKHR)::ResultTypes.Result{Bool, VulkanError}
    pSupported = Ref{VkBool32}()
    @check vkGetPhysicalDeviceSurfaceSupportKHR(physical_device, queue_family_index, surface, pSupported)
    from_vk(Bool, pSupported[])
end

function get_physical_device_surface_capabilities_khr(physical_device::PhysicalDevice, surface::SurfaceKHR)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilitiesKHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device, surface, pSurfaceCapabilities)
    from_vk(SurfaceCapabilitiesKHR, pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_khr(physical_device::PhysicalDevice, surface::SurfaceKHR)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, C_NULL)
            pSurfaceFormats = Vector{VkSurfaceFormatKHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, pSurfaceFormats)
        end
    from_vk.(SurfaceFormatKHR, pSurfaceFormats)
end

function get_physical_device_surface_present_modes_khr(physical_device::PhysicalDevice, surface::SurfaceKHR)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, C_NULL)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, pPresentModes)
        end
    pPresentModes
end

function create_swapchain_khr(device::Device, create_info::_SwapchainCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}
    pSwapchain = Ref{VkSwapchainKHR}()
    @check vkCreateSwapchainKHR(device, create_info, allocator, pSwapchain)
    SwapchainKHR(pSwapchain[], (x->destroy_swapchain_khr(device, x; allocator)), getproperty(create_info, :surface))
end

destroy_swapchain_khr(device::Device, swapchain::SwapchainKHR; allocator = C_NULL)::Cvoid = vkDestroySwapchainKHR(device, swapchain, allocator)

function get_swapchain_images_khr(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{Vector{Image}, VulkanError}
    pSwapchainImageCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, C_NULL)
            pSwapchainImages = Vector{VkImage}(undef, pSwapchainImageCount[])
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages)
        end
    Image.(pSwapchainImages, identity, device)
end

function acquire_next_image_khr(device::Device, swapchain::SwapchainKHR, timeout::Integer; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex)
    (pImageIndex[], _return_code)
end

queue_present_khr(queue::Queue, present_info::_PresentInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkQueuePresentKHR(queue, present_info))

function create_vi_surface_nn(instance::Instance, create_info::_ViSurfaceCreateInfoNN; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateViSurfaceNN(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_wayland_surface_khr(instance::Instance, create_info::_WaylandSurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateWaylandSurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_wayland_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, display::vk.wl_display)::Bool = from_vk(Bool, vkGetPhysicalDeviceWaylandPresentationSupportKHR(physical_device, queue_family_index, to_vk(Ptr{wl_display}, display)))

function create_win_32_surface_khr(instance::Instance, create_info::_Win32SurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateWin32SurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_win_32_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer)::Bool = from_vk(Bool, vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device, queue_family_index))

function create_xlib_surface_khr(instance::Instance, create_info::_XlibSurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateXlibSurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_xlib_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, dpy::vk.Display, visual_id::vk.VisualID)::Bool = from_vk(Bool, vkGetPhysicalDeviceXlibPresentationSupportKHR(physical_device, queue_family_index, Ref(dpy), visual_id))

function create_xcb_surface_khr(instance::Instance, create_info::_XcbSurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateXcbSurfaceKHR(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_xcb_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, connection::vk.xcb_connection_t, visual_id::vk.xcb_visualid_t)::Bool = from_vk(Bool, vkGetPhysicalDeviceXcbPresentationSupportKHR(physical_device, queue_family_index, Ref(connection), visual_id))

function create_direct_fb_surface_ext(instance::Instance, create_info::_DirectFBSurfaceCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateDirectFBSurfaceEXT(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_direct_fb_presentation_support_ext(physical_device::PhysicalDevice, queue_family_index::Integer, dfb::vk.IDirectFB)::Bool = from_vk(Bool, vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physical_device, queue_family_index, to_vk(Ptr{IDirectFB}, dfb)))

function create_image_pipe_surface_fuchsia(instance::Instance, create_info::_ImagePipeSurfaceCreateInfoFUCHSIA; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateImagePipeSurfaceFUCHSIA(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_stream_descriptor_surface_ggp(instance::Instance, create_info::_StreamDescriptorSurfaceCreateInfoGGP; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateStreamDescriptorSurfaceGGP(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_screen_surface_qnx(instance::Instance, create_info::_ScreenSurfaceCreateInfoQNX; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateScreenSurfaceQNX(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

get_physical_device_screen_presentation_support_qnx(physical_device::PhysicalDevice, queue_family_index::Integer, window::vk._screen_window)::Bool = from_vk(Bool, vkGetPhysicalDeviceScreenPresentationSupportQNX(physical_device, queue_family_index, to_vk(Ptr{_screen_window}, window)))

function create_debug_report_callback_ext(instance::Instance, create_info::_DebugReportCallbackCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}
    pCallback = Ref{VkDebugReportCallbackEXT}()
    @check vkCreateDebugReportCallbackEXT(instance, create_info, allocator, pCallback)
    DebugReportCallbackEXT(pCallback[], (x->destroy_debug_report_callback_ext(instance, x; allocator)), instance)
end

destroy_debug_report_callback_ext(instance::Instance, callback::DebugReportCallbackEXT; allocator = C_NULL)::Cvoid = vkDestroyDebugReportCallbackEXT(instance, callback, allocator)

debug_report_message_ext(instance::Instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString)::Cvoid = vkDebugReportMessageEXT(instance, flags, object_type, object, location, message_code, layer_prefix, message)

debug_marker_set_object_name_ext(device::Device, name_info::_DebugMarkerObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectNameEXT(device, name_info))

debug_marker_set_object_tag_ext(device::Device, tag_info::_DebugMarkerObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectTagEXT(device, tag_info))

cmd_debug_marker_begin_ext(command_buffer::CommandBuffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid = vkCmdDebugMarkerBeginEXT(command_buffer, marker_info)

cmd_debug_marker_end_ext(command_buffer::CommandBuffer)::Cvoid = vkCmdDebugMarkerEndEXT(command_buffer)

cmd_debug_marker_insert_ext(command_buffer::CommandBuffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid = vkCmdDebugMarkerInsertEXT(command_buffer, marker_info)

function get_physical_device_external_image_format_properties_nv(physical_device::PhysicalDevice, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}
    pExternalImageFormatProperties = Ref{VkExternalImageFormatPropertiesNV}()
    @check vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physical_device, format, type, tiling, usage, flags, external_handle_type, pExternalImageFormatProperties)
    from_vk(ExternalImageFormatPropertiesNV, pExternalImageFormatProperties[])
end

get_memory_win_32_handle_nv(device::Device, memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleNV(device, memory, handle_type, to_vk(Ptr{HANDLE}, handle)))

cmd_execute_generated_commands_nv(command_buffer::CommandBuffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid = vkCmdExecuteGeneratedCommandsNV(command_buffer, is_preprocessed, generated_commands_info)

cmd_preprocess_generated_commands_nv(command_buffer::CommandBuffer, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid = vkCmdPreprocessGeneratedCommandsNV(command_buffer, generated_commands_info)

cmd_bind_pipeline_shader_group_nv(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, group_index::Integer)::Cvoid = vkCmdBindPipelineShaderGroupNV(command_buffer, pipeline_bind_point, pipeline, group_index)

function get_generated_commands_memory_requirements_nv(device::Device, info::_GeneratedCommandsMemoryRequirementsInfoNV)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetGeneratedCommandsMemoryRequirementsNV(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function create_indirect_commands_layout_nv(device::Device, create_info::_IndirectCommandsLayoutCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}
    pIndirectCommandsLayout = Ref{VkIndirectCommandsLayoutNV}()
    @check vkCreateIndirectCommandsLayoutNV(device, create_info, allocator, pIndirectCommandsLayout)
    IndirectCommandsLayoutNV(pIndirectCommandsLayout[], (x->destroy_indirect_commands_layout_nv(device, x; allocator)), device)
end

destroy_indirect_commands_layout_nv(device::Device, indirect_commands_layout::IndirectCommandsLayoutNV; allocator = C_NULL)::Cvoid = vkDestroyIndirectCommandsLayoutNV(device, indirect_commands_layout, allocator)

function get_physical_device_features_2(physical_device::PhysicalDevice)::_PhysicalDeviceFeatures2
    pFeatures = Ref{VkPhysicalDeviceFeatures2}()
    vkGetPhysicalDeviceFeatures2(physical_device, pFeatures)
    from_vk(_PhysicalDeviceFeatures2, pFeatures[])
end

function get_physical_device_properties_2(physical_device::PhysicalDevice)::PhysicalDeviceProperties2
    pProperties = Ref{VkPhysicalDeviceProperties2}()
    vkGetPhysicalDeviceProperties2(physical_device, pProperties)
    from_vk(PhysicalDeviceProperties2, pProperties[])
end

function get_physical_device_format_properties_2(physical_device::PhysicalDevice, format::Format)::FormatProperties2
    pFormatProperties = Ref{VkFormatProperties2}()
    vkGetPhysicalDeviceFormatProperties2(physical_device, format, pFormatProperties)
    from_vk(FormatProperties2, pFormatProperties[])
end

function get_physical_device_image_format_properties_2(physical_device::PhysicalDevice, image_format_info::_PhysicalDeviceImageFormatInfo2)::ResultTypes.Result{ImageFormatProperties2, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties2}()
    @check vkGetPhysicalDeviceImageFormatProperties2(physical_device, image_format_info, pImageFormatProperties)
    from_vk(ImageFormatProperties2, pImageFormatProperties[])
end

function get_physical_device_queue_family_properties_2(physical_device::PhysicalDevice)::Vector{QueueFamilyProperties2}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, C_NULL)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties2}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    from_vk.(QueueFamilyProperties2, pQueueFamilyProperties)
end

function get_physical_device_memory_properties_2(physical_device::PhysicalDevice)::PhysicalDeviceMemoryProperties2
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties2}()
    vkGetPhysicalDeviceMemoryProperties2(physical_device, pMemoryProperties)
    from_vk(PhysicalDeviceMemoryProperties2, pMemoryProperties[])
end

function get_physical_device_sparse_image_format_properties_2(physical_device::PhysicalDevice, format_info::_PhysicalDeviceSparseImageFormatInfo2)::Vector{SparseImageFormatProperties2}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, C_NULL)
    pProperties = Vector{VkSparseImageFormatProperties2}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, pProperties)
    from_vk.(SparseImageFormatProperties2, pProperties)
end

cmd_push_descriptor_set_khr(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, layout::PipelineLayout, set::Integer, descriptor_writes::AbstractArray)::Cvoid = vkCmdPushDescriptorSetKHR(command_buffer, pipeline_bind_point, layout, set, pointer_length(descriptor_writes), descriptor_writes)

trim_command_pool(device::Device, command_pool::CommandPool; flags = 0)::Cvoid = vkTrimCommandPool(device, command_pool, flags)

function get_physical_device_external_buffer_properties(physical_device::PhysicalDevice, external_buffer_info::_PhysicalDeviceExternalBufferInfo)::ExternalBufferProperties
    pExternalBufferProperties = Ref{VkExternalBufferProperties}()
    vkGetPhysicalDeviceExternalBufferProperties(physical_device, external_buffer_info, pExternalBufferProperties)
    from_vk(ExternalBufferProperties, pExternalBufferProperties[])
end

get_memory_win_32_handle_khr(device::Device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle)))

function get_memory_win_32_handle_properties_khr(device::Device, handle_type::ExternalMemoryHandleTypeFlag, handle::vk.HANDLE)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}
    pMemoryWin32HandleProperties = Ref{VkMemoryWin32HandlePropertiesKHR}()
    @check vkGetMemoryWin32HandlePropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, pMemoryWin32HandleProperties)
    from_vk(MemoryWin32HandlePropertiesKHR, pMemoryWin32HandleProperties[])
end

function get_memory_fd_khr(device::Device, get_fd_info::_MemoryGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetMemoryFdKHR(device, get_fd_info, pFd)
    pFd[]
end

function get_memory_fd_properties_khr(device::Device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}
    pMemoryFdProperties = Ref{VkMemoryFdPropertiesKHR}()
    @check vkGetMemoryFdPropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd, pMemoryFdProperties)
    from_vk(MemoryFdPropertiesKHR, pMemoryFdProperties[])
end

get_memory_zircon_handle_fuchsia(device::Device, get_zircon_handle_info::_MemoryGetZirconHandleInfoFUCHSIA, zircon_handle::vk.zx_handle_t)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryZirconHandleFUCHSIA(device, get_zircon_handle_info, to_vk(Ptr{zx_handle_t}, zircon_handle)))

function get_memory_zircon_handle_properties_fuchsia(device::Device, handle_type::ExternalMemoryHandleTypeFlag, zircon_handle::vk.zx_handle_t)::ResultTypes.Result{MemoryZirconHandlePropertiesFUCHSIA, VulkanError}
    pMemoryZirconHandleProperties = Ref{VkMemoryZirconHandlePropertiesFUCHSIA}()
    @check vkGetMemoryZirconHandlePropertiesFUCHSIA(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), zircon_handle, pMemoryZirconHandleProperties)
    from_vk(MemoryZirconHandlePropertiesFUCHSIA, pMemoryZirconHandleProperties[])
end

function get_physical_device_external_semaphore_properties(physical_device::PhysicalDevice, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo)::ExternalSemaphoreProperties
    pExternalSemaphoreProperties = Ref{VkExternalSemaphoreProperties}()
    vkGetPhysicalDeviceExternalSemaphoreProperties(physical_device, external_semaphore_info, pExternalSemaphoreProperties)
    from_vk(ExternalSemaphoreProperties, pExternalSemaphoreProperties[])
end

get_semaphore_win_32_handle_khr(device::Device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSemaphoreWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle)))

import_semaphore_win_32_handle_khr(device::Device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreWin32HandleKHR(device, import_semaphore_win_32_handle_info))

function get_semaphore_fd_khr(device::Device, get_fd_info::_SemaphoreGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetSemaphoreFdKHR(device, get_fd_info, pFd)
    pFd[]
end

import_semaphore_fd_khr(device::Device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreFdKHR(device, import_semaphore_fd_info))

get_semaphore_zircon_handle_fuchsia(device::Device, get_zircon_handle_info::_SemaphoreGetZirconHandleInfoFUCHSIA, zircon_handle::vk.zx_handle_t)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSemaphoreZirconHandleFUCHSIA(device, get_zircon_handle_info, to_vk(Ptr{zx_handle_t}, zircon_handle)))

import_semaphore_zircon_handle_fuchsia(device::Device, import_semaphore_zircon_handle_info::_ImportSemaphoreZirconHandleInfoFUCHSIA)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreZirconHandleFUCHSIA(device, import_semaphore_zircon_handle_info))

function get_physical_device_external_fence_properties(physical_device::PhysicalDevice, external_fence_info::_PhysicalDeviceExternalFenceInfo)::ExternalFenceProperties
    pExternalFenceProperties = Ref{VkExternalFenceProperties}()
    vkGetPhysicalDeviceExternalFenceProperties(physical_device, external_fence_info, pExternalFenceProperties)
    from_vk(ExternalFenceProperties, pExternalFenceProperties[])
end

get_fence_win_32_handle_khr(device::Device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle)))

import_fence_win_32_handle_khr(device::Device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceWin32HandleKHR(device, import_fence_win_32_handle_info))

function get_fence_fd_khr(device::Device, get_fd_info::_FenceGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetFenceFdKHR(device, get_fd_info, pFd)
    pFd[]
end

import_fence_fd_khr(device::Device, import_fence_fd_info::_ImportFenceFdInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceFdKHR(device, import_fence_fd_info))

release_display_ext(physical_device::PhysicalDevice, display::DisplayKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseDisplayEXT(physical_device, display))

acquire_xlib_display_ext(physical_device::PhysicalDevice, dpy::vk.Display, display::DisplayKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireXlibDisplayEXT(physical_device, to_vk(Ptr{Display}, dpy), display))

function get_rand_r_output_display_ext(physical_device::PhysicalDevice, dpy::vk.Display, rr_output::vk.RROutput)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetRandROutputDisplayEXT(physical_device, Ref(dpy), rr_output, pDisplay)
    DisplayKHR(pDisplay[], identity, physical_device)
end

acquire_winrt_display_nv(physical_device::PhysicalDevice, display::DisplayKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireWinrtDisplayNV(physical_device, display))

function get_winrt_display_nv(physical_device::PhysicalDevice, device_relative_id::Integer)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetWinrtDisplayNV(physical_device, device_relative_id, pDisplay)
    DisplayKHR(pDisplay[], identity, physical_device)
end

display_power_control_ext(device::Device, display::DisplayKHR, display_power_info::_DisplayPowerInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(vkDisplayPowerControlEXT(device, display, display_power_info))

function register_device_event_ext(device::Device, device_event_info::_DeviceEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDeviceEventEXT(device, device_event_info, allocator, pFence)
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

function register_display_event_ext(device::Device, display::DisplayKHR, display_event_info::_DisplayEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDisplayEventEXT(device, display, display_event_info, allocator, pFence)
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

function get_swapchain_counter_ext(device::Device, swapchain::SwapchainKHR, counter::SurfaceCounterFlagEXT)::ResultTypes.Result{UInt64, VulkanError}
    pCounterValue = Ref{UInt64}()
    @check vkGetSwapchainCounterEXT(device, swapchain, VkSurfaceCounterFlagBitsEXT(counter.val), pCounterValue)
    pCounterValue[]
end

function get_physical_device_surface_capabilities_2_ext(physical_device::PhysicalDevice, surface::SurfaceKHR)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2EXT}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2EXT(physical_device, surface, pSurfaceCapabilities)
    from_vk(SurfaceCapabilities2EXT, pSurfaceCapabilities[])
end

function enumerate_physical_device_groups(instance::Instance)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}
    pPhysicalDeviceGroupCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, C_NULL)
            pPhysicalDeviceGroupProperties = Vector{VkPhysicalDeviceGroupProperties}(undef, pPhysicalDeviceGroupCount[])
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)
        end
    from_vk.(PhysicalDeviceGroupProperties, pPhysicalDeviceGroupProperties)
end

function get_device_group_peer_memory_features(device::Device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer)::PeerMemoryFeatureFlag
    pPeerMemoryFeatures = Ref{VkPeerMemoryFeatureFlags}()
    vkGetDeviceGroupPeerMemoryFeatures(device, heap_index, local_device_index, remote_device_index, pPeerMemoryFeatures)
    pPeerMemoryFeatures[]
end

bind_buffer_memory_2(device::Device, bind_infos::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory2(device, pointer_length(bind_infos), bind_infos))

bind_image_memory_2(device::Device, bind_infos::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory2(device, pointer_length(bind_infos), bind_infos))

cmd_set_device_mask(command_buffer::CommandBuffer, device_mask::Integer)::Cvoid = vkCmdSetDeviceMask(command_buffer, device_mask)

function get_device_group_present_capabilities_khr(device::Device)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}
    pDeviceGroupPresentCapabilities = Ref{VkDeviceGroupPresentCapabilitiesKHR}()
    @check vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities)
    from_vk(DeviceGroupPresentCapabilitiesKHR, pDeviceGroupPresentCapabilities[])
end

function get_device_group_surface_present_modes_khr(device::Device, surface::SurfaceKHR, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes)
    pModes[]
end

function acquire_next_image_2_khr(device::Device, acquire_info::_AcquireNextImageInfoKHR)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImage2KHR(device, acquire_info, pImageIndex)
    (pImageIndex[], _return_code)
end

cmd_dispatch_base(command_buffer::CommandBuffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid = vkCmdDispatchBase(command_buffer, base_group_x, base_group_y, base_group_z, group_count_x, group_count_y, group_count_z)

function get_physical_device_present_rectangles_khr(physical_device::PhysicalDevice, surface::SurfaceKHR)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}
    pRectCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, C_NULL)
            pRects = Vector{VkRect2D}(undef, pRectCount[])
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, pRects)
        end
    from_vk.(_Rect2D, pRects)
end

function create_descriptor_update_template(device::Device, create_info::_DescriptorUpdateTemplateCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}
    pDescriptorUpdateTemplate = Ref{VkDescriptorUpdateTemplate}()
    @check vkCreateDescriptorUpdateTemplate(device, create_info, allocator, pDescriptorUpdateTemplate)
    DescriptorUpdateTemplate(pDescriptorUpdateTemplate[], (x->destroy_descriptor_update_template(device, x; allocator)), device)
end

destroy_descriptor_update_template(device::Device, descriptor_update_template::DescriptorUpdateTemplate; allocator = C_NULL)::Cvoid = vkDestroyDescriptorUpdateTemplate(device, descriptor_update_template, allocator)

update_descriptor_set_with_template(device::Device, descriptor_set::DescriptorSet, descriptor_update_template::DescriptorUpdateTemplate, data::Ptr{Cvoid})::Cvoid = vkUpdateDescriptorSetWithTemplate(device, descriptor_set, descriptor_update_template, Ref(data))

cmd_push_descriptor_set_with_template_khr(command_buffer::CommandBuffer, descriptor_update_template::DescriptorUpdateTemplate, layout::PipelineLayout, set::Integer, data::Ptr{Cvoid})::Cvoid = vkCmdPushDescriptorSetWithTemplateKHR(command_buffer, descriptor_update_template, layout, set, Ref(data))

set_hdr_metadata_ext(device::Device, swapchains::AbstractArray, metadata::AbstractArray)::Cvoid = vkSetHdrMetadataEXT(device, pointer_length(swapchains), swapchains, metadata)

get_swapchain_status_khr(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSwapchainStatusKHR(device, swapchain))

function get_refresh_cycle_duration_google(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}
    pDisplayTimingProperties = Ref{VkRefreshCycleDurationGOOGLE}()
    @check vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties)
    from_vk(RefreshCycleDurationGOOGLE, pDisplayTimingProperties[])
end

function get_past_presentation_timing_google(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}
    pPresentationTimingCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, C_NULL)
            pPresentationTimings = Vector{VkPastPresentationTimingGOOGLE}(undef, pPresentationTimingCount[])
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings)
        end
    from_vk.(PastPresentationTimingGOOGLE, pPresentationTimings)
end

function create_ios_surface_mvk(instance::Instance, create_info::_IOSSurfaceCreateInfoMVK; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateIOSSurfaceMVK(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_mac_os_surface_mvk(instance::Instance, create_info::_MacOSSurfaceCreateInfoMVK; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateMacOSSurfaceMVK(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function create_metal_surface_ext(instance::Instance, create_info::_MetalSurfaceCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateMetalSurfaceEXT(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

cmd_set_viewport_w_scaling_nv(command_buffer::CommandBuffer, viewport_w_scalings::AbstractArray)::Cvoid = vkCmdSetViewportWScalingNV(command_buffer, 0, pointer_length(viewport_w_scalings), viewport_w_scalings)

cmd_set_discard_rectangle_ext(command_buffer::CommandBuffer, discard_rectangles::AbstractArray)::Cvoid = vkCmdSetDiscardRectangleEXT(command_buffer, 0, pointer_length(discard_rectangles), discard_rectangles)

cmd_set_sample_locations_ext(command_buffer::CommandBuffer, sample_locations_info::_SampleLocationsInfoEXT)::Cvoid = vkCmdSetSampleLocationsEXT(command_buffer, sample_locations_info)

function get_physical_device_multisample_properties_ext(physical_device::PhysicalDevice, samples::SampleCountFlag)::MultisamplePropertiesEXT
    pMultisampleProperties = Ref{VkMultisamplePropertiesEXT}()
    vkGetPhysicalDeviceMultisamplePropertiesEXT(physical_device, VkSampleCountFlagBits(samples.val), pMultisampleProperties)
    from_vk(MultisamplePropertiesEXT, pMultisampleProperties[])
end

function get_physical_device_surface_capabilities_2_khr(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2KHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2KHR(physical_device, surface_info, pSurfaceCapabilities)
    from_vk(SurfaceCapabilities2KHR, pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_2_khr(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, C_NULL)
            pSurfaceFormats = Vector{VkSurfaceFormat2KHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, pSurfaceFormats)
        end
    from_vk.(SurfaceFormat2KHR, pSurfaceFormats)
end

function get_physical_device_display_properties_2_khr(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(DisplayProperties2KHR, pProperties)
end

function get_physical_device_display_plane_properties_2_khr(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayPlaneProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(DisplayPlaneProperties2KHR, pProperties)
end

function get_display_mode_properties_2_khr(physical_device::PhysicalDevice, display::DisplayKHR)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, C_NULL)
            pProperties = Vector{VkDisplayModeProperties2KHR}(undef, pPropertyCount[])
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, pProperties)
        end
    from_vk.(DisplayModeProperties2KHR, pProperties)
end

function get_display_plane_capabilities_2_khr(physical_device::PhysicalDevice, display_plane_info::_DisplayPlaneInfo2KHR)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilities2KHR}()
    @check vkGetDisplayPlaneCapabilities2KHR(physical_device, display_plane_info, pCapabilities)
    from_vk(DisplayPlaneCapabilities2KHR, pCapabilities[])
end

function get_buffer_memory_requirements_2(device::Device, info::_BufferMemoryRequirementsInfo2)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetBufferMemoryRequirements2(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function get_image_memory_requirements_2(device::Device, info::_ImageMemoryRequirementsInfo2)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetImageMemoryRequirements2(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function get_image_sparse_memory_requirements_2(device::Device, info::_ImageSparseMemoryRequirementsInfo2)::Vector{SparseImageMemoryRequirements2}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, C_NULL)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements2}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    from_vk.(SparseImageMemoryRequirements2, pSparseMemoryRequirements)
end

function create_sampler_ycbcr_conversion(device::Device, create_info::_SamplerYcbcrConversionCreateInfo; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}
    pYcbcrConversion = Ref{VkSamplerYcbcrConversion}()
    @check vkCreateSamplerYcbcrConversion(device, create_info, allocator, pYcbcrConversion)
    SamplerYcbcrConversion(pYcbcrConversion[], (x->destroy_sampler_ycbcr_conversion(device, x; allocator)), device)
end

destroy_sampler_ycbcr_conversion(device::Device, ycbcr_conversion::SamplerYcbcrConversion; allocator = C_NULL)::Cvoid = vkDestroySamplerYcbcrConversion(device, ycbcr_conversion, allocator)

function get_device_queue_2(device::Device, queue_info::_DeviceQueueInfo2)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue2(device, queue_info, pQueue)
    Queue(pQueue[], identity, device)
end

function create_validation_cache_ext(device::Device, create_info::_ValidationCacheCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}
    pValidationCache = Ref{VkValidationCacheEXT}()
    @check vkCreateValidationCacheEXT(device, create_info, allocator, pValidationCache)
    ValidationCacheEXT(pValidationCache[], (x->destroy_validation_cache_ext(device, x; allocator)), device)
end

destroy_validation_cache_ext(device::Device, validation_cache::ValidationCacheEXT; allocator = C_NULL)::Cvoid = vkDestroyValidationCacheEXT(device, validation_cache, allocator)

function get_validation_cache_data_ext(device::Device, validation_cache::ValidationCacheEXT)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, C_NULL)
            pData = Libc.malloc(pDataSize[])
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, pData)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

merge_validation_caches_ext(device::Device, dst_cache::ValidationCacheEXT, src_caches::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkMergeValidationCachesEXT(device, dst_cache, pointer_length(src_caches), src_caches))

function get_descriptor_set_layout_support(device::Device, create_info::_DescriptorSetLayoutCreateInfo)::DescriptorSetLayoutSupport
    pSupport = Ref{VkDescriptorSetLayoutSupport}()
    vkGetDescriptorSetLayoutSupport(device, create_info, pSupport)
    from_vk(DescriptorSetLayoutSupport, pSupport[])
end

function get_shader_info_amd(device::Device, pipeline::Pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pInfoSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, C_NULL)
            pInfo = Libc.malloc(pInfoSize[])
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, pInfo)
            if _return_code == VK_INCOMPLETE
                Libc.free(pInfo)
            end
        end
    (pInfoSize[], pInfo)
end

set_local_dimming_amd(device::Device, swap_chain::SwapchainKHR, local_dimming_enable::Bool)::Cvoid = vkSetLocalDimmingAMD(device, swap_chain, local_dimming_enable)

function get_physical_device_calibrateable_time_domains_ext(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}
    pTimeDomainCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, C_NULL)
            pTimeDomains = Vector{VkTimeDomainEXT}(undef, pTimeDomainCount[])
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, pTimeDomains)
        end
    pTimeDomains
end

function get_calibrated_timestamps_ext(device::Device, timestamp_infos::AbstractArray)::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}
    pTimestamps = Vector{UInt64}(undef, pointer_length(timestamp_infos))
    pMaxDeviation = Ref{UInt64}()
    @check vkGetCalibratedTimestampsEXT(device, pointer_length(timestamp_infos), timestamp_infos, pTimestamps, pMaxDeviation)
    (pTimestamps, pMaxDeviation[])
end

set_debug_utils_object_name_ext(device::Device, name_info::_DebugUtilsObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectNameEXT(device, name_info))

set_debug_utils_object_tag_ext(device::Device, tag_info::_DebugUtilsObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectTagEXT(device, tag_info))

queue_begin_debug_utils_label_ext(queue::Queue, label_info::_DebugUtilsLabelEXT)::Cvoid = vkQueueBeginDebugUtilsLabelEXT(queue, label_info)

queue_end_debug_utils_label_ext(queue::Queue)::Cvoid = vkQueueEndDebugUtilsLabelEXT(queue)

queue_insert_debug_utils_label_ext(queue::Queue, label_info::_DebugUtilsLabelEXT)::Cvoid = vkQueueInsertDebugUtilsLabelEXT(queue, label_info)

cmd_begin_debug_utils_label_ext(command_buffer::CommandBuffer, label_info::_DebugUtilsLabelEXT)::Cvoid = vkCmdBeginDebugUtilsLabelEXT(command_buffer, label_info)

cmd_end_debug_utils_label_ext(command_buffer::CommandBuffer)::Cvoid = vkCmdEndDebugUtilsLabelEXT(command_buffer)

cmd_insert_debug_utils_label_ext(command_buffer::CommandBuffer, label_info::_DebugUtilsLabelEXT)::Cvoid = vkCmdInsertDebugUtilsLabelEXT(command_buffer, label_info)

function create_debug_utils_messenger_ext(instance::Instance, create_info::_DebugUtilsMessengerCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}
    pMessenger = Ref{VkDebugUtilsMessengerEXT}()
    @check vkCreateDebugUtilsMessengerEXT(instance, create_info, allocator, pMessenger)
    DebugUtilsMessengerEXT(pMessenger[], (x->destroy_debug_utils_messenger_ext(instance, x; allocator)), instance)
end

destroy_debug_utils_messenger_ext(instance::Instance, messenger::DebugUtilsMessengerEXT; allocator = C_NULL)::Cvoid = vkDestroyDebugUtilsMessengerEXT(instance, messenger, allocator)

submit_debug_utils_message_ext(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT)::Cvoid = vkSubmitDebugUtilsMessageEXT(instance, VkDebugUtilsMessageSeverityFlagBitsEXT(message_severity.val), message_types, callback_data)

function get_memory_host_pointer_properties_ext(device::Device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid})::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}
    pMemoryHostPointerProperties = Ref{VkMemoryHostPointerPropertiesEXT}()
    @check vkGetMemoryHostPointerPropertiesEXT(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), Ref(host_pointer), pMemoryHostPointerProperties)
    from_vk(MemoryHostPointerPropertiesEXT, pMemoryHostPointerProperties[])
end

cmd_write_buffer_marker_amd(command_buffer::CommandBuffer, pipeline_stage::PipelineStageFlag, dst_buffer::Buffer, dst_offset::Integer, marker::Integer)::Cvoid = vkCmdWriteBufferMarkerAMD(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), dst_buffer, dst_offset, marker)

function create_render_pass_2(device::Device, create_info::_RenderPassCreateInfo2; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass2(device, create_info, allocator, pRenderPass)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x; allocator)), device)
end

cmd_begin_render_pass_2(command_buffer::CommandBuffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo)::Cvoid = vkCmdBeginRenderPass2(command_buffer, render_pass_begin, subpass_begin_info)

cmd_next_subpass_2(command_buffer::CommandBuffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo)::Cvoid = vkCmdNextSubpass2(command_buffer, subpass_begin_info, subpass_end_info)

cmd_end_render_pass_2(command_buffer::CommandBuffer, subpass_end_info::_SubpassEndInfo)::Cvoid = vkCmdEndRenderPass2(command_buffer, subpass_end_info)

function get_semaphore_counter_value(device::Device, semaphore::Semaphore)::ResultTypes.Result{UInt64, VulkanError}
    pValue = Ref{UInt64}()
    @check vkGetSemaphoreCounterValue(device, semaphore, pValue)
    pValue[]
end

wait_semaphores(device::Device, wait_info::_SemaphoreWaitInfo, timeout::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitSemaphores(device, wait_info, timeout))

signal_semaphore(device::Device, signal_info::_SemaphoreSignalInfo)::ResultTypes.Result{Result, VulkanError} = @check(vkSignalSemaphore(device, signal_info))

function get_android_hardware_buffer_properties_android(device::Device, buffer::vk.AHardwareBuffer)::ResultTypes.Result{AndroidHardwareBufferPropertiesANDROID, VulkanError}
    pProperties = Ref{VkAndroidHardwareBufferPropertiesANDROID}()
    @check vkGetAndroidHardwareBufferPropertiesANDROID(device, Ref(buffer), pProperties)
    from_vk(AndroidHardwareBufferPropertiesANDROID, pProperties[])
end

function get_memory_android_hardware_buffer_android(device::Device, info::_MemoryGetAndroidHardwareBufferInfoANDROID)::ResultTypes.Result{vk.AHardwareBuffer, VulkanError}
    pBuffer = Ref{Ptr{AHardwareBuffer}}()
    @check vkGetMemoryAndroidHardwareBufferANDROID(device, info, pBuffer)
    from_vk(vk.AHardwareBuffer, pBuffer[])
end

cmd_draw_indirect_count(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride)

cmd_draw_indexed_indirect_count(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawIndexedIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride)

cmd_set_checkpoint_nv(command_buffer::CommandBuffer, checkpoint_marker::Ptr{Cvoid})::Cvoid = vkCmdSetCheckpointNV(command_buffer, Ref(checkpoint_marker))

function get_queue_checkpoint_data_nv(queue::Queue)::Vector{CheckpointDataNV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, C_NULL)
    pCheckpointData = Vector{VkCheckpointDataNV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData)
    from_vk.(CheckpointDataNV, pCheckpointData)
end

cmd_bind_transform_feedback_buffers_ext(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray; sizes = C_NULL)::Cvoid = vkCmdBindTransformFeedbackBuffersEXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes)

cmd_begin_transform_feedback_ext(command_buffer::CommandBuffer, counter_buffers::AbstractArray; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdBeginTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets)

cmd_end_transform_feedback_ext(command_buffer::CommandBuffer, counter_buffers::AbstractArray; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdEndTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets)

cmd_begin_query_indexed_ext(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, index::Integer; flags = 0)::Cvoid = vkCmdBeginQueryIndexedEXT(command_buffer, query_pool, query, flags, index)

cmd_end_query_indexed_ext(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, index::Integer)::Cvoid = vkCmdEndQueryIndexedEXT(command_buffer, query_pool, query, index)

cmd_draw_indirect_byte_count_ext(command_buffer::CommandBuffer, instance_count::Integer, first_instance::Integer, counter_buffer::Buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer)::Cvoid = vkCmdDrawIndirectByteCountEXT(command_buffer, instance_count, first_instance, counter_buffer, counter_buffer_offset, counter_offset, vertex_stride)

cmd_set_exclusive_scissor_nv(command_buffer::CommandBuffer, exclusive_scissors::AbstractArray)::Cvoid = vkCmdSetExclusiveScissorNV(command_buffer, 0, pointer_length(exclusive_scissors), exclusive_scissors)

cmd_bind_shading_rate_image_nv(command_buffer::CommandBuffer, image_layout::ImageLayout; image_view = C_NULL)::Cvoid = vkCmdBindShadingRateImageNV(command_buffer, image_view, image_layout)

cmd_set_viewport_shading_rate_palette_nv(command_buffer::CommandBuffer, shading_rate_palettes::AbstractArray)::Cvoid = vkCmdSetViewportShadingRatePaletteNV(command_buffer, 0, pointer_length(shading_rate_palettes), shading_rate_palettes)

cmd_set_coarse_sample_order_nv(command_buffer::CommandBuffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray)::Cvoid = vkCmdSetCoarseSampleOrderNV(command_buffer, sample_order_type, pointer_length(custom_sample_orders), custom_sample_orders)

cmd_draw_mesh_tasks_nv(command_buffer::CommandBuffer, task_count::Integer, first_task::Integer)::Cvoid = vkCmdDrawMeshTasksNV(command_buffer, task_count, first_task)

cmd_draw_mesh_tasks_indirect_nv(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawMeshTasksIndirectNV(command_buffer, buffer, offset, draw_count, stride)

cmd_draw_mesh_tasks_indirect_count_nv(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = vkCmdDrawMeshTasksIndirectCountNV(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride)

compile_deferred_nv(device::Device, pipeline::Pipeline, shader::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkCompileDeferredNV(device, pipeline, shader))

function create_acceleration_structure_nv(device::Device, create_info::_AccelerationStructureCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureNV}()
    @check vkCreateAccelerationStructureNV(device, create_info, allocator, pAccelerationStructure)
    AccelerationStructureNV(pAccelerationStructure[], (x->destroy_acceleration_structure_nv(device, x; allocator)), device)
end

destroy_acceleration_structure_khr(device::Device, acceleration_structure::AccelerationStructureKHR; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureKHR(device, acceleration_structure, allocator)

destroy_acceleration_structure_nv(device::Device, acceleration_structure::AccelerationStructureNV; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureNV(device, acceleration_structure, allocator)

function get_acceleration_structure_memory_requirements_nv(device::Device, info::_AccelerationStructureMemoryRequirementsInfoNV)::VkMemoryRequirements2KHR
    pMemoryRequirements = Ref{VkMemoryRequirements2KHR}()
    vkGetAccelerationStructureMemoryRequirementsNV(device, info, pMemoryRequirements)
    from_vk(VkMemoryRequirements2KHR, pMemoryRequirements[])
end

bind_acceleration_structure_memory_nv(device::Device, bind_infos::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkBindAccelerationStructureMemoryNV(device, pointer_length(bind_infos), bind_infos))

cmd_copy_acceleration_structure_nv(command_buffer::CommandBuffer, dst::AccelerationStructureNV, src::AccelerationStructureNV, mode::CopyAccelerationStructureModeKHR)::Cvoid = vkCmdCopyAccelerationStructureNV(command_buffer, dst, src, mode)

cmd_copy_acceleration_structure_khr(command_buffer::CommandBuffer, info::_CopyAccelerationStructureInfoKHR)::Cvoid = vkCmdCopyAccelerationStructureKHR(command_buffer, info)

copy_acceleration_structure_khr(device::Device, info::_CopyAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureKHR(device, deferred_operation, info))

cmd_copy_acceleration_structure_to_memory_khr(command_buffer::CommandBuffer, info::_CopyAccelerationStructureToMemoryInfoKHR)::Cvoid = vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer, info)

copy_acceleration_structure_to_memory_khr(device::Device, info::_CopyAccelerationStructureToMemoryInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureToMemoryKHR(device, deferred_operation, info))

cmd_copy_memory_to_acceleration_structure_khr(command_buffer::CommandBuffer, info::_CopyMemoryToAccelerationStructureInfoKHR)::Cvoid = vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer, info)

copy_memory_to_acceleration_structure_khr(device::Device, info::_CopyMemoryToAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyMemoryToAccelerationStructureKHR(device, deferred_operation, info))

cmd_write_acceleration_structures_properties_khr(command_buffer::CommandBuffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool::QueryPool, first_query::Integer)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesKHR(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query)

cmd_write_acceleration_structures_properties_nv(command_buffer::CommandBuffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool::QueryPool, first_query::Integer)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesNV(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query)

cmd_build_acceleration_structure_nv(command_buffer::CommandBuffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst::AccelerationStructureNV, scratch::Buffer, scratch_offset::Integer; instance_data = C_NULL, src = C_NULL)::Cvoid = vkCmdBuildAccelerationStructureNV(command_buffer, info, instance_data, instance_offset, update, dst, src, scratch, scratch_offset)

write_acceleration_structures_properties_khr(device::Device, acceleration_structures::AbstractArray, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkWriteAccelerationStructuresPropertiesKHR(device, pointer_length(acceleration_structures), acceleration_structures, query_type, data_size, data, stride))

cmd_trace_rays_khr(command_buffer::CommandBuffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer)::Cvoid = vkCmdTraceRaysKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, width, height, depth)

cmd_trace_rays_nv(command_buffer::CommandBuffer, raygen_shader_binding_table_buffer::Buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid = vkCmdTraceRaysNV(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset, miss_shader_binding_table_buffer, miss_shader_binding_offset, miss_shader_binding_stride, hit_shader_binding_table_buffer, hit_shader_binding_offset, hit_shader_binding_stride, callable_shader_binding_table_buffer, callable_shader_binding_offset, callable_shader_binding_stride, width, height, depth)

get_ray_tracing_shader_group_handles_khr(device::Device, pipeline::Pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data))

get_ray_tracing_capture_replay_shader_group_handles_khr(device::Device, pipeline::Pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data))

get_acceleration_structure_handle_nv(device::Device, acceleration_structure::AccelerationStructureNV, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(vkGetAccelerationStructureHandleNV(device, acceleration_structure, data_size, data))

function create_ray_tracing_pipelines_nv(device::Device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesNV(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

function create_ray_tracing_pipelines_khr(device::Device, create_infos::AbstractArray; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesKHR(device, deferred_operation, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

function get_physical_device_cooperative_matrix_properties_nv(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, C_NULL)
            pProperties = Vector{VkCooperativeMatrixPropertiesNV}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, pProperties)
        end
    from_vk.(_CooperativeMatrixPropertiesNV, pProperties)
end

cmd_trace_rays_indirect_khr(command_buffer::CommandBuffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer)::Cvoid = vkCmdTraceRaysIndirectKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, indirect_device_address)

function get_device_acceleration_structure_compatibility_khr(device::Device, version_info::_AccelerationStructureVersionInfoKHR)::AccelerationStructureCompatibilityKHR
    pCompatibility = Ref{VkAccelerationStructureCompatibilityKHR}()
    vkGetDeviceAccelerationStructureCompatibilityKHR(device, version_info, pCompatibility)
    pCompatibility[]
end

get_ray_tracing_shader_group_stack_size_khr(device::Device, pipeline::Pipeline, group::Integer, group_shader::ShaderGroupShaderKHR)::UInt64 = vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, group_shader)

cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer::CommandBuffer, pipeline_stack_size::Integer)::Cvoid = vkCmdSetRayTracingPipelineStackSizeKHR(command_buffer, pipeline_stack_size)

get_image_view_handle_nvx(device::Device, info::_ImageViewHandleInfoNVX)::UInt32 = vkGetImageViewHandleNVX(device, info)

function get_image_view_address_nvx(device::Device, image_view::ImageView)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}
    pProperties = Ref{VkImageViewAddressPropertiesNVX}()
    @check vkGetImageViewAddressNVX(device, image_view, pProperties)
    from_vk(ImageViewAddressPropertiesNVX, pProperties[])
end

function get_physical_device_surface_present_modes_2_ext(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, C_NULL)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, pPresentModes)
        end
    pPresentModes
end

function get_device_group_surface_present_modes_2_ext(device::Device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModes2EXT(device, surface_info, pModes)
    pModes[]
end

acquire_full_screen_exclusive_mode_ext(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireFullScreenExclusiveModeEXT(device, swapchain))

release_full_screen_exclusive_mode_ext(device::Device, swapchain::SwapchainKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseFullScreenExclusiveModeEXT(device, swapchain))

function enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device::PhysicalDevice, queue_family_index::Integer)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}
    pCounterCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, C_NULL, C_NULL)
            pCounters = Vector{VkPerformanceCounterKHR}(undef, pCounterCount[])
            pCounterDescriptions = Vector{VkPerformanceCounterDescriptionKHR}(undef, pCounterCount[])
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, pCounters, pCounterDescriptions)
        end
    (from_vk.(PerformanceCounterKHR, pCounters), from_vk.(PerformanceCounterDescriptionKHR, pCounterDescriptions))
end

function get_physical_device_queue_family_performance_query_passes_khr(physical_device::PhysicalDevice, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR)::UInt32
    pNumPasses = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physical_device, performance_query_create_info, pNumPasses)
    pNumPasses[]
end

acquire_profiling_lock_khr(device::Device, info::_AcquireProfilingLockInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireProfilingLockKHR(device, info))

release_profiling_lock_khr(device::Device)::Cvoid = vkReleaseProfilingLockKHR(device)

function get_image_drm_format_modifier_properties_ext(device::Device, image::Image)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}
    pProperties = Ref{VkImageDrmFormatModifierPropertiesEXT}()
    @check vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties)
    from_vk(ImageDrmFormatModifierPropertiesEXT, pProperties[])
end

get_buffer_opaque_capture_address(device::Device, info::_BufferDeviceAddressInfo)::UInt64 = vkGetBufferOpaqueCaptureAddress(device, info)

get_buffer_device_address(device::Device, info::_BufferDeviceAddressInfo)::UInt64 = vkGetBufferDeviceAddress(device, info)

function create_headless_surface_ext(instance::Instance, create_info::_HeadlessSurfaceCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateHeadlessSurfaceEXT(instance, create_info, allocator, pSurface)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

function get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}
    pCombinationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, C_NULL)
            pCombinations = Vector{VkFramebufferMixedSamplesCombinationNV}(undef, pCombinationCount[])
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, pCombinations)
        end
    from_vk.(FramebufferMixedSamplesCombinationNV, pCombinations)
end

initialize_performance_api_intel(device::Device, initialize_info::_InitializePerformanceApiInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(vkInitializePerformanceApiINTEL(device, initialize_info))

uninitialize_performance_api_intel(device::Device)::Cvoid = vkUninitializePerformanceApiINTEL(device)

cmd_set_performance_marker_intel(command_buffer::CommandBuffer, marker_info::_PerformanceMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceMarkerINTEL(command_buffer, marker_info))

cmd_set_performance_stream_marker_intel(command_buffer::CommandBuffer, marker_info::_PerformanceStreamMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceStreamMarkerINTEL(command_buffer, marker_info))

cmd_set_performance_override_intel(command_buffer::CommandBuffer, override_info::_PerformanceOverrideInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceOverrideINTEL(command_buffer, override_info))

function acquire_performance_configuration_intel(device::Device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}
    pConfiguration = Ref{VkPerformanceConfigurationINTEL}()
    @check vkAcquirePerformanceConfigurationINTEL(device, acquire_info, pConfiguration)
    PerformanceConfigurationINTEL(pConfiguration[], identity, device)
end

release_performance_configuration_intel(device::Device; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkReleasePerformanceConfigurationINTEL(device, configuration))

queue_set_performance_configuration_intel(queue::Queue, configuration::PerformanceConfigurationINTEL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSetPerformanceConfigurationINTEL(queue, configuration))

function get_performance_parameter_intel(device::Device, parameter::PerformanceParameterTypeINTEL)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}
    pValue = Ref{VkPerformanceValueINTEL}()
    @check vkGetPerformanceParameterINTEL(device, parameter, pValue)
    from_vk(_PerformanceValueINTEL, pValue[])
end

get_device_memory_opaque_capture_address(device::Device, info::_DeviceMemoryOpaqueCaptureAddressInfo)::UInt64 = vkGetDeviceMemoryOpaqueCaptureAddress(device, info)

function get_pipeline_executable_properties_khr(device::Device, pipeline_info::_PipelineInfoKHR)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}
    pExecutableCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, C_NULL)
            pProperties = Vector{VkPipelineExecutablePropertiesKHR}(undef, pExecutableCount[])
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, pProperties)
        end
    from_vk.(PipelineExecutablePropertiesKHR, pProperties)
end

function get_pipeline_executable_statistics_khr(device::Device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}
    pStatisticCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, C_NULL)
            pStatistics = Vector{VkPipelineExecutableStatisticKHR}(undef, pStatisticCount[])
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, pStatistics)
        end
    from_vk.(PipelineExecutableStatisticKHR, pStatistics)
end

function get_pipeline_executable_internal_representations_khr(device::Device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}
    pInternalRepresentationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, C_NULL)
            pInternalRepresentations = Vector{VkPipelineExecutableInternalRepresentationKHR}(undef, pInternalRepresentationCount[])
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, pInternalRepresentations)
        end
    from_vk.(PipelineExecutableInternalRepresentationKHR, pInternalRepresentations)
end

cmd_set_line_stipple_ext(command_buffer::CommandBuffer, line_stipple_factor::Integer, line_stipple_pattern::Integer)::Cvoid = vkCmdSetLineStippleEXT(command_buffer, line_stipple_factor, line_stipple_pattern)

function get_physical_device_tool_properties_ext(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}
    pToolCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, C_NULL)
            pToolProperties = Vector{VkPhysicalDeviceToolPropertiesEXT}(undef, pToolCount[])
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, pToolProperties)
        end
    from_vk.(PhysicalDeviceToolPropertiesEXT, pToolProperties)
end

function create_acceleration_structure_khr(device::Device, create_info::_AccelerationStructureCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureKHR}()
    @check vkCreateAccelerationStructureKHR(device, create_info, allocator, pAccelerationStructure)
    AccelerationStructureKHR(pAccelerationStructure[], (x->destroy_acceleration_structure_khr(device, x; allocator)), device)
end

cmd_build_acceleration_structures_khr(command_buffer::CommandBuffer, infos::AbstractArray, build_range_infos::AbstractArray)::Cvoid = vkCmdBuildAccelerationStructuresKHR(command_buffer, pointer_length(infos), infos, build_range_infos)

cmd_build_acceleration_structures_indirect_khr(command_buffer::CommandBuffer, infos::AbstractArray, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray)::Cvoid = vkCmdBuildAccelerationStructuresIndirectKHR(command_buffer, pointer_length(infos), infos, indirect_device_addresses, indirect_strides, max_primitive_counts)

build_acceleration_structures_khr(device::Device, infos::AbstractArray, build_range_infos::AbstractArray; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkBuildAccelerationStructuresKHR(device, deferred_operation, pointer_length(infos), infos, build_range_infos))

get_acceleration_structure_device_address_khr(device::Device, info::_AccelerationStructureDeviceAddressInfoKHR)::UInt64 = vkGetAccelerationStructureDeviceAddressKHR(device, info)

function create_deferred_operation_khr(device::Device; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}
    pDeferredOperation = Ref{VkDeferredOperationKHR}()
    @check vkCreateDeferredOperationKHR(device, allocator, pDeferredOperation)
    DeferredOperationKHR(pDeferredOperation[], (x->destroy_deferred_operation_khr(device, x; allocator)), device)
end

destroy_deferred_operation_khr(device::Device, operation::DeferredOperationKHR; allocator = C_NULL)::Cvoid = vkDestroyDeferredOperationKHR(device, operation, allocator)

get_deferred_operation_max_concurrency_khr(device::Device, operation::DeferredOperationKHR)::UInt32 = vkGetDeferredOperationMaxConcurrencyKHR(device, operation)

get_deferred_operation_result_khr(device::Device, operation::DeferredOperationKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkGetDeferredOperationResultKHR(device, operation))

deferred_operation_join_khr(device::Device, operation::DeferredOperationKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkDeferredOperationJoinKHR(device, operation))

cmd_set_cull_mode_ext(command_buffer::CommandBuffer; cull_mode = 0)::Cvoid = vkCmdSetCullModeEXT(command_buffer, cull_mode)

cmd_set_front_face_ext(command_buffer::CommandBuffer, front_face::FrontFace)::Cvoid = vkCmdSetFrontFaceEXT(command_buffer, front_face)

cmd_set_primitive_topology_ext(command_buffer::CommandBuffer, primitive_topology::PrimitiveTopology)::Cvoid = vkCmdSetPrimitiveTopologyEXT(command_buffer, primitive_topology)

cmd_set_viewport_with_count_ext(command_buffer::CommandBuffer, viewports::AbstractArray)::Cvoid = vkCmdSetViewportWithCountEXT(command_buffer, pointer_length(viewports), viewports)

cmd_set_scissor_with_count_ext(command_buffer::CommandBuffer, scissors::AbstractArray)::Cvoid = vkCmdSetScissorWithCountEXT(command_buffer, pointer_length(scissors), scissors)

cmd_bind_vertex_buffers_2_ext(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray; sizes = C_NULL, strides = C_NULL)::Cvoid = vkCmdBindVertexBuffers2EXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, strides)

cmd_set_depth_test_enable_ext(command_buffer::CommandBuffer, depth_test_enable::Bool)::Cvoid = vkCmdSetDepthTestEnableEXT(command_buffer, depth_test_enable)

cmd_set_depth_write_enable_ext(command_buffer::CommandBuffer, depth_write_enable::Bool)::Cvoid = vkCmdSetDepthWriteEnableEXT(command_buffer, depth_write_enable)

cmd_set_depth_compare_op_ext(command_buffer::CommandBuffer, depth_compare_op::CompareOp)::Cvoid = vkCmdSetDepthCompareOpEXT(command_buffer, depth_compare_op)

cmd_set_depth_bounds_test_enable_ext(command_buffer::CommandBuffer, depth_bounds_test_enable::Bool)::Cvoid = vkCmdSetDepthBoundsTestEnableEXT(command_buffer, depth_bounds_test_enable)

cmd_set_stencil_test_enable_ext(command_buffer::CommandBuffer, stencil_test_enable::Bool)::Cvoid = vkCmdSetStencilTestEnableEXT(command_buffer, stencil_test_enable)

cmd_set_stencil_op_ext(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp)::Cvoid = vkCmdSetStencilOpEXT(command_buffer, face_mask, fail_op, pass_op, depth_fail_op, compare_op)

cmd_set_patch_control_points_ext(command_buffer::CommandBuffer, patch_control_points::Integer)::Cvoid = vkCmdSetPatchControlPointsEXT(command_buffer, patch_control_points)

cmd_set_rasterizer_discard_enable_ext(command_buffer::CommandBuffer, rasterizer_discard_enable::Bool)::Cvoid = vkCmdSetRasterizerDiscardEnableEXT(command_buffer, rasterizer_discard_enable)

cmd_set_depth_bias_enable_ext(command_buffer::CommandBuffer, depth_bias_enable::Bool)::Cvoid = vkCmdSetDepthBiasEnableEXT(command_buffer, depth_bias_enable)

cmd_set_logic_op_ext(command_buffer::CommandBuffer, logic_op::LogicOp)::Cvoid = vkCmdSetLogicOpEXT(command_buffer, logic_op)

cmd_set_primitive_restart_enable_ext(command_buffer::CommandBuffer, primitive_restart_enable::Bool)::Cvoid = vkCmdSetPrimitiveRestartEnableEXT(command_buffer, primitive_restart_enable)

function create_private_data_slot_ext(device::Device, create_info::_PrivateDataSlotCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}
    pPrivateDataSlot = Ref{VkPrivateDataSlotEXT}()
    @check vkCreatePrivateDataSlotEXT(device, create_info, allocator, pPrivateDataSlot)
    PrivateDataSlotEXT(pPrivateDataSlot[], (x->destroy_private_data_slot_ext(device, x; allocator)), device)
end

destroy_private_data_slot_ext(device::Device, private_data_slot::PrivateDataSlotEXT; allocator = C_NULL)::Cvoid = vkDestroyPrivateDataSlotEXT(device, private_data_slot, allocator)

set_private_data_ext(device::Device, object_type::ObjectType, object_handle::Integer, private_data_slot::PrivateDataSlotEXT, data::Integer)::ResultTypes.Result{Result, VulkanError} = @check(vkSetPrivateDataEXT(device, object_type, object_handle, private_data_slot, data))

function get_private_data_ext(device::Device, object_type::ObjectType, object_handle::Integer, private_data_slot::PrivateDataSlotEXT)::UInt64
    pData = Ref{UInt64}()
    vkGetPrivateDataEXT(device, object_type, object_handle, private_data_slot, pData)
    pData[]
end

cmd_copy_buffer_2_khr(command_buffer::CommandBuffer, copy_buffer_info::_CopyBufferInfo2KHR)::Cvoid = vkCmdCopyBuffer2KHR(command_buffer, copy_buffer_info)

cmd_copy_image_2_khr(command_buffer::CommandBuffer, copy_image_info::_CopyImageInfo2KHR)::Cvoid = vkCmdCopyImage2KHR(command_buffer, copy_image_info)

cmd_blit_image_2_khr(command_buffer::CommandBuffer, blit_image_info::_BlitImageInfo2KHR)::Cvoid = vkCmdBlitImage2KHR(command_buffer, blit_image_info)

cmd_copy_buffer_to_image_2_khr(command_buffer::CommandBuffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR)::Cvoid = vkCmdCopyBufferToImage2KHR(command_buffer, copy_buffer_to_image_info)

cmd_copy_image_to_buffer_2_khr(command_buffer::CommandBuffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR)::Cvoid = vkCmdCopyImageToBuffer2KHR(command_buffer, copy_image_to_buffer_info)

cmd_resolve_image_2_khr(command_buffer::CommandBuffer, resolve_image_info::_ResolveImageInfo2KHR)::Cvoid = vkCmdResolveImage2KHR(command_buffer, resolve_image_info)

cmd_set_fragment_shading_rate_khr(command_buffer::CommandBuffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid = vkCmdSetFragmentShadingRateKHR(command_buffer, fragment_size, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))

function get_physical_device_fragment_shading_rates_khr(physical_device::PhysicalDevice)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}
    pFragmentShadingRateCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, C_NULL)
            pFragmentShadingRates = Vector{VkPhysicalDeviceFragmentShadingRateKHR}(undef, pFragmentShadingRateCount[])
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, pFragmentShadingRates)
        end
    from_vk.(PhysicalDeviceFragmentShadingRateKHR, pFragmentShadingRates)
end

cmd_set_fragment_shading_rate_enum_nv(command_buffer::CommandBuffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid = vkCmdSetFragmentShadingRateEnumNV(command_buffer, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))

function get_acceleration_structure_build_sizes_khr(device::Device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR
    pSizeInfo = Ref{VkAccelerationStructureBuildSizesInfoKHR}()
    vkGetAccelerationStructureBuildSizesKHR(device, build_type, build_info, max_primitive_counts, pSizeInfo)
    from_vk(_AccelerationStructureBuildSizesInfoKHR, pSizeInfo[])
end

cmd_set_vertex_input_ext(command_buffer::CommandBuffer, vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray)::Cvoid = vkCmdSetVertexInputEXT(command_buffer, pointer_length(vertex_binding_descriptions), vertex_binding_descriptions, pointer_length(vertex_attribute_descriptions), vertex_attribute_descriptions)

cmd_set_color_write_enable_ext(command_buffer::CommandBuffer, color_write_enables::AbstractArray)::Cvoid = vkCmdSetColorWriteEnableEXT(command_buffer, pointer_length(color_write_enables), color_write_enables)

cmd_set_event_2_khr(command_buffer::CommandBuffer, event::Event, dependency_info::_DependencyInfoKHR)::Cvoid = vkCmdSetEvent2KHR(command_buffer, event, dependency_info)

cmd_reset_event_2_khr(command_buffer::CommandBuffer, event::Event, stage_mask::Integer)::Cvoid = vkCmdResetEvent2KHR(command_buffer, event, stage_mask)

cmd_wait_events_2_khr(command_buffer::CommandBuffer, events::AbstractArray, dependency_infos::AbstractArray)::Cvoid = vkCmdWaitEvents2KHR(command_buffer, pointer_length(events), events, dependency_infos)

cmd_pipeline_barrier_2_khr(command_buffer::CommandBuffer, dependency_info::_DependencyInfoKHR)::Cvoid = vkCmdPipelineBarrier2KHR(command_buffer, dependency_info)

queue_submit_2_khr(queue::Queue, submits::AbstractArray; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit2KHR(queue, pointer_length(submits), submits, fence))

cmd_write_timestamp_2_khr(command_buffer::CommandBuffer, stage::Integer, query_pool::QueryPool, query::Integer)::Cvoid = vkCmdWriteTimestamp2KHR(command_buffer, stage, query_pool, query)

cmd_write_buffer_marker_2_amd(command_buffer::CommandBuffer, stage::Integer, dst_buffer::Buffer, dst_offset::Integer, marker::Integer)::Cvoid = vkCmdWriteBufferMarker2AMD(command_buffer, stage, dst_buffer, dst_offset, marker)

function get_queue_checkpoint_data_2_nv(queue::Queue)::Vector{CheckpointData2NV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, C_NULL)
    pCheckpointData = Vector{VkCheckpointData2NV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData)
    from_vk.(CheckpointData2NV, pCheckpointData)
end

function get_physical_device_video_capabilities_khr(physical_device::PhysicalDevice, video_profile::_VideoProfileKHR)::ResultTypes.Result{VideoCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkVideoCapabilitiesKHR}()
    @check vkGetPhysicalDeviceVideoCapabilitiesKHR(physical_device, video_profile, pCapabilities)
    from_vk(VideoCapabilitiesKHR, pCapabilities[])
end

function get_physical_device_video_format_properties_khr(physical_device::PhysicalDevice, video_format_info::PhysicalDeviceVideoFormatInfoKHR)::ResultTypes.Result{Vector{VideoFormatPropertiesKHR}, VulkanError}
    pVideoFormatProperties = Vector{VkVideoFormatPropertiesKHR}(undef, pointer_length(video_format_properties))
    @check vkGetPhysicalDeviceVideoFormatPropertiesKHR(physical_device, video_format_info, pointer_length(video_format_properties), pVideoFormatProperties)
    from_vk.(VideoFormatPropertiesKHR, pVideoFormatProperties)
end

function create_video_session_khr(device::Device, create_info::_VideoSessionCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{VideoSessionKHR, VulkanError}
    pVideoSession = Ref{VkVideoSessionKHR}()
    @check vkCreateVideoSessionKHR(device, create_info, allocator, pVideoSession)
    VideoSessionKHR(pVideoSession[], (x->destroy_video_session_khr(device, x; allocator)), device)
end

destroy_video_session_khr(device::Device, video_session::VideoSessionKHR; allocator = C_NULL)::Cvoid = vkDestroyVideoSessionKHR(device, video_session, allocator)

function create_video_session_parameters_khr(device::Device, create_info::_VideoSessionParametersCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{VideoSessionParametersKHR, VulkanError}
    pVideoSessionParameters = Ref{VkVideoSessionParametersKHR}()
    @check vkCreateVideoSessionParametersKHR(device, create_info, allocator, pVideoSessionParameters)
    VideoSessionParametersKHR(pVideoSessionParameters[], (x->destroy_video_session_parameters_khr(device, x; allocator)), getproperty(create_info, :video_session))
end

update_video_session_parameters_khr(device::Device, video_session_parameters::VideoSessionParametersKHR, update_info::_VideoSessionParametersUpdateInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(vkUpdateVideoSessionParametersKHR(device, video_session_parameters, update_info))

destroy_video_session_parameters_khr(device::Device, video_session_parameters::VideoSessionParametersKHR; allocator = C_NULL)::Cvoid = vkDestroyVideoSessionParametersKHR(device, video_session_parameters, allocator)

function get_video_session_memory_requirements_khr(device::Device, video_session::VideoSessionKHR)::ResultTypes.Result{Vector{_VideoGetMemoryPropertiesKHR}, VulkanError}
    pVideoSessionMemoryRequirements = Vector{VkVideoGetMemoryPropertiesKHR}(undef, pointer_length(video_session_memory_requirements))
    @check vkGetVideoSessionMemoryRequirementsKHR(device, video_session, pointer_length(video_session_memory_requirements), pVideoSessionMemoryRequirements)
    from_vk.(_VideoGetMemoryPropertiesKHR, pVideoSessionMemoryRequirements)
end

bind_video_session_memory_khr(device::Device, video_session::VideoSessionKHR, video_session_bind_memories::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(vkBindVideoSessionMemoryKHR(device, video_session, pointer_length(video_session_bind_memories), video_session_bind_memories))

cmd_decode_video_khr(command_buffer::CommandBuffer, frame_info::_VideoDecodeInfoKHR)::Cvoid = vkCmdDecodeVideoKHR(command_buffer, frame_info)

cmd_begin_video_coding_khr(command_buffer::CommandBuffer, begin_info::_VideoBeginCodingInfoKHR)::Cvoid = vkCmdBeginVideoCodingKHR(command_buffer, begin_info)

cmd_control_video_coding_khr(command_buffer::CommandBuffer, coding_control_info::_VideoCodingControlInfoKHR)::Cvoid = vkCmdControlVideoCodingKHR(command_buffer, coding_control_info)

cmd_end_video_coding_khr(command_buffer::CommandBuffer, end_coding_info::_VideoEndCodingInfoKHR)::Cvoid = vkCmdEndVideoCodingKHR(command_buffer, end_coding_info)

cmd_encode_video_khr(command_buffer::CommandBuffer, encode_info::_VideoEncodeInfoKHR)::Cvoid = vkCmdEncodeVideoKHR(command_buffer, encode_info)

function create_instance(create_info::_InstanceCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}
    pInstance = Ref{VkInstance}()
    @check vkCreateInstance(create_info, allocator, pInstance, fun_ptr_create)
    Instance(pInstance[], (x->destroy_instance(x, fun_ptr_destroy; allocator)))
end

destroy_instance(instance::Instance, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyInstance(instance, allocator, fun_ptr)

function enumerate_physical_devices(instance::Instance, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}
    pPhysicalDeviceCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, C_NULL, fun_ptr)
            pPhysicalDevices = Vector{VkPhysicalDevice}(undef, pPhysicalDeviceCount[])
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices, fun_ptr)
        end
    PhysicalDevice.(pPhysicalDevices, identity, instance)
end

get_device_proc_addr(device::Device, name::AbstractString, fun_ptr::FunctionPtr)::FunctionPtr = vkGetDeviceProcAddr(device, name, fun_ptr)

get_instance_proc_addr(name::AbstractString, fun_ptr::FunctionPtr; instance = C_NULL)::FunctionPtr = vkGetInstanceProcAddr(instance, name, fun_ptr)

function get_physical_device_properties(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::PhysicalDeviceProperties
    pProperties = Ref{VkPhysicalDeviceProperties}()
    vkGetPhysicalDeviceProperties(physical_device, pProperties, fun_ptr)
    from_vk(PhysicalDeviceProperties, pProperties[])
end

function get_physical_device_queue_family_properties(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::Vector{QueueFamilyProperties}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, C_NULL, fun_ptr)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties, fun_ptr)
    from_vk.(QueueFamilyProperties, pQueueFamilyProperties)
end

function get_physical_device_memory_properties(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::PhysicalDeviceMemoryProperties
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties}()
    vkGetPhysicalDeviceMemoryProperties(physical_device, pMemoryProperties, fun_ptr)
    from_vk(PhysicalDeviceMemoryProperties, pMemoryProperties[])
end

function get_physical_device_features(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::_PhysicalDeviceFeatures
    pFeatures = Ref{VkPhysicalDeviceFeatures}()
    vkGetPhysicalDeviceFeatures(physical_device, pFeatures, fun_ptr)
    from_vk(_PhysicalDeviceFeatures, pFeatures[])
end

function get_physical_device_format_properties(physical_device::PhysicalDevice, format::Format, fun_ptr::FunctionPtr)::FormatProperties
    pFormatProperties = Ref{VkFormatProperties}()
    vkGetPhysicalDeviceFormatProperties(physical_device, format, pFormatProperties, fun_ptr)
    from_vk(FormatProperties, pFormatProperties[])
end

function get_physical_device_image_format_properties(physical_device::PhysicalDevice, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties}()
    @check vkGetPhysicalDeviceImageFormatProperties(physical_device, format, type, tiling, usage, flags, pImageFormatProperties, fun_ptr)
    from_vk(ImageFormatProperties, pImageFormatProperties[])
end

function create_device(physical_device::PhysicalDevice, create_info::_DeviceCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}
    pDevice = Ref{VkDevice}()
    @check vkCreateDevice(physical_device, create_info, allocator, pDevice, fun_ptr_create)
    Device(pDevice[], (x->destroy_device(x, fun_ptr_destroy; allocator)), physical_device)
end

destroy_device(device::Device, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDevice(device, allocator, fun_ptr)

function enumerate_instance_version(fun_ptr::FunctionPtr)::ResultTypes.Result{VersionNumber, VulkanError}
    pApiVersion = Ref{UInt32}()
    @check vkEnumerateInstanceVersion(pApiVersion, fun_ptr)
    from_vk(VersionNumber, pApiVersion[])
end

function enumerate_instance_layer_properties(fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(LayerProperties, pProperties)
end

function enumerate_instance_extension_properties(fun_ptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(ExtensionProperties, pProperties)
end

function enumerate_device_layer_properties(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(LayerProperties, pProperties)
end

function enumerate_device_extension_properties(physical_device::PhysicalDevice, fun_ptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(ExtensionProperties, pProperties)
end

function get_device_queue(device::Device, queue_family_index::Integer, queue_index::Integer, fun_ptr::FunctionPtr)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue(device, queue_family_index, queue_index, pQueue, fun_ptr)
    Queue(pQueue[], identity, device)
end

queue_submit(queue::Queue, submits::AbstractArray, fun_ptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit(queue, pointer_length(submits), submits, fence, fun_ptr))

queue_wait_idle(queue::Queue, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueWaitIdle(queue, fun_ptr))

device_wait_idle(device::Device, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDeviceWaitIdle(device, fun_ptr))

function allocate_memory(device::Device, allocate_info::_MemoryAllocateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}
    pMemory = Ref{VkDeviceMemory}()
    @check vkAllocateMemory(device, allocate_info, allocator, pMemory, fun_ptr_create)
    DeviceMemory(pMemory[], (x->free_memory(device, x, fun_ptr_destroy; allocator)), device)
end

free_memory(device::Device, memory::DeviceMemory, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkFreeMemory(device, memory, allocator, fun_ptr)

function map_memory(device::Device, memory::DeviceMemory, offset::Integer, size::Integer, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}
    ppData = Ref{Ptr{Cvoid}}()
    @check vkMapMemory(device, memory, offset, size, flags, ppData, fun_ptr)
    ppData[]
end

unmap_memory(device::Device, memory::DeviceMemory, fun_ptr::FunctionPtr)::Cvoid = vkUnmapMemory(device, memory, fun_ptr)

flush_mapped_memory_ranges(device::Device, memory_ranges::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkFlushMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges, fun_ptr))

invalidate_mapped_memory_ranges(device::Device, memory_ranges::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkInvalidateMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges, fun_ptr))

function get_device_memory_commitment(device::Device, memory::DeviceMemory, fun_ptr::FunctionPtr)::UInt64
    pCommittedMemoryInBytes = Ref{VkDeviceSize}()
    vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes, fun_ptr)
    pCommittedMemoryInBytes[]
end

function get_buffer_memory_requirements(device::Device, buffer::Buffer, fun_ptr::FunctionPtr)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements, fun_ptr)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

bind_buffer_memory(device::Device, buffer::Buffer, memory::DeviceMemory, memory_offset::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory(device, buffer, memory, memory_offset, fun_ptr))

function get_image_memory_requirements(device::Device, image::Image, fun_ptr::FunctionPtr)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetImageMemoryRequirements(device, image, pMemoryRequirements, fun_ptr)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

bind_image_memory(device::Device, image::Image, memory::DeviceMemory, memory_offset::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory(device, image, memory, memory_offset, fun_ptr))

function get_image_sparse_memory_requirements(device::Device, image::Image, fun_ptr::FunctionPtr)::Vector{SparseImageMemoryRequirements}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, C_NULL, fun_ptr)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements, fun_ptr)
    from_vk.(SparseImageMemoryRequirements, pSparseMemoryRequirements)
end

function get_physical_device_sparse_image_format_properties(physical_device::PhysicalDevice, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling, fun_ptr::FunctionPtr)::Vector{SparseImageFormatProperties}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, C_NULL, fun_ptr)
    pProperties = Vector{VkSparseImageFormatProperties}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, pProperties, fun_ptr)
    from_vk.(SparseImageFormatProperties, pProperties)
end

queue_bind_sparse(queue::Queue, bind_info::AbstractArray, fun_ptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueBindSparse(queue, pointer_length(bind_info), bind_info, fence, fun_ptr))

function create_fence(device::Device, create_info::_FenceCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkCreateFence(device, create_info, allocator, pFence, fun_ptr_create)
    Fence(pFence[], (x->destroy_fence(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_fence(device::Device, fence::Fence, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyFence(device, fence, allocator, fun_ptr)

reset_fences(device::Device, fences::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkResetFences(device, pointer_length(fences), fences, fun_ptr))

get_fence_status(device::Device, fence::Fence, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceStatus(device, fence, fun_ptr))

wait_for_fences(device::Device, fences::AbstractArray, wait_all::Bool, timeout::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitForFences(device, pointer_length(fences), fences, wait_all, timeout, fun_ptr))

function create_semaphore(device::Device, create_info::_SemaphoreCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}
    pSemaphore = Ref{VkSemaphore}()
    @check vkCreateSemaphore(device, create_info, allocator, pSemaphore, fun_ptr_create)
    Semaphore(pSemaphore[], (x->destroy_semaphore(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_semaphore(device::Device, semaphore::Semaphore, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySemaphore(device, semaphore, allocator, fun_ptr)

function create_event(device::Device, create_info::_EventCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}
    pEvent = Ref{VkEvent}()
    @check vkCreateEvent(device, create_info, allocator, pEvent, fun_ptr_create)
    Event(pEvent[], (x->destroy_event(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_event(device::Device, event::Event, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyEvent(device, event, allocator, fun_ptr)

get_event_status(device::Device, event::Event, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetEventStatus(device, event, fun_ptr))

set_event(device::Device, event::Event, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetEvent(device, event, fun_ptr))

reset_event(device::Device, event::Event, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkResetEvent(device, event, fun_ptr))

function create_query_pool(device::Device, create_info::_QueryPoolCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}
    pQueryPool = Ref{VkQueryPool}()
    @check vkCreateQueryPool(device, create_info, allocator, pQueryPool, fun_ptr_create)
    QueryPool(pQueryPool[], (x->destroy_query_pool(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_query_pool(device::Device, query_pool::QueryPool, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyQueryPool(device, query_pool, allocator, fun_ptr)

get_query_pool_results(device::Device, query_pool::QueryPool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkGetQueryPoolResults(device, query_pool, first_query, query_count, data_size, data, stride, flags, fun_ptr))

reset_query_pool(device::Device, query_pool::QueryPool, first_query::Integer, query_count::Integer, fun_ptr::FunctionPtr)::Cvoid = vkResetQueryPool(device, query_pool, first_query, query_count, fun_ptr)

function create_buffer(device::Device, create_info::_BufferCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}
    pBuffer = Ref{VkBuffer}()
    @check vkCreateBuffer(device, create_info, allocator, pBuffer, fun_ptr_create)
    Buffer(pBuffer[], (x->destroy_buffer(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_buffer(device::Device, buffer::Buffer, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyBuffer(device, buffer, allocator, fun_ptr)

function create_buffer_view(device::Device, create_info::_BufferViewCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}
    pView = Ref{VkBufferView}()
    @check vkCreateBufferView(device, create_info, allocator, pView, fun_ptr_create)
    BufferView(pView[], (x->destroy_buffer_view(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_buffer_view(device::Device, buffer_view::BufferView, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyBufferView(device, buffer_view, allocator, fun_ptr)

function create_image(device::Device, create_info::_ImageCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}
    pImage = Ref{VkImage}()
    @check vkCreateImage(device, create_info, allocator, pImage, fun_ptr_create)
    Image(pImage[], (x->destroy_image(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_image(device::Device, image::Image, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyImage(device, image, allocator, fun_ptr)

function get_image_subresource_layout(device::Device, image::Image, subresource::_ImageSubresource, fun_ptr::FunctionPtr)::SubresourceLayout
    pLayout = Ref{VkSubresourceLayout}()
    vkGetImageSubresourceLayout(device, image, subresource, pLayout, fun_ptr)
    from_vk(SubresourceLayout, pLayout[])
end

function create_image_view(device::Device, create_info::_ImageViewCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}
    pView = Ref{VkImageView}()
    @check vkCreateImageView(device, create_info, allocator, pView, fun_ptr_create)
    ImageView(pView[], (x->destroy_image_view(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_image_view(device::Device, image_view::ImageView, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyImageView(device, image_view, allocator, fun_ptr)

function create_shader_module(device::Device, create_info::_ShaderModuleCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}
    pShaderModule = Ref{VkShaderModule}()
    @check vkCreateShaderModule(device, create_info, allocator, pShaderModule, fun_ptr_create)
    ShaderModule(pShaderModule[], (x->destroy_shader_module(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_shader_module(device::Device, shader_module::ShaderModule, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyShaderModule(device, shader_module, allocator, fun_ptr)

function create_pipeline_cache(device::Device, create_info::_PipelineCacheCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}
    pPipelineCache = Ref{VkPipelineCache}()
    @check vkCreatePipelineCache(device, create_info, allocator, pPipelineCache, fun_ptr_create)
    PipelineCache(pPipelineCache[], (x->destroy_pipeline_cache(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_pipeline_cache(device::Device, pipeline_cache::PipelineCache, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipelineCache(device, pipeline_cache, allocator, fun_ptr)

function get_pipeline_cache_data(device::Device, pipeline_cache::PipelineCache, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, C_NULL, fun_ptr)
            pData = Libc.malloc(pDataSize[])
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, pData, fun_ptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

merge_pipeline_caches(device::Device, dst_cache::PipelineCache, src_caches::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkMergePipelineCaches(device, dst_cache, pointer_length(src_caches), src_caches, fun_ptr))

function create_graphics_pipelines(device::Device, create_infos::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateGraphicsPipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fun_ptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fun_ptr_destroy; allocator)), device), _return_code)
end

function create_compute_pipelines(device::Device, create_infos::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateComputePipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fun_ptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fun_ptr_destroy; allocator)), device), _return_code)
end

destroy_pipeline(device::Device, pipeline::Pipeline, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipeline(device, pipeline, allocator, fun_ptr)

function create_pipeline_layout(device::Device, create_info::_PipelineLayoutCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}
    pPipelineLayout = Ref{VkPipelineLayout}()
    @check vkCreatePipelineLayout(device, create_info, allocator, pPipelineLayout, fun_ptr_create)
    PipelineLayout(pPipelineLayout[], (x->destroy_pipeline_layout(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_pipeline_layout(device::Device, pipeline_layout::PipelineLayout, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipelineLayout(device, pipeline_layout, allocator, fun_ptr)

function create_sampler(device::Device, create_info::_SamplerCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}
    pSampler = Ref{VkSampler}()
    @check vkCreateSampler(device, create_info, allocator, pSampler, fun_ptr_create)
    Sampler(pSampler[], (x->destroy_sampler(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_sampler(device::Device, sampler::Sampler, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySampler(device, sampler, allocator, fun_ptr)

function create_descriptor_set_layout(device::Device, create_info::_DescriptorSetLayoutCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}
    pSetLayout = Ref{VkDescriptorSetLayout}()
    @check vkCreateDescriptorSetLayout(device, create_info, allocator, pSetLayout, fun_ptr_create)
    DescriptorSetLayout(pSetLayout[], (x->destroy_descriptor_set_layout(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_descriptor_set_layout(device::Device, descriptor_set_layout::DescriptorSetLayout, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorSetLayout(device, descriptor_set_layout, allocator, fun_ptr)

function create_descriptor_pool(device::Device, create_info::_DescriptorPoolCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}
    pDescriptorPool = Ref{VkDescriptorPool}()
    @check vkCreateDescriptorPool(device, create_info, allocator, pDescriptorPool, fun_ptr_create)
    DescriptorPool(pDescriptorPool[], (x->destroy_descriptor_pool(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_descriptor_pool(device::Device, descriptor_pool::DescriptorPool, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorPool(device, descriptor_pool, allocator, fun_ptr)

reset_descriptor_pool(device::Device, descriptor_pool::DescriptorPool, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetDescriptorPool(device, descriptor_pool, flags, fun_ptr))

function allocate_descriptor_sets(device::Device, allocate_info::_DescriptorSetAllocateInfo, fun_ptr_create::FunctionPtr)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}
    pDescriptorSets = Vector{VkDescriptorSet}(undef, allocate_info.vks.descriptorSetCount)
    @check vkAllocateDescriptorSets(device, allocate_info, pDescriptorSets, fun_ptr_create)
    DescriptorSet.(pDescriptorSets, identity, getproperty(allocate_info, :descriptor_pool))
end

free_descriptor_sets(device::Device, descriptor_pool::DescriptorPool, descriptor_sets::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkFreeDescriptorSets(device, descriptor_pool, pointer_length(descriptor_sets), descriptor_sets, fun_ptr))

update_descriptor_sets(device::Device, descriptor_writes::AbstractArray, descriptor_copies::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkUpdateDescriptorSets(device, pointer_length(descriptor_writes), descriptor_writes, pointer_length(descriptor_copies), descriptor_copies, fun_ptr)

function create_framebuffer(device::Device, create_info::_FramebufferCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}
    pFramebuffer = Ref{VkFramebuffer}()
    @check vkCreateFramebuffer(device, create_info, allocator, pFramebuffer, fun_ptr_create)
    Framebuffer(pFramebuffer[], (x->destroy_framebuffer(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_framebuffer(device::Device, framebuffer::Framebuffer, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyFramebuffer(device, framebuffer, allocator, fun_ptr)

function create_render_pass(device::Device, create_info::_RenderPassCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass(device, create_info, allocator, pRenderPass, fun_ptr_create)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_render_pass(device::Device, render_pass::RenderPass, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyRenderPass(device, render_pass, allocator, fun_ptr)

function get_render_area_granularity(device::Device, render_pass::RenderPass, fun_ptr::FunctionPtr)::_Extent2D
    pGranularity = Ref{VkExtent2D}()
    vkGetRenderAreaGranularity(device, render_pass, pGranularity, fun_ptr)
    from_vk(_Extent2D, pGranularity[])
end

function create_command_pool(device::Device, create_info::_CommandPoolCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}
    pCommandPool = Ref{VkCommandPool}()
    @check vkCreateCommandPool(device, create_info, allocator, pCommandPool, fun_ptr_create)
    CommandPool(pCommandPool[], (x->destroy_command_pool(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_command_pool(device::Device, command_pool::CommandPool, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyCommandPool(device, command_pool, allocator, fun_ptr)

reset_command_pool(device::Device, command_pool::CommandPool, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandPool(device, command_pool, flags, fun_ptr))

function allocate_command_buffers(device::Device, allocate_info::_CommandBufferAllocateInfo, fun_ptr_create::FunctionPtr)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}
    pCommandBuffers = Vector{VkCommandBuffer}(undef, allocate_info.vks.commandBufferCount)
    @check vkAllocateCommandBuffers(device, allocate_info, pCommandBuffers, fun_ptr_create)
    CommandBuffer.(pCommandBuffers, identity, getproperty(allocate_info, :command_pool))
end

free_command_buffers(device::Device, command_pool::CommandPool, command_buffers::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkFreeCommandBuffers(device, command_pool, pointer_length(command_buffers), command_buffers, fun_ptr)

begin_command_buffer(command_buffer::CommandBuffer, begin_info::_CommandBufferBeginInfo, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBeginCommandBuffer(command_buffer, begin_info, fun_ptr))

end_command_buffer(command_buffer::CommandBuffer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkEndCommandBuffer(command_buffer, fun_ptr))

reset_command_buffer(command_buffer::CommandBuffer, fun_ptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandBuffer(command_buffer, flags, fun_ptr))

cmd_bind_pipeline(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, fun_ptr::FunctionPtr)::Cvoid = vkCmdBindPipeline(command_buffer, pipeline_bind_point, pipeline, fun_ptr)

cmd_set_viewport(command_buffer::CommandBuffer, viewports::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetViewport(command_buffer, 0, pointer_length(viewports), viewports, fun_ptr)

cmd_set_scissor(command_buffer::CommandBuffer, scissors::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetScissor(command_buffer, 0, pointer_length(scissors), scissors, fun_ptr)

cmd_set_line_width(command_buffer::CommandBuffer, line_width::Real, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetLineWidth(command_buffer, line_width, fun_ptr)

cmd_set_depth_bias(command_buffer::CommandBuffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthBias(command_buffer, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor, fun_ptr)

cmd_set_blend_constants(command_buffer::CommandBuffer, blend_constants::NTuple{4, Float32}, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetBlendConstants(command_buffer, blend_constants, fun_ptr)

cmd_set_depth_bounds(command_buffer::CommandBuffer, min_depth_bounds::Real, max_depth_bounds::Real, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthBounds(command_buffer, min_depth_bounds, max_depth_bounds, fun_ptr)

cmd_set_stencil_compare_mask(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, compare_mask::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetStencilCompareMask(command_buffer, face_mask, compare_mask, fun_ptr)

cmd_set_stencil_write_mask(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, write_mask::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetStencilWriteMask(command_buffer, face_mask, write_mask, fun_ptr)

cmd_set_stencil_reference(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, reference::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetStencilReference(command_buffer, face_mask, reference, fun_ptr)

cmd_bind_descriptor_sets(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, layout::PipelineLayout, first_set::Integer, descriptor_sets::AbstractArray, dynamic_offsets::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdBindDescriptorSets(command_buffer, pipeline_bind_point, layout, first_set, pointer_length(descriptor_sets), descriptor_sets, pointer_length(dynamic_offsets), dynamic_offsets, fun_ptr)

cmd_bind_index_buffer(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, index_type::IndexType, fun_ptr::FunctionPtr)::Cvoid = vkCmdBindIndexBuffer(command_buffer, buffer, offset, index_type, fun_ptr)

cmd_bind_vertex_buffers(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdBindVertexBuffers(command_buffer, 0, pointer_length(buffers), buffers, offsets, fun_ptr)

cmd_draw(command_buffer::CommandBuffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDraw(command_buffer, vertex_count, instance_count, first_vertex, first_instance, fun_ptr)

cmd_draw_indexed(command_buffer::CommandBuffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndexed(command_buffer, index_count, instance_count, first_index, vertex_offset, first_instance, fun_ptr)

cmd_draw_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndirect(command_buffer, buffer, offset, draw_count, stride, fun_ptr)

cmd_draw_indexed_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndexedIndirect(command_buffer, buffer, offset, draw_count, stride, fun_ptr)

cmd_dispatch(command_buffer::CommandBuffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDispatch(command_buffer, group_count_x, group_count_y, group_count_z, fun_ptr)

cmd_dispatch_indirect(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDispatchIndirect(command_buffer, buffer, offset, fun_ptr)

cmd_copy_buffer(command_buffer::CommandBuffer, src_buffer::Buffer, dst_buffer::Buffer, regions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, pointer_length(regions), regions, fun_ptr)

cmd_copy_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, fun_ptr)

cmd_blit_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter, fun_ptr::FunctionPtr)::Cvoid = vkCmdBlitImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, filter, fun_ptr)

cmd_copy_buffer_to_image(command_buffer::CommandBuffer, src_buffer::Buffer, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyBufferToImage(command_buffer, src_buffer, dst_image, dst_image_layout, pointer_length(regions), regions, fun_ptr)

cmd_copy_image_to_buffer(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_buffer::Buffer, regions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyImageToBuffer(command_buffer, src_image, src_image_layout, dst_buffer, pointer_length(regions), regions, fun_ptr)

cmd_update_buffer(command_buffer::CommandBuffer, dst_buffer::Buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::Cvoid = vkCmdUpdateBuffer(command_buffer, dst_buffer, dst_offset, data_size, data, fun_ptr)

cmd_fill_buffer(command_buffer::CommandBuffer, dst_buffer::Buffer, dst_offset::Integer, size::Integer, data::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdFillBuffer(command_buffer, dst_buffer, dst_offset, size, data, fun_ptr)

cmd_clear_color_image(command_buffer::CommandBuffer, image::Image, image_layout::ImageLayout, color::VkClearColorValue, ranges::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdClearColorImage(command_buffer, image, image_layout, Ref(color), pointer_length(ranges), ranges, fun_ptr)

cmd_clear_depth_stencil_image(command_buffer::CommandBuffer, image::Image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdClearDepthStencilImage(command_buffer, image, image_layout, depth_stencil, pointer_length(ranges), ranges, fun_ptr)

cmd_clear_attachments(command_buffer::CommandBuffer, attachments::AbstractArray, rects::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdClearAttachments(command_buffer, pointer_length(attachments), attachments, pointer_length(rects), rects, fun_ptr)

cmd_resolve_image(command_buffer::CommandBuffer, src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdResolveImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, fun_ptr)

cmd_set_event(command_buffer::CommandBuffer, event::Event, stage_mask::PipelineStageFlag, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetEvent(command_buffer, event, stage_mask, fun_ptr)

cmd_reset_event(command_buffer::CommandBuffer, event::Event, stage_mask::PipelineStageFlag, fun_ptr::FunctionPtr)::Cvoid = vkCmdResetEvent(command_buffer, event, stage_mask, fun_ptr)

cmd_wait_events(command_buffer::CommandBuffer, events::AbstractArray, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray, fun_ptr::FunctionPtr; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid = vkCmdWaitEvents(command_buffer, pointer_length(events), events, src_stage_mask, dst_stage_mask, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers, fun_ptr)

cmd_pipeline_barrier(command_buffer::CommandBuffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray, fun_ptr::FunctionPtr; dependency_flags = 0)::Cvoid = vkCmdPipelineBarrier(command_buffer, src_stage_mask, dst_stage_mask, dependency_flags, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers, fun_ptr)

cmd_begin_query(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, fun_ptr::FunctionPtr; flags = 0)::Cvoid = vkCmdBeginQuery(command_buffer, query_pool, query, flags, fun_ptr)

cmd_end_query(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndQuery(command_buffer, query_pool, query, fun_ptr)

cmd_begin_conditional_rendering_ext(command_buffer::CommandBuffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdBeginConditionalRenderingEXT(command_buffer, conditional_rendering_begin, fun_ptr)

cmd_end_conditional_rendering_ext(command_buffer::CommandBuffer, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndConditionalRenderingEXT(command_buffer, fun_ptr)

cmd_reset_query_pool(command_buffer::CommandBuffer, query_pool::QueryPool, first_query::Integer, query_count::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdResetQueryPool(command_buffer, query_pool, first_query, query_count, fun_ptr)

cmd_write_timestamp(command_buffer::CommandBuffer, pipeline_stage::PipelineStageFlag, query_pool::QueryPool, query::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteTimestamp(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), query_pool, query, fun_ptr)

cmd_copy_query_pool_results(command_buffer::CommandBuffer, query_pool::QueryPool, first_query::Integer, query_count::Integer, dst_buffer::Buffer, dst_offset::Integer, stride::Integer, fun_ptr::FunctionPtr; flags = 0)::Cvoid = vkCmdCopyQueryPoolResults(command_buffer, query_pool, first_query, query_count, dst_buffer, dst_offset, stride, flags, fun_ptr)

cmd_push_constants(command_buffer::CommandBuffer, layout::PipelineLayout, stage_flags::ShaderStageFlag, offset::Integer, values::Ptr{Cvoid}, fun_ptr::FunctionPtr)::Cvoid = vkCmdPushConstants(command_buffer, layout, stage_flags, offset, pointer_length(values), values, fun_ptr)

cmd_begin_render_pass(command_buffer::CommandBuffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents, fun_ptr::FunctionPtr)::Cvoid = vkCmdBeginRenderPass(command_buffer, render_pass_begin, contents, fun_ptr)

cmd_next_subpass(command_buffer::CommandBuffer, contents::SubpassContents, fun_ptr::FunctionPtr)::Cvoid = vkCmdNextSubpass(command_buffer, contents, fun_ptr)

cmd_end_render_pass(command_buffer::CommandBuffer, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndRenderPass(command_buffer, fun_ptr)

cmd_execute_commands(command_buffer::CommandBuffer, command_buffers::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdExecuteCommands(command_buffer, pointer_length(command_buffers), command_buffers, fun_ptr)

function create_android_surface_khr(instance::Instance, create_info::_AndroidSurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateAndroidSurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function get_physical_device_display_properties_khr(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayPropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayPropertiesKHR, pProperties)
end

function get_physical_device_display_plane_properties_khr(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayPlanePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayPlanePropertiesKHR, pProperties)
end

function get_display_plane_supported_displays_khr(physical_device::PhysicalDevice, plane_index::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}
    pDisplayCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, C_NULL, fun_ptr)
            pDisplays = Vector{VkDisplayKHR}(undef, pDisplayCount[])
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, pDisplays, fun_ptr)
        end
    DisplayKHR.(pDisplays, identity, physical_device)
end

function get_display_mode_properties_khr(physical_device::PhysicalDevice, display::DisplayKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayModePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayModePropertiesKHR, pProperties)
end

function create_display_mode_khr(physical_device::PhysicalDevice, display::DisplayKHR, create_info::_DisplayModeCreateInfoKHR, fun_ptr_create::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}
    pMode = Ref{VkDisplayModeKHR}()
    @check vkCreateDisplayModeKHR(physical_device, display, create_info, allocator, pMode, fun_ptr_create)
    DisplayModeKHR(pMode[], identity, display)
end

function get_display_plane_capabilities_khr(physical_device::PhysicalDevice, mode::DisplayModeKHR, plane_index::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilitiesKHR}()
    @check vkGetDisplayPlaneCapabilitiesKHR(physical_device, mode, plane_index, pCapabilities, fun_ptr)
    from_vk(DisplayPlaneCapabilitiesKHR, pCapabilities[])
end

function create_display_plane_surface_khr(instance::Instance, create_info::_DisplaySurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateDisplayPlaneSurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_shared_swapchains_khr(device::Device, create_infos::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}
    pSwapchains = Vector{VkSwapchainKHR}(undef, pointer_length(create_infos))
    @check vkCreateSharedSwapchainsKHR(device, pointer_length(create_infos), create_infos, allocator, pSwapchains, fun_ptr_create)
    SwapchainKHR.(pSwapchains, (x->destroy_swapchain_khr(device, x, fun_ptr_destroy; allocator)), getproperty(create_infos, :surface))
end

destroy_surface_khr(instance::Instance, surface::SurfaceKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySurfaceKHR(instance, surface, allocator, fun_ptr)

function get_physical_device_surface_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Bool, VulkanError}
    pSupported = Ref{VkBool32}()
    @check vkGetPhysicalDeviceSurfaceSupportKHR(physical_device, queue_family_index, surface, pSupported, fun_ptr)
    from_vk(Bool, pSupported[])
end

function get_physical_device_surface_capabilities_khr(physical_device::PhysicalDevice, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilitiesKHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device, surface, pSurfaceCapabilities, fun_ptr)
    from_vk(SurfaceCapabilitiesKHR, pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_khr(physical_device::PhysicalDevice, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, C_NULL, fun_ptr)
            pSurfaceFormats = Vector{VkSurfaceFormatKHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, pSurfaceFormats, fun_ptr)
        end
    from_vk.(SurfaceFormatKHR, pSurfaceFormats)
end

function get_physical_device_surface_present_modes_khr(physical_device::PhysicalDevice, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, C_NULL, fun_ptr)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, pPresentModes, fun_ptr)
        end
    pPresentModes
end

function create_swapchain_khr(device::Device, create_info::_SwapchainCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}
    pSwapchain = Ref{VkSwapchainKHR}()
    @check vkCreateSwapchainKHR(device, create_info, allocator, pSwapchain, fun_ptr_create)
    SwapchainKHR(pSwapchain[], (x->destroy_swapchain_khr(device, x, fun_ptr_destroy; allocator)), getproperty(create_info, :surface))
end

destroy_swapchain_khr(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySwapchainKHR(device, swapchain, allocator, fun_ptr)

function get_swapchain_images_khr(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{Image}, VulkanError}
    pSwapchainImageCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, C_NULL, fun_ptr)
            pSwapchainImages = Vector{VkImage}(undef, pSwapchainImageCount[])
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages, fun_ptr)
        end
    Image.(pSwapchainImages, identity, device)
end

function acquire_next_image_khr(device::Device, swapchain::SwapchainKHR, timeout::Integer, fun_ptr::FunctionPtr; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex, fun_ptr)
    (pImageIndex[], _return_code)
end

queue_present_khr(queue::Queue, present_info::_PresentInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueuePresentKHR(queue, present_info, fun_ptr))

function create_vi_surface_nn(instance::Instance, create_info::_ViSurfaceCreateInfoNN, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateViSurfaceNN(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_wayland_surface_khr(instance::Instance, create_info::_WaylandSurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateWaylandSurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_wayland_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, display::vk.wl_display, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceWaylandPresentationSupportKHR(physical_device, queue_family_index, to_vk(Ptr{wl_display}, display), fun_ptr))

function create_win_32_surface_khr(instance::Instance, create_info::_Win32SurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateWin32SurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_win_32_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device, queue_family_index, fun_ptr))

function create_xlib_surface_khr(instance::Instance, create_info::_XlibSurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateXlibSurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_xlib_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, dpy::vk.Display, visual_id::vk.VisualID, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceXlibPresentationSupportKHR(physical_device, queue_family_index, Ref(dpy), visual_id, fun_ptr))

function create_xcb_surface_khr(instance::Instance, create_info::_XcbSurfaceCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateXcbSurfaceKHR(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_xcb_presentation_support_khr(physical_device::PhysicalDevice, queue_family_index::Integer, connection::vk.xcb_connection_t, visual_id::vk.xcb_visualid_t, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceXcbPresentationSupportKHR(physical_device, queue_family_index, Ref(connection), visual_id, fun_ptr))

function create_direct_fb_surface_ext(instance::Instance, create_info::_DirectFBSurfaceCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateDirectFBSurfaceEXT(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_direct_fb_presentation_support_ext(physical_device::PhysicalDevice, queue_family_index::Integer, dfb::vk.IDirectFB, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physical_device, queue_family_index, to_vk(Ptr{IDirectFB}, dfb), fun_ptr))

function create_image_pipe_surface_fuchsia(instance::Instance, create_info::_ImagePipeSurfaceCreateInfoFUCHSIA, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateImagePipeSurfaceFUCHSIA(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_stream_descriptor_surface_ggp(instance::Instance, create_info::_StreamDescriptorSurfaceCreateInfoGGP, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateStreamDescriptorSurfaceGGP(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_screen_surface_qnx(instance::Instance, create_info::_ScreenSurfaceCreateInfoQNX, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateScreenSurfaceQNX(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

get_physical_device_screen_presentation_support_qnx(physical_device::PhysicalDevice, queue_family_index::Integer, window::vk._screen_window, fun_ptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceScreenPresentationSupportQNX(physical_device, queue_family_index, to_vk(Ptr{_screen_window}, window), fun_ptr))

function create_debug_report_callback_ext(instance::Instance, create_info::_DebugReportCallbackCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}
    pCallback = Ref{VkDebugReportCallbackEXT}()
    @check vkCreateDebugReportCallbackEXT(instance, create_info, allocator, pCallback, fun_ptr_create)
    DebugReportCallbackEXT(pCallback[], (x->destroy_debug_report_callback_ext(instance, x, fun_ptr_destroy; allocator)), instance)
end

destroy_debug_report_callback_ext(instance::Instance, callback::DebugReportCallbackEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDebugReportCallbackEXT(instance, callback, allocator, fun_ptr)

debug_report_message_ext(instance::Instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString, fun_ptr::FunctionPtr)::Cvoid = vkDebugReportMessageEXT(instance, flags, object_type, object, location, message_code, layer_prefix, message, fun_ptr)

debug_marker_set_object_name_ext(device::Device, name_info::_DebugMarkerObjectNameInfoEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectNameEXT(device, name_info, fun_ptr))

debug_marker_set_object_tag_ext(device::Device, tag_info::_DebugMarkerObjectTagInfoEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectTagEXT(device, tag_info, fun_ptr))

cmd_debug_marker_begin_ext(command_buffer::CommandBuffer, marker_info::_DebugMarkerMarkerInfoEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerBeginEXT(command_buffer, marker_info, fun_ptr)

cmd_debug_marker_end_ext(command_buffer::CommandBuffer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerEndEXT(command_buffer, fun_ptr)

cmd_debug_marker_insert_ext(command_buffer::CommandBuffer, marker_info::_DebugMarkerMarkerInfoEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerInsertEXT(command_buffer, marker_info, fun_ptr)

function get_physical_device_external_image_format_properties_nv(physical_device::PhysicalDevice, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fun_ptr::FunctionPtr; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}
    pExternalImageFormatProperties = Ref{VkExternalImageFormatPropertiesNV}()
    @check vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physical_device, format, type, tiling, usage, flags, external_handle_type, pExternalImageFormatProperties, fun_ptr)
    from_vk(ExternalImageFormatPropertiesNV, pExternalImageFormatProperties[])
end

get_memory_win_32_handle_nv(device::Device, memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::vk.HANDLE, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleNV(device, memory, handle_type, to_vk(Ptr{HANDLE}, handle), fun_ptr))

cmd_execute_generated_commands_nv(command_buffer::CommandBuffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV, fun_ptr::FunctionPtr)::Cvoid = vkCmdExecuteGeneratedCommandsNV(command_buffer, is_preprocessed, generated_commands_info, fun_ptr)

cmd_preprocess_generated_commands_nv(command_buffer::CommandBuffer, generated_commands_info::_GeneratedCommandsInfoNV, fun_ptr::FunctionPtr)::Cvoid = vkCmdPreprocessGeneratedCommandsNV(command_buffer, generated_commands_info, fun_ptr)

cmd_bind_pipeline_shader_group_nv(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, group_index::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdBindPipelineShaderGroupNV(command_buffer, pipeline_bind_point, pipeline, group_index, fun_ptr)

function get_generated_commands_memory_requirements_nv(device::Device, info::_GeneratedCommandsMemoryRequirementsInfoNV, fun_ptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetGeneratedCommandsMemoryRequirementsNV(device, info, pMemoryRequirements, fun_ptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function create_indirect_commands_layout_nv(device::Device, create_info::_IndirectCommandsLayoutCreateInfoNV, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}
    pIndirectCommandsLayout = Ref{VkIndirectCommandsLayoutNV}()
    @check vkCreateIndirectCommandsLayoutNV(device, create_info, allocator, pIndirectCommandsLayout, fun_ptr_create)
    IndirectCommandsLayoutNV(pIndirectCommandsLayout[], (x->destroy_indirect_commands_layout_nv(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_indirect_commands_layout_nv(device::Device, indirect_commands_layout::IndirectCommandsLayoutNV, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyIndirectCommandsLayoutNV(device, indirect_commands_layout, allocator, fun_ptr)

function get_physical_device_features_2(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::_PhysicalDeviceFeatures2
    pFeatures = Ref{VkPhysicalDeviceFeatures2}()
    vkGetPhysicalDeviceFeatures2(physical_device, pFeatures, fun_ptr)
    from_vk(_PhysicalDeviceFeatures2, pFeatures[])
end

function get_physical_device_properties_2(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::PhysicalDeviceProperties2
    pProperties = Ref{VkPhysicalDeviceProperties2}()
    vkGetPhysicalDeviceProperties2(physical_device, pProperties, fun_ptr)
    from_vk(PhysicalDeviceProperties2, pProperties[])
end

function get_physical_device_format_properties_2(physical_device::PhysicalDevice, format::Format, fun_ptr::FunctionPtr)::FormatProperties2
    pFormatProperties = Ref{VkFormatProperties2}()
    vkGetPhysicalDeviceFormatProperties2(physical_device, format, pFormatProperties, fun_ptr)
    from_vk(FormatProperties2, pFormatProperties[])
end

function get_physical_device_image_format_properties_2(physical_device::PhysicalDevice, image_format_info::_PhysicalDeviceImageFormatInfo2, fun_ptr::FunctionPtr)::ResultTypes.Result{ImageFormatProperties2, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties2}()
    @check vkGetPhysicalDeviceImageFormatProperties2(physical_device, image_format_info, pImageFormatProperties, fun_ptr)
    from_vk(ImageFormatProperties2, pImageFormatProperties[])
end

function get_physical_device_queue_family_properties_2(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::Vector{QueueFamilyProperties2}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, C_NULL, fun_ptr)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties2}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties, fun_ptr)
    from_vk.(QueueFamilyProperties2, pQueueFamilyProperties)
end

function get_physical_device_memory_properties_2(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::PhysicalDeviceMemoryProperties2
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties2}()
    vkGetPhysicalDeviceMemoryProperties2(physical_device, pMemoryProperties, fun_ptr)
    from_vk(PhysicalDeviceMemoryProperties2, pMemoryProperties[])
end

function get_physical_device_sparse_image_format_properties_2(physical_device::PhysicalDevice, format_info::_PhysicalDeviceSparseImageFormatInfo2, fun_ptr::FunctionPtr)::Vector{SparseImageFormatProperties2}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, C_NULL, fun_ptr)
    pProperties = Vector{VkSparseImageFormatProperties2}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, pProperties, fun_ptr)
    from_vk.(SparseImageFormatProperties2, pProperties)
end

cmd_push_descriptor_set_khr(command_buffer::CommandBuffer, pipeline_bind_point::PipelineBindPoint, layout::PipelineLayout, set::Integer, descriptor_writes::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdPushDescriptorSetKHR(command_buffer, pipeline_bind_point, layout, set, pointer_length(descriptor_writes), descriptor_writes, fun_ptr)

trim_command_pool(device::Device, command_pool::CommandPool, fun_ptr::FunctionPtr; flags = 0)::Cvoid = vkTrimCommandPool(device, command_pool, flags, fun_ptr)

function get_physical_device_external_buffer_properties(physical_device::PhysicalDevice, external_buffer_info::_PhysicalDeviceExternalBufferInfo, fun_ptr::FunctionPtr)::ExternalBufferProperties
    pExternalBufferProperties = Ref{VkExternalBufferProperties}()
    vkGetPhysicalDeviceExternalBufferProperties(physical_device, external_buffer_info, pExternalBufferProperties, fun_ptr)
    from_vk(ExternalBufferProperties, pExternalBufferProperties[])
end

get_memory_win_32_handle_khr(device::Device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle), fun_ptr))

function get_memory_win_32_handle_properties_khr(device::Device, handle_type::ExternalMemoryHandleTypeFlag, handle::vk.HANDLE, fun_ptr::FunctionPtr)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}
    pMemoryWin32HandleProperties = Ref{VkMemoryWin32HandlePropertiesKHR}()
    @check vkGetMemoryWin32HandlePropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, pMemoryWin32HandleProperties, fun_ptr)
    from_vk(MemoryWin32HandlePropertiesKHR, pMemoryWin32HandleProperties[])
end

function get_memory_fd_khr(device::Device, get_fd_info::_MemoryGetFdInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetMemoryFdKHR(device, get_fd_info, pFd, fun_ptr)
    pFd[]
end

function get_memory_fd_properties_khr(device::Device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}
    pMemoryFdProperties = Ref{VkMemoryFdPropertiesKHR}()
    @check vkGetMemoryFdPropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd, pMemoryFdProperties, fun_ptr)
    from_vk(MemoryFdPropertiesKHR, pMemoryFdProperties[])
end

get_memory_zircon_handle_fuchsia(device::Device, get_zircon_handle_info::_MemoryGetZirconHandleInfoFUCHSIA, zircon_handle::vk.zx_handle_t, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryZirconHandleFUCHSIA(device, get_zircon_handle_info, to_vk(Ptr{zx_handle_t}, zircon_handle), fun_ptr))

function get_memory_zircon_handle_properties_fuchsia(device::Device, handle_type::ExternalMemoryHandleTypeFlag, zircon_handle::vk.zx_handle_t, fun_ptr::FunctionPtr)::ResultTypes.Result{MemoryZirconHandlePropertiesFUCHSIA, VulkanError}
    pMemoryZirconHandleProperties = Ref{VkMemoryZirconHandlePropertiesFUCHSIA}()
    @check vkGetMemoryZirconHandlePropertiesFUCHSIA(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), zircon_handle, pMemoryZirconHandleProperties, fun_ptr)
    from_vk(MemoryZirconHandlePropertiesFUCHSIA, pMemoryZirconHandleProperties[])
end

function get_physical_device_external_semaphore_properties(physical_device::PhysicalDevice, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo, fun_ptr::FunctionPtr)::ExternalSemaphoreProperties
    pExternalSemaphoreProperties = Ref{VkExternalSemaphoreProperties}()
    vkGetPhysicalDeviceExternalSemaphoreProperties(physical_device, external_semaphore_info, pExternalSemaphoreProperties, fun_ptr)
    from_vk(ExternalSemaphoreProperties, pExternalSemaphoreProperties[])
end

get_semaphore_win_32_handle_khr(device::Device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSemaphoreWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle), fun_ptr))

import_semaphore_win_32_handle_khr(device::Device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreWin32HandleKHR(device, import_semaphore_win_32_handle_info, fun_ptr))

function get_semaphore_fd_khr(device::Device, get_fd_info::_SemaphoreGetFdInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetSemaphoreFdKHR(device, get_fd_info, pFd, fun_ptr)
    pFd[]
end

import_semaphore_fd_khr(device::Device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreFdKHR(device, import_semaphore_fd_info, fun_ptr))

get_semaphore_zircon_handle_fuchsia(device::Device, get_zircon_handle_info::_SemaphoreGetZirconHandleInfoFUCHSIA, zircon_handle::vk.zx_handle_t, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSemaphoreZirconHandleFUCHSIA(device, get_zircon_handle_info, to_vk(Ptr{zx_handle_t}, zircon_handle), fun_ptr))

import_semaphore_zircon_handle_fuchsia(device::Device, import_semaphore_zircon_handle_info::_ImportSemaphoreZirconHandleInfoFUCHSIA, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreZirconHandleFUCHSIA(device, import_semaphore_zircon_handle_info, fun_ptr))

function get_physical_device_external_fence_properties(physical_device::PhysicalDevice, external_fence_info::_PhysicalDeviceExternalFenceInfo, fun_ptr::FunctionPtr)::ExternalFenceProperties
    pExternalFenceProperties = Ref{VkExternalFenceProperties}()
    vkGetPhysicalDeviceExternalFenceProperties(physical_device, external_fence_info, pExternalFenceProperties, fun_ptr)
    from_vk(ExternalFenceProperties, pExternalFenceProperties[])
end

get_fence_win_32_handle_khr(device::Device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::vk.HANDLE, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{HANDLE}, handle), fun_ptr))

import_fence_win_32_handle_khr(device::Device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceWin32HandleKHR(device, import_fence_win_32_handle_info, fun_ptr))

function get_fence_fd_khr(device::Device, get_fd_info::_FenceGetFdInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetFenceFdKHR(device, get_fd_info, pFd, fun_ptr)
    pFd[]
end

import_fence_fd_khr(device::Device, import_fence_fd_info::_ImportFenceFdInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceFdKHR(device, import_fence_fd_info, fun_ptr))

release_display_ext(physical_device::PhysicalDevice, display::DisplayKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseDisplayEXT(physical_device, display, fun_ptr))

acquire_xlib_display_ext(physical_device::PhysicalDevice, dpy::vk.Display, display::DisplayKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireXlibDisplayEXT(physical_device, to_vk(Ptr{Display}, dpy), display, fun_ptr))

function get_rand_r_output_display_ext(physical_device::PhysicalDevice, dpy::vk.Display, rr_output::vk.RROutput, fun_ptr::FunctionPtr)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetRandROutputDisplayEXT(physical_device, Ref(dpy), rr_output, pDisplay, fun_ptr)
    DisplayKHR(pDisplay[], identity, physical_device)
end

acquire_winrt_display_nv(physical_device::PhysicalDevice, display::DisplayKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireWinrtDisplayNV(physical_device, display, fun_ptr))

function get_winrt_display_nv(physical_device::PhysicalDevice, device_relative_id::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetWinrtDisplayNV(physical_device, device_relative_id, pDisplay, fun_ptr)
    DisplayKHR(pDisplay[], identity, physical_device)
end

display_power_control_ext(device::Device, display::DisplayKHR, display_power_info::_DisplayPowerInfoEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDisplayPowerControlEXT(device, display, display_power_info, fun_ptr))

function register_device_event_ext(device::Device, device_event_info::_DeviceEventInfoEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDeviceEventEXT(device, device_event_info, allocator, pFence, fun_ptr)
    Fence(pFence[], (x->destroy_fence(device, x, fun_ptr_destroy; allocator)), device)
end

function register_display_event_ext(device::Device, display::DisplayKHR, display_event_info::_DisplayEventInfoEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDisplayEventEXT(device, display, display_event_info, allocator, pFence, fun_ptr)
    Fence(pFence[], (x->destroy_fence(device, x, fun_ptr_destroy; allocator)), device)
end

function get_swapchain_counter_ext(device::Device, swapchain::SwapchainKHR, counter::SurfaceCounterFlagEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}
    pCounterValue = Ref{UInt64}()
    @check vkGetSwapchainCounterEXT(device, swapchain, VkSurfaceCounterFlagBitsEXT(counter.val), pCounterValue, fun_ptr)
    pCounterValue[]
end

function get_physical_device_surface_capabilities_2_ext(physical_device::PhysicalDevice, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2EXT}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2EXT(physical_device, surface, pSurfaceCapabilities, fun_ptr)
    from_vk(SurfaceCapabilities2EXT, pSurfaceCapabilities[])
end

function enumerate_physical_device_groups(instance::Instance, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}
    pPhysicalDeviceGroupCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, C_NULL, fun_ptr)
            pPhysicalDeviceGroupProperties = Vector{VkPhysicalDeviceGroupProperties}(undef, pPhysicalDeviceGroupCount[])
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties, fun_ptr)
        end
    from_vk.(PhysicalDeviceGroupProperties, pPhysicalDeviceGroupProperties)
end

function get_device_group_peer_memory_features(device::Device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer, fun_ptr::FunctionPtr)::PeerMemoryFeatureFlag
    pPeerMemoryFeatures = Ref{VkPeerMemoryFeatureFlags}()
    vkGetDeviceGroupPeerMemoryFeatures(device, heap_index, local_device_index, remote_device_index, pPeerMemoryFeatures, fun_ptr)
    pPeerMemoryFeatures[]
end

bind_buffer_memory_2(device::Device, bind_infos::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory2(device, pointer_length(bind_infos), bind_infos, fun_ptr))

bind_image_memory_2(device::Device, bind_infos::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory2(device, pointer_length(bind_infos), bind_infos, fun_ptr))

cmd_set_device_mask(command_buffer::CommandBuffer, device_mask::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDeviceMask(command_buffer, device_mask, fun_ptr)

function get_device_group_present_capabilities_khr(device::Device, fun_ptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}
    pDeviceGroupPresentCapabilities = Ref{VkDeviceGroupPresentCapabilitiesKHR}()
    @check vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities, fun_ptr)
    from_vk(DeviceGroupPresentCapabilitiesKHR, pDeviceGroupPresentCapabilities[])
end

function get_device_group_surface_present_modes_khr(device::Device, surface::SurfaceKHR, modes::DeviceGroupPresentModeFlagKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes, fun_ptr)
    pModes[]
end

function acquire_next_image_2_khr(device::Device, acquire_info::_AcquireNextImageInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImage2KHR(device, acquire_info, pImageIndex, fun_ptr)
    (pImageIndex[], _return_code)
end

cmd_dispatch_base(command_buffer::CommandBuffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDispatchBase(command_buffer, base_group_x, base_group_y, base_group_z, group_count_x, group_count_y, group_count_z, fun_ptr)

function get_physical_device_present_rectangles_khr(physical_device::PhysicalDevice, surface::SurfaceKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}
    pRectCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, C_NULL, fun_ptr)
            pRects = Vector{VkRect2D}(undef, pRectCount[])
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, pRects, fun_ptr)
        end
    from_vk.(_Rect2D, pRects)
end

function create_descriptor_update_template(device::Device, create_info::_DescriptorUpdateTemplateCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}
    pDescriptorUpdateTemplate = Ref{VkDescriptorUpdateTemplate}()
    @check vkCreateDescriptorUpdateTemplate(device, create_info, allocator, pDescriptorUpdateTemplate, fun_ptr_create)
    DescriptorUpdateTemplate(pDescriptorUpdateTemplate[], (x->destroy_descriptor_update_template(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_descriptor_update_template(device::Device, descriptor_update_template::DescriptorUpdateTemplate, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorUpdateTemplate(device, descriptor_update_template, allocator, fun_ptr)

update_descriptor_set_with_template(device::Device, descriptor_set::DescriptorSet, descriptor_update_template::DescriptorUpdateTemplate, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::Cvoid = vkUpdateDescriptorSetWithTemplate(device, descriptor_set, descriptor_update_template, Ref(data), fun_ptr)

cmd_push_descriptor_set_with_template_khr(command_buffer::CommandBuffer, descriptor_update_template::DescriptorUpdateTemplate, layout::PipelineLayout, set::Integer, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::Cvoid = vkCmdPushDescriptorSetWithTemplateKHR(command_buffer, descriptor_update_template, layout, set, Ref(data), fun_ptr)

set_hdr_metadata_ext(device::Device, swapchains::AbstractArray, metadata::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkSetHdrMetadataEXT(device, pointer_length(swapchains), swapchains, metadata, fun_ptr)

get_swapchain_status_khr(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSwapchainStatusKHR(device, swapchain, fun_ptr))

function get_refresh_cycle_duration_google(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}
    pDisplayTimingProperties = Ref{VkRefreshCycleDurationGOOGLE}()
    @check vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties, fun_ptr)
    from_vk(RefreshCycleDurationGOOGLE, pDisplayTimingProperties[])
end

function get_past_presentation_timing_google(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}
    pPresentationTimingCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, C_NULL, fun_ptr)
            pPresentationTimings = Vector{VkPastPresentationTimingGOOGLE}(undef, pPresentationTimingCount[])
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings, fun_ptr)
        end
    from_vk.(PastPresentationTimingGOOGLE, pPresentationTimings)
end

function create_ios_surface_mvk(instance::Instance, create_info::_IOSSurfaceCreateInfoMVK, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateIOSSurfaceMVK(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_mac_os_surface_mvk(instance::Instance, create_info::_MacOSSurfaceCreateInfoMVK, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateMacOSSurfaceMVK(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function create_metal_surface_ext(instance::Instance, create_info::_MetalSurfaceCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateMetalSurfaceEXT(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

cmd_set_viewport_w_scaling_nv(command_buffer::CommandBuffer, viewport_w_scalings::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetViewportWScalingNV(command_buffer, 0, pointer_length(viewport_w_scalings), viewport_w_scalings, fun_ptr)

cmd_set_discard_rectangle_ext(command_buffer::CommandBuffer, discard_rectangles::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDiscardRectangleEXT(command_buffer, 0, pointer_length(discard_rectangles), discard_rectangles, fun_ptr)

cmd_set_sample_locations_ext(command_buffer::CommandBuffer, sample_locations_info::_SampleLocationsInfoEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetSampleLocationsEXT(command_buffer, sample_locations_info, fun_ptr)

function get_physical_device_multisample_properties_ext(physical_device::PhysicalDevice, samples::SampleCountFlag, fun_ptr::FunctionPtr)::MultisamplePropertiesEXT
    pMultisampleProperties = Ref{VkMultisamplePropertiesEXT}()
    vkGetPhysicalDeviceMultisamplePropertiesEXT(physical_device, VkSampleCountFlagBits(samples.val), pMultisampleProperties, fun_ptr)
    from_vk(MultisamplePropertiesEXT, pMultisampleProperties[])
end

function get_physical_device_surface_capabilities_2_khr(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fun_ptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2KHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2KHR(physical_device, surface_info, pSurfaceCapabilities, fun_ptr)
    from_vk(SurfaceCapabilities2KHR, pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_2_khr(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, C_NULL, fun_ptr)
            pSurfaceFormats = Vector{VkSurfaceFormat2KHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, pSurfaceFormats, fun_ptr)
        end
    from_vk.(SurfaceFormat2KHR, pSurfaceFormats)
end

function get_physical_device_display_properties_2_khr(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayProperties2KHR, pProperties)
end

function get_physical_device_display_plane_properties_2_khr(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayPlaneProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayPlaneProperties2KHR, pProperties)
end

function get_display_mode_properties_2_khr(physical_device::PhysicalDevice, display::DisplayKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkDisplayModeProperties2KHR}(undef, pPropertyCount[])
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(DisplayModeProperties2KHR, pProperties)
end

function get_display_plane_capabilities_2_khr(physical_device::PhysicalDevice, display_plane_info::_DisplayPlaneInfo2KHR, fun_ptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilities2KHR}()
    @check vkGetDisplayPlaneCapabilities2KHR(physical_device, display_plane_info, pCapabilities, fun_ptr)
    from_vk(DisplayPlaneCapabilities2KHR, pCapabilities[])
end

function get_buffer_memory_requirements_2(device::Device, info::_BufferMemoryRequirementsInfo2, fun_ptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetBufferMemoryRequirements2(device, info, pMemoryRequirements, fun_ptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function get_image_memory_requirements_2(device::Device, info::_ImageMemoryRequirementsInfo2, fun_ptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetImageMemoryRequirements2(device, info, pMemoryRequirements, fun_ptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

function get_image_sparse_memory_requirements_2(device::Device, info::_ImageSparseMemoryRequirementsInfo2, fun_ptr::FunctionPtr)::Vector{SparseImageMemoryRequirements2}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, C_NULL, fun_ptr)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements2}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, pSparseMemoryRequirements, fun_ptr)
    from_vk.(SparseImageMemoryRequirements2, pSparseMemoryRequirements)
end

function create_sampler_ycbcr_conversion(device::Device, create_info::_SamplerYcbcrConversionCreateInfo, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}
    pYcbcrConversion = Ref{VkSamplerYcbcrConversion}()
    @check vkCreateSamplerYcbcrConversion(device, create_info, allocator, pYcbcrConversion, fun_ptr_create)
    SamplerYcbcrConversion(pYcbcrConversion[], (x->destroy_sampler_ycbcr_conversion(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_sampler_ycbcr_conversion(device::Device, ycbcr_conversion::SamplerYcbcrConversion, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySamplerYcbcrConversion(device, ycbcr_conversion, allocator, fun_ptr)

function get_device_queue_2(device::Device, queue_info::_DeviceQueueInfo2, fun_ptr::FunctionPtr)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue2(device, queue_info, pQueue, fun_ptr)
    Queue(pQueue[], identity, device)
end

function create_validation_cache_ext(device::Device, create_info::_ValidationCacheCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}
    pValidationCache = Ref{VkValidationCacheEXT}()
    @check vkCreateValidationCacheEXT(device, create_info, allocator, pValidationCache, fun_ptr_create)
    ValidationCacheEXT(pValidationCache[], (x->destroy_validation_cache_ext(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_validation_cache_ext(device::Device, validation_cache::ValidationCacheEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyValidationCacheEXT(device, validation_cache, allocator, fun_ptr)

function get_validation_cache_data_ext(device::Device, validation_cache::ValidationCacheEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, C_NULL, fun_ptr)
            pData = Libc.malloc(pDataSize[])
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, pData, fun_ptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

merge_validation_caches_ext(device::Device, dst_cache::ValidationCacheEXT, src_caches::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkMergeValidationCachesEXT(device, dst_cache, pointer_length(src_caches), src_caches, fun_ptr))

function get_descriptor_set_layout_support(device::Device, create_info::_DescriptorSetLayoutCreateInfo, fun_ptr::FunctionPtr)::DescriptorSetLayoutSupport
    pSupport = Ref{VkDescriptorSetLayoutSupport}()
    vkGetDescriptorSetLayoutSupport(device, create_info, pSupport, fun_ptr)
    from_vk(DescriptorSetLayoutSupport, pSupport[])
end

function get_shader_info_amd(device::Device, pipeline::Pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pInfoSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, C_NULL, fun_ptr)
            pInfo = Libc.malloc(pInfoSize[])
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, pInfo, fun_ptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pInfo)
            end
        end
    (pInfoSize[], pInfo)
end

set_local_dimming_amd(device::Device, swap_chain::SwapchainKHR, local_dimming_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkSetLocalDimmingAMD(device, swap_chain, local_dimming_enable, fun_ptr)

function get_physical_device_calibrateable_time_domains_ext(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}
    pTimeDomainCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, C_NULL, fun_ptr)
            pTimeDomains = Vector{VkTimeDomainEXT}(undef, pTimeDomainCount[])
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, pTimeDomains, fun_ptr)
        end
    pTimeDomains
end

function get_calibrated_timestamps_ext(device::Device, timestamp_infos::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}
    pTimestamps = Vector{UInt64}(undef, pointer_length(timestamp_infos))
    pMaxDeviation = Ref{UInt64}()
    @check vkGetCalibratedTimestampsEXT(device, pointer_length(timestamp_infos), timestamp_infos, pTimestamps, pMaxDeviation, fun_ptr)
    (pTimestamps, pMaxDeviation[])
end

set_debug_utils_object_name_ext(device::Device, name_info::_DebugUtilsObjectNameInfoEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectNameEXT(device, name_info, fun_ptr))

set_debug_utils_object_tag_ext(device::Device, tag_info::_DebugUtilsObjectTagInfoEXT, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectTagEXT(device, tag_info, fun_ptr))

queue_begin_debug_utils_label_ext(queue::Queue, label_info::_DebugUtilsLabelEXT, fun_ptr::FunctionPtr)::Cvoid = vkQueueBeginDebugUtilsLabelEXT(queue, label_info, fun_ptr)

queue_end_debug_utils_label_ext(queue::Queue, fun_ptr::FunctionPtr)::Cvoid = vkQueueEndDebugUtilsLabelEXT(queue, fun_ptr)

queue_insert_debug_utils_label_ext(queue::Queue, label_info::_DebugUtilsLabelEXT, fun_ptr::FunctionPtr)::Cvoid = vkQueueInsertDebugUtilsLabelEXT(queue, label_info, fun_ptr)

cmd_begin_debug_utils_label_ext(command_buffer::CommandBuffer, label_info::_DebugUtilsLabelEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdBeginDebugUtilsLabelEXT(command_buffer, label_info, fun_ptr)

cmd_end_debug_utils_label_ext(command_buffer::CommandBuffer, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndDebugUtilsLabelEXT(command_buffer, fun_ptr)

cmd_insert_debug_utils_label_ext(command_buffer::CommandBuffer, label_info::_DebugUtilsLabelEXT, fun_ptr::FunctionPtr)::Cvoid = vkCmdInsertDebugUtilsLabelEXT(command_buffer, label_info, fun_ptr)

function create_debug_utils_messenger_ext(instance::Instance, create_info::_DebugUtilsMessengerCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}
    pMessenger = Ref{VkDebugUtilsMessengerEXT}()
    @check vkCreateDebugUtilsMessengerEXT(instance, create_info, allocator, pMessenger, fun_ptr_create)
    DebugUtilsMessengerEXT(pMessenger[], (x->destroy_debug_utils_messenger_ext(instance, x, fun_ptr_destroy; allocator)), instance)
end

destroy_debug_utils_messenger_ext(instance::Instance, messenger::DebugUtilsMessengerEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDebugUtilsMessengerEXT(instance, messenger, allocator, fun_ptr)

submit_debug_utils_message_ext(instance::Instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT, fun_ptr::FunctionPtr)::Cvoid = vkSubmitDebugUtilsMessageEXT(instance, VkDebugUtilsMessageSeverityFlagBitsEXT(message_severity.val), message_types, callback_data, fun_ptr)

function get_memory_host_pointer_properties_ext(device::Device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}, fun_ptr::FunctionPtr)::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}
    pMemoryHostPointerProperties = Ref{VkMemoryHostPointerPropertiesEXT}()
    @check vkGetMemoryHostPointerPropertiesEXT(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), Ref(host_pointer), pMemoryHostPointerProperties, fun_ptr)
    from_vk(MemoryHostPointerPropertiesEXT, pMemoryHostPointerProperties[])
end

cmd_write_buffer_marker_amd(command_buffer::CommandBuffer, pipeline_stage::PipelineStageFlag, dst_buffer::Buffer, dst_offset::Integer, marker::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteBufferMarkerAMD(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), dst_buffer, dst_offset, marker, fun_ptr)

function create_render_pass_2(device::Device, create_info::_RenderPassCreateInfo2, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass2(device, create_info, allocator, pRenderPass, fun_ptr_create)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x, fun_ptr_destroy; allocator)), device)
end

cmd_begin_render_pass_2(command_buffer::CommandBuffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo, fun_ptr::FunctionPtr)::Cvoid = vkCmdBeginRenderPass2(command_buffer, render_pass_begin, subpass_begin_info, fun_ptr)

cmd_next_subpass_2(command_buffer::CommandBuffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo, fun_ptr::FunctionPtr)::Cvoid = vkCmdNextSubpass2(command_buffer, subpass_begin_info, subpass_end_info, fun_ptr)

cmd_end_render_pass_2(command_buffer::CommandBuffer, subpass_end_info::_SubpassEndInfo, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndRenderPass2(command_buffer, subpass_end_info, fun_ptr)

function get_semaphore_counter_value(device::Device, semaphore::Semaphore, fun_ptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}
    pValue = Ref{UInt64}()
    @check vkGetSemaphoreCounterValue(device, semaphore, pValue, fun_ptr)
    pValue[]
end

wait_semaphores(device::Device, wait_info::_SemaphoreWaitInfo, timeout::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitSemaphores(device, wait_info, timeout, fun_ptr))

signal_semaphore(device::Device, signal_info::_SemaphoreSignalInfo, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSignalSemaphore(device, signal_info, fun_ptr))

function get_android_hardware_buffer_properties_android(device::Device, buffer::vk.AHardwareBuffer, fun_ptr::FunctionPtr)::ResultTypes.Result{AndroidHardwareBufferPropertiesANDROID, VulkanError}
    pProperties = Ref{VkAndroidHardwareBufferPropertiesANDROID}()
    @check vkGetAndroidHardwareBufferPropertiesANDROID(device, Ref(buffer), pProperties, fun_ptr)
    from_vk(AndroidHardwareBufferPropertiesANDROID, pProperties[])
end

function get_memory_android_hardware_buffer_android(device::Device, info::_MemoryGetAndroidHardwareBufferInfoANDROID, fun_ptr::FunctionPtr)::ResultTypes.Result{vk.AHardwareBuffer, VulkanError}
    pBuffer = Ref{Ptr{AHardwareBuffer}}()
    @check vkGetMemoryAndroidHardwareBufferANDROID(device, info, pBuffer, fun_ptr)
    from_vk(vk.AHardwareBuffer, pBuffer[])
end

cmd_draw_indirect_count(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fun_ptr)

cmd_draw_indexed_indirect_count(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndexedIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fun_ptr)

cmd_set_checkpoint_nv(command_buffer::CommandBuffer, checkpoint_marker::Ptr{Cvoid}, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetCheckpointNV(command_buffer, Ref(checkpoint_marker), fun_ptr)

function get_queue_checkpoint_data_nv(queue::Queue, fun_ptr::FunctionPtr)::Vector{CheckpointDataNV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, C_NULL, fun_ptr)
    pCheckpointData = Vector{VkCheckpointDataNV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData, fun_ptr)
    from_vk.(CheckpointDataNV, pCheckpointData)
end

cmd_bind_transform_feedback_buffers_ext(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray, fun_ptr::FunctionPtr; sizes = C_NULL)::Cvoid = vkCmdBindTransformFeedbackBuffersEXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, fun_ptr)

cmd_begin_transform_feedback_ext(command_buffer::CommandBuffer, counter_buffers::AbstractArray, fun_ptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdBeginTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets, fun_ptr)

cmd_end_transform_feedback_ext(command_buffer::CommandBuffer, counter_buffers::AbstractArray, fun_ptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdEndTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets, fun_ptr)

cmd_begin_query_indexed_ext(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, index::Integer, fun_ptr::FunctionPtr; flags = 0)::Cvoid = vkCmdBeginQueryIndexedEXT(command_buffer, query_pool, query, flags, index, fun_ptr)

cmd_end_query_indexed_ext(command_buffer::CommandBuffer, query_pool::QueryPool, query::Integer, index::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndQueryIndexedEXT(command_buffer, query_pool, query, index, fun_ptr)

cmd_draw_indirect_byte_count_ext(command_buffer::CommandBuffer, instance_count::Integer, first_instance::Integer, counter_buffer::Buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawIndirectByteCountEXT(command_buffer, instance_count, first_instance, counter_buffer, counter_buffer_offset, counter_offset, vertex_stride, fun_ptr)

cmd_set_exclusive_scissor_nv(command_buffer::CommandBuffer, exclusive_scissors::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetExclusiveScissorNV(command_buffer, 0, pointer_length(exclusive_scissors), exclusive_scissors, fun_ptr)

cmd_bind_shading_rate_image_nv(command_buffer::CommandBuffer, image_layout::ImageLayout, fun_ptr::FunctionPtr; image_view = C_NULL)::Cvoid = vkCmdBindShadingRateImageNV(command_buffer, image_view, image_layout, fun_ptr)

cmd_set_viewport_shading_rate_palette_nv(command_buffer::CommandBuffer, shading_rate_palettes::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetViewportShadingRatePaletteNV(command_buffer, 0, pointer_length(shading_rate_palettes), shading_rate_palettes, fun_ptr)

cmd_set_coarse_sample_order_nv(command_buffer::CommandBuffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetCoarseSampleOrderNV(command_buffer, sample_order_type, pointer_length(custom_sample_orders), custom_sample_orders, fun_ptr)

cmd_draw_mesh_tasks_nv(command_buffer::CommandBuffer, task_count::Integer, first_task::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksNV(command_buffer, task_count, first_task, fun_ptr)

cmd_draw_mesh_tasks_indirect_nv(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksIndirectNV(command_buffer, buffer, offset, draw_count, stride, fun_ptr)

cmd_draw_mesh_tasks_indirect_count_nv(command_buffer::CommandBuffer, buffer::Buffer, offset::Integer, count_buffer::Buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksIndirectCountNV(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fun_ptr)

compile_deferred_nv(device::Device, pipeline::Pipeline, shader::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCompileDeferredNV(device, pipeline, shader, fun_ptr))

function create_acceleration_structure_nv(device::Device, create_info::_AccelerationStructureCreateInfoNV, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureNV}()
    @check vkCreateAccelerationStructureNV(device, create_info, allocator, pAccelerationStructure, fun_ptr_create)
    AccelerationStructureNV(pAccelerationStructure[], (x->destroy_acceleration_structure_nv(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_acceleration_structure_khr(device::Device, acceleration_structure::AccelerationStructureKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureKHR(device, acceleration_structure, allocator, fun_ptr)

destroy_acceleration_structure_nv(device::Device, acceleration_structure::AccelerationStructureNV, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureNV(device, acceleration_structure, allocator, fun_ptr)

function get_acceleration_structure_memory_requirements_nv(device::Device, info::_AccelerationStructureMemoryRequirementsInfoNV, fun_ptr::FunctionPtr)::VkMemoryRequirements2KHR
    pMemoryRequirements = Ref{VkMemoryRequirements2KHR}()
    vkGetAccelerationStructureMemoryRequirementsNV(device, info, pMemoryRequirements, fun_ptr)
    from_vk(VkMemoryRequirements2KHR, pMemoryRequirements[])
end

bind_acceleration_structure_memory_nv(device::Device, bind_infos::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindAccelerationStructureMemoryNV(device, pointer_length(bind_infos), bind_infos, fun_ptr))

cmd_copy_acceleration_structure_nv(command_buffer::CommandBuffer, dst::AccelerationStructureNV, src::AccelerationStructureNV, mode::CopyAccelerationStructureModeKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureNV(command_buffer, dst, src, mode, fun_ptr)

cmd_copy_acceleration_structure_khr(command_buffer::CommandBuffer, info::_CopyAccelerationStructureInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureKHR(command_buffer, info, fun_ptr)

copy_acceleration_structure_khr(device::Device, info::_CopyAccelerationStructureInfoKHR, fun_ptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureKHR(device, deferred_operation, info, fun_ptr))

cmd_copy_acceleration_structure_to_memory_khr(command_buffer::CommandBuffer, info::_CopyAccelerationStructureToMemoryInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer, info, fun_ptr)

copy_acceleration_structure_to_memory_khr(device::Device, info::_CopyAccelerationStructureToMemoryInfoKHR, fun_ptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureToMemoryKHR(device, deferred_operation, info, fun_ptr))

cmd_copy_memory_to_acceleration_structure_khr(command_buffer::CommandBuffer, info::_CopyMemoryToAccelerationStructureInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer, info, fun_ptr)

copy_memory_to_acceleration_structure_khr(device::Device, info::_CopyMemoryToAccelerationStructureInfoKHR, fun_ptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyMemoryToAccelerationStructureKHR(device, deferred_operation, info, fun_ptr))

cmd_write_acceleration_structures_properties_khr(command_buffer::CommandBuffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool::QueryPool, first_query::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesKHR(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query, fun_ptr)

cmd_write_acceleration_structures_properties_nv(command_buffer::CommandBuffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool::QueryPool, first_query::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesNV(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query, fun_ptr)

cmd_build_acceleration_structure_nv(command_buffer::CommandBuffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst::AccelerationStructureNV, scratch::Buffer, scratch_offset::Integer, fun_ptr::FunctionPtr; instance_data = C_NULL, src = C_NULL)::Cvoid = vkCmdBuildAccelerationStructureNV(command_buffer, info, instance_data, instance_offset, update, dst, src, scratch, scratch_offset, fun_ptr)

write_acceleration_structures_properties_khr(device::Device, acceleration_structures::AbstractArray, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWriteAccelerationStructuresPropertiesKHR(device, pointer_length(acceleration_structures), acceleration_structures, query_type, data_size, data, stride, fun_ptr))

cmd_trace_rays_khr(command_buffer::CommandBuffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdTraceRaysKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, width, height, depth, fun_ptr)

cmd_trace_rays_nv(command_buffer::CommandBuffer, raygen_shader_binding_table_buffer::Buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer, fun_ptr::FunctionPtr; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid = vkCmdTraceRaysNV(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset, miss_shader_binding_table_buffer, miss_shader_binding_offset, miss_shader_binding_stride, hit_shader_binding_table_buffer, hit_shader_binding_offset, hit_shader_binding_stride, callable_shader_binding_table_buffer, callable_shader_binding_offset, callable_shader_binding_stride, width, height, depth, fun_ptr)

get_ray_tracing_shader_group_handles_khr(device::Device, pipeline::Pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data, fun_ptr))

get_ray_tracing_capture_replay_shader_group_handles_khr(device::Device, pipeline::Pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data, fun_ptr))

get_acceleration_structure_handle_nv(device::Device, acceleration_structure::AccelerationStructureNV, data_size::Integer, data::Ptr{Cvoid}, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetAccelerationStructureHandleNV(device, acceleration_structure, data_size, data, fun_ptr))

function create_ray_tracing_pipelines_nv(device::Device, create_infos::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesNV(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fun_ptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fun_ptr_destroy; allocator)), device), _return_code)
end

function create_ray_tracing_pipelines_khr(device::Device, create_infos::AbstractArray, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesKHR(device, deferred_operation, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fun_ptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fun_ptr_destroy; allocator)), device), _return_code)
end

function get_physical_device_cooperative_matrix_properties_nv(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, C_NULL, fun_ptr)
            pProperties = Vector{VkCooperativeMatrixPropertiesNV}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, pProperties, fun_ptr)
        end
    from_vk.(_CooperativeMatrixPropertiesNV, pProperties)
end

cmd_trace_rays_indirect_khr(command_buffer::CommandBuffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdTraceRaysIndirectKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, indirect_device_address, fun_ptr)

function get_device_acceleration_structure_compatibility_khr(device::Device, version_info::_AccelerationStructureVersionInfoKHR, fun_ptr::FunctionPtr)::AccelerationStructureCompatibilityKHR
    pCompatibility = Ref{VkAccelerationStructureCompatibilityKHR}()
    vkGetDeviceAccelerationStructureCompatibilityKHR(device, version_info, pCompatibility, fun_ptr)
    pCompatibility[]
end

get_ray_tracing_shader_group_stack_size_khr(device::Device, pipeline::Pipeline, group::Integer, group_shader::ShaderGroupShaderKHR, fun_ptr::FunctionPtr)::UInt64 = vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, group_shader, fun_ptr)

cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer::CommandBuffer, pipeline_stack_size::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetRayTracingPipelineStackSizeKHR(command_buffer, pipeline_stack_size, fun_ptr)

get_image_view_handle_nvx(device::Device, info::_ImageViewHandleInfoNVX, fun_ptr::FunctionPtr)::UInt32 = vkGetImageViewHandleNVX(device, info, fun_ptr)

function get_image_view_address_nvx(device::Device, image_view::ImageView, fun_ptr::FunctionPtr)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}
    pProperties = Ref{VkImageViewAddressPropertiesNVX}()
    @check vkGetImageViewAddressNVX(device, image_view, pProperties, fun_ptr)
    from_vk(ImageViewAddressPropertiesNVX, pProperties[])
end

function get_physical_device_surface_present_modes_2_ext(physical_device::PhysicalDevice, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, C_NULL, fun_ptr)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, pPresentModes, fun_ptr)
        end
    pPresentModes
end

function get_device_group_surface_present_modes_2_ext(device::Device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModes2EXT(device, surface_info, pModes, fun_ptr)
    pModes[]
end

acquire_full_screen_exclusive_mode_ext(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireFullScreenExclusiveModeEXT(device, swapchain, fun_ptr))

release_full_screen_exclusive_mode_ext(device::Device, swapchain::SwapchainKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseFullScreenExclusiveModeEXT(device, swapchain, fun_ptr))

function enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device::PhysicalDevice, queue_family_index::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}
    pCounterCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, C_NULL, C_NULL, fun_ptr)
            pCounters = Vector{VkPerformanceCounterKHR}(undef, pCounterCount[])
            pCounterDescriptions = Vector{VkPerformanceCounterDescriptionKHR}(undef, pCounterCount[])
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, pCounters, pCounterDescriptions, fun_ptr)
        end
    (from_vk.(PerformanceCounterKHR, pCounters), from_vk.(PerformanceCounterDescriptionKHR, pCounterDescriptions))
end

function get_physical_device_queue_family_performance_query_passes_khr(physical_device::PhysicalDevice, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR, fun_ptr::FunctionPtr)::UInt32
    pNumPasses = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physical_device, performance_query_create_info, pNumPasses, fun_ptr)
    pNumPasses[]
end

acquire_profiling_lock_khr(device::Device, info::_AcquireProfilingLockInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireProfilingLockKHR(device, info, fun_ptr))

release_profiling_lock_khr(device::Device, fun_ptr::FunctionPtr)::Cvoid = vkReleaseProfilingLockKHR(device, fun_ptr)

function get_image_drm_format_modifier_properties_ext(device::Device, image::Image, fun_ptr::FunctionPtr)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}
    pProperties = Ref{VkImageDrmFormatModifierPropertiesEXT}()
    @check vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties, fun_ptr)
    from_vk(ImageDrmFormatModifierPropertiesEXT, pProperties[])
end

get_buffer_opaque_capture_address(device::Device, info::_BufferDeviceAddressInfo, fun_ptr::FunctionPtr)::UInt64 = vkGetBufferOpaqueCaptureAddress(device, info, fun_ptr)

get_buffer_device_address(device::Device, info::_BufferDeviceAddressInfo, fun_ptr::FunctionPtr)::UInt64 = vkGetBufferDeviceAddress(device, info, fun_ptr)

function create_headless_surface_ext(instance::Instance, create_info::_HeadlessSurfaceCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateHeadlessSurfaceEXT(instance, create_info, allocator, pSurface, fun_ptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fun_ptr_destroy; allocator)), instance)
end

function get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}
    pCombinationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, C_NULL, fun_ptr)
            pCombinations = Vector{VkFramebufferMixedSamplesCombinationNV}(undef, pCombinationCount[])
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, pCombinations, fun_ptr)
        end
    from_vk.(FramebufferMixedSamplesCombinationNV, pCombinations)
end

initialize_performance_api_intel(device::Device, initialize_info::_InitializePerformanceApiInfoINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkInitializePerformanceApiINTEL(device, initialize_info, fun_ptr))

uninitialize_performance_api_intel(device::Device, fun_ptr::FunctionPtr)::Cvoid = vkUninitializePerformanceApiINTEL(device, fun_ptr)

cmd_set_performance_marker_intel(command_buffer::CommandBuffer, marker_info::_PerformanceMarkerInfoINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceMarkerINTEL(command_buffer, marker_info, fun_ptr))

cmd_set_performance_stream_marker_intel(command_buffer::CommandBuffer, marker_info::_PerformanceStreamMarkerInfoINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceStreamMarkerINTEL(command_buffer, marker_info, fun_ptr))

cmd_set_performance_override_intel(command_buffer::CommandBuffer, override_info::_PerformanceOverrideInfoINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceOverrideINTEL(command_buffer, override_info, fun_ptr))

function acquire_performance_configuration_intel(device::Device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}
    pConfiguration = Ref{VkPerformanceConfigurationINTEL}()
    @check vkAcquirePerformanceConfigurationINTEL(device, acquire_info, pConfiguration, fun_ptr)
    PerformanceConfigurationINTEL(pConfiguration[], identity, device)
end

release_performance_configuration_intel(device::Device, fun_ptr::FunctionPtr; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkReleasePerformanceConfigurationINTEL(device, configuration, fun_ptr))

queue_set_performance_configuration_intel(queue::Queue, configuration::PerformanceConfigurationINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSetPerformanceConfigurationINTEL(queue, configuration, fun_ptr))

function get_performance_parameter_intel(device::Device, parameter::PerformanceParameterTypeINTEL, fun_ptr::FunctionPtr)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}
    pValue = Ref{VkPerformanceValueINTEL}()
    @check vkGetPerformanceParameterINTEL(device, parameter, pValue, fun_ptr)
    from_vk(_PerformanceValueINTEL, pValue[])
end

get_device_memory_opaque_capture_address(device::Device, info::_DeviceMemoryOpaqueCaptureAddressInfo, fun_ptr::FunctionPtr)::UInt64 = vkGetDeviceMemoryOpaqueCaptureAddress(device, info, fun_ptr)

function get_pipeline_executable_properties_khr(device::Device, pipeline_info::_PipelineInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}
    pExecutableCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, C_NULL, fun_ptr)
            pProperties = Vector{VkPipelineExecutablePropertiesKHR}(undef, pExecutableCount[])
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, pProperties, fun_ptr)
        end
    from_vk.(PipelineExecutablePropertiesKHR, pProperties)
end

function get_pipeline_executable_statistics_khr(device::Device, executable_info::_PipelineExecutableInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}
    pStatisticCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, C_NULL, fun_ptr)
            pStatistics = Vector{VkPipelineExecutableStatisticKHR}(undef, pStatisticCount[])
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, pStatistics, fun_ptr)
        end
    from_vk.(PipelineExecutableStatisticKHR, pStatistics)
end

function get_pipeline_executable_internal_representations_khr(device::Device, executable_info::_PipelineExecutableInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}
    pInternalRepresentationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, C_NULL, fun_ptr)
            pInternalRepresentations = Vector{VkPipelineExecutableInternalRepresentationKHR}(undef, pInternalRepresentationCount[])
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, pInternalRepresentations, fun_ptr)
        end
    from_vk.(PipelineExecutableInternalRepresentationKHR, pInternalRepresentations)
end

cmd_set_line_stipple_ext(command_buffer::CommandBuffer, line_stipple_factor::Integer, line_stipple_pattern::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetLineStippleEXT(command_buffer, line_stipple_factor, line_stipple_pattern, fun_ptr)

function get_physical_device_tool_properties_ext(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}
    pToolCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, C_NULL, fun_ptr)
            pToolProperties = Vector{VkPhysicalDeviceToolPropertiesEXT}(undef, pToolCount[])
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, pToolProperties, fun_ptr)
        end
    from_vk.(PhysicalDeviceToolPropertiesEXT, pToolProperties)
end

function create_acceleration_structure_khr(device::Device, create_info::_AccelerationStructureCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureKHR}()
    @check vkCreateAccelerationStructureKHR(device, create_info, allocator, pAccelerationStructure, fun_ptr_create)
    AccelerationStructureKHR(pAccelerationStructure[], (x->destroy_acceleration_structure_khr(device, x, fun_ptr_destroy; allocator)), device)
end

cmd_build_acceleration_structures_khr(command_buffer::CommandBuffer, infos::AbstractArray, build_range_infos::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdBuildAccelerationStructuresKHR(command_buffer, pointer_length(infos), infos, build_range_infos, fun_ptr)

cmd_build_acceleration_structures_indirect_khr(command_buffer::CommandBuffer, infos::AbstractArray, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdBuildAccelerationStructuresIndirectKHR(command_buffer, pointer_length(infos), infos, indirect_device_addresses, indirect_strides, max_primitive_counts, fun_ptr)

build_acceleration_structures_khr(device::Device, infos::AbstractArray, build_range_infos::AbstractArray, fun_ptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkBuildAccelerationStructuresKHR(device, deferred_operation, pointer_length(infos), infos, build_range_infos, fun_ptr))

get_acceleration_structure_device_address_khr(device::Device, info::_AccelerationStructureDeviceAddressInfoKHR, fun_ptr::FunctionPtr)::UInt64 = vkGetAccelerationStructureDeviceAddressKHR(device, info, fun_ptr)

function create_deferred_operation_khr(device::Device, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}
    pDeferredOperation = Ref{VkDeferredOperationKHR}()
    @check vkCreateDeferredOperationKHR(device, allocator, pDeferredOperation, fun_ptr_create)
    DeferredOperationKHR(pDeferredOperation[], (x->destroy_deferred_operation_khr(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_deferred_operation_khr(device::Device, operation::DeferredOperationKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDeferredOperationKHR(device, operation, allocator, fun_ptr)

get_deferred_operation_max_concurrency_khr(device::Device, operation::DeferredOperationKHR, fun_ptr::FunctionPtr)::UInt32 = vkGetDeferredOperationMaxConcurrencyKHR(device, operation, fun_ptr)

get_deferred_operation_result_khr(device::Device, operation::DeferredOperationKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetDeferredOperationResultKHR(device, operation, fun_ptr))

deferred_operation_join_khr(device::Device, operation::DeferredOperationKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDeferredOperationJoinKHR(device, operation, fun_ptr))

cmd_set_cull_mode_ext(command_buffer::CommandBuffer, fun_ptr::FunctionPtr; cull_mode = 0)::Cvoid = vkCmdSetCullModeEXT(command_buffer, cull_mode, fun_ptr)

cmd_set_front_face_ext(command_buffer::CommandBuffer, front_face::FrontFace, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetFrontFaceEXT(command_buffer, front_face, fun_ptr)

cmd_set_primitive_topology_ext(command_buffer::CommandBuffer, primitive_topology::PrimitiveTopology, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetPrimitiveTopologyEXT(command_buffer, primitive_topology, fun_ptr)

cmd_set_viewport_with_count_ext(command_buffer::CommandBuffer, viewports::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetViewportWithCountEXT(command_buffer, pointer_length(viewports), viewports, fun_ptr)

cmd_set_scissor_with_count_ext(command_buffer::CommandBuffer, scissors::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetScissorWithCountEXT(command_buffer, pointer_length(scissors), scissors, fun_ptr)

cmd_bind_vertex_buffers_2_ext(command_buffer::CommandBuffer, buffers::AbstractArray, offsets::AbstractArray, fun_ptr::FunctionPtr; sizes = C_NULL, strides = C_NULL)::Cvoid = vkCmdBindVertexBuffers2EXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, strides, fun_ptr)

cmd_set_depth_test_enable_ext(command_buffer::CommandBuffer, depth_test_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthTestEnableEXT(command_buffer, depth_test_enable, fun_ptr)

cmd_set_depth_write_enable_ext(command_buffer::CommandBuffer, depth_write_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthWriteEnableEXT(command_buffer, depth_write_enable, fun_ptr)

cmd_set_depth_compare_op_ext(command_buffer::CommandBuffer, depth_compare_op::CompareOp, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthCompareOpEXT(command_buffer, depth_compare_op, fun_ptr)

cmd_set_depth_bounds_test_enable_ext(command_buffer::CommandBuffer, depth_bounds_test_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthBoundsTestEnableEXT(command_buffer, depth_bounds_test_enable, fun_ptr)

cmd_set_stencil_test_enable_ext(command_buffer::CommandBuffer, stencil_test_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetStencilTestEnableEXT(command_buffer, stencil_test_enable, fun_ptr)

cmd_set_stencil_op_ext(command_buffer::CommandBuffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetStencilOpEXT(command_buffer, face_mask, fail_op, pass_op, depth_fail_op, compare_op, fun_ptr)

cmd_set_patch_control_points_ext(command_buffer::CommandBuffer, patch_control_points::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetPatchControlPointsEXT(command_buffer, patch_control_points, fun_ptr)

cmd_set_rasterizer_discard_enable_ext(command_buffer::CommandBuffer, rasterizer_discard_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetRasterizerDiscardEnableEXT(command_buffer, rasterizer_discard_enable, fun_ptr)

cmd_set_depth_bias_enable_ext(command_buffer::CommandBuffer, depth_bias_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetDepthBiasEnableEXT(command_buffer, depth_bias_enable, fun_ptr)

cmd_set_logic_op_ext(command_buffer::CommandBuffer, logic_op::LogicOp, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetLogicOpEXT(command_buffer, logic_op, fun_ptr)

cmd_set_primitive_restart_enable_ext(command_buffer::CommandBuffer, primitive_restart_enable::Bool, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetPrimitiveRestartEnableEXT(command_buffer, primitive_restart_enable, fun_ptr)

function create_private_data_slot_ext(device::Device, create_info::_PrivateDataSlotCreateInfoEXT, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}
    pPrivateDataSlot = Ref{VkPrivateDataSlotEXT}()
    @check vkCreatePrivateDataSlotEXT(device, create_info, allocator, pPrivateDataSlot, fun_ptr_create)
    PrivateDataSlotEXT(pPrivateDataSlot[], (x->destroy_private_data_slot_ext(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_private_data_slot_ext(device::Device, private_data_slot::PrivateDataSlotEXT, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPrivateDataSlotEXT(device, private_data_slot, allocator, fun_ptr)

set_private_data_ext(device::Device, object_type::ObjectType, object_handle::Integer, private_data_slot::PrivateDataSlotEXT, data::Integer, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetPrivateDataEXT(device, object_type, object_handle, private_data_slot, data, fun_ptr))

function get_private_data_ext(device::Device, object_type::ObjectType, object_handle::Integer, private_data_slot::PrivateDataSlotEXT, fun_ptr::FunctionPtr)::UInt64
    pData = Ref{UInt64}()
    vkGetPrivateDataEXT(device, object_type, object_handle, private_data_slot, pData, fun_ptr)
    pData[]
end

cmd_copy_buffer_2_khr(command_buffer::CommandBuffer, copy_buffer_info::_CopyBufferInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyBuffer2KHR(command_buffer, copy_buffer_info, fun_ptr)

cmd_copy_image_2_khr(command_buffer::CommandBuffer, copy_image_info::_CopyImageInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyImage2KHR(command_buffer, copy_image_info, fun_ptr)

cmd_blit_image_2_khr(command_buffer::CommandBuffer, blit_image_info::_BlitImageInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdBlitImage2KHR(command_buffer, blit_image_info, fun_ptr)

cmd_copy_buffer_to_image_2_khr(command_buffer::CommandBuffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyBufferToImage2KHR(command_buffer, copy_buffer_to_image_info, fun_ptr)

cmd_copy_image_to_buffer_2_khr(command_buffer::CommandBuffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdCopyImageToBuffer2KHR(command_buffer, copy_image_to_buffer_info, fun_ptr)

cmd_resolve_image_2_khr(command_buffer::CommandBuffer, resolve_image_info::_ResolveImageInfo2KHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdResolveImage2KHR(command_buffer, resolve_image_info, fun_ptr)

cmd_set_fragment_shading_rate_khr(command_buffer::CommandBuffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetFragmentShadingRateKHR(command_buffer, fragment_size, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops), fun_ptr)

function get_physical_device_fragment_shading_rates_khr(physical_device::PhysicalDevice, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}
    pFragmentShadingRateCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, C_NULL, fun_ptr)
            pFragmentShadingRates = Vector{VkPhysicalDeviceFragmentShadingRateKHR}(undef, pFragmentShadingRateCount[])
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, pFragmentShadingRates, fun_ptr)
        end
    from_vk.(PhysicalDeviceFragmentShadingRateKHR, pFragmentShadingRates)
end

cmd_set_fragment_shading_rate_enum_nv(command_buffer::CommandBuffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetFragmentShadingRateEnumNV(command_buffer, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops), fun_ptr)

function get_acceleration_structure_build_sizes_khr(device::Device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR, fun_ptr::FunctionPtr; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR
    pSizeInfo = Ref{VkAccelerationStructureBuildSizesInfoKHR}()
    vkGetAccelerationStructureBuildSizesKHR(device, build_type, build_info, max_primitive_counts, pSizeInfo, fun_ptr)
    from_vk(_AccelerationStructureBuildSizesInfoKHR, pSizeInfo[])
end

cmd_set_vertex_input_ext(command_buffer::CommandBuffer, vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetVertexInputEXT(command_buffer, pointer_length(vertex_binding_descriptions), vertex_binding_descriptions, pointer_length(vertex_attribute_descriptions), vertex_attribute_descriptions, fun_ptr)

cmd_set_color_write_enable_ext(command_buffer::CommandBuffer, color_write_enables::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetColorWriteEnableEXT(command_buffer, pointer_length(color_write_enables), color_write_enables, fun_ptr)

cmd_set_event_2_khr(command_buffer::CommandBuffer, event::Event, dependency_info::_DependencyInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdSetEvent2KHR(command_buffer, event, dependency_info, fun_ptr)

cmd_reset_event_2_khr(command_buffer::CommandBuffer, event::Event, stage_mask::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdResetEvent2KHR(command_buffer, event, stage_mask, fun_ptr)

cmd_wait_events_2_khr(command_buffer::CommandBuffer, events::AbstractArray, dependency_infos::AbstractArray, fun_ptr::FunctionPtr)::Cvoid = vkCmdWaitEvents2KHR(command_buffer, pointer_length(events), events, dependency_infos, fun_ptr)

cmd_pipeline_barrier_2_khr(command_buffer::CommandBuffer, dependency_info::_DependencyInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdPipelineBarrier2KHR(command_buffer, dependency_info, fun_ptr)

queue_submit_2_khr(queue::Queue, submits::AbstractArray, fun_ptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit2KHR(queue, pointer_length(submits), submits, fence, fun_ptr))

cmd_write_timestamp_2_khr(command_buffer::CommandBuffer, stage::Integer, query_pool::QueryPool, query::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteTimestamp2KHR(command_buffer, stage, query_pool, query, fun_ptr)

cmd_write_buffer_marker_2_amd(command_buffer::CommandBuffer, stage::Integer, dst_buffer::Buffer, dst_offset::Integer, marker::Integer, fun_ptr::FunctionPtr)::Cvoid = vkCmdWriteBufferMarker2AMD(command_buffer, stage, dst_buffer, dst_offset, marker, fun_ptr)

function get_queue_checkpoint_data_2_nv(queue::Queue, fun_ptr::FunctionPtr)::Vector{CheckpointData2NV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, C_NULL, fun_ptr)
    pCheckpointData = Vector{VkCheckpointData2NV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData, fun_ptr)
    from_vk.(CheckpointData2NV, pCheckpointData)
end

function get_physical_device_video_capabilities_khr(physical_device::PhysicalDevice, video_profile::_VideoProfileKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{VideoCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkVideoCapabilitiesKHR}()
    @check vkGetPhysicalDeviceVideoCapabilitiesKHR(physical_device, video_profile, pCapabilities, fun_ptr)
    from_vk(VideoCapabilitiesKHR, pCapabilities[])
end

function get_physical_device_video_format_properties_khr(physical_device::PhysicalDevice, video_format_info::PhysicalDeviceVideoFormatInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{VideoFormatPropertiesKHR}, VulkanError}
    pVideoFormatProperties = Vector{VkVideoFormatPropertiesKHR}(undef, pointer_length(video_format_properties))
    @check vkGetPhysicalDeviceVideoFormatPropertiesKHR(physical_device, video_format_info, pointer_length(video_format_properties), pVideoFormatProperties, fun_ptr)
    from_vk.(VideoFormatPropertiesKHR, pVideoFormatProperties)
end

function create_video_session_khr(device::Device, create_info::_VideoSessionCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{VideoSessionKHR, VulkanError}
    pVideoSession = Ref{VkVideoSessionKHR}()
    @check vkCreateVideoSessionKHR(device, create_info, allocator, pVideoSession, fun_ptr_create)
    VideoSessionKHR(pVideoSession[], (x->destroy_video_session_khr(device, x, fun_ptr_destroy; allocator)), device)
end

destroy_video_session_khr(device::Device, video_session::VideoSessionKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyVideoSessionKHR(device, video_session, allocator, fun_ptr)

function create_video_session_parameters_khr(device::Device, create_info::_VideoSessionParametersCreateInfoKHR, fun_ptr_create::FunctionPtr, fun_ptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{VideoSessionParametersKHR, VulkanError}
    pVideoSessionParameters = Ref{VkVideoSessionParametersKHR}()
    @check vkCreateVideoSessionParametersKHR(device, create_info, allocator, pVideoSessionParameters, fun_ptr_create)
    VideoSessionParametersKHR(pVideoSessionParameters[], (x->destroy_video_session_parameters_khr(device, x, fun_ptr_destroy; allocator)), getproperty(create_info, :video_session))
end

update_video_session_parameters_khr(device::Device, video_session_parameters::VideoSessionParametersKHR, update_info::_VideoSessionParametersUpdateInfoKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkUpdateVideoSessionParametersKHR(device, video_session_parameters, update_info, fun_ptr))

destroy_video_session_parameters_khr(device::Device, video_session_parameters::VideoSessionParametersKHR, fun_ptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyVideoSessionParametersKHR(device, video_session_parameters, allocator, fun_ptr)

function get_video_session_memory_requirements_khr(device::Device, video_session::VideoSessionKHR, fun_ptr::FunctionPtr)::ResultTypes.Result{Vector{_VideoGetMemoryPropertiesKHR}, VulkanError}
    pVideoSessionMemoryRequirements = Vector{VkVideoGetMemoryPropertiesKHR}(undef, pointer_length(video_session_memory_requirements))
    @check vkGetVideoSessionMemoryRequirementsKHR(device, video_session, pointer_length(video_session_memory_requirements), pVideoSessionMemoryRequirements, fun_ptr)
    from_vk.(_VideoGetMemoryPropertiesKHR, pVideoSessionMemoryRequirements)
end

bind_video_session_memory_khr(device::Device, video_session::VideoSessionKHR, video_session_bind_memories::AbstractArray, fun_ptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindVideoSessionMemoryKHR(device, video_session, pointer_length(video_session_bind_memories), video_session_bind_memories, fun_ptr))

cmd_decode_video_khr(command_buffer::CommandBuffer, frame_info::_VideoDecodeInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdDecodeVideoKHR(command_buffer, frame_info, fun_ptr)

cmd_begin_video_coding_khr(command_buffer::CommandBuffer, begin_info::_VideoBeginCodingInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdBeginVideoCodingKHR(command_buffer, begin_info, fun_ptr)

cmd_control_video_coding_khr(command_buffer::CommandBuffer, coding_control_info::_VideoCodingControlInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdControlVideoCodingKHR(command_buffer, coding_control_info, fun_ptr)

cmd_end_video_coding_khr(command_buffer::CommandBuffer, end_coding_info::_VideoEndCodingInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdEndVideoCodingKHR(command_buffer, end_coding_info, fun_ptr)

cmd_encode_video_khr(command_buffer::CommandBuffer, encode_info::_VideoEncodeInfoKHR, fun_ptr::FunctionPtr)::Cvoid = vkCmdEncodeVideoKHR(command_buffer, encode_info, fun_ptr)



export ImageLayout, IMAGE_LAYOUT_UNDEFINED, IMAGE_LAYOUT_GENERAL, IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, IMAGE_LAYOUT_PREINITIALIZED, IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_PRESENT_SRC_KHR, IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR, IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR, IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR, IMAGE_LAYOUT_SHARED_PRESENT_KHR, IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV, IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT, IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR, IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR, AttachmentLoadOp, ATTACHMENT_LOAD_OP_LOAD, ATTACHMENT_LOAD_OP_CLEAR, ATTACHMENT_LOAD_OP_DONT_CARE, AttachmentStoreOp, ATTACHMENT_STORE_OP_STORE, ATTACHMENT_STORE_OP_DONT_CARE, ATTACHMENT_STORE_OP_NONE_QCOM, ImageType, IMAGE_TYPE_1D, IMAGE_TYPE_2D, IMAGE_TYPE_3D, ImageTiling, IMAGE_TILING_OPTIMAL, IMAGE_TILING_LINEAR, IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, ImageViewType, IMAGE_VIEW_TYPE_1D, IMAGE_VIEW_TYPE_2D, IMAGE_VIEW_TYPE_3D, IMAGE_VIEW_TYPE_CUBE, IMAGE_VIEW_TYPE_1D_ARRAY, IMAGE_VIEW_TYPE_2D_ARRAY, IMAGE_VIEW_TYPE_CUBE_ARRAY, CommandBufferLevel, COMMAND_BUFFER_LEVEL_PRIMARY, COMMAND_BUFFER_LEVEL_SECONDARY, ComponentSwizzle, COMPONENT_SWIZZLE_IDENTITY, COMPONENT_SWIZZLE_ZERO, COMPONENT_SWIZZLE_ONE, COMPONENT_SWIZZLE_R, COMPONENT_SWIZZLE_G, COMPONENT_SWIZZLE_B, COMPONENT_SWIZZLE_A, DescriptorType, DESCRIPTOR_TYPE_SAMPLER, DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, DESCRIPTOR_TYPE_SAMPLED_IMAGE, DESCRIPTOR_TYPE_STORAGE_IMAGE, DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, DESCRIPTOR_TYPE_UNIFORM_BUFFER, DESCRIPTOR_TYPE_STORAGE_BUFFER, DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, DESCRIPTOR_TYPE_INPUT_ATTACHMENT, DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV, DESCRIPTOR_TYPE_MUTABLE_VALVE, QueryType, QUERY_TYPE_OCCLUSION, QUERY_TYPE_PIPELINE_STATISTICS, QUERY_TYPE_TIMESTAMP, QUERY_TYPE_RESULT_STATUS_ONLY_KHR, QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR, QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT, QUERY_TYPE_PERFORMANCE_QUERY_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV, QUERY_TYPE_PERFORMANCE_QUERY_INTEL, BorderColor, BORDER_COLOR_FLOAT_TRANSPARENT_BLACK, BORDER_COLOR_INT_TRANSPARENT_BLACK, BORDER_COLOR_FLOAT_OPAQUE_BLACK, BORDER_COLOR_INT_OPAQUE_BLACK, BORDER_COLOR_FLOAT_OPAQUE_WHITE, BORDER_COLOR_INT_OPAQUE_WHITE, BORDER_COLOR_FLOAT_CUSTOM_EXT, BORDER_COLOR_INT_CUSTOM_EXT, PipelineBindPoint, PIPELINE_BIND_POINT_GRAPHICS, PIPELINE_BIND_POINT_COMPUTE, PIPELINE_BIND_POINT_RAY_TRACING_KHR, PipelineCacheHeaderVersion, PIPELINE_CACHE_HEADER_VERSION_ONE, PrimitiveTopology, PRIMITIVE_TOPOLOGY_POINT_LIST, PRIMITIVE_TOPOLOGY_LINE_LIST, PRIMITIVE_TOPOLOGY_LINE_STRIP, PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_PATCH_LIST, SharingMode, SHARING_MODE_EXCLUSIVE, SHARING_MODE_CONCURRENT, IndexType, INDEX_TYPE_UINT16, INDEX_TYPE_UINT32, INDEX_TYPE_NONE_KHR, INDEX_TYPE_UINT8_EXT, Filter, FILTER_NEAREST, FILTER_LINEAR, FILTER_CUBIC_IMG, SamplerMipmapMode, SAMPLER_MIPMAP_MODE_NEAREST, SAMPLER_MIPMAP_MODE_LINEAR, SamplerAddressMode, SAMPLER_ADDRESS_MODE_REPEAT, SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT, SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE, CompareOp, COMPARE_OP_NEVER, COMPARE_OP_LESS, COMPARE_OP_EQUAL, COMPARE_OP_LESS_OR_EQUAL, COMPARE_OP_GREATER, COMPARE_OP_NOT_EQUAL, COMPARE_OP_GREATER_OR_EQUAL, COMPARE_OP_ALWAYS, PolygonMode, POLYGON_MODE_FILL, POLYGON_MODE_LINE, POLYGON_MODE_POINT, POLYGON_MODE_FILL_RECTANGLE_NV, FrontFace, FRONT_FACE_COUNTER_CLOCKWISE, FRONT_FACE_CLOCKWISE, BlendFactor, BLEND_FACTOR_ZERO, BLEND_FACTOR_ONE, BLEND_FACTOR_SRC_COLOR, BLEND_FACTOR_ONE_MINUS_SRC_COLOR, BLEND_FACTOR_DST_COLOR, BLEND_FACTOR_ONE_MINUS_DST_COLOR, BLEND_FACTOR_SRC_ALPHA, BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, BLEND_FACTOR_DST_ALPHA, BLEND_FACTOR_ONE_MINUS_DST_ALPHA, BLEND_FACTOR_CONSTANT_COLOR, BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR, BLEND_FACTOR_CONSTANT_ALPHA, BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA, BLEND_FACTOR_SRC_ALPHA_SATURATE, BLEND_FACTOR_SRC1_COLOR, BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, BLEND_FACTOR_SRC1_ALPHA, BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA, BlendOp, BLEND_OP_ADD, BLEND_OP_SUBTRACT, BLEND_OP_REVERSE_SUBTRACT, BLEND_OP_MIN, BLEND_OP_MAX, BLEND_OP_ZERO_EXT, BLEND_OP_SRC_EXT, BLEND_OP_DST_EXT, BLEND_OP_SRC_OVER_EXT, BLEND_OP_DST_OVER_EXT, BLEND_OP_SRC_IN_EXT, BLEND_OP_DST_IN_EXT, BLEND_OP_SRC_OUT_EXT, BLEND_OP_DST_OUT_EXT, BLEND_OP_SRC_ATOP_EXT, BLEND_OP_DST_ATOP_EXT, BLEND_OP_XOR_EXT, BLEND_OP_MULTIPLY_EXT, BLEND_OP_SCREEN_EXT, BLEND_OP_OVERLAY_EXT, BLEND_OP_DARKEN_EXT, BLEND_OP_LIGHTEN_EXT, BLEND_OP_COLORDODGE_EXT, BLEND_OP_COLORBURN_EXT, BLEND_OP_HARDLIGHT_EXT, BLEND_OP_SOFTLIGHT_EXT, BLEND_OP_DIFFERENCE_EXT, BLEND_OP_EXCLUSION_EXT, BLEND_OP_INVERT_EXT, BLEND_OP_INVERT_RGB_EXT, BLEND_OP_LINEARDODGE_EXT, BLEND_OP_LINEARBURN_EXT, BLEND_OP_VIVIDLIGHT_EXT, BLEND_OP_LINEARLIGHT_EXT, BLEND_OP_PINLIGHT_EXT, BLEND_OP_HARDMIX_EXT, BLEND_OP_HSL_HUE_EXT, BLEND_OP_HSL_SATURATION_EXT, BLEND_OP_HSL_COLOR_EXT, BLEND_OP_HSL_LUMINOSITY_EXT, BLEND_OP_PLUS_EXT, BLEND_OP_PLUS_CLAMPED_EXT, BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, BLEND_OP_PLUS_DARKER_EXT, BLEND_OP_MINUS_EXT, BLEND_OP_MINUS_CLAMPED_EXT, BLEND_OP_CONTRAST_EXT, BLEND_OP_INVERT_OVG_EXT, BLEND_OP_RED_EXT, BLEND_OP_GREEN_EXT, BLEND_OP_BLUE_EXT, StencilOp, STENCIL_OP_KEEP, STENCIL_OP_ZERO, STENCIL_OP_REPLACE, STENCIL_OP_INCREMENT_AND_CLAMP, STENCIL_OP_DECREMENT_AND_CLAMP, STENCIL_OP_INVERT, STENCIL_OP_INCREMENT_AND_WRAP, STENCIL_OP_DECREMENT_AND_WRAP, LogicOp, LOGIC_OP_CLEAR, LOGIC_OP_AND, LOGIC_OP_AND_REVERSE, LOGIC_OP_COPY, LOGIC_OP_AND_INVERTED, LOGIC_OP_NO_OP, LOGIC_OP_XOR, LOGIC_OP_OR, LOGIC_OP_NOR, LOGIC_OP_EQUIVALENT, LOGIC_OP_INVERT, LOGIC_OP_OR_REVERSE, LOGIC_OP_COPY_INVERTED, LOGIC_OP_OR_INVERTED, LOGIC_OP_NAND, LOGIC_OP_SET, InternalAllocationType, INTERNAL_ALLOCATION_TYPE_EXECUTABLE, SystemAllocationScope, SYSTEM_ALLOCATION_SCOPE_COMMAND, SYSTEM_ALLOCATION_SCOPE_OBJECT, SYSTEM_ALLOCATION_SCOPE_CACHE, SYSTEM_ALLOCATION_SCOPE_DEVICE, SYSTEM_ALLOCATION_SCOPE_INSTANCE, PhysicalDeviceType, PHYSICAL_DEVICE_TYPE_OTHER, PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU, PHYSICAL_DEVICE_TYPE_DISCRETE_GPU, PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU, PHYSICAL_DEVICE_TYPE_CPU, VertexInputRate, VERTEX_INPUT_RATE_VERTEX, VERTEX_INPUT_RATE_INSTANCE, Format, FORMAT_UNDEFINED, FORMAT_R4G4_UNORM_PACK8, FORMAT_R4G4B4A4_UNORM_PACK16, FORMAT_B4G4R4A4_UNORM_PACK16, FORMAT_R5G6B5_UNORM_PACK16, FORMAT_B5G6R5_UNORM_PACK16, FORMAT_R5G5B5A1_UNORM_PACK16, FORMAT_B5G5R5A1_UNORM_PACK16, FORMAT_A1R5G5B5_UNORM_PACK16, FORMAT_R8_UNORM, FORMAT_R8_SNORM, FORMAT_R8_USCALED, FORMAT_R8_SSCALED, FORMAT_R8_UINT, FORMAT_R8_SINT, FORMAT_R8_SRGB, FORMAT_R8G8_UNORM, FORMAT_R8G8_SNORM, FORMAT_R8G8_USCALED, FORMAT_R8G8_SSCALED, FORMAT_R8G8_UINT, FORMAT_R8G8_SINT, FORMAT_R8G8_SRGB, FORMAT_R8G8B8_UNORM, FORMAT_R8G8B8_SNORM, FORMAT_R8G8B8_USCALED, FORMAT_R8G8B8_SSCALED, FORMAT_R8G8B8_UINT, FORMAT_R8G8B8_SINT, FORMAT_R8G8B8_SRGB, FORMAT_B8G8R8_UNORM, FORMAT_B8G8R8_SNORM, FORMAT_B8G8R8_USCALED, FORMAT_B8G8R8_SSCALED, FORMAT_B8G8R8_UINT, FORMAT_B8G8R8_SINT, FORMAT_B8G8R8_SRGB, FORMAT_R8G8B8A8_UNORM, FORMAT_R8G8B8A8_SNORM, FORMAT_R8G8B8A8_USCALED, FORMAT_R8G8B8A8_SSCALED, FORMAT_R8G8B8A8_UINT, FORMAT_R8G8B8A8_SINT, FORMAT_R8G8B8A8_SRGB, FORMAT_B8G8R8A8_UNORM, FORMAT_B8G8R8A8_SNORM, FORMAT_B8G8R8A8_USCALED, FORMAT_B8G8R8A8_SSCALED, FORMAT_B8G8R8A8_UINT, FORMAT_B8G8R8A8_SINT, FORMAT_B8G8R8A8_SRGB, FORMAT_A8B8G8R8_UNORM_PACK32, FORMAT_A8B8G8R8_SNORM_PACK32, FORMAT_A8B8G8R8_USCALED_PACK32, FORMAT_A8B8G8R8_SSCALED_PACK32, FORMAT_A8B8G8R8_UINT_PACK32, FORMAT_A8B8G8R8_SINT_PACK32, FORMAT_A8B8G8R8_SRGB_PACK32, FORMAT_A2R10G10B10_UNORM_PACK32, FORMAT_A2R10G10B10_SNORM_PACK32, FORMAT_A2R10G10B10_USCALED_PACK32, FORMAT_A2R10G10B10_SSCALED_PACK32, FORMAT_A2R10G10B10_UINT_PACK32, FORMAT_A2R10G10B10_SINT_PACK32, FORMAT_A2B10G10R10_UNORM_PACK32, FORMAT_A2B10G10R10_SNORM_PACK32, FORMAT_A2B10G10R10_USCALED_PACK32, FORMAT_A2B10G10R10_SSCALED_PACK32, FORMAT_A2B10G10R10_UINT_PACK32, FORMAT_A2B10G10R10_SINT_PACK32, FORMAT_R16_UNORM, FORMAT_R16_SNORM, FORMAT_R16_USCALED, FORMAT_R16_SSCALED, FORMAT_R16_UINT, FORMAT_R16_SINT, FORMAT_R16_SFLOAT, FORMAT_R16G16_UNORM, FORMAT_R16G16_SNORM, FORMAT_R16G16_USCALED, FORMAT_R16G16_SSCALED, FORMAT_R16G16_UINT, FORMAT_R16G16_SINT, FORMAT_R16G16_SFLOAT, FORMAT_R16G16B16_UNORM, FORMAT_R16G16B16_SNORM, FORMAT_R16G16B16_USCALED, FORMAT_R16G16B16_SSCALED, FORMAT_R16G16B16_UINT, FORMAT_R16G16B16_SINT, FORMAT_R16G16B16_SFLOAT, FORMAT_R16G16B16A16_UNORM, FORMAT_R16G16B16A16_SNORM, FORMAT_R16G16B16A16_USCALED, FORMAT_R16G16B16A16_SSCALED, FORMAT_R16G16B16A16_UINT, FORMAT_R16G16B16A16_SINT, FORMAT_R16G16B16A16_SFLOAT, FORMAT_R32_UINT, FORMAT_R32_SINT, FORMAT_R32_SFLOAT, FORMAT_R32G32_UINT, FORMAT_R32G32_SINT, FORMAT_R32G32_SFLOAT, FORMAT_R32G32B32_UINT, FORMAT_R32G32B32_SINT, FORMAT_R32G32B32_SFLOAT, FORMAT_R32G32B32A32_UINT, FORMAT_R32G32B32A32_SINT, FORMAT_R32G32B32A32_SFLOAT, FORMAT_R64_UINT, FORMAT_R64_SINT, FORMAT_R64_SFLOAT, FORMAT_R64G64_UINT, FORMAT_R64G64_SINT, FORMAT_R64G64_SFLOAT, FORMAT_R64G64B64_UINT, FORMAT_R64G64B64_SINT, FORMAT_R64G64B64_SFLOAT, FORMAT_R64G64B64A64_UINT, FORMAT_R64G64B64A64_SINT, FORMAT_R64G64B64A64_SFLOAT, FORMAT_B10G11R11_UFLOAT_PACK32, FORMAT_E5B9G9R9_UFLOAT_PACK32, FORMAT_D16_UNORM, FORMAT_X8_D24_UNORM_PACK32, FORMAT_D32_SFLOAT, FORMAT_S8_UINT, FORMAT_D16_UNORM_S8_UINT, FORMAT_D24_UNORM_S8_UINT, FORMAT_D32_SFLOAT_S8_UINT, FORMAT_BC1_RGB_UNORM_BLOCK, FORMAT_BC1_RGB_SRGB_BLOCK, FORMAT_BC1_RGBA_UNORM_BLOCK, FORMAT_BC1_RGBA_SRGB_BLOCK, FORMAT_BC2_UNORM_BLOCK, FORMAT_BC2_SRGB_BLOCK, FORMAT_BC3_UNORM_BLOCK, FORMAT_BC3_SRGB_BLOCK, FORMAT_BC4_UNORM_BLOCK, FORMAT_BC4_SNORM_BLOCK, FORMAT_BC5_UNORM_BLOCK, FORMAT_BC5_SNORM_BLOCK, FORMAT_BC6H_UFLOAT_BLOCK, FORMAT_BC6H_SFLOAT_BLOCK, FORMAT_BC7_UNORM_BLOCK, FORMAT_BC7_SRGB_BLOCK, FORMAT_ETC2_R8G8B8_UNORM_BLOCK, FORMAT_ETC2_R8G8B8_SRGB_BLOCK, FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, FORMAT_EAC_R11_UNORM_BLOCK, FORMAT_EAC_R11_SNORM_BLOCK, FORMAT_EAC_R11G11_UNORM_BLOCK, FORMAT_EAC_R11G11_SNORM_BLOCK, FORMAT_ASTC_4x4_UNORM_BLOCK, FORMAT_ASTC_4x4_SRGB_BLOCK, FORMAT_ASTC_5x4_UNORM_BLOCK, FORMAT_ASTC_5x4_SRGB_BLOCK, FORMAT_ASTC_5x5_UNORM_BLOCK, FORMAT_ASTC_5x5_SRGB_BLOCK, FORMAT_ASTC_6x5_UNORM_BLOCK, FORMAT_ASTC_6x5_SRGB_BLOCK, FORMAT_ASTC_6x6_UNORM_BLOCK, FORMAT_ASTC_6x6_SRGB_BLOCK, FORMAT_ASTC_8x5_UNORM_BLOCK, FORMAT_ASTC_8x5_SRGB_BLOCK, FORMAT_ASTC_8x6_UNORM_BLOCK, FORMAT_ASTC_8x6_SRGB_BLOCK, FORMAT_ASTC_8x8_UNORM_BLOCK, FORMAT_ASTC_8x8_SRGB_BLOCK, FORMAT_ASTC_10x5_UNORM_BLOCK, FORMAT_ASTC_10x5_SRGB_BLOCK, FORMAT_ASTC_10x6_UNORM_BLOCK, FORMAT_ASTC_10x6_SRGB_BLOCK, FORMAT_ASTC_10x8_UNORM_BLOCK, FORMAT_ASTC_10x8_SRGB_BLOCK, FORMAT_ASTC_10x10_UNORM_BLOCK, FORMAT_ASTC_10x10_SRGB_BLOCK, FORMAT_ASTC_12x10_UNORM_BLOCK, FORMAT_ASTC_12x10_SRGB_BLOCK, FORMAT_ASTC_12x12_UNORM_BLOCK, FORMAT_ASTC_12x12_SRGB_BLOCK, FORMAT_G8B8G8R8_422_UNORM, FORMAT_B8G8R8G8_422_UNORM, FORMAT_G8_B8_R8_3PLANE_420_UNORM, FORMAT_G8_B8R8_2PLANE_420_UNORM, FORMAT_G8_B8_R8_3PLANE_422_UNORM, FORMAT_G8_B8R8_2PLANE_422_UNORM, FORMAT_G8_B8_R8_3PLANE_444_UNORM, FORMAT_R10X6_UNORM_PACK16, FORMAT_R10X6G10X6_UNORM_2PACK16, FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, FORMAT_R12X4_UNORM_PACK16, FORMAT_R12X4G12X4_UNORM_2PACK16, FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, FORMAT_G16B16G16R16_422_UNORM, FORMAT_B16G16R16G16_422_UNORM, FORMAT_G16_B16_R16_3PLANE_420_UNORM, FORMAT_G16_B16R16_2PLANE_420_UNORM, FORMAT_G16_B16_R16_3PLANE_422_UNORM, FORMAT_G16_B16R16_2PLANE_422_UNORM, FORMAT_G16_B16_R16_3PLANE_444_UNORM, FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT, FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT, FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT, FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT, FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT, FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT, FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT, FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT, FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT, FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT, FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT, FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT, FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT, FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT, FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT, FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT, FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT, FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT, FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT, FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT, FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT, FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT, FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT, FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT, FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT, FORMAT_A4R4G4B4_UNORM_PACK16_EXT, FORMAT_A4B4G4R4_UNORM_PACK16_EXT, StructureType, STRUCTURE_TYPE_APPLICATION_INFO, STRUCTURE_TYPE_INSTANCE_CREATE_INFO, STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, STRUCTURE_TYPE_DEVICE_CREATE_INFO, STRUCTURE_TYPE_SUBMIT_INFO, STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, STRUCTURE_TYPE_BIND_SPARSE_INFO, STRUCTURE_TYPE_FENCE_CREATE_INFO, STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, STRUCTURE_TYPE_EVENT_CREATE_INFO, STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, STRUCTURE_TYPE_BUFFER_CREATE_INFO, STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, STRUCTURE_TYPE_IMAGE_CREATE_INFO, STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, STRUCTURE_TYPE_SAMPLER_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, STRUCTURE_TYPE_MEMORY_BARRIER, STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO, STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, STRUCTURE_TYPE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, STRUCTURE_TYPE_SUBPASS_END_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_PRESENT_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID, STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID, STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID, STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, STRUCTURE_TYPE_VIDEO_PROFILE_KHR, STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR, STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR, STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR, STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR, STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR, STRUCTURE_TYPE_VIDEO_PROFILES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, STRUCTURE_TYPE_PRESENT_REGIONS_KHR, STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_HDR_METADATA_EXT, STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID, STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, STRUCTURE_TYPE_GEOMETRY_NV, STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, STRUCTURE_TYPE_GEOMETRY_AABB_NV, STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, STRUCTURE_TYPE_CHECKPOINT_DATA_NV, STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_INFO_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, STRUCTURE_TYPE_RESERVED_QCOM, STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_BUFFER_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA, STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, SubpassContents, SUBPASS_CONTENTS_INLINE, SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS, Result, SUCCESS, NOT_READY, TIMEOUT, EVENT_SET, EVENT_RESET, INCOMPLETE, ERROR_OUT_OF_HOST_MEMORY, ERROR_OUT_OF_DEVICE_MEMORY, ERROR_INITIALIZATION_FAILED, ERROR_DEVICE_LOST, ERROR_MEMORY_MAP_FAILED, ERROR_LAYER_NOT_PRESENT, ERROR_EXTENSION_NOT_PRESENT, ERROR_FEATURE_NOT_PRESENT, ERROR_INCOMPATIBLE_DRIVER, ERROR_TOO_MANY_OBJECTS, ERROR_FORMAT_NOT_SUPPORTED, ERROR_FRAGMENTED_POOL, ERROR_UNKNOWN, ERROR_OUT_OF_POOL_MEMORY, ERROR_INVALID_EXTERNAL_HANDLE, ERROR_FRAGMENTATION, ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, ERROR_SURFACE_LOST_KHR, ERROR_NATIVE_WINDOW_IN_USE_KHR, SUBOPTIMAL_KHR, ERROR_OUT_OF_DATE_KHR, ERROR_INCOMPATIBLE_DISPLAY_KHR, ERROR_VALIDATION_FAILED_EXT, ERROR_INVALID_SHADER_NV, ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, ERROR_NOT_PERMITTED_EXT, ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, THREAD_IDLE_KHR, THREAD_DONE_KHR, OPERATION_DEFERRED_KHR, OPERATION_NOT_DEFERRED_KHR, PIPELINE_COMPILE_REQUIRED_EXT, DynamicState, DYNAMIC_STATE_VIEWPORT, DYNAMIC_STATE_SCISSOR, DYNAMIC_STATE_LINE_WIDTH, DYNAMIC_STATE_DEPTH_BIAS, DYNAMIC_STATE_BLEND_CONSTANTS, DYNAMIC_STATE_DEPTH_BOUNDS, DYNAMIC_STATE_STENCIL_COMPARE_MASK, DYNAMIC_STATE_STENCIL_WRITE_MASK, DYNAMIC_STATE_STENCIL_REFERENCE, DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, DYNAMIC_STATE_DISCARD_RECTANGLE_EXT, DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR, DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV, DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV, DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV, DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR, DYNAMIC_STATE_LINE_STIPPLE_EXT, DYNAMIC_STATE_CULL_MODE_EXT, DYNAMIC_STATE_FRONT_FACE_EXT, DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT, DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT, DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT, DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT, DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT, DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT, DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT, DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT, DYNAMIC_STATE_STENCIL_OP_EXT, DYNAMIC_STATE_VERTEX_INPUT_EXT, DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, DYNAMIC_STATE_LOGIC_OP_EXT, DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT, DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT, DescriptorUpdateTemplateType, DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, ObjectType, OBJECT_TYPE_UNKNOWN, OBJECT_TYPE_INSTANCE, OBJECT_TYPE_PHYSICAL_DEVICE, OBJECT_TYPE_DEVICE, OBJECT_TYPE_QUEUE, OBJECT_TYPE_SEMAPHORE, OBJECT_TYPE_COMMAND_BUFFER, OBJECT_TYPE_FENCE, OBJECT_TYPE_DEVICE_MEMORY, OBJECT_TYPE_BUFFER, OBJECT_TYPE_IMAGE, OBJECT_TYPE_EVENT, OBJECT_TYPE_QUERY_POOL, OBJECT_TYPE_BUFFER_VIEW, OBJECT_TYPE_IMAGE_VIEW, OBJECT_TYPE_SHADER_MODULE, OBJECT_TYPE_PIPELINE_CACHE, OBJECT_TYPE_PIPELINE_LAYOUT, OBJECT_TYPE_RENDER_PASS, OBJECT_TYPE_PIPELINE, OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT, OBJECT_TYPE_SAMPLER, OBJECT_TYPE_DESCRIPTOR_POOL, OBJECT_TYPE_DESCRIPTOR_SET, OBJECT_TYPE_FRAMEBUFFER, OBJECT_TYPE_COMMAND_POOL, OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION, OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE, OBJECT_TYPE_SURFACE_KHR, OBJECT_TYPE_SWAPCHAIN_KHR, OBJECT_TYPE_DISPLAY_KHR, OBJECT_TYPE_DISPLAY_MODE_KHR, OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT, OBJECT_TYPE_VIDEO_SESSION_KHR, OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR, OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT, OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR, OBJECT_TYPE_VALIDATION_CACHE_EXT, OBJECT_TYPE_ACCELERATION_STRUCTURE_NV, OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL, OBJECT_TYPE_DEFERRED_OPERATION_KHR, OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV, OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT, SemaphoreType, SEMAPHORE_TYPE_BINARY, SEMAPHORE_TYPE_TIMELINE, PresentModeKHR, PRESENT_MODE_IMMEDIATE_KHR, PRESENT_MODE_MAILBOX_KHR, PRESENT_MODE_FIFO_KHR, PRESENT_MODE_FIFO_RELAXED_KHR, PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR, PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, ColorSpaceKHR, COLOR_SPACE_SRGB_NONLINEAR_KHR, COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT, COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT, COLOR_SPACE_DISPLAY_P3_LINEAR_EXT, COLOR_SPACE_DCI_P3_NONLINEAR_EXT, COLOR_SPACE_BT709_LINEAR_EXT, COLOR_SPACE_BT709_NONLINEAR_EXT, COLOR_SPACE_BT2020_LINEAR_EXT, COLOR_SPACE_HDR10_ST2084_EXT, COLOR_SPACE_DOLBYVISION_EXT, COLOR_SPACE_HDR10_HLG_EXT, COLOR_SPACE_ADOBERGB_LINEAR_EXT, COLOR_SPACE_ADOBERGB_NONLINEAR_EXT, COLOR_SPACE_PASS_THROUGH_EXT, COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT, COLOR_SPACE_DISPLAY_NATIVE_AMD, TimeDomainEXT, TIME_DOMAIN_DEVICE_EXT, TIME_DOMAIN_CLOCK_MONOTONIC_EXT, TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT, TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT, DebugReportObjectTypeEXT, DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT, DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT, DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT, DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT, DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT, DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT, DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT, DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT, DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT, DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT, DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT, DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT, DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT, DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT, DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT, DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT, DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT, DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT, DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT, DeviceMemoryReportEventTypeEXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT, RasterizationOrderAMD, RASTERIZATION_ORDER_STRICT_AMD, RASTERIZATION_ORDER_RELAXED_AMD, ValidationCheckEXT, VALIDATION_CHECK_ALL_EXT, VALIDATION_CHECK_SHADERS_EXT, ValidationFeatureEnableEXT, VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT, VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT, VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT, VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT, VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT, ValidationFeatureDisableEXT, VALIDATION_FEATURE_DISABLE_ALL_EXT, VALIDATION_FEATURE_DISABLE_SHADERS_EXT, VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT, VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT, VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT, VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT, VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT, IndirectCommandsTokenTypeNV, INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV, INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV, INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV, INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV, INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV, DisplayPowerStateEXT, DISPLAY_POWER_STATE_OFF_EXT, DISPLAY_POWER_STATE_SUSPEND_EXT, DISPLAY_POWER_STATE_ON_EXT, DeviceEventTypeEXT, DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT, DisplayEventTypeEXT, DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT, ViewportCoordinateSwizzleNV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV, DiscardRectangleModeEXT, DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT, DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT, PointClippingBehavior, POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES, POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY, SamplerReductionMode, SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE, SAMPLER_REDUCTION_MODE_MIN, SAMPLER_REDUCTION_MODE_MAX, TessellationDomainOrigin, TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT, TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT, SamplerYcbcrModelConversion, SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020, SamplerYcbcrRange, SAMPLER_YCBCR_RANGE_ITU_FULL, SAMPLER_YCBCR_RANGE_ITU_NARROW, ChromaLocation, CHROMA_LOCATION_COSITED_EVEN, CHROMA_LOCATION_MIDPOINT, BlendOverlapEXT, BLEND_OVERLAP_UNCORRELATED_EXT, BLEND_OVERLAP_DISJOINT_EXT, BLEND_OVERLAP_CONJOINT_EXT, CoverageModulationModeNV, COVERAGE_MODULATION_MODE_NONE_NV, COVERAGE_MODULATION_MODE_RGB_NV, COVERAGE_MODULATION_MODE_ALPHA_NV, COVERAGE_MODULATION_MODE_RGBA_NV, CoverageReductionModeNV, COVERAGE_REDUCTION_MODE_MERGE_NV, COVERAGE_REDUCTION_MODE_TRUNCATE_NV, ValidationCacheHeaderVersionEXT, VALIDATION_CACHE_HEADER_VERSION_ONE_EXT, ShaderInfoTypeAMD, SHADER_INFO_TYPE_STATISTICS_AMD, SHADER_INFO_TYPE_BINARY_AMD, SHADER_INFO_TYPE_DISASSEMBLY_AMD, QueueGlobalPriorityEXT, QUEUE_GLOBAL_PRIORITY_LOW_EXT, QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT, QUEUE_GLOBAL_PRIORITY_HIGH_EXT, QUEUE_GLOBAL_PRIORITY_REALTIME_EXT, ConservativeRasterizationModeEXT, CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT, CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT, CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT, VendorId, VENDOR_ID_VIV, VENDOR_ID_VSI, VENDOR_ID_KAZAN, VENDOR_ID_CODEPLAY, VENDOR_ID_MESA, VENDOR_ID_POCL, DriverId, DRIVER_ID_AMD_PROPRIETARY, DRIVER_ID_AMD_OPEN_SOURCE, DRIVER_ID_MESA_RADV, DRIVER_ID_NVIDIA_PROPRIETARY, DRIVER_ID_INTEL_PROPRIETARY_WINDOWS, DRIVER_ID_INTEL_OPEN_SOURCE_MESA, DRIVER_ID_IMAGINATION_PROPRIETARY, DRIVER_ID_QUALCOMM_PROPRIETARY, DRIVER_ID_ARM_PROPRIETARY, DRIVER_ID_GOOGLE_SWIFTSHADER, DRIVER_ID_GGP_PROPRIETARY, DRIVER_ID_BROADCOM_PROPRIETARY, DRIVER_ID_MESA_LLVMPIPE, DRIVER_ID_MOLTENVK, DRIVER_ID_COREAVI_PROPRIETARY, ShadingRatePaletteEntryNV, SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV, SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV, CoarseSampleOrderTypeNV, COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV, COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV, COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV, CopyAccelerationStructureModeKHR, COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR, COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR, COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR, COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR, BuildAccelerationStructureModeKHR, BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR, BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, AccelerationStructureTypeKHR, ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR, ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR, ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR, GeometryTypeKHR, GEOMETRY_TYPE_TRIANGLES_KHR, GEOMETRY_TYPE_AABBS_KHR, GEOMETRY_TYPE_INSTANCES_KHR, AccelerationStructureMemoryRequirementsTypeNV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV, AccelerationStructureBuildTypeKHR, ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR, ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR, RayTracingShaderGroupTypeKHR, RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR, RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR, RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR, AccelerationStructureCompatibilityKHR, ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR, ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR, ShaderGroupShaderKHR, SHADER_GROUP_SHADER_GENERAL_KHR, SHADER_GROUP_SHADER_CLOSEST_HIT_KHR, SHADER_GROUP_SHADER_ANY_HIT_KHR, SHADER_GROUP_SHADER_INTERSECTION_KHR, MemoryOverallocationBehaviorAMD, MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD, MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD, MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD, ScopeNV, SCOPE_DEVICE_NV, SCOPE_WORKGROUP_NV, SCOPE_SUBGROUP_NV, SCOPE_QUEUE_FAMILY_NV, ComponentTypeNV, COMPONENT_TYPE_FLOAT16_NV, COMPONENT_TYPE_FLOAT32_NV, COMPONENT_TYPE_FLOAT64_NV, COMPONENT_TYPE_SINT8_NV, COMPONENT_TYPE_SINT16_NV, COMPONENT_TYPE_SINT32_NV, COMPONENT_TYPE_SINT64_NV, COMPONENT_TYPE_UINT8_NV, COMPONENT_TYPE_UINT16_NV, COMPONENT_TYPE_UINT32_NV, COMPONENT_TYPE_UINT64_NV, FullScreenExclusiveEXT, FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT, FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT, FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT, FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT, PerformanceCounterScopeKHR, PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR, PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR, PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR, PerformanceCounterUnitKHR, PERFORMANCE_COUNTER_UNIT_GENERIC_KHR, PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR, PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR, PERFORMANCE_COUNTER_UNIT_BYTES_KHR, PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR, PERFORMANCE_COUNTER_UNIT_KELVIN_KHR, PERFORMANCE_COUNTER_UNIT_WATTS_KHR, PERFORMANCE_COUNTER_UNIT_VOLTS_KHR, PERFORMANCE_COUNTER_UNIT_AMPS_KHR, PERFORMANCE_COUNTER_UNIT_HERTZ_KHR, PERFORMANCE_COUNTER_UNIT_CYCLES_KHR, PerformanceCounterStorageKHR, PERFORMANCE_COUNTER_STORAGE_INT32_KHR, PERFORMANCE_COUNTER_STORAGE_INT64_KHR, PERFORMANCE_COUNTER_STORAGE_UINT32_KHR, PERFORMANCE_COUNTER_STORAGE_UINT64_KHR, PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR, PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR, PerformanceConfigurationTypeINTEL, PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL, QueryPoolSamplingModeINTEL, QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL, PerformanceOverrideTypeINTEL, PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL, PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL, PerformanceParameterTypeINTEL, PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL, PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL, PerformanceValueTypeINTEL, PERFORMANCE_VALUE_TYPE_UINT32_INTEL, PERFORMANCE_VALUE_TYPE_UINT64_INTEL, PERFORMANCE_VALUE_TYPE_FLOAT_INTEL, PERFORMANCE_VALUE_TYPE_BOOL_INTEL, PERFORMANCE_VALUE_TYPE_STRING_INTEL, ShaderFloatControlsIndependence, SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY, SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL, SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE, PipelineExecutableStatisticFormatKHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR, LineRasterizationModeEXT, LINE_RASTERIZATION_MODE_DEFAULT_EXT, LINE_RASTERIZATION_MODE_RECTANGULAR_EXT, LINE_RASTERIZATION_MODE_BRESENHAM_EXT, LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT, FragmentShadingRateCombinerOpKHR, FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR, FragmentShadingRateNV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV, FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV, FragmentShadingRateTypeNV, FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV, FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV, ProvokingVertexModeEXT, PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT, PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT, QueryResultStatusKHR, QUERY_RESULT_STATUS_ERROR_KHR, QUERY_RESULT_STATUS_NOT_READY_KHR, QUERY_RESULT_STATUS_COMPLETE_KHR, PipelineCacheCreateFlag, PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT, PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT, PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT, QueueFlag, QUEUE_GRAPHICS_BIT, QUEUE_COMPUTE_BIT, QUEUE_TRANSFER_BIT, QUEUE_SPARSE_BINDING_BIT, QUEUE_PROTECTED_BIT, QUEUE_VIDEO_DECODE_BIT_KHR, QUEUE_VIDEO_ENCODE_BIT_KHR, CullModeFlag, CULL_MODE_NONE, CULL_MODE_FRONT_BIT, CULL_MODE_BACK_BIT, CULL_MODE_FRONT_AND_BACK, RenderPassCreateFlag, RENDER_PASS_CREATE_RESERVED_0_BIT_KHR, RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM, DeviceQueueCreateFlag, DEVICE_QUEUE_CREATE_PROTECTED_BIT, MemoryPropertyFlag, MEMORY_PROPERTY_DEVICE_LOCAL_BIT, MEMORY_PROPERTY_HOST_VISIBLE_BIT, MEMORY_PROPERTY_HOST_COHERENT_BIT, MEMORY_PROPERTY_HOST_CACHED_BIT, MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT, MEMORY_PROPERTY_PROTECTED_BIT, MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD, MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD, MEMORY_PROPERTY_RESERVED_8_BIT_NV, MemoryHeapFlag, MEMORY_HEAP_DEVICE_LOCAL_BIT, MEMORY_HEAP_MULTI_INSTANCE_BIT, MEMORY_HEAP_RESERVED_2_BIT_KHR, AccessFlag, ACCESS_INDIRECT_COMMAND_READ_BIT, ACCESS_INDEX_READ_BIT, ACCESS_VERTEX_ATTRIBUTE_READ_BIT, ACCESS_UNIFORM_READ_BIT, ACCESS_INPUT_ATTACHMENT_READ_BIT, ACCESS_SHADER_READ_BIT, ACCESS_SHADER_WRITE_BIT, ACCESS_COLOR_ATTACHMENT_READ_BIT, ACCESS_COLOR_ATTACHMENT_WRITE_BIT, ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT, ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, ACCESS_TRANSFER_READ_BIT, ACCESS_TRANSFER_WRITE_BIT, ACCESS_HOST_READ_BIT, ACCESS_HOST_WRITE_BIT, ACCESS_MEMORY_READ_BIT, ACCESS_MEMORY_WRITE_BIT, ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT, ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR, ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV, ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, ACCESS_COMMAND_PREPROCESS_READ_BIT_NV, ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV, ACCESS_NONE_KHR, BufferUsageFlag, BUFFER_USAGE_TRANSFER_SRC_BIT, BUFFER_USAGE_TRANSFER_DST_BIT, BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, BUFFER_USAGE_UNIFORM_BUFFER_BIT, BUFFER_USAGE_STORAGE_BUFFER_BIT, BUFFER_USAGE_INDEX_BUFFER_BIT, BUFFER_USAGE_VERTEX_BUFFER_BIT, BUFFER_USAGE_INDIRECT_BUFFER_BIT, BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR, BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR, BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR, BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT, BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT, BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT, BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR, BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR, BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR, BUFFER_USAGE_RESERVED_18_BIT_QCOM, BufferCreateFlag, BUFFER_CREATE_SPARSE_BINDING_BIT, BUFFER_CREATE_SPARSE_RESIDENCY_BIT, BUFFER_CREATE_SPARSE_ALIASED_BIT, BUFFER_CREATE_PROTECTED_BIT, BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, ShaderStageFlag, SHADER_STAGE_VERTEX_BIT, SHADER_STAGE_TESSELLATION_CONTROL_BIT, SHADER_STAGE_TESSELLATION_EVALUATION_BIT, SHADER_STAGE_GEOMETRY_BIT, SHADER_STAGE_FRAGMENT_BIT, SHADER_STAGE_COMPUTE_BIT, SHADER_STAGE_ALL_GRAPHICS, SHADER_STAGE_ALL, SHADER_STAGE_RAYGEN_BIT_KHR, SHADER_STAGE_ANY_HIT_BIT_KHR, SHADER_STAGE_CLOSEST_HIT_BIT_KHR, SHADER_STAGE_MISS_BIT_KHR, SHADER_STAGE_INTERSECTION_BIT_KHR, SHADER_STAGE_CALLABLE_BIT_KHR, SHADER_STAGE_TASK_BIT_NV, SHADER_STAGE_MESH_BIT_NV, ImageUsageFlag, IMAGE_USAGE_TRANSFER_SRC_BIT, IMAGE_USAGE_TRANSFER_DST_BIT, IMAGE_USAGE_SAMPLED_BIT, IMAGE_USAGE_STORAGE_BIT, IMAGE_USAGE_COLOR_ATTACHMENT_BIT, IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, IMAGE_USAGE_INPUT_ATTACHMENT_BIT, IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR, IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR, IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR, IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, IMAGE_USAGE_RESERVED_16_BIT_QCOM, IMAGE_USAGE_RESERVED_17_BIT_QCOM, IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, ImageCreateFlag, IMAGE_CREATE_SPARSE_BINDING_BIT, IMAGE_CREATE_SPARSE_RESIDENCY_BIT, IMAGE_CREATE_SPARSE_ALIASED_BIT, IMAGE_CREATE_MUTABLE_FORMAT_BIT, IMAGE_CREATE_CUBE_COMPATIBLE_BIT, IMAGE_CREATE_ALIAS_BIT, IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT, IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT, IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, IMAGE_CREATE_EXTENDED_USAGE_BIT, IMAGE_CREATE_PROTECTED_BIT, IMAGE_CREATE_DISJOINT_BIT, IMAGE_CREATE_CORNER_SAMPLED_BIT_NV, IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT, IMAGE_CREATE_SUBSAMPLED_BIT_EXT, ImageViewCreateFlag, IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT, IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT, SamplerCreateFlag, SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT, PipelineCreateFlag, PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT, PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT, PIPELINE_CREATE_DERIVATIVE_BIT, PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT, PIPELINE_CREATE_DISPATCH_BASE_BIT, PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR, PIPELINE_CREATE_DEFER_COMPILE_BIT_NV, PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR, PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR, PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV, PIPELINE_CREATE_LIBRARY_BIT_KHR, PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT, PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT, PIPELINE_CREATE_RESERVED_BIT_20_NV, PipelineShaderStageCreateFlag, PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV, PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT, PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR, ColorComponentFlag, COLOR_COMPONENT_R_BIT, COLOR_COMPONENT_G_BIT, COLOR_COMPONENT_B_BIT, COLOR_COMPONENT_A_BIT, FenceCreateFlag, FENCE_CREATE_SIGNALED_BIT, FormatFeatureFlag, FORMAT_FEATURE_SAMPLED_IMAGE_BIT, FORMAT_FEATURE_STORAGE_IMAGE_BIT, FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT, FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT, FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT, FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT, FORMAT_FEATURE_VERTEX_BUFFER_BIT, FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT, FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, FORMAT_FEATURE_BLIT_SRC_BIT, FORMAT_FEATURE_BLIT_DST_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT, FORMAT_FEATURE_TRANSFER_SRC_BIT, FORMAT_FEATURE_TRANSFER_DST_BIT, FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT, FORMAT_FEATURE_DISJOINT_BIT, FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG, FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR, FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR, FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR, FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR, FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR, FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT, FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, QueryControlFlag, QUERY_CONTROL_PRECISE_BIT, QueryResultFlag, QUERY_RESULT_64_BIT, QUERY_RESULT_WAIT_BIT, QUERY_RESULT_WITH_AVAILABILITY_BIT, QUERY_RESULT_PARTIAL_BIT, QUERY_RESULT_WITH_STATUS_BIT_KHR, CommandBufferUsageFlag, COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, QueryPipelineStatisticFlag, QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT, QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT, QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT, ImageAspectFlag, IMAGE_ASPECT_COLOR_BIT, IMAGE_ASPECT_DEPTH_BIT, IMAGE_ASPECT_STENCIL_BIT, IMAGE_ASPECT_METADATA_BIT, IMAGE_ASPECT_PLANE_0_BIT, IMAGE_ASPECT_PLANE_1_BIT, IMAGE_ASPECT_PLANE_2_BIT, IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT, SparseImageFormatFlag, SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT, SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT, SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT, SparseMemoryBindFlag, SPARSE_MEMORY_BIND_METADATA_BIT, PipelineStageFlag, PIPELINE_STAGE_TOP_OF_PIPE_BIT, PIPELINE_STAGE_DRAW_INDIRECT_BIT, PIPELINE_STAGE_VERTEX_INPUT_BIT, PIPELINE_STAGE_VERTEX_SHADER_BIT, PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, PIPELINE_STAGE_GEOMETRY_SHADER_BIT, PIPELINE_STAGE_FRAGMENT_SHADER_BIT, PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, PIPELINE_STAGE_COMPUTE_SHADER_BIT, PIPELINE_STAGE_TRANSFER_BIT, PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, PIPELINE_STAGE_HOST_BIT, PIPELINE_STAGE_ALL_GRAPHICS_BIT, PIPELINE_STAGE_ALL_COMMANDS_BIT, PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT, PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT, PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR, PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV, PIPELINE_STAGE_TASK_SHADER_BIT_NV, PIPELINE_STAGE_MESH_SHADER_BIT_NV, PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT, PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV, PIPELINE_STAGE_NONE_KHR, CommandPoolCreateFlag, COMMAND_POOL_CREATE_TRANSIENT_BIT, COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT, COMMAND_POOL_CREATE_PROTECTED_BIT, CommandPoolResetFlag, COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT, CommandBufferResetFlag, COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT, SampleCountFlag, SAMPLE_COUNT_1_BIT, SAMPLE_COUNT_2_BIT, SAMPLE_COUNT_4_BIT, SAMPLE_COUNT_8_BIT, SAMPLE_COUNT_16_BIT, SAMPLE_COUNT_32_BIT, SAMPLE_COUNT_64_BIT, AttachmentDescriptionFlag, ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT, StencilFaceFlag, STENCIL_FACE_FRONT_BIT, STENCIL_FACE_BACK_BIT, STENCIL_FACE_FRONT_AND_BACK, DescriptorPoolCreateFlag, DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT, DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT, DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE, DependencyFlag, DEPENDENCY_BY_REGION_BIT, DEPENDENCY_DEVICE_GROUP_BIT, DEPENDENCY_VIEW_LOCAL_BIT, SemaphoreWaitFlag, SEMAPHORE_WAIT_ANY_BIT, DisplayPlaneAlphaFlagKHR, DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR, DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR, DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR, DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR, CompositeAlphaFlagKHR, COMPOSITE_ALPHA_OPAQUE_BIT_KHR, COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR, COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR, COMPOSITE_ALPHA_INHERIT_BIT_KHR, SurfaceTransformFlagKHR, SURFACE_TRANSFORM_IDENTITY_BIT_KHR, SURFACE_TRANSFORM_ROTATE_90_BIT_KHR, SURFACE_TRANSFORM_ROTATE_180_BIT_KHR, SURFACE_TRANSFORM_ROTATE_270_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR, SURFACE_TRANSFORM_INHERIT_BIT_KHR, DebugReportFlagEXT, DEBUG_REPORT_INFORMATION_BIT_EXT, DEBUG_REPORT_WARNING_BIT_EXT, DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT, DEBUG_REPORT_ERROR_BIT_EXT, DEBUG_REPORT_DEBUG_BIT_EXT, ExternalMemoryHandleTypeFlagNV, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV, ExternalMemoryFeatureFlagNV, EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV, EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV, EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV, SubgroupFeatureFlag, SUBGROUP_FEATURE_BASIC_BIT, SUBGROUP_FEATURE_VOTE_BIT, SUBGROUP_FEATURE_ARITHMETIC_BIT, SUBGROUP_FEATURE_BALLOT_BIT, SUBGROUP_FEATURE_SHUFFLE_BIT, SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT, SUBGROUP_FEATURE_CLUSTERED_BIT, SUBGROUP_FEATURE_QUAD_BIT, SUBGROUP_FEATURE_PARTITIONED_BIT_NV, IndirectCommandsLayoutUsageFlagNV, INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV, INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV, INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV, IndirectStateFlagNV, INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV, PrivateDataSlotCreateFlagEXT, DescriptorSetLayoutCreateFlag, DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT, DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE, ExternalMemoryHandleTypeFlag, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID, EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA, EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_12_BIT_NV, ExternalMemoryFeatureFlag, EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT, EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT, EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT, ExternalSemaphoreHandleTypeFlag, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA, EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV, EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_6_BIT_NV, ExternalSemaphoreFeatureFlag, EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT, EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT, SemaphoreImportFlag, SEMAPHORE_IMPORT_TEMPORARY_BIT, ExternalFenceHandleTypeFlag, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT, EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV, EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV, ExternalFenceFeatureFlag, EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT, EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT, FenceImportFlag, FENCE_IMPORT_TEMPORARY_BIT, SurfaceCounterFlagEXT, SURFACE_COUNTER_VBLANK_BIT_EXT, PeerMemoryFeatureFlag, PEER_MEMORY_FEATURE_COPY_SRC_BIT, PEER_MEMORY_FEATURE_COPY_DST_BIT, PEER_MEMORY_FEATURE_GENERIC_SRC_BIT, PEER_MEMORY_FEATURE_GENERIC_DST_BIT, MemoryAllocateFlag, MEMORY_ALLOCATE_DEVICE_MASK_BIT, MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT, MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, DeviceGroupPresentModeFlagKHR, DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR, SwapchainCreateFlagKHR, SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR, SWAPCHAIN_CREATE_PROTECTED_BIT_KHR, SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR, SubpassDescriptionFlag, SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX, SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM, SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM, DebugUtilsMessageSeverityFlagEXT, DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT, DebugUtilsMessageTypeFlagEXT, DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT, DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT, DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT, DescriptorBindingFlag, DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT, DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT, DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT, DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT, DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM, ConditionalRenderingFlagEXT, CONDITIONAL_RENDERING_INVERTED_BIT_EXT, ResolveModeFlag, RESOLVE_MODE_NONE, RESOLVE_MODE_SAMPLE_ZERO_BIT, RESOLVE_MODE_AVERAGE_BIT, RESOLVE_MODE_MIN_BIT, RESOLVE_MODE_MAX_BIT, GeometryInstanceFlagKHR, GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR, GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR, GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR, GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR, GeometryFlagKHR, GEOMETRY_OPAQUE_BIT_KHR, GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR, BuildAccelerationStructureFlagKHR, BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_5_NV, AccelerationStructureCreateFlagKHR, ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR, ACCELERATION_STRUCTURE_CREATE_RESERVED_BIT_2_NV, FramebufferCreateFlag, FRAMEBUFFER_CREATE_IMAGELESS_BIT, DeviceDiagnosticsConfigFlagNV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV, PipelineCreationFeedbackFlagEXT, PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT, PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT, PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT, PerformanceCounterDescriptionFlagKHR, PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR, PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR, AcquireProfilingLockFlagKHR, ShaderCorePropertiesFlagAMD, ShaderModuleCreateFlag, SHADER_MODULE_CREATE_RESERVED_0_BIT_NV, PipelineCompilerControlFlagAMD, ToolPurposeFlagEXT, TOOL_PURPOSE_VALIDATION_BIT_EXT, TOOL_PURPOSE_PROFILING_BIT_EXT, TOOL_PURPOSE_TRACING_BIT_EXT, TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT, TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT, TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT, TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT, AccessFlag2KHR, ACCESS_2_NONE_KHR, ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR, ACCESS_2_INDEX_READ_BIT_KHR, ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR, ACCESS_2_UNIFORM_READ_BIT_KHR, ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR, ACCESS_2_SHADER_READ_BIT_KHR, ACCESS_2_SHADER_WRITE_BIT_KHR, ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR, ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR, ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR, ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR, ACCESS_2_TRANSFER_READ_BIT_KHR, ACCESS_2_TRANSFER_WRITE_BIT_KHR, ACCESS_2_HOST_READ_BIT_KHR, ACCESS_2_HOST_WRITE_BIT_KHR, ACCESS_2_MEMORY_READ_BIT_KHR, ACCESS_2_MEMORY_WRITE_BIT_KHR, ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR, ACCESS_2_SHADER_STORAGE_READ_BIT_KHR, ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR, ACCESS_2_VIDEO_DECODE_READ_BIT_KHR, ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR, ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR, ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR, ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT, ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV, ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV, ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR, ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR, ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, PipelineStageFlag2KHR, PIPELINE_STAGE_2_NONE_KHR, PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR, PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR, PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR, PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR, PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR, PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR, PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR, PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR, PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR, PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR, PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR, PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR, PIPELINE_STAGE_2_HOST_BIT_KHR, PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR, PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR, PIPELINE_STAGE_2_COPY_BIT_KHR, PIPELINE_STAGE_2_RESOLVE_BIT_KHR, PIPELINE_STAGE_2_BLIT_BIT_KHR, PIPELINE_STAGE_2_CLEAR_BIT_KHR, PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR, PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR, PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR, PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR, PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT, PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT, PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV, PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR, PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT, PIPELINE_STAGE_2_TASK_SHADER_BIT_NV, PIPELINE_STAGE_2_MESH_SHADER_BIT_NV, SubmitFlagKHR, SUBMIT_PROTECTED_BIT_KHR, EventCreateFlag, EVENT_CREATE_DEVICE_ONLY_BIT_KHR, VideoCodecOperationFlagKHR, VIDEO_CODEC_OPERATION_INVALID_BIT_KHR, VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT, VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT, VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT, VideoChromaSubsamplingFlagKHR, VIDEO_CHROMA_SUBSAMPLING_INVALID_BIT_KHR, VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR, VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR, VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR, VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR, VideoComponentBitDepthFlagKHR, VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR, VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR, VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR, VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR, VideoCapabilitiesFlagKHR, VIDEO_CAPABILITIES_PROTECTED_CONTENT_BIT_KHR, VIDEO_CAPABILITIES_SEPARATE_REFERENCE_IMAGES_BIT_KHR, VideoSessionCreateFlagKHR, VIDEO_SESSION_CREATE_DEFAULT_KHR, VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR, VideoCodingQualityPresetFlagKHR, VIDEO_CODING_QUALITY_PRESET_DEFAULT_BIT_KHR, VIDEO_CODING_QUALITY_PRESET_NORMAL_BIT_KHR, VIDEO_CODING_QUALITY_PRESET_POWER_BIT_KHR, VIDEO_CODING_QUALITY_PRESET_QUALITY_BIT_KHR, VideoDecodeH264FieldLayoutFlagEXT, VIDEO_DECODE_H264_PROGRESSIVE_PICTURES_ONLY_EXT, VIDEO_DECODE_H264_FIELD_LAYOUT_LINE_INTERLACED_PLANE_BIT_EXT, VIDEO_DECODE_H264_FIELD_LAYOUT_SEPARATE_INTERLACED_PLANE_BIT_EXT, VideoCodingControlFlagKHR, VIDEO_CODING_CONTROL_DEFAULT_KHR, VIDEO_CODING_CONTROL_RESET_BIT_KHR, VideoDecodeFlagKHR, VIDEO_DECODE_DEFAULT_KHR, VIDEO_DECODE_RESERVED_0_BIT_KHR, VideoEncodeFlagKHR, VIDEO_ENCODE_DEFAULT_KHR, VIDEO_ENCODE_RESERVED_0_BIT_KHR, VideoEncodeRateControlFlagKHR, VIDEO_ENCODE_RATE_CONTROL_DEFAULT_KHR, VIDEO_ENCODE_RATE_CONTROL_RESET_BIT_KHR, VideoEncodeRateControlModeFlagKHR, VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR, VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR, VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR, VideoEncodeH264CapabilitiesFlagEXT, VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BI_PRED_IMPLICIT_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT, VIDEO_ENCODE_H264_CAPABILITY_EVENLY_DISTRIBUTED_SLICE_SIZE_BIT_EXT, VideoEncodeH264InputModeFlagEXT, VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT, VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT, VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT, VideoEncodeH264OutputModeFlagEXT, VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT, VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT, VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT, VideoEncodeH264CreateFlagEXT, VIDEO_ENCODE_H264_CREATE_DEFAULT_EXT, VIDEO_ENCODE_H264_CREATE_RESERVED_0_BIT_EXT, Instance, PhysicalDevice, Device, Queue, CommandBuffer, DeviceMemory, CommandPool, Buffer, BufferView, Image, ImageView, ShaderModule, Pipeline, PipelineLayout, Sampler, DescriptorSet, DescriptorSetLayout, DescriptorPool, Fence, Semaphore, Event, QueryPool, Framebuffer, RenderPass, PipelineCache, IndirectCommandsLayoutNV, DescriptorUpdateTemplate, SamplerYcbcrConversion, ValidationCacheEXT, AccelerationStructureKHR, AccelerationStructureNV, PerformanceConfigurationINTEL, DeferredOperationKHR, PrivateDataSlotEXT, DisplayKHR, DisplayModeKHR, SurfaceKHR, SwapchainKHR, DebugReportCallbackEXT, DebugUtilsMessengerEXT, VideoSessionKHR, VideoSessionParametersKHR, _BaseOutStructure, _BaseInStructure, _Offset2D, _Offset3D, _Extent2D, _Extent3D, _Viewport, _Rect2D, _ClearRect, _ComponentMapping, PhysicalDeviceProperties, ExtensionProperties, LayerProperties, _ApplicationInfo, _AllocationCallbacks, _DeviceQueueCreateInfo, _DeviceCreateInfo, _InstanceCreateInfo, QueueFamilyProperties, PhysicalDeviceMemoryProperties, _MemoryAllocateInfo, MemoryRequirements, SparseImageFormatProperties, SparseImageMemoryRequirements, MemoryType, MemoryHeap, _MappedMemoryRange, FormatProperties, ImageFormatProperties, _DescriptorBufferInfo, _DescriptorImageInfo, _WriteDescriptorSet, _CopyDescriptorSet, _BufferCreateInfo, _BufferViewCreateInfo, _ImageSubresource, _ImageSubresourceLayers, _ImageSubresourceRange, _MemoryBarrier, _BufferMemoryBarrier, _ImageMemoryBarrier, _ImageCreateInfo, SubresourceLayout, _ImageViewCreateInfo, _BufferCopy, _SparseMemoryBind, _SparseImageMemoryBind, _SparseBufferMemoryBindInfo, _SparseImageOpaqueMemoryBindInfo, _SparseImageMemoryBindInfo, _BindSparseInfo, _ImageCopy, _ImageBlit, _BufferImageCopy, _ImageResolve, _ShaderModuleCreateInfo, _DescriptorSetLayoutBinding, _DescriptorSetLayoutCreateInfo, _DescriptorPoolSize, _DescriptorPoolCreateInfo, _DescriptorSetAllocateInfo, _SpecializationMapEntry, _SpecializationInfo, _PipelineShaderStageCreateInfo, _ComputePipelineCreateInfo, _VertexInputBindingDescription, _VertexInputAttributeDescription, _PipelineVertexInputStateCreateInfo, _PipelineInputAssemblyStateCreateInfo, _PipelineTessellationStateCreateInfo, _PipelineViewportStateCreateInfo, _PipelineRasterizationStateCreateInfo, _PipelineMultisampleStateCreateInfo, _PipelineColorBlendAttachmentState, _PipelineColorBlendStateCreateInfo, _PipelineDynamicStateCreateInfo, _StencilOpState, _PipelineDepthStencilStateCreateInfo, _GraphicsPipelineCreateInfo, _PipelineCacheCreateInfo, _PushConstantRange, _PipelineLayoutCreateInfo, _SamplerCreateInfo, _CommandPoolCreateInfo, _CommandBufferAllocateInfo, _CommandBufferInheritanceInfo, _CommandBufferBeginInfo, _RenderPassBeginInfo, _ClearDepthStencilValue, _ClearAttachment, _AttachmentDescription, _AttachmentReference, _SubpassDescription, _SubpassDependency, _RenderPassCreateInfo, _EventCreateInfo, _FenceCreateInfo, _PhysicalDeviceFeatures, PhysicalDeviceSparseProperties, PhysicalDeviceLimits, _SemaphoreCreateInfo, _QueryPoolCreateInfo, _FramebufferCreateInfo, _DrawIndirectCommand, _DrawIndexedIndirectCommand, _DispatchIndirectCommand, _SubmitInfo, DisplayPropertiesKHR, DisplayPlanePropertiesKHR, _DisplayModeParametersKHR, DisplayModePropertiesKHR, _DisplayModeCreateInfoKHR, DisplayPlaneCapabilitiesKHR, _DisplaySurfaceCreateInfoKHR, _DisplayPresentInfoKHR, SurfaceCapabilitiesKHR, _AndroidSurfaceCreateInfoKHR, _ViSurfaceCreateInfoNN, _WaylandSurfaceCreateInfoKHR, _Win32SurfaceCreateInfoKHR, _XlibSurfaceCreateInfoKHR, _XcbSurfaceCreateInfoKHR, _DirectFBSurfaceCreateInfoEXT, _ImagePipeSurfaceCreateInfoFUCHSIA, _StreamDescriptorSurfaceCreateInfoGGP, _ScreenSurfaceCreateInfoQNX, SurfaceFormatKHR, _SwapchainCreateInfoKHR, _PresentInfoKHR, _DebugReportCallbackCreateInfoEXT, _ValidationFlagsEXT, _ValidationFeaturesEXT, _PipelineRasterizationStateRasterizationOrderAMD, _DebugMarkerObjectNameInfoEXT, _DebugMarkerObjectTagInfoEXT, _DebugMarkerMarkerInfoEXT, _DedicatedAllocationImageCreateInfoNV, _DedicatedAllocationBufferCreateInfoNV, _DedicatedAllocationMemoryAllocateInfoNV, ExternalImageFormatPropertiesNV, _ExternalMemoryImageCreateInfoNV, _ExportMemoryAllocateInfoNV, _ImportMemoryWin32HandleInfoNV, _ExportMemoryWin32HandleInfoNV, _Win32KeyedMutexAcquireReleaseInfoNV, _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV, _DevicePrivateDataCreateInfoEXT, _PrivateDataSlotCreateInfoEXT, _PhysicalDevicePrivateDataFeaturesEXT, PhysicalDeviceDeviceGeneratedCommandsPropertiesNV, _GraphicsShaderGroupCreateInfoNV, _GraphicsPipelineShaderGroupsCreateInfoNV, _BindShaderGroupIndirectCommandNV, _BindIndexBufferIndirectCommandNV, _BindVertexBufferIndirectCommandNV, _SetStateFlagsIndirectCommandNV, _IndirectCommandsStreamNV, _IndirectCommandsLayoutTokenNV, _IndirectCommandsLayoutCreateInfoNV, _GeneratedCommandsInfoNV, _GeneratedCommandsMemoryRequirementsInfoNV, _PhysicalDeviceFeatures2, PhysicalDeviceProperties2, FormatProperties2, ImageFormatProperties2, _PhysicalDeviceImageFormatInfo2, QueueFamilyProperties2, PhysicalDeviceMemoryProperties2, SparseImageFormatProperties2, _PhysicalDeviceSparseImageFormatInfo2, PhysicalDevicePushDescriptorPropertiesKHR, _ConformanceVersion, PhysicalDeviceDriverProperties, _PresentRegionsKHR, _PresentRegionKHR, _RectLayerKHR, _PhysicalDeviceVariablePointersFeatures, ExternalMemoryProperties, _PhysicalDeviceExternalImageFormatInfo, ExternalImageFormatProperties, _PhysicalDeviceExternalBufferInfo, ExternalBufferProperties, PhysicalDeviceIDProperties, _ExternalMemoryImageCreateInfo, _ExternalMemoryBufferCreateInfo, _ExportMemoryAllocateInfo, _ImportMemoryWin32HandleInfoKHR, _ExportMemoryWin32HandleInfoKHR, _ImportMemoryZirconHandleInfoFUCHSIA, MemoryZirconHandlePropertiesFUCHSIA, _MemoryGetZirconHandleInfoFUCHSIA, MemoryWin32HandlePropertiesKHR, _MemoryGetWin32HandleInfoKHR, _ImportMemoryFdInfoKHR, MemoryFdPropertiesKHR, _MemoryGetFdInfoKHR, _Win32KeyedMutexAcquireReleaseInfoKHR, _PhysicalDeviceExternalSemaphoreInfo, ExternalSemaphoreProperties, _ExportSemaphoreCreateInfo, _ImportSemaphoreWin32HandleInfoKHR, _ExportSemaphoreWin32HandleInfoKHR, _D3D12FenceSubmitInfoKHR, _SemaphoreGetWin32HandleInfoKHR, _ImportSemaphoreFdInfoKHR, _SemaphoreGetFdInfoKHR, _ImportSemaphoreZirconHandleInfoFUCHSIA, _SemaphoreGetZirconHandleInfoFUCHSIA, _PhysicalDeviceExternalFenceInfo, ExternalFenceProperties, _ExportFenceCreateInfo, _ImportFenceWin32HandleInfoKHR, _ExportFenceWin32HandleInfoKHR, _FenceGetWin32HandleInfoKHR, _ImportFenceFdInfoKHR, _FenceGetFdInfoKHR, _PhysicalDeviceMultiviewFeatures, PhysicalDeviceMultiviewProperties, _RenderPassMultiviewCreateInfo, SurfaceCapabilities2EXT, _DisplayPowerInfoEXT, _DeviceEventInfoEXT, _DisplayEventInfoEXT, _SwapchainCounterCreateInfoEXT, PhysicalDeviceGroupProperties, _MemoryAllocateFlagsInfo, _BindBufferMemoryInfo, _BindBufferMemoryDeviceGroupInfo, _BindImageMemoryInfo, _BindImageMemoryDeviceGroupInfo, _DeviceGroupRenderPassBeginInfo, _DeviceGroupCommandBufferBeginInfo, _DeviceGroupSubmitInfo, _DeviceGroupBindSparseInfo, DeviceGroupPresentCapabilitiesKHR, _ImageSwapchainCreateInfoKHR, _BindImageMemorySwapchainInfoKHR, _AcquireNextImageInfoKHR, _DeviceGroupPresentInfoKHR, _DeviceGroupDeviceCreateInfo, _DeviceGroupSwapchainCreateInfoKHR, _DescriptorUpdateTemplateEntry, _DescriptorUpdateTemplateCreateInfo, _XYColorEXT, _HdrMetadataEXT, DisplayNativeHdrSurfaceCapabilitiesAMD, _SwapchainDisplayNativeHdrCreateInfoAMD, RefreshCycleDurationGOOGLE, PastPresentationTimingGOOGLE, _PresentTimesInfoGOOGLE, _PresentTimeGOOGLE, _IOSSurfaceCreateInfoMVK, _MacOSSurfaceCreateInfoMVK, _MetalSurfaceCreateInfoEXT, _ViewportWScalingNV, _PipelineViewportWScalingStateCreateInfoNV, _ViewportSwizzleNV, _PipelineViewportSwizzleStateCreateInfoNV, PhysicalDeviceDiscardRectanglePropertiesEXT, _PipelineDiscardRectangleStateCreateInfoEXT, PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, _InputAttachmentAspectReference, _RenderPassInputAttachmentAspectCreateInfo, _PhysicalDeviceSurfaceInfo2KHR, SurfaceCapabilities2KHR, SurfaceFormat2KHR, DisplayProperties2KHR, DisplayPlaneProperties2KHR, DisplayModeProperties2KHR, _DisplayPlaneInfo2KHR, DisplayPlaneCapabilities2KHR, SharedPresentSurfaceCapabilitiesKHR, _PhysicalDevice16BitStorageFeatures, PhysicalDeviceSubgroupProperties, _PhysicalDeviceShaderSubgroupExtendedTypesFeatures, _BufferMemoryRequirementsInfo2, _ImageMemoryRequirementsInfo2, _ImageSparseMemoryRequirementsInfo2, MemoryRequirements2, SparseImageMemoryRequirements2, PhysicalDevicePointClippingProperties, MemoryDedicatedRequirements, _MemoryDedicatedAllocateInfo, _ImageViewUsageCreateInfo, _PipelineTessellationDomainOriginStateCreateInfo, _SamplerYcbcrConversionInfo, _SamplerYcbcrConversionCreateInfo, _BindImagePlaneMemoryInfo, _ImagePlaneMemoryRequirementsInfo, _PhysicalDeviceSamplerYcbcrConversionFeatures, SamplerYcbcrConversionImageFormatProperties, TextureLODGatherFormatPropertiesAMD, _ConditionalRenderingBeginInfoEXT, _ProtectedSubmitInfo, _PhysicalDeviceProtectedMemoryFeatures, PhysicalDeviceProtectedMemoryProperties, _DeviceQueueInfo2, _PipelineCoverageToColorStateCreateInfoNV, PhysicalDeviceSamplerFilterMinmaxProperties, _SampleLocationEXT, _SampleLocationsInfoEXT, _AttachmentSampleLocationsEXT, _SubpassSampleLocationsEXT, _RenderPassSampleLocationsBeginInfoEXT, _PipelineSampleLocationsStateCreateInfoEXT, PhysicalDeviceSampleLocationsPropertiesEXT, MultisamplePropertiesEXT, _SamplerReductionModeCreateInfo, _PhysicalDeviceBlendOperationAdvancedFeaturesEXT, PhysicalDeviceBlendOperationAdvancedPropertiesEXT, _PipelineColorBlendAdvancedStateCreateInfoEXT, _PhysicalDeviceInlineUniformBlockFeaturesEXT, PhysicalDeviceInlineUniformBlockPropertiesEXT, _WriteDescriptorSetInlineUniformBlockEXT, _DescriptorPoolInlineUniformBlockCreateInfoEXT, _PipelineCoverageModulationStateCreateInfoNV, _ImageFormatListCreateInfo, _ValidationCacheCreateInfoEXT, _ShaderModuleValidationCacheCreateInfoEXT, PhysicalDeviceMaintenance3Properties, DescriptorSetLayoutSupport, _PhysicalDeviceShaderDrawParametersFeatures, _PhysicalDeviceShaderFloat16Int8Features, PhysicalDeviceFloatControlsProperties, _PhysicalDeviceHostQueryResetFeatures, ShaderResourceUsageAMD, ShaderStatisticsInfoAMD, _DeviceQueueGlobalPriorityCreateInfoEXT, _DebugUtilsObjectNameInfoEXT, _DebugUtilsObjectTagInfoEXT, _DebugUtilsLabelEXT, _DebugUtilsMessengerCreateInfoEXT, _DebugUtilsMessengerCallbackDataEXT, _PhysicalDeviceDeviceMemoryReportFeaturesEXT, _DeviceDeviceMemoryReportCreateInfoEXT, DeviceMemoryReportCallbackDataEXT, _ImportMemoryHostPointerInfoEXT, MemoryHostPointerPropertiesEXT, PhysicalDeviceExternalMemoryHostPropertiesEXT, PhysicalDeviceConservativeRasterizationPropertiesEXT, _CalibratedTimestampInfoEXT, PhysicalDeviceShaderCorePropertiesAMD, PhysicalDeviceShaderCoreProperties2AMD, _PipelineRasterizationConservativeStateCreateInfoEXT, _PhysicalDeviceDescriptorIndexingFeatures, PhysicalDeviceDescriptorIndexingProperties, _DescriptorSetLayoutBindingFlagsCreateInfo, _DescriptorSetVariableDescriptorCountAllocateInfo, DescriptorSetVariableDescriptorCountLayoutSupport, _AttachmentDescription2, _AttachmentReference2, _SubpassDescription2, _SubpassDependency2, _RenderPassCreateInfo2, _SubpassBeginInfo, _SubpassEndInfo, _PhysicalDeviceTimelineSemaphoreFeatures, PhysicalDeviceTimelineSemaphoreProperties, _SemaphoreTypeCreateInfo, _TimelineSemaphoreSubmitInfo, _SemaphoreWaitInfo, _SemaphoreSignalInfo, _VertexInputBindingDivisorDescriptionEXT, _PipelineVertexInputDivisorStateCreateInfoEXT, PhysicalDeviceVertexAttributeDivisorPropertiesEXT, PhysicalDevicePCIBusInfoPropertiesEXT, _ImportAndroidHardwareBufferInfoANDROID, AndroidHardwareBufferUsageANDROID, AndroidHardwareBufferPropertiesANDROID, _MemoryGetAndroidHardwareBufferInfoANDROID, AndroidHardwareBufferFormatPropertiesANDROID, _CommandBufferInheritanceConditionalRenderingInfoEXT, _ExternalFormatANDROID, _PhysicalDevice8BitStorageFeatures, _PhysicalDeviceConditionalRenderingFeaturesEXT, _PhysicalDeviceVulkanMemoryModelFeatures, _PhysicalDeviceShaderAtomicInt64Features, _PhysicalDeviceShaderAtomicFloatFeaturesEXT, _PhysicalDeviceVertexAttributeDivisorFeaturesEXT, QueueFamilyCheckpointPropertiesNV, CheckpointDataNV, PhysicalDeviceDepthStencilResolveProperties, _SubpassDescriptionDepthStencilResolve, _ImageViewASTCDecodeModeEXT, _PhysicalDeviceASTCDecodeFeaturesEXT, _PhysicalDeviceTransformFeedbackFeaturesEXT, PhysicalDeviceTransformFeedbackPropertiesEXT, _PipelineRasterizationStateStreamCreateInfoEXT, _PhysicalDeviceRepresentativeFragmentTestFeaturesNV, _PipelineRepresentativeFragmentTestStateCreateInfoNV, _PhysicalDeviceExclusiveScissorFeaturesNV, _PipelineViewportExclusiveScissorStateCreateInfoNV, _PhysicalDeviceCornerSampledImageFeaturesNV, _PhysicalDeviceComputeShaderDerivativesFeaturesNV, _PhysicalDeviceFragmentShaderBarycentricFeaturesNV, _PhysicalDeviceShaderImageFootprintFeaturesNV, _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, _ShadingRatePaletteNV, _PipelineViewportShadingRateImageStateCreateInfoNV, _PhysicalDeviceShadingRateImageFeaturesNV, PhysicalDeviceShadingRateImagePropertiesNV, _CoarseSampleLocationNV, _CoarseSampleOrderCustomNV, _PipelineViewportCoarseSampleOrderStateCreateInfoNV, _PhysicalDeviceMeshShaderFeaturesNV, PhysicalDeviceMeshShaderPropertiesNV, _DrawMeshTasksIndirectCommandNV, _RayTracingShaderGroupCreateInfoNV, _RayTracingShaderGroupCreateInfoKHR, _RayTracingPipelineCreateInfoNV, _RayTracingPipelineCreateInfoKHR, _GeometryTrianglesNV, _GeometryAABBNV, _GeometryDataNV, _GeometryNV, _AccelerationStructureInfoNV, _AccelerationStructureCreateInfoNV, _BindAccelerationStructureMemoryInfoNV, _WriteDescriptorSetAccelerationStructureKHR, _WriteDescriptorSetAccelerationStructureNV, _AccelerationStructureMemoryRequirementsInfoNV, _PhysicalDeviceAccelerationStructureFeaturesKHR, _PhysicalDeviceRayTracingPipelineFeaturesKHR, _PhysicalDeviceRayQueryFeaturesKHR, PhysicalDeviceAccelerationStructurePropertiesKHR, PhysicalDeviceRayTracingPipelinePropertiesKHR, PhysicalDeviceRayTracingPropertiesNV, _StridedDeviceAddressRegionKHR, _TraceRaysIndirectCommandKHR, DrmFormatModifierPropertiesListEXT, DrmFormatModifierPropertiesEXT, _PhysicalDeviceImageDrmFormatModifierInfoEXT, _ImageDrmFormatModifierListCreateInfoEXT, _ImageDrmFormatModifierExplicitCreateInfoEXT, ImageDrmFormatModifierPropertiesEXT, _ImageStencilUsageCreateInfo, _DeviceMemoryOverallocationCreateInfoAMD, _PhysicalDeviceFragmentDensityMapFeaturesEXT, _PhysicalDeviceFragmentDensityMap2FeaturesEXT, PhysicalDeviceFragmentDensityMapPropertiesEXT, PhysicalDeviceFragmentDensityMap2PropertiesEXT, _RenderPassFragmentDensityMapCreateInfoEXT, _PhysicalDeviceScalarBlockLayoutFeatures, _SurfaceProtectedCapabilitiesKHR, _PhysicalDeviceUniformBufferStandardLayoutFeatures, _PhysicalDeviceDepthClipEnableFeaturesEXT, _PipelineRasterizationDepthClipStateCreateInfoEXT, PhysicalDeviceMemoryBudgetPropertiesEXT, _PhysicalDeviceMemoryPriorityFeaturesEXT, _MemoryPriorityAllocateInfoEXT, _PhysicalDeviceBufferDeviceAddressFeatures, _PhysicalDeviceBufferDeviceAddressFeaturesEXT, _BufferDeviceAddressInfo, _BufferOpaqueCaptureAddressCreateInfo, _BufferDeviceAddressCreateInfoEXT, _PhysicalDeviceImageViewImageFormatInfoEXT, FilterCubicImageViewImageFormatPropertiesEXT, _PhysicalDeviceImagelessFramebufferFeatures, _FramebufferAttachmentsCreateInfo, _FramebufferAttachmentImageInfo, _RenderPassAttachmentBeginInfo, _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, _PhysicalDeviceCooperativeMatrixFeaturesNV, PhysicalDeviceCooperativeMatrixPropertiesNV, _CooperativeMatrixPropertiesNV, _PhysicalDeviceYcbcrImageArraysFeaturesEXT, _ImageViewHandleInfoNVX, ImageViewAddressPropertiesNVX, _PresentFrameTokenGGP, PipelineCreationFeedbackEXT, _PipelineCreationFeedbackCreateInfoEXT, _SurfaceFullScreenExclusiveInfoEXT, _SurfaceFullScreenExclusiveWin32InfoEXT, _SurfaceCapabilitiesFullScreenExclusiveEXT, _PhysicalDevicePerformanceQueryFeaturesKHR, PhysicalDevicePerformanceQueryPropertiesKHR, PerformanceCounterKHR, PerformanceCounterDescriptionKHR, _QueryPoolPerformanceCreateInfoKHR, _AcquireProfilingLockInfoKHR, _PerformanceQuerySubmitInfoKHR, _HeadlessSurfaceCreateInfoEXT, _PhysicalDeviceCoverageReductionModeFeaturesNV, _PipelineCoverageReductionStateCreateInfoNV, FramebufferMixedSamplesCombinationNV, _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, _PerformanceValueINTEL, _InitializePerformanceApiInfoINTEL, _QueryPoolPerformanceQueryCreateInfoINTEL, _PerformanceMarkerInfoINTEL, _PerformanceStreamMarkerInfoINTEL, _PerformanceOverrideInfoINTEL, _PerformanceConfigurationAcquireInfoINTEL, _PhysicalDeviceShaderClockFeaturesKHR, _PhysicalDeviceIndexTypeUint8FeaturesEXT, PhysicalDeviceShaderSMBuiltinsPropertiesNV, _PhysicalDeviceShaderSMBuiltinsFeaturesNV, _PhysicalDeviceFragmentShaderInterlockFeaturesEXT, _PhysicalDeviceSeparateDepthStencilLayoutsFeatures, _AttachmentReferenceStencilLayout, _AttachmentDescriptionStencilLayout, _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR, _PipelineInfoKHR, PipelineExecutablePropertiesKHR, _PipelineExecutableInfoKHR, PipelineExecutableStatisticKHR, PipelineExecutableInternalRepresentationKHR, _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, _PhysicalDeviceTexelBufferAlignmentFeaturesEXT, PhysicalDeviceTexelBufferAlignmentPropertiesEXT, _PhysicalDeviceSubgroupSizeControlFeaturesEXT, PhysicalDeviceSubgroupSizeControlPropertiesEXT, PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, _MemoryOpaqueCaptureAddressAllocateInfo, _DeviceMemoryOpaqueCaptureAddressInfo, _PhysicalDeviceLineRasterizationFeaturesEXT, PhysicalDeviceLineRasterizationPropertiesEXT, _PipelineRasterizationLineStateCreateInfoEXT, _PhysicalDevicePipelineCreationCacheControlFeaturesEXT, _PhysicalDeviceVulkan11Features, PhysicalDeviceVulkan11Properties, _PhysicalDeviceVulkan12Features, PhysicalDeviceVulkan12Properties, _PipelineCompilerControlCreateInfoAMD, _PhysicalDeviceCoherentMemoryFeaturesAMD, PhysicalDeviceToolPropertiesEXT, _SamplerCustomBorderColorCreateInfoEXT, PhysicalDeviceCustomBorderColorPropertiesEXT, _PhysicalDeviceCustomBorderColorFeaturesEXT, _AccelerationStructureGeometryTrianglesDataKHR, _AccelerationStructureGeometryAabbsDataKHR, _AccelerationStructureGeometryInstancesDataKHR, _AccelerationStructureGeometryKHR, _AccelerationStructureBuildGeometryInfoKHR, _AccelerationStructureBuildRangeInfoKHR, _AccelerationStructureCreateInfoKHR, _AabbPositionsKHR, _TransformMatrixKHR, _AccelerationStructureInstanceKHR, _AccelerationStructureDeviceAddressInfoKHR, _AccelerationStructureVersionInfoKHR, _CopyAccelerationStructureInfoKHR, _CopyAccelerationStructureToMemoryInfoKHR, _CopyMemoryToAccelerationStructureInfoKHR, _RayTracingPipelineInterfaceCreateInfoKHR, _PipelineLibraryCreateInfoKHR, _PhysicalDeviceExtendedDynamicStateFeaturesEXT, _PhysicalDeviceExtendedDynamicState2FeaturesEXT, _RenderPassTransformBeginInfoQCOM, _CopyCommandTransformInfoQCOM, _CommandBufferInheritanceRenderPassTransformInfoQCOM, _PhysicalDeviceDiagnosticsConfigFeaturesNV, _DeviceDiagnosticsConfigCreateInfoNV, _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR, _PhysicalDeviceRobustness2FeaturesEXT, PhysicalDeviceRobustness2PropertiesEXT, _PhysicalDeviceImageRobustnessFeaturesEXT, _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, _PhysicalDevicePortabilitySubsetFeaturesKHR, _PhysicalDevicePortabilitySubsetPropertiesKHR, _PhysicalDevice4444FormatsFeaturesEXT, _BufferCopy2KHR, _ImageCopy2KHR, _ImageBlit2KHR, _BufferImageCopy2KHR, _ImageResolve2KHR, _CopyBufferInfo2KHR, _CopyImageInfo2KHR, _BlitImageInfo2KHR, _CopyBufferToImageInfo2KHR, _CopyImageToBufferInfo2KHR, _ResolveImageInfo2KHR, _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT, _FragmentShadingRateAttachmentInfoKHR, _PipelineFragmentShadingRateStateCreateInfoKHR, _PhysicalDeviceFragmentShadingRateFeaturesKHR, PhysicalDeviceFragmentShadingRatePropertiesKHR, PhysicalDeviceFragmentShadingRateKHR, _PhysicalDeviceShaderTerminateInvocationFeaturesKHR, _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV, _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV, _PipelineFragmentShadingRateEnumStateCreateInfoNV, _AccelerationStructureBuildSizesInfoKHR, _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE, _MutableDescriptorTypeListVALVE, _MutableDescriptorTypeCreateInfoVALVE, _PhysicalDeviceVertexInputDynamicStateFeaturesEXT, _VertexInputBindingDescription2EXT, _VertexInputAttributeDescription2EXT, _PhysicalDeviceColorWriteEnableFeaturesEXT, _PipelineColorWriteCreateInfoEXT, _MemoryBarrier2KHR, _ImageMemoryBarrier2KHR, _BufferMemoryBarrier2KHR, _DependencyInfoKHR, _SemaphoreSubmitInfoKHR, _CommandBufferSubmitInfoKHR, _SubmitInfo2KHR, QueueFamilyCheckpointProperties2NV, CheckpointData2NV, _PhysicalDeviceSynchronization2FeaturesKHR, _VideoQueueFamilyProperties2KHR, _VideoProfilesKHR, PhysicalDeviceVideoFormatInfoKHR, VideoFormatPropertiesKHR, _VideoProfileKHR, VideoCapabilitiesKHR, _VideoGetMemoryPropertiesKHR, _VideoBindMemoryKHR, _VideoPictureResourceKHR, _VideoReferenceSlotKHR, _VideoDecodeInfoKHR, _VideoDecodeH264ProfileEXT, VideoDecodeH264CapabilitiesEXT, _VideoDecodeH264SessionCreateInfoEXT, _VideoDecodeH264SessionParametersAddInfoEXT, _VideoDecodeH264SessionParametersCreateInfoEXT, _VideoDecodeH264PictureInfoEXT, _VideoDecodeH264DpbSlotInfoEXT, _VideoDecodeH264MvcEXT, _VideoDecodeH265ProfileEXT, VideoDecodeH265CapabilitiesEXT, _VideoDecodeH265SessionCreateInfoEXT, _VideoDecodeH265SessionParametersAddInfoEXT, _VideoDecodeH265SessionParametersCreateInfoEXT, _VideoDecodeH265PictureInfoEXT, _VideoDecodeH265DpbSlotInfoEXT, _VideoSessionCreateInfoKHR, _VideoSessionParametersCreateInfoKHR, _VideoSessionParametersUpdateInfoKHR, _VideoBeginCodingInfoKHR, _VideoEndCodingInfoKHR, _VideoCodingControlInfoKHR, _VideoEncodeInfoKHR, _VideoEncodeRateControlInfoKHR, _VideoEncodeH264CapabilitiesEXT, _VideoEncodeH264SessionCreateInfoEXT, _VideoEncodeH264SessionParametersAddInfoEXT, _VideoEncodeH264SessionParametersCreateInfoEXT, _VideoEncodeH264DpbSlotInfoEXT, _VideoEncodeH264VclFrameInfoEXT, _VideoEncodeH264EmitPictureParametersEXT, _VideoEncodeH264ProfileEXT, _VideoEncodeH264NaluSliceEXT, _PhysicalDeviceInheritedViewportScissorFeaturesNV, _CommandBufferInheritanceViewportScissorInfoNV, _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, _PhysicalDeviceProvokingVertexFeaturesEXT, PhysicalDeviceProvokingVertexPropertiesEXT, _PipelineRasterizationProvokingVertexStateCreateInfoEXT, create_instance, destroy_instance, enumerate_physical_devices, get_device_proc_addr, get_instance_proc_addr, get_physical_device_properties, get_physical_device_queue_family_properties, get_physical_device_memory_properties, get_physical_device_features, get_physical_device_format_properties, get_physical_device_image_format_properties, create_device, destroy_device, enumerate_instance_version, enumerate_instance_layer_properties, enumerate_instance_extension_properties, enumerate_device_layer_properties, enumerate_device_extension_properties, get_device_queue, queue_submit, queue_wait_idle, device_wait_idle, allocate_memory, free_memory, map_memory, unmap_memory, flush_mapped_memory_ranges, invalidate_mapped_memory_ranges, get_device_memory_commitment, get_buffer_memory_requirements, bind_buffer_memory, get_image_memory_requirements, bind_image_memory, get_image_sparse_memory_requirements, get_physical_device_sparse_image_format_properties, queue_bind_sparse, create_fence, destroy_fence, reset_fences, get_fence_status, wait_for_fences, create_semaphore, destroy_semaphore, create_event, destroy_event, get_event_status, set_event, reset_event, create_query_pool, destroy_query_pool, get_query_pool_results, reset_query_pool, create_buffer, destroy_buffer, create_buffer_view, destroy_buffer_view, create_image, destroy_image, get_image_subresource_layout, create_image_view, destroy_image_view, create_shader_module, destroy_shader_module, create_pipeline_cache, destroy_pipeline_cache, get_pipeline_cache_data, merge_pipeline_caches, create_graphics_pipelines, create_compute_pipelines, destroy_pipeline, create_pipeline_layout, destroy_pipeline_layout, create_sampler, destroy_sampler, create_descriptor_set_layout, destroy_descriptor_set_layout, create_descriptor_pool, destroy_descriptor_pool, reset_descriptor_pool, allocate_descriptor_sets, free_descriptor_sets, update_descriptor_sets, create_framebuffer, destroy_framebuffer, create_render_pass, destroy_render_pass, get_render_area_granularity, create_command_pool, destroy_command_pool, reset_command_pool, allocate_command_buffers, free_command_buffers, begin_command_buffer, end_command_buffer, reset_command_buffer, cmd_bind_pipeline, cmd_set_viewport, cmd_set_scissor, cmd_set_line_width, cmd_set_depth_bias, cmd_set_blend_constants, cmd_set_depth_bounds, cmd_set_stencil_compare_mask, cmd_set_stencil_write_mask, cmd_set_stencil_reference, cmd_bind_descriptor_sets, cmd_bind_index_buffer, cmd_bind_vertex_buffers, cmd_draw, cmd_draw_indexed, cmd_draw_indirect, cmd_draw_indexed_indirect, cmd_dispatch, cmd_dispatch_indirect, cmd_copy_buffer, cmd_copy_image, cmd_blit_image, cmd_copy_buffer_to_image, cmd_copy_image_to_buffer, cmd_update_buffer, cmd_fill_buffer, cmd_clear_color_image, cmd_clear_depth_stencil_image, cmd_clear_attachments, cmd_resolve_image, cmd_set_event, cmd_reset_event, cmd_wait_events, cmd_pipeline_barrier, cmd_begin_query, cmd_end_query, cmd_begin_conditional_rendering_ext, cmd_end_conditional_rendering_ext, cmd_reset_query_pool, cmd_write_timestamp, cmd_copy_query_pool_results, cmd_push_constants, cmd_begin_render_pass, cmd_next_subpass, cmd_end_render_pass, cmd_execute_commands, create_android_surface_khr, get_physical_device_display_properties_khr, get_physical_device_display_plane_properties_khr, get_display_plane_supported_displays_khr, get_display_mode_properties_khr, create_display_mode_khr, get_display_plane_capabilities_khr, create_display_plane_surface_khr, create_shared_swapchains_khr, destroy_surface_khr, get_physical_device_surface_support_khr, get_physical_device_surface_capabilities_khr, get_physical_device_surface_formats_khr, get_physical_device_surface_present_modes_khr, create_swapchain_khr, destroy_swapchain_khr, get_swapchain_images_khr, acquire_next_image_khr, queue_present_khr, create_vi_surface_nn, create_wayland_surface_khr, get_physical_device_wayland_presentation_support_khr, create_win_32_surface_khr, get_physical_device_win_32_presentation_support_khr, create_xlib_surface_khr, get_physical_device_xlib_presentation_support_khr, create_xcb_surface_khr, get_physical_device_xcb_presentation_support_khr, create_direct_fb_surface_ext, get_physical_device_direct_fb_presentation_support_ext, create_image_pipe_surface_fuchsia, create_stream_descriptor_surface_ggp, create_screen_surface_qnx, get_physical_device_screen_presentation_support_qnx, create_debug_report_callback_ext, destroy_debug_report_callback_ext, debug_report_message_ext, debug_marker_set_object_name_ext, debug_marker_set_object_tag_ext, cmd_debug_marker_begin_ext, cmd_debug_marker_end_ext, cmd_debug_marker_insert_ext, get_physical_device_external_image_format_properties_nv, get_memory_win_32_handle_nv, cmd_execute_generated_commands_nv, cmd_preprocess_generated_commands_nv, cmd_bind_pipeline_shader_group_nv, get_generated_commands_memory_requirements_nv, create_indirect_commands_layout_nv, destroy_indirect_commands_layout_nv, get_physical_device_features_2, get_physical_device_properties_2, get_physical_device_format_properties_2, get_physical_device_image_format_properties_2, get_physical_device_queue_family_properties_2, get_physical_device_memory_properties_2, get_physical_device_sparse_image_format_properties_2, cmd_push_descriptor_set_khr, trim_command_pool, get_physical_device_external_buffer_properties, get_memory_win_32_handle_khr, get_memory_win_32_handle_properties_khr, get_memory_fd_khr, get_memory_fd_properties_khr, get_memory_zircon_handle_fuchsia, get_memory_zircon_handle_properties_fuchsia, get_physical_device_external_semaphore_properties, get_semaphore_win_32_handle_khr, import_semaphore_win_32_handle_khr, get_semaphore_fd_khr, import_semaphore_fd_khr, get_semaphore_zircon_handle_fuchsia, import_semaphore_zircon_handle_fuchsia, get_physical_device_external_fence_properties, get_fence_win_32_handle_khr, import_fence_win_32_handle_khr, get_fence_fd_khr, import_fence_fd_khr, release_display_ext, acquire_xlib_display_ext, get_rand_r_output_display_ext, acquire_winrt_display_nv, get_winrt_display_nv, display_power_control_ext, register_device_event_ext, register_display_event_ext, get_swapchain_counter_ext, get_physical_device_surface_capabilities_2_ext, enumerate_physical_device_groups, get_device_group_peer_memory_features, bind_buffer_memory_2, bind_image_memory_2, cmd_set_device_mask, get_device_group_present_capabilities_khr, get_device_group_surface_present_modes_khr, acquire_next_image_2_khr, cmd_dispatch_base, get_physical_device_present_rectangles_khr, create_descriptor_update_template, destroy_descriptor_update_template, update_descriptor_set_with_template, cmd_push_descriptor_set_with_template_khr, set_hdr_metadata_ext, get_swapchain_status_khr, get_refresh_cycle_duration_google, get_past_presentation_timing_google, create_ios_surface_mvk, create_mac_os_surface_mvk, create_metal_surface_ext, cmd_set_viewport_w_scaling_nv, cmd_set_discard_rectangle_ext, cmd_set_sample_locations_ext, get_physical_device_multisample_properties_ext, get_physical_device_surface_capabilities_2_khr, get_physical_device_surface_formats_2_khr, get_physical_device_display_properties_2_khr, get_physical_device_display_plane_properties_2_khr, get_display_mode_properties_2_khr, get_display_plane_capabilities_2_khr, get_buffer_memory_requirements_2, get_image_memory_requirements_2, get_image_sparse_memory_requirements_2, create_sampler_ycbcr_conversion, destroy_sampler_ycbcr_conversion, get_device_queue_2, create_validation_cache_ext, destroy_validation_cache_ext, get_validation_cache_data_ext, merge_validation_caches_ext, get_descriptor_set_layout_support, get_shader_info_amd, set_local_dimming_amd, get_physical_device_calibrateable_time_domains_ext, get_calibrated_timestamps_ext, set_debug_utils_object_name_ext, set_debug_utils_object_tag_ext, queue_begin_debug_utils_label_ext, queue_end_debug_utils_label_ext, queue_insert_debug_utils_label_ext, cmd_begin_debug_utils_label_ext, cmd_end_debug_utils_label_ext, cmd_insert_debug_utils_label_ext, create_debug_utils_messenger_ext, destroy_debug_utils_messenger_ext, submit_debug_utils_message_ext, get_memory_host_pointer_properties_ext, cmd_write_buffer_marker_amd, create_render_pass_2, cmd_begin_render_pass_2, cmd_next_subpass_2, cmd_end_render_pass_2, get_semaphore_counter_value, wait_semaphores, signal_semaphore, get_android_hardware_buffer_properties_android, get_memory_android_hardware_buffer_android, cmd_draw_indirect_count, cmd_draw_indexed_indirect_count, cmd_set_checkpoint_nv, get_queue_checkpoint_data_nv, cmd_bind_transform_feedback_buffers_ext, cmd_begin_transform_feedback_ext, cmd_end_transform_feedback_ext, cmd_begin_query_indexed_ext, cmd_end_query_indexed_ext, cmd_draw_indirect_byte_count_ext, cmd_set_exclusive_scissor_nv, cmd_bind_shading_rate_image_nv, cmd_set_viewport_shading_rate_palette_nv, cmd_set_coarse_sample_order_nv, cmd_draw_mesh_tasks_nv, cmd_draw_mesh_tasks_indirect_nv, cmd_draw_mesh_tasks_indirect_count_nv, compile_deferred_nv, create_acceleration_structure_nv, destroy_acceleration_structure_khr, destroy_acceleration_structure_nv, get_acceleration_structure_memory_requirements_nv, bind_acceleration_structure_memory_nv, cmd_copy_acceleration_structure_nv, cmd_copy_acceleration_structure_khr, copy_acceleration_structure_khr, cmd_copy_acceleration_structure_to_memory_khr, copy_acceleration_structure_to_memory_khr, cmd_copy_memory_to_acceleration_structure_khr, copy_memory_to_acceleration_structure_khr, cmd_write_acceleration_structures_properties_khr, cmd_write_acceleration_structures_properties_nv, cmd_build_acceleration_structure_nv, write_acceleration_structures_properties_khr, cmd_trace_rays_khr, cmd_trace_rays_nv, get_ray_tracing_shader_group_handles_khr, get_ray_tracing_capture_replay_shader_group_handles_khr, get_acceleration_structure_handle_nv, create_ray_tracing_pipelines_nv, create_ray_tracing_pipelines_khr, get_physical_device_cooperative_matrix_properties_nv, cmd_trace_rays_indirect_khr, get_device_acceleration_structure_compatibility_khr, get_ray_tracing_shader_group_stack_size_khr, cmd_set_ray_tracing_pipeline_stack_size_khr, get_image_view_handle_nvx, get_image_view_address_nvx, get_physical_device_surface_present_modes_2_ext, get_device_group_surface_present_modes_2_ext, acquire_full_screen_exclusive_mode_ext, release_full_screen_exclusive_mode_ext, enumerate_physical_device_queue_family_performance_query_counters_khr, get_physical_device_queue_family_performance_query_passes_khr, acquire_profiling_lock_khr, release_profiling_lock_khr, get_image_drm_format_modifier_properties_ext, get_buffer_opaque_capture_address, get_buffer_device_address, create_headless_surface_ext, get_physical_device_supported_framebuffer_mixed_samples_combinations_nv, initialize_performance_api_intel, uninitialize_performance_api_intel, cmd_set_performance_marker_intel, cmd_set_performance_stream_marker_intel, cmd_set_performance_override_intel, acquire_performance_configuration_intel, release_performance_configuration_intel, queue_set_performance_configuration_intel, get_performance_parameter_intel, get_device_memory_opaque_capture_address, get_pipeline_executable_properties_khr, get_pipeline_executable_statistics_khr, get_pipeline_executable_internal_representations_khr, cmd_set_line_stipple_ext, get_physical_device_tool_properties_ext, create_acceleration_structure_khr, cmd_build_acceleration_structures_khr, cmd_build_acceleration_structures_indirect_khr, build_acceleration_structures_khr, get_acceleration_structure_device_address_khr, create_deferred_operation_khr, destroy_deferred_operation_khr, get_deferred_operation_max_concurrency_khr, get_deferred_operation_result_khr, deferred_operation_join_khr, cmd_set_cull_mode_ext, cmd_set_front_face_ext, cmd_set_primitive_topology_ext, cmd_set_viewport_with_count_ext, cmd_set_scissor_with_count_ext, cmd_bind_vertex_buffers_2_ext, cmd_set_depth_test_enable_ext, cmd_set_depth_write_enable_ext, cmd_set_depth_compare_op_ext, cmd_set_depth_bounds_test_enable_ext, cmd_set_stencil_test_enable_ext, cmd_set_stencil_op_ext, cmd_set_patch_control_points_ext, cmd_set_rasterizer_discard_enable_ext, cmd_set_depth_bias_enable_ext, cmd_set_logic_op_ext, cmd_set_primitive_restart_enable_ext, create_private_data_slot_ext, destroy_private_data_slot_ext, set_private_data_ext, get_private_data_ext, cmd_copy_buffer_2_khr, cmd_copy_image_2_khr, cmd_blit_image_2_khr, cmd_copy_buffer_to_image_2_khr, cmd_copy_image_to_buffer_2_khr, cmd_resolve_image_2_khr, cmd_set_fragment_shading_rate_khr, get_physical_device_fragment_shading_rates_khr, cmd_set_fragment_shading_rate_enum_nv, get_acceleration_structure_build_sizes_khr, cmd_set_vertex_input_ext, cmd_set_color_write_enable_ext, cmd_set_event_2_khr, cmd_reset_event_2_khr, cmd_wait_events_2_khr, cmd_pipeline_barrier_2_khr, queue_submit_2_khr, cmd_write_timestamp_2_khr, cmd_write_buffer_marker_2_amd, get_queue_checkpoint_data_2_nv, get_physical_device_video_capabilities_khr, get_physical_device_video_format_properties_khr, create_video_session_khr, destroy_video_session_khr, create_video_session_parameters_khr, update_video_session_parameters_khr, destroy_video_session_parameters_khr, get_video_session_memory_requirements_khr, bind_video_session_memory_khr, cmd_decode_video_khr, cmd_begin_video_coding_khr, cmd_control_video_coding_khr, cmd_end_video_coding_khr, cmd_encode_video_khr
