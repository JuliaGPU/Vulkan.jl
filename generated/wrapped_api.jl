"""
Represents any kind of wrapper structure that was generated from a Vulkan structure.
"""
abstract type VulkanStruct end

"""
Opaque handle referring to internal Vulkan data.
Finalizer registration is taken care of by constructors.
"""
abstract type Handle <: VulkanStruct end

"""
Represents a structure that will never be requested by API functions.
"""
abstract type ReturnedOnly <: VulkanStruct end

"""
Storage structure, used for preserving data that is in use by pointers.
"""
abstract type Bag end

struct BagEmpty <: Bag end

const EmptyBag = BagEmpty()

Base.cconvert(T::Type, x::VulkanStruct) = x
Base.cconvert(T::Type{<:Ptr}, x::AbstractArray{<:VulkanStruct}) = getproperty.(x, :vks)
Base.cconvert(T::Type{<:Ptr}, x::AbstractArray{<:Handle}) = getproperty.(x, :handle)
Base.cconvert(T::Type{<:Ptr}, x::VulkanStruct) = Ref(x.vks)
Base.cconvert(T::Type{<:Ptr}, x::Handle) = x

Base.unsafe_convert(T::Type, x::VulkanStruct) = x.vks
Base.unsafe_convert(T::Type{Ptr{Nothing}}, x::Handle) = x.handle

Base.broadcastable(x::VulkanStruct) = Ref(x) # indicate that VulkanStructs behave as scalars for broadcasting

"""
Julian constructor for VkBufferMemoryBarrier. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferMemoryBarrier(
    next,
    src_access_mask,
    dst_access_mask,
    src_queue_family_index,
    dst_queue_family_index,
    buffer,
    offset,
    size,
)
    pNext = unsafe_pointer(next)
    api.VkBufferMemoryBarrier(
        VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
        pNext,
        src_access_mask,
        dst_access_mask,
        src_queue_family_index,
        dst_queue_family_index,
        buffer,
        offset,
        size,
    )
end

"""
Julian constructor for VkImageMemoryBarrier. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageMemoryBarrier(
    next,
    src_access_mask,
    dst_access_mask,
    old_layout,
    new_layout,
    src_queue_family_index,
    dst_queue_family_index,
    image,
    subresource_range,
)
    pNext = unsafe_pointer(next)
    api.VkImageMemoryBarrier(
        VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
        pNext,
        src_access_mask,
        dst_access_mask,
        old_layout,
        new_layout,
        src_queue_family_index,
        dst_queue_family_index,
        image,
        subresource_range,
    )
end

"""
Julian constructor for VkMemoryBarrier. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryBarrier(next, src_access_mask, dst_access_mask)
    pNext = unsafe_pointer(next)
    api.VkMemoryBarrier(
        VK_STRUCTURE_TYPE_MEMORY_BARRIER,
        pNext,
        src_access_mask,
        dst_access_mask,
    )
end

"""
Julian constructor for VkApplicationInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkApplicationInfo(
    next,
    application_name,
    application_version,
    engine_name,
    engine_version,
    api_version,
)
    pNext = unsafe_pointer(next)
    pApplicationName = unsafe_pointer(application_name)
    applicationVersion = to_vk(UInt32, application_version)
    pEngineName = unsafe_pointer(engine_name)
    engineVersion = to_vk(UInt32, engine_version)
    apiVersion = to_vk(UInt32, api_version)
    api.VkApplicationInfo(
        VK_STRUCTURE_TYPE_APPLICATION_INFO,
        pNext,
        pApplicationName,
        applicationVersion,
        pEngineName,
        engineVersion,
        apiVersion,
    )
end

"""
Julian constructor for VkInstanceCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkInstanceCreateInfo(
    next,
    flags,
    application_info,
    enabled_layer_names,
    enabled_extension_names,
)
    pNext = unsafe_pointer(next)
    pApplicationInfo = unsafe_pointer(application_info)
    _enabledLayerCount = pointer_length(enabled_layer_names)
    ppEnabledLayerNames = unsafe_pointer(enabled_layer_names)
    _enabledExtensionCount = pointer_length(enabled_extension_names)
    ppEnabledExtensionNames = unsafe_pointer(enabled_extension_names)
    api.VkInstanceCreateInfo(
        VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
        pNext,
        flags,
        pApplicationInfo,
        _enabledLayerCount,
        ppEnabledLayerNames,
        _enabledExtensionCount,
        ppEnabledExtensionNames,
    )
end

"""
Julian constructor for VkDeviceQueueCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceQueueCreateInfo(next, flags, queue_family_index, queue_priorities)
    pNext = unsafe_pointer(next)
    _queueCount = pointer_length(queue_priorities)
    pQueuePriorities = unsafe_pointer(queue_priorities)
    api.VkDeviceQueueCreateInfo(
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
        pNext,
        flags,
        queue_family_index,
        _queueCount,
        pQueuePriorities,
    )
end

"""
Julian constructor for VkDeviceCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceCreateInfo(
    next,
    flags,
    queue_create_infos,
    enabled_layer_names,
    enabled_extension_names,
    enabled_features,
)
    pNext = unsafe_pointer(next)
    _queueCreateInfoCount = pointer_length(queue_create_infos)
    pQueueCreateInfos = unsafe_pointer(queue_create_infos)
    _enabledLayerCount = pointer_length(enabled_layer_names)
    ppEnabledLayerNames = unsafe_pointer(enabled_layer_names)
    _enabledExtensionCount = pointer_length(enabled_extension_names)
    ppEnabledExtensionNames = unsafe_pointer(enabled_extension_names)
    pEnabledFeatures = unsafe_pointer(enabled_features)
    api.VkDeviceCreateInfo(
        VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
        pNext,
        flags,
        _queueCreateInfoCount,
        pQueueCreateInfos,
        _enabledLayerCount,
        ppEnabledLayerNames,
        _enabledExtensionCount,
        ppEnabledExtensionNames,
        pEnabledFeatures,
    )
end

"""
Julian constructor for VkSubmitInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubmitInfo(
    next,
    wait_semaphores,
    wait_dst_stage_mask,
    command_buffers,
    signal_semaphores,
)
    pNext = unsafe_pointer(next)
    _waitSemaphoreCount = pointer_length(wait_semaphores)
    pWaitSemaphores = unsafe_pointer(wait_semaphores)
    pWaitDstStageMask = unsafe_pointer(wait_dst_stage_mask)
    _commandBufferCount = pointer_length(command_buffers)
    pCommandBuffers = unsafe_pointer(command_buffers)
    _signalSemaphoreCount = pointer_length(signal_semaphores)
    pSignalSemaphores = unsafe_pointer(signal_semaphores)
    api.VkSubmitInfo(
        VK_STRUCTURE_TYPE_SUBMIT_INFO,
        pNext,
        _waitSemaphoreCount,
        pWaitSemaphores,
        pWaitDstStageMask,
        _commandBufferCount,
        pCommandBuffers,
        _signalSemaphoreCount,
        pSignalSemaphores,
    )
end

"""
Julian constructor for VkMappedMemoryRange. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMappedMemoryRange(next, memory, offset, size)
    pNext = unsafe_pointer(next)
    api.VkMappedMemoryRange(
        VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
        pNext,
        memory,
        offset,
        size,
    )
end

"""
Julian constructor for VkMemoryAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryAllocateInfo(next, allocation_size, memory_type_index)
    pNext = unsafe_pointer(next)
    api.VkMemoryAllocateInfo(
        VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
        pNext,
        allocation_size,
        memory_type_index,
    )
end

"""
Julian constructor for VkSparseBufferMemoryBindInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSparseBufferMemoryBindInfo(buffer, binds)
    _bindCount = pointer_length(binds)
    pBinds = unsafe_pointer(binds)
    api.VkSparseBufferMemoryBindInfo(buffer, _bindCount, pBinds)
end

"""
Julian constructor for VkSparseImageOpaqueMemoryBindInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSparseImageOpaqueMemoryBindInfo(image, binds)
    _bindCount = pointer_length(binds)
    pBinds = unsafe_pointer(binds)
    api.VkSparseImageOpaqueMemoryBindInfo(image, _bindCount, pBinds)
end

"""
Julian constructor for VkSparseImageMemoryBindInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSparseImageMemoryBindInfo(image, binds)
    _bindCount = pointer_length(binds)
    pBinds = unsafe_pointer(binds)
    api.VkSparseImageMemoryBindInfo(image, _bindCount, pBinds)
end

"""
Julian constructor for VkBindSparseInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindSparseInfo(
    next,
    wait_semaphores,
    buffer_binds,
    image_opaque_binds,
    image_binds,
    signal_semaphores,
)
    pNext = unsafe_pointer(next)
    _waitSemaphoreCount = pointer_length(wait_semaphores)
    pWaitSemaphores = unsafe_pointer(wait_semaphores)
    _bufferBindCount = pointer_length(buffer_binds)
    pBufferBinds = unsafe_pointer(buffer_binds)
    _imageOpaqueBindCount = pointer_length(image_opaque_binds)
    pImageOpaqueBinds = unsafe_pointer(image_opaque_binds)
    _imageBindCount = pointer_length(image_binds)
    pImageBinds = unsafe_pointer(image_binds)
    _signalSemaphoreCount = pointer_length(signal_semaphores)
    pSignalSemaphores = unsafe_pointer(signal_semaphores)
    api.VkBindSparseInfo(
        VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
        pNext,
        _waitSemaphoreCount,
        pWaitSemaphores,
        _bufferBindCount,
        pBufferBinds,
        _imageOpaqueBindCount,
        pImageOpaqueBinds,
        _imageBindCount,
        pImageBinds,
        _signalSemaphoreCount,
        pSignalSemaphores,
    )
end

"""
Julian constructor for VkFenceCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFenceCreateInfo(next, flags)
    pNext = unsafe_pointer(next)
    api.VkFenceCreateInfo(VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, pNext, flags)
end

"""
Julian constructor for VkSemaphoreCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreCreateInfo(next, flags)
    pNext = unsafe_pointer(next)
    api.VkSemaphoreCreateInfo(VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, pNext, flags)
end

"""
Julian constructor for VkEventCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkEventCreateInfo(next, flags)
    pNext = unsafe_pointer(next)
    api.VkEventCreateInfo(VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, pNext, flags)
end

"""
Julian constructor for VkQueryPoolCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkQueryPoolCreateInfo(
    next,
    flags,
    query_type,
    query_count,
    pipeline_statistics,
)
    pNext = unsafe_pointer(next)
    api.VkQueryPoolCreateInfo(
        VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
        pNext,
        flags,
        query_type,
        query_count,
        pipeline_statistics,
    )
end

"""
Julian constructor for VkBufferCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferCreateInfo(
    next,
    flags,
    size,
    usage,
    sharing_mode,
    queue_family_indices,
)
    pNext = unsafe_pointer(next)
    _queueFamilyIndexCount = pointer_length(queue_family_indices)
    pQueueFamilyIndices = unsafe_pointer(queue_family_indices)
    api.VkBufferCreateInfo(
        VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
        pNext,
        flags,
        size,
        usage,
        sharing_mode,
        _queueFamilyIndexCount,
        pQueueFamilyIndices,
    )
end

"""
Julian constructor for VkBufferViewCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferViewCreateInfo(next, flags, buffer, format, offset, range)
    pNext = unsafe_pointer(next)
    api.VkBufferViewCreateInfo(
        VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
        pNext,
        flags,
        buffer,
        format,
        offset,
        range,
    )
end

"""
Julian constructor for VkImageCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageCreateInfo(
    next,
    flags,
    image_type,
    format,
    extent,
    mip_levels,
    array_layers,
    samples,
    tiling,
    usage,
    sharing_mode,
    queue_family_indices,
    initial_layout,
)
    pNext = unsafe_pointer(next)
    _queueFamilyIndexCount = pointer_length(queue_family_indices)
    pQueueFamilyIndices = unsafe_pointer(queue_family_indices)
    api.VkImageCreateInfo(
        VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
        pNext,
        flags,
        image_type,
        format,
        extent,
        mip_levels,
        array_layers,
        samples,
        tiling,
        usage,
        sharing_mode,
        _queueFamilyIndexCount,
        pQueueFamilyIndices,
        initial_layout,
    )
end

"""
Julian constructor for VkImageViewCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageViewCreateInfo(
    next,
    flags,
    image,
    view_type,
    format,
    components,
    subresource_range,
)
    pNext = unsafe_pointer(next)
    api.VkImageViewCreateInfo(
        VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
        pNext,
        flags,
        image,
        view_type,
        format,
        components,
        subresource_range,
    )
end

"""
Julian constructor for VkShaderModuleCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkShaderModuleCreateInfo(next, flags, code_size, code)
    pNext = unsafe_pointer(next)
    pCode = unsafe_pointer(code)
    api.VkShaderModuleCreateInfo(
        VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
        pNext,
        flags,
        code_size,
        pCode,
    )
end

"""
Julian constructor for VkPipelineCacheCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCacheCreateInfo(next, flags, initial_data)
    pNext = unsafe_pointer(next)
    _initialDataSize = pointer_length(initial_data)
    pInitialData = unsafe_pointer(initial_data)
    api.VkPipelineCacheCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
        pNext,
        flags,
        _initialDataSize,
        pInitialData,
    )
end

"""
Julian constructor for VkSpecializationInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSpecializationInfo(map_entries, data)
    _mapEntryCount = pointer_length(map_entries)
    pMapEntries = unsafe_pointer(map_entries)
    _dataSize = pointer_length(data)
    pData = unsafe_pointer(data)
    api.VkSpecializationInfo(_mapEntryCount, pMapEntries, _dataSize, pData)
end

"""
Julian constructor for VkPipelineShaderStageCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineShaderStageCreateInfo(
    next,
    flags,
    stage,
    _module,
    name,
    specialization_info,
)
    pNext = unsafe_pointer(next)
    pName = unsafe_pointer(name)
    pSpecializationInfo = unsafe_pointer(specialization_info)
    api.VkPipelineShaderStageCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
        pNext,
        flags,
        stage,
        _module,
        pName,
        pSpecializationInfo,
    )
end

"""
Julian constructor for VkComputePipelineCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkComputePipelineCreateInfo(
    next,
    flags,
    stage,
    layout,
    base_pipeline_handle,
    base_pipeline_index,
)
    pNext = unsafe_pointer(next)
    api.VkComputePipelineCreateInfo(
        VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
        pNext,
        flags,
        stage,
        layout,
        base_pipeline_handle,
        base_pipeline_index,
    )
end

"""
Julian constructor for VkPipelineVertexInputStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineVertexInputStateCreateInfo(
    next,
    flags,
    vertex_binding_descriptions,
    vertex_attribute_descriptions,
)
    pNext = unsafe_pointer(next)
    _vertexBindingDescriptionCount = pointer_length(vertex_binding_descriptions)
    pVertexBindingDescriptions = unsafe_pointer(vertex_binding_descriptions)
    _vertexAttributeDescriptionCount = pointer_length(vertex_attribute_descriptions)
    pVertexAttributeDescriptions = unsafe_pointer(vertex_attribute_descriptions)
    api.VkPipelineVertexInputStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
        pNext,
        flags,
        _vertexBindingDescriptionCount,
        pVertexBindingDescriptions,
        _vertexAttributeDescriptionCount,
        pVertexAttributeDescriptions,
    )
end

"""
Julian constructor for VkPipelineInputAssemblyStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineInputAssemblyStateCreateInfo(
    next,
    flags,
    topology,
    primitive_restart_enable,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineInputAssemblyStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
        pNext,
        flags,
        topology,
        primitive_restart_enable,
    )
end

"""
Julian constructor for VkPipelineTessellationStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineTessellationStateCreateInfo(next, flags, patch_control_points)
    pNext = unsafe_pointer(next)
    api.VkPipelineTessellationStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
        pNext,
        flags,
        patch_control_points,
    )
end

"""
Julian constructor for VkPipelineViewportStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportStateCreateInfo(next, flags, viewports, scissors)
    pNext = unsafe_pointer(next)
    _viewportCount = pointer_length(viewports)
    pViewports = unsafe_pointer(viewports)
    _scissorCount = pointer_length(scissors)
    pScissors = unsafe_pointer(scissors)
    api.VkPipelineViewportStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
        pNext,
        flags,
        _viewportCount,
        pViewports,
        _scissorCount,
        pScissors,
    )
end

"""
Julian constructor for VkPipelineRasterizationStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationStateCreateInfo(
    next,
    flags,
    depth_clamp_enable,
    rasterizer_discard_enable,
    polygon_mode,
    cull_mode,
    front_face,
    depth_bias_enable,
    depth_bias_constant_factor,
    depth_bias_clamp,
    depth_bias_slope_factor,
    line_width,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
        pNext,
        flags,
        depth_clamp_enable,
        rasterizer_discard_enable,
        polygon_mode,
        cull_mode,
        front_face,
        depth_bias_enable,
        depth_bias_constant_factor,
        depth_bias_clamp,
        depth_bias_slope_factor,
        line_width,
    )
end

"""
Julian constructor for VkPipelineMultisampleStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineMultisampleStateCreateInfo(
    next,
    flags,
    rasterization_samples,
    sample_shading_enable,
    min_sample_shading,
    sample_mask,
    alpha_to_coverage_enable,
    alpha_to_one_enable,
)
    pNext = unsafe_pointer(next)
    pSampleMask = unsafe_pointer(sample_mask)
    api.VkPipelineMultisampleStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
        pNext,
        flags,
        rasterization_samples,
        sample_shading_enable,
        min_sample_shading,
        pSampleMask,
        alpha_to_coverage_enable,
        alpha_to_one_enable,
    )
end

"""
Julian constructor for VkPipelineDepthStencilStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineDepthStencilStateCreateInfo(
    next,
    flags,
    depth_test_enable,
    depth_write_enable,
    depth_compare_op,
    depth_bounds_test_enable,
    stencil_test_enable,
    front,
    back,
    min_depth_bounds,
    max_depth_bounds,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineDepthStencilStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
        pNext,
        flags,
        depth_test_enable,
        depth_write_enable,
        depth_compare_op,
        depth_bounds_test_enable,
        stencil_test_enable,
        front,
        back,
        min_depth_bounds,
        max_depth_bounds,
    )
end

"""
Julian constructor for VkPipelineColorBlendStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineColorBlendStateCreateInfo(
    next,
    flags,
    logic_op_enable,
    logic_op,
    attachments,
    blend_constants,
)
    pNext = unsafe_pointer(next)
    _attachmentCount = pointer_length(attachments)
    pAttachments = unsafe_pointer(attachments)
    api.VkPipelineColorBlendStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
        pNext,
        flags,
        logic_op_enable,
        logic_op,
        _attachmentCount,
        pAttachments,
        blend_constants,
    )
end

"""
Julian constructor for VkPipelineDynamicStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineDynamicStateCreateInfo(next, flags, dynamic_states)
    pNext = unsafe_pointer(next)
    _dynamicStateCount = pointer_length(dynamic_states)
    pDynamicStates = unsafe_pointer(dynamic_states)
    api.VkPipelineDynamicStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
        pNext,
        flags,
        _dynamicStateCount,
        pDynamicStates,
    )
end

"""
Julian constructor for VkGraphicsPipelineCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGraphicsPipelineCreateInfo(
    next,
    flags,
    stages,
    vertex_input_state,
    input_assembly_state,
    tessellation_state,
    viewport_state,
    rasterization_state,
    multisample_state,
    depth_stencil_state,
    color_blend_state,
    dynamic_state,
    layout,
    render_pass,
    subpass,
    base_pipeline_handle,
    base_pipeline_index,
)
    pNext = unsafe_pointer(next)
    _stageCount = pointer_length(stages)
    pStages = unsafe_pointer(stages)
    pVertexInputState = unsafe_pointer(vertex_input_state)
    pInputAssemblyState = unsafe_pointer(input_assembly_state)
    pTessellationState = unsafe_pointer(tessellation_state)
    pViewportState = unsafe_pointer(viewport_state)
    pRasterizationState = unsafe_pointer(rasterization_state)
    pMultisampleState = unsafe_pointer(multisample_state)
    pDepthStencilState = unsafe_pointer(depth_stencil_state)
    pColorBlendState = unsafe_pointer(color_blend_state)
    pDynamicState = unsafe_pointer(dynamic_state)
    api.VkGraphicsPipelineCreateInfo(
        VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
        pNext,
        flags,
        _stageCount,
        pStages,
        pVertexInputState,
        pInputAssemblyState,
        pTessellationState,
        pViewportState,
        pRasterizationState,
        pMultisampleState,
        pDepthStencilState,
        pColorBlendState,
        pDynamicState,
        layout,
        render_pass,
        subpass,
        base_pipeline_handle,
        base_pipeline_index,
    )
end

"""
Julian constructor for VkPipelineLayoutCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineLayoutCreateInfo(next, flags, set_layouts, push_constant_ranges)
    pNext = unsafe_pointer(next)
    _setLayoutCount = pointer_length(set_layouts)
    pSetLayouts = unsafe_pointer(set_layouts)
    _pushConstantRangeCount = pointer_length(push_constant_ranges)
    pPushConstantRanges = unsafe_pointer(push_constant_ranges)
    api.VkPipelineLayoutCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
        pNext,
        flags,
        _setLayoutCount,
        pSetLayouts,
        _pushConstantRangeCount,
        pPushConstantRanges,
    )
end

"""
Julian constructor for VkSamplerCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerCreateInfo(
    next,
    flags,
    mag_filter,
    min_filter,
    mipmap_mode,
    address_mode_u,
    address_mode_v,
    address_mode_w,
    mip_lod_bias,
    anisotropy_enable,
    max_anisotropy,
    compare_enable,
    compare_op,
    min_lod,
    max_lod,
    border_color,
    unnormalized_coordinates,
)
    pNext = unsafe_pointer(next)
    api.VkSamplerCreateInfo(
        VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
        pNext,
        flags,
        mag_filter,
        min_filter,
        mipmap_mode,
        address_mode_u,
        address_mode_v,
        address_mode_w,
        mip_lod_bias,
        anisotropy_enable,
        max_anisotropy,
        compare_enable,
        compare_op,
        min_lod,
        max_lod,
        border_color,
        unnormalized_coordinates,
    )
end

"""
Julian constructor for VkCopyDescriptorSet. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCopyDescriptorSet(
    next,
    src_set,
    src_binding,
    src_array_element,
    dst_set,
    dst_binding,
    dst_array_element,
    descriptor_count,
)
    pNext = unsafe_pointer(next)
    api.VkCopyDescriptorSet(
        VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
        pNext,
        src_set,
        src_binding,
        src_array_element,
        dst_set,
        dst_binding,
        dst_array_element,
        descriptor_count,
    )
end

"""
Julian constructor for VkDescriptorPoolCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorPoolCreateInfo(next, flags, max_sets, pool_sizes)
    pNext = unsafe_pointer(next)
    _poolSizeCount = pointer_length(pool_sizes)
    pPoolSizes = unsafe_pointer(pool_sizes)
    api.VkDescriptorPoolCreateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
        pNext,
        flags,
        max_sets,
        _poolSizeCount,
        pPoolSizes,
    )
end

"""
Julian constructor for VkDescriptorSetAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetAllocateInfo(next, descriptor_pool, set_layouts)
    pNext = unsafe_pointer(next)
    _descriptorSetCount = pointer_length(set_layouts)
    pSetLayouts = unsafe_pointer(set_layouts)
    api.VkDescriptorSetAllocateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
        pNext,
        descriptor_pool,
        _descriptorSetCount,
        pSetLayouts,
    )
end

"""
Julian constructor for VkDescriptorSetLayoutBinding. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetLayoutBinding(
    binding,
    descriptor_type,
    stage_flags,
    immutable_samplers,
)
    _descriptorCount = pointer_length(immutable_samplers)
    pImmutableSamplers = unsafe_pointer(immutable_samplers)
    api.VkDescriptorSetLayoutBinding(
        binding,
        descriptor_type,
        _descriptorCount,
        stage_flags,
        pImmutableSamplers,
    )
end

"""
Julian constructor for VkDescriptorSetLayoutCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetLayoutCreateInfo(next, flags, bindings)
    pNext = unsafe_pointer(next)
    _bindingCount = pointer_length(bindings)
    pBindings = unsafe_pointer(bindings)
    api.VkDescriptorSetLayoutCreateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
        pNext,
        flags,
        _bindingCount,
        pBindings,
    )
end

"""
Julian constructor for VkWriteDescriptorSet. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWriteDescriptorSet(
    next,
    dst_set,
    dst_binding,
    dst_array_element,
    descriptor_type,
    image_info,
    buffer_info,
    texel_buffer_view,
)
    pNext = unsafe_pointer(next)
    _descriptorCount = pointer_length(image_info)
    pImageInfo = unsafe_pointer(image_info)
    pBufferInfo = unsafe_pointer(buffer_info)
    pTexelBufferView = unsafe_pointer(texel_buffer_view)
    api.VkWriteDescriptorSet(
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
        pNext,
        dst_set,
        dst_binding,
        dst_array_element,
        _descriptorCount,
        descriptor_type,
        pImageInfo,
        pBufferInfo,
        pTexelBufferView,
    )
end

"""
Julian constructor for VkFramebufferCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFramebufferCreateInfo(
    next,
    flags,
    render_pass,
    attachments,
    width,
    height,
    layers,
)
    pNext = unsafe_pointer(next)
    _attachmentCount = pointer_length(attachments)
    pAttachments = unsafe_pointer(attachments)
    api.VkFramebufferCreateInfo(
        VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
        pNext,
        flags,
        render_pass,
        _attachmentCount,
        pAttachments,
        width,
        height,
        layers,
    )
end

"""
Julian constructor for VkSubpassDescription. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassDescription(
    flags,
    pipeline_bind_point,
    input_attachments,
    color_attachments,
    resolve_attachments,
    depth_stencil_attachment,
    preserve_attachments,
)
    _inputAttachmentCount = pointer_length(input_attachments)
    pInputAttachments = unsafe_pointer(input_attachments)
    _colorAttachmentCount = pointer_length(color_attachments)
    pColorAttachments = unsafe_pointer(color_attachments)
    pResolveAttachments = unsafe_pointer(resolve_attachments)
    pDepthStencilAttachment = unsafe_pointer(depth_stencil_attachment)
    _preserveAttachmentCount = pointer_length(preserve_attachments)
    pPreserveAttachments = unsafe_pointer(preserve_attachments)
    api.VkSubpassDescription(
        flags,
        pipeline_bind_point,
        _inputAttachmentCount,
        pInputAttachments,
        _colorAttachmentCount,
        pColorAttachments,
        pResolveAttachments,
        pDepthStencilAttachment,
        _preserveAttachmentCount,
        pPreserveAttachments,
    )
end

"""
Julian constructor for VkRenderPassCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassCreateInfo(next, flags, attachments, subpasses, dependencies)
    pNext = unsafe_pointer(next)
    _attachmentCount = pointer_length(attachments)
    pAttachments = unsafe_pointer(attachments)
    _subpassCount = pointer_length(subpasses)
    pSubpasses = unsafe_pointer(subpasses)
    _dependencyCount = pointer_length(dependencies)
    pDependencies = unsafe_pointer(dependencies)
    api.VkRenderPassCreateInfo(
        VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
        pNext,
        flags,
        _attachmentCount,
        pAttachments,
        _subpassCount,
        pSubpasses,
        _dependencyCount,
        pDependencies,
    )
end

"""
Julian constructor for VkCommandPoolCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandPoolCreateInfo(next, flags, queue_family_index)
    pNext = unsafe_pointer(next)
    api.VkCommandPoolCreateInfo(
        VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
        pNext,
        flags,
        queue_family_index,
    )
end

"""
Julian constructor for VkCommandBufferAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandBufferAllocateInfo(next, command_pool, level, command_buffer_count)
    pNext = unsafe_pointer(next)
    api.VkCommandBufferAllocateInfo(
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
        pNext,
        command_pool,
        level,
        command_buffer_count,
    )
end

"""
Julian constructor for VkCommandBufferInheritanceInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandBufferInheritanceInfo(
    next,
    render_pass,
    subpass,
    framebuffer,
    occlusion_query_enable,
    query_flags,
    pipeline_statistics,
)
    pNext = unsafe_pointer(next)
    api.VkCommandBufferInheritanceInfo(
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
        pNext,
        render_pass,
        subpass,
        framebuffer,
        occlusion_query_enable,
        query_flags,
        pipeline_statistics,
    )
end

"""
Julian constructor for VkCommandBufferBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandBufferBeginInfo(next, flags, inheritance_info)
    pNext = unsafe_pointer(next)
    pInheritanceInfo = unsafe_pointer(inheritance_info)
    api.VkCommandBufferBeginInfo(
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
        pNext,
        flags,
        pInheritanceInfo,
    )
end

"""
Julian constructor for VkRenderPassBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassBeginInfo(
    next,
    render_pass,
    framebuffer,
    render_area,
    clear_values,
)
    pNext = unsafe_pointer(next)
    _clearValueCount = pointer_length(clear_values)
    pClearValues = unsafe_pointer(clear_values)
    api.VkRenderPassBeginInfo(
        VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
        pNext,
        render_pass,
        framebuffer,
        render_area,
        _clearValueCount,
        pClearValues,
    )
end

"""
Julian constructor for VkPhysicalDeviceSubgroupProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSubgroupProperties(
    next,
    subgroup_size,
    supported_stages,
    supported_operations,
    quad_operations_in_all_stages,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSubgroupProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
        pNext,
        subgroup_size,
        supported_stages,
        supported_operations,
        quad_operations_in_all_stages,
    )
end

"""
Julian constructor for VkBindBufferMemoryInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindBufferMemoryInfo(next, buffer, memory, memory_offset)
    pNext = unsafe_pointer(next)
    api.VkBindBufferMemoryInfo(
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
        pNext,
        buffer,
        memory,
        memory_offset,
    )
end

"""
Julian constructor for VkBindImageMemoryInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindImageMemoryInfo(next, image, memory, memory_offset)
    pNext = unsafe_pointer(next)
    api.VkBindImageMemoryInfo(
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
        pNext,
        image,
        memory,
        memory_offset,
    )
end

"""
Julian constructor for VkPhysicalDevice16BitStorageFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevice16BitStorageFeatures(
    next,
    storage_buffer_16_bit_access,
    uniform_and_storage_buffer_16_bit_access,
    storage_push_constant_16,
    storage_input_output_16,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevice16BitStorageFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
        pNext,
        storage_buffer_16_bit_access,
        uniform_and_storage_buffer_16_bit_access,
        storage_push_constant_16,
        storage_input_output_16,
    )
end

"""
Julian constructor for VkMemoryDedicatedRequirements. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryDedicatedRequirements(
    next,
    prefers_dedicated_allocation,
    requires_dedicated_allocation,
)
    pNext = unsafe_pointer(next)
    api.VkMemoryDedicatedRequirements(
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
        pNext,
        prefers_dedicated_allocation,
        requires_dedicated_allocation,
    )
end

"""
Julian constructor for VkMemoryDedicatedAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryDedicatedAllocateInfo(next, image, buffer)
    pNext = unsafe_pointer(next)
    api.VkMemoryDedicatedAllocateInfo(
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
        pNext,
        image,
        buffer,
    )
end

"""
Julian constructor for VkMemoryAllocateFlagsInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryAllocateFlagsInfo(next, flags, device_mask)
    pNext = unsafe_pointer(next)
    api.VkMemoryAllocateFlagsInfo(
        VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
        pNext,
        flags,
        device_mask,
    )
end

"""
Julian constructor for VkDeviceGroupRenderPassBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupRenderPassBeginInfo(next, device_mask, device_render_areas)
    pNext = unsafe_pointer(next)
    _deviceRenderAreaCount = pointer_length(device_render_areas)
    pDeviceRenderAreas = unsafe_pointer(device_render_areas)
    api.VkDeviceGroupRenderPassBeginInfo(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
        pNext,
        device_mask,
        _deviceRenderAreaCount,
        pDeviceRenderAreas,
    )
end

"""
Julian constructor for VkDeviceGroupCommandBufferBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupCommandBufferBeginInfo(next, device_mask)
    pNext = unsafe_pointer(next)
    api.VkDeviceGroupCommandBufferBeginInfo(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
        pNext,
        device_mask,
    )
end

"""
Julian constructor for VkDeviceGroupSubmitInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupSubmitInfo(
    next,
    wait_semaphore_device_indices,
    command_buffer_device_masks,
    signal_semaphore_device_indices,
)
    pNext = unsafe_pointer(next)
    _waitSemaphoreCount = pointer_length(wait_semaphore_device_indices)
    pWaitSemaphoreDeviceIndices = unsafe_pointer(wait_semaphore_device_indices)
    _commandBufferCount = pointer_length(command_buffer_device_masks)
    pCommandBufferDeviceMasks = unsafe_pointer(command_buffer_device_masks)
    _signalSemaphoreCount = pointer_length(signal_semaphore_device_indices)
    pSignalSemaphoreDeviceIndices = unsafe_pointer(signal_semaphore_device_indices)
    api.VkDeviceGroupSubmitInfo(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
        pNext,
        _waitSemaphoreCount,
        pWaitSemaphoreDeviceIndices,
        _commandBufferCount,
        pCommandBufferDeviceMasks,
        _signalSemaphoreCount,
        pSignalSemaphoreDeviceIndices,
    )
end

"""
Julian constructor for VkDeviceGroupBindSparseInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupBindSparseInfo(next, resource_device_index, memory_device_index)
    pNext = unsafe_pointer(next)
    api.VkDeviceGroupBindSparseInfo(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
        pNext,
        resource_device_index,
        memory_device_index,
    )
end

"""
Julian constructor for VkBindBufferMemoryDeviceGroupInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindBufferMemoryDeviceGroupInfo(next, device_indices)
    pNext = unsafe_pointer(next)
    _deviceIndexCount = pointer_length(device_indices)
    pDeviceIndices = unsafe_pointer(device_indices)
    api.VkBindBufferMemoryDeviceGroupInfo(
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
        pNext,
        _deviceIndexCount,
        pDeviceIndices,
    )
end

"""
Julian constructor for VkBindImageMemoryDeviceGroupInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindImageMemoryDeviceGroupInfo(
    next,
    device_indices,
    split_instance_bind_regions,
)
    pNext = unsafe_pointer(next)
    _deviceIndexCount = pointer_length(device_indices)
    pDeviceIndices = unsafe_pointer(device_indices)
    _splitInstanceBindRegionCount = pointer_length(split_instance_bind_regions)
    pSplitInstanceBindRegions = unsafe_pointer(split_instance_bind_regions)
    api.VkBindImageMemoryDeviceGroupInfo(
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
        pNext,
        _deviceIndexCount,
        pDeviceIndices,
        _splitInstanceBindRegionCount,
        pSplitInstanceBindRegions,
    )
end

"""
Julian constructor for VkPhysicalDeviceGroupProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceGroupProperties(
    next,
    physical_device_count,
    physical_devices,
    subset_allocation,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceGroupProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
        pNext,
        physical_device_count,
        physical_devices,
        subset_allocation,
    )
end

"""
Julian constructor for VkDeviceGroupDeviceCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupDeviceCreateInfo(next, physical_devices)
    pNext = unsafe_pointer(next)
    _physicalDeviceCount = pointer_length(physical_devices)
    pPhysicalDevices = unsafe_pointer(physical_devices)
    api.VkDeviceGroupDeviceCreateInfo(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
        pNext,
        _physicalDeviceCount,
        pPhysicalDevices,
    )
end

"""
Julian constructor for VkBufferMemoryRequirementsInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferMemoryRequirementsInfo2(next, buffer)
    pNext = unsafe_pointer(next)
    api.VkBufferMemoryRequirementsInfo2(
        VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
        pNext,
        buffer,
    )
end

"""
Julian constructor for VkImageMemoryRequirementsInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageMemoryRequirementsInfo2(next, image)
    pNext = unsafe_pointer(next)
    api.VkImageMemoryRequirementsInfo2(
        VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
        pNext,
        image,
    )
end

"""
Julian constructor for VkImageSparseMemoryRequirementsInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageSparseMemoryRequirementsInfo2(next, image)
    pNext = unsafe_pointer(next)
    api.VkImageSparseMemoryRequirementsInfo2(
        VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
        pNext,
        image,
    )
end

"""
Julian constructor for VkMemoryRequirements2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryRequirements2(next, memory_requirements)
    pNext = unsafe_pointer(next)
    api.VkMemoryRequirements2(
        VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
        pNext,
        memory_requirements,
    )
end

"""
Julian constructor for VkSparseImageMemoryRequirements2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSparseImageMemoryRequirements2(next, memory_requirements)
    pNext = unsafe_pointer(next)
    api.VkSparseImageMemoryRequirements2(
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
        pNext,
        memory_requirements,
    )
end

"""
Julian constructor for VkPhysicalDeviceFeatures2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFeatures2(next, features)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFeatures2(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
        pNext,
        features,
    )
end

"""
Julian constructor for VkPhysicalDeviceProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceProperties2(next, properties)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceProperties2(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
        pNext,
        properties,
    )
end

"""
Julian constructor for VkFormatProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFormatProperties2(next, format_properties)
    pNext = unsafe_pointer(next)
    api.VkFormatProperties2(VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, pNext, format_properties)
end

"""
Julian constructor for VkImageFormatProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageFormatProperties2(next, image_format_properties)
    pNext = unsafe_pointer(next)
    api.VkImageFormatProperties2(
        VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
        pNext,
        image_format_properties,
    )
end

"""
Julian constructor for VkPhysicalDeviceImageFormatInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceImageFormatInfo2(next, format, type, tiling, usage, flags)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceImageFormatInfo2(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
        pNext,
        format,
        type,
        tiling,
        usage,
        flags,
    )
end

"""
Julian constructor for VkQueueFamilyProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkQueueFamilyProperties2(next, queue_family_properties)
    pNext = unsafe_pointer(next)
    api.VkQueueFamilyProperties2(
        VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
        pNext,
        queue_family_properties,
    )
end

"""
Julian constructor for VkPhysicalDeviceMemoryProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMemoryProperties2(next, memory_properties)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMemoryProperties2(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
        pNext,
        memory_properties,
    )
end

"""
Julian constructor for VkSparseImageFormatProperties2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSparseImageFormatProperties2(next, properties)
    pNext = unsafe_pointer(next)
    api.VkSparseImageFormatProperties2(
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
        pNext,
        properties,
    )
end

"""
Julian constructor for VkPhysicalDeviceSparseImageFormatInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSparseImageFormatInfo2(
    next,
    format,
    type,
    samples,
    usage,
    tiling,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSparseImageFormatInfo2(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
        pNext,
        format,
        type,
        samples,
        usage,
        tiling,
    )
end

"""
Julian constructor for VkPhysicalDevicePointClippingProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePointClippingProperties(next, point_clipping_behavior)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePointClippingProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
        pNext,
        point_clipping_behavior,
    )
end

"""
Julian constructor for VkRenderPassInputAttachmentAspectCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassInputAttachmentAspectCreateInfo(next, aspect_references)
    pNext = unsafe_pointer(next)
    _aspectReferenceCount = pointer_length(aspect_references)
    pAspectReferences = unsafe_pointer(aspect_references)
    api.VkRenderPassInputAttachmentAspectCreateInfo(
        VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
        pNext,
        _aspectReferenceCount,
        pAspectReferences,
    )
end

"""
Julian constructor for VkImageViewUsageCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageViewUsageCreateInfo(next, usage)
    pNext = unsafe_pointer(next)
    api.VkImageViewUsageCreateInfo(
        VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
        pNext,
        usage,
    )
end

"""
Julian constructor for VkPipelineTessellationDomainOriginStateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineTessellationDomainOriginStateCreateInfo(next, domain_origin)
    pNext = unsafe_pointer(next)
    api.VkPipelineTessellationDomainOriginStateCreateInfo(
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
        pNext,
        domain_origin,
    )
end

"""
Julian constructor for VkRenderPassMultiviewCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassMultiviewCreateInfo(
    next,
    view_masks,
    view_offsets,
    correlation_masks,
)
    pNext = unsafe_pointer(next)
    _subpassCount = pointer_length(view_masks)
    pViewMasks = unsafe_pointer(view_masks)
    _dependencyCount = pointer_length(view_offsets)
    pViewOffsets = unsafe_pointer(view_offsets)
    _correlationMaskCount = pointer_length(correlation_masks)
    pCorrelationMasks = unsafe_pointer(correlation_masks)
    api.VkRenderPassMultiviewCreateInfo(
        VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
        pNext,
        _subpassCount,
        pViewMasks,
        _dependencyCount,
        pViewOffsets,
        _correlationMaskCount,
        pCorrelationMasks,
    )
end

"""
Julian constructor for VkPhysicalDeviceMultiviewFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMultiviewFeatures(
    next,
    multiview,
    multiview_geometry_shader,
    multiview_tessellation_shader,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMultiviewFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
        pNext,
        multiview,
        multiview_geometry_shader,
        multiview_tessellation_shader,
    )
end

"""
Julian constructor for VkPhysicalDeviceMultiviewProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMultiviewProperties(
    next,
    max_multiview_view_count,
    max_multiview_instance_index,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMultiviewProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
        pNext,
        max_multiview_view_count,
        max_multiview_instance_index,
    )
end

"""
Julian constructor for VkPhysicalDeviceVariablePointersFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVariablePointersFeatures(
    next,
    variable_pointers_storage_buffer,
    variable_pointers,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVariablePointersFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
        pNext,
        variable_pointers_storage_buffer,
        variable_pointers,
    )
end

"""
Julian constructor for VkPhysicalDeviceProtectedMemoryFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceProtectedMemoryFeatures(next, protected_memory)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceProtectedMemoryFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
        pNext,
        protected_memory,
    )
end

"""
Julian constructor for VkPhysicalDeviceProtectedMemoryProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceProtectedMemoryProperties(next, protected_no_fault)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceProtectedMemoryProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
        pNext,
        protected_no_fault,
    )
end

"""
Julian constructor for VkDeviceQueueInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceQueueInfo2(next, flags, queue_family_index, queue_index)
    pNext = unsafe_pointer(next)
    api.VkDeviceQueueInfo2(
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
        pNext,
        flags,
        queue_family_index,
        queue_index,
    )
end

"""
Julian constructor for VkProtectedSubmitInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkProtectedSubmitInfo(next, protected_submit)
    pNext = unsafe_pointer(next)
    api.VkProtectedSubmitInfo(
        VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
        pNext,
        protected_submit,
    )
end

"""
Julian constructor for VkSamplerYcbcrConversionCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerYcbcrConversionCreateInfo(
    next,
    format,
    ycbcr_model,
    ycbcr_range,
    components,
    x_chroma_offset,
    y_chroma_offset,
    chroma_filter,
    force_explicit_reconstruction,
)
    pNext = unsafe_pointer(next)
    api.VkSamplerYcbcrConversionCreateInfo(
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
        pNext,
        format,
        ycbcr_model,
        ycbcr_range,
        components,
        x_chroma_offset,
        y_chroma_offset,
        chroma_filter,
        force_explicit_reconstruction,
    )
end

"""
Julian constructor for VkSamplerYcbcrConversionInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerYcbcrConversionInfo(next, conversion)
    pNext = unsafe_pointer(next)
    api.VkSamplerYcbcrConversionInfo(
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
        pNext,
        conversion,
    )
end

"""
Julian constructor for VkBindImagePlaneMemoryInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindImagePlaneMemoryInfo(next, plane_aspect)
    pNext = unsafe_pointer(next)
    api.VkBindImagePlaneMemoryInfo(
        VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
        pNext,
        plane_aspect,
    )
end

"""
Julian constructor for VkImagePlaneMemoryRequirementsInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImagePlaneMemoryRequirementsInfo(next, plane_aspect)
    pNext = unsafe_pointer(next)
    api.VkImagePlaneMemoryRequirementsInfo(
        VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
        pNext,
        plane_aspect,
    )
end

"""
Julian constructor for VkPhysicalDeviceSamplerYcbcrConversionFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSamplerYcbcrConversionFeatures(next, sampler_ycbcr_conversion)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSamplerYcbcrConversionFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
        pNext,
        sampler_ycbcr_conversion,
    )
end

"""
Julian constructor for VkSamplerYcbcrConversionImageFormatProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerYcbcrConversionImageFormatProperties(
    next,
    combined_image_sampler_descriptor_count,
)
    pNext = unsafe_pointer(next)
    api.VkSamplerYcbcrConversionImageFormatProperties(
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
        pNext,
        combined_image_sampler_descriptor_count,
    )
end

"""
Julian constructor for VkDescriptorUpdateTemplateCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorUpdateTemplateCreateInfo(
    next,
    flags,
    descriptor_update_entries,
    template_type,
    descriptor_set_layout,
    pipeline_bind_point,
    pipeline_layout,
    set,
)
    pNext = unsafe_pointer(next)
    _descriptorUpdateEntryCount = pointer_length(descriptor_update_entries)
    pDescriptorUpdateEntries = unsafe_pointer(descriptor_update_entries)
    api.VkDescriptorUpdateTemplateCreateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
        pNext,
        flags,
        _descriptorUpdateEntryCount,
        pDescriptorUpdateEntries,
        template_type,
        descriptor_set_layout,
        pipeline_bind_point,
        pipeline_layout,
        set,
    )
end

"""
Julian constructor for VkPhysicalDeviceExternalImageFormatInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExternalImageFormatInfo(next, handle_type)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExternalImageFormatInfo(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
        pNext,
        handle_type,
    )
end

"""
Julian constructor for VkExternalImageFormatProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalImageFormatProperties(next, external_memory_properties)
    pNext = unsafe_pointer(next)
    api.VkExternalImageFormatProperties(
        VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
        pNext,
        external_memory_properties,
    )
end

"""
Julian constructor for VkPhysicalDeviceExternalBufferInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExternalBufferInfo(next, flags, usage, handle_type)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExternalBufferInfo(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
        pNext,
        flags,
        usage,
        handle_type,
    )
end

"""
Julian constructor for VkExternalBufferProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalBufferProperties(next, external_memory_properties)
    pNext = unsafe_pointer(next)
    api.VkExternalBufferProperties(
        VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
        pNext,
        external_memory_properties,
    )
end

"""
Julian constructor for VkPhysicalDeviceIDProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceIDProperties(
    next,
    device_uuid,
    driver_uuid,
    device_luid,
    device_node_mask,
    device_luid_valid,
)
    pNext = unsafe_pointer(next)
    deviceUUID = to_vk(NTuple{16,UInt8}, device_uuid)
    driverUUID = to_vk(NTuple{16,UInt8}, driver_uuid)
    deviceLUID = to_vk(NTuple{8,UInt8}, device_luid)
    api.VkPhysicalDeviceIDProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
        pNext,
        deviceUUID,
        driverUUID,
        deviceLUID,
        device_node_mask,
        device_luid_valid,
    )
end

"""
Julian constructor for VkExternalMemoryImageCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalMemoryImageCreateInfo(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExternalMemoryImageCreateInfo(
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkExternalMemoryBufferCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalMemoryBufferCreateInfo(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExternalMemoryBufferCreateInfo(
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkExportMemoryAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportMemoryAllocateInfo(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExportMemoryAllocateInfo(
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkPhysicalDeviceExternalFenceInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExternalFenceInfo(next, handle_type)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExternalFenceInfo(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
        pNext,
        handle_type,
    )
end

"""
Julian constructor for VkExternalFenceProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalFenceProperties(
    next,
    export_from_imported_handle_types,
    compatible_handle_types,
    external_fence_features,
)
    pNext = unsafe_pointer(next)
    api.VkExternalFenceProperties(
        VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
        pNext,
        export_from_imported_handle_types,
        compatible_handle_types,
        external_fence_features,
    )
end

"""
Julian constructor for VkExportFenceCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportFenceCreateInfo(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExportFenceCreateInfo(
        VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkExportSemaphoreCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportSemaphoreCreateInfo(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExportSemaphoreCreateInfo(
        VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkPhysicalDeviceExternalSemaphoreInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExternalSemaphoreInfo(next, handle_type)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExternalSemaphoreInfo(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
        pNext,
        handle_type,
    )
end

"""
Julian constructor for VkExternalSemaphoreProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalSemaphoreProperties(
    next,
    export_from_imported_handle_types,
    compatible_handle_types,
    external_semaphore_features,
)
    pNext = unsafe_pointer(next)
    api.VkExternalSemaphoreProperties(
        VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
        pNext,
        export_from_imported_handle_types,
        compatible_handle_types,
        external_semaphore_features,
    )
end

"""
Julian constructor for VkPhysicalDeviceMaintenance3Properties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMaintenance3Properties(
    next,
    max_per_set_descriptors,
    max_memory_allocation_size,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMaintenance3Properties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
        pNext,
        max_per_set_descriptors,
        max_memory_allocation_size,
    )
end

"""
Julian constructor for VkDescriptorSetLayoutSupport. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetLayoutSupport(next, supported)
    pNext = unsafe_pointer(next)
    api.VkDescriptorSetLayoutSupport(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
        pNext,
        supported,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderDrawParametersFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderDrawParametersFeatures(next, shader_draw_parameters)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderDrawParametersFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
        pNext,
        shader_draw_parameters,
    )
end

"""
Julian constructor for VkPhysicalDeviceVulkan11Features. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVulkan11Features(
    next,
    storage_buffer_16_bit_access,
    uniform_and_storage_buffer_16_bit_access,
    storage_push_constant_16,
    storage_input_output_16,
    multiview,
    multiview_geometry_shader,
    multiview_tessellation_shader,
    variable_pointers_storage_buffer,
    variable_pointers,
    protected_memory,
    sampler_ycbcr_conversion,
    shader_draw_parameters,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVulkan11Features(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
        pNext,
        storage_buffer_16_bit_access,
        uniform_and_storage_buffer_16_bit_access,
        storage_push_constant_16,
        storage_input_output_16,
        multiview,
        multiview_geometry_shader,
        multiview_tessellation_shader,
        variable_pointers_storage_buffer,
        variable_pointers,
        protected_memory,
        sampler_ycbcr_conversion,
        shader_draw_parameters,
    )
end

"""
Julian constructor for VkPhysicalDeviceVulkan11Properties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVulkan11Properties(
    next,
    device_uuid,
    driver_uuid,
    device_luid,
    device_node_mask,
    device_luid_valid,
    subgroup_size,
    subgroup_supported_stages,
    subgroup_supported_operations,
    subgroup_quad_operations_in_all_stages,
    point_clipping_behavior,
    max_multiview_view_count,
    max_multiview_instance_index,
    protected_no_fault,
    max_per_set_descriptors,
    max_memory_allocation_size,
)
    pNext = unsafe_pointer(next)
    deviceUUID = to_vk(NTuple{16,UInt8}, device_uuid)
    driverUUID = to_vk(NTuple{16,UInt8}, driver_uuid)
    deviceLUID = to_vk(NTuple{8,UInt8}, device_luid)
    api.VkPhysicalDeviceVulkan11Properties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
        pNext,
        deviceUUID,
        driverUUID,
        deviceLUID,
        device_node_mask,
        device_luid_valid,
        subgroup_size,
        subgroup_supported_stages,
        subgroup_supported_operations,
        subgroup_quad_operations_in_all_stages,
        point_clipping_behavior,
        max_multiview_view_count,
        max_multiview_instance_index,
        protected_no_fault,
        max_per_set_descriptors,
        max_memory_allocation_size,
    )
end

"""
Julian constructor for VkPhysicalDeviceVulkan12Features. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVulkan12Features(
    next,
    sampler_mirror_clamp_to_edge,
    draw_indirect_count,
    storage_buffer_8_bit_access,
    uniform_and_storage_buffer_8_bit_access,
    storage_push_constant_8,
    shader_buffer_int_64_atomics,
    shader_shared_int_64_atomics,
    shader_float_16,
    shader_int_8,
    descriptor_indexing,
    shader_input_attachment_array_dynamic_indexing,
    shader_uniform_texel_buffer_array_dynamic_indexing,
    shader_storage_texel_buffer_array_dynamic_indexing,
    shader_uniform_buffer_array_non_uniform_indexing,
    shader_sampled_image_array_non_uniform_indexing,
    shader_storage_buffer_array_non_uniform_indexing,
    shader_storage_image_array_non_uniform_indexing,
    shader_input_attachment_array_non_uniform_indexing,
    shader_uniform_texel_buffer_array_non_uniform_indexing,
    shader_storage_texel_buffer_array_non_uniform_indexing,
    descriptor_binding_uniform_buffer_update_after_bind,
    descriptor_binding_sampled_image_update_after_bind,
    descriptor_binding_storage_image_update_after_bind,
    descriptor_binding_storage_buffer_update_after_bind,
    descriptor_binding_uniform_texel_buffer_update_after_bind,
    descriptor_binding_storage_texel_buffer_update_after_bind,
    descriptor_binding_update_unused_while_pending,
    descriptor_binding_partially_bound,
    descriptor_binding_variable_descriptor_count,
    runtime_descriptor_array,
    sampler_filter_minmax,
    scalar_block_layout,
    imageless_framebuffer,
    uniform_buffer_standard_layout,
    shader_subgroup_extended_types,
    separate_depth_stencil_layouts,
    host_query_reset,
    timeline_semaphore,
    buffer_device_address,
    buffer_device_address_capture_replay,
    buffer_device_address_multi_device,
    vulkan_memory_model,
    vulkan_memory_model_device_scope,
    vulkan_memory_model_availability_visibility_chains,
    shader_output_viewport_index,
    shader_output_layer,
    subgroup_broadcast_dynamic_id,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVulkan12Features(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
        pNext,
        sampler_mirror_clamp_to_edge,
        draw_indirect_count,
        storage_buffer_8_bit_access,
        uniform_and_storage_buffer_8_bit_access,
        storage_push_constant_8,
        shader_buffer_int_64_atomics,
        shader_shared_int_64_atomics,
        shader_float_16,
        shader_int_8,
        descriptor_indexing,
        shader_input_attachment_array_dynamic_indexing,
        shader_uniform_texel_buffer_array_dynamic_indexing,
        shader_storage_texel_buffer_array_dynamic_indexing,
        shader_uniform_buffer_array_non_uniform_indexing,
        shader_sampled_image_array_non_uniform_indexing,
        shader_storage_buffer_array_non_uniform_indexing,
        shader_storage_image_array_non_uniform_indexing,
        shader_input_attachment_array_non_uniform_indexing,
        shader_uniform_texel_buffer_array_non_uniform_indexing,
        shader_storage_texel_buffer_array_non_uniform_indexing,
        descriptor_binding_uniform_buffer_update_after_bind,
        descriptor_binding_sampled_image_update_after_bind,
        descriptor_binding_storage_image_update_after_bind,
        descriptor_binding_storage_buffer_update_after_bind,
        descriptor_binding_uniform_texel_buffer_update_after_bind,
        descriptor_binding_storage_texel_buffer_update_after_bind,
        descriptor_binding_update_unused_while_pending,
        descriptor_binding_partially_bound,
        descriptor_binding_variable_descriptor_count,
        runtime_descriptor_array,
        sampler_filter_minmax,
        scalar_block_layout,
        imageless_framebuffer,
        uniform_buffer_standard_layout,
        shader_subgroup_extended_types,
        separate_depth_stencil_layouts,
        host_query_reset,
        timeline_semaphore,
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device,
        vulkan_memory_model,
        vulkan_memory_model_device_scope,
        vulkan_memory_model_availability_visibility_chains,
        shader_output_viewport_index,
        shader_output_layer,
        subgroup_broadcast_dynamic_id,
    )
end

"""
Julian constructor for VkPhysicalDeviceVulkan12Properties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVulkan12Properties(
    next,
    driver_id,
    driver_name,
    driver_info,
    conformance_version,
    denorm_behavior_independence,
    rounding_mode_independence,
    shader_signed_zero_inf_nan_preserve_float_16,
    shader_signed_zero_inf_nan_preserve_float_32,
    shader_signed_zero_inf_nan_preserve_float_64,
    shader_denorm_preserve_float_16,
    shader_denorm_preserve_float_32,
    shader_denorm_preserve_float_64,
    shader_denorm_flush_to_zero_float_16,
    shader_denorm_flush_to_zero_float_32,
    shader_denorm_flush_to_zero_float_64,
    shader_rounding_mode_rte_float_16,
    shader_rounding_mode_rte_float_32,
    shader_rounding_mode_rte_float_64,
    shader_rounding_mode_rtz_float_16,
    shader_rounding_mode_rtz_float_32,
    shader_rounding_mode_rtz_float_64,
    max_update_after_bind_descriptors_in_all_pools,
    shader_uniform_buffer_array_non_uniform_indexing_native,
    shader_sampled_image_array_non_uniform_indexing_native,
    shader_storage_buffer_array_non_uniform_indexing_native,
    shader_storage_image_array_non_uniform_indexing_native,
    shader_input_attachment_array_non_uniform_indexing_native,
    robust_buffer_access_update_after_bind,
    quad_divergent_implicit_lod,
    max_per_stage_descriptor_update_after_bind_samplers,
    max_per_stage_descriptor_update_after_bind_uniform_buffers,
    max_per_stage_descriptor_update_after_bind_storage_buffers,
    max_per_stage_descriptor_update_after_bind_sampled_images,
    max_per_stage_descriptor_update_after_bind_storage_images,
    max_per_stage_descriptor_update_after_bind_input_attachments,
    max_per_stage_update_after_bind_resources,
    max_descriptor_set_update_after_bind_samplers,
    max_descriptor_set_update_after_bind_uniform_buffers,
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
    max_descriptor_set_update_after_bind_storage_buffers,
    max_descriptor_set_update_after_bind_storage_buffers_dynamic,
    max_descriptor_set_update_after_bind_sampled_images,
    max_descriptor_set_update_after_bind_storage_images,
    max_descriptor_set_update_after_bind_input_attachments,
    supported_depth_resolve_modes,
    supported_stencil_resolve_modes,
    independent_resolve_none,
    independent_resolve,
    filter_minmax_single_component_formats,
    filter_minmax_image_component_mapping,
    max_timeline_semaphore_value_difference,
    framebuffer_integer_color_sample_counts,
)
    pNext = unsafe_pointer(next)
    driverName = to_vk(NTuple{256,UInt8}, driver_name)
    driverInfo = to_vk(NTuple{256,UInt8}, driver_info)
    api.VkPhysicalDeviceVulkan12Properties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
        pNext,
        driver_id,
        driverName,
        driverInfo,
        conformance_version,
        denorm_behavior_independence,
        rounding_mode_independence,
        shader_signed_zero_inf_nan_preserve_float_16,
        shader_signed_zero_inf_nan_preserve_float_32,
        shader_signed_zero_inf_nan_preserve_float_64,
        shader_denorm_preserve_float_16,
        shader_denorm_preserve_float_32,
        shader_denorm_preserve_float_64,
        shader_denorm_flush_to_zero_float_16,
        shader_denorm_flush_to_zero_float_32,
        shader_denorm_flush_to_zero_float_64,
        shader_rounding_mode_rte_float_16,
        shader_rounding_mode_rte_float_32,
        shader_rounding_mode_rte_float_64,
        shader_rounding_mode_rtz_float_16,
        shader_rounding_mode_rtz_float_32,
        shader_rounding_mode_rtz_float_64,
        max_update_after_bind_descriptors_in_all_pools,
        shader_uniform_buffer_array_non_uniform_indexing_native,
        shader_sampled_image_array_non_uniform_indexing_native,
        shader_storage_buffer_array_non_uniform_indexing_native,
        shader_storage_image_array_non_uniform_indexing_native,
        shader_input_attachment_array_non_uniform_indexing_native,
        robust_buffer_access_update_after_bind,
        quad_divergent_implicit_lod,
        max_per_stage_descriptor_update_after_bind_samplers,
        max_per_stage_descriptor_update_after_bind_uniform_buffers,
        max_per_stage_descriptor_update_after_bind_storage_buffers,
        max_per_stage_descriptor_update_after_bind_sampled_images,
        max_per_stage_descriptor_update_after_bind_storage_images,
        max_per_stage_descriptor_update_after_bind_input_attachments,
        max_per_stage_update_after_bind_resources,
        max_descriptor_set_update_after_bind_samplers,
        max_descriptor_set_update_after_bind_uniform_buffers,
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
        max_descriptor_set_update_after_bind_storage_buffers,
        max_descriptor_set_update_after_bind_storage_buffers_dynamic,
        max_descriptor_set_update_after_bind_sampled_images,
        max_descriptor_set_update_after_bind_storage_images,
        max_descriptor_set_update_after_bind_input_attachments,
        supported_depth_resolve_modes,
        supported_stencil_resolve_modes,
        independent_resolve_none,
        independent_resolve,
        filter_minmax_single_component_formats,
        filter_minmax_image_component_mapping,
        max_timeline_semaphore_value_difference,
        framebuffer_integer_color_sample_counts,
    )
end

"""
Julian constructor for VkImageFormatListCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageFormatListCreateInfo(next, view_formats)
    pNext = unsafe_pointer(next)
    _viewFormatCount = pointer_length(view_formats)
    pViewFormats = unsafe_pointer(view_formats)
    api.VkImageFormatListCreateInfo(
        VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
        pNext,
        _viewFormatCount,
        pViewFormats,
    )
end

"""
Julian constructor for VkAttachmentDescription2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAttachmentDescription2(
    next,
    flags,
    format,
    samples,
    load_op,
    store_op,
    stencil_load_op,
    stencil_store_op,
    initial_layout,
    final_layout,
)
    pNext = unsafe_pointer(next)
    api.VkAttachmentDescription2(
        VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
        pNext,
        flags,
        format,
        samples,
        load_op,
        store_op,
        stencil_load_op,
        stencil_store_op,
        initial_layout,
        final_layout,
    )
end

"""
Julian constructor for VkAttachmentReference2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAttachmentReference2(next, attachment, layout, aspect_mask)
    pNext = unsafe_pointer(next)
    api.VkAttachmentReference2(
        VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
        pNext,
        attachment,
        layout,
        aspect_mask,
    )
end

"""
Julian constructor for VkSubpassDescription2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassDescription2(
    next,
    flags,
    pipeline_bind_point,
    view_mask,
    input_attachments,
    color_attachments,
    resolve_attachments,
    depth_stencil_attachment,
    preserve_attachments,
)
    pNext = unsafe_pointer(next)
    _inputAttachmentCount = pointer_length(input_attachments)
    pInputAttachments = unsafe_pointer(input_attachments)
    _colorAttachmentCount = pointer_length(color_attachments)
    pColorAttachments = unsafe_pointer(color_attachments)
    pResolveAttachments = unsafe_pointer(resolve_attachments)
    pDepthStencilAttachment = unsafe_pointer(depth_stencil_attachment)
    _preserveAttachmentCount = pointer_length(preserve_attachments)
    pPreserveAttachments = unsafe_pointer(preserve_attachments)
    api.VkSubpassDescription2(
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
        pNext,
        flags,
        pipeline_bind_point,
        view_mask,
        _inputAttachmentCount,
        pInputAttachments,
        _colorAttachmentCount,
        pColorAttachments,
        pResolveAttachments,
        pDepthStencilAttachment,
        _preserveAttachmentCount,
        pPreserveAttachments,
    )
end

"""
Julian constructor for VkSubpassDependency2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassDependency2(
    next,
    src_subpass,
    dst_subpass,
    src_stage_mask,
    dst_stage_mask,
    src_access_mask,
    dst_access_mask,
    dependency_flags,
    view_offset,
)
    pNext = unsafe_pointer(next)
    api.VkSubpassDependency2(
        VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
        pNext,
        src_subpass,
        dst_subpass,
        src_stage_mask,
        dst_stage_mask,
        src_access_mask,
        dst_access_mask,
        dependency_flags,
        view_offset,
    )
end

"""
Julian constructor for VkRenderPassCreateInfo2. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassCreateInfo2(
    next,
    flags,
    attachments,
    subpasses,
    dependencies,
    correlated_view_masks,
)
    pNext = unsafe_pointer(next)
    _attachmentCount = pointer_length(attachments)
    pAttachments = unsafe_pointer(attachments)
    _subpassCount = pointer_length(subpasses)
    pSubpasses = unsafe_pointer(subpasses)
    _dependencyCount = pointer_length(dependencies)
    pDependencies = unsafe_pointer(dependencies)
    _correlatedViewMaskCount = pointer_length(correlated_view_masks)
    pCorrelatedViewMasks = unsafe_pointer(correlated_view_masks)
    api.VkRenderPassCreateInfo2(
        VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
        pNext,
        flags,
        _attachmentCount,
        pAttachments,
        _subpassCount,
        pSubpasses,
        _dependencyCount,
        pDependencies,
        _correlatedViewMaskCount,
        pCorrelatedViewMasks,
    )
end

"""
Julian constructor for VkSubpassBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassBeginInfo(next, contents)
    pNext = unsafe_pointer(next)
    api.VkSubpassBeginInfo(VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, pNext, contents)
end

"""
Julian constructor for VkSubpassEndInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassEndInfo(next)
    pNext = unsafe_pointer(next)
    api.VkSubpassEndInfo(VK_STRUCTURE_TYPE_SUBPASS_END_INFO, pNext)
end

"""
Julian constructor for VkPhysicalDevice8BitStorageFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevice8BitStorageFeatures(
    next,
    storage_buffer_8_bit_access,
    uniform_and_storage_buffer_8_bit_access,
    storage_push_constant_8,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevice8BitStorageFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
        pNext,
        storage_buffer_8_bit_access,
        uniform_and_storage_buffer_8_bit_access,
        storage_push_constant_8,
    )
end

"""
Julian constructor for VkPhysicalDeviceDriverProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDriverProperties(
    next,
    driver_id,
    driver_name,
    driver_info,
    conformance_version,
)
    pNext = unsafe_pointer(next)
    driverName = to_vk(NTuple{256,UInt8}, driver_name)
    driverInfo = to_vk(NTuple{256,UInt8}, driver_info)
    api.VkPhysicalDeviceDriverProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
        pNext,
        driver_id,
        driverName,
        driverInfo,
        conformance_version,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderAtomicInt64Features. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderAtomicInt64Features(
    next,
    shader_buffer_int_64_atomics,
    shader_shared_int_64_atomics,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderAtomicInt64Features(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
        pNext,
        shader_buffer_int_64_atomics,
        shader_shared_int_64_atomics,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderFloat16Int8Features. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderFloat16Int8Features(next, shader_float_16, shader_int_8)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderFloat16Int8Features(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
        pNext,
        shader_float_16,
        shader_int_8,
    )
end

"""
Julian constructor for VkPhysicalDeviceFloatControlsProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFloatControlsProperties(
    next,
    denorm_behavior_independence,
    rounding_mode_independence,
    shader_signed_zero_inf_nan_preserve_float_16,
    shader_signed_zero_inf_nan_preserve_float_32,
    shader_signed_zero_inf_nan_preserve_float_64,
    shader_denorm_preserve_float_16,
    shader_denorm_preserve_float_32,
    shader_denorm_preserve_float_64,
    shader_denorm_flush_to_zero_float_16,
    shader_denorm_flush_to_zero_float_32,
    shader_denorm_flush_to_zero_float_64,
    shader_rounding_mode_rte_float_16,
    shader_rounding_mode_rte_float_32,
    shader_rounding_mode_rte_float_64,
    shader_rounding_mode_rtz_float_16,
    shader_rounding_mode_rtz_float_32,
    shader_rounding_mode_rtz_float_64,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFloatControlsProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
        pNext,
        denorm_behavior_independence,
        rounding_mode_independence,
        shader_signed_zero_inf_nan_preserve_float_16,
        shader_signed_zero_inf_nan_preserve_float_32,
        shader_signed_zero_inf_nan_preserve_float_64,
        shader_denorm_preserve_float_16,
        shader_denorm_preserve_float_32,
        shader_denorm_preserve_float_64,
        shader_denorm_flush_to_zero_float_16,
        shader_denorm_flush_to_zero_float_32,
        shader_denorm_flush_to_zero_float_64,
        shader_rounding_mode_rte_float_16,
        shader_rounding_mode_rte_float_32,
        shader_rounding_mode_rte_float_64,
        shader_rounding_mode_rtz_float_16,
        shader_rounding_mode_rtz_float_32,
        shader_rounding_mode_rtz_float_64,
    )
end

"""
Julian constructor for VkDescriptorSetLayoutBindingFlagsCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetLayoutBindingFlagsCreateInfo(next, binding_flags)
    pNext = unsafe_pointer(next)
    _bindingCount = pointer_length(binding_flags)
    pBindingFlags = unsafe_pointer(binding_flags)
    api.VkDescriptorSetLayoutBindingFlagsCreateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
        pNext,
        _bindingCount,
        pBindingFlags,
    )
end

"""
Julian constructor for VkPhysicalDeviceDescriptorIndexingFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDescriptorIndexingFeatures(
    next,
    shader_input_attachment_array_dynamic_indexing,
    shader_uniform_texel_buffer_array_dynamic_indexing,
    shader_storage_texel_buffer_array_dynamic_indexing,
    shader_uniform_buffer_array_non_uniform_indexing,
    shader_sampled_image_array_non_uniform_indexing,
    shader_storage_buffer_array_non_uniform_indexing,
    shader_storage_image_array_non_uniform_indexing,
    shader_input_attachment_array_non_uniform_indexing,
    shader_uniform_texel_buffer_array_non_uniform_indexing,
    shader_storage_texel_buffer_array_non_uniform_indexing,
    descriptor_binding_uniform_buffer_update_after_bind,
    descriptor_binding_sampled_image_update_after_bind,
    descriptor_binding_storage_image_update_after_bind,
    descriptor_binding_storage_buffer_update_after_bind,
    descriptor_binding_uniform_texel_buffer_update_after_bind,
    descriptor_binding_storage_texel_buffer_update_after_bind,
    descriptor_binding_update_unused_while_pending,
    descriptor_binding_partially_bound,
    descriptor_binding_variable_descriptor_count,
    runtime_descriptor_array,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDescriptorIndexingFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
        pNext,
        shader_input_attachment_array_dynamic_indexing,
        shader_uniform_texel_buffer_array_dynamic_indexing,
        shader_storage_texel_buffer_array_dynamic_indexing,
        shader_uniform_buffer_array_non_uniform_indexing,
        shader_sampled_image_array_non_uniform_indexing,
        shader_storage_buffer_array_non_uniform_indexing,
        shader_storage_image_array_non_uniform_indexing,
        shader_input_attachment_array_non_uniform_indexing,
        shader_uniform_texel_buffer_array_non_uniform_indexing,
        shader_storage_texel_buffer_array_non_uniform_indexing,
        descriptor_binding_uniform_buffer_update_after_bind,
        descriptor_binding_sampled_image_update_after_bind,
        descriptor_binding_storage_image_update_after_bind,
        descriptor_binding_storage_buffer_update_after_bind,
        descriptor_binding_uniform_texel_buffer_update_after_bind,
        descriptor_binding_storage_texel_buffer_update_after_bind,
        descriptor_binding_update_unused_while_pending,
        descriptor_binding_partially_bound,
        descriptor_binding_variable_descriptor_count,
        runtime_descriptor_array,
    )
end

"""
Julian constructor for VkPhysicalDeviceDescriptorIndexingProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDescriptorIndexingProperties(
    next,
    max_update_after_bind_descriptors_in_all_pools,
    shader_uniform_buffer_array_non_uniform_indexing_native,
    shader_sampled_image_array_non_uniform_indexing_native,
    shader_storage_buffer_array_non_uniform_indexing_native,
    shader_storage_image_array_non_uniform_indexing_native,
    shader_input_attachment_array_non_uniform_indexing_native,
    robust_buffer_access_update_after_bind,
    quad_divergent_implicit_lod,
    max_per_stage_descriptor_update_after_bind_samplers,
    max_per_stage_descriptor_update_after_bind_uniform_buffers,
    max_per_stage_descriptor_update_after_bind_storage_buffers,
    max_per_stage_descriptor_update_after_bind_sampled_images,
    max_per_stage_descriptor_update_after_bind_storage_images,
    max_per_stage_descriptor_update_after_bind_input_attachments,
    max_per_stage_update_after_bind_resources,
    max_descriptor_set_update_after_bind_samplers,
    max_descriptor_set_update_after_bind_uniform_buffers,
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
    max_descriptor_set_update_after_bind_storage_buffers,
    max_descriptor_set_update_after_bind_storage_buffers_dynamic,
    max_descriptor_set_update_after_bind_sampled_images,
    max_descriptor_set_update_after_bind_storage_images,
    max_descriptor_set_update_after_bind_input_attachments,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDescriptorIndexingProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
        pNext,
        max_update_after_bind_descriptors_in_all_pools,
        shader_uniform_buffer_array_non_uniform_indexing_native,
        shader_sampled_image_array_non_uniform_indexing_native,
        shader_storage_buffer_array_non_uniform_indexing_native,
        shader_storage_image_array_non_uniform_indexing_native,
        shader_input_attachment_array_non_uniform_indexing_native,
        robust_buffer_access_update_after_bind,
        quad_divergent_implicit_lod,
        max_per_stage_descriptor_update_after_bind_samplers,
        max_per_stage_descriptor_update_after_bind_uniform_buffers,
        max_per_stage_descriptor_update_after_bind_storage_buffers,
        max_per_stage_descriptor_update_after_bind_sampled_images,
        max_per_stage_descriptor_update_after_bind_storage_images,
        max_per_stage_descriptor_update_after_bind_input_attachments,
        max_per_stage_update_after_bind_resources,
        max_descriptor_set_update_after_bind_samplers,
        max_descriptor_set_update_after_bind_uniform_buffers,
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
        max_descriptor_set_update_after_bind_storage_buffers,
        max_descriptor_set_update_after_bind_storage_buffers_dynamic,
        max_descriptor_set_update_after_bind_sampled_images,
        max_descriptor_set_update_after_bind_storage_images,
        max_descriptor_set_update_after_bind_input_attachments,
    )
end

"""
Julian constructor for VkDescriptorSetVariableDescriptorCountAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetVariableDescriptorCountAllocateInfo(next, descriptor_counts)
    pNext = unsafe_pointer(next)
    _descriptorSetCount = pointer_length(descriptor_counts)
    pDescriptorCounts = unsafe_pointer(descriptor_counts)
    api.VkDescriptorSetVariableDescriptorCountAllocateInfo(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
        pNext,
        _descriptorSetCount,
        pDescriptorCounts,
    )
end

"""
Julian constructor for VkDescriptorSetVariableDescriptorCountLayoutSupport. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorSetVariableDescriptorCountLayoutSupport(
    next,
    max_variable_descriptor_count,
)
    pNext = unsafe_pointer(next)
    api.VkDescriptorSetVariableDescriptorCountLayoutSupport(
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
        pNext,
        max_variable_descriptor_count,
    )
end

"""
Julian constructor for VkSubpassDescriptionDepthStencilResolve. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSubpassDescriptionDepthStencilResolve(
    next,
    depth_resolve_mode,
    stencil_resolve_mode,
    depth_stencil_resolve_attachment,
)
    pNext = unsafe_pointer(next)
    pDepthStencilResolveAttachment = unsafe_pointer(depth_stencil_resolve_attachment)
    api.VkSubpassDescriptionDepthStencilResolve(
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
        pNext,
        depth_resolve_mode,
        stencil_resolve_mode,
        pDepthStencilResolveAttachment,
    )
end

"""
Julian constructor for VkPhysicalDeviceDepthStencilResolveProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDepthStencilResolveProperties(
    next,
    supported_depth_resolve_modes,
    supported_stencil_resolve_modes,
    independent_resolve_none,
    independent_resolve,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDepthStencilResolveProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
        pNext,
        supported_depth_resolve_modes,
        supported_stencil_resolve_modes,
        independent_resolve_none,
        independent_resolve,
    )
end

"""
Julian constructor for VkPhysicalDeviceScalarBlockLayoutFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceScalarBlockLayoutFeatures(next, scalar_block_layout)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceScalarBlockLayoutFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
        pNext,
        scalar_block_layout,
    )
end

"""
Julian constructor for VkImageStencilUsageCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageStencilUsageCreateInfo(next, stencil_usage)
    pNext = unsafe_pointer(next)
    api.VkImageStencilUsageCreateInfo(
        VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
        pNext,
        stencil_usage,
    )
end

"""
Julian constructor for VkSamplerReductionModeCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerReductionModeCreateInfo(next, reduction_mode)
    pNext = unsafe_pointer(next)
    api.VkSamplerReductionModeCreateInfo(
        VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
        pNext,
        reduction_mode,
    )
end

"""
Julian constructor for VkPhysicalDeviceSamplerFilterMinmaxProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSamplerFilterMinmaxProperties(
    next,
    filter_minmax_single_component_formats,
    filter_minmax_image_component_mapping,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSamplerFilterMinmaxProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
        pNext,
        filter_minmax_single_component_formats,
        filter_minmax_image_component_mapping,
    )
end

"""
Julian constructor for VkPhysicalDeviceVulkanMemoryModelFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVulkanMemoryModelFeatures(
    next,
    vulkan_memory_model,
    vulkan_memory_model_device_scope,
    vulkan_memory_model_availability_visibility_chains,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVulkanMemoryModelFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
        pNext,
        vulkan_memory_model,
        vulkan_memory_model_device_scope,
        vulkan_memory_model_availability_visibility_chains,
    )
end

"""
Julian constructor for VkPhysicalDeviceImagelessFramebufferFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceImagelessFramebufferFeatures(next, imageless_framebuffer)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceImagelessFramebufferFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
        pNext,
        imageless_framebuffer,
    )
end

"""
Julian constructor for VkFramebufferAttachmentImageInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFramebufferAttachmentImageInfo(
    next,
    flags,
    usage,
    width,
    height,
    layer_count,
    view_formats,
)
    pNext = unsafe_pointer(next)
    _viewFormatCount = pointer_length(view_formats)
    pViewFormats = unsafe_pointer(view_formats)
    api.VkFramebufferAttachmentImageInfo(
        VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
        pNext,
        flags,
        usage,
        width,
        height,
        layer_count,
        _viewFormatCount,
        pViewFormats,
    )
end

"""
Julian constructor for VkFramebufferAttachmentsCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFramebufferAttachmentsCreateInfo(next, attachment_image_infos)
    pNext = unsafe_pointer(next)
    _attachmentImageInfoCount = pointer_length(attachment_image_infos)
    pAttachmentImageInfos = unsafe_pointer(attachment_image_infos)
    api.VkFramebufferAttachmentsCreateInfo(
        VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
        pNext,
        _attachmentImageInfoCount,
        pAttachmentImageInfos,
    )
end

"""
Julian constructor for VkRenderPassAttachmentBeginInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassAttachmentBeginInfo(next, attachments)
    pNext = unsafe_pointer(next)
    _attachmentCount = pointer_length(attachments)
    pAttachments = unsafe_pointer(attachments)
    api.VkRenderPassAttachmentBeginInfo(
        VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
        pNext,
        _attachmentCount,
        pAttachments,
    )
end

"""
Julian constructor for VkPhysicalDeviceUniformBufferStandardLayoutFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    next,
    uniform_buffer_standard_layout,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
        pNext,
        uniform_buffer_standard_layout,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    next,
    shader_subgroup_extended_types,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
        pNext,
        shader_subgroup_extended_types,
    )
end

"""
Julian constructor for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    next,
    separate_depth_stencil_layouts,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
        pNext,
        separate_depth_stencil_layouts,
    )
end

"""
Julian constructor for VkAttachmentReferenceStencilLayout. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAttachmentReferenceStencilLayout(next, stencil_layout)
    pNext = unsafe_pointer(next)
    api.VkAttachmentReferenceStencilLayout(
        VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
        pNext,
        stencil_layout,
    )
end

"""
Julian constructor for VkAttachmentDescriptionStencilLayout. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAttachmentDescriptionStencilLayout(
    next,
    stencil_initial_layout,
    stencil_final_layout,
)
    pNext = unsafe_pointer(next)
    api.VkAttachmentDescriptionStencilLayout(
        VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
        pNext,
        stencil_initial_layout,
        stencil_final_layout,
    )
end

"""
Julian constructor for VkPhysicalDeviceHostQueryResetFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceHostQueryResetFeatures(next, host_query_reset)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceHostQueryResetFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
        pNext,
        host_query_reset,
    )
end

"""
Julian constructor for VkPhysicalDeviceTimelineSemaphoreFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTimelineSemaphoreFeatures(next, timeline_semaphore)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTimelineSemaphoreFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
        pNext,
        timeline_semaphore,
    )
end

"""
Julian constructor for VkPhysicalDeviceTimelineSemaphoreProperties. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTimelineSemaphoreProperties(
    next,
    max_timeline_semaphore_value_difference,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTimelineSemaphoreProperties(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
        pNext,
        max_timeline_semaphore_value_difference,
    )
end

"""
Julian constructor for VkSemaphoreTypeCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreTypeCreateInfo(next, semaphore_type, initial_value)
    pNext = unsafe_pointer(next)
    api.VkSemaphoreTypeCreateInfo(
        VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
        pNext,
        semaphore_type,
        initial_value,
    )
end

"""
Julian constructor for VkTimelineSemaphoreSubmitInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkTimelineSemaphoreSubmitInfo(
    next,
    wait_semaphore_values,
    signal_semaphore_values,
)
    pNext = unsafe_pointer(next)
    _waitSemaphoreValueCount = pointer_length(wait_semaphore_values)
    pWaitSemaphoreValues = unsafe_pointer(wait_semaphore_values)
    _signalSemaphoreValueCount = pointer_length(signal_semaphore_values)
    pSignalSemaphoreValues = unsafe_pointer(signal_semaphore_values)
    api.VkTimelineSemaphoreSubmitInfo(
        VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
        pNext,
        _waitSemaphoreValueCount,
        pWaitSemaphoreValues,
        _signalSemaphoreValueCount,
        pSignalSemaphoreValues,
    )
end

"""
Julian constructor for VkSemaphoreWaitInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreWaitInfo(next, flags, semaphores, values)
    pNext = unsafe_pointer(next)
    _semaphoreCount = pointer_length(semaphores)
    pSemaphores = unsafe_pointer(semaphores)
    pValues = unsafe_pointer(values)
    api.VkSemaphoreWaitInfo(
        VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
        pNext,
        flags,
        _semaphoreCount,
        pSemaphores,
        pValues,
    )
end

"""
Julian constructor for VkSemaphoreSignalInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreSignalInfo(next, semaphore, value)
    pNext = unsafe_pointer(next)
    api.VkSemaphoreSignalInfo(
        VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
        pNext,
        semaphore,
        value,
    )
end

"""
Julian constructor for VkPhysicalDeviceBufferDeviceAddressFeatures. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceBufferDeviceAddressFeatures(
    next,
    buffer_device_address,
    buffer_device_address_capture_replay,
    buffer_device_address_multi_device,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceBufferDeviceAddressFeatures(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
        pNext,
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device,
    )
end

"""
Julian constructor for VkBufferDeviceAddressInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferDeviceAddressInfo(next, buffer)
    pNext = unsafe_pointer(next)
    api.VkBufferDeviceAddressInfo(
        VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
        pNext,
        buffer,
    )
end

"""
Julian constructor for VkBufferOpaqueCaptureAddressCreateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferOpaqueCaptureAddressCreateInfo(next, opaque_capture_address)
    pNext = unsafe_pointer(next)
    api.VkBufferOpaqueCaptureAddressCreateInfo(
        VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
        pNext,
        opaque_capture_address,
    )
end

"""
Julian constructor for VkMemoryOpaqueCaptureAddressAllocateInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryOpaqueCaptureAddressAllocateInfo(next, opaque_capture_address)
    pNext = unsafe_pointer(next)
    api.VkMemoryOpaqueCaptureAddressAllocateInfo(
        VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
        pNext,
        opaque_capture_address,
    )
end

"""
Julian constructor for VkDeviceMemoryOpaqueCaptureAddressInfo. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceMemoryOpaqueCaptureAddressInfo(next, memory)
    pNext = unsafe_pointer(next)
    api.VkDeviceMemoryOpaqueCaptureAddressInfo(
        VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
        pNext,
        memory,
    )
end

"""
Julian constructor for VkSwapchainCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSwapchainCreateInfoKHR(
    next,
    flags,
    surface,
    min_image_count,
    image_format,
    image_color_space,
    image_extent,
    image_array_layers,
    image_usage,
    image_sharing_mode,
    queue_family_indices,
    pre_transform,
    composite_alpha,
    present_mode,
    clipped,
    old_swapchain,
)
    pNext = unsafe_pointer(next)
    _queueFamilyIndexCount = pointer_length(queue_family_indices)
    pQueueFamilyIndices = unsafe_pointer(queue_family_indices)
    api.VkSwapchainCreateInfoKHR(
        VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
        pNext,
        flags,
        surface,
        min_image_count,
        image_format,
        image_color_space,
        image_extent,
        image_array_layers,
        image_usage,
        image_sharing_mode,
        _queueFamilyIndexCount,
        pQueueFamilyIndices,
        pre_transform,
        composite_alpha,
        present_mode,
        clipped,
        old_swapchain,
    )
end

"""
Julian constructor for VkPresentInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPresentInfoKHR(next, wait_semaphores, swapchains, image_indices, results)
    pNext = unsafe_pointer(next)
    _waitSemaphoreCount = pointer_length(wait_semaphores)
    pWaitSemaphores = unsafe_pointer(wait_semaphores)
    _swapchainCount = pointer_length(swapchains)
    pSwapchains = unsafe_pointer(swapchains)
    pImageIndices = unsafe_pointer(image_indices)
    pResults = unsafe_pointer(results)
    api.VkPresentInfoKHR(
        VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
        pNext,
        _waitSemaphoreCount,
        pWaitSemaphores,
        _swapchainCount,
        pSwapchains,
        pImageIndices,
        pResults,
    )
end

"""
Julian constructor for VkImageSwapchainCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageSwapchainCreateInfoKHR(next, swapchain)
    pNext = unsafe_pointer(next)
    api.VkImageSwapchainCreateInfoKHR(
        VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
        pNext,
        swapchain,
    )
end

"""
Julian constructor for VkBindImageMemorySwapchainInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindImageMemorySwapchainInfoKHR(next, swapchain, image_index)
    pNext = unsafe_pointer(next)
    api.VkBindImageMemorySwapchainInfoKHR(
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
        pNext,
        swapchain,
        image_index,
    )
end

"""
Julian constructor for VkAcquireNextImageInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAcquireNextImageInfoKHR(
    next,
    swapchain,
    timeout,
    semaphore,
    fence,
    device_mask,
)
    pNext = unsafe_pointer(next)
    api.VkAcquireNextImageInfoKHR(
        VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
        pNext,
        swapchain,
        timeout,
        semaphore,
        fence,
        device_mask,
    )
end

"""
Julian constructor for VkDeviceGroupPresentCapabilitiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupPresentCapabilitiesKHR(next, present_mask, modes)
    pNext = unsafe_pointer(next)
    api.VkDeviceGroupPresentCapabilitiesKHR(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
        pNext,
        present_mask,
        modes,
    )
end

"""
Julian constructor for VkDeviceGroupPresentInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupPresentInfoKHR(next, device_masks, mode)
    pNext = unsafe_pointer(next)
    _swapchainCount = pointer_length(device_masks)
    pDeviceMasks = unsafe_pointer(device_masks)
    api.VkDeviceGroupPresentInfoKHR(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
        pNext,
        _swapchainCount,
        pDeviceMasks,
        mode,
    )
end

"""
Julian constructor for VkDeviceGroupSwapchainCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceGroupSwapchainCreateInfoKHR(next, modes)
    pNext = unsafe_pointer(next)
    api.VkDeviceGroupSwapchainCreateInfoKHR(
        VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
        pNext,
        modes,
    )
end

"""
Julian constructor for VkDisplayModeCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayModeCreateInfoKHR(next, flags, parameters)
    pNext = unsafe_pointer(next)
    api.VkDisplayModeCreateInfoKHR(
        VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
        pNext,
        flags,
        parameters,
    )
end

"""
Julian constructor for VkDisplaySurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplaySurfaceCreateInfoKHR(
    next,
    flags,
    display_mode,
    plane_index,
    plane_stack_index,
    transform,
    global_alpha,
    alpha_mode,
    image_extent,
)
    pNext = unsafe_pointer(next)
    api.VkDisplaySurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        display_mode,
        plane_index,
        plane_stack_index,
        transform,
        global_alpha,
        alpha_mode,
        image_extent,
    )
end

"""
Julian constructor for VkDisplayPresentInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayPresentInfoKHR(next, src_rect, dst_rect, persistent)
    pNext = unsafe_pointer(next)
    api.VkDisplayPresentInfoKHR(
        VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
        pNext,
        src_rect,
        dst_rect,
        persistent,
    )
end

"""
Julian constructor for VkImportMemoryFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportMemoryFdInfoKHR(next, handle_type, fd)
    pNext = unsafe_pointer(next)
    api.VkImportMemoryFdInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
        pNext,
        handle_type,
        fd,
    )
end

"""
Julian constructor for VkMemoryFdPropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryFdPropertiesKHR(next, memory_type_bits)
    pNext = unsafe_pointer(next)
    api.VkMemoryFdPropertiesKHR(
        VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
        pNext,
        memory_type_bits,
    )
end

"""
Julian constructor for VkMemoryGetFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryGetFdInfoKHR(next, memory, handle_type)
    pNext = unsafe_pointer(next)
    api.VkMemoryGetFdInfoKHR(
        VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
        pNext,
        memory,
        handle_type,
    )
end

"""
Julian constructor for VkImportSemaphoreFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportSemaphoreFdInfoKHR(next, semaphore, flags, handle_type, fd)
    pNext = unsafe_pointer(next)
    api.VkImportSemaphoreFdInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
        pNext,
        semaphore,
        flags,
        handle_type,
        fd,
    )
end

"""
Julian constructor for VkSemaphoreGetFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreGetFdInfoKHR(next, semaphore, handle_type)
    pNext = unsafe_pointer(next)
    api.VkSemaphoreGetFdInfoKHR(
        VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
        pNext,
        semaphore,
        handle_type,
    )
end

"""
Julian constructor for VkPhysicalDevicePushDescriptorPropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePushDescriptorPropertiesKHR(next, max_push_descriptors)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePushDescriptorPropertiesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
        pNext,
        max_push_descriptors,
    )
end

"""
Julian constructor for VkPresentRegionKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPresentRegionKHR(rectangles)
    _rectangleCount = pointer_length(rectangles)
    pRectangles = unsafe_pointer(rectangles)
    api.VkPresentRegionKHR(_rectangleCount, pRectangles)
end

"""
Julian constructor for VkPresentRegionsKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPresentRegionsKHR(next, regions)
    pNext = unsafe_pointer(next)
    _swapchainCount = pointer_length(regions)
    pRegions = unsafe_pointer(regions)
    api.VkPresentRegionsKHR(
        VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
        pNext,
        _swapchainCount,
        pRegions,
    )
end

"""
Julian constructor for VkSharedPresentSurfaceCapabilitiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSharedPresentSurfaceCapabilitiesKHR(
    next,
    shared_present_supported_usage_flags,
)
    pNext = unsafe_pointer(next)
    api.VkSharedPresentSurfaceCapabilitiesKHR(
        VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
        pNext,
        shared_present_supported_usage_flags,
    )
end

"""
Julian constructor for VkImportFenceFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportFenceFdInfoKHR(next, fence, flags, handle_type, fd)
    pNext = unsafe_pointer(next)
    api.VkImportFenceFdInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
        pNext,
        fence,
        flags,
        handle_type,
        fd,
    )
end

"""
Julian constructor for VkFenceGetFdInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFenceGetFdInfoKHR(next, fence, handle_type)
    pNext = unsafe_pointer(next)
    api.VkFenceGetFdInfoKHR(
        VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
        pNext,
        fence,
        handle_type,
    )
end

"""
Julian constructor for VkPhysicalDevicePerformanceQueryFeaturesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePerformanceQueryFeaturesKHR(
    next,
    performance_counter_query_pools,
    performance_counter_multiple_query_pools,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePerformanceQueryFeaturesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
        pNext,
        performance_counter_query_pools,
        performance_counter_multiple_query_pools,
    )
end

"""
Julian constructor for VkPhysicalDevicePerformanceQueryPropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePerformanceQueryPropertiesKHR(
    next,
    allow_command_buffer_query_copies,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePerformanceQueryPropertiesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
        pNext,
        allow_command_buffer_query_copies,
    )
end

"""
Julian constructor for VkPerformanceCounterKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceCounterKHR(next, unit, scope, storage, uuid)
    pNext = unsafe_pointer(next)
    uuid = to_vk(NTuple{16,UInt8}, uuid)
    api.VkPerformanceCounterKHR(
        VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
        pNext,
        unit,
        scope,
        storage,
        uuid,
    )
end

"""
Julian constructor for VkPerformanceCounterDescriptionKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceCounterDescriptionKHR(next, flags, name, category, description)
    pNext = unsafe_pointer(next)
    name = to_vk(NTuple{256,UInt8}, name)
    category = to_vk(NTuple{256,UInt8}, category)
    description = to_vk(NTuple{256,UInt8}, description)
    api.VkPerformanceCounterDescriptionKHR(
        VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
        pNext,
        flags,
        name,
        category,
        description,
    )
end

"""
Julian constructor for VkQueryPoolPerformanceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkQueryPoolPerformanceCreateInfoKHR(next, queue_family_index, counter_indices)
    pNext = unsafe_pointer(next)
    _counterIndexCount = pointer_length(counter_indices)
    pCounterIndices = unsafe_pointer(counter_indices)
    api.VkQueryPoolPerformanceCreateInfoKHR(
        VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
        pNext,
        queue_family_index,
        _counterIndexCount,
        pCounterIndices,
    )
end

"""
Julian constructor for VkAcquireProfilingLockInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAcquireProfilingLockInfoKHR(next, flags, timeout)
    pNext = unsafe_pointer(next)
    api.VkAcquireProfilingLockInfoKHR(
        VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
        pNext,
        flags,
        timeout,
    )
end

"""
Julian constructor for VkPerformanceQuerySubmitInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceQuerySubmitInfoKHR(next, counter_pass_index)
    pNext = unsafe_pointer(next)
    api.VkPerformanceQuerySubmitInfoKHR(
        VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
        pNext,
        counter_pass_index,
    )
end

"""
Julian constructor for VkPhysicalDeviceSurfaceInfo2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSurfaceInfo2KHR(next, surface)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSurfaceInfo2KHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
        pNext,
        surface,
    )
end

"""
Julian constructor for VkSurfaceCapabilities2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceCapabilities2KHR(next, surface_capabilities)
    pNext = unsafe_pointer(next)
    api.VkSurfaceCapabilities2KHR(
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
        pNext,
        surface_capabilities,
    )
end

"""
Julian constructor for VkSurfaceFormat2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceFormat2KHR(next, surface_format)
    pNext = unsafe_pointer(next)
    api.VkSurfaceFormat2KHR(VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, pNext, surface_format)
end

"""
Julian constructor for VkDisplayProperties2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayProperties2KHR(next, display_properties)
    pNext = unsafe_pointer(next)
    api.VkDisplayProperties2KHR(
        VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
        pNext,
        display_properties,
    )
end

"""
Julian constructor for VkDisplayPlaneProperties2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayPlaneProperties2KHR(next, display_plane_properties)
    pNext = unsafe_pointer(next)
    api.VkDisplayPlaneProperties2KHR(
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
        pNext,
        display_plane_properties,
    )
end

"""
Julian constructor for VkDisplayModeProperties2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayModeProperties2KHR(next, display_mode_properties)
    pNext = unsafe_pointer(next)
    api.VkDisplayModeProperties2KHR(
        VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
        pNext,
        display_mode_properties,
    )
end

"""
Julian constructor for VkDisplayPlaneInfo2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayPlaneInfo2KHR(next, mode, plane_index)
    pNext = unsafe_pointer(next)
    api.VkDisplayPlaneInfo2KHR(
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
        pNext,
        mode,
        plane_index,
    )
end

"""
Julian constructor for VkDisplayPlaneCapabilities2KHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayPlaneCapabilities2KHR(next, capabilities)
    pNext = unsafe_pointer(next)
    api.VkDisplayPlaneCapabilities2KHR(
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
        pNext,
        capabilities,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderClockFeaturesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderClockFeaturesKHR(
    next,
    shader_subgroup_clock,
    shader_device_clock,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderClockFeaturesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
        pNext,
        shader_subgroup_clock,
        shader_device_clock,
    )
end

"""
Julian constructor for VkSurfaceProtectedCapabilitiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceProtectedCapabilitiesKHR(next, supports_protected)
    pNext = unsafe_pointer(next)
    api.VkSurfaceProtectedCapabilitiesKHR(
        VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
        pNext,
        supports_protected,
    )
end

"""
Julian constructor for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    next,
    pipeline_executable_info,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
        pNext,
        pipeline_executable_info,
    )
end

"""
Julian constructor for VkPipelineInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineInfoKHR(next, pipeline)
    pNext = unsafe_pointer(next)
    api.VkPipelineInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, pNext, pipeline)
end

"""
Julian constructor for VkPipelineExecutablePropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineExecutablePropertiesKHR(
    next,
    stages,
    name,
    description,
    subgroup_size,
)
    pNext = unsafe_pointer(next)
    name = to_vk(NTuple{256,UInt8}, name)
    description = to_vk(NTuple{256,UInt8}, description)
    api.VkPipelineExecutablePropertiesKHR(
        VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
        pNext,
        stages,
        name,
        description,
        subgroup_size,
    )
end

"""
Julian constructor for VkPipelineExecutableInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineExecutableInfoKHR(next, pipeline, executable_index)
    pNext = unsafe_pointer(next)
    api.VkPipelineExecutableInfoKHR(
        VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
        pNext,
        pipeline,
        executable_index,
    )
end

"""
Julian constructor for VkPipelineExecutableStatisticKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineExecutableStatisticKHR(next, name, description, format, value)
    pNext = unsafe_pointer(next)
    name = to_vk(NTuple{256,UInt8}, name)
    description = to_vk(NTuple{256,UInt8}, description)
    api.VkPipelineExecutableStatisticKHR(
        VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
        pNext,
        name,
        description,
        format,
        value,
    )
end

"""
Julian constructor for VkPipelineExecutableInternalRepresentationKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineExecutableInternalRepresentationKHR(
    next,
    name,
    description,
    is_text,
    data,
)
    pNext = unsafe_pointer(next)
    name = to_vk(NTuple{256,UInt8}, name)
    description = to_vk(NTuple{256,UInt8}, description)
    _dataSize = pointer_length(data)
    pData = unsafe_pointer(data)
    api.VkPipelineExecutableInternalRepresentationKHR(
        VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
        pNext,
        name,
        description,
        is_text,
        _dataSize,
        pData,
    )
end

"""
Julian constructor for VkDebugReportCallbackCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugReportCallbackCreateInfoEXT(next, flags, callback, user_data)
    pNext = unsafe_pointer(next)
    pUserData = unsafe_pointer(user_data)
    api.VkDebugReportCallbackCreateInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
        pNext,
        flags,
        callback,
        pUserData,
    )
end

"""
Julian constructor for VkPipelineRasterizationStateRasterizationOrderAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationStateRasterizationOrderAMD(next, rasterization_order)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationStateRasterizationOrderAMD(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
        pNext,
        rasterization_order,
    )
end

"""
Julian constructor for VkDebugMarkerObjectNameInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugMarkerObjectNameInfoEXT(next, object_type, object, object_name)
    pNext = unsafe_pointer(next)
    pObjectName = unsafe_pointer(object_name)
    api.VkDebugMarkerObjectNameInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
        pNext,
        object_type,
        object,
        pObjectName,
    )
end

"""
Julian constructor for VkDebugMarkerObjectTagInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugMarkerObjectTagInfoEXT(next, object_type, object, tag_name, tag)
    pNext = unsafe_pointer(next)
    _tagSize = pointer_length(tag)
    pTag = unsafe_pointer(tag)
    api.VkDebugMarkerObjectTagInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
        pNext,
        object_type,
        object,
        tag_name,
        _tagSize,
        pTag,
    )
end

"""
Julian constructor for VkDebugMarkerMarkerInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugMarkerMarkerInfoEXT(next, marker_name, color)
    pNext = unsafe_pointer(next)
    pMarkerName = unsafe_pointer(marker_name)
    api.VkDebugMarkerMarkerInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
        pNext,
        pMarkerName,
        color,
    )
end

"""
Julian constructor for VkDedicatedAllocationImageCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDedicatedAllocationImageCreateInfoNV(next, dedicated_allocation)
    pNext = unsafe_pointer(next)
    api.VkDedicatedAllocationImageCreateInfoNV(
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
        pNext,
        dedicated_allocation,
    )
end

"""
Julian constructor for VkDedicatedAllocationBufferCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDedicatedAllocationBufferCreateInfoNV(next, dedicated_allocation)
    pNext = unsafe_pointer(next)
    api.VkDedicatedAllocationBufferCreateInfoNV(
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
        pNext,
        dedicated_allocation,
    )
end

"""
Julian constructor for VkDedicatedAllocationMemoryAllocateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDedicatedAllocationMemoryAllocateInfoNV(next, image, buffer)
    pNext = unsafe_pointer(next)
    api.VkDedicatedAllocationMemoryAllocateInfoNV(
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
        pNext,
        image,
        buffer,
    )
end

"""
Julian constructor for VkPhysicalDeviceTransformFeedbackFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    next,
    transform_feedback,
    geometry_streams,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTransformFeedbackFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
        pNext,
        transform_feedback,
        geometry_streams,
    )
end

"""
Julian constructor for VkPhysicalDeviceTransformFeedbackPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    next,
    max_transform_feedback_streams,
    max_transform_feedback_buffers,
    max_transform_feedback_buffer_size,
    max_transform_feedback_stream_data_size,
    max_transform_feedback_buffer_data_size,
    max_transform_feedback_buffer_data_stride,
    transform_feedback_queries,
    transform_feedback_streams_lines_triangles,
    transform_feedback_rasterization_stream_select,
    transform_feedback_draw,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTransformFeedbackPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
        pNext,
        max_transform_feedback_streams,
        max_transform_feedback_buffers,
        max_transform_feedback_buffer_size,
        max_transform_feedback_stream_data_size,
        max_transform_feedback_buffer_data_size,
        max_transform_feedback_buffer_data_stride,
        transform_feedback_queries,
        transform_feedback_streams_lines_triangles,
        transform_feedback_rasterization_stream_select,
        transform_feedback_draw,
    )
end

"""
Julian constructor for VkPipelineRasterizationStateStreamCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationStateStreamCreateInfoEXT(
    next,
    flags,
    rasterization_stream,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationStateStreamCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
        pNext,
        flags,
        rasterization_stream,
    )
end

"""
Julian constructor for VkImageViewHandleInfoNVX. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageViewHandleInfoNVX(next, image_view, descriptor_type, sampler)
    pNext = unsafe_pointer(next)
    api.VkImageViewHandleInfoNVX(
        VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
        pNext,
        image_view,
        descriptor_type,
        sampler,
    )
end

"""
Julian constructor for VkImageViewAddressPropertiesNVX. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageViewAddressPropertiesNVX(next, device_address, size)
    pNext = unsafe_pointer(next)
    api.VkImageViewAddressPropertiesNVX(
        VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
        pNext,
        device_address,
        size,
    )
end

"""
Julian constructor for VkTextureLODGatherFormatPropertiesAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkTextureLODGatherFormatPropertiesAMD(
    next,
    supports_texture_gather_lod_bias_amd,
)
    pNext = unsafe_pointer(next)
    api.VkTextureLODGatherFormatPropertiesAMD(
        VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
        pNext,
        supports_texture_gather_lod_bias_amd,
    )
end

"""
Julian constructor for VkPhysicalDeviceCornerSampledImageFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCornerSampledImageFeaturesNV(next, corner_sampled_image)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCornerSampledImageFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
        pNext,
        corner_sampled_image,
    )
end

"""
Julian constructor for VkExternalMemoryImageCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalMemoryImageCreateInfoNV(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExternalMemoryImageCreateInfoNV(
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkExportMemoryAllocateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportMemoryAllocateInfoNV(next, handle_types)
    pNext = unsafe_pointer(next)
    api.VkExportMemoryAllocateInfoNV(
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
        pNext,
        handle_types,
    )
end

"""
Julian constructor for VkValidationFlagsEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkValidationFlagsEXT(next, disabled_validation_checks)
    pNext = unsafe_pointer(next)
    _disabledValidationCheckCount = pointer_length(disabled_validation_checks)
    pDisabledValidationChecks = unsafe_pointer(disabled_validation_checks)
    api.VkValidationFlagsEXT(
        VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
        pNext,
        _disabledValidationCheckCount,
        pDisabledValidationChecks,
    )
end

"""
Julian constructor for VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    next,
    texture_compression_astc_hdr,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
        pNext,
        texture_compression_astc_hdr,
    )
end

"""
Julian constructor for VkImageViewASTCDecodeModeEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageViewASTCDecodeModeEXT(next, decode_mode)
    pNext = unsafe_pointer(next)
    api.VkImageViewASTCDecodeModeEXT(
        VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
        pNext,
        decode_mode,
    )
end

"""
Julian constructor for VkPhysicalDeviceASTCDecodeFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceASTCDecodeFeaturesEXT(next, decode_mode_shared_exponent)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceASTCDecodeFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
        pNext,
        decode_mode_shared_exponent,
    )
end

"""
Julian constructor for VkConditionalRenderingBeginInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkConditionalRenderingBeginInfoEXT(next, buffer, offset, flags)
    pNext = unsafe_pointer(next)
    api.VkConditionalRenderingBeginInfoEXT(
        VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
        pNext,
        buffer,
        offset,
        flags,
    )
end

"""
Julian constructor for VkPhysicalDeviceConditionalRenderingFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    next,
    conditional_rendering,
    inherited_conditional_rendering,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceConditionalRenderingFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
        pNext,
        conditional_rendering,
        inherited_conditional_rendering,
    )
end

"""
Julian constructor for VkCommandBufferInheritanceConditionalRenderingInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    next,
    conditional_rendering_enable,
)
    pNext = unsafe_pointer(next)
    api.VkCommandBufferInheritanceConditionalRenderingInfoEXT(
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
        pNext,
        conditional_rendering_enable,
    )
end

"""
Julian constructor for VkPipelineViewportWScalingStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportWScalingStateCreateInfoNV(
    next,
    viewport_w_scaling_enable,
    viewport_w_scalings,
)
    pNext = unsafe_pointer(next)
    _viewportCount = pointer_length(viewport_w_scalings)
    pViewportWScalings = unsafe_pointer(viewport_w_scalings)
    api.VkPipelineViewportWScalingStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
        pNext,
        viewport_w_scaling_enable,
        _viewportCount,
        pViewportWScalings,
    )
end

"""
Julian constructor for VkSurfaceCapabilities2EXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceCapabilities2EXT(
    next,
    min_image_count,
    max_image_count,
    current_extent,
    min_image_extent,
    max_image_extent,
    max_image_array_layers,
    supported_transforms,
    current_transform,
    supported_composite_alpha,
    supported_usage_flags,
    supported_surface_counters,
)
    pNext = unsafe_pointer(next)
    api.VkSurfaceCapabilities2EXT(
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
        pNext,
        min_image_count,
        max_image_count,
        current_extent,
        min_image_extent,
        max_image_extent,
        max_image_array_layers,
        supported_transforms,
        current_transform,
        supported_composite_alpha,
        supported_usage_flags,
        supported_surface_counters,
    )
end

"""
Julian constructor for VkDisplayPowerInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayPowerInfoEXT(next, power_state)
    pNext = unsafe_pointer(next)
    api.VkDisplayPowerInfoEXT(VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, pNext, power_state)
end

"""
Julian constructor for VkDeviceEventInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceEventInfoEXT(next, device_event)
    pNext = unsafe_pointer(next)
    api.VkDeviceEventInfoEXT(VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, pNext, device_event)
end

"""
Julian constructor for VkDisplayEventInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayEventInfoEXT(next, display_event)
    pNext = unsafe_pointer(next)
    api.VkDisplayEventInfoEXT(
        VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
        pNext,
        display_event,
    )
end

"""
Julian constructor for VkSwapchainCounterCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSwapchainCounterCreateInfoEXT(next, surface_counters)
    pNext = unsafe_pointer(next)
    api.VkSwapchainCounterCreateInfoEXT(
        VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
        pNext,
        surface_counters,
    )
end

"""
Julian constructor for VkPresentTimesInfoGOOGLE. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPresentTimesInfoGOOGLE(next, times)
    pNext = unsafe_pointer(next)
    _swapchainCount = pointer_length(times)
    pTimes = unsafe_pointer(times)
    api.VkPresentTimesInfoGOOGLE(
        VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
        pNext,
        _swapchainCount,
        pTimes,
    )
end

"""
Julian constructor for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    next,
    per_view_position_all_components,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
        pNext,
        per_view_position_all_components,
    )
end

"""
Julian constructor for VkPipelineViewportSwizzleStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportSwizzleStateCreateInfoNV(next, flags, viewport_swizzles)
    pNext = unsafe_pointer(next)
    _viewportCount = pointer_length(viewport_swizzles)
    pViewportSwizzles = unsafe_pointer(viewport_swizzles)
    api.VkPipelineViewportSwizzleStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
        pNext,
        flags,
        _viewportCount,
        pViewportSwizzles,
    )
end

"""
Julian constructor for VkPhysicalDeviceDiscardRectanglePropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDiscardRectanglePropertiesEXT(next, max_discard_rectangles)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDiscardRectanglePropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
        pNext,
        max_discard_rectangles,
    )
end

"""
Julian constructor for VkPipelineDiscardRectangleStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineDiscardRectangleStateCreateInfoEXT(
    next,
    flags,
    discard_rectangle_mode,
    discard_rectangles,
)
    pNext = unsafe_pointer(next)
    _discardRectangleCount = pointer_length(discard_rectangles)
    pDiscardRectangles = unsafe_pointer(discard_rectangles)
    api.VkPipelineDiscardRectangleStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
        pNext,
        flags,
        discard_rectangle_mode,
        _discardRectangleCount,
        pDiscardRectangles,
    )
end

"""
Julian constructor for VkPhysicalDeviceConservativeRasterizationPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    next,
    primitive_overestimation_size,
    max_extra_primitive_overestimation_size,
    extra_primitive_overestimation_size_granularity,
    primitive_underestimation,
    conservative_point_and_line_rasterization,
    degenerate_triangles_rasterized,
    degenerate_lines_rasterized,
    fully_covered_fragment_shader_input_variable,
    conservative_rasterization_post_depth_coverage,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
        pNext,
        primitive_overestimation_size,
        max_extra_primitive_overestimation_size,
        extra_primitive_overestimation_size_granularity,
        primitive_underestimation,
        conservative_point_and_line_rasterization,
        degenerate_triangles_rasterized,
        degenerate_lines_rasterized,
        fully_covered_fragment_shader_input_variable,
        conservative_rasterization_post_depth_coverage,
    )
end

"""
Julian constructor for VkPipelineRasterizationConservativeStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationConservativeStateCreateInfoEXT(
    next,
    flags,
    conservative_rasterization_mode,
    extra_primitive_overestimation_size,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationConservativeStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
        pNext,
        flags,
        conservative_rasterization_mode,
        extra_primitive_overestimation_size,
    )
end

"""
Julian constructor for VkPhysicalDeviceDepthClipEnableFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDepthClipEnableFeaturesEXT(next, depth_clip_enable)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDepthClipEnableFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
        pNext,
        depth_clip_enable,
    )
end

"""
Julian constructor for VkPipelineRasterizationDepthClipStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    next,
    flags,
    depth_clip_enable,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationDepthClipStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
        pNext,
        flags,
        depth_clip_enable,
    )
end

"""
Julian constructor for VkHdrMetadataEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkHdrMetadataEXT(
    next,
    display_primary_red,
    display_primary_green,
    display_primary_blue,
    white_point,
    max_luminance,
    min_luminance,
    max_content_light_level,
    max_frame_average_light_level,
)
    pNext = unsafe_pointer(next)
    api.VkHdrMetadataEXT(
        VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
        pNext,
        display_primary_red,
        display_primary_green,
        display_primary_blue,
        white_point,
        max_luminance,
        min_luminance,
        max_content_light_level,
        max_frame_average_light_level,
    )
end

"""
Julian constructor for VkDebugUtilsLabelEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugUtilsLabelEXT(next, label_name, color)
    pNext = unsafe_pointer(next)
    pLabelName = unsafe_pointer(label_name)
    api.VkDebugUtilsLabelEXT(
        VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
        pNext,
        pLabelName,
        color,
    )
end

"""
Julian constructor for VkDebugUtilsObjectNameInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugUtilsObjectNameInfoEXT(next, object_type, object_handle, object_name)
    pNext = unsafe_pointer(next)
    pObjectName = unsafe_pointer(object_name)
    api.VkDebugUtilsObjectNameInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
        pNext,
        object_type,
        object_handle,
        pObjectName,
    )
end

"""
Julian constructor for VkDebugUtilsMessengerCallbackDataEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugUtilsMessengerCallbackDataEXT(
    next,
    flags,
    message_id_name,
    message_id_number,
    message,
    queue_labels,
    cmd_buf_labels,
    objects,
)
    pNext = unsafe_pointer(next)
    pMessageIdName = unsafe_pointer(message_id_name)
    pMessage = unsafe_pointer(message)
    _queueLabelCount = pointer_length(queue_labels)
    pQueueLabels = unsafe_pointer(queue_labels)
    _cmdBufLabelCount = pointer_length(cmd_buf_labels)
    pCmdBufLabels = unsafe_pointer(cmd_buf_labels)
    _objectCount = pointer_length(objects)
    pObjects = unsafe_pointer(objects)
    api.VkDebugUtilsMessengerCallbackDataEXT(
        VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
        pNext,
        flags,
        pMessageIdName,
        message_id_number,
        pMessage,
        _queueLabelCount,
        pQueueLabels,
        _cmdBufLabelCount,
        pCmdBufLabels,
        _objectCount,
        pObjects,
    )
end

"""
Julian constructor for VkDebugUtilsMessengerCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugUtilsMessengerCreateInfoEXT(
    next,
    flags,
    message_severity,
    message_type,
    user_callback,
    user_data,
)
    pNext = unsafe_pointer(next)
    pUserData = unsafe_pointer(user_data)
    api.VkDebugUtilsMessengerCreateInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
        pNext,
        flags,
        message_severity,
        message_type,
        user_callback,
        pUserData,
    )
end

"""
Julian constructor for VkDebugUtilsObjectTagInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDebugUtilsObjectTagInfoEXT(next, object_type, object_handle, tag_name, tag)
    pNext = unsafe_pointer(next)
    _tagSize = pointer_length(tag)
    pTag = unsafe_pointer(tag)
    api.VkDebugUtilsObjectTagInfoEXT(
        VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
        pNext,
        object_type,
        object_handle,
        tag_name,
        _tagSize,
        pTag,
    )
end

"""
Julian constructor for VkPhysicalDeviceInlineUniformBlockFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    next,
    inline_uniform_block,
    descriptor_binding_inline_uniform_block_update_after_bind,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
        pNext,
        inline_uniform_block,
        descriptor_binding_inline_uniform_block_update_after_bind,
    )
end

"""
Julian constructor for VkPhysicalDeviceInlineUniformBlockPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    next,
    max_inline_uniform_block_size,
    max_per_stage_descriptor_inline_uniform_blocks,
    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
    max_descriptor_set_inline_uniform_blocks,
    max_descriptor_set_update_after_bind_inline_uniform_blocks,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
        pNext,
        max_inline_uniform_block_size,
        max_per_stage_descriptor_inline_uniform_blocks,
        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
        max_descriptor_set_inline_uniform_blocks,
        max_descriptor_set_update_after_bind_inline_uniform_blocks,
    )
end

"""
Julian constructor for VkWriteDescriptorSetInlineUniformBlockEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWriteDescriptorSetInlineUniformBlockEXT(next, data)
    pNext = unsafe_pointer(next)
    _dataSize = pointer_length(data)
    pData = unsafe_pointer(data)
    api.VkWriteDescriptorSetInlineUniformBlockEXT(
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
        pNext,
        _dataSize,
        pData,
    )
end

"""
Julian constructor for VkDescriptorPoolInlineUniformBlockCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    next,
    max_inline_uniform_block_bindings,
)
    pNext = unsafe_pointer(next)
    api.VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
        VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
        pNext,
        max_inline_uniform_block_bindings,
    )
end

"""
Julian constructor for VkSampleLocationsInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSampleLocationsInfoEXT(
    next,
    sample_locations_per_pixel,
    sample_location_grid_size,
    sample_locations,
)
    pNext = unsafe_pointer(next)
    _sampleLocationsCount = pointer_length(sample_locations)
    pSampleLocations = unsafe_pointer(sample_locations)
    api.VkSampleLocationsInfoEXT(
        VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
        pNext,
        sample_locations_per_pixel,
        sample_location_grid_size,
        _sampleLocationsCount,
        pSampleLocations,
    )
end

"""
Julian constructor for VkRenderPassSampleLocationsBeginInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassSampleLocationsBeginInfoEXT(
    next,
    attachment_initial_sample_locations,
    post_subpass_sample_locations,
)
    pNext = unsafe_pointer(next)
    _attachmentInitialSampleLocationsCount =
        pointer_length(attachment_initial_sample_locations)
    pAttachmentInitialSampleLocations = unsafe_pointer(attachment_initial_sample_locations)
    _postSubpassSampleLocationsCount = pointer_length(post_subpass_sample_locations)
    pPostSubpassSampleLocations = unsafe_pointer(post_subpass_sample_locations)
    api.VkRenderPassSampleLocationsBeginInfoEXT(
        VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
        pNext,
        _attachmentInitialSampleLocationsCount,
        pAttachmentInitialSampleLocations,
        _postSubpassSampleLocationsCount,
        pPostSubpassSampleLocations,
    )
end

"""
Julian constructor for VkPipelineSampleLocationsStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineSampleLocationsStateCreateInfoEXT(
    next,
    sample_locations_enable,
    sample_locations_info,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineSampleLocationsStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
        pNext,
        sample_locations_enable,
        sample_locations_info,
    )
end

"""
Julian constructor for VkPhysicalDeviceSampleLocationsPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSampleLocationsPropertiesEXT(
    next,
    sample_location_sample_counts,
    max_sample_location_grid_size,
    sample_location_coordinate_range,
    sample_location_sub_pixel_bits,
    variable_sample_locations,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSampleLocationsPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
        pNext,
        sample_location_sample_counts,
        max_sample_location_grid_size,
        sample_location_coordinate_range,
        sample_location_sub_pixel_bits,
        variable_sample_locations,
    )
end

"""
Julian constructor for VkMultisamplePropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMultisamplePropertiesEXT(next, max_sample_location_grid_size)
    pNext = unsafe_pointer(next)
    api.VkMultisamplePropertiesEXT(
        VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
        pNext,
        max_sample_location_grid_size,
    )
end

"""
Julian constructor for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    next,
    advanced_blend_coherent_operations,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
        pNext,
        advanced_blend_coherent_operations,
    )
end

"""
Julian constructor for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    next,
    advanced_blend_max_color_attachments,
    advanced_blend_independent_blend,
    advanced_blend_non_premultiplied_src_color,
    advanced_blend_non_premultiplied_dst_color,
    advanced_blend_correlated_overlap,
    advanced_blend_all_operations,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
        pNext,
        advanced_blend_max_color_attachments,
        advanced_blend_independent_blend,
        advanced_blend_non_premultiplied_src_color,
        advanced_blend_non_premultiplied_dst_color,
        advanced_blend_correlated_overlap,
        advanced_blend_all_operations,
    )
end

"""
Julian constructor for VkPipelineColorBlendAdvancedStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    next,
    src_premultiplied,
    dst_premultiplied,
    blend_overlap,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineColorBlendAdvancedStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
        pNext,
        src_premultiplied,
        dst_premultiplied,
        blend_overlap,
    )
end

"""
Julian constructor for VkPipelineCoverageToColorStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCoverageToColorStateCreateInfoNV(
    next,
    flags,
    coverage_to_color_enable,
    coverage_to_color_location,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineCoverageToColorStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
        pNext,
        flags,
        coverage_to_color_enable,
        coverage_to_color_location,
    )
end

"""
Julian constructor for VkPipelineCoverageModulationStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCoverageModulationStateCreateInfoNV(
    next,
    flags,
    coverage_modulation_mode,
    coverage_modulation_table_enable,
    coverage_modulation_table,
)
    pNext = unsafe_pointer(next)
    _coverageModulationTableCount = pointer_length(coverage_modulation_table)
    pCoverageModulationTable = unsafe_pointer(coverage_modulation_table)
    api.VkPipelineCoverageModulationStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
        pNext,
        flags,
        coverage_modulation_mode,
        coverage_modulation_table_enable,
        _coverageModulationTableCount,
        pCoverageModulationTable,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderSMBuiltinsPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    next,
    shader_sm_count,
    shader_warps_per_sm,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
        pNext,
        shader_sm_count,
        shader_warps_per_sm,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(next, shader_sm_builtins)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
        pNext,
        shader_sm_builtins,
    )
end

"""
Julian constructor for VkDrmFormatModifierPropertiesListEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDrmFormatModifierPropertiesListEXT(next, drm_format_modifier_properties)
    pNext = unsafe_pointer(next)
    _drmFormatModifierCount = pointer_length(drm_format_modifier_properties)
    pDrmFormatModifierProperties = unsafe_pointer(drm_format_modifier_properties)
    api.VkDrmFormatModifierPropertiesListEXT(
        VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
        pNext,
        _drmFormatModifierCount,
        pDrmFormatModifierProperties,
    )
end

"""
Julian constructor for VkPhysicalDeviceImageDrmFormatModifierInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    next,
    drm_format_modifier,
    sharing_mode,
    queue_family_indices,
)
    pNext = unsafe_pointer(next)
    _queueFamilyIndexCount = pointer_length(queue_family_indices)
    pQueueFamilyIndices = unsafe_pointer(queue_family_indices)
    api.VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
        pNext,
        drm_format_modifier,
        sharing_mode,
        _queueFamilyIndexCount,
        pQueueFamilyIndices,
    )
end

"""
Julian constructor for VkImageDrmFormatModifierListCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageDrmFormatModifierListCreateInfoEXT(next, drm_format_modifiers)
    pNext = unsafe_pointer(next)
    _drmFormatModifierCount = pointer_length(drm_format_modifiers)
    pDrmFormatModifiers = unsafe_pointer(drm_format_modifiers)
    api.VkImageDrmFormatModifierListCreateInfoEXT(
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
        pNext,
        _drmFormatModifierCount,
        pDrmFormatModifiers,
    )
end

"""
Julian constructor for VkImageDrmFormatModifierExplicitCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageDrmFormatModifierExplicitCreateInfoEXT(
    next,
    drm_format_modifier,
    plane_layouts,
)
    pNext = unsafe_pointer(next)
    _drmFormatModifierPlaneCount = pointer_length(plane_layouts)
    pPlaneLayouts = unsafe_pointer(plane_layouts)
    api.VkImageDrmFormatModifierExplicitCreateInfoEXT(
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
        pNext,
        drm_format_modifier,
        _drmFormatModifierPlaneCount,
        pPlaneLayouts,
    )
end

"""
Julian constructor for VkImageDrmFormatModifierPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImageDrmFormatModifierPropertiesEXT(next, drm_format_modifier)
    pNext = unsafe_pointer(next)
    api.VkImageDrmFormatModifierPropertiesEXT(
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
        pNext,
        drm_format_modifier,
    )
end

"""
Julian constructor for VkValidationCacheCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkValidationCacheCreateInfoEXT(next, flags, initial_data)
    pNext = unsafe_pointer(next)
    _initialDataSize = pointer_length(initial_data)
    pInitialData = unsafe_pointer(initial_data)
    api.VkValidationCacheCreateInfoEXT(
        VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
        pNext,
        flags,
        _initialDataSize,
        pInitialData,
    )
end

"""
Julian constructor for VkShaderModuleValidationCacheCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkShaderModuleValidationCacheCreateInfoEXT(next, validation_cache)
    pNext = unsafe_pointer(next)
    api.VkShaderModuleValidationCacheCreateInfoEXT(
        VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
        pNext,
        validation_cache,
    )
end

"""
Julian constructor for VkShadingRatePaletteNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkShadingRatePaletteNV(shading_rate_palette_entries)
    _shadingRatePaletteEntryCount = pointer_length(shading_rate_palette_entries)
    pShadingRatePaletteEntries = unsafe_pointer(shading_rate_palette_entries)
    api.VkShadingRatePaletteNV(_shadingRatePaletteEntryCount, pShadingRatePaletteEntries)
end

"""
Julian constructor for VkPipelineViewportShadingRateImageStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportShadingRateImageStateCreateInfoNV(
    next,
    shading_rate_image_enable,
    shading_rate_palettes,
)
    pNext = unsafe_pointer(next)
    _viewportCount = pointer_length(shading_rate_palettes)
    pShadingRatePalettes = unsafe_pointer(shading_rate_palettes)
    api.VkPipelineViewportShadingRateImageStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
        pNext,
        shading_rate_image_enable,
        _viewportCount,
        pShadingRatePalettes,
    )
end

"""
Julian constructor for VkPhysicalDeviceShadingRateImageFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShadingRateImageFeaturesNV(
    next,
    shading_rate_image,
    shading_rate_coarse_sample_order,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShadingRateImageFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
        pNext,
        shading_rate_image,
        shading_rate_coarse_sample_order,
    )
end

"""
Julian constructor for VkPhysicalDeviceShadingRateImagePropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShadingRateImagePropertiesNV(
    next,
    shading_rate_texel_size,
    shading_rate_palette_size,
    shading_rate_max_coarse_samples,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShadingRateImagePropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
        pNext,
        shading_rate_texel_size,
        shading_rate_palette_size,
        shading_rate_max_coarse_samples,
    )
end

"""
Julian constructor for VkCoarseSampleOrderCustomNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCoarseSampleOrderCustomNV(shading_rate, sample_count, sample_locations)
    _sampleLocationCount = pointer_length(sample_locations)
    pSampleLocations = unsafe_pointer(sample_locations)
    api.VkCoarseSampleOrderCustomNV(
        shading_rate,
        sample_count,
        _sampleLocationCount,
        pSampleLocations,
    )
end

"""
Julian constructor for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    next,
    sample_order_type,
    custom_sample_orders,
)
    pNext = unsafe_pointer(next)
    _customSampleOrderCount = pointer_length(custom_sample_orders)
    pCustomSampleOrders = unsafe_pointer(custom_sample_orders)
    api.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
        pNext,
        sample_order_type,
        _customSampleOrderCount,
        pCustomSampleOrders,
    )
end

"""
Julian constructor for VkRayTracingShaderGroupCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRayTracingShaderGroupCreateInfoNV(
    next,
    type,
    general_shader,
    closest_hit_shader,
    any_hit_shader,
    intersection_shader,
)
    pNext = unsafe_pointer(next)
    api.VkRayTracingShaderGroupCreateInfoNV(
        VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
        pNext,
        type,
        general_shader,
        closest_hit_shader,
        any_hit_shader,
        intersection_shader,
    )
end

"""
Julian constructor for VkRayTracingPipelineCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRayTracingPipelineCreateInfoNV(
    next,
    flags,
    stages,
    groups,
    max_recursion_depth,
    layout,
    base_pipeline_handle,
    base_pipeline_index,
)
    pNext = unsafe_pointer(next)
    _stageCount = pointer_length(stages)
    pStages = unsafe_pointer(stages)
    _groupCount = pointer_length(groups)
    pGroups = unsafe_pointer(groups)
    api.VkRayTracingPipelineCreateInfoNV(
        VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
        pNext,
        flags,
        _stageCount,
        pStages,
        _groupCount,
        pGroups,
        max_recursion_depth,
        layout,
        base_pipeline_handle,
        base_pipeline_index,
    )
end

"""
Julian constructor for VkGeometryTrianglesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGeometryTrianglesNV(
    next,
    vertex_data,
    vertex_offset,
    vertex_count,
    vertex_stride,
    vertex_format,
    index_data,
    index_offset,
    index_count,
    index_type,
    transform_data,
    transform_offset,
)
    pNext = unsafe_pointer(next)
    api.VkGeometryTrianglesNV(
        VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
        pNext,
        vertex_data,
        vertex_offset,
        vertex_count,
        vertex_stride,
        vertex_format,
        index_data,
        index_offset,
        index_count,
        index_type,
        transform_data,
        transform_offset,
    )
end

"""
Julian constructor for VkGeometryAABBNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGeometryAABBNV(next, aabb_data, num_aab_bs, stride, offset)
    pNext = unsafe_pointer(next)
    api.VkGeometryAABBNV(
        VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
        pNext,
        aabb_data,
        num_aab_bs,
        stride,
        offset,
    )
end

"""
Julian constructor for VkGeometryNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGeometryNV(next, geometry_type, geometry, flags)
    pNext = unsafe_pointer(next)
    api.VkGeometryNV(VK_STRUCTURE_TYPE_GEOMETRY_NV, pNext, geometry_type, geometry, flags)
end

"""
Julian constructor for VkAccelerationStructureInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureInfoNV(next, type, flags, instance_count, geometries)
    pNext = unsafe_pointer(next)
    _geometryCount = pointer_length(geometries)
    pGeometries = unsafe_pointer(geometries)
    api.VkAccelerationStructureInfoNV(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
        pNext,
        type,
        flags,
        instance_count,
        _geometryCount,
        pGeometries,
    )
end

"""
Julian constructor for VkAccelerationStructureCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureCreateInfoNV(next, compacted_size, info)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureCreateInfoNV(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
        pNext,
        compacted_size,
        info,
    )
end

"""
Julian constructor for VkBindAccelerationStructureMemoryInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBindAccelerationStructureMemoryInfoKHR(
    next,
    acceleration_structure,
    memory,
    memory_offset,
    device_indices,
)
    pNext = unsafe_pointer(next)
    _deviceIndexCount = pointer_length(device_indices)
    pDeviceIndices = unsafe_pointer(device_indices)
    api.VkBindAccelerationStructureMemoryInfoKHR(
        VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
        pNext,
        acceleration_structure,
        memory,
        memory_offset,
        _deviceIndexCount,
        pDeviceIndices,
    )
end

"""
Julian constructor for VkWriteDescriptorSetAccelerationStructureKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWriteDescriptorSetAccelerationStructureKHR(next, acceleration_structures)
    pNext = unsafe_pointer(next)
    _accelerationStructureCount = pointer_length(acceleration_structures)
    pAccelerationStructures = unsafe_pointer(acceleration_structures)
    api.VkWriteDescriptorSetAccelerationStructureKHR(
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
        pNext,
        _accelerationStructureCount,
        pAccelerationStructures,
    )
end

"""
Julian constructor for VkAccelerationStructureMemoryRequirementsInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureMemoryRequirementsInfoNV(
    next,
    type,
    acceleration_structure,
)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureMemoryRequirementsInfoNV(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
        pNext,
        type,
        acceleration_structure,
    )
end

"""
Julian constructor for VkPhysicalDeviceRayTracingPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRayTracingPropertiesNV(
    next,
    shader_group_handle_size,
    max_recursion_depth,
    max_shader_group_stride,
    shader_group_base_alignment,
    max_geometry_count,
    max_instance_count,
    max_triangle_count,
    max_descriptor_set_acceleration_structures,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRayTracingPropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
        pNext,
        shader_group_handle_size,
        max_recursion_depth,
        max_shader_group_stride,
        shader_group_base_alignment,
        max_geometry_count,
        max_instance_count,
        max_triangle_count,
        max_descriptor_set_acceleration_structures,
    )
end

"""
Julian constructor for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    next,
    representative_fragment_test,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
        pNext,
        representative_fragment_test,
    )
end

"""
Julian constructor for VkPipelineRepresentativeFragmentTestStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    next,
    representative_fragment_test_enable,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
        pNext,
        representative_fragment_test_enable,
    )
end

"""
Julian constructor for VkPhysicalDeviceImageViewImageFormatInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceImageViewImageFormatInfoEXT(next, image_view_type)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceImageViewImageFormatInfoEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
        pNext,
        image_view_type,
    )
end

"""
Julian constructor for VkFilterCubicImageViewImageFormatPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFilterCubicImageViewImageFormatPropertiesEXT(
    next,
    filter_cubic,
    filter_cubic_minmax,
)
    pNext = unsafe_pointer(next)
    api.VkFilterCubicImageViewImageFormatPropertiesEXT(
        VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
        pNext,
        filter_cubic,
        filter_cubic_minmax,
    )
end

"""
Julian constructor for VkDeviceQueueGlobalPriorityCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceQueueGlobalPriorityCreateInfoEXT(next, global_priority)
    pNext = unsafe_pointer(next)
    api.VkDeviceQueueGlobalPriorityCreateInfoEXT(
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
        pNext,
        global_priority,
    )
end

"""
Julian constructor for VkImportMemoryHostPointerInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportMemoryHostPointerInfoEXT(next, handle_type, host_pointer)
    pNext = unsafe_pointer(next)
    pHostPointer = unsafe_pointer(host_pointer)
    api.VkImportMemoryHostPointerInfoEXT(
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
        pNext,
        handle_type,
        pHostPointer,
    )
end

"""
Julian constructor for VkMemoryHostPointerPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryHostPointerPropertiesEXT(next, memory_type_bits)
    pNext = unsafe_pointer(next)
    api.VkMemoryHostPointerPropertiesEXT(
        VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
        pNext,
        memory_type_bits,
    )
end

"""
Julian constructor for VkPhysicalDeviceExternalMemoryHostPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    next,
    min_imported_host_pointer_alignment,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
        pNext,
        min_imported_host_pointer_alignment,
    )
end

"""
Julian constructor for VkPipelineCompilerControlCreateInfoAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCompilerControlCreateInfoAMD(next, compiler_control_flags)
    pNext = unsafe_pointer(next)
    api.VkPipelineCompilerControlCreateInfoAMD(
        VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
        pNext,
        compiler_control_flags,
    )
end

"""
Julian constructor for VkCalibratedTimestampInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCalibratedTimestampInfoEXT(next, time_domain)
    pNext = unsafe_pointer(next)
    api.VkCalibratedTimestampInfoEXT(
        VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
        pNext,
        time_domain,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderCorePropertiesAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderCorePropertiesAMD(
    next,
    shader_engine_count,
    shader_arrays_per_engine_count,
    compute_units_per_shader_array,
    simd_per_compute_unit,
    wavefronts_per_simd,
    wavefront_size,
    sgprs_per_simd,
    min_sgpr_allocation,
    max_sgpr_allocation,
    sgpr_allocation_granularity,
    vgprs_per_simd,
    min_vgpr_allocation,
    max_vgpr_allocation,
    vgpr_allocation_granularity,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderCorePropertiesAMD(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
        pNext,
        shader_engine_count,
        shader_arrays_per_engine_count,
        compute_units_per_shader_array,
        simd_per_compute_unit,
        wavefronts_per_simd,
        wavefront_size,
        sgprs_per_simd,
        min_sgpr_allocation,
        max_sgpr_allocation,
        sgpr_allocation_granularity,
        vgprs_per_simd,
        min_vgpr_allocation,
        max_vgpr_allocation,
        vgpr_allocation_granularity,
    )
end

"""
Julian constructor for VkDeviceMemoryOverallocationCreateInfoAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceMemoryOverallocationCreateInfoAMD(next, overallocation_behavior)
    pNext = unsafe_pointer(next)
    api.VkDeviceMemoryOverallocationCreateInfoAMD(
        VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
        pNext,
        overallocation_behavior,
    )
end

"""
Julian constructor for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    next,
    max_vertex_attrib_divisor,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
        pNext,
        max_vertex_attrib_divisor,
    )
end

"""
Julian constructor for VkPipelineVertexInputDivisorStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineVertexInputDivisorStateCreateInfoEXT(next, vertex_binding_divisors)
    pNext = unsafe_pointer(next)
    _vertexBindingDivisorCount = pointer_length(vertex_binding_divisors)
    pVertexBindingDivisors = unsafe_pointer(vertex_binding_divisors)
    api.VkPipelineVertexInputDivisorStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
        pNext,
        _vertexBindingDivisorCount,
        pVertexBindingDivisors,
    )
end

"""
Julian constructor for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    next,
    vertex_attribute_instance_rate_divisor,
    vertex_attribute_instance_rate_zero_divisor,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
        pNext,
        vertex_attribute_instance_rate_divisor,
        vertex_attribute_instance_rate_zero_divisor,
    )
end

"""
Julian constructor for VkPipelineCreationFeedbackCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCreationFeedbackCreateInfoEXT(
    next,
    pipeline_creation_feedback,
    pipeline_stage_creation_feedbacks,
)
    pNext = unsafe_pointer(next)
    pPipelineCreationFeedback = unsafe_pointer(pipeline_creation_feedback)
    _pipelineStageCreationFeedbackCount = pointer_length(pipeline_stage_creation_feedbacks)
    pPipelineStageCreationFeedbacks = unsafe_pointer(pipeline_stage_creation_feedbacks)
    api.VkPipelineCreationFeedbackCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
        pNext,
        pPipelineCreationFeedback,
        _pipelineStageCreationFeedbackCount,
        pPipelineStageCreationFeedbacks,
    )
end

"""
Julian constructor for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    next,
    compute_derivative_group_quads,
    compute_derivative_group_linear,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
        pNext,
        compute_derivative_group_quads,
        compute_derivative_group_linear,
    )
end

"""
Julian constructor for VkPhysicalDeviceMeshShaderFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMeshShaderFeaturesNV(next, task_shader, mesh_shader)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMeshShaderFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
        pNext,
        task_shader,
        mesh_shader,
    )
end

"""
Julian constructor for VkPhysicalDeviceMeshShaderPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMeshShaderPropertiesNV(
    next,
    max_draw_mesh_tasks_count,
    max_task_work_group_invocations,
    max_task_work_group_size,
    max_task_total_memory_size,
    max_task_output_count,
    max_mesh_work_group_invocations,
    max_mesh_work_group_size,
    max_mesh_total_memory_size,
    max_mesh_output_vertices,
    max_mesh_output_primitives,
    max_mesh_multiview_view_count,
    mesh_output_per_vertex_granularity,
    mesh_output_per_primitive_granularity,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMeshShaderPropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
        pNext,
        max_draw_mesh_tasks_count,
        max_task_work_group_invocations,
        max_task_work_group_size,
        max_task_total_memory_size,
        max_task_output_count,
        max_mesh_work_group_invocations,
        max_mesh_work_group_size,
        max_mesh_total_memory_size,
        max_mesh_output_vertices,
        max_mesh_output_primitives,
        max_mesh_multiview_view_count,
        mesh_output_per_vertex_granularity,
        mesh_output_per_primitive_granularity,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    next,
    fragment_shader_barycentric,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
        pNext,
        fragment_shader_barycentric,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderImageFootprintFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderImageFootprintFeaturesNV(next, image_footprint)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderImageFootprintFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
        pNext,
        image_footprint,
    )
end

"""
Julian constructor for VkPipelineViewportExclusiveScissorStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineViewportExclusiveScissorStateCreateInfoNV(next, exclusive_scissors)
    pNext = unsafe_pointer(next)
    _exclusiveScissorCount = pointer_length(exclusive_scissors)
    pExclusiveScissors = unsafe_pointer(exclusive_scissors)
    api.VkPipelineViewportExclusiveScissorStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
        pNext,
        _exclusiveScissorCount,
        pExclusiveScissors,
    )
end

"""
Julian constructor for VkPhysicalDeviceExclusiveScissorFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExclusiveScissorFeaturesNV(next, exclusive_scissor)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExclusiveScissorFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
        pNext,
        exclusive_scissor,
    )
end

"""
Julian constructor for VkQueueFamilyCheckpointPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkQueueFamilyCheckpointPropertiesNV(next, checkpoint_execution_stage_mask)
    pNext = unsafe_pointer(next)
    api.VkQueueFamilyCheckpointPropertiesNV(
        VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
        pNext,
        checkpoint_execution_stage_mask,
    )
end

"""
Julian constructor for VkCheckpointDataNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCheckpointDataNV(next, stage, checkpoint_marker)
    pNext = unsafe_pointer(next)
    pCheckpointMarker = unsafe_pointer(checkpoint_marker)
    api.VkCheckpointDataNV(
        VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
        pNext,
        stage,
        pCheckpointMarker,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    next,
    shader_integer_functions_2,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
        pNext,
        shader_integer_functions_2,
    )
end

"""
Julian constructor for VkInitializePerformanceApiInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkInitializePerformanceApiInfoINTEL(next, user_data)
    pNext = unsafe_pointer(next)
    pUserData = unsafe_pointer(user_data)
    api.VkInitializePerformanceApiInfoINTEL(
        VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
        pNext,
        pUserData,
    )
end

"""
Julian constructor for VkQueryPoolPerformanceQueryCreateInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkQueryPoolPerformanceQueryCreateInfoINTEL(next, performance_counters_sampling)
    pNext = unsafe_pointer(next)
    api.VkQueryPoolPerformanceQueryCreateInfoINTEL(
        VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
        pNext,
        performance_counters_sampling,
    )
end

"""
Julian constructor for VkPerformanceMarkerInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceMarkerInfoINTEL(next, marker)
    pNext = unsafe_pointer(next)
    api.VkPerformanceMarkerInfoINTEL(
        VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
        pNext,
        marker,
    )
end

"""
Julian constructor for VkPerformanceStreamMarkerInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceStreamMarkerInfoINTEL(next, marker)
    pNext = unsafe_pointer(next)
    api.VkPerformanceStreamMarkerInfoINTEL(
        VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
        pNext,
        marker,
    )
end

"""
Julian constructor for VkPerformanceOverrideInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceOverrideInfoINTEL(next, type, enable, parameter)
    pNext = unsafe_pointer(next)
    api.VkPerformanceOverrideInfoINTEL(
        VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
        pNext,
        type,
        enable,
        parameter,
    )
end

"""
Julian constructor for VkPerformanceConfigurationAcquireInfoINTEL. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPerformanceConfigurationAcquireInfoINTEL(next, type)
    pNext = unsafe_pointer(next)
    api.VkPerformanceConfigurationAcquireInfoINTEL(
        VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
        pNext,
        type,
    )
end

"""
Julian constructor for VkPhysicalDevicePCIBusInfoPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePCIBusInfoPropertiesEXT(
    next,
    pci_domain,
    pci_bus,
    pci_device,
    pci_function,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePCIBusInfoPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
        pNext,
        pci_domain,
        pci_bus,
        pci_device,
        pci_function,
    )
end

"""
Julian constructor for VkDisplayNativeHdrSurfaceCapabilitiesAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDisplayNativeHdrSurfaceCapabilitiesAMD(next, local_dimming_support)
    pNext = unsafe_pointer(next)
    api.VkDisplayNativeHdrSurfaceCapabilitiesAMD(
        VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
        pNext,
        local_dimming_support,
    )
end

"""
Julian constructor for VkSwapchainDisplayNativeHdrCreateInfoAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSwapchainDisplayNativeHdrCreateInfoAMD(next, local_dimming_enable)
    pNext = unsafe_pointer(next)
    api.VkSwapchainDisplayNativeHdrCreateInfoAMD(
        VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
        pNext,
        local_dimming_enable,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentDensityMapFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    next,
    fragment_density_map,
    fragment_density_map_dynamic,
    fragment_density_map_non_subsampled_images,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
        pNext,
        fragment_density_map,
        fragment_density_map_dynamic,
        fragment_density_map_non_subsampled_images,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentDensityMapPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    next,
    min_fragment_density_texel_size,
    max_fragment_density_texel_size,
    fragment_density_invocations,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
        pNext,
        min_fragment_density_texel_size,
        max_fragment_density_texel_size,
        fragment_density_invocations,
    )
end

"""
Julian constructor for VkRenderPassFragmentDensityMapCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassFragmentDensityMapCreateInfoEXT(
    next,
    fragment_density_map_attachment,
)
    pNext = unsafe_pointer(next)
    api.VkRenderPassFragmentDensityMapCreateInfoEXT(
        VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
        pNext,
        fragment_density_map_attachment,
    )
end

"""
Julian constructor for VkPhysicalDeviceSubgroupSizeControlFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    next,
    subgroup_size_control,
    compute_full_subgroups,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
        pNext,
        subgroup_size_control,
        compute_full_subgroups,
    )
end

"""
Julian constructor for VkPhysicalDeviceSubgroupSizeControlPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    next,
    min_subgroup_size,
    max_subgroup_size,
    max_compute_workgroup_subgroups,
    required_subgroup_size_stages,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
        pNext,
        min_subgroup_size,
        max_subgroup_size,
        max_compute_workgroup_subgroups,
        required_subgroup_size_stages,
    )
end

"""
Julian constructor for VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    next,
    required_subgroup_size,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
        pNext,
        required_subgroup_size,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderCoreProperties2AMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderCoreProperties2AMD(
    next,
    shader_core_features,
    active_compute_unit_count,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderCoreProperties2AMD(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
        pNext,
        shader_core_features,
        active_compute_unit_count,
    )
end

"""
Julian constructor for VkPhysicalDeviceCoherentMemoryFeaturesAMD. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCoherentMemoryFeaturesAMD(next, device_coherent_memory)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCoherentMemoryFeaturesAMD(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
        pNext,
        device_coherent_memory,
    )
end

"""
Julian constructor for VkPhysicalDeviceMemoryBudgetPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMemoryBudgetPropertiesEXT(next, heap_budget, heap_usage)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMemoryBudgetPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
        pNext,
        heap_budget,
        heap_usage,
    )
end

"""
Julian constructor for VkPhysicalDeviceMemoryPriorityFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceMemoryPriorityFeaturesEXT(next, memory_priority)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceMemoryPriorityFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
        pNext,
        memory_priority,
    )
end

"""
Julian constructor for VkMemoryPriorityAllocateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryPriorityAllocateInfoEXT(next, priority)
    pNext = unsafe_pointer(next)
    api.VkMemoryPriorityAllocateInfoEXT(
        VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
        pNext,
        priority,
    )
end

"""
Julian constructor for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    next,
    dedicated_allocation_image_aliasing,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
        pNext,
        dedicated_allocation_image_aliasing,
    )
end

"""
Julian constructor for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    next,
    buffer_device_address,
    buffer_device_address_capture_replay,
    buffer_device_address_multi_device,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
        pNext,
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device,
    )
end

"""
Julian constructor for VkBufferDeviceAddressCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkBufferDeviceAddressCreateInfoEXT(next, device_address)
    pNext = unsafe_pointer(next)
    api.VkBufferDeviceAddressCreateInfoEXT(
        VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
        pNext,
        device_address,
    )
end

"""
Julian constructor for VkPhysicalDeviceToolPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceToolPropertiesEXT(
    next,
    name,
    version,
    purposes,
    description,
    layer,
)
    pNext = unsafe_pointer(next)
    name = to_vk(NTuple{256,UInt8}, name)
    version = to_vk(NTuple{256,UInt8}, version)
    description = to_vk(NTuple{256,UInt8}, description)
    layer = to_vk(NTuple{256,UInt8}, layer)
    api.VkPhysicalDeviceToolPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
        pNext,
        name,
        version,
        purposes,
        description,
        layer,
    )
end

"""
Julian constructor for VkValidationFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkValidationFeaturesEXT(
    next,
    enabled_validation_features,
    disabled_validation_features,
)
    pNext = unsafe_pointer(next)
    _enabledValidationFeatureCount = pointer_length(enabled_validation_features)
    pEnabledValidationFeatures = unsafe_pointer(enabled_validation_features)
    _disabledValidationFeatureCount = pointer_length(disabled_validation_features)
    pDisabledValidationFeatures = unsafe_pointer(disabled_validation_features)
    api.VkValidationFeaturesEXT(
        VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
        pNext,
        _enabledValidationFeatureCount,
        pEnabledValidationFeatures,
        _disabledValidationFeatureCount,
        pDisabledValidationFeatures,
    )
end

"""
Julian constructor for VkCooperativeMatrixPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCooperativeMatrixPropertiesNV(
    next,
    m_size,
    n_size,
    k_size,
    a_type,
    b_type,
    c_type,
    d_type,
    scope,
)
    pNext = unsafe_pointer(next)
    api.VkCooperativeMatrixPropertiesNV(
        VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
        pNext,
        m_size,
        n_size,
        k_size,
        a_type,
        b_type,
        c_type,
        d_type,
        scope,
    )
end

"""
Julian constructor for VkPhysicalDeviceCooperativeMatrixFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    next,
    cooperative_matrix,
    cooperative_matrix_robust_buffer_access,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCooperativeMatrixFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
        pNext,
        cooperative_matrix,
        cooperative_matrix_robust_buffer_access,
    )
end

"""
Julian constructor for VkPhysicalDeviceCooperativeMatrixPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    next,
    cooperative_matrix_supported_stages,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCooperativeMatrixPropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
        pNext,
        cooperative_matrix_supported_stages,
    )
end

"""
Julian constructor for VkPhysicalDeviceCoverageReductionModeFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCoverageReductionModeFeaturesNV(next, coverage_reduction_mode)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCoverageReductionModeFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
        pNext,
        coverage_reduction_mode,
    )
end

"""
Julian constructor for VkPipelineCoverageReductionStateCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineCoverageReductionStateCreateInfoNV(
    next,
    flags,
    coverage_reduction_mode,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineCoverageReductionStateCreateInfoNV(
        VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
        pNext,
        flags,
        coverage_reduction_mode,
    )
end

"""
Julian constructor for VkFramebufferMixedSamplesCombinationNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFramebufferMixedSamplesCombinationNV(
    next,
    coverage_reduction_mode,
    rasterization_samples,
    depth_stencil_samples,
    color_samples,
)
    pNext = unsafe_pointer(next)
    api.VkFramebufferMixedSamplesCombinationNV(
        VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
        pNext,
        coverage_reduction_mode,
        rasterization_samples,
        depth_stencil_samples,
        color_samples,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    next,
    fragment_shader_sample_interlock,
    fragment_shader_pixel_interlock,
    fragment_shader_shading_rate_interlock,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
        pNext,
        fragment_shader_sample_interlock,
        fragment_shader_pixel_interlock,
        fragment_shader_shading_rate_interlock,
    )
end

"""
Julian constructor for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(next, ycbcr_image_arrays)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
        pNext,
        ycbcr_image_arrays,
    )
end

"""
Julian constructor for VkHeadlessSurfaceCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkHeadlessSurfaceCreateInfoEXT(next, flags)
    pNext = unsafe_pointer(next)
    api.VkHeadlessSurfaceCreateInfoEXT(
        VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
        pNext,
        flags,
    )
end

"""
Julian constructor for VkPhysicalDeviceLineRasterizationFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceLineRasterizationFeaturesEXT(
    next,
    rectangular_lines,
    bresenham_lines,
    smooth_lines,
    stippled_rectangular_lines,
    stippled_bresenham_lines,
    stippled_smooth_lines,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceLineRasterizationFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
        pNext,
        rectangular_lines,
        bresenham_lines,
        smooth_lines,
        stippled_rectangular_lines,
        stippled_bresenham_lines,
        stippled_smooth_lines,
    )
end

"""
Julian constructor for VkPhysicalDeviceLineRasterizationPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceLineRasterizationPropertiesEXT(
    next,
    line_sub_pixel_precision_bits,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceLineRasterizationPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
        pNext,
        line_sub_pixel_precision_bits,
    )
end

"""
Julian constructor for VkPipelineRasterizationLineStateCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineRasterizationLineStateCreateInfoEXT(
    next,
    line_rasterization_mode,
    stippled_line_enable,
    line_stipple_factor,
    line_stipple_pattern,
)
    pNext = unsafe_pointer(next)
    api.VkPipelineRasterizationLineStateCreateInfoEXT(
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
        pNext,
        line_rasterization_mode,
        stippled_line_enable,
        line_stipple_factor,
        line_stipple_pattern,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    next,
    shader_buffer_float_32_atomics,
    shader_buffer_float_32_atomic_add,
    shader_buffer_float_64_atomics,
    shader_buffer_float_64_atomic_add,
    shader_shared_float_32_atomics,
    shader_shared_float_32_atomic_add,
    shader_shared_float_64_atomics,
    shader_shared_float_64_atomic_add,
    shader_image_float_32_atomics,
    shader_image_float_32_atomic_add,
    sparse_image_float_32_atomics,
    sparse_image_float_32_atomic_add,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
        pNext,
        shader_buffer_float_32_atomics,
        shader_buffer_float_32_atomic_add,
        shader_buffer_float_64_atomics,
        shader_buffer_float_64_atomic_add,
        shader_shared_float_32_atomics,
        shader_shared_float_32_atomic_add,
        shader_shared_float_64_atomics,
        shader_shared_float_64_atomic_add,
        shader_image_float_32_atomics,
        shader_image_float_32_atomic_add,
        sparse_image_float_32_atomics,
        sparse_image_float_32_atomic_add,
    )
end

"""
Julian constructor for VkPhysicalDeviceIndexTypeUint8FeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceIndexTypeUint8FeaturesEXT(next, index_type_uint_8)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
        pNext,
        index_type_uint_8,
    )
end

"""
Julian constructor for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(next, extended_dynamic_state)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
        pNext,
        extended_dynamic_state,
    )
end

"""
Julian constructor for VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    next,
    shader_demote_to_helper_invocation,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
        pNext,
        shader_demote_to_helper_invocation,
    )
end

"""
Julian constructor for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    next,
    max_graphics_shader_group_count,
    max_indirect_sequence_count,
    max_indirect_commands_token_count,
    max_indirect_commands_stream_count,
    max_indirect_commands_token_offset,
    max_indirect_commands_stream_stride,
    min_sequences_count_buffer_offset_alignment,
    min_sequences_index_buffer_offset_alignment,
    min_indirect_commands_buffer_offset_alignment,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
        pNext,
        max_graphics_shader_group_count,
        max_indirect_sequence_count,
        max_indirect_commands_token_count,
        max_indirect_commands_stream_count,
        max_indirect_commands_token_offset,
        max_indirect_commands_stream_stride,
        min_sequences_count_buffer_offset_alignment,
        min_sequences_index_buffer_offset_alignment,
        min_indirect_commands_buffer_offset_alignment,
    )
end

"""
Julian constructor for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    next,
    device_generated_commands,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
        pNext,
        device_generated_commands,
    )
end

"""
Julian constructor for VkGraphicsShaderGroupCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGraphicsShaderGroupCreateInfoNV(
    next,
    stages,
    vertex_input_state,
    tessellation_state,
)
    pNext = unsafe_pointer(next)
    _stageCount = pointer_length(stages)
    pStages = unsafe_pointer(stages)
    pVertexInputState = unsafe_pointer(vertex_input_state)
    pTessellationState = unsafe_pointer(tessellation_state)
    api.VkGraphicsShaderGroupCreateInfoNV(
        VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
        pNext,
        _stageCount,
        pStages,
        pVertexInputState,
        pTessellationState,
    )
end

"""
Julian constructor for VkGraphicsPipelineShaderGroupsCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGraphicsPipelineShaderGroupsCreateInfoNV(next, groups, pipelines)
    pNext = unsafe_pointer(next)
    _groupCount = pointer_length(groups)
    pGroups = unsafe_pointer(groups)
    _pipelineCount = pointer_length(pipelines)
    pPipelines = unsafe_pointer(pipelines)
    api.VkGraphicsPipelineShaderGroupsCreateInfoNV(
        VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
        pNext,
        _groupCount,
        pGroups,
        _pipelineCount,
        pPipelines,
    )
end

"""
Julian constructor for VkIndirectCommandsLayoutTokenNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkIndirectCommandsLayoutTokenNV(
    next,
    token_type,
    stream,
    offset,
    vertex_binding_unit,
    vertex_dynamic_stride,
    pushconstant_pipeline_layout,
    pushconstant_shader_stage_flags,
    pushconstant_offset,
    pushconstant_size,
    indirect_state_flags,
    index_types,
    index_type_values,
)
    pNext = unsafe_pointer(next)
    _indexTypeCount = pointer_length(index_types)
    pIndexTypes = unsafe_pointer(index_types)
    pIndexTypeValues = unsafe_pointer(index_type_values)
    api.VkIndirectCommandsLayoutTokenNV(
        VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
        pNext,
        token_type,
        stream,
        offset,
        vertex_binding_unit,
        vertex_dynamic_stride,
        pushconstant_pipeline_layout,
        pushconstant_shader_stage_flags,
        pushconstant_offset,
        pushconstant_size,
        indirect_state_flags,
        _indexTypeCount,
        pIndexTypes,
        pIndexTypeValues,
    )
end

"""
Julian constructor for VkIndirectCommandsLayoutCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkIndirectCommandsLayoutCreateInfoNV(
    next,
    flags,
    pipeline_bind_point,
    tokens,
    stream_strides,
)
    pNext = unsafe_pointer(next)
    _tokenCount = pointer_length(tokens)
    pTokens = unsafe_pointer(tokens)
    _streamCount = pointer_length(stream_strides)
    pStreamStrides = unsafe_pointer(stream_strides)
    api.VkIndirectCommandsLayoutCreateInfoNV(
        VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
        pNext,
        flags,
        pipeline_bind_point,
        _tokenCount,
        pTokens,
        _streamCount,
        pStreamStrides,
    )
end

"""
Julian constructor for VkGeneratedCommandsInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGeneratedCommandsInfoNV(
    next,
    pipeline_bind_point,
    pipeline,
    indirect_commands_layout,
    streams,
    sequences_count,
    preprocess_buffer,
    preprocess_offset,
    preprocess_size,
    sequences_count_buffer,
    sequences_count_offset,
    sequences_index_buffer,
    sequences_index_offset,
)
    pNext = unsafe_pointer(next)
    _streamCount = pointer_length(streams)
    pStreams = unsafe_pointer(streams)
    api.VkGeneratedCommandsInfoNV(
        VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
        pNext,
        pipeline_bind_point,
        pipeline,
        indirect_commands_layout,
        _streamCount,
        pStreams,
        sequences_count,
        preprocess_buffer,
        preprocess_offset,
        preprocess_size,
        sequences_count_buffer,
        sequences_count_offset,
        sequences_index_buffer,
        sequences_index_offset,
    )
end

"""
Julian constructor for VkGeneratedCommandsMemoryRequirementsInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkGeneratedCommandsMemoryRequirementsInfoNV(
    next,
    pipeline_bind_point,
    pipeline,
    indirect_commands_layout,
    max_sequences_count,
)
    pNext = unsafe_pointer(next)
    api.VkGeneratedCommandsMemoryRequirementsInfoNV(
        VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
        pNext,
        pipeline_bind_point,
        pipeline,
        indirect_commands_layout,
        max_sequences_count,
    )
end

"""
Julian constructor for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(next, texel_buffer_alignment)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
        pNext,
        texel_buffer_alignment,
    )
end

"""
Julian constructor for VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    next,
    storage_texel_buffer_offset_alignment_bytes,
    storage_texel_buffer_offset_single_texel_alignment,
    uniform_texel_buffer_offset_alignment_bytes,
    uniform_texel_buffer_offset_single_texel_alignment,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
        pNext,
        storage_texel_buffer_offset_alignment_bytes,
        storage_texel_buffer_offset_single_texel_alignment,
        uniform_texel_buffer_offset_alignment_bytes,
        uniform_texel_buffer_offset_single_texel_alignment,
    )
end

"""
Julian constructor for VkRenderPassTransformBeginInfoQCOM. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRenderPassTransformBeginInfoQCOM(next, transform)
    pNext = unsafe_pointer(next)
    api.VkRenderPassTransformBeginInfoQCOM(
        VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
        pNext,
        transform,
    )
end

"""
Julian constructor for VkCommandBufferInheritanceRenderPassTransformInfoQCOM. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    next,
    transform,
    render_area,
)
    pNext = unsafe_pointer(next)
    api.VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
        pNext,
        transform,
        render_area,
    )
end

"""
Julian constructor for VkPhysicalDeviceRobustness2FeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRobustness2FeaturesEXT(
    next,
    robust_buffer_access_2,
    robust_image_access_2,
    null_descriptor,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRobustness2FeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
        pNext,
        robust_buffer_access_2,
        robust_image_access_2,
        null_descriptor,
    )
end

"""
Julian constructor for VkPhysicalDeviceRobustness2PropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRobustness2PropertiesEXT(
    next,
    robust_storage_buffer_access_size_alignment,
    robust_uniform_buffer_access_size_alignment,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRobustness2PropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
        pNext,
        robust_storage_buffer_access_size_alignment,
        robust_uniform_buffer_access_size_alignment,
    )
end

"""
Julian constructor for VkSamplerCustomBorderColorCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSamplerCustomBorderColorCreateInfoEXT(next, custom_border_color, format)
    pNext = unsafe_pointer(next)
    api.VkSamplerCustomBorderColorCreateInfoEXT(
        VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
        pNext,
        custom_border_color,
        format,
    )
end

"""
Julian constructor for VkPhysicalDeviceCustomBorderColorPropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    next,
    max_custom_border_color_samplers,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCustomBorderColorPropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
        pNext,
        max_custom_border_color_samplers,
    )
end

"""
Julian constructor for VkPhysicalDeviceCustomBorderColorFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    next,
    custom_border_colors,
    custom_border_color_without_format,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceCustomBorderColorFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
        pNext,
        custom_border_colors,
        custom_border_color_without_format,
    )
end

"""
Julian constructor for VkPhysicalDevicePrivateDataFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePrivateDataFeaturesEXT(next, private_data)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePrivateDataFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
        pNext,
        private_data,
    )
end

"""
Julian constructor for VkDevicePrivateDataCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDevicePrivateDataCreateInfoEXT(next, private_data_slot_request_count)
    pNext = unsafe_pointer(next)
    api.VkDevicePrivateDataCreateInfoEXT(
        VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
        pNext,
        private_data_slot_request_count,
    )
end

"""
Julian constructor for VkPrivateDataSlotCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPrivateDataSlotCreateInfoEXT(next, flags)
    pNext = unsafe_pointer(next)
    api.VkPrivateDataSlotCreateInfoEXT(
        VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
        pNext,
        flags,
    )
end

"""
Julian constructor for VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    next,
    pipeline_creation_cache_control,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
        pNext,
        pipeline_creation_cache_control,
    )
end

"""
Julian constructor for VkPhysicalDeviceDiagnosticsConfigFeaturesNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceDiagnosticsConfigFeaturesNV(next, diagnostics_config)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
        pNext,
        diagnostics_config,
    )
end

"""
Julian constructor for VkDeviceDiagnosticsConfigCreateInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeviceDiagnosticsConfigCreateInfoNV(next, flags)
    pNext = unsafe_pointer(next)
    api.VkDeviceDiagnosticsConfigCreateInfoNV(
        VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
        pNext,
        flags,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    next,
    fragment_density_map_deferred,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
        pNext,
        fragment_density_map_deferred,
    )
end

"""
Julian constructor for VkPhysicalDeviceFragmentDensityMap2PropertiesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    next,
    subsampled_loads,
    subsampled_coarse_reconstruction_early_access,
    max_subsampled_array_layers,
    max_descriptor_set_subsampled_samplers,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
        pNext,
        subsampled_loads,
        subsampled_coarse_reconstruction_early_access,
        max_subsampled_array_layers,
        max_descriptor_set_subsampled_samplers,
    )
end

"""
Julian constructor for VkPhysicalDeviceImageRobustnessFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceImageRobustnessFeaturesEXT(next, robust_image_access)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceImageRobustnessFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
        pNext,
        robust_image_access,
    )
end

"""
Julian constructor for VkPhysicalDevice4444FormatsFeaturesEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDevice4444FormatsFeaturesEXT(next, format_a4r4g4b4, format_a4b4g4r4)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDevice4444FormatsFeaturesEXT(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
        pNext,
        format_a4r4g4b4,
        format_a4b4g4r4,
    )
end

"""
Julian constructor for VkAndroidSurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAndroidSurfaceCreateInfoKHR(next, flags, window)
    pNext = unsafe_pointer(next)
    api.VkAndroidSurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        window,
    )
end

"""
Julian constructor for VkAndroidHardwareBufferUsageANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAndroidHardwareBufferUsageANDROID(next, android_hardware_buffer_usage)
    pNext = unsafe_pointer(next)
    api.VkAndroidHardwareBufferUsageANDROID(
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
        pNext,
        android_hardware_buffer_usage,
    )
end

"""
Julian constructor for VkAndroidHardwareBufferPropertiesANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAndroidHardwareBufferPropertiesANDROID(
    next,
    allocation_size,
    memory_type_bits,
)
    pNext = unsafe_pointer(next)
    api.VkAndroidHardwareBufferPropertiesANDROID(
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
        pNext,
        allocation_size,
        memory_type_bits,
    )
end

"""
Julian constructor for VkAndroidHardwareBufferFormatPropertiesANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAndroidHardwareBufferFormatPropertiesANDROID(
    next,
    format,
    external_format,
    format_features,
    sampler_ycbcr_conversion_components,
    suggested_ycbcr_model,
    suggested_ycbcr_range,
    suggested_x_chroma_offset,
    suggested_y_chroma_offset,
)
    pNext = unsafe_pointer(next)
    api.VkAndroidHardwareBufferFormatPropertiesANDROID(
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
        pNext,
        format,
        external_format,
        format_features,
        sampler_ycbcr_conversion_components,
        suggested_ycbcr_model,
        suggested_ycbcr_range,
        suggested_x_chroma_offset,
        suggested_y_chroma_offset,
    )
end

"""
Julian constructor for VkImportAndroidHardwareBufferInfoANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportAndroidHardwareBufferInfoANDROID(next, buffer)
    pNext = unsafe_pointer(next)
    api.VkImportAndroidHardwareBufferInfoANDROID(
        VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
        pNext,
        buffer,
    )
end

"""
Julian constructor for VkMemoryGetAndroidHardwareBufferInfoANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryGetAndroidHardwareBufferInfoANDROID(next, memory)
    pNext = unsafe_pointer(next)
    api.VkMemoryGetAndroidHardwareBufferInfoANDROID(
        VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
        pNext,
        memory,
    )
end

"""
Julian constructor for VkExternalFormatANDROID. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExternalFormatANDROID(next, external_format)
    pNext = unsafe_pointer(next)
    api.VkExternalFormatANDROID(
        VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
        pNext,
        external_format,
    )
end

"""
Julian constructor for VkImagePipeSurfaceCreateInfoFUCHSIA. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImagePipeSurfaceCreateInfoFUCHSIA(next, flags, image_pipe_handle)
    pNext = unsafe_pointer(next)
    api.VkImagePipeSurfaceCreateInfoFUCHSIA(
        VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
        pNext,
        flags,
        image_pipe_handle,
    )
end

"""
Julian constructor for VkIOSSurfaceCreateInfoMVK. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkIOSSurfaceCreateInfoMVK(next, flags, view)
    pNext = unsafe_pointer(next)
    pView = unsafe_pointer(view)
    api.VkIOSSurfaceCreateInfoMVK(
        VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
        pNext,
        flags,
        pView,
    )
end

"""
Julian constructor for VkMacOSSurfaceCreateInfoMVK. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMacOSSurfaceCreateInfoMVK(next, flags, view)
    pNext = unsafe_pointer(next)
    pView = unsafe_pointer(view)
    api.VkMacOSSurfaceCreateInfoMVK(
        VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
        pNext,
        flags,
        pView,
    )
end

"""
Julian constructor for VkMetalSurfaceCreateInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMetalSurfaceCreateInfoEXT(next, flags, layer)
    pNext = unsafe_pointer(next)
    api.VkMetalSurfaceCreateInfoEXT(
        VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
        pNext,
        flags,
        layer,
    )
end

"""
Julian constructor for VkViSurfaceCreateInfoNN. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkViSurfaceCreateInfoNN(next, flags, window)
    pNext = unsafe_pointer(next)
    api.VkViSurfaceCreateInfoNN(
        VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
        pNext,
        flags,
        window,
    )
end

"""
Julian constructor for VkWaylandSurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWaylandSurfaceCreateInfoKHR(next, flags, display, surface)
    pNext = unsafe_pointer(next)
    api.VkWaylandSurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        display,
        surface,
    )
end

"""
Julian constructor for VkWin32SurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWin32SurfaceCreateInfoKHR(next, flags, hinstance, hwnd)
    pNext = unsafe_pointer(next)
    api.VkWin32SurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        hinstance,
        hwnd,
    )
end

"""
Julian constructor for VkImportMemoryWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportMemoryWin32HandleInfoKHR(next, handle_type, handle, name)
    pNext = unsafe_pointer(next)
    api.VkImportMemoryWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
        pNext,
        handle_type,
        handle,
        name,
    )
end

"""
Julian constructor for VkExportMemoryWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportMemoryWin32HandleInfoKHR(next, attributes, dw_access, name)
    pNext = unsafe_pointer(next)
    pAttributes = unsafe_pointer(attributes)
    api.VkExportMemoryWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
        pNext,
        pAttributes,
        dw_access,
        name,
    )
end

"""
Julian constructor for VkMemoryWin32HandlePropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryWin32HandlePropertiesKHR(next, memory_type_bits)
    pNext = unsafe_pointer(next)
    api.VkMemoryWin32HandlePropertiesKHR(
        VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
        pNext,
        memory_type_bits,
    )
end

"""
Julian constructor for VkMemoryGetWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkMemoryGetWin32HandleInfoKHR(next, memory, handle_type)
    pNext = unsafe_pointer(next)
    api.VkMemoryGetWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
        pNext,
        memory,
        handle_type,
    )
end

"""
Julian constructor for VkWin32KeyedMutexAcquireReleaseInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWin32KeyedMutexAcquireReleaseInfoKHR(
    next,
    acquire_syncs,
    acquire_keys,
    acquire_timeouts,
    release_syncs,
    release_keys,
)
    pNext = unsafe_pointer(next)
    _acquireCount = pointer_length(acquire_syncs)
    pAcquireSyncs = unsafe_pointer(acquire_syncs)
    pAcquireKeys = unsafe_pointer(acquire_keys)
    pAcquireTimeouts = unsafe_pointer(acquire_timeouts)
    _releaseCount = pointer_length(release_syncs)
    pReleaseSyncs = unsafe_pointer(release_syncs)
    pReleaseKeys = unsafe_pointer(release_keys)
    api.VkWin32KeyedMutexAcquireReleaseInfoKHR(
        VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
        pNext,
        _acquireCount,
        pAcquireSyncs,
        pAcquireKeys,
        pAcquireTimeouts,
        _releaseCount,
        pReleaseSyncs,
        pReleaseKeys,
    )
end

"""
Julian constructor for VkImportSemaphoreWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportSemaphoreWin32HandleInfoKHR(
    next,
    semaphore,
    flags,
    handle_type,
    handle,
    name,
)
    pNext = unsafe_pointer(next)
    api.VkImportSemaphoreWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
        pNext,
        semaphore,
        flags,
        handle_type,
        handle,
        name,
    )
end

"""
Julian constructor for VkExportSemaphoreWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportSemaphoreWin32HandleInfoKHR(next, attributes, dw_access, name)
    pNext = unsafe_pointer(next)
    pAttributes = unsafe_pointer(attributes)
    api.VkExportSemaphoreWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
        pNext,
        pAttributes,
        dw_access,
        name,
    )
end

"""
Julian constructor for VkD3D12FenceSubmitInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkD3D12FenceSubmitInfoKHR(next, wait_semaphore_values, signal_semaphore_values)
    pNext = unsafe_pointer(next)
    _waitSemaphoreValuesCount = pointer_length(wait_semaphore_values)
    pWaitSemaphoreValues = unsafe_pointer(wait_semaphore_values)
    _signalSemaphoreValuesCount = pointer_length(signal_semaphore_values)
    pSignalSemaphoreValues = unsafe_pointer(signal_semaphore_values)
    api.VkD3D12FenceSubmitInfoKHR(
        VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
        pNext,
        _waitSemaphoreValuesCount,
        pWaitSemaphoreValues,
        _signalSemaphoreValuesCount,
        pSignalSemaphoreValues,
    )
end

"""
Julian constructor for VkSemaphoreGetWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSemaphoreGetWin32HandleInfoKHR(next, semaphore, handle_type)
    pNext = unsafe_pointer(next)
    api.VkSemaphoreGetWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
        pNext,
        semaphore,
        handle_type,
    )
end

"""
Julian constructor for VkImportFenceWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportFenceWin32HandleInfoKHR(next, fence, flags, handle_type, handle, name)
    pNext = unsafe_pointer(next)
    api.VkImportFenceWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
        pNext,
        fence,
        flags,
        handle_type,
        handle,
        name,
    )
end

"""
Julian constructor for VkExportFenceWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportFenceWin32HandleInfoKHR(next, attributes, dw_access, name)
    pNext = unsafe_pointer(next)
    pAttributes = unsafe_pointer(attributes)
    api.VkExportFenceWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
        pNext,
        pAttributes,
        dw_access,
        name,
    )
end

"""
Julian constructor for VkFenceGetWin32HandleInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkFenceGetWin32HandleInfoKHR(next, fence, handle_type)
    pNext = unsafe_pointer(next)
    api.VkFenceGetWin32HandleInfoKHR(
        VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
        pNext,
        fence,
        handle_type,
    )
end

"""
Julian constructor for VkImportMemoryWin32HandleInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkImportMemoryWin32HandleInfoNV(next, handle_type, handle)
    pNext = unsafe_pointer(next)
    api.VkImportMemoryWin32HandleInfoNV(
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
        pNext,
        handle_type,
        handle,
    )
end

"""
Julian constructor for VkExportMemoryWin32HandleInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkExportMemoryWin32HandleInfoNV(next, attributes, dw_access)
    pNext = unsafe_pointer(next)
    pAttributes = unsafe_pointer(attributes)
    api.VkExportMemoryWin32HandleInfoNV(
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
        pNext,
        pAttributes,
        dw_access,
    )
end

"""
Julian constructor for VkWin32KeyedMutexAcquireReleaseInfoNV. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkWin32KeyedMutexAcquireReleaseInfoNV(
    next,
    acquire_syncs,
    acquire_keys,
    acquire_timeout_milliseconds,
    release_syncs,
    release_keys,
)
    pNext = unsafe_pointer(next)
    _acquireCount = pointer_length(acquire_syncs)
    pAcquireSyncs = unsafe_pointer(acquire_syncs)
    pAcquireKeys = unsafe_pointer(acquire_keys)
    pAcquireTimeoutMilliseconds = unsafe_pointer(acquire_timeout_milliseconds)
    _releaseCount = pointer_length(release_syncs)
    pReleaseSyncs = unsafe_pointer(release_syncs)
    pReleaseKeys = unsafe_pointer(release_keys)
    api.VkWin32KeyedMutexAcquireReleaseInfoNV(
        VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
        pNext,
        _acquireCount,
        pAcquireSyncs,
        pAcquireKeys,
        pAcquireTimeoutMilliseconds,
        _releaseCount,
        pReleaseSyncs,
        pReleaseKeys,
    )
end

"""
Julian constructor for VkSurfaceFullScreenExclusiveInfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceFullScreenExclusiveInfoEXT(next, full_screen_exclusive)
    pNext = unsafe_pointer(next)
    api.VkSurfaceFullScreenExclusiveInfoEXT(
        VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
        pNext,
        full_screen_exclusive,
    )
end

"""
Julian constructor for VkSurfaceCapabilitiesFullScreenExclusiveEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    next,
    full_screen_exclusive_supported,
)
    pNext = unsafe_pointer(next)
    api.VkSurfaceCapabilitiesFullScreenExclusiveEXT(
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
        pNext,
        full_screen_exclusive_supported,
    )
end

"""
Julian constructor for VkSurfaceFullScreenExclusiveWin32InfoEXT. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkSurfaceFullScreenExclusiveWin32InfoEXT(next, hmonitor)
    pNext = unsafe_pointer(next)
    api.VkSurfaceFullScreenExclusiveWin32InfoEXT(
        VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
        pNext,
        hmonitor,
    )
end

"""
Julian constructor for VkXcbSurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkXcbSurfaceCreateInfoKHR(next, flags, connection, window)
    pNext = unsafe_pointer(next)
    api.VkXcbSurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        connection,
        window,
    )
end

"""
Julian constructor for VkXlibSurfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkXlibSurfaceCreateInfoKHR(next, flags, dpy, window)
    pNext = unsafe_pointer(next)
    api.VkXlibSurfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
        pNext,
        flags,
        dpy,
        window,
    )
end

"""
Julian constructor for VkStreamDescriptorSurfaceCreateInfoGGP. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkStreamDescriptorSurfaceCreateInfoGGP(next, flags, stream_descriptor)
    pNext = unsafe_pointer(next)
    api.VkStreamDescriptorSurfaceCreateInfoGGP(
        VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
        pNext,
        flags,
        stream_descriptor,
    )
end

"""
Julian constructor for VkPresentFrameTokenGGP. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPresentFrameTokenGGP(next, frame_token)
    pNext = unsafe_pointer(next)
    api.VkPresentFrameTokenGGP(
        VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
        pNext,
        frame_token,
    )
end

"""
Julian constructor for VkDeferredOperationInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkDeferredOperationInfoKHR(next, operation_handle)
    pNext = unsafe_pointer(next)
    api.VkDeferredOperationInfoKHR(
        VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR,
        pNext,
        operation_handle,
    )
end

"""
Julian constructor for VkPipelineLibraryCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPipelineLibraryCreateInfoKHR(next, libraries)
    pNext = unsafe_pointer(next)
    _libraryCount = pointer_length(libraries)
    pLibraries = unsafe_pointer(libraries)
    api.VkPipelineLibraryCreateInfoKHR(
        VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
        pNext,
        _libraryCount,
        pLibraries,
    )
end

"""
Julian constructor for VkRayTracingShaderGroupCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRayTracingShaderGroupCreateInfoKHR(
    next,
    type,
    general_shader,
    closest_hit_shader,
    any_hit_shader,
    intersection_shader,
    shader_group_capture_replay_handle,
)
    pNext = unsafe_pointer(next)
    pShaderGroupCaptureReplayHandle = unsafe_pointer(shader_group_capture_replay_handle)
    api.VkRayTracingShaderGroupCreateInfoKHR(
        VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
        pNext,
        type,
        general_shader,
        closest_hit_shader,
        any_hit_shader,
        intersection_shader,
        pShaderGroupCaptureReplayHandle,
    )
end

"""
Julian constructor for VkRayTracingPipelineInterfaceCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRayTracingPipelineInterfaceCreateInfoKHR(
    next,
    max_payload_size,
    max_attribute_size,
    max_callable_size,
)
    pNext = unsafe_pointer(next)
    api.VkRayTracingPipelineInterfaceCreateInfoKHR(
        VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
        pNext,
        max_payload_size,
        max_attribute_size,
        max_callable_size,
    )
end

"""
Julian constructor for VkRayTracingPipelineCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkRayTracingPipelineCreateInfoKHR(
    next,
    flags,
    stages,
    groups,
    max_recursion_depth,
    libraries,
    library_interface,
    layout,
    base_pipeline_handle,
    base_pipeline_index,
)
    pNext = unsafe_pointer(next)
    _stageCount = pointer_length(stages)
    pStages = unsafe_pointer(stages)
    _groupCount = pointer_length(groups)
    pGroups = unsafe_pointer(groups)
    pLibraryInterface = unsafe_pointer(library_interface)
    api.VkRayTracingPipelineCreateInfoKHR(
        VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
        pNext,
        flags,
        _stageCount,
        pStages,
        _groupCount,
        pGroups,
        max_recursion_depth,
        libraries,
        pLibraryInterface,
        layout,
        base_pipeline_handle,
        base_pipeline_index,
    )
end

"""
Julian constructor for VkAccelerationStructureGeometryTrianglesDataKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureGeometryTrianglesDataKHR(
    next,
    vertex_format,
    vertex_data,
    vertex_stride,
    index_type,
    index_data,
    transform_data,
)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureGeometryTrianglesDataKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
        pNext,
        vertex_format,
        vertex_data,
        vertex_stride,
        index_type,
        index_data,
        transform_data,
    )
end

"""
Julian constructor for VkAccelerationStructureGeometryAabbsDataKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureGeometryAabbsDataKHR(next, data, stride)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureGeometryAabbsDataKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
        pNext,
        data,
        stride,
    )
end

"""
Julian constructor for VkAccelerationStructureGeometryInstancesDataKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureGeometryInstancesDataKHR(next, array_of_pointers, data)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureGeometryInstancesDataKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
        pNext,
        array_of_pointers,
        data,
    )
end

"""
Julian constructor for VkAccelerationStructureGeometryKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureGeometryKHR(next, geometry_type, geometry, flags)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureGeometryKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
        pNext,
        geometry_type,
        geometry,
        flags,
    )
end

"""
Julian constructor for VkAccelerationStructureBuildGeometryInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureBuildGeometryInfoKHR(
    next,
    type,
    flags,
    update,
    src_acceleration_structure,
    dst_acceleration_structure,
    geometry_array_of_pointers,
    geometry_count,
    geometries,
    scratch_data,
)
    pNext = unsafe_pointer(next)
    ppGeometries = unsafe_pointer(geometries)
    api.VkAccelerationStructureBuildGeometryInfoKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
        pNext,
        type,
        flags,
        update,
        src_acceleration_structure,
        dst_acceleration_structure,
        geometry_array_of_pointers,
        geometry_count,
        ppGeometries,
        scratch_data,
    )
end

"""
Julian constructor for VkAccelerationStructureCreateGeometryTypeInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureCreateGeometryTypeInfoKHR(
    next,
    geometry_type,
    max_primitive_count,
    index_type,
    max_vertex_count,
    vertex_format,
    allows_transforms,
)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureCreateGeometryTypeInfoKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR,
        pNext,
        geometry_type,
        max_primitive_count,
        index_type,
        max_vertex_count,
        vertex_format,
        allows_transforms,
    )
end

"""
Julian constructor for VkAccelerationStructureCreateInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureCreateInfoKHR(
    next,
    compacted_size,
    type,
    flags,
    geometry_infos,
    device_address,
)
    pNext = unsafe_pointer(next)
    _maxGeometryCount = pointer_length(geometry_infos)
    pGeometryInfos = unsafe_pointer(geometry_infos)
    api.VkAccelerationStructureCreateInfoKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
        pNext,
        compacted_size,
        type,
        flags,
        _maxGeometryCount,
        pGeometryInfos,
        device_address,
    )
end

"""
Julian constructor for VkAccelerationStructureMemoryRequirementsInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureMemoryRequirementsInfoKHR(
    next,
    type,
    build_type,
    acceleration_structure,
)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureMemoryRequirementsInfoKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR,
        pNext,
        type,
        build_type,
        acceleration_structure,
    )
end

"""
Julian constructor for VkPhysicalDeviceRayTracingFeaturesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRayTracingFeaturesKHR(
    next,
    ray_tracing,
    ray_tracing_shader_group_handle_capture_replay,
    ray_tracing_shader_group_handle_capture_replay_mixed,
    ray_tracing_acceleration_structure_capture_replay,
    ray_tracing_indirect_trace_rays,
    ray_tracing_indirect_acceleration_structure_build,
    ray_tracing_host_acceleration_structure_commands,
    ray_query,
    ray_tracing_primitive_culling,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRayTracingFeaturesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR,
        pNext,
        ray_tracing,
        ray_tracing_shader_group_handle_capture_replay,
        ray_tracing_shader_group_handle_capture_replay_mixed,
        ray_tracing_acceleration_structure_capture_replay,
        ray_tracing_indirect_trace_rays,
        ray_tracing_indirect_acceleration_structure_build,
        ray_tracing_host_acceleration_structure_commands,
        ray_query,
        ray_tracing_primitive_culling,
    )
end

"""
Julian constructor for VkPhysicalDeviceRayTracingPropertiesKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkPhysicalDeviceRayTracingPropertiesKHR(
    next,
    shader_group_handle_size,
    max_recursion_depth,
    max_shader_group_stride,
    shader_group_base_alignment,
    max_geometry_count,
    max_instance_count,
    max_primitive_count,
    max_descriptor_set_acceleration_structures,
    shader_group_handle_capture_replay_size,
)
    pNext = unsafe_pointer(next)
    api.VkPhysicalDeviceRayTracingPropertiesKHR(
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR,
        pNext,
        shader_group_handle_size,
        max_recursion_depth,
        max_shader_group_stride,
        shader_group_base_alignment,
        max_geometry_count,
        max_instance_count,
        max_primitive_count,
        max_descriptor_set_acceleration_structures,
        shader_group_handle_capture_replay_size,
    )
end

"""
Julian constructor for VkAccelerationStructureDeviceAddressInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureDeviceAddressInfoKHR(next, acceleration_structure)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureDeviceAddressInfoKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
        pNext,
        acceleration_structure,
    )
end

"""
Julian constructor for VkAccelerationStructureVersionKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkAccelerationStructureVersionKHR(next, version_data)
    pNext = unsafe_pointer(next)
    api.VkAccelerationStructureVersionKHR(
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR,
        pNext,
        version_data,
    )
end

"""
Julian constructor for VkCopyAccelerationStructureToMemoryInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCopyAccelerationStructureToMemoryInfoKHR(next, src, dst, mode)
    pNext = unsafe_pointer(next)
    api.VkCopyAccelerationStructureToMemoryInfoKHR(
        VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
        pNext,
        src,
        dst,
        mode,
    )
end

"""
Julian constructor for VkCopyMemoryToAccelerationStructureInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCopyMemoryToAccelerationStructureInfoKHR(next, src, dst, mode)
    pNext = unsafe_pointer(next)
    api.VkCopyMemoryToAccelerationStructureInfoKHR(
        VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
        pNext,
        src,
        dst,
        mode,
    )
end

"""
Julian constructor for VkCopyAccelerationStructureInfoKHR. All struct pointers should be replaced by an equivalent Ref or `C_NULL`. The Refs need to be explicitly preserved during and after this call to keep the struct pointers valid.
"""
function api.VkCopyAccelerationStructureInfoKHR(next, src, dst, mode)
    pNext = unsafe_pointer(next)
    api.VkCopyAccelerationStructureInfoKHR(
        VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
        pNext,
        src,
        dst,
        mode,
    )
end

struct BagCopyAccelerationStructureInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCopyMemoryToAccelerationStructureInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCopyAccelerationStructureToMemoryInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureVersionKHR <: Bag
    bag_next::Any
    next_ref::Any
    version_data::Any
end

struct BagAccelerationStructureDeviceAddressInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRayTracingPropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRayTracingFeaturesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureMemoryRequirementsInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    bag_geometry_infos::Any
    geometry_infos_ref::Any
end

struct BagAccelerationStructureCreateGeometryTypeInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureBuildGeometryInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    bag_geometries::Any
    geometries_ref::Any
end

struct BagAccelerationStructureGeometryKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureGeometryInstancesDataKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureGeometryAabbsDataKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureGeometryTrianglesDataKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRayTracingPipelineCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    bag_stages::Any
    stages_ref::Any
    bag_groups::Any
    groups_ref::Any
    bag_library_interface::Any
    library_interface_ref::Any
end

struct BagRayTracingPipelineInterfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRayTracingShaderGroupCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    shader_group_capture_replay_handle::Any
end

struct BagPipelineLibraryCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    libraries_ref::Any
end

struct BagDeferredOperationInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPresentFrameTokenGGP <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagStreamDescriptorSurfaceCreateInfoGGP <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagXlibSurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    dpy::Any
end

struct BagXcbSurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    connection::Any
end

struct BagSurfaceFullScreenExclusiveWin32InfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceCapabilitiesFullScreenExclusiveEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceFullScreenExclusiveInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWin32KeyedMutexAcquireReleaseInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    acquire_syncs_ref::Any
    acquire_keys::Any
    acquire_timeout_milliseconds::Any
    release_syncs_ref::Any
    release_keys::Any
end

struct BagExportMemoryWin32HandleInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    attributes::Any
end

struct BagImportMemoryWin32HandleInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFenceGetWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExportFenceWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    attributes::Any
end

struct BagImportFenceWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSemaphoreGetWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagD3D12FenceSubmitInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphore_values::Any
    signal_semaphore_values::Any
end

struct BagExportSemaphoreWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    attributes::Any
end

struct BagImportSemaphoreWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWin32KeyedMutexAcquireReleaseInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    acquire_syncs_ref::Any
    acquire_keys::Any
    acquire_timeouts::Any
    release_syncs_ref::Any
    release_keys::Any
end

struct BagMemoryGetWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryWin32HandlePropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExportMemoryWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    attributes::Any
end

struct BagImportMemoryWin32HandleInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWin32SurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWaylandSurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    display::Any
    surface::Any
end

struct BagViSurfaceCreateInfoNN <: Bag
    bag_next::Any
    next_ref::Any
    window::Any
end

struct BagMetalSurfaceCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    layer::Any
end

struct BagMacOSSurfaceCreateInfoMVK <: Bag
    bag_next::Any
    next_ref::Any
    view::Any
end

struct BagIOSSurfaceCreateInfoMVK <: Bag
    bag_next::Any
    next_ref::Any
    view::Any
end

struct BagImagePipeSurfaceCreateInfoFUCHSIA <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalFormatANDROID <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryGetAndroidHardwareBufferInfoANDROID <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImportAndroidHardwareBufferInfoANDROID <: Bag
    bag_next::Any
    next_ref::Any
    buffer::Any
end

struct BagAndroidHardwareBufferFormatPropertiesANDROID <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAndroidHardwareBufferPropertiesANDROID <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAndroidHardwareBufferUsageANDROID <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAndroidSurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    window::Any
end

struct BagPhysicalDevice4444FormatsFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceImageRobustnessFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentDensityMap2PropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentDensityMap2FeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceDiagnosticsConfigCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDiagnosticsConfigFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePipelineCreationCacheControlFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPrivateDataSlotCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDevicePrivateDataCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePrivateDataFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCustomBorderColorFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCustomBorderColorPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSamplerCustomBorderColorCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRobustness2PropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRobustness2FeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCommandBufferInheritanceRenderPassTransformInfoQCOM <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassTransformBeginInfoQCOM <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTexelBufferAlignmentPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTexelBufferAlignmentFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagGeneratedCommandsMemoryRequirementsInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagGeneratedCommandsInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    streams_ref::Any
end

struct BagIndirectCommandsLayoutCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_tokens::Any
    tokens_ref::Any
    stream_strides::Any
end

struct BagIndirectCommandsLayoutTokenNV <: Bag
    bag_next::Any
    next_ref::Any
    index_types::Any
    index_type_values::Any
end

struct BagGraphicsPipelineShaderGroupsCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_groups::Any
    groups_ref::Any
    pipelines_ref::Any
end

struct BagGraphicsShaderGroupCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_stages::Any
    stages_ref::Any
    bag_vertex_input_state::Any
    vertex_input_state_ref::Any
    bag_tessellation_state::Any
    tessellation_state_ref::Any
end

struct BagPhysicalDeviceDeviceGeneratedCommandsFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDeviceGeneratedCommandsPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExtendedDynamicStateFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceIndexTypeUint8FeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderAtomicFloatFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineRasterizationLineStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceLineRasterizationPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceLineRasterizationFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagHeadlessSurfaceCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceYcbcrImageArraysFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentShaderInterlockFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFramebufferMixedSamplesCombinationNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineCoverageReductionStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCoverageReductionModeFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCooperativeMatrixPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCooperativeMatrixFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCooperativeMatrixPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagValidationFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
    enabled_validation_features::Any
    disabled_validation_features::Any
end

struct BagPhysicalDeviceToolPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferDeviceAddressCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceBufferDeviceAddressFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryPriorityAllocateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMemoryPriorityFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMemoryBudgetPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCoherentMemoryFeaturesAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderCoreProperties2AMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSubgroupSizeControlPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSubgroupSizeControlFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassFragmentDensityMapCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentDensityMapPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentDensityMapFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSwapchainDisplayNativeHdrCreateInfoAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayNativeHdrSurfaceCapabilitiesAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePCIBusInfoPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceConfigurationAcquireInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceOverrideInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceStreamMarkerInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceMarkerInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagQueryPoolPerformanceQueryCreateInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagInitializePerformanceApiInfoINTEL <: Bag
    bag_next::Any
    next_ref::Any
    user_data::Any
end

struct BagPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCheckpointDataNV <: Bag
    bag_next::Any
    next_ref::Any
    checkpoint_marker::Any
end

struct BagQueueFamilyCheckpointPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExclusiveScissorFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportExclusiveScissorStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    exclusive_scissors_ref::Any
end

struct BagPhysicalDeviceShaderImageFootprintFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFragmentShaderBarycentricFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMeshShaderPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMeshShaderFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceComputeShaderDerivativesFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineCreationFeedbackCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    pipeline_creation_feedback_ref::Any
    pipeline_stage_creation_feedbacks_ref::Any
end

struct BagPhysicalDeviceVertexAttributeDivisorFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineVertexInputDivisorStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    vertex_binding_divisors_ref::Any
end

struct BagPhysicalDeviceVertexAttributeDivisorPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceMemoryOverallocationCreateInfoAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderCorePropertiesAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCalibratedTimestampInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineCompilerControlCreateInfoAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExternalMemoryHostPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryHostPointerPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImportMemoryHostPointerInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    host_pointer::Any
end

struct BagDeviceQueueGlobalPriorityCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFilterCubicImageViewImageFormatPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceImageViewImageFormatInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineRepresentativeFragmentTestStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRepresentativeFragmentTestFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceRayTracingPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureMemoryRequirementsInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWriteDescriptorSetAccelerationStructureKHR <: Bag
    bag_next::Any
    next_ref::Any
    acceleration_structures_ref::Any
end

struct BagBindAccelerationStructureMemoryInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    device_indices::Any
end

struct BagAccelerationStructureCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAccelerationStructureInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_geometries::Any
    geometries_ref::Any
end

struct BagGeometryNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagGeometryAABBNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagGeometryTrianglesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRayTracingPipelineCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_stages::Any
    stages_ref::Any
    bag_groups::Any
    groups_ref::Any
end

struct BagRayTracingShaderGroupCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportCoarseSampleOrderStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_custom_sample_orders::Any
    custom_sample_orders_ref::Any
end

struct BagCoarseSampleOrderCustomNV <: Bag
    sample_locations_ref::Any
end

struct BagPhysicalDeviceShadingRateImagePropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShadingRateImageFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportShadingRateImageStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    bag_shading_rate_palettes::Any
    shading_rate_palettes_ref::Any
end

struct BagShadingRatePaletteNV <: Bag
    shading_rate_palette_entries::Any
end

struct BagShaderModuleValidationCacheCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagValidationCacheCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    initial_data::Any
end

struct BagImageDrmFormatModifierPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageDrmFormatModifierExplicitCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    plane_layouts_ref::Any
end

struct BagImageDrmFormatModifierListCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    drm_format_modifiers::Any
end

struct BagPhysicalDeviceImageDrmFormatModifierInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    queue_family_indices::Any
end

struct BagDrmFormatModifierPropertiesListEXT <: Bag
    bag_next::Any
    next_ref::Any
    drm_format_modifier_properties_ref::Any
end

struct BagPhysicalDeviceShaderSMBuiltinsFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderSMBuiltinsPropertiesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineCoverageModulationStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    coverage_modulation_table::Any
end

struct BagPipelineCoverageToColorStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineColorBlendAdvancedStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceBlendOperationAdvancedPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceBlendOperationAdvancedFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMultisamplePropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSampleLocationsPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineSampleLocationsStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassSampleLocationsBeginInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    attachment_initial_sample_locations_ref::Any
    post_subpass_sample_locations_ref::Any
end

struct BagSampleLocationsInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    sample_locations_ref::Any
end

struct BagDescriptorPoolInlineUniformBlockCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagWriteDescriptorSetInlineUniformBlockEXT <: Bag
    bag_next::Any
    next_ref::Any
    data::Any
end

struct BagPhysicalDeviceInlineUniformBlockPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceInlineUniformBlockFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDebugUtilsObjectTagInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    tag::Any
end

struct BagDebugUtilsMessengerCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    user_data::Any
end

struct BagDebugUtilsMessengerCallbackDataEXT <: Bag
    bag_next::Any
    next_ref::Any
    message_id_name::Any
    message::Any
    bag_queue_labels::Any
    queue_labels_ref::Any
    bag_cmd_buf_labels::Any
    cmd_buf_labels_ref::Any
    bag_objects::Any
    objects_ref::Any
end

struct BagDebugUtilsObjectNameInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    object_name::Any
end

struct BagDebugUtilsLabelEXT <: Bag
    bag_next::Any
    next_ref::Any
    label_name::Any
end

struct BagHdrMetadataEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineRasterizationDepthClipStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDepthClipEnableFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineRasterizationConservativeStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceConservativeRasterizationPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineDiscardRectangleStateCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    discard_rectangles_ref::Any
end

struct BagPhysicalDeviceDiscardRectanglePropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportSwizzleStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    viewport_swizzles_ref::Any
end

struct BagPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPresentTimesInfoGOOGLE <: Bag
    bag_next::Any
    next_ref::Any
    times_ref::Any
end

struct BagSwapchainCounterCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayEventInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceEventInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPowerInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceCapabilities2EXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportWScalingStateCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
    viewport_w_scalings_ref::Any
end

struct BagCommandBufferInheritanceConditionalRenderingInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceConditionalRenderingFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagConditionalRenderingBeginInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceASTCDecodeFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageViewASTCDecodeModeEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagValidationFlagsEXT <: Bag
    bag_next::Any
    next_ref::Any
    disabled_validation_checks::Any
end

struct BagExportMemoryAllocateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalMemoryImageCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceCornerSampledImageFeaturesNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagTextureLODGatherFormatPropertiesAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageViewAddressPropertiesNVX <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageViewHandleInfoNVX <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineRasterizationStateStreamCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTransformFeedbackPropertiesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTransformFeedbackFeaturesEXT <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDedicatedAllocationMemoryAllocateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDedicatedAllocationBufferCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDedicatedAllocationImageCreateInfoNV <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDebugMarkerMarkerInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    marker_name::Any
end

struct BagDebugMarkerObjectTagInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    tag::Any
end

struct BagDebugMarkerObjectNameInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    object_name::Any
end

struct BagPipelineRasterizationStateRasterizationOrderAMD <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDebugReportCallbackCreateInfoEXT <: Bag
    bag_next::Any
    next_ref::Any
    user_data::Any
end

struct BagPipelineExecutableInternalRepresentationKHR <: Bag
    bag_next::Any
    next_ref::Any
    data::Any
end

struct BagPipelineExecutableStatisticKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineExecutableInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineExecutablePropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePipelineExecutablePropertiesFeaturesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceProtectedCapabilitiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderClockFeaturesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPlaneCapabilities2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPlaneInfo2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayModeProperties2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPlaneProperties2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayProperties2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceFormat2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSurfaceCapabilities2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSurfaceInfo2KHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceQuerySubmitInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAcquireProfilingLockInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagQueryPoolPerformanceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    counter_indices::Any
end

struct BagPerformanceCounterDescriptionKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPerformanceCounterKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePerformanceQueryPropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevicePerformanceQueryFeaturesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFenceGetFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImportFenceFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSharedPresentSurfaceCapabilitiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPresentRegionsKHR <: Bag
    bag_next::Any
    next_ref::Any
    bag_regions::Any
    regions_ref::Any
end

struct BagPresentRegionKHR <: Bag
    rectangles_ref::Any
end

struct BagPhysicalDevicePushDescriptorPropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSemaphoreGetFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImportSemaphoreFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryGetFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryFdPropertiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImportMemoryFdInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPresentInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplaySurfaceCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDisplayPropertiesKHR <: Bag
    display_name::Any
end

struct BagDisplayModeCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceGroupSwapchainCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceGroupPresentInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    device_masks::Any
end

struct BagDeviceGroupPresentCapabilitiesKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAcquireNextImageInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindImageMemorySwapchainInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageSwapchainCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPresentInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphores_ref::Any
    swapchains_ref::Any
    image_indices::Any
    results::Any
end

struct BagSwapchainCreateInfoKHR <: Bag
    bag_next::Any
    next_ref::Any
    queue_family_indices::Any
end

struct BagDeviceMemoryOpaqueCaptureAddressInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryOpaqueCaptureAddressAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferOpaqueCaptureAddressCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferDeviceAddressInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceBufferDeviceAddressFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSemaphoreSignalInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSemaphoreWaitInfo <: Bag
    bag_next::Any
    next_ref::Any
    semaphores_ref::Any
    values::Any
end

struct BagTimelineSemaphoreSubmitInfo <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphore_values::Any
    signal_semaphore_values::Any
end

struct BagSemaphoreTypeCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTimelineSemaphoreProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceTimelineSemaphoreFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceHostQueryResetFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAttachmentDescriptionStencilLayout <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAttachmentReferenceStencilLayout <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSeparateDepthStencilLayoutsFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderSubgroupExtendedTypesFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceUniformBufferStandardLayoutFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassAttachmentBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
    attachments_ref::Any
end

struct BagFramebufferAttachmentsCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_attachment_image_infos::Any
    attachment_image_infos_ref::Any
end

struct BagFramebufferAttachmentImageInfo <: Bag
    bag_next::Any
    next_ref::Any
    view_formats::Any
end

struct BagPhysicalDeviceImagelessFramebufferFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceVulkanMemoryModelFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSamplerFilterMinmaxProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSamplerReductionModeCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageStencilUsageCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceScalarBlockLayoutFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDepthStencilResolveProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSubpassDescriptionDepthStencilResolve <: Bag
    bag_next::Any
    next_ref::Any
    bag_depth_stencil_resolve_attachment::Any
    depth_stencil_resolve_attachment_ref::Any
end

struct BagDescriptorSetVariableDescriptorCountLayoutSupport <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDescriptorSetVariableDescriptorCountAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
    descriptor_counts::Any
end

struct BagPhysicalDeviceDescriptorIndexingProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDescriptorIndexingFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDescriptorSetLayoutBindingFlagsCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    binding_flags::Any
end

struct BagPhysicalDeviceFloatControlsProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderFloat16Int8Features <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderAtomicInt64Features <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceDriverProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevice8BitStorageFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSubpassEndInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSubpassBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassCreateInfo2 <: Bag
    bag_next::Any
    next_ref::Any
    bag_attachments::Any
    attachments_ref::Any
    bag_subpasses::Any
    subpasses_ref::Any
    bag_dependencies::Any
    dependencies_ref::Any
    correlated_view_masks::Any
end

struct BagSubpassDependency2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSubpassDescription2 <: Bag
    bag_next::Any
    next_ref::Any
    bag_input_attachments::Any
    input_attachments_ref::Any
    bag_color_attachments::Any
    color_attachments_ref::Any
    bag_resolve_attachments::Any
    resolve_attachments_ref::Any
    bag_depth_stencil_attachment::Any
    depth_stencil_attachment_ref::Any
    preserve_attachments::Any
end

struct BagAttachmentReference2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagAttachmentDescription2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageFormatListCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    view_formats::Any
end

struct BagPhysicalDeviceVulkan12Properties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceVulkan12Features <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceVulkan11Properties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceVulkan11Features <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceShaderDrawParametersFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDescriptorSetLayoutSupport <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMaintenance3Properties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalSemaphoreProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExternalSemaphoreInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExportSemaphoreCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExportFenceCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalFenceProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExternalFenceInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExportMemoryAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalMemoryBufferCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalMemoryImageCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceIDProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalBufferProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExternalBufferInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagExternalImageFormatProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceExternalImageFormatInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDescriptorUpdateTemplateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    descriptor_update_entries_ref::Any
end

struct BagSamplerYcbcrConversionImageFormatProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSamplerYcbcrConversionFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImagePlaneMemoryRequirementsInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindImagePlaneMemoryInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSamplerYcbcrConversionInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSamplerYcbcrConversionCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagProtectedSubmitInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceQueueInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceProtectedMemoryProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceProtectedMemoryFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceVariablePointersFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMultiviewProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMultiviewFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassMultiviewCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    view_masks::Any
    view_offsets::Any
    correlation_masks::Any
end

struct BagPipelineTessellationDomainOriginStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageViewUsageCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassInputAttachmentAspectCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    aspect_references_ref::Any
end

struct BagPhysicalDevicePointClippingProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSparseImageFormatInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSparseImageFormatProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceMemoryProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagQueueFamilyProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceImageFormatInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageFormatProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFormatProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceProperties2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceFeatures2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSparseImageMemoryRequirements2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryRequirements2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageSparseMemoryRequirementsInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageMemoryRequirementsInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferMemoryRequirementsInfo2 <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceGroupDeviceCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    physical_devices_ref::Any
end

struct BagPhysicalDeviceGroupProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindImageMemoryDeviceGroupInfo <: Bag
    bag_next::Any
    next_ref::Any
    device_indices::Any
    split_instance_bind_regions_ref::Any
end

struct BagBindBufferMemoryDeviceGroupInfo <: Bag
    bag_next::Any
    next_ref::Any
    device_indices::Any
end

struct BagDeviceGroupBindSparseInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceGroupSubmitInfo <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphore_device_indices::Any
    command_buffer_device_masks::Any
    signal_semaphore_device_indices::Any
end

struct BagDeviceGroupCommandBufferBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagDeviceGroupRenderPassBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
    device_render_areas_ref::Any
end

struct BagMemoryAllocateFlagsInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryDedicatedAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMemoryDedicatedRequirements <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDevice16BitStorageFeatures <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindImageMemoryInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindBufferMemoryInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPhysicalDeviceSubgroupProperties <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
    clear_values_ref::Any
end

struct BagCommandBufferBeginInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_inheritance_info::Any
    inheritance_info_ref::Any
end

struct BagCommandBufferInheritanceInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCommandBufferAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagCommandPoolCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagRenderPassCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    attachments_ref::Any
    bag_subpasses::Any
    subpasses_ref::Any
    dependencies_ref::Any
end

struct BagSubpassDescription <: Bag
    input_attachments_ref::Any
    color_attachments_ref::Any
    resolve_attachments_ref::Any
    depth_stencil_attachment_ref::Any
    preserve_attachments::Any
end

struct BagFramebufferCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    attachments_ref::Any
end

struct BagWriteDescriptorSet <: Bag
    bag_next::Any
    next_ref::Any
    image_info_ref::Any
    buffer_info_ref::Any
    texel_buffer_view_ref::Any
end

struct BagDescriptorSetLayoutCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_bindings::Any
    bindings_ref::Any
end

struct BagDescriptorSetLayoutBinding <: Bag
    immutable_samplers_ref::Any
end

struct BagDescriptorSetAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
    set_layouts_ref::Any
end

struct BagDescriptorPoolCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    pool_sizes_ref::Any
end

struct BagCopyDescriptorSet <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSamplerCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineLayoutCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    set_layouts_ref::Any
    push_constant_ranges_ref::Any
end

struct BagGraphicsPipelineCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_stages::Any
    stages_ref::Any
    bag_vertex_input_state::Any
    vertex_input_state_ref::Any
    bag_input_assembly_state::Any
    input_assembly_state_ref::Any
    bag_tessellation_state::Any
    tessellation_state_ref::Any
    bag_viewport_state::Any
    viewport_state_ref::Any
    bag_rasterization_state::Any
    rasterization_state_ref::Any
    bag_multisample_state::Any
    multisample_state_ref::Any
    bag_depth_stencil_state::Any
    depth_stencil_state_ref::Any
    bag_color_blend_state::Any
    color_blend_state_ref::Any
    bag_dynamic_state::Any
    dynamic_state_ref::Any
end

struct BagPipelineDynamicStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    dynamic_states::Any
end

struct BagPipelineColorBlendStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    attachments_ref::Any
end

struct BagPipelineDepthStencilStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineMultisampleStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    sample_mask::Any
end

struct BagPipelineRasterizationStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineViewportStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    viewports_ref::Any
    scissors_ref::Any
end

struct BagPipelineTessellationStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineInputAssemblyStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineVertexInputStateCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    vertex_binding_descriptions_ref::Any
    vertex_attribute_descriptions_ref::Any
end

struct BagComputePipelineCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagPipelineShaderStageCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    name::Any
    bag_specialization_info::Any
    specialization_info_ref::Any
end

struct BagSpecializationInfo <: Bag
    map_entries_ref::Any
    data::Any
end

struct BagPipelineCacheCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    initial_data::Any
end

struct BagShaderModuleCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    code::Any
end

struct BagImageViewCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    queue_family_indices::Any
end

struct BagBufferViewCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    queue_family_indices::Any
end

struct BagQueryPoolCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagEventCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSemaphoreCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagFenceCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBindSparseInfo <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphores_ref::Any
    bag_buffer_binds::Any
    buffer_binds_ref::Any
    bag_image_opaque_binds::Any
    image_opaque_binds_ref::Any
    bag_image_binds::Any
    image_binds_ref::Any
    signal_semaphores_ref::Any
end

struct BagSparseImageMemoryBindInfo <: Bag
    binds_ref::Any
end

struct BagSparseImageOpaqueMemoryBindInfo <: Bag
    binds_ref::Any
end

struct BagSparseBufferMemoryBindInfo <: Bag
    binds_ref::Any
end

struct BagMemoryAllocateInfo <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagMappedMemoryRange <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagSubmitInfo <: Bag
    bag_next::Any
    next_ref::Any
    wait_semaphores_ref::Any
    wait_dst_stage_mask::Any
    command_buffers_ref::Any
    signal_semaphores_ref::Any
end

struct BagDeviceCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_queue_create_infos::Any
    queue_create_infos_ref::Any
    enabled_layer_names_ptrarray::Any
    enabled_layer_names::Any
    enabled_extension_names_ptrarray::Any
    enabled_extension_names::Any
    enabled_features_ref::Any
end

struct BagDeviceQueueCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    queue_priorities::Any
end

struct BagInstanceCreateInfo <: Bag
    bag_next::Any
    next_ref::Any
    bag_application_info::Any
    application_info_ref::Any
    enabled_layer_names_ptrarray::Any
    enabled_layer_names::Any
    enabled_extension_names_ptrarray::Any
    enabled_extension_names::Any
end

struct BagApplicationInfo <: Bag
    bag_next::Any
    next_ref::Any
    application_name::Any
    engine_name::Any
end

struct BagAllocationCallbacks <: Bag
    user_data::Any
end

struct BagMemoryBarrier <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagImageMemoryBarrier <: Bag
    bag_next::Any
    next_ref::Any
end

struct BagBufferMemoryBarrier <: Bag
    bag_next::Any
    next_ref::Any
end

struct CopyAccelerationStructureInfoKHR <: VulkanStruct
    vks::VkCopyAccelerationStructureInfoKHR
    bag::BagCopyAccelerationStructureInfoKHR
    """
    Generic constructor.
    """
    function CopyAccelerationStructureInfoKHR(src, dst, mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCopyAccelerationStructureInfoKHR(bag_next, _pNext)
        vks = VkCopyAccelerationStructureInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src.handle,
            dst.handle,
            mode,
        )
        new(vks, bag)
    end
end

struct CopyMemoryToAccelerationStructureInfoKHR <: VulkanStruct
    vks::VkCopyMemoryToAccelerationStructureInfoKHR
    bag::BagCopyMemoryToAccelerationStructureInfoKHR
    """
    Generic constructor.
    """
    function CopyMemoryToAccelerationStructureInfoKHR(src, dst, mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCopyMemoryToAccelerationStructureInfoKHR(bag_next, _pNext)
        vks = VkCopyMemoryToAccelerationStructureInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src.vks,
            dst.handle,
            mode,
        )
        new(vks, bag)
    end
end

struct CopyAccelerationStructureToMemoryInfoKHR <: VulkanStruct
    vks::VkCopyAccelerationStructureToMemoryInfoKHR
    bag::BagCopyAccelerationStructureToMemoryInfoKHR
    """
    Generic constructor.
    """
    function CopyAccelerationStructureToMemoryInfoKHR(src, dst, mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCopyAccelerationStructureToMemoryInfoKHR(bag_next, _pNext)
        vks = VkCopyAccelerationStructureToMemoryInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src.handle,
            dst.vks,
            mode,
        )
        new(vks, bag)
    end
end

struct TraceRaysIndirectCommandKHR <: VulkanStruct
    vks::VkTraceRaysIndirectCommandKHR
    TraceRaysIndirectCommandKHR(vks::VkTraceRaysIndirectCommandKHR) = new(vks)
end

struct StridedBufferRegionKHR <: VulkanStruct
    vks::VkStridedBufferRegionKHR
    StridedBufferRegionKHR(vks::VkStridedBufferRegionKHR) = new(vks)
end

struct AccelerationStructureVersionKHR <: VulkanStruct
    vks::VkAccelerationStructureVersionKHR
    bag::BagAccelerationStructureVersionKHR
    """
    Generic constructor.
    """
    function AccelerationStructureVersionKHR(version_data; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        version_data = convert(Array{UInt8}, version_data)
        bag = BagAccelerationStructureVersionKHR(bag_next, _pNext, version_data)
        vks = VkAccelerationStructureVersionKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, version_data)
        new(vks, bag)
    end
end

struct AccelerationStructureDeviceAddressInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureDeviceAddressInfoKHR
    bag::BagAccelerationStructureDeviceAddressInfoKHR
    """
    Generic constructor.
    """
    function AccelerationStructureDeviceAddressInfoKHR(
        acceleration_structure;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureDeviceAddressInfoKHR(bag_next, _pNext)
        vks = VkAccelerationStructureDeviceAddressInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            acceleration_structure.handle,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceRayTracingPropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_primitive_count::UInt64
    max_descriptor_set_acceleration_structures::UInt32
    shader_group_handle_capture_replay_size::UInt32
end

struct PhysicalDeviceRayTracingFeaturesKHR <: VulkanStruct
    vks::VkPhysicalDeviceRayTracingFeaturesKHR
    bag::BagPhysicalDeviceRayTracingFeaturesKHR
    """
    Generic constructor.
    """
    function PhysicalDeviceRayTracingFeaturesKHR(
        ray_tracing,
        ray_tracing_shader_group_handle_capture_replay,
        ray_tracing_shader_group_handle_capture_replay_mixed,
        ray_tracing_acceleration_structure_capture_replay,
        ray_tracing_indirect_trace_rays,
        ray_tracing_indirect_acceleration_structure_build,
        ray_tracing_host_acceleration_structure_commands,
        ray_query,
        ray_tracing_primitive_culling;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceRayTracingFeaturesKHR(bag_next, _pNext)
        vks = VkPhysicalDeviceRayTracingFeaturesKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            ray_tracing,
            ray_tracing_shader_group_handle_capture_replay,
            ray_tracing_shader_group_handle_capture_replay_mixed,
            ray_tracing_acceleration_structure_capture_replay,
            ray_tracing_indirect_trace_rays,
            ray_tracing_indirect_acceleration_structure_build,
            ray_tracing_host_acceleration_structure_commands,
            ray_query,
            ray_tracing_primitive_culling,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureMemoryRequirementsInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureMemoryRequirementsInfoKHR
    bag::BagAccelerationStructureMemoryRequirementsInfoKHR
    """
    Generic constructor.
    """
    function AccelerationStructureMemoryRequirementsInfoKHR(
        type,
        build_type,
        acceleration_structure;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureMemoryRequirementsInfoKHR(bag_next, _pNext)
        vks = VkAccelerationStructureMemoryRequirementsInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            build_type,
            acceleration_structure.handle,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureCreateInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureCreateInfoKHR
    bag::BagAccelerationStructureCreateInfoKHR
    """
    Generic constructor.
    """
    function AccelerationStructureCreateInfoKHR(
        compacted_size,
        type,
        geometry_infos;
        next = C_NULL,
        flags = 0,
        device_address = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pGeometryInfos = if geometry_infos == C_NULL
            geometry_infos
        else
            getproperty.(geometry_infos, :vks)
        end
        bag = BagAccelerationStructureCreateInfoKHR(
            bag_next,
            _pNext,
            getproperty.(geometry_infos, :bag),
            _pGeometryInfos,
        )
        vks = VkAccelerationStructureCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            compacted_size,
            type,
            if flags == 0
                0
            else
                flags
            end,
            _pGeometryInfos,
            if device_address == 0
                0
            else
                device_address
            end,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureCreateGeometryTypeInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureCreateGeometryTypeInfoKHR
    bag::BagAccelerationStructureCreateGeometryTypeInfoKHR
    """
    Generic constructor.
    """
    function AccelerationStructureCreateGeometryTypeInfoKHR(
        geometry_type,
        max_primitive_count,
        index_type;
        next = C_NULL,
        max_vertex_count = 0,
        vertex_format = 0,
        allows_transforms = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureCreateGeometryTypeInfoKHR(bag_next, _pNext)
        vks = VkAccelerationStructureCreateGeometryTypeInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            geometry_type,
            max_primitive_count,
            index_type,
            if max_vertex_count == 0
                0
            else
                max_vertex_count
            end,
            if vertex_format == 0
                0
            else
                vertex_format
            end,
            if allows_transforms == 0
                0
            else
                allows_transforms
            end,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureBuildGeometryInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureBuildGeometryInfoKHR
    bag::BagAccelerationStructureBuildGeometryInfoKHR
    """
    Generic constructor.
    """
    function AccelerationStructureBuildGeometryInfoKHR(
        type,
        update,
        dst_acceleration_structure,
        geometry_array_of_pointers,
        geometries,
        scratch_data;
        next = C_NULL,
        flags = 0,
        src_acceleration_structure = C_NULL,
        geometry_count = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _ppGeometries = if geometries == C_NULL
            geometries
        else
            Ref(geometries.vks)
        end
        bag = BagAccelerationStructureBuildGeometryInfoKHR(
            bag_next,
            _pNext,
            geometries.bag,
            _ppGeometries,
        )
        vks = VkAccelerationStructureBuildGeometryInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            if flags == 0
                0
            else
                flags
            end,
            update,
            if src_acceleration_structure == C_NULL
                C_NULL
            else
                src_acceleration_structure.handle
            end,
            dst_acceleration_structure.handle,
            geometry_array_of_pointers,
            if geometry_count == 0
                0
            else
                geometry_count
            end,
            _ppGeometries,
            scratch_data.vks,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureGeometryKHR <: VulkanStruct
    vks::VkAccelerationStructureGeometryKHR
    bag::BagAccelerationStructureGeometryKHR
    """
    Generic constructor.
    """
    function AccelerationStructureGeometryKHR(
        geometry_type,
        geometry;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureGeometryKHR(bag_next, _pNext)
        vks = VkAccelerationStructureGeometryKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            geometry_type,
            geometry.vks,
            if flags == 0
                0
            else
                flags
            end,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureGeometryDataKHR <: VulkanStruct
    vks::VkAccelerationStructureGeometryDataKHR
    AccelerationStructureGeometryDataKHR(vks::VkAccelerationStructureGeometryDataKHR) =
        new(vks)
end

struct AccelerationStructureGeometryInstancesDataKHR <: VulkanStruct
    vks::VkAccelerationStructureGeometryInstancesDataKHR
    bag::BagAccelerationStructureGeometryInstancesDataKHR
    """
    Generic constructor.
    """
    function AccelerationStructureGeometryInstancesDataKHR(
        array_of_pointers,
        data;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureGeometryInstancesDataKHR(bag_next, _pNext)
        vks = VkAccelerationStructureGeometryInstancesDataKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            array_of_pointers,
            data.vks,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureGeometryAabbsDataKHR <: VulkanStruct
    vks::VkAccelerationStructureGeometryAabbsDataKHR
    bag::BagAccelerationStructureGeometryAabbsDataKHR
    """
    Generic constructor.
    """
    function AccelerationStructureGeometryAabbsDataKHR(data, stride; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureGeometryAabbsDataKHR(bag_next, _pNext)
        vks = VkAccelerationStructureGeometryAabbsDataKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            data.vks,
            stride,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureGeometryTrianglesDataKHR <: VulkanStruct
    vks::VkAccelerationStructureGeometryTrianglesDataKHR
    bag::BagAccelerationStructureGeometryTrianglesDataKHR
    """
    Generic constructor.
    """
    function AccelerationStructureGeometryTrianglesDataKHR(
        vertex_format,
        vertex_data,
        vertex_stride,
        index_type;
        next = C_NULL,
        index_data = 0,
        transform_data = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureGeometryTrianglesDataKHR(bag_next, _pNext)
        vks = VkAccelerationStructureGeometryTrianglesDataKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            vertex_format,
            vertex_data.vks,
            vertex_stride,
            index_type,
            if index_data == 0
                0
            else
                index_data.vks
            end,
            if transform_data == 0
                0
            else
                transform_data.vks
            end,
        )
        new(vks, bag)
    end
end

struct RayTracingPipelineCreateInfoKHR <: VulkanStruct
    vks::VkRayTracingPipelineCreateInfoKHR
    bag::BagRayTracingPipelineCreateInfoKHR
    """
    Generic constructor.
    """
    function RayTracingPipelineCreateInfoKHR(
        stages,
        groups,
        max_recursion_depth,
        libraries,
        layout,
        base_pipeline_index;
        next = C_NULL,
        flags = 0,
        library_interface = C_NULL,
        base_pipeline_handle = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pStages = if stages == C_NULL
            stages
        else
            getproperty.(stages, :vks)
        end
        _pGroups = if groups == C_NULL
            groups
        else
            getproperty.(groups, :vks)
        end
        _pLibraryInterface = if library_interface == C_NULL
            library_interface
        else
            Ref(library_interface.vks)
        end
        bag = BagRayTracingPipelineCreateInfoKHR(
            bag_next,
            _pNext,
            getproperty.(stages, :bag),
            _pStages,
            getproperty.(groups, :bag),
            _pGroups,
            libraries.bag,
            if library_interface == C_NULL
                EmptyBag
            else
                library_interface.bag
            end,
            _pLibraryInterface,
        )
        vks = VkRayTracingPipelineCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pStages,
            _pGroups,
            max_recursion_depth,
            libraries.vks,
            if _pLibraryInterface == C_NULL
                C_NULL
            else
                _pLibraryInterface
            end,
            layout.handle,
            if base_pipeline_handle == C_NULL
                C_NULL
            else
                base_pipeline_handle.handle
            end,
            base_pipeline_index,
        )
        new(vks, bag)
    end
end

struct RayTracingPipelineInterfaceCreateInfoKHR <: VulkanStruct
    vks::VkRayTracingPipelineInterfaceCreateInfoKHR
    bag::BagRayTracingPipelineInterfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function RayTracingPipelineInterfaceCreateInfoKHR(
        max_payload_size,
        max_attribute_size,
        max_callable_size;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagRayTracingPipelineInterfaceCreateInfoKHR(bag_next, _pNext)
        vks = VkRayTracingPipelineInterfaceCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            max_payload_size,
            max_attribute_size,
            max_callable_size,
        )
        new(vks, bag)
    end
end

struct RayTracingShaderGroupCreateInfoKHR <: VulkanStruct
    vks::VkRayTracingShaderGroupCreateInfoKHR
    bag::BagRayTracingShaderGroupCreateInfoKHR
    """
    Generic constructor.
    """
    function RayTracingShaderGroupCreateInfoKHR(
        type,
        general_shader,
        closest_hit_shader,
        any_hit_shader,
        intersection_shader;
        next = C_NULL,
        shader_group_capture_replay_handle = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pShaderGroupCaptureReplayHandle = if shader_group_capture_replay_handle == C_NULL
            shader_group_capture_replay_handle
        else
            Ref(shader_group_capture_replay_handle)
        end
        bag = BagRayTracingShaderGroupCreateInfoKHR(
            bag_next,
            _pNext,
            _pShaderGroupCaptureReplayHandle,
        )
        vks = VkRayTracingShaderGroupCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            general_shader,
            closest_hit_shader,
            any_hit_shader,
            intersection_shader,
            if _pShaderGroupCaptureReplayHandle == C_NULL
                C_NULL
            else
                _pShaderGroupCaptureReplayHandle
            end,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureBuildOffsetInfoKHR <: VulkanStruct
    vks::VkAccelerationStructureBuildOffsetInfoKHR
    AccelerationStructureBuildOffsetInfoKHR(
        vks::VkAccelerationStructureBuildOffsetInfoKHR,
    ) = new(vks)
end

struct DeviceOrHostAddressConstKHR <: VulkanStruct
    vks::VkDeviceOrHostAddressConstKHR
    DeviceOrHostAddressConstKHR(vks::VkDeviceOrHostAddressConstKHR) = new(vks)
end

struct DeviceOrHostAddressKHR <: VulkanStruct
    vks::VkDeviceOrHostAddressKHR
    DeviceOrHostAddressKHR(vks::VkDeviceOrHostAddressKHR) = new(vks)
end

struct PipelineLibraryCreateInfoKHR <: VulkanStruct
    vks::VkPipelineLibraryCreateInfoKHR
    bag::BagPipelineLibraryCreateInfoKHR
    """
    Generic constructor.
    """
    function PipelineLibraryCreateInfoKHR(libraries; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pLibraries = if libraries == C_NULL
            libraries
        else
            getproperty.(libraries, :handle)
        end
        bag = BagPipelineLibraryCreateInfoKHR(bag_next, _pNext, _pLibraries)
        vks = VkPipelineLibraryCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pLibraries)
        new(vks, bag)
    end
end

struct DeferredOperationInfoKHR <: VulkanStruct
    vks::VkDeferredOperationInfoKHR
    bag::BagDeferredOperationInfoKHR
    """
    Generic constructor.
    """
    function DeferredOperationInfoKHR(operation_handle; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeferredOperationInfoKHR(bag_next, _pNext)
        vks = VkDeferredOperationInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, operation_handle.handle)
        new(vks, bag)
    end
end

struct PresentFrameTokenGGP <: VulkanStruct
    vks::VkPresentFrameTokenGGP
    bag::BagPresentFrameTokenGGP
    """
    Generic constructor.
    """
    function PresentFrameTokenGGP(frame_token; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPresentFrameTokenGGP(bag_next, _pNext)
        vks = VkPresentFrameTokenGGP(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, frame_token)
        new(vks, bag)
    end
end

struct StreamDescriptorSurfaceCreateInfoGGP <: VulkanStruct
    vks::VkStreamDescriptorSurfaceCreateInfoGGP
    bag::BagStreamDescriptorSurfaceCreateInfoGGP
    """
    Generic constructor.
    """
    function StreamDescriptorSurfaceCreateInfoGGP(
        stream_descriptor;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagStreamDescriptorSurfaceCreateInfoGGP(bag_next, _pNext)
        vks = VkStreamDescriptorSurfaceCreateInfoGGP(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            stream_descriptor,
        )
        new(vks, bag)
    end
end

struct XlibSurfaceCreateInfoKHR <: VulkanStruct
    vks::VkXlibSurfaceCreateInfoKHR
    bag::BagXlibSurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function XlibSurfaceCreateInfoKHR(dpy, window; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagXlibSurfaceCreateInfoKHR(bag_next, _pNext, dpy)
        vks = VkXlibSurfaceCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, dpy, window)
        new(vks, bag)
    end
end

struct XcbSurfaceCreateInfoKHR <: VulkanStruct
    vks::VkXcbSurfaceCreateInfoKHR
    bag::BagXcbSurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function XcbSurfaceCreateInfoKHR(connection, window; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagXcbSurfaceCreateInfoKHR(bag_next, _pNext, connection)
        vks = VkXcbSurfaceCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            connection,
            window,
        )
        new(vks, bag)
    end
end

struct SurfaceFullScreenExclusiveWin32InfoEXT <: VulkanStruct
    vks::VkSurfaceFullScreenExclusiveWin32InfoEXT
    bag::BagSurfaceFullScreenExclusiveWin32InfoEXT
    """
    Generic constructor.
    """
    function SurfaceFullScreenExclusiveWin32InfoEXT(hmonitor; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSurfaceFullScreenExclusiveWin32InfoEXT(bag_next, _pNext)
        vks = VkSurfaceFullScreenExclusiveWin32InfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, hmonitor)
        new(vks, bag)
    end
end

struct SurfaceCapabilitiesFullScreenExclusiveEXT <: VulkanStruct
    vks::VkSurfaceCapabilitiesFullScreenExclusiveEXT
    bag::BagSurfaceCapabilitiesFullScreenExclusiveEXT
    """
    Generic constructor.
    """
    function SurfaceCapabilitiesFullScreenExclusiveEXT(
        full_screen_exclusive_supported;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSurfaceCapabilitiesFullScreenExclusiveEXT(bag_next, _pNext)
        vks = VkSurfaceCapabilitiesFullScreenExclusiveEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            full_screen_exclusive_supported,
        )
        new(vks, bag)
    end
end

struct SurfaceFullScreenExclusiveInfoEXT <: VulkanStruct
    vks::VkSurfaceFullScreenExclusiveInfoEXT
    bag::BagSurfaceFullScreenExclusiveInfoEXT
    """
    Generic constructor.
    """
    function SurfaceFullScreenExclusiveInfoEXT(full_screen_exclusive; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSurfaceFullScreenExclusiveInfoEXT(bag_next, _pNext)
        vks = VkSurfaceFullScreenExclusiveInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, full_screen_exclusive)
        new(vks, bag)
    end
end

struct Win32KeyedMutexAcquireReleaseInfoNV <: VulkanStruct
    vks::VkWin32KeyedMutexAcquireReleaseInfoNV
    bag::BagWin32KeyedMutexAcquireReleaseInfoNV
    """
    Generic constructor.
    """
    function Win32KeyedMutexAcquireReleaseInfoNV(
        acquire_syncs,
        acquire_keys,
        acquire_timeout_milliseconds,
        release_syncs,
        release_keys;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAcquireSyncs = if acquire_syncs == C_NULL
            acquire_syncs
        else
            getproperty.(acquire_syncs, :handle)
        end
        acquire_keys = convert(Array{UInt64}, acquire_keys)
        acquire_timeout_milliseconds = convert(Array{UInt32}, acquire_timeout_milliseconds)
        _pReleaseSyncs = if release_syncs == C_NULL
            release_syncs
        else
            getproperty.(release_syncs, :handle)
        end
        release_keys = convert(Array{UInt64}, release_keys)
        bag = BagWin32KeyedMutexAcquireReleaseInfoNV(
            bag_next,
            _pNext,
            _pAcquireSyncs,
            acquire_keys,
            acquire_timeout_milliseconds,
            _pReleaseSyncs,
            release_keys,
        )
        vks = VkWin32KeyedMutexAcquireReleaseInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pAcquireSyncs,
            acquire_keys,
            acquire_timeout_milliseconds,
            _pReleaseSyncs,
            release_keys,
        )
        new(vks, bag)
    end
end

struct ExportMemoryWin32HandleInfoNV <: VulkanStruct
    vks::VkExportMemoryWin32HandleInfoNV
    bag::BagExportMemoryWin32HandleInfoNV
    """
    Generic constructor.
    """
    function ExportMemoryWin32HandleInfoNV(;
        next = C_NULL,
        attributes = C_NULL,
        dw_access = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttributes = if attributes == C_NULL
            attributes
        else
            Ref(attributes)
        end
        bag = BagExportMemoryWin32HandleInfoNV(bag_next, _pNext, _pAttributes)
        vks = VkExportMemoryWin32HandleInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if _pAttributes == C_NULL
                C_NULL
            else
                _pAttributes
            end,
            if dw_access == 0
                0
            else
                dw_access
            end,
        )
        new(vks, bag)
    end
end

struct ImportMemoryWin32HandleInfoNV <: VulkanStruct
    vks::VkImportMemoryWin32HandleInfoNV
    bag::BagImportMemoryWin32HandleInfoNV
    """
    Generic constructor.
    """
    function ImportMemoryWin32HandleInfoNV(; next = C_NULL, handle_type = 0, handle = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportMemoryWin32HandleInfoNV(bag_next, _pNext)
        vks = VkImportMemoryWin32HandleInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if handle_type == 0
                0
            else
                handle_type
            end,
            if handle == 0
                0
            else
                handle
            end,
        )
        new(vks, bag)
    end
end

struct FenceGetWin32HandleInfoKHR <: VulkanStruct
    vks::VkFenceGetWin32HandleInfoKHR
    bag::BagFenceGetWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function FenceGetWin32HandleInfoKHR(fence, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagFenceGetWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkFenceGetWin32HandleInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, fence.handle, handle_type)
        new(vks, bag)
    end
end

struct ExportFenceWin32HandleInfoKHR <: VulkanStruct
    vks::VkExportFenceWin32HandleInfoKHR
    bag::BagExportFenceWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ExportFenceWin32HandleInfoKHR(
        dw_access,
        name;
        next = C_NULL,
        attributes = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttributes = if attributes == C_NULL
            attributes
        else
            Ref(attributes)
        end
        bag = BagExportFenceWin32HandleInfoKHR(bag_next, _pNext, _pAttributes)
        vks = VkExportFenceWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if _pAttributes == C_NULL
                C_NULL
            else
                _pAttributes
            end,
            dw_access,
            name,
        )
        new(vks, bag)
    end
end

struct ImportFenceWin32HandleInfoKHR <: VulkanStruct
    vks::VkImportFenceWin32HandleInfoKHR
    bag::BagImportFenceWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ImportFenceWin32HandleInfoKHR(
        fence;
        next = C_NULL,
        flags = 0,
        handle_type = 0,
        handle = 0,
        name = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportFenceWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkImportFenceWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fence.handle,
            if flags == 0
                0
            else
                flags
            end,
            if handle_type == 0
                0
            else
                handle_type
            end,
            if handle == 0
                0
            else
                handle
            end,
            if name == 0
                0
            else
                name
            end,
        )
        new(vks, bag)
    end
end

struct SemaphoreGetWin32HandleInfoKHR <: VulkanStruct
    vks::VkSemaphoreGetWin32HandleInfoKHR
    bag::BagSemaphoreGetWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function SemaphoreGetWin32HandleInfoKHR(semaphore, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSemaphoreGetWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkSemaphoreGetWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            semaphore.handle,
            handle_type,
        )
        new(vks, bag)
    end
end

struct D3D12FenceSubmitInfoKHR <: VulkanStruct
    vks::VkD3D12FenceSubmitInfoKHR
    bag::BagD3D12FenceSubmitInfoKHR
    """
    Generic constructor.
    """
    function D3D12FenceSubmitInfoKHR(;
        next = C_NULL,
        wait_semaphore_values = C_NULL,
        signal_semaphore_values = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        wait_semaphore_values = convert(Array{UInt64}, wait_semaphore_values)
        signal_semaphore_values = convert(Array{UInt64}, signal_semaphore_values)
        bag = BagD3D12FenceSubmitInfoKHR(
            bag_next,
            _pNext,
            wait_semaphore_values,
            signal_semaphore_values,
        )
        vks = VkD3D12FenceSubmitInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if wait_semaphore_values == C_NULL
                C_NULL
            else
                wait_semaphore_values
            end,
            if signal_semaphore_values == C_NULL
                C_NULL
            else
                signal_semaphore_values
            end,
        )
        new(vks, bag)
    end
end

struct ExportSemaphoreWin32HandleInfoKHR <: VulkanStruct
    vks::VkExportSemaphoreWin32HandleInfoKHR
    bag::BagExportSemaphoreWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ExportSemaphoreWin32HandleInfoKHR(
        dw_access,
        name;
        next = C_NULL,
        attributes = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttributes = if attributes == C_NULL
            attributes
        else
            Ref(attributes)
        end
        bag = BagExportSemaphoreWin32HandleInfoKHR(bag_next, _pNext, _pAttributes)
        vks = VkExportSemaphoreWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if _pAttributes == C_NULL
                C_NULL
            else
                _pAttributes
            end,
            dw_access,
            name,
        )
        new(vks, bag)
    end
end

struct ImportSemaphoreWin32HandleInfoKHR <: VulkanStruct
    vks::VkImportSemaphoreWin32HandleInfoKHR
    bag::BagImportSemaphoreWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ImportSemaphoreWin32HandleInfoKHR(
        semaphore;
        next = C_NULL,
        flags = 0,
        handle_type = 0,
        handle = 0,
        name = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportSemaphoreWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkImportSemaphoreWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            semaphore.handle,
            if flags == 0
                0
            else
                flags
            end,
            if handle_type == 0
                0
            else
                handle_type
            end,
            if handle == 0
                0
            else
                handle
            end,
            if name == 0
                0
            else
                name
            end,
        )
        new(vks, bag)
    end
end

struct Win32KeyedMutexAcquireReleaseInfoKHR <: VulkanStruct
    vks::VkWin32KeyedMutexAcquireReleaseInfoKHR
    bag::BagWin32KeyedMutexAcquireReleaseInfoKHR
    """
    Generic constructor.
    """
    function Win32KeyedMutexAcquireReleaseInfoKHR(
        acquire_syncs,
        acquire_keys,
        acquire_timeouts,
        release_syncs,
        release_keys;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAcquireSyncs = if acquire_syncs == C_NULL
            acquire_syncs
        else
            getproperty.(acquire_syncs, :handle)
        end
        acquire_keys = convert(Array{UInt64}, acquire_keys)
        acquire_timeouts = convert(Array{UInt32}, acquire_timeouts)
        _pReleaseSyncs = if release_syncs == C_NULL
            release_syncs
        else
            getproperty.(release_syncs, :handle)
        end
        release_keys = convert(Array{UInt64}, release_keys)
        bag = BagWin32KeyedMutexAcquireReleaseInfoKHR(
            bag_next,
            _pNext,
            _pAcquireSyncs,
            acquire_keys,
            acquire_timeouts,
            _pReleaseSyncs,
            release_keys,
        )
        vks = VkWin32KeyedMutexAcquireReleaseInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pAcquireSyncs,
            acquire_keys,
            acquire_timeouts,
            _pReleaseSyncs,
            release_keys,
        )
        new(vks, bag)
    end
end

struct MemoryGetWin32HandleInfoKHR <: VulkanStruct
    vks::VkMemoryGetWin32HandleInfoKHR
    bag::BagMemoryGetWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function MemoryGetWin32HandleInfoKHR(memory, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryGetWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkMemoryGetWin32HandleInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory.handle, handle_type)
        new(vks, bag)
    end
end

struct MemoryWin32HandlePropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct ExportMemoryWin32HandleInfoKHR <: VulkanStruct
    vks::VkExportMemoryWin32HandleInfoKHR
    bag::BagExportMemoryWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ExportMemoryWin32HandleInfoKHR(
        dw_access,
        name;
        next = C_NULL,
        attributes = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttributes = if attributes == C_NULL
            attributes
        else
            Ref(attributes)
        end
        bag = BagExportMemoryWin32HandleInfoKHR(bag_next, _pNext, _pAttributes)
        vks = VkExportMemoryWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if _pAttributes == C_NULL
                C_NULL
            else
                _pAttributes
            end,
            dw_access,
            name,
        )
        new(vks, bag)
    end
end

struct ImportMemoryWin32HandleInfoKHR <: VulkanStruct
    vks::VkImportMemoryWin32HandleInfoKHR
    bag::BagImportMemoryWin32HandleInfoKHR
    """
    Generic constructor.
    """
    function ImportMemoryWin32HandleInfoKHR(;
        next = C_NULL,
        handle_type = 0,
        handle = 0,
        name = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportMemoryWin32HandleInfoKHR(bag_next, _pNext)
        vks = VkImportMemoryWin32HandleInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if handle_type == 0
                0
            else
                handle_type
            end,
            if handle == 0
                0
            else
                handle
            end,
            if name == 0
                0
            else
                name
            end,
        )
        new(vks, bag)
    end
end

struct Win32SurfaceCreateInfoKHR <: VulkanStruct
    vks::VkWin32SurfaceCreateInfoKHR
    bag::BagWin32SurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function Win32SurfaceCreateInfoKHR(hinstance, hwnd; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagWin32SurfaceCreateInfoKHR(bag_next, _pNext)
        vks = VkWin32SurfaceCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, hinstance, hwnd)
        new(vks, bag)
    end
end

struct WaylandSurfaceCreateInfoKHR <: VulkanStruct
    vks::VkWaylandSurfaceCreateInfoKHR
    bag::BagWaylandSurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function WaylandSurfaceCreateInfoKHR(display, surface; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagWaylandSurfaceCreateInfoKHR(bag_next, _pNext, display, surface)
        vks = VkWaylandSurfaceCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            display,
            surface,
        )
        new(vks, bag)
    end
end

struct ViSurfaceCreateInfoNN <: VulkanStruct
    vks::VkViSurfaceCreateInfoNN
    bag::BagViSurfaceCreateInfoNN
    """
    Generic constructor.
    """
    function ViSurfaceCreateInfoNN(window; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _window = if window == C_NULL
            window
        else
            Ref(window)
        end
        bag = BagViSurfaceCreateInfoNN(bag_next, _pNext, _window)
        vks = VkViSurfaceCreateInfoNN(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _window)
        new(vks, bag)
    end
end

struct MetalSurfaceCreateInfoEXT <: VulkanStruct
    vks::VkMetalSurfaceCreateInfoEXT
    bag::BagMetalSurfaceCreateInfoEXT
    """
    Generic constructor.
    """
    function MetalSurfaceCreateInfoEXT(layer; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMetalSurfaceCreateInfoEXT(bag_next, _pNext, layer)
        vks = VkMetalSurfaceCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, layer)
        new(vks, bag)
    end
end

struct MacOSSurfaceCreateInfoMVK <: VulkanStruct
    vks::VkMacOSSurfaceCreateInfoMVK
    bag::BagMacOSSurfaceCreateInfoMVK
    """
    Generic constructor.
    """
    function MacOSSurfaceCreateInfoMVK(view; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pView = if view == C_NULL
            view
        else
            Ref(view)
        end
        bag = BagMacOSSurfaceCreateInfoMVK(bag_next, _pNext, _pView)
        vks = VkMacOSSurfaceCreateInfoMVK(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _pView)
        new(vks, bag)
    end
end

struct IOSSurfaceCreateInfoMVK <: VulkanStruct
    vks::VkIOSSurfaceCreateInfoMVK
    bag::BagIOSSurfaceCreateInfoMVK
    """
    Generic constructor.
    """
    function IOSSurfaceCreateInfoMVK(view; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pView = if view == C_NULL
            view
        else
            Ref(view)
        end
        bag = BagIOSSurfaceCreateInfoMVK(bag_next, _pNext, _pView)
        vks = VkIOSSurfaceCreateInfoMVK(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _pView)
        new(vks, bag)
    end
end

struct ImagePipeSurfaceCreateInfoFUCHSIA <: VulkanStruct
    vks::VkImagePipeSurfaceCreateInfoFUCHSIA
    bag::BagImagePipeSurfaceCreateInfoFUCHSIA
    """
    Generic constructor.
    """
    function ImagePipeSurfaceCreateInfoFUCHSIA(image_pipe_handle; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImagePipeSurfaceCreateInfoFUCHSIA(bag_next, _pNext)
        vks = VkImagePipeSurfaceCreateInfoFUCHSIA(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            image_pipe_handle,
        )
        new(vks, bag)
    end
end

struct ExternalFormatANDROID <: VulkanStruct
    vks::VkExternalFormatANDROID
    bag::BagExternalFormatANDROID
    """
    Generic constructor.
    """
    function ExternalFormatANDROID(external_format; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExternalFormatANDROID(bag_next, _pNext)
        vks = VkExternalFormatANDROID(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, external_format)
        new(vks, bag)
    end
end

struct MemoryGetAndroidHardwareBufferInfoANDROID <: VulkanStruct
    vks::VkMemoryGetAndroidHardwareBufferInfoANDROID
    bag::BagMemoryGetAndroidHardwareBufferInfoANDROID
    """
    Generic constructor.
    """
    function MemoryGetAndroidHardwareBufferInfoANDROID(memory; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryGetAndroidHardwareBufferInfoANDROID(bag_next, _pNext)
        vks = VkMemoryGetAndroidHardwareBufferInfoANDROID(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory.handle)
        new(vks, bag)
    end
end

struct ImportAndroidHardwareBufferInfoANDROID <: VulkanStruct
    vks::VkImportAndroidHardwareBufferInfoANDROID
    bag::BagImportAndroidHardwareBufferInfoANDROID
    """
    Generic constructor.
    """
    function ImportAndroidHardwareBufferInfoANDROID(buffer; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportAndroidHardwareBufferInfoANDROID(bag_next, _pNext, buffer)
        vks = VkImportAndroidHardwareBufferInfoANDROID(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, buffer)
        new(vks, bag)
    end
end

struct AndroidHardwareBufferUsageANDROID <: ReturnedOnly
    next::Ptr{Cvoid}
    android_hardware_buffer_usage::UInt64
end

struct AndroidSurfaceCreateInfoKHR <: VulkanStruct
    vks::VkAndroidSurfaceCreateInfoKHR
    bag::BagAndroidSurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function AndroidSurfaceCreateInfoKHR(window; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAndroidSurfaceCreateInfoKHR(bag_next, _pNext, window)
        vks = VkAndroidSurfaceCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, window)
        new(vks, bag)
    end
end

struct PhysicalDevice4444FormatsFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDevice4444FormatsFeaturesEXT
    bag::BagPhysicalDevice4444FormatsFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDevice4444FormatsFeaturesEXT(
        format_a4r4g4b4,
        format_a4b4g4r4;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevice4444FormatsFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDevice4444FormatsFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            format_a4r4g4b4,
            format_a4b4g4r4,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceImageRobustnessFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceImageRobustnessFeaturesEXT
    bag::BagPhysicalDeviceImageRobustnessFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceImageRobustnessFeaturesEXT(robust_image_access; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceImageRobustnessFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceImageRobustnessFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            robust_image_access,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceFragmentDensityMap2PropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    subsampled_loads::Bool
    subsampled_coarse_reconstruction_early_access::Bool
    max_subsampled_array_layers::UInt32
    max_descriptor_set_subsampled_samplers::UInt32
end

struct PhysicalDeviceFragmentDensityMap2FeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    bag::BagPhysicalDeviceFragmentDensityMap2FeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceFragmentDensityMap2FeaturesEXT(
        fragment_density_map_deferred;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceFragmentDensityMap2FeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fragment_density_map_deferred,
        )
        new(vks, bag)
    end
end

struct DeviceDiagnosticsConfigCreateInfoNV <: VulkanStruct
    vks::VkDeviceDiagnosticsConfigCreateInfoNV
    bag::BagDeviceDiagnosticsConfigCreateInfoNV
    """
    Generic constructor.
    """
    function DeviceDiagnosticsConfigCreateInfoNV(; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceDiagnosticsConfigCreateInfoNV(bag_next, _pNext)
        vks = VkDeviceDiagnosticsConfigCreateInfoNV(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct PhysicalDeviceDiagnosticsConfigFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    bag::BagPhysicalDeviceDiagnosticsConfigFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceDiagnosticsConfigFeaturesNV(diagnostics_config; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceDiagnosticsConfigFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            diagnostics_config,
        )
        new(vks, bag)
    end
end

struct PhysicalDevicePipelineCreationCacheControlFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    bag::BagPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDevicePipelineCreationCacheControlFeaturesEXT(
        pipeline_creation_cache_control;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevicePipelineCreationCacheControlFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            pipeline_creation_cache_control,
        )
        new(vks, bag)
    end
end

struct PrivateDataSlotCreateInfoEXT <: VulkanStruct
    vks::VkPrivateDataSlotCreateInfoEXT
    bag::BagPrivateDataSlotCreateInfoEXT
    """
    Generic constructor.
    """
    function PrivateDataSlotCreateInfoEXT(flags; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPrivateDataSlotCreateInfoEXT(bag_next, _pNext)
        vks = VkPrivateDataSlotCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, flags)
        new(vks, bag)
    end
end

struct DevicePrivateDataCreateInfoEXT <: VulkanStruct
    vks::VkDevicePrivateDataCreateInfoEXT
    bag::BagDevicePrivateDataCreateInfoEXT
    """
    Generic constructor.
    """
    function DevicePrivateDataCreateInfoEXT(private_data_slot_request_count; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDevicePrivateDataCreateInfoEXT(bag_next, _pNext)
        vks = VkDevicePrivateDataCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            private_data_slot_request_count,
        )
        new(vks, bag)
    end
end

struct PhysicalDevicePrivateDataFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDevicePrivateDataFeaturesEXT
    bag::BagPhysicalDevicePrivateDataFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDevicePrivateDataFeaturesEXT(private_data; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevicePrivateDataFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDevicePrivateDataFeaturesEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, private_data)
        new(vks, bag)
    end
end

struct PhysicalDeviceCustomBorderColorFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceCustomBorderColorFeaturesEXT
    bag::BagPhysicalDeviceCustomBorderColorFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceCustomBorderColorFeaturesEXT(
        custom_border_colors,
        custom_border_color_without_format;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceCustomBorderColorFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceCustomBorderColorFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            custom_border_colors,
            custom_border_color_without_format,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceCustomBorderColorPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_custom_border_color_samplers::UInt32
end

struct SamplerCustomBorderColorCreateInfoEXT <: VulkanStruct
    vks::VkSamplerCustomBorderColorCreateInfoEXT
    bag::BagSamplerCustomBorderColorCreateInfoEXT
    """
    Generic constructor.
    """
    function SamplerCustomBorderColorCreateInfoEXT(
        custom_border_color,
        format;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSamplerCustomBorderColorCreateInfoEXT(bag_next, _pNext)
        vks = VkSamplerCustomBorderColorCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            custom_border_color.vks,
            format,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceRobustness2FeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceRobustness2FeaturesEXT
    bag::BagPhysicalDeviceRobustness2FeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceRobustness2FeaturesEXT(
        robust_buffer_access_2,
        robust_image_access_2,
        null_descriptor;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceRobustness2FeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceRobustness2FeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            robust_buffer_access_2,
            robust_image_access_2,
            null_descriptor,
        )
        new(vks, bag)
    end
end

struct CommandBufferInheritanceRenderPassTransformInfoQCOM <: VulkanStruct
    vks::VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    bag::BagCommandBufferInheritanceRenderPassTransformInfoQCOM
    """
    Generic constructor.
    """
    function CommandBufferInheritanceRenderPassTransformInfoQCOM(
        transform,
        render_area;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCommandBufferInheritanceRenderPassTransformInfoQCOM(bag_next, _pNext)
        vks = VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            transform,
            render_area.vks,
        )
        new(vks, bag)
    end
end

struct RenderPassTransformBeginInfoQCOM <: VulkanStruct
    vks::VkRenderPassTransformBeginInfoQCOM
    bag::BagRenderPassTransformBeginInfoQCOM
    """
    Generic constructor.
    """
    function RenderPassTransformBeginInfoQCOM(transform; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagRenderPassTransformBeginInfoQCOM(bag_next, _pNext)
        vks = VkRenderPassTransformBeginInfoQCOM(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, transform)
        new(vks, bag)
    end
end

struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    bag::BagPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceTexelBufferAlignmentFeaturesEXT(
        texel_buffer_alignment;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceTexelBufferAlignmentFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            texel_buffer_alignment,
        )
        new(vks, bag)
    end
end

struct GeneratedCommandsMemoryRequirementsInfoNV <: VulkanStruct
    vks::VkGeneratedCommandsMemoryRequirementsInfoNV
    bag::BagGeneratedCommandsMemoryRequirementsInfoNV
    """
    Generic constructor.
    """
    function GeneratedCommandsMemoryRequirementsInfoNV(
        pipeline_bind_point,
        pipeline,
        indirect_commands_layout,
        max_sequences_count;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagGeneratedCommandsMemoryRequirementsInfoNV(bag_next, _pNext)
        vks = VkGeneratedCommandsMemoryRequirementsInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            pipeline_bind_point,
            pipeline.handle,
            indirect_commands_layout.handle,
            max_sequences_count,
        )
        new(vks, bag)
    end
end

struct GeneratedCommandsInfoNV <: VulkanStruct
    vks::VkGeneratedCommandsInfoNV
    bag::BagGeneratedCommandsInfoNV
    """
    Generic constructor.
    """
    function GeneratedCommandsInfoNV(
        pipeline_bind_point,
        pipeline,
        indirect_commands_layout,
        streams,
        sequences_count,
        preprocess_buffer,
        preprocess_offset,
        preprocess_size;
        next = C_NULL,
        sequences_count_buffer = C_NULL,
        sequences_count_offset = 0,
        sequences_index_buffer = C_NULL,
        sequences_index_offset = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pStreams = if streams == C_NULL
            streams
        else
            getproperty.(streams, :vks)
        end
        bag = BagGeneratedCommandsInfoNV(bag_next, _pNext, _pStreams)
        vks = VkGeneratedCommandsInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            pipeline_bind_point,
            pipeline.handle,
            indirect_commands_layout.handle,
            _pStreams,
            sequences_count,
            preprocess_buffer.handle,
            preprocess_offset,
            preprocess_size,
            if sequences_count_buffer == C_NULL
                C_NULL
            else
                sequences_count_buffer.handle
            end,
            if sequences_count_offset == 0
                0
            else
                sequences_count_offset
            end,
            if sequences_index_buffer == C_NULL
                C_NULL
            else
                sequences_index_buffer.handle
            end,
            if sequences_index_offset == 0
                0
            else
                sequences_index_offset
            end,
        )
        new(vks, bag)
    end
end

struct IndirectCommandsLayoutCreateInfoNV <: VulkanStruct
    vks::VkIndirectCommandsLayoutCreateInfoNV
    bag::BagIndirectCommandsLayoutCreateInfoNV
    """
    Generic constructor.
    """
    function IndirectCommandsLayoutCreateInfoNV(
        flags,
        pipeline_bind_point,
        tokens,
        stream_strides;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pTokens = if tokens == C_NULL
            tokens
        else
            getproperty.(tokens, :vks)
        end
        stream_strides = convert(Array{UInt32}, stream_strides)
        bag = BagIndirectCommandsLayoutCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(tokens, :bag),
            _pTokens,
            stream_strides,
        )
        vks = VkIndirectCommandsLayoutCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            flags,
            pipeline_bind_point,
            _pTokens,
            stream_strides,
        )
        new(vks, bag)
    end
end

struct IndirectCommandsLayoutTokenNV <: VulkanStruct
    vks::VkIndirectCommandsLayoutTokenNV
    bag::BagIndirectCommandsLayoutTokenNV
    """
    Generic constructor.
    """
    function IndirectCommandsLayoutTokenNV(
        token_type,
        stream,
        offset,
        vertex_binding_unit,
        vertex_dynamic_stride,
        pushconstant_offset,
        pushconstant_size,
        index_types,
        index_type_values;
        next = C_NULL,
        pushconstant_pipeline_layout = C_NULL,
        pushconstant_shader_stage_flags = C_NULL,
        indirect_state_flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        index_type_values = convert(Array{UInt32}, index_type_values)
        bag = BagIndirectCommandsLayoutTokenNV(
            bag_next,
            _pNext,
            index_types,
            index_type_values,
        )
        vks = VkIndirectCommandsLayoutTokenNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            token_type,
            stream,
            offset,
            vertex_binding_unit,
            vertex_dynamic_stride,
            if pushconstant_pipeline_layout == C_NULL
                C_NULL
            else
                pushconstant_pipeline_layout.handle
            end,
            if pushconstant_shader_stage_flags == C_NULL
                C_NULL
            else
                pushconstant_shader_stage_flags
            end,
            pushconstant_offset,
            pushconstant_size,
            if indirect_state_flags == 0
                0
            else
                indirect_state_flags
            end,
            index_types,
            index_type_values,
        )
        new(vks, bag)
    end
end

struct IndirectCommandsStreamNV <: VulkanStruct
    vks::VkIndirectCommandsStreamNV
    IndirectCommandsStreamNV(vks::VkIndirectCommandsStreamNV) = new(vks)
end

struct SetStateFlagsIndirectCommandNV <: VulkanStruct
    vks::VkSetStateFlagsIndirectCommandNV
    SetStateFlagsIndirectCommandNV(vks::VkSetStateFlagsIndirectCommandNV) = new(vks)
end

struct BindVertexBufferIndirectCommandNV <: VulkanStruct
    vks::VkBindVertexBufferIndirectCommandNV
    BindVertexBufferIndirectCommandNV(vks::VkBindVertexBufferIndirectCommandNV) = new(vks)
end

struct BindIndexBufferIndirectCommandNV <: VulkanStruct
    vks::VkBindIndexBufferIndirectCommandNV
    BindIndexBufferIndirectCommandNV(vks::VkBindIndexBufferIndirectCommandNV) = new(vks)
end

struct BindShaderGroupIndirectCommandNV <: VulkanStruct
    vks::VkBindShaderGroupIndirectCommandNV
    BindShaderGroupIndirectCommandNV(vks::VkBindShaderGroupIndirectCommandNV) = new(vks)
end

struct GraphicsPipelineShaderGroupsCreateInfoNV <: VulkanStruct
    vks::VkGraphicsPipelineShaderGroupsCreateInfoNV
    bag::BagGraphicsPipelineShaderGroupsCreateInfoNV
    """
    Generic constructor.
    """
    function GraphicsPipelineShaderGroupsCreateInfoNV(groups, pipelines; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pGroups = if groups == C_NULL
            groups
        else
            getproperty.(groups, :vks)
        end
        _pPipelines = if pipelines == C_NULL
            pipelines
        else
            getproperty.(pipelines, :handle)
        end
        bag = BagGraphicsPipelineShaderGroupsCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(groups, :bag),
            _pGroups,
            _pPipelines,
        )
        vks = VkGraphicsPipelineShaderGroupsCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pGroups,
            _pPipelines,
        )
        new(vks, bag)
    end
end

struct GraphicsShaderGroupCreateInfoNV <: VulkanStruct
    vks::VkGraphicsShaderGroupCreateInfoNV
    bag::BagGraphicsShaderGroupCreateInfoNV
    """
    Generic constructor.
    """
    function GraphicsShaderGroupCreateInfoNV(
        stages;
        next = C_NULL,
        vertex_input_state = C_NULL,
        tessellation_state = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pStages = if stages == C_NULL
            stages
        else
            getproperty.(stages, :vks)
        end
        _pVertexInputState = if vertex_input_state == C_NULL
            vertex_input_state
        else
            Ref(vertex_input_state.vks)
        end
        _pTessellationState = if tessellation_state == C_NULL
            tessellation_state
        else
            Ref(tessellation_state.vks)
        end
        bag = BagGraphicsShaderGroupCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(stages, :bag),
            _pStages,
            if vertex_input_state == C_NULL
                EmptyBag
            else
                vertex_input_state.bag
            end,
            _pVertexInputState,
            if tessellation_state == C_NULL
                EmptyBag
            else
                tessellation_state.bag
            end,
            _pTessellationState,
        )
        vks = VkGraphicsShaderGroupCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pStages,
            if _pVertexInputState == C_NULL
                C_NULL
            else
                _pVertexInputState
            end,
            if _pTessellationState == C_NULL
                C_NULL
            else
                _pTessellationState
            end,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    bag::BagPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
        device_generated_commands;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            device_generated_commands,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    max_graphics_shader_group_count::UInt32
    max_indirect_sequence_count::UInt32
    max_indirect_commands_token_count::UInt32
    max_indirect_commands_stream_count::UInt32
    max_indirect_commands_token_offset::UInt32
    max_indirect_commands_stream_stride::UInt32
    min_sequences_count_buffer_offset_alignment::UInt32
    min_sequences_index_buffer_offset_alignment::UInt32
    min_indirect_commands_buffer_offset_alignment::UInt32
end

struct PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    bag::BagPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
        shader_demote_to_helper_invocation;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_demote_to_helper_invocation,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceExtendedDynamicStateFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    bag::BagPhysicalDeviceExtendedDynamicStateFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceExtendedDynamicStateFeaturesEXT(
        extended_dynamic_state;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExtendedDynamicStateFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            extended_dynamic_state,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceIndexTypeUint8FeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    bag::BagPhysicalDeviceIndexTypeUint8FeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceIndexTypeUint8FeaturesEXT(index_type_uint_8; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceIndexTypeUint8FeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            index_type_uint_8,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderAtomicFloatFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    bag::BagPhysicalDeviceShaderAtomicFloatFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderAtomicFloatFeaturesEXT(
        shader_buffer_float_32_atomics,
        shader_buffer_float_32_atomic_add,
        shader_buffer_float_64_atomics,
        shader_buffer_float_64_atomic_add,
        shader_shared_float_32_atomics,
        shader_shared_float_32_atomic_add,
        shader_shared_float_64_atomics,
        shader_shared_float_64_atomic_add,
        shader_image_float_32_atomics,
        shader_image_float_32_atomic_add,
        sparse_image_float_32_atomics,
        sparse_image_float_32_atomic_add;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderAtomicFloatFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_buffer_float_32_atomics,
            shader_buffer_float_32_atomic_add,
            shader_buffer_float_64_atomics,
            shader_buffer_float_64_atomic_add,
            shader_shared_float_32_atomics,
            shader_shared_float_32_atomic_add,
            shader_shared_float_64_atomics,
            shader_shared_float_64_atomic_add,
            shader_image_float_32_atomics,
            shader_image_float_32_atomic_add,
            sparse_image_float_32_atomics,
            sparse_image_float_32_atomic_add,
        )
        new(vks, bag)
    end
end

struct PipelineRasterizationLineStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineRasterizationLineStateCreateInfoEXT
    bag::BagPipelineRasterizationLineStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineRasterizationLineStateCreateInfoEXT(
        line_rasterization_mode,
        stippled_line_enable;
        next = C_NULL,
        line_stipple_factor = 0,
        line_stipple_pattern = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationLineStateCreateInfoEXT(bag_next, _pNext)
        vks = VkPipelineRasterizationLineStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            line_rasterization_mode,
            stippled_line_enable,
            if line_stipple_factor == 0
                0
            else
                line_stipple_factor
            end,
            if line_stipple_pattern == 0
                0
            else
                line_stipple_pattern
            end,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceLineRasterizationPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    line_sub_pixel_precision_bits::UInt32
end

struct PhysicalDeviceLineRasterizationFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceLineRasterizationFeaturesEXT
    bag::BagPhysicalDeviceLineRasterizationFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceLineRasterizationFeaturesEXT(
        rectangular_lines,
        bresenham_lines,
        smooth_lines,
        stippled_rectangular_lines,
        stippled_bresenham_lines,
        stippled_smooth_lines;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceLineRasterizationFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceLineRasterizationFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            rectangular_lines,
            bresenham_lines,
            smooth_lines,
            stippled_rectangular_lines,
            stippled_bresenham_lines,
            stippled_smooth_lines,
        )
        new(vks, bag)
    end
end

struct HeadlessSurfaceCreateInfoEXT <: VulkanStruct
    vks::VkHeadlessSurfaceCreateInfoEXT
    bag::BagHeadlessSurfaceCreateInfoEXT
    """
    Generic constructor.
    """
    function HeadlessSurfaceCreateInfoEXT(; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagHeadlessSurfaceCreateInfoEXT(bag_next, _pNext)
        vks = VkHeadlessSurfaceCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct PhysicalDeviceYcbcrImageArraysFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    bag::BagPhysicalDeviceYcbcrImageArraysFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceYcbcrImageArraysFeaturesEXT(ycbcr_image_arrays; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceYcbcrImageArraysFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            ycbcr_image_arrays,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    bag::BagPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceFragmentShaderInterlockFeaturesEXT(
        fragment_shader_sample_interlock,
        fragment_shader_pixel_interlock,
        fragment_shader_shading_rate_interlock;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceFragmentShaderInterlockFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fragment_shader_sample_interlock,
            fragment_shader_pixel_interlock,
            fragment_shader_shading_rate_interlock,
        )
        new(vks, bag)
    end
end

struct PipelineCoverageReductionStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineCoverageReductionStateCreateInfoNV
    bag::BagPipelineCoverageReductionStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineCoverageReductionStateCreateInfoNV(
        coverage_reduction_mode;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineCoverageReductionStateCreateInfoNV(bag_next, _pNext)
        vks = VkPipelineCoverageReductionStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            coverage_reduction_mode,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceCoverageReductionModeFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceCoverageReductionModeFeaturesNV
    bag::BagPhysicalDeviceCoverageReductionModeFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceCoverageReductionModeFeaturesNV(
        coverage_reduction_mode;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceCoverageReductionModeFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceCoverageReductionModeFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            coverage_reduction_mode,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceCooperativeMatrixFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceCooperativeMatrixFeaturesNV
    bag::BagPhysicalDeviceCooperativeMatrixFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceCooperativeMatrixFeaturesNV(
        cooperative_matrix,
        cooperative_matrix_robust_buffer_access;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceCooperativeMatrixFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceCooperativeMatrixFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            cooperative_matrix,
            cooperative_matrix_robust_buffer_access,
        )
        new(vks, bag)
    end
end

struct CooperativeMatrixPropertiesNV <: VulkanStruct
    vks::VkCooperativeMatrixPropertiesNV
    bag::BagCooperativeMatrixPropertiesNV
    """
    Generic constructor.
    """
    function CooperativeMatrixPropertiesNV(
        m_size,
        n_size,
        k_size,
        a_type,
        b_type,
        c_type,
        d_type,
        scope;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCooperativeMatrixPropertiesNV(bag_next, _pNext)
        vks = VkCooperativeMatrixPropertiesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            m_size,
            n_size,
            k_size,
            a_type,
            b_type,
            c_type,
            d_type,
            scope,
        )
        new(vks, bag)
    end
end

struct ValidationFeaturesEXT <: VulkanStruct
    vks::VkValidationFeaturesEXT
    bag::BagValidationFeaturesEXT
    """
    Generic constructor.
    """
    function ValidationFeaturesEXT(
        enabled_validation_features,
        disabled_validation_features;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagValidationFeaturesEXT(
            bag_next,
            _pNext,
            enabled_validation_features,
            disabled_validation_features,
        )
        vks = VkValidationFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            enabled_validation_features,
            disabled_validation_features,
        )
        new(vks, bag)
    end
end

struct BufferDeviceAddressCreateInfoEXT <: VulkanStruct
    vks::VkBufferDeviceAddressCreateInfoEXT
    bag::BagBufferDeviceAddressCreateInfoEXT
    """
    Generic constructor.
    """
    function BufferDeviceAddressCreateInfoEXT(device_address; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferDeviceAddressCreateInfoEXT(bag_next, _pNext)
        vks = VkBufferDeviceAddressCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, device_address)
        new(vks, bag)
    end
end

struct PhysicalDeviceBufferDeviceAddressFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    bag::BagPhysicalDeviceBufferDeviceAddressFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceBufferDeviceAddressFeaturesEXT(
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceBufferDeviceAddressFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            buffer_device_address,
            buffer_device_address_capture_replay,
            buffer_device_address_multi_device,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    bag::BagPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
        dedicated_allocation_image_aliasing;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            dedicated_allocation_image_aliasing,
        )
        new(vks, bag)
    end
end

struct MemoryPriorityAllocateInfoEXT <: VulkanStruct
    vks::VkMemoryPriorityAllocateInfoEXT
    bag::BagMemoryPriorityAllocateInfoEXT
    """
    Generic constructor.
    """
    function MemoryPriorityAllocateInfoEXT(priority; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryPriorityAllocateInfoEXT(bag_next, _pNext)
        vks = VkMemoryPriorityAllocateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, priority)
        new(vks, bag)
    end
end

struct PhysicalDeviceMemoryPriorityFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceMemoryPriorityFeaturesEXT
    bag::BagPhysicalDeviceMemoryPriorityFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceMemoryPriorityFeaturesEXT(memory_priority; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceMemoryPriorityFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceMemoryPriorityFeaturesEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory_priority)
        new(vks, bag)
    end
end

struct PhysicalDeviceMemoryBudgetPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    heap_budget::NTuple{16,VkDeviceSize}
    heap_usage::NTuple{16,VkDeviceSize}
end

struct PhysicalDeviceCoherentMemoryFeaturesAMD <: VulkanStruct
    vks::VkPhysicalDeviceCoherentMemoryFeaturesAMD
    bag::BagPhysicalDeviceCoherentMemoryFeaturesAMD
    """
    Generic constructor.
    """
    function PhysicalDeviceCoherentMemoryFeaturesAMD(device_coherent_memory; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceCoherentMemoryFeaturesAMD(bag_next, _pNext)
        vks = VkPhysicalDeviceCoherentMemoryFeaturesAMD(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            device_coherent_memory,
        )
        new(vks, bag)
    end
end

struct PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    required_subgroup_size::UInt32
end

struct PhysicalDeviceSubgroupSizeControlFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
    bag::BagPhysicalDeviceSubgroupSizeControlFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceSubgroupSizeControlFeaturesEXT(
        subgroup_size_control,
        compute_full_subgroups;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceSubgroupSizeControlFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            subgroup_size_control,
            compute_full_subgroups,
        )
        new(vks, bag)
    end
end

struct RenderPassFragmentDensityMapCreateInfoEXT <: VulkanStruct
    vks::VkRenderPassFragmentDensityMapCreateInfoEXT
    bag::BagRenderPassFragmentDensityMapCreateInfoEXT
    """
    Generic constructor.
    """
    function RenderPassFragmentDensityMapCreateInfoEXT(
        fragment_density_map_attachment;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagRenderPassFragmentDensityMapCreateInfoEXT(bag_next, _pNext)
        vks = VkRenderPassFragmentDensityMapCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fragment_density_map_attachment.vks,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceFragmentDensityMapFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    bag::BagPhysicalDeviceFragmentDensityMapFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceFragmentDensityMapFeaturesEXT(
        fragment_density_map,
        fragment_density_map_dynamic,
        fragment_density_map_non_subsampled_images;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceFragmentDensityMapFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fragment_density_map,
            fragment_density_map_dynamic,
            fragment_density_map_non_subsampled_images,
        )
        new(vks, bag)
    end
end

struct SwapchainDisplayNativeHdrCreateInfoAMD <: VulkanStruct
    vks::VkSwapchainDisplayNativeHdrCreateInfoAMD
    bag::BagSwapchainDisplayNativeHdrCreateInfoAMD
    """
    Generic constructor.
    """
    function SwapchainDisplayNativeHdrCreateInfoAMD(local_dimming_enable; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSwapchainDisplayNativeHdrCreateInfoAMD(bag_next, _pNext)
        vks = VkSwapchainDisplayNativeHdrCreateInfoAMD(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            local_dimming_enable,
        )
        new(vks, bag)
    end
end

struct DisplayNativeHdrSurfaceCapabilitiesAMD <: ReturnedOnly
    next::Ptr{Cvoid}
    local_dimming_support::Bool
end

struct PhysicalDevicePCIBusInfoPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    pci_domain::UInt32
    pci_bus::UInt32
    pci_device::UInt32
    pci_function::UInt32
end

struct PerformanceConfigurationAcquireInfoINTEL <: VulkanStruct
    vks::VkPerformanceConfigurationAcquireInfoINTEL
    bag::BagPerformanceConfigurationAcquireInfoINTEL
    """
    Generic constructor.
    """
    function PerformanceConfigurationAcquireInfoINTEL(type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPerformanceConfigurationAcquireInfoINTEL(bag_next, _pNext)
        vks = VkPerformanceConfigurationAcquireInfoINTEL(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, type)
        new(vks, bag)
    end
end

struct PerformanceOverrideInfoINTEL <: VulkanStruct
    vks::VkPerformanceOverrideInfoINTEL
    bag::BagPerformanceOverrideInfoINTEL
    """
    Generic constructor.
    """
    function PerformanceOverrideInfoINTEL(type, enable, parameter; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPerformanceOverrideInfoINTEL(bag_next, _pNext)
        vks = VkPerformanceOverrideInfoINTEL(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, type, enable, parameter)
        new(vks, bag)
    end
end

struct PerformanceStreamMarkerInfoINTEL <: VulkanStruct
    vks::VkPerformanceStreamMarkerInfoINTEL
    bag::BagPerformanceStreamMarkerInfoINTEL
    """
    Generic constructor.
    """
    function PerformanceStreamMarkerInfoINTEL(marker; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPerformanceStreamMarkerInfoINTEL(bag_next, _pNext)
        vks = VkPerformanceStreamMarkerInfoINTEL(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, marker)
        new(vks, bag)
    end
end

struct PerformanceMarkerInfoINTEL <: VulkanStruct
    vks::VkPerformanceMarkerInfoINTEL
    bag::BagPerformanceMarkerInfoINTEL
    """
    Generic constructor.
    """
    function PerformanceMarkerInfoINTEL(marker; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPerformanceMarkerInfoINTEL(bag_next, _pNext)
        vks = VkPerformanceMarkerInfoINTEL(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, marker)
        new(vks, bag)
    end
end

struct QueryPoolPerformanceQueryCreateInfoINTEL <: VulkanStruct
    vks::VkQueryPoolPerformanceQueryCreateInfoINTEL
    bag::BagQueryPoolPerformanceQueryCreateInfoINTEL
    """
    Generic constructor.
    """
    function QueryPoolPerformanceQueryCreateInfoINTEL(
        performance_counters_sampling;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagQueryPoolPerformanceQueryCreateInfoINTEL(bag_next, _pNext)
        vks = VkQueryPoolPerformanceQueryCreateInfoINTEL(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            performance_counters_sampling,
        )
        new(vks, bag)
    end
end

struct InitializePerformanceApiInfoINTEL <: VulkanStruct
    vks::VkInitializePerformanceApiInfoINTEL
    bag::BagInitializePerformanceApiInfoINTEL
    """
    Generic constructor.
    """
    function InitializePerformanceApiInfoINTEL(user_data; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pUserData = if user_data == C_NULL
            user_data
        else
            Ref(user_data)
        end
        bag = BagInitializePerformanceApiInfoINTEL(bag_next, _pNext, _pUserData)
        vks = VkInitializePerformanceApiInfoINTEL(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pUserData)
        new(vks, bag)
    end
end

struct PerformanceValueINTEL <: VulkanStruct
    vks::VkPerformanceValueINTEL
    PerformanceValueINTEL(vks::VkPerformanceValueINTEL) = new(vks)
end

struct PerformanceValueDataINTEL <: VulkanStruct
    vks::VkPerformanceValueDataINTEL
    PerformanceValueDataINTEL(vks::VkPerformanceValueDataINTEL) = new(vks)
end

struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL <: VulkanStruct
    vks::VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    bag::BagPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
        shader_integer_functions_2;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_integer_functions_2,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceExclusiveScissorFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceExclusiveScissorFeaturesNV
    bag::BagPhysicalDeviceExclusiveScissorFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceExclusiveScissorFeaturesNV(exclusive_scissor; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExclusiveScissorFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceExclusiveScissorFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            exclusive_scissor,
        )
        new(vks, bag)
    end
end

struct PipelineViewportExclusiveScissorStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineViewportExclusiveScissorStateCreateInfoNV
    bag::BagPipelineViewportExclusiveScissorStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineViewportExclusiveScissorStateCreateInfoNV(
        exclusive_scissors;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pExclusiveScissors = if exclusive_scissors == C_NULL
            exclusive_scissors
        else
            getproperty.(exclusive_scissors, :vks)
        end
        bag = BagPipelineViewportExclusiveScissorStateCreateInfoNV(
            bag_next,
            _pNext,
            _pExclusiveScissors,
        )
        vks = VkPipelineViewportExclusiveScissorStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pExclusiveScissors,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderImageFootprintFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceShaderImageFootprintFeaturesNV
    bag::BagPhysicalDeviceShaderImageFootprintFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderImageFootprintFeaturesNV(image_footprint; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderImageFootprintFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderImageFootprintFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            image_footprint,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceFragmentShaderBarycentricFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    bag::BagPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceFragmentShaderBarycentricFeaturesNV(
        fragment_shader_barycentric;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceFragmentShaderBarycentricFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fragment_shader_barycentric,
        )
        new(vks, bag)
    end
end

struct DrawMeshTasksIndirectCommandNV <: VulkanStruct
    vks::VkDrawMeshTasksIndirectCommandNV
    DrawMeshTasksIndirectCommandNV(vks::VkDrawMeshTasksIndirectCommandNV) = new(vks)
end

struct PhysicalDeviceMeshShaderPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    max_draw_mesh_tasks_count::UInt32
    max_task_work_group_invocations::UInt32
    max_task_work_group_size::NTuple{3,UInt32}
    max_task_total_memory_size::UInt32
    max_task_output_count::UInt32
    max_mesh_work_group_invocations::UInt32
    max_mesh_work_group_size::NTuple{3,UInt32}
    max_mesh_total_memory_size::UInt32
    max_mesh_output_vertices::UInt32
    max_mesh_output_primitives::UInt32
    max_mesh_multiview_view_count::UInt32
    mesh_output_per_vertex_granularity::UInt32
    mesh_output_per_primitive_granularity::UInt32
end

struct PhysicalDeviceMeshShaderFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceMeshShaderFeaturesNV
    bag::BagPhysicalDeviceMeshShaderFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceMeshShaderFeaturesNV(task_shader, mesh_shader; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceMeshShaderFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceMeshShaderFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            task_shader,
            mesh_shader,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceComputeShaderDerivativesFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    bag::BagPhysicalDeviceComputeShaderDerivativesFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceComputeShaderDerivativesFeaturesNV(
        compute_derivative_group_quads,
        compute_derivative_group_linear;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceComputeShaderDerivativesFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            compute_derivative_group_quads,
            compute_derivative_group_linear,
        )
        new(vks, bag)
    end
end

struct PipelineCreationFeedbackCreateInfoEXT <: VulkanStruct
    vks::VkPipelineCreationFeedbackCreateInfoEXT
    bag::BagPipelineCreationFeedbackCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineCreationFeedbackCreateInfoEXT(
        pipeline_creation_feedback,
        pipeline_stage_creation_feedbacks;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pPipelineCreationFeedback = if pipeline_creation_feedback == C_NULL
            pipeline_creation_feedback
        else
            Ref(pipeline_creation_feedback.vks)
        end
        _pPipelineStageCreationFeedbacks = if pipeline_stage_creation_feedbacks == C_NULL
            pipeline_stage_creation_feedbacks
        else
            getproperty.(pipeline_stage_creation_feedbacks, :vks)
        end
        bag = BagPipelineCreationFeedbackCreateInfoEXT(
            bag_next,
            _pNext,
            _pPipelineCreationFeedback,
            _pPipelineStageCreationFeedbacks,
        )
        vks = VkPipelineCreationFeedbackCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pPipelineCreationFeedback,
            _pPipelineStageCreationFeedbacks,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceVertexAttributeDivisorFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    bag::BagPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceVertexAttributeDivisorFeaturesEXT(
        vertex_attribute_instance_rate_divisor,
        vertex_attribute_instance_rate_zero_divisor;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceVertexAttributeDivisorFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            vertex_attribute_instance_rate_divisor,
            vertex_attribute_instance_rate_zero_divisor,
        )
        new(vks, bag)
    end
end

struct PipelineVertexInputDivisorStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineVertexInputDivisorStateCreateInfoEXT
    bag::BagPipelineVertexInputDivisorStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineVertexInputDivisorStateCreateInfoEXT(
        vertex_binding_divisors;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pVertexBindingDivisors = if vertex_binding_divisors == C_NULL
            vertex_binding_divisors
        else
            getproperty.(vertex_binding_divisors, :vks)
        end
        bag = BagPipelineVertexInputDivisorStateCreateInfoEXT(
            bag_next,
            _pNext,
            _pVertexBindingDivisors,
        )
        vks = VkPipelineVertexInputDivisorStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pVertexBindingDivisors,
        )
        new(vks, bag)
    end
end

struct VertexInputBindingDivisorDescriptionEXT <: VulkanStruct
    vks::VkVertexInputBindingDivisorDescriptionEXT
    VertexInputBindingDivisorDescriptionEXT(
        vks::VkVertexInputBindingDivisorDescriptionEXT,
    ) = new(vks)
end

struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_vertex_attrib_divisor::UInt32
end

struct DeviceMemoryOverallocationCreateInfoAMD <: VulkanStruct
    vks::VkDeviceMemoryOverallocationCreateInfoAMD
    bag::BagDeviceMemoryOverallocationCreateInfoAMD
    """
    Generic constructor.
    """
    function DeviceMemoryOverallocationCreateInfoAMD(overallocation_behavior; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceMemoryOverallocationCreateInfoAMD(bag_next, _pNext)
        vks = VkDeviceMemoryOverallocationCreateInfoAMD(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            overallocation_behavior,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderCorePropertiesAMD <: ReturnedOnly
    next::Ptr{Cvoid}
    shader_engine_count::UInt32
    shader_arrays_per_engine_count::UInt32
    compute_units_per_shader_array::UInt32
    simd_per_compute_unit::UInt32
    wavefronts_per_simd::UInt32
    wavefront_size::UInt32
    sgprs_per_simd::UInt32
    min_sgpr_allocation::UInt32
    max_sgpr_allocation::UInt32
    sgpr_allocation_granularity::UInt32
    vgprs_per_simd::UInt32
    min_vgpr_allocation::UInt32
    max_vgpr_allocation::UInt32
    vgpr_allocation_granularity::UInt32
end

struct CalibratedTimestampInfoEXT <: VulkanStruct
    vks::VkCalibratedTimestampInfoEXT
    bag::BagCalibratedTimestampInfoEXT
    """
    Generic constructor.
    """
    function CalibratedTimestampInfoEXT(time_domain; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCalibratedTimestampInfoEXT(bag_next, _pNext)
        vks = VkCalibratedTimestampInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, time_domain)
        new(vks, bag)
    end
end

struct PipelineCompilerControlCreateInfoAMD <: VulkanStruct
    vks::VkPipelineCompilerControlCreateInfoAMD
    bag::BagPipelineCompilerControlCreateInfoAMD
    """
    Generic constructor.
    """
    function PipelineCompilerControlCreateInfoAMD(;
        next = C_NULL,
        compiler_control_flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineCompilerControlCreateInfoAMD(bag_next, _pNext)
        vks = VkPipelineCompilerControlCreateInfoAMD(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if compiler_control_flags == 0
                0
            else
                compiler_control_flags
            end,
        )
        new(vks, bag)
    end
end

struct MemoryHostPointerPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct ImportMemoryHostPointerInfoEXT <: VulkanStruct
    vks::VkImportMemoryHostPointerInfoEXT
    bag::BagImportMemoryHostPointerInfoEXT
    """
    Generic constructor.
    """
    function ImportMemoryHostPointerInfoEXT(handle_type, host_pointer; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pHostPointer = if host_pointer == C_NULL
            host_pointer
        else
            Ref(host_pointer)
        end
        bag = BagImportMemoryHostPointerInfoEXT(bag_next, _pNext, _pHostPointer)
        vks = VkImportMemoryHostPointerInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            handle_type,
            _pHostPointer,
        )
        new(vks, bag)
    end
end

struct DeviceQueueGlobalPriorityCreateInfoEXT <: VulkanStruct
    vks::VkDeviceQueueGlobalPriorityCreateInfoEXT
    bag::BagDeviceQueueGlobalPriorityCreateInfoEXT
    """
    Generic constructor.
    """
    function DeviceQueueGlobalPriorityCreateInfoEXT(global_priority; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceQueueGlobalPriorityCreateInfoEXT(bag_next, _pNext)
        vks = VkDeviceQueueGlobalPriorityCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, global_priority)
        new(vks, bag)
    end
end

struct FilterCubicImageViewImageFormatPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    filter_cubic::Bool
    filter_cubic_minmax::Bool
end

struct PhysicalDeviceImageViewImageFormatInfoEXT <: VulkanStruct
    vks::VkPhysicalDeviceImageViewImageFormatInfoEXT
    bag::BagPhysicalDeviceImageViewImageFormatInfoEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceImageViewImageFormatInfoEXT(image_view_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceImageViewImageFormatInfoEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceImageViewImageFormatInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            image_view_type,
        )
        new(vks, bag)
    end
end

struct PipelineRepresentativeFragmentTestStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    bag::BagPipelineRepresentativeFragmentTestStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineRepresentativeFragmentTestStateCreateInfoNV(
        representative_fragment_test_enable;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRepresentativeFragmentTestStateCreateInfoNV(bag_next, _pNext)
        vks = VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            representative_fragment_test_enable,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    bag::BagPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceRepresentativeFragmentTestFeaturesNV(
        representative_fragment_test;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceRepresentativeFragmentTestFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            representative_fragment_test,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureInstanceKHR <: VulkanStruct
    vks::VkAccelerationStructureInstanceKHR
    AccelerationStructureInstanceKHR(vks::VkAccelerationStructureInstanceKHR) = new(vks)
end

struct AabbPositionsKHR <: VulkanStruct
    vks::VkAabbPositionsKHR
    AabbPositionsKHR(vks::VkAabbPositionsKHR) = new(vks)
end

struct TransformMatrixKHR <: VulkanStruct
    vks::VkTransformMatrixKHR
    TransformMatrixKHR(vks::VkTransformMatrixKHR) = new(vks)
end

struct PhysicalDeviceRayTracingPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_triangle_count::UInt64
    max_descriptor_set_acceleration_structures::UInt32
end

struct AccelerationStructureMemoryRequirementsInfoNV <: VulkanStruct
    vks::VkAccelerationStructureMemoryRequirementsInfoNV
    bag::BagAccelerationStructureMemoryRequirementsInfoNV
    """
    Generic constructor.
    """
    function AccelerationStructureMemoryRequirementsInfoNV(
        type,
        acceleration_structure;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureMemoryRequirementsInfoNV(bag_next, _pNext)
        vks = VkAccelerationStructureMemoryRequirementsInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            acceleration_structure.handle,
        )
        new(vks, bag)
    end
end

struct WriteDescriptorSetAccelerationStructureKHR <: VulkanStruct
    vks::VkWriteDescriptorSetAccelerationStructureKHR
    bag::BagWriteDescriptorSetAccelerationStructureKHR
    """
    Generic constructor.
    """
    function WriteDescriptorSetAccelerationStructureKHR(
        acceleration_structures;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAccelerationStructures = if acceleration_structures == C_NULL
            acceleration_structures
        else
            getproperty.(acceleration_structures, :handle)
        end
        bag = BagWriteDescriptorSetAccelerationStructureKHR(
            bag_next,
            _pNext,
            _pAccelerationStructures,
        )
        vks = VkWriteDescriptorSetAccelerationStructureKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pAccelerationStructures,
        )
        new(vks, bag)
    end
end

struct BindAccelerationStructureMemoryInfoKHR <: VulkanStruct
    vks::VkBindAccelerationStructureMemoryInfoKHR
    bag::BagBindAccelerationStructureMemoryInfoKHR
    """
    Generic constructor.
    """
    function BindAccelerationStructureMemoryInfoKHR(
        acceleration_structure,
        memory,
        memory_offset,
        device_indices;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        device_indices = convert(Array{UInt32}, device_indices)
        bag = BagBindAccelerationStructureMemoryInfoKHR(bag_next, _pNext, device_indices)
        vks = VkBindAccelerationStructureMemoryInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            acceleration_structure.handle,
            memory.handle,
            memory_offset,
            device_indices,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureCreateInfoNV <: VulkanStruct
    vks::VkAccelerationStructureCreateInfoNV
    bag::BagAccelerationStructureCreateInfoNV
    """
    Generic constructor.
    """
    function AccelerationStructureCreateInfoNV(compacted_size, info; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAccelerationStructureCreateInfoNV(bag_next, _pNext, info.bag)
        vks = VkAccelerationStructureCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            compacted_size,
            info.vks,
        )
        new(vks, bag)
    end
end

struct AccelerationStructureInfoNV <: VulkanStruct
    vks::VkAccelerationStructureInfoNV
    bag::BagAccelerationStructureInfoNV
    """
    Generic constructor.
    """
    function AccelerationStructureInfoNV(
        type,
        geometries;
        next = C_NULL,
        flags = 0,
        instance_count = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pGeometries = if geometries == C_NULL
            geometries
        else
            getproperty.(geometries, :vks)
        end
        bag = BagAccelerationStructureInfoNV(
            bag_next,
            _pNext,
            getproperty.(geometries, :bag),
            _pGeometries,
        )
        vks = VkAccelerationStructureInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            if flags == 0
                0
            else
                flags
            end,
            if instance_count == 0
                0
            else
                instance_count
            end,
            _pGeometries,
        )
        new(vks, bag)
    end
end

struct GeometryNV <: VulkanStruct
    vks::VkGeometryNV
    bag::BagGeometryNV
    """
    Generic constructor.
    """
    function GeometryNV(geometry_type, geometry; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagGeometryNV(bag_next, _pNext)
        vks = VkGeometryNV(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, geometry_type, geometry.vks, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct GeometryDataNV <: VulkanStruct
    vks::VkGeometryDataNV
    GeometryDataNV(vks::VkGeometryDataNV) = new(vks)
end

struct GeometryAABBNV <: VulkanStruct
    vks::VkGeometryAABBNV
    bag::BagGeometryAABBNV
    """
    Generic constructor.
    """
    function GeometryAABBNV(num_aab_bs, stride, offset; next = C_NULL, aabb_data = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagGeometryAABBNV(bag_next, _pNext)
        vks = VkGeometryAABBNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if aabb_data == C_NULL
                C_NULL
            else
                aabb_data.handle
            end,
            num_aab_bs,
            stride,
            offset,
        )
        new(vks, bag)
    end
end

struct GeometryTrianglesNV <: VulkanStruct
    vks::VkGeometryTrianglesNV
    bag::BagGeometryTrianglesNV
    """
    Generic constructor.
    """
    function GeometryTrianglesNV(
        vertex_offset,
        vertex_count,
        vertex_stride,
        vertex_format,
        index_offset,
        index_count,
        index_type,
        transform_offset;
        next = C_NULL,
        vertex_data = C_NULL,
        index_data = C_NULL,
        transform_data = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagGeometryTrianglesNV(bag_next, _pNext)
        vks = VkGeometryTrianglesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if vertex_data == C_NULL
                C_NULL
            else
                vertex_data.handle
            end,
            vertex_offset,
            vertex_count,
            vertex_stride,
            vertex_format,
            if index_data == C_NULL
                C_NULL
            else
                index_data.handle
            end,
            index_offset,
            index_count,
            index_type,
            if transform_data == C_NULL
                C_NULL
            else
                transform_data.handle
            end,
            transform_offset,
        )
        new(vks, bag)
    end
end

struct RayTracingPipelineCreateInfoNV <: VulkanStruct
    vks::VkRayTracingPipelineCreateInfoNV
    bag::BagRayTracingPipelineCreateInfoNV
    """
    Generic constructor.
    """
    function RayTracingPipelineCreateInfoNV(
        stages,
        groups,
        max_recursion_depth,
        layout,
        base_pipeline_index;
        next = C_NULL,
        flags = 0,
        base_pipeline_handle = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pStages = if stages == C_NULL
            stages
        else
            getproperty.(stages, :vks)
        end
        _pGroups = if groups == C_NULL
            groups
        else
            getproperty.(groups, :vks)
        end
        bag = BagRayTracingPipelineCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(stages, :bag),
            _pStages,
            getproperty.(groups, :bag),
            _pGroups,
        )
        vks = VkRayTracingPipelineCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pStages,
            _pGroups,
            max_recursion_depth,
            layout.handle,
            if base_pipeline_handle == C_NULL
                C_NULL
            else
                base_pipeline_handle.handle
            end,
            base_pipeline_index,
        )
        new(vks, bag)
    end
end

struct RayTracingShaderGroupCreateInfoNV <: VulkanStruct
    vks::VkRayTracingShaderGroupCreateInfoNV
    bag::BagRayTracingShaderGroupCreateInfoNV
    """
    Generic constructor.
    """
    function RayTracingShaderGroupCreateInfoNV(
        type,
        general_shader,
        closest_hit_shader,
        any_hit_shader,
        intersection_shader;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagRayTracingShaderGroupCreateInfoNV(bag_next, _pNext)
        vks = VkRayTracingShaderGroupCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            type,
            general_shader,
            closest_hit_shader,
            any_hit_shader,
            intersection_shader,
        )
        new(vks, bag)
    end
end

struct PipelineViewportCoarseSampleOrderStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    bag::BagPipelineViewportCoarseSampleOrderStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineViewportCoarseSampleOrderStateCreateInfoNV(
        sample_order_type,
        custom_sample_orders;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pCustomSampleOrders = if custom_sample_orders == C_NULL
            custom_sample_orders
        else
            getproperty.(custom_sample_orders, :vks)
        end
        bag = BagPipelineViewportCoarseSampleOrderStateCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(custom_sample_orders, :bag),
            _pCustomSampleOrders,
        )
        vks = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            sample_order_type,
            _pCustomSampleOrders,
        )
        new(vks, bag)
    end
end

struct CoarseSampleOrderCustomNV <: VulkanStruct
    vks::VkCoarseSampleOrderCustomNV
    bag::BagCoarseSampleOrderCustomNV
    """
    Generic constructor.
    """
    function CoarseSampleOrderCustomNV(shading_rate, sample_count, sample_locations)
        _pSampleLocations = if sample_locations == C_NULL
            sample_locations
        else
            getproperty.(sample_locations, :vks)
        end
        bag = BagCoarseSampleOrderCustomNV(_pSampleLocations)
        vks = VkCoarseSampleOrderCustomNV(shading_rate, sample_count, _pSampleLocations)
        new(vks, bag)
    end
end

struct CoarseSampleLocationNV <: VulkanStruct
    vks::VkCoarseSampleLocationNV
    CoarseSampleLocationNV(vks::VkCoarseSampleLocationNV) = new(vks)
end

struct PhysicalDeviceShadingRateImageFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceShadingRateImageFeaturesNV
    bag::BagPhysicalDeviceShadingRateImageFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceShadingRateImageFeaturesNV(
        shading_rate_image,
        shading_rate_coarse_sample_order;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShadingRateImageFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceShadingRateImageFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shading_rate_image,
            shading_rate_coarse_sample_order,
        )
        new(vks, bag)
    end
end

struct PipelineViewportShadingRateImageStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineViewportShadingRateImageStateCreateInfoNV
    bag::BagPipelineViewportShadingRateImageStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineViewportShadingRateImageStateCreateInfoNV(
        shading_rate_image_enable,
        shading_rate_palettes;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pShadingRatePalettes = if shading_rate_palettes == C_NULL
            shading_rate_palettes
        else
            getproperty.(shading_rate_palettes, :vks)
        end
        bag = BagPipelineViewportShadingRateImageStateCreateInfoNV(
            bag_next,
            _pNext,
            getproperty.(shading_rate_palettes, :bag),
            _pShadingRatePalettes,
        )
        vks = VkPipelineViewportShadingRateImageStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shading_rate_image_enable,
            _pShadingRatePalettes,
        )
        new(vks, bag)
    end
end

struct ShadingRatePaletteNV <: VulkanStruct
    vks::VkShadingRatePaletteNV
    bag::BagShadingRatePaletteNV
    """
    Generic constructor.
    """
    function ShadingRatePaletteNV(shading_rate_palette_entries)
        bag = BagShadingRatePaletteNV(shading_rate_palette_entries)
        vks = VkShadingRatePaletteNV(shading_rate_palette_entries)
        new(vks, bag)
    end
end

struct ShaderModuleValidationCacheCreateInfoEXT <: VulkanStruct
    vks::VkShaderModuleValidationCacheCreateInfoEXT
    bag::BagShaderModuleValidationCacheCreateInfoEXT
    """
    Generic constructor.
    """
    function ShaderModuleValidationCacheCreateInfoEXT(validation_cache; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagShaderModuleValidationCacheCreateInfoEXT(bag_next, _pNext)
        vks = VkShaderModuleValidationCacheCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            validation_cache.handle,
        )
        new(vks, bag)
    end
end

struct ValidationCacheCreateInfoEXT <: VulkanStruct
    vks::VkValidationCacheCreateInfoEXT
    bag::BagValidationCacheCreateInfoEXT
    """
    Generic constructor.
    """
    function ValidationCacheCreateInfoEXT(initial_data; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pInitialData = if initial_data == C_NULL
            initial_data
        else
            Ref(initial_data)
        end
        bag = BagValidationCacheCreateInfoEXT(bag_next, _pNext, _pInitialData)
        vks = VkValidationCacheCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pInitialData,
        )
        new(vks, bag)
    end
end

struct ImageDrmFormatModifierPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    drm_format_modifier::UInt64
end

struct ImageDrmFormatModifierExplicitCreateInfoEXT <: VulkanStruct
    vks::VkImageDrmFormatModifierExplicitCreateInfoEXT
    bag::BagImageDrmFormatModifierExplicitCreateInfoEXT
    """
    Generic constructor.
    """
    function ImageDrmFormatModifierExplicitCreateInfoEXT(
        drm_format_modifier,
        plane_layouts;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pPlaneLayouts = if plane_layouts == C_NULL
            plane_layouts
        else
            getproperty.(plane_layouts, :vks)
        end
        bag =
            BagImageDrmFormatModifierExplicitCreateInfoEXT(bag_next, _pNext, _pPlaneLayouts)
        vks = VkImageDrmFormatModifierExplicitCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            drm_format_modifier,
            _pPlaneLayouts,
        )
        new(vks, bag)
    end
end

struct ImageDrmFormatModifierListCreateInfoEXT <: VulkanStruct
    vks::VkImageDrmFormatModifierListCreateInfoEXT
    bag::BagImageDrmFormatModifierListCreateInfoEXT
    """
    Generic constructor.
    """
    function ImageDrmFormatModifierListCreateInfoEXT(drm_format_modifiers; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        drm_format_modifiers = convert(Array{UInt64}, drm_format_modifiers)
        bag = BagImageDrmFormatModifierListCreateInfoEXT(
            bag_next,
            _pNext,
            drm_format_modifiers,
        )
        vks = VkImageDrmFormatModifierListCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            drm_format_modifiers,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceImageDrmFormatModifierInfoEXT <: VulkanStruct
    vks::VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    bag::BagPhysicalDeviceImageDrmFormatModifierInfoEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceImageDrmFormatModifierInfoEXT(
        drm_format_modifier,
        sharing_mode,
        queue_family_indices;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        queue_family_indices = convert(Array{UInt32}, queue_family_indices)
        bag = BagPhysicalDeviceImageDrmFormatModifierInfoEXT(
            bag_next,
            _pNext,
            queue_family_indices,
        )
        vks = VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            drm_format_modifier,
            sharing_mode,
            queue_family_indices,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderSMBuiltinsFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    bag::BagPhysicalDeviceShaderSMBuiltinsFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderSMBuiltinsFeaturesNV(shader_sm_builtins; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderSMBuiltinsFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_sm_builtins,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderSMBuiltinsPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    shader_sm_count::UInt32
    shader_warps_per_sm::UInt32
end

struct PipelineCoverageModulationStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineCoverageModulationStateCreateInfoNV
    bag::BagPipelineCoverageModulationStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineCoverageModulationStateCreateInfoNV(
        coverage_modulation_mode,
        coverage_modulation_table_enable;
        next = C_NULL,
        flags = 0,
        coverage_modulation_table = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        coverage_modulation_table = convert(Array{Float32}, coverage_modulation_table)
        bag = BagPipelineCoverageModulationStateCreateInfoNV(
            bag_next,
            _pNext,
            coverage_modulation_table,
        )
        vks = VkPipelineCoverageModulationStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            coverage_modulation_mode,
            coverage_modulation_table_enable,
            if coverage_modulation_table == C_NULL
                C_NULL
            else
                coverage_modulation_table
            end,
        )
        new(vks, bag)
    end
end

struct PipelineCoverageToColorStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineCoverageToColorStateCreateInfoNV
    bag::BagPipelineCoverageToColorStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineCoverageToColorStateCreateInfoNV(
        coverage_to_color_enable;
        next = C_NULL,
        flags = 0,
        coverage_to_color_location = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineCoverageToColorStateCreateInfoNV(bag_next, _pNext)
        vks = VkPipelineCoverageToColorStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            coverage_to_color_enable,
            if coverage_to_color_location == 0
                0
            else
                coverage_to_color_location
            end,
        )
        new(vks, bag)
    end
end

struct PipelineColorBlendAdvancedStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineColorBlendAdvancedStateCreateInfoEXT
    bag::BagPipelineColorBlendAdvancedStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineColorBlendAdvancedStateCreateInfoEXT(
        src_premultiplied,
        dst_premultiplied,
        blend_overlap;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineColorBlendAdvancedStateCreateInfoEXT(bag_next, _pNext)
        vks = VkPipelineColorBlendAdvancedStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_premultiplied,
            dst_premultiplied,
            blend_overlap,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    advanced_blend_max_color_attachments::UInt32
    advanced_blend_independent_blend::Bool
    advanced_blend_non_premultiplied_src_color::Bool
    advanced_blend_non_premultiplied_dst_color::Bool
    advanced_blend_correlated_overlap::Bool
    advanced_blend_all_operations::Bool
end

struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    bag::BagPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceBlendOperationAdvancedFeaturesEXT(
        advanced_blend_coherent_operations;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceBlendOperationAdvancedFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            advanced_blend_coherent_operations,
        )
        new(vks, bag)
    end
end

struct PipelineSampleLocationsStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineSampleLocationsStateCreateInfoEXT
    bag::BagPipelineSampleLocationsStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineSampleLocationsStateCreateInfoEXT(
        sample_locations_enable,
        sample_locations_info;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineSampleLocationsStateCreateInfoEXT(
            bag_next,
            _pNext,
            sample_locations_info.bag,
        )
        vks = VkPipelineSampleLocationsStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            sample_locations_enable,
            sample_locations_info.vks,
        )
        new(vks, bag)
    end
end

struct RenderPassSampleLocationsBeginInfoEXT <: VulkanStruct
    vks::VkRenderPassSampleLocationsBeginInfoEXT
    bag::BagRenderPassSampleLocationsBeginInfoEXT
    """
    Generic constructor.
    """
    function RenderPassSampleLocationsBeginInfoEXT(
        attachment_initial_sample_locations,
        post_subpass_sample_locations;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachmentInitialSampleLocations =
            if attachment_initial_sample_locations == C_NULL
                attachment_initial_sample_locations
            else
                getproperty.(attachment_initial_sample_locations, :vks)
            end
        _pPostSubpassSampleLocations = if post_subpass_sample_locations == C_NULL
            post_subpass_sample_locations
        else
            getproperty.(post_subpass_sample_locations, :vks)
        end
        bag = BagRenderPassSampleLocationsBeginInfoEXT(
            bag_next,
            _pNext,
            _pAttachmentInitialSampleLocations,
            _pPostSubpassSampleLocations,
        )
        vks = VkRenderPassSampleLocationsBeginInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pAttachmentInitialSampleLocations,
            _pPostSubpassSampleLocations,
        )
        new(vks, bag)
    end
end

struct SubpassSampleLocationsEXT <: VulkanStruct
    vks::VkSubpassSampleLocationsEXT
    SubpassSampleLocationsEXT(vks::VkSubpassSampleLocationsEXT) = new(vks)
end

struct AttachmentSampleLocationsEXT <: VulkanStruct
    vks::VkAttachmentSampleLocationsEXT
    AttachmentSampleLocationsEXT(vks::VkAttachmentSampleLocationsEXT) = new(vks)
end

struct SampleLocationsInfoEXT <: VulkanStruct
    vks::VkSampleLocationsInfoEXT
    bag::BagSampleLocationsInfoEXT
    """
    Generic constructor.
    """
    function SampleLocationsInfoEXT(
        sample_location_grid_size,
        sample_locations;
        next = C_NULL,
        sample_locations_per_pixel = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pSampleLocations = if sample_locations == C_NULL
            sample_locations
        else
            getproperty.(sample_locations, :vks)
        end
        bag = BagSampleLocationsInfoEXT(bag_next, _pNext, _pSampleLocations)
        vks = VkSampleLocationsInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if sample_locations_per_pixel == 0
                0
            else
                sample_locations_per_pixel
            end,
            sample_location_grid_size.vks,
            _pSampleLocations,
        )
        new(vks, bag)
    end
end

struct SampleLocationEXT <: VulkanStruct
    vks::VkSampleLocationEXT
    SampleLocationEXT(vks::VkSampleLocationEXT) = new(vks)
end

struct DescriptorPoolInlineUniformBlockCreateInfoEXT <: VulkanStruct
    vks::VkDescriptorPoolInlineUniformBlockCreateInfoEXT
    bag::BagDescriptorPoolInlineUniformBlockCreateInfoEXT
    """
    Generic constructor.
    """
    function DescriptorPoolInlineUniformBlockCreateInfoEXT(
        max_inline_uniform_block_bindings;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDescriptorPoolInlineUniformBlockCreateInfoEXT(bag_next, _pNext)
        vks = VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            max_inline_uniform_block_bindings,
        )
        new(vks, bag)
    end
end

struct WriteDescriptorSetInlineUniformBlockEXT <: VulkanStruct
    vks::VkWriteDescriptorSetInlineUniformBlockEXT
    bag::BagWriteDescriptorSetInlineUniformBlockEXT
    """
    Generic constructor.
    """
    function WriteDescriptorSetInlineUniformBlockEXT(data; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pData = if data == C_NULL
            data
        else
            Ref(data)
        end
        bag = BagWriteDescriptorSetInlineUniformBlockEXT(bag_next, _pNext, _pData)
        vks = VkWriteDescriptorSetInlineUniformBlockEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pData)
        new(vks, bag)
    end
end

struct PhysicalDeviceInlineUniformBlockPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_inline_uniform_block_size::UInt32
    max_per_stage_descriptor_inline_uniform_blocks::UInt32
    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks::UInt32
    max_descriptor_set_inline_uniform_blocks::UInt32
    max_descriptor_set_update_after_bind_inline_uniform_blocks::UInt32
end

struct PhysicalDeviceInlineUniformBlockFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceInlineUniformBlockFeaturesEXT
    bag::BagPhysicalDeviceInlineUniformBlockFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceInlineUniformBlockFeaturesEXT(
        inline_uniform_block,
        descriptor_binding_inline_uniform_block_update_after_bind;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceInlineUniformBlockFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            inline_uniform_block,
            descriptor_binding_inline_uniform_block_update_after_bind,
        )
        new(vks, bag)
    end
end

struct DebugUtilsObjectTagInfoEXT <: VulkanStruct
    vks::VkDebugUtilsObjectTagInfoEXT
    bag::BagDebugUtilsObjectTagInfoEXT
    """
    Generic constructor.
    """
    function DebugUtilsObjectTagInfoEXT(
        object_type,
        object_handle,
        tag_name,
        tag;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pTag = if tag == C_NULL
            tag
        else
            Ref(tag)
        end
        bag = BagDebugUtilsObjectTagInfoEXT(bag_next, _pNext, _pTag)
        vks = VkDebugUtilsObjectTagInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            object_type,
            object_handle,
            tag_name,
            _pTag,
        )
        new(vks, bag)
    end
end

struct DebugUtilsMessengerCreateInfoEXT <: VulkanStruct
    vks::VkDebugUtilsMessengerCreateInfoEXT
    bag::BagDebugUtilsMessengerCreateInfoEXT
    """
    Generic constructor.
    """
    function DebugUtilsMessengerCreateInfoEXT(
        message_severity,
        message_type,
        user_callback;
        next = C_NULL,
        flags = 0,
        user_data = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pUserData = if user_data == C_NULL
            user_data
        else
            Ref(user_data)
        end
        bag = BagDebugUtilsMessengerCreateInfoEXT(bag_next, _pNext, _pUserData)
        vks = VkDebugUtilsMessengerCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            message_severity,
            message_type,
            user_callback,
            if _pUserData == C_NULL
                C_NULL
            else
                _pUserData
            end,
        )
        new(vks, bag)
    end
end

struct DebugUtilsMessengerCallbackDataEXT <: VulkanStruct
    vks::VkDebugUtilsMessengerCallbackDataEXT
    bag::BagDebugUtilsMessengerCallbackDataEXT
    """
    Generic constructor.
    """
    function DebugUtilsMessengerCallbackDataEXT(
        message,
        queue_labels,
        cmd_buf_labels,
        objects;
        next = C_NULL,
        flags = 0,
        message_id_name = C_NULL,
        message_id_number = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pQueueLabels = if queue_labels == C_NULL
            queue_labels
        else
            getproperty.(queue_labels, :vks)
        end
        _pCmdBufLabels = if cmd_buf_labels == C_NULL
            cmd_buf_labels
        else
            getproperty.(cmd_buf_labels, :vks)
        end
        _pObjects = if objects == C_NULL
            objects
        else
            getproperty.(objects, :vks)
        end
        bag = BagDebugUtilsMessengerCallbackDataEXT(
            bag_next,
            _pNext,
            message_id_name,
            message,
            getproperty.(queue_labels, :bag),
            _pQueueLabels,
            getproperty.(cmd_buf_labels, :bag),
            _pCmdBufLabels,
            getproperty.(objects, :bag),
            _pObjects,
        )
        vks = VkDebugUtilsMessengerCallbackDataEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            if message_id_name == C_NULL
                C_NULL
            else
                message_id_name
            end,
            if message_id_number == 0
                0
            else
                message_id_number
            end,
            message,
            _pQueueLabels,
            _pCmdBufLabels,
            _pObjects,
        )
        new(vks, bag)
    end
end

struct DebugUtilsObjectNameInfoEXT <: VulkanStruct
    vks::VkDebugUtilsObjectNameInfoEXT
    bag::BagDebugUtilsObjectNameInfoEXT
    """
    Generic constructor.
    """
    function DebugUtilsObjectNameInfoEXT(
        object_type,
        object_handle;
        next = C_NULL,
        object_name = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDebugUtilsObjectNameInfoEXT(bag_next, _pNext, object_name)
        vks = VkDebugUtilsObjectNameInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            object_type,
            object_handle,
            if object_name == C_NULL
                C_NULL
            else
                object_name
            end,
        )
        new(vks, bag)
    end
end

struct DebugUtilsLabelEXT <: VulkanStruct
    vks::VkDebugUtilsLabelEXT
    bag::BagDebugUtilsLabelEXT
    """
    Generic constructor.
    """
    function DebugUtilsLabelEXT(label_name; next = C_NULL, color = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDebugUtilsLabelEXT(bag_next, _pNext, label_name)
        vks = VkDebugUtilsLabelEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, label_name, if color == 0
            0
        else
            color
        end)
        new(vks, bag)
    end
end

struct HdrMetadataEXT <: VulkanStruct
    vks::VkHdrMetadataEXT
    bag::BagHdrMetadataEXT
    """
    Generic constructor.
    """
    function HdrMetadataEXT(
        display_primary_red,
        display_primary_green,
        display_primary_blue,
        white_point,
        max_luminance,
        min_luminance,
        max_content_light_level,
        max_frame_average_light_level;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagHdrMetadataEXT(bag_next, _pNext)
        vks = VkHdrMetadataEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            display_primary_red.vks,
            display_primary_green.vks,
            display_primary_blue.vks,
            white_point.vks,
            max_luminance,
            min_luminance,
            max_content_light_level,
            max_frame_average_light_level,
        )
        new(vks, bag)
    end
end

struct XYColorEXT <: VulkanStruct
    vks::VkXYColorEXT
    XYColorEXT(vks::VkXYColorEXT) = new(vks)
end

struct PipelineRasterizationDepthClipStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineRasterizationDepthClipStateCreateInfoEXT
    bag::BagPipelineRasterizationDepthClipStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineRasterizationDepthClipStateCreateInfoEXT(
        depth_clip_enable;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationDepthClipStateCreateInfoEXT(bag_next, _pNext)
        vks = VkPipelineRasterizationDepthClipStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            depth_clip_enable,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDepthClipEnableFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceDepthClipEnableFeaturesEXT
    bag::BagPhysicalDeviceDepthClipEnableFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceDepthClipEnableFeaturesEXT(depth_clip_enable; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceDepthClipEnableFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceDepthClipEnableFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            depth_clip_enable,
        )
        new(vks, bag)
    end
end

struct PipelineRasterizationConservativeStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineRasterizationConservativeStateCreateInfoEXT
    bag::BagPipelineRasterizationConservativeStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineRasterizationConservativeStateCreateInfoEXT(
        conservative_rasterization_mode,
        extra_primitive_overestimation_size;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationConservativeStateCreateInfoEXT(bag_next, _pNext)
        vks = VkPipelineRasterizationConservativeStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            conservative_rasterization_mode,
            extra_primitive_overestimation_size,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceConservativeRasterizationPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    primitive_overestimation_size::Float32
    max_extra_primitive_overestimation_size::Float32
    extra_primitive_overestimation_size_granularity::Float32
    primitive_underestimation::Bool
    conservative_point_and_line_rasterization::Bool
    degenerate_triangles_rasterized::Bool
    degenerate_lines_rasterized::Bool
    fully_covered_fragment_shader_input_variable::Bool
    conservative_rasterization_post_depth_coverage::Bool
end

struct PipelineDiscardRectangleStateCreateInfoEXT <: VulkanStruct
    vks::VkPipelineDiscardRectangleStateCreateInfoEXT
    bag::BagPipelineDiscardRectangleStateCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineDiscardRectangleStateCreateInfoEXT(
        discard_rectangle_mode,
        discard_rectangles;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pDiscardRectangles = if discard_rectangles == C_NULL
            discard_rectangles
        else
            getproperty.(discard_rectangles, :vks)
        end
        bag = BagPipelineDiscardRectangleStateCreateInfoEXT(
            bag_next,
            _pNext,
            _pDiscardRectangles,
        )
        vks = VkPipelineDiscardRectangleStateCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            discard_rectangle_mode,
            _pDiscardRectangles,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDiscardRectanglePropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_discard_rectangles::UInt32
end

struct PipelineViewportSwizzleStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineViewportSwizzleStateCreateInfoNV
    bag::BagPipelineViewportSwizzleStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineViewportSwizzleStateCreateInfoNV(
        viewport_swizzles;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pViewportSwizzles = if viewport_swizzles == C_NULL
            viewport_swizzles
        else
            getproperty.(viewport_swizzles, :vks)
        end
        bag = BagPipelineViewportSwizzleStateCreateInfoNV(
            bag_next,
            _pNext,
            _pViewportSwizzles,
        )
        vks = VkPipelineViewportSwizzleStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pViewportSwizzles,
        )
        new(vks, bag)
    end
end

struct ViewportSwizzleNV <: VulkanStruct
    vks::VkViewportSwizzleNV
    ViewportSwizzleNV(vks::VkViewportSwizzleNV) = new(vks)
end

struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX <: ReturnedOnly
    next::Ptr{Cvoid}
    per_view_position_all_components::Bool
end

struct PresentTimesInfoGOOGLE <: VulkanStruct
    vks::VkPresentTimesInfoGOOGLE
    bag::BagPresentTimesInfoGOOGLE
    """
    Generic constructor.
    """
    function PresentTimesInfoGOOGLE(; next = C_NULL, times = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pTimes = if times == C_NULL
            times
        else
            getproperty.(times, :vks)
        end
        bag = BagPresentTimesInfoGOOGLE(bag_next, _pNext, _pTimes)
        vks = VkPresentTimesInfoGOOGLE(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if _pTimes == C_NULL
            C_NULL
        else
            _pTimes
        end)
        new(vks, bag)
    end
end

struct PresentTimeGOOGLE <: VulkanStruct
    vks::VkPresentTimeGOOGLE
    PresentTimeGOOGLE(vks::VkPresentTimeGOOGLE) = new(vks)
end

struct PastPresentationTimingGOOGLE <: ReturnedOnly
    present_id::UInt32
    desired_present_time::UInt64
    actual_present_time::UInt64
    earliest_present_time::UInt64
    present_margin::UInt64
end

struct RefreshCycleDurationGOOGLE <: ReturnedOnly
    refresh_duration::UInt64
end

struct SwapchainCounterCreateInfoEXT <: VulkanStruct
    vks::VkSwapchainCounterCreateInfoEXT
    bag::BagSwapchainCounterCreateInfoEXT
    """
    Generic constructor.
    """
    function SwapchainCounterCreateInfoEXT(; next = C_NULL, surface_counters = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSwapchainCounterCreateInfoEXT(bag_next, _pNext)
        vks = VkSwapchainCounterCreateInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if surface_counters == 0
            0
        else
            surface_counters
        end)
        new(vks, bag)
    end
end

struct DisplayEventInfoEXT <: VulkanStruct
    vks::VkDisplayEventInfoEXT
    bag::BagDisplayEventInfoEXT
    """
    Generic constructor.
    """
    function DisplayEventInfoEXT(display_event; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplayEventInfoEXT(bag_next, _pNext)
        vks = VkDisplayEventInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, display_event)
        new(vks, bag)
    end
end

struct DeviceEventInfoEXT <: VulkanStruct
    vks::VkDeviceEventInfoEXT
    bag::BagDeviceEventInfoEXT
    """
    Generic constructor.
    """
    function DeviceEventInfoEXT(device_event; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceEventInfoEXT(bag_next, _pNext)
        vks = VkDeviceEventInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, device_event)
        new(vks, bag)
    end
end

struct DisplayPowerInfoEXT <: VulkanStruct
    vks::VkDisplayPowerInfoEXT
    bag::BagDisplayPowerInfoEXT
    """
    Generic constructor.
    """
    function DisplayPowerInfoEXT(power_state; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplayPowerInfoEXT(bag_next, _pNext)
        vks = VkDisplayPowerInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, power_state)
        new(vks, bag)
    end
end

struct PipelineViewportWScalingStateCreateInfoNV <: VulkanStruct
    vks::VkPipelineViewportWScalingStateCreateInfoNV
    bag::BagPipelineViewportWScalingStateCreateInfoNV
    """
    Generic constructor.
    """
    function PipelineViewportWScalingStateCreateInfoNV(
        viewport_w_scaling_enable;
        next = C_NULL,
        viewport_w_scalings = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pViewportWScalings = if viewport_w_scalings == C_NULL
            viewport_w_scalings
        else
            getproperty.(viewport_w_scalings, :vks)
        end
        bag = BagPipelineViewportWScalingStateCreateInfoNV(
            bag_next,
            _pNext,
            _pViewportWScalings,
        )
        vks = VkPipelineViewportWScalingStateCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            viewport_w_scaling_enable,
            if _pViewportWScalings == C_NULL
                C_NULL
            else
                _pViewportWScalings
            end,
        )
        new(vks, bag)
    end
end

struct ViewportWScalingNV <: VulkanStruct
    vks::VkViewportWScalingNV
    ViewportWScalingNV(vks::VkViewportWScalingNV) = new(vks)
end

struct CommandBufferInheritanceConditionalRenderingInfoEXT <: VulkanStruct
    vks::VkCommandBufferInheritanceConditionalRenderingInfoEXT
    bag::BagCommandBufferInheritanceConditionalRenderingInfoEXT
    """
    Generic constructor.
    """
    function CommandBufferInheritanceConditionalRenderingInfoEXT(
        conditional_rendering_enable;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCommandBufferInheritanceConditionalRenderingInfoEXT(bag_next, _pNext)
        vks = VkCommandBufferInheritanceConditionalRenderingInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            conditional_rendering_enable,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceConditionalRenderingFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceConditionalRenderingFeaturesEXT
    bag::BagPhysicalDeviceConditionalRenderingFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceConditionalRenderingFeaturesEXT(
        conditional_rendering,
        inherited_conditional_rendering;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceConditionalRenderingFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceConditionalRenderingFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            conditional_rendering,
            inherited_conditional_rendering,
        )
        new(vks, bag)
    end
end

struct ConditionalRenderingBeginInfoEXT <: VulkanStruct
    vks::VkConditionalRenderingBeginInfoEXT
    bag::BagConditionalRenderingBeginInfoEXT
    """
    Generic constructor.
    """
    function ConditionalRenderingBeginInfoEXT(buffer, offset; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagConditionalRenderingBeginInfoEXT(bag_next, _pNext)
        vks = VkConditionalRenderingBeginInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            buffer.handle,
            offset,
            if flags == 0
                0
            else
                flags
            end,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceASTCDecodeFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceASTCDecodeFeaturesEXT
    bag::BagPhysicalDeviceASTCDecodeFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceASTCDecodeFeaturesEXT(decode_mode_shared_exponent; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceASTCDecodeFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceASTCDecodeFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            decode_mode_shared_exponent,
        )
        new(vks, bag)
    end
end

struct ImageViewASTCDecodeModeEXT <: VulkanStruct
    vks::VkImageViewASTCDecodeModeEXT
    bag::BagImageViewASTCDecodeModeEXT
    """
    Generic constructor.
    """
    function ImageViewASTCDecodeModeEXT(decode_mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageViewASTCDecodeModeEXT(bag_next, _pNext)
        vks = VkImageViewASTCDecodeModeEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, decode_mode)
        new(vks, bag)
    end
end

struct PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    bag::BagPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
        texture_compression_astc_hdr;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            texture_compression_astc_hdr,
        )
        new(vks, bag)
    end
end

struct ValidationFlagsEXT <: VulkanStruct
    vks::VkValidationFlagsEXT
    bag::BagValidationFlagsEXT
    """
    Generic constructor.
    """
    function ValidationFlagsEXT(disabled_validation_checks; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagValidationFlagsEXT(bag_next, _pNext, disabled_validation_checks)
        vks = VkValidationFlagsEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, disabled_validation_checks)
        new(vks, bag)
    end
end

struct ExportMemoryAllocateInfoNV <: VulkanStruct
    vks::VkExportMemoryAllocateInfoNV
    bag::BagExportMemoryAllocateInfoNV
    """
    Generic constructor.
    """
    function ExportMemoryAllocateInfoNV(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExportMemoryAllocateInfoNV(bag_next, _pNext)
        vks = VkExportMemoryAllocateInfoNV(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct ExternalMemoryImageCreateInfoNV <: VulkanStruct
    vks::VkExternalMemoryImageCreateInfoNV
    bag::BagExternalMemoryImageCreateInfoNV
    """
    Generic constructor.
    """
    function ExternalMemoryImageCreateInfoNV(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExternalMemoryImageCreateInfoNV(bag_next, _pNext)
        vks = VkExternalMemoryImageCreateInfoNV(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct PhysicalDeviceCornerSampledImageFeaturesNV <: VulkanStruct
    vks::VkPhysicalDeviceCornerSampledImageFeaturesNV
    bag::BagPhysicalDeviceCornerSampledImageFeaturesNV
    """
    Generic constructor.
    """
    function PhysicalDeviceCornerSampledImageFeaturesNV(corner_sampled_image; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceCornerSampledImageFeaturesNV(bag_next, _pNext)
        vks = VkPhysicalDeviceCornerSampledImageFeaturesNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            corner_sampled_image,
        )
        new(vks, bag)
    end
end

struct ShaderResourceUsageAMD <: ReturnedOnly
    num_used_vgprs::UInt32
    num_used_sgprs::UInt32
    lds_size_per_local_work_group::UInt32
    lds_usage_size_in_bytes::UInt
    scratch_mem_usage_in_bytes::UInt
end

struct TextureLODGatherFormatPropertiesAMD <: ReturnedOnly
    next::Ptr{Cvoid}
    supports_texture_gather_lod_bias_amd::Bool
end

struct ImageViewHandleInfoNVX <: VulkanStruct
    vks::VkImageViewHandleInfoNVX
    bag::BagImageViewHandleInfoNVX
    """
    Generic constructor.
    """
    function ImageViewHandleInfoNVX(
        image_view,
        descriptor_type;
        next = C_NULL,
        sampler = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageViewHandleInfoNVX(bag_next, _pNext)
        vks = VkImageViewHandleInfoNVX(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            image_view.handle,
            descriptor_type,
            if sampler == C_NULL
                C_NULL
            else
                sampler.handle
            end,
        )
        new(vks, bag)
    end
end

struct PipelineRasterizationStateStreamCreateInfoEXT <: VulkanStruct
    vks::VkPipelineRasterizationStateStreamCreateInfoEXT
    bag::BagPipelineRasterizationStateStreamCreateInfoEXT
    """
    Generic constructor.
    """
    function PipelineRasterizationStateStreamCreateInfoEXT(
        rasterization_stream;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationStateStreamCreateInfoEXT(bag_next, _pNext)
        vks = VkPipelineRasterizationStateStreamCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            rasterization_stream,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceTransformFeedbackFeaturesEXT <: VulkanStruct
    vks::VkPhysicalDeviceTransformFeedbackFeaturesEXT
    bag::BagPhysicalDeviceTransformFeedbackFeaturesEXT
    """
    Generic constructor.
    """
    function PhysicalDeviceTransformFeedbackFeaturesEXT(
        transform_feedback,
        geometry_streams;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceTransformFeedbackFeaturesEXT(bag_next, _pNext)
        vks = VkPhysicalDeviceTransformFeedbackFeaturesEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            transform_feedback,
            geometry_streams,
        )
        new(vks, bag)
    end
end

struct DedicatedAllocationMemoryAllocateInfoNV <: VulkanStruct
    vks::VkDedicatedAllocationMemoryAllocateInfoNV
    bag::BagDedicatedAllocationMemoryAllocateInfoNV
    """
    Generic constructor.
    """
    function DedicatedAllocationMemoryAllocateInfoNV(;
        next = C_NULL,
        image = C_NULL,
        buffer = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDedicatedAllocationMemoryAllocateInfoNV(bag_next, _pNext)
        vks = VkDedicatedAllocationMemoryAllocateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if image == C_NULL
                C_NULL
            else
                image.handle
            end,
            if buffer == C_NULL
                C_NULL
            else
                buffer.handle
            end,
        )
        new(vks, bag)
    end
end

struct DedicatedAllocationBufferCreateInfoNV <: VulkanStruct
    vks::VkDedicatedAllocationBufferCreateInfoNV
    bag::BagDedicatedAllocationBufferCreateInfoNV
    """
    Generic constructor.
    """
    function DedicatedAllocationBufferCreateInfoNV(dedicated_allocation; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDedicatedAllocationBufferCreateInfoNV(bag_next, _pNext)
        vks = VkDedicatedAllocationBufferCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            dedicated_allocation,
        )
        new(vks, bag)
    end
end

struct DedicatedAllocationImageCreateInfoNV <: VulkanStruct
    vks::VkDedicatedAllocationImageCreateInfoNV
    bag::BagDedicatedAllocationImageCreateInfoNV
    """
    Generic constructor.
    """
    function DedicatedAllocationImageCreateInfoNV(dedicated_allocation; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDedicatedAllocationImageCreateInfoNV(bag_next, _pNext)
        vks = VkDedicatedAllocationImageCreateInfoNV(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            dedicated_allocation,
        )
        new(vks, bag)
    end
end

struct DebugMarkerMarkerInfoEXT <: VulkanStruct
    vks::VkDebugMarkerMarkerInfoEXT
    bag::BagDebugMarkerMarkerInfoEXT
    """
    Generic constructor.
    """
    function DebugMarkerMarkerInfoEXT(marker_name; next = C_NULL, color = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDebugMarkerMarkerInfoEXT(bag_next, _pNext, marker_name)
        vks = VkDebugMarkerMarkerInfoEXT(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, marker_name, if color == 0
            0
        else
            color
        end)
        new(vks, bag)
    end
end

struct DebugMarkerObjectTagInfoEXT <: VulkanStruct
    vks::VkDebugMarkerObjectTagInfoEXT
    bag::BagDebugMarkerObjectTagInfoEXT
    """
    Generic constructor.
    """
    function DebugMarkerObjectTagInfoEXT(object_type, object, tag_name, tag; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pTag = if tag == C_NULL
            tag
        else
            Ref(tag)
        end
        bag = BagDebugMarkerObjectTagInfoEXT(bag_next, _pNext, _pTag)
        vks = VkDebugMarkerObjectTagInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            object_type,
            object,
            tag_name,
            _pTag,
        )
        new(vks, bag)
    end
end

struct DebugMarkerObjectNameInfoEXT <: VulkanStruct
    vks::VkDebugMarkerObjectNameInfoEXT
    bag::BagDebugMarkerObjectNameInfoEXT
    """
    Generic constructor.
    """
    function DebugMarkerObjectNameInfoEXT(object_type, object, object_name; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDebugMarkerObjectNameInfoEXT(bag_next, _pNext, object_name)
        vks = VkDebugMarkerObjectNameInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            object_type,
            object,
            object_name,
        )
        new(vks, bag)
    end
end

struct PipelineRasterizationStateRasterizationOrderAMD <: VulkanStruct
    vks::VkPipelineRasterizationStateRasterizationOrderAMD
    bag::BagPipelineRasterizationStateRasterizationOrderAMD
    """
    Generic constructor.
    """
    function PipelineRasterizationStateRasterizationOrderAMD(
        rasterization_order;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationStateRasterizationOrderAMD(bag_next, _pNext)
        vks = VkPipelineRasterizationStateRasterizationOrderAMD(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            rasterization_order,
        )
        new(vks, bag)
    end
end

struct DebugReportCallbackCreateInfoEXT <: VulkanStruct
    vks::VkDebugReportCallbackCreateInfoEXT
    bag::BagDebugReportCallbackCreateInfoEXT
    """
    Generic constructor.
    """
    function DebugReportCallbackCreateInfoEXT(
        callback;
        next = C_NULL,
        flags = 0,
        user_data = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pUserData = if user_data == C_NULL
            user_data
        else
            Ref(user_data)
        end
        bag = BagDebugReportCallbackCreateInfoEXT(bag_next, _pNext, _pUserData)
        vks = VkDebugReportCallbackCreateInfoEXT(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            callback,
            if _pUserData == C_NULL
                C_NULL
            else
                _pUserData
            end,
        )
        new(vks, bag)
    end
end

struct PipelineExecutableInternalRepresentationKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    name::String
    description::String
    is_text::Bool
    data::Ptr{Cvoid}
end

struct PipelineExecutableStatisticValueKHR <: ReturnedOnly
    i64::Int64
end

struct PipelineExecutableInfoKHR <: VulkanStruct
    vks::VkPipelineExecutableInfoKHR
    bag::BagPipelineExecutableInfoKHR
    """
    Generic constructor.
    """
    function PipelineExecutableInfoKHR(pipeline, executable_index; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineExecutableInfoKHR(bag_next, _pNext)
        vks = VkPipelineExecutableInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            pipeline.handle,
            executable_index,
        )
        new(vks, bag)
    end
end

struct PipelineInfoKHR <: VulkanStruct
    vks::VkPipelineInfoKHR
    bag::BagPipelineInfoKHR
    """
    Generic constructor.
    """
    function PipelineInfoKHR(pipeline; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineInfoKHR(bag_next, _pNext)
        vks = VkPipelineInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, pipeline.handle)
        new(vks, bag)
    end
end

struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR <: VulkanStruct
    vks::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    bag::BagPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    """
    Generic constructor.
    """
    function PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
        pipeline_executable_info;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(bag_next, _pNext)
        vks = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            pipeline_executable_info,
        )
        new(vks, bag)
    end
end

struct SurfaceProtectedCapabilitiesKHR <: VulkanStruct
    vks::VkSurfaceProtectedCapabilitiesKHR
    bag::BagSurfaceProtectedCapabilitiesKHR
    """
    Generic constructor.
    """
    function SurfaceProtectedCapabilitiesKHR(supports_protected; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSurfaceProtectedCapabilitiesKHR(bag_next, _pNext)
        vks = VkSurfaceProtectedCapabilitiesKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, supports_protected)
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderClockFeaturesKHR <: VulkanStruct
    vks::VkPhysicalDeviceShaderClockFeaturesKHR
    bag::BagPhysicalDeviceShaderClockFeaturesKHR
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderClockFeaturesKHR(
        shader_subgroup_clock,
        shader_device_clock;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderClockFeaturesKHR(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderClockFeaturesKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_subgroup_clock,
            shader_device_clock,
        )
        new(vks, bag)
    end
end

struct DisplayPlaneInfo2KHR <: VulkanStruct
    vks::VkDisplayPlaneInfo2KHR
    bag::BagDisplayPlaneInfo2KHR
    """
    Generic constructor.
    """
    function DisplayPlaneInfo2KHR(mode, plane_index; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplayPlaneInfo2KHR(bag_next, _pNext)
        vks = VkDisplayPlaneInfo2KHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, mode.handle, plane_index)
        new(vks, bag)
    end
end

struct PhysicalDeviceSurfaceInfo2KHR <: VulkanStruct
    vks::VkPhysicalDeviceSurfaceInfo2KHR
    bag::BagPhysicalDeviceSurfaceInfo2KHR
    """
    Generic constructor.
    """
    function PhysicalDeviceSurfaceInfo2KHR(surface; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceSurfaceInfo2KHR(bag_next, _pNext)
        vks = VkPhysicalDeviceSurfaceInfo2KHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, surface.handle)
        new(vks, bag)
    end
end

struct PerformanceQuerySubmitInfoKHR <: VulkanStruct
    vks::VkPerformanceQuerySubmitInfoKHR
    bag::BagPerformanceQuerySubmitInfoKHR
    """
    Generic constructor.
    """
    function PerformanceQuerySubmitInfoKHR(counter_pass_index; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPerformanceQuerySubmitInfoKHR(bag_next, _pNext)
        vks = VkPerformanceQuerySubmitInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, counter_pass_index)
        new(vks, bag)
    end
end

struct AcquireProfilingLockInfoKHR <: VulkanStruct
    vks::VkAcquireProfilingLockInfoKHR
    bag::BagAcquireProfilingLockInfoKHR
    """
    Generic constructor.
    """
    function AcquireProfilingLockInfoKHR(timeout; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAcquireProfilingLockInfoKHR(bag_next, _pNext)
        vks = VkAcquireProfilingLockInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, timeout)
        new(vks, bag)
    end
end

struct PerformanceCounterResultKHR <: VulkanStruct
    vks::VkPerformanceCounterResultKHR
    PerformanceCounterResultKHR(vks::VkPerformanceCounterResultKHR) = new(vks)
end

struct QueryPoolPerformanceCreateInfoKHR <: VulkanStruct
    vks::VkQueryPoolPerformanceCreateInfoKHR
    bag::BagQueryPoolPerformanceCreateInfoKHR
    """
    Generic constructor.
    """
    function QueryPoolPerformanceCreateInfoKHR(
        queue_family_index,
        counter_indices;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        counter_indices = convert(Array{UInt32}, counter_indices)
        bag = BagQueryPoolPerformanceCreateInfoKHR(bag_next, _pNext, counter_indices)
        vks = VkQueryPoolPerformanceCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            queue_family_index,
            counter_indices,
        )
        new(vks, bag)
    end
end

struct PhysicalDevicePerformanceQueryPropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    allow_command_buffer_query_copies::Bool
end

struct PhysicalDevicePerformanceQueryFeaturesKHR <: VulkanStruct
    vks::VkPhysicalDevicePerformanceQueryFeaturesKHR
    bag::BagPhysicalDevicePerformanceQueryFeaturesKHR
    """
    Generic constructor.
    """
    function PhysicalDevicePerformanceQueryFeaturesKHR(
        performance_counter_query_pools,
        performance_counter_multiple_query_pools;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevicePerformanceQueryFeaturesKHR(bag_next, _pNext)
        vks = VkPhysicalDevicePerformanceQueryFeaturesKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            performance_counter_query_pools,
            performance_counter_multiple_query_pools,
        )
        new(vks, bag)
    end
end

struct FenceGetFdInfoKHR <: VulkanStruct
    vks::VkFenceGetFdInfoKHR
    bag::BagFenceGetFdInfoKHR
    """
    Generic constructor.
    """
    function FenceGetFdInfoKHR(fence, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagFenceGetFdInfoKHR(bag_next, _pNext)
        vks = VkFenceGetFdInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, fence.handle, handle_type)
        new(vks, bag)
    end
end

struct ImportFenceFdInfoKHR <: VulkanStruct
    vks::VkImportFenceFdInfoKHR
    bag::BagImportFenceFdInfoKHR
    """
    Generic constructor.
    """
    function ImportFenceFdInfoKHR(fence, handle_type, fd; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportFenceFdInfoKHR(bag_next, _pNext)
        vks = VkImportFenceFdInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            fence.handle,
            if flags == 0
                0
            else
                flags
            end,
            handle_type,
            fd,
        )
        new(vks, bag)
    end
end

struct PresentRegionsKHR <: VulkanStruct
    vks::VkPresentRegionsKHR
    bag::BagPresentRegionsKHR
    """
    Generic constructor.
    """
    function PresentRegionsKHR(; next = C_NULL, regions = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pRegions = if regions == C_NULL
            regions
        else
            getproperty.(regions, :vks)
        end
        bag = BagPresentRegionsKHR(
            bag_next,
            _pNext,
            if regions == C_NULL
                EmptyBag
            else
                getproperty.(regions, :bag)
            end,
            _pRegions,
        )
        vks = VkPresentRegionsKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if _pRegions == C_NULL
            C_NULL
        else
            _pRegions
        end)
        new(vks, bag)
    end
end

struct PresentRegionKHR <: VulkanStruct
    vks::VkPresentRegionKHR
    bag::BagPresentRegionKHR
    """
    Generic constructor.
    """
    function PresentRegionKHR(; rectangles = C_NULL)
        _pRectangles = if rectangles == C_NULL
            rectangles
        else
            getproperty.(rectangles, :vks)
        end
        bag = BagPresentRegionKHR(_pRectangles)
        vks = VkPresentRegionKHR(if _pRectangles == C_NULL
            C_NULL
        else
            _pRectangles
        end)
        new(vks, bag)
    end
end

struct RectLayerKHR <: VulkanStruct
    vks::VkRectLayerKHR
    RectLayerKHR(vks::VkRectLayerKHR) = new(vks)
end

struct PhysicalDevicePushDescriptorPropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    max_push_descriptors::UInt32
end

struct SemaphoreGetFdInfoKHR <: VulkanStruct
    vks::VkSemaphoreGetFdInfoKHR
    bag::BagSemaphoreGetFdInfoKHR
    """
    Generic constructor.
    """
    function SemaphoreGetFdInfoKHR(semaphore, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSemaphoreGetFdInfoKHR(bag_next, _pNext)
        vks = VkSemaphoreGetFdInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, semaphore.handle, handle_type)
        new(vks, bag)
    end
end

struct ImportSemaphoreFdInfoKHR <: VulkanStruct
    vks::VkImportSemaphoreFdInfoKHR
    bag::BagImportSemaphoreFdInfoKHR
    """
    Generic constructor.
    """
    function ImportSemaphoreFdInfoKHR(semaphore, handle_type, fd; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportSemaphoreFdInfoKHR(bag_next, _pNext)
        vks = VkImportSemaphoreFdInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            semaphore.handle,
            if flags == 0
                0
            else
                flags
            end,
            handle_type,
            fd,
        )
        new(vks, bag)
    end
end

struct MemoryGetFdInfoKHR <: VulkanStruct
    vks::VkMemoryGetFdInfoKHR
    bag::BagMemoryGetFdInfoKHR
    """
    Generic constructor.
    """
    function MemoryGetFdInfoKHR(memory, handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryGetFdInfoKHR(bag_next, _pNext)
        vks = VkMemoryGetFdInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory.handle, handle_type)
        new(vks, bag)
    end
end

struct MemoryFdPropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

struct ImportMemoryFdInfoKHR <: VulkanStruct
    vks::VkImportMemoryFdInfoKHR
    bag::BagImportMemoryFdInfoKHR
    """
    Generic constructor.
    """
    function ImportMemoryFdInfoKHR(fd; next = C_NULL, handle_type = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImportMemoryFdInfoKHR(bag_next, _pNext)
        vks = VkImportMemoryFdInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_type == 0
            0
        else
            handle_type
        end, fd)
        new(vks, bag)
    end
end

struct DisplayPresentInfoKHR <: VulkanStruct
    vks::VkDisplayPresentInfoKHR
    bag::BagDisplayPresentInfoKHR
    """
    Generic constructor.
    """
    function DisplayPresentInfoKHR(src_rect, dst_rect, persistent; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplayPresentInfoKHR(bag_next, _pNext)
        vks = VkDisplayPresentInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_rect.vks,
            dst_rect.vks,
            persistent,
        )
        new(vks, bag)
    end
end

struct DisplaySurfaceCreateInfoKHR <: VulkanStruct
    vks::VkDisplaySurfaceCreateInfoKHR
    bag::BagDisplaySurfaceCreateInfoKHR
    """
    Generic constructor.
    """
    function DisplaySurfaceCreateInfoKHR(
        display_mode,
        plane_index,
        plane_stack_index,
        transform,
        global_alpha,
        alpha_mode,
        image_extent;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplaySurfaceCreateInfoKHR(bag_next, _pNext)
        vks = VkDisplaySurfaceCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            display_mode.handle,
            plane_index,
            plane_stack_index,
            transform,
            global_alpha,
            alpha_mode,
            image_extent.vks,
        )
        new(vks, bag)
    end
end

struct DisplayModeCreateInfoKHR <: VulkanStruct
    vks::VkDisplayModeCreateInfoKHR
    bag::BagDisplayModeCreateInfoKHR
    """
    Generic constructor.
    """
    function DisplayModeCreateInfoKHR(parameters; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDisplayModeCreateInfoKHR(bag_next, _pNext)
        vks = VkDisplayModeCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, parameters.vks)
        new(vks, bag)
    end
end

struct DisplayModeParametersKHR <: VulkanStruct
    vks::VkDisplayModeParametersKHR
    DisplayModeParametersKHR(vks::VkDisplayModeParametersKHR) = new(vks)
end

struct DeviceGroupSwapchainCreateInfoKHR <: VulkanStruct
    vks::VkDeviceGroupSwapchainCreateInfoKHR
    bag::BagDeviceGroupSwapchainCreateInfoKHR
    """
    Generic constructor.
    """
    function DeviceGroupSwapchainCreateInfoKHR(modes; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceGroupSwapchainCreateInfoKHR(bag_next, _pNext)
        vks = VkDeviceGroupSwapchainCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, modes)
        new(vks, bag)
    end
end

struct DeviceGroupPresentInfoKHR <: VulkanStruct
    vks::VkDeviceGroupPresentInfoKHR
    bag::BagDeviceGroupPresentInfoKHR
    """
    Generic constructor.
    """
    function DeviceGroupPresentInfoKHR(device_masks, mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        device_masks = convert(Array{UInt32}, device_masks)
        bag = BagDeviceGroupPresentInfoKHR(bag_next, _pNext, device_masks)
        vks = VkDeviceGroupPresentInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, device_masks, mode)
        new(vks, bag)
    end
end

struct AcquireNextImageInfoKHR <: VulkanStruct
    vks::VkAcquireNextImageInfoKHR
    bag::BagAcquireNextImageInfoKHR
    """
    Generic constructor.
    """
    function AcquireNextImageInfoKHR(
        swapchain,
        timeout,
        device_mask;
        next = C_NULL,
        semaphore = C_NULL,
        fence = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAcquireNextImageInfoKHR(bag_next, _pNext)
        vks = VkAcquireNextImageInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            swapchain.handle,
            timeout,
            if semaphore == C_NULL
                C_NULL
            else
                semaphore.handle
            end,
            if fence == C_NULL
                C_NULL
            else
                fence.handle
            end,
            device_mask,
        )
        new(vks, bag)
    end
end

struct BindImageMemorySwapchainInfoKHR <: VulkanStruct
    vks::VkBindImageMemorySwapchainInfoKHR
    bag::BagBindImageMemorySwapchainInfoKHR
    """
    Generic constructor.
    """
    function BindImageMemorySwapchainInfoKHR(swapchain, image_index; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBindImageMemorySwapchainInfoKHR(bag_next, _pNext)
        vks = VkBindImageMemorySwapchainInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            swapchain.handle,
            image_index,
        )
        new(vks, bag)
    end
end

struct ImageSwapchainCreateInfoKHR <: VulkanStruct
    vks::VkImageSwapchainCreateInfoKHR
    bag::BagImageSwapchainCreateInfoKHR
    """
    Generic constructor.
    """
    function ImageSwapchainCreateInfoKHR(; next = C_NULL, swapchain = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageSwapchainCreateInfoKHR(bag_next, _pNext)
        vks = VkImageSwapchainCreateInfoKHR(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if swapchain == C_NULL
            C_NULL
        else
            swapchain.handle
        end)
        new(vks, bag)
    end
end

struct PresentInfoKHR <: VulkanStruct
    vks::VkPresentInfoKHR
    bag::BagPresentInfoKHR
    """
    Generic constructor.
    """
    function PresentInfoKHR(
        wait_semaphores,
        swapchains,
        image_indices;
        next = C_NULL,
        results = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pWaitSemaphores = if wait_semaphores == C_NULL
            wait_semaphores
        else
            getproperty.(wait_semaphores, :handle)
        end
        _pSwapchains = if swapchains == C_NULL
            swapchains
        else
            getproperty.(swapchains, :handle)
        end
        image_indices = convert(Array{UInt32}, image_indices)
        bag = BagPresentInfoKHR(
            bag_next,
            _pNext,
            _pWaitSemaphores,
            _pSwapchains,
            image_indices,
            results,
        )
        vks = VkPresentInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pWaitSemaphores,
            _pSwapchains,
            image_indices,
            if results == C_NULL
                C_NULL
            else
                results
            end,
        )
        new(vks, bag)
    end
end

struct SwapchainCreateInfoKHR <: VulkanStruct
    vks::VkSwapchainCreateInfoKHR
    bag::BagSwapchainCreateInfoKHR
    """
    Generic constructor.
    """
    function SwapchainCreateInfoKHR(
        surface,
        min_image_count,
        image_format,
        image_color_space,
        image_extent,
        image_array_layers,
        image_usage,
        image_sharing_mode,
        queue_family_indices,
        pre_transform,
        composite_alpha,
        present_mode,
        clipped;
        next = C_NULL,
        flags = 0,
        old_swapchain = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        queue_family_indices = convert(Array{UInt32}, queue_family_indices)
        bag = BagSwapchainCreateInfoKHR(bag_next, _pNext, queue_family_indices)
        vks = VkSwapchainCreateInfoKHR(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            surface.handle,
            min_image_count,
            image_format,
            image_color_space,
            image_extent.vks,
            image_array_layers,
            image_usage,
            image_sharing_mode,
            queue_family_indices,
            pre_transform,
            composite_alpha,
            present_mode,
            clipped,
            if old_swapchain == C_NULL
                C_NULL
            else
                old_swapchain.handle
            end,
        )
        new(vks, bag)
    end
end

struct DeviceMemoryOpaqueCaptureAddressInfo <: VulkanStruct
    vks::VkDeviceMemoryOpaqueCaptureAddressInfo
    bag::BagDeviceMemoryOpaqueCaptureAddressInfo
    """
    Generic constructor.
    """
    function DeviceMemoryOpaqueCaptureAddressInfo(memory; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceMemoryOpaqueCaptureAddressInfo(bag_next, _pNext)
        vks = VkDeviceMemoryOpaqueCaptureAddressInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory.handle)
        new(vks, bag)
    end
end

struct MemoryOpaqueCaptureAddressAllocateInfo <: VulkanStruct
    vks::VkMemoryOpaqueCaptureAddressAllocateInfo
    bag::BagMemoryOpaqueCaptureAddressAllocateInfo
    """
    Generic constructor.
    """
    function MemoryOpaqueCaptureAddressAllocateInfo(opaque_capture_address; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryOpaqueCaptureAddressAllocateInfo(bag_next, _pNext)
        vks = VkMemoryOpaqueCaptureAddressAllocateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            opaque_capture_address,
        )
        new(vks, bag)
    end
end

struct BufferOpaqueCaptureAddressCreateInfo <: VulkanStruct
    vks::VkBufferOpaqueCaptureAddressCreateInfo
    bag::BagBufferOpaqueCaptureAddressCreateInfo
    """
    Generic constructor.
    """
    function BufferOpaqueCaptureAddressCreateInfo(opaque_capture_address; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferOpaqueCaptureAddressCreateInfo(bag_next, _pNext)
        vks = VkBufferOpaqueCaptureAddressCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            opaque_capture_address,
        )
        new(vks, bag)
    end
end

struct BufferDeviceAddressInfo <: VulkanStruct
    vks::VkBufferDeviceAddressInfo
    bag::BagBufferDeviceAddressInfo
    """
    Generic constructor.
    """
    function BufferDeviceAddressInfo(buffer; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferDeviceAddressInfo(bag_next, _pNext)
        vks = VkBufferDeviceAddressInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, buffer.handle)
        new(vks, bag)
    end
end

struct PhysicalDeviceBufferDeviceAddressFeatures <: VulkanStruct
    vks::VkPhysicalDeviceBufferDeviceAddressFeatures
    bag::BagPhysicalDeviceBufferDeviceAddressFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceBufferDeviceAddressFeatures(
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceBufferDeviceAddressFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceBufferDeviceAddressFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            buffer_device_address,
            buffer_device_address_capture_replay,
            buffer_device_address_multi_device,
        )
        new(vks, bag)
    end
end

struct SemaphoreSignalInfo <: VulkanStruct
    vks::VkSemaphoreSignalInfo
    bag::BagSemaphoreSignalInfo
    """
    Generic constructor.
    """
    function SemaphoreSignalInfo(semaphore, value; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSemaphoreSignalInfo(bag_next, _pNext)
        vks = VkSemaphoreSignalInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, semaphore.handle, value)
        new(vks, bag)
    end
end

struct SemaphoreWaitInfo <: VulkanStruct
    vks::VkSemaphoreWaitInfo
    bag::BagSemaphoreWaitInfo
    """
    Generic constructor.
    """
    function SemaphoreWaitInfo(semaphores, values; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pSemaphores = if semaphores == C_NULL
            semaphores
        else
            getproperty.(semaphores, :handle)
        end
        values = convert(Array{UInt64}, values)
        bag = BagSemaphoreWaitInfo(bag_next, _pNext, _pSemaphores, values)
        vks = VkSemaphoreWaitInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _pSemaphores, values)
        new(vks, bag)
    end
end

struct TimelineSemaphoreSubmitInfo <: VulkanStruct
    vks::VkTimelineSemaphoreSubmitInfo
    bag::BagTimelineSemaphoreSubmitInfo
    """
    Generic constructor.
    """
    function TimelineSemaphoreSubmitInfo(;
        next = C_NULL,
        wait_semaphore_values = C_NULL,
        signal_semaphore_values = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        wait_semaphore_values = convert(Array{UInt64}, wait_semaphore_values)
        signal_semaphore_values = convert(Array{UInt64}, signal_semaphore_values)
        bag = BagTimelineSemaphoreSubmitInfo(
            bag_next,
            _pNext,
            wait_semaphore_values,
            signal_semaphore_values,
        )
        vks = VkTimelineSemaphoreSubmitInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if wait_semaphore_values == C_NULL
                C_NULL
            else
                wait_semaphore_values
            end,
            if signal_semaphore_values == C_NULL
                C_NULL
            else
                signal_semaphore_values
            end,
        )
        new(vks, bag)
    end
end

struct SemaphoreTypeCreateInfo <: VulkanStruct
    vks::VkSemaphoreTypeCreateInfo
    bag::BagSemaphoreTypeCreateInfo
    """
    Generic constructor.
    """
    function SemaphoreTypeCreateInfo(semaphore_type, initial_value; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSemaphoreTypeCreateInfo(bag_next, _pNext)
        vks = VkSemaphoreTypeCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, semaphore_type, initial_value)
        new(vks, bag)
    end
end

struct PhysicalDeviceTimelineSemaphoreProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    max_timeline_semaphore_value_difference::UInt64
end

struct PhysicalDeviceTimelineSemaphoreFeatures <: VulkanStruct
    vks::VkPhysicalDeviceTimelineSemaphoreFeatures
    bag::BagPhysicalDeviceTimelineSemaphoreFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceTimelineSemaphoreFeatures(timeline_semaphore; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceTimelineSemaphoreFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceTimelineSemaphoreFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            timeline_semaphore,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceHostQueryResetFeatures <: VulkanStruct
    vks::VkPhysicalDeviceHostQueryResetFeatures
    bag::BagPhysicalDeviceHostQueryResetFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceHostQueryResetFeatures(host_query_reset; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceHostQueryResetFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceHostQueryResetFeatures(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, host_query_reset)
        new(vks, bag)
    end
end

struct AttachmentDescriptionStencilLayout <: VulkanStruct
    vks::VkAttachmentDescriptionStencilLayout
    bag::BagAttachmentDescriptionStencilLayout
    """
    Generic constructor.
    """
    function AttachmentDescriptionStencilLayout(
        stencil_initial_layout,
        stencil_final_layout;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAttachmentDescriptionStencilLayout(bag_next, _pNext)
        vks = VkAttachmentDescriptionStencilLayout(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            stencil_initial_layout,
            stencil_final_layout,
        )
        new(vks, bag)
    end
end

struct AttachmentReferenceStencilLayout <: VulkanStruct
    vks::VkAttachmentReferenceStencilLayout
    bag::BagAttachmentReferenceStencilLayout
    """
    Generic constructor.
    """
    function AttachmentReferenceStencilLayout(stencil_layout; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAttachmentReferenceStencilLayout(bag_next, _pNext)
        vks = VkAttachmentReferenceStencilLayout(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, stencil_layout)
        new(vks, bag)
    end
end

struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures <: VulkanStruct
    vks::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    bag::BagPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceSeparateDepthStencilLayoutsFeatures(
        separate_depth_stencil_layouts;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceSeparateDepthStencilLayoutsFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            separate_depth_stencil_layouts,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures <: VulkanStruct
    vks::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    bag::BagPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderSubgroupExtendedTypesFeatures(
        shader_subgroup_extended_types;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderSubgroupExtendedTypesFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_subgroup_extended_types,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceUniformBufferStandardLayoutFeatures <: VulkanStruct
    vks::VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    bag::BagPhysicalDeviceUniformBufferStandardLayoutFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceUniformBufferStandardLayoutFeatures(
        uniform_buffer_standard_layout;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceUniformBufferStandardLayoutFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            uniform_buffer_standard_layout,
        )
        new(vks, bag)
    end
end

struct RenderPassAttachmentBeginInfo <: VulkanStruct
    vks::VkRenderPassAttachmentBeginInfo
    bag::BagRenderPassAttachmentBeginInfo
    """
    Generic constructor.
    """
    function RenderPassAttachmentBeginInfo(attachments; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachments = if attachments == C_NULL
            attachments
        else
            getproperty.(attachments, :handle)
        end
        bag = BagRenderPassAttachmentBeginInfo(bag_next, _pNext, _pAttachments)
        vks = VkRenderPassAttachmentBeginInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pAttachments)
        new(vks, bag)
    end
end

struct FramebufferAttachmentsCreateInfo <: VulkanStruct
    vks::VkFramebufferAttachmentsCreateInfo
    bag::BagFramebufferAttachmentsCreateInfo
    """
    Generic constructor.
    """
    function FramebufferAttachmentsCreateInfo(attachment_image_infos; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachmentImageInfos = if attachment_image_infos == C_NULL
            attachment_image_infos
        else
            getproperty.(attachment_image_infos, :vks)
        end
        bag = BagFramebufferAttachmentsCreateInfo(
            bag_next,
            _pNext,
            getproperty.(attachment_image_infos, :bag),
            _pAttachmentImageInfos,
        )
        vks = VkFramebufferAttachmentsCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pAttachmentImageInfos)
        new(vks, bag)
    end
end

struct FramebufferAttachmentImageInfo <: VulkanStruct
    vks::VkFramebufferAttachmentImageInfo
    bag::BagFramebufferAttachmentImageInfo
    """
    Generic constructor.
    """
    function FramebufferAttachmentImageInfo(
        usage,
        width,
        height,
        layer_count,
        view_formats;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagFramebufferAttachmentImageInfo(bag_next, _pNext, view_formats)
        vks = VkFramebufferAttachmentImageInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            usage,
            width,
            height,
            layer_count,
            view_formats,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceImagelessFramebufferFeatures <: VulkanStruct
    vks::VkPhysicalDeviceImagelessFramebufferFeatures
    bag::BagPhysicalDeviceImagelessFramebufferFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceImagelessFramebufferFeatures(
        imageless_framebuffer;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceImagelessFramebufferFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceImagelessFramebufferFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            imageless_framebuffer,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceVulkanMemoryModelFeatures <: VulkanStruct
    vks::VkPhysicalDeviceVulkanMemoryModelFeatures
    bag::BagPhysicalDeviceVulkanMemoryModelFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceVulkanMemoryModelFeatures(
        vulkan_memory_model,
        vulkan_memory_model_device_scope,
        vulkan_memory_model_availability_visibility_chains;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceVulkanMemoryModelFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceVulkanMemoryModelFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            vulkan_memory_model,
            vulkan_memory_model_device_scope,
            vulkan_memory_model_availability_visibility_chains,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceSamplerFilterMinmaxProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
end

struct SamplerReductionModeCreateInfo <: VulkanStruct
    vks::VkSamplerReductionModeCreateInfo
    bag::BagSamplerReductionModeCreateInfo
    """
    Generic constructor.
    """
    function SamplerReductionModeCreateInfo(reduction_mode; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSamplerReductionModeCreateInfo(bag_next, _pNext)
        vks = VkSamplerReductionModeCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, reduction_mode)
        new(vks, bag)
    end
end

struct ImageStencilUsageCreateInfo <: VulkanStruct
    vks::VkImageStencilUsageCreateInfo
    bag::BagImageStencilUsageCreateInfo
    """
    Generic constructor.
    """
    function ImageStencilUsageCreateInfo(stencil_usage; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageStencilUsageCreateInfo(bag_next, _pNext)
        vks = VkImageStencilUsageCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, stencil_usage)
        new(vks, bag)
    end
end

struct PhysicalDeviceScalarBlockLayoutFeatures <: VulkanStruct
    vks::VkPhysicalDeviceScalarBlockLayoutFeatures
    bag::BagPhysicalDeviceScalarBlockLayoutFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceScalarBlockLayoutFeatures(scalar_block_layout; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceScalarBlockLayoutFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceScalarBlockLayoutFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            scalar_block_layout,
        )
        new(vks, bag)
    end
end

struct SubpassDescriptionDepthStencilResolve <: VulkanStruct
    vks::VkSubpassDescriptionDepthStencilResolve
    bag::BagSubpassDescriptionDepthStencilResolve
    """
    Generic constructor.
    """
    function SubpassDescriptionDepthStencilResolve(
        depth_resolve_mode,
        stencil_resolve_mode;
        next = C_NULL,
        depth_stencil_resolve_attachment = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pDepthStencilResolveAttachment = if depth_stencil_resolve_attachment == C_NULL
            depth_stencil_resolve_attachment
        else
            Ref(depth_stencil_resolve_attachment.vks)
        end
        bag = BagSubpassDescriptionDepthStencilResolve(
            bag_next,
            _pNext,
            if depth_stencil_resolve_attachment == C_NULL
                EmptyBag
            else
                depth_stencil_resolve_attachment.bag
            end,
            _pDepthStencilResolveAttachment,
        )
        vks = VkSubpassDescriptionDepthStencilResolve(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            depth_resolve_mode,
            stencil_resolve_mode,
            if _pDepthStencilResolveAttachment == C_NULL
                C_NULL
            else
                _pDepthStencilResolveAttachment
            end,
        )
        new(vks, bag)
    end
end

struct DescriptorSetVariableDescriptorCountLayoutSupport <: ReturnedOnly
    next::Ptr{Cvoid}
    max_variable_descriptor_count::UInt32
end

struct DescriptorSetVariableDescriptorCountAllocateInfo <: VulkanStruct
    vks::VkDescriptorSetVariableDescriptorCountAllocateInfo
    bag::BagDescriptorSetVariableDescriptorCountAllocateInfo
    """
    Generic constructor.
    """
    function DescriptorSetVariableDescriptorCountAllocateInfo(
        descriptor_counts;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        descriptor_counts = convert(Array{UInt32}, descriptor_counts)
        bag = BagDescriptorSetVariableDescriptorCountAllocateInfo(
            bag_next,
            _pNext,
            descriptor_counts,
        )
        vks = VkDescriptorSetVariableDescriptorCountAllocateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            descriptor_counts,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceDescriptorIndexingProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
end

struct PhysicalDeviceDescriptorIndexingFeatures <: VulkanStruct
    vks::VkPhysicalDeviceDescriptorIndexingFeatures
    bag::BagPhysicalDeviceDescriptorIndexingFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceDescriptorIndexingFeatures(
        shader_input_attachment_array_dynamic_indexing,
        shader_uniform_texel_buffer_array_dynamic_indexing,
        shader_storage_texel_buffer_array_dynamic_indexing,
        shader_uniform_buffer_array_non_uniform_indexing,
        shader_sampled_image_array_non_uniform_indexing,
        shader_storage_buffer_array_non_uniform_indexing,
        shader_storage_image_array_non_uniform_indexing,
        shader_input_attachment_array_non_uniform_indexing,
        shader_uniform_texel_buffer_array_non_uniform_indexing,
        shader_storage_texel_buffer_array_non_uniform_indexing,
        descriptor_binding_uniform_buffer_update_after_bind,
        descriptor_binding_sampled_image_update_after_bind,
        descriptor_binding_storage_image_update_after_bind,
        descriptor_binding_storage_buffer_update_after_bind,
        descriptor_binding_uniform_texel_buffer_update_after_bind,
        descriptor_binding_storage_texel_buffer_update_after_bind,
        descriptor_binding_update_unused_while_pending,
        descriptor_binding_partially_bound,
        descriptor_binding_variable_descriptor_count,
        runtime_descriptor_array;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceDescriptorIndexingFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceDescriptorIndexingFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_input_attachment_array_dynamic_indexing,
            shader_uniform_texel_buffer_array_dynamic_indexing,
            shader_storage_texel_buffer_array_dynamic_indexing,
            shader_uniform_buffer_array_non_uniform_indexing,
            shader_sampled_image_array_non_uniform_indexing,
            shader_storage_buffer_array_non_uniform_indexing,
            shader_storage_image_array_non_uniform_indexing,
            shader_input_attachment_array_non_uniform_indexing,
            shader_uniform_texel_buffer_array_non_uniform_indexing,
            shader_storage_texel_buffer_array_non_uniform_indexing,
            descriptor_binding_uniform_buffer_update_after_bind,
            descriptor_binding_sampled_image_update_after_bind,
            descriptor_binding_storage_image_update_after_bind,
            descriptor_binding_storage_buffer_update_after_bind,
            descriptor_binding_uniform_texel_buffer_update_after_bind,
            descriptor_binding_storage_texel_buffer_update_after_bind,
            descriptor_binding_update_unused_while_pending,
            descriptor_binding_partially_bound,
            descriptor_binding_variable_descriptor_count,
            runtime_descriptor_array,
        )
        new(vks, bag)
    end
end

struct DescriptorSetLayoutBindingFlagsCreateInfo <: VulkanStruct
    vks::VkDescriptorSetLayoutBindingFlagsCreateInfo
    bag::BagDescriptorSetLayoutBindingFlagsCreateInfo
    """
    Generic constructor.
    """
    function DescriptorSetLayoutBindingFlagsCreateInfo(binding_flags; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDescriptorSetLayoutBindingFlagsCreateInfo(bag_next, _pNext, binding_flags)
        vks = VkDescriptorSetLayoutBindingFlagsCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, binding_flags)
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderFloat16Int8Features <: VulkanStruct
    vks::VkPhysicalDeviceShaderFloat16Int8Features
    bag::BagPhysicalDeviceShaderFloat16Int8Features
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderFloat16Int8Features(
        shader_float_16,
        shader_int_8;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderFloat16Int8Features(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderFloat16Int8Features(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_float_16,
            shader_int_8,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderAtomicInt64Features <: VulkanStruct
    vks::VkPhysicalDeviceShaderAtomicInt64Features
    bag::BagPhysicalDeviceShaderAtomicInt64Features
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderAtomicInt64Features(
        shader_buffer_int_64_atomics,
        shader_shared_int_64_atomics;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderAtomicInt64Features(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderAtomicInt64Features(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_buffer_int_64_atomics,
            shader_shared_int_64_atomics,
        )
        new(vks, bag)
    end
end

struct PhysicalDevice8BitStorageFeatures <: VulkanStruct
    vks::VkPhysicalDevice8BitStorageFeatures
    bag::BagPhysicalDevice8BitStorageFeatures
    """
    Generic constructor.
    """
    function PhysicalDevice8BitStorageFeatures(
        storage_buffer_8_bit_access,
        uniform_and_storage_buffer_8_bit_access,
        storage_push_constant_8;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevice8BitStorageFeatures(bag_next, _pNext)
        vks = VkPhysicalDevice8BitStorageFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            storage_buffer_8_bit_access,
            uniform_and_storage_buffer_8_bit_access,
            storage_push_constant_8,
        )
        new(vks, bag)
    end
end

struct SubpassEndInfo <: VulkanStruct
    vks::VkSubpassEndInfo
    bag::BagSubpassEndInfo
    """
    Generic constructor.
    """
    function SubpassEndInfo(; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSubpassEndInfo(bag_next, _pNext)
        vks = VkSubpassEndInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end)
        new(vks, bag)
    end
end

struct SubpassBeginInfo <: VulkanStruct
    vks::VkSubpassBeginInfo
    bag::BagSubpassBeginInfo
    """
    Generic constructor.
    """
    function SubpassBeginInfo(contents; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSubpassBeginInfo(bag_next, _pNext)
        vks = VkSubpassBeginInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, contents)
        new(vks, bag)
    end
end

struct RenderPassCreateInfo2 <: VulkanStruct
    vks::VkRenderPassCreateInfo2
    bag::BagRenderPassCreateInfo2
    """
    Generic constructor.
    """
    function RenderPassCreateInfo2(
        attachments,
        subpasses,
        dependencies,
        correlated_view_masks;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachments = if attachments == C_NULL
            attachments
        else
            getproperty.(attachments, :vks)
        end
        _pSubpasses = if subpasses == C_NULL
            subpasses
        else
            getproperty.(subpasses, :vks)
        end
        _pDependencies = if dependencies == C_NULL
            dependencies
        else
            getproperty.(dependencies, :vks)
        end
        correlated_view_masks = convert(Array{UInt32}, correlated_view_masks)
        bag = BagRenderPassCreateInfo2(
            bag_next,
            _pNext,
            getproperty.(attachments, :bag),
            _pAttachments,
            getproperty.(subpasses, :bag),
            _pSubpasses,
            getproperty.(dependencies, :bag),
            _pDependencies,
            correlated_view_masks,
        )
        vks = VkRenderPassCreateInfo2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pAttachments,
            _pSubpasses,
            _pDependencies,
            correlated_view_masks,
        )
        new(vks, bag)
    end
end

struct SubpassDependency2 <: VulkanStruct
    vks::VkSubpassDependency2
    bag::BagSubpassDependency2
    """
    Generic constructor.
    """
    function SubpassDependency2(
        src_subpass,
        dst_subpass,
        src_stage_mask,
        dst_stage_mask;
        next = C_NULL,
        src_access_mask = 0,
        dst_access_mask = 0,
        dependency_flags = 0,
        view_offset = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSubpassDependency2(bag_next, _pNext)
        vks = VkSubpassDependency2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_subpass,
            dst_subpass,
            src_stage_mask,
            dst_stage_mask,
            if src_access_mask == 0
                0
            else
                src_access_mask
            end,
            if dst_access_mask == 0
                0
            else
                dst_access_mask
            end,
            if dependency_flags == 0
                0
            else
                dependency_flags
            end,
            if view_offset == 0
                0
            else
                view_offset
            end,
        )
        new(vks, bag)
    end
end

struct SubpassDescription2 <: VulkanStruct
    vks::VkSubpassDescription2
    bag::BagSubpassDescription2
    """
    Generic constructor.
    """
    function SubpassDescription2(
        pipeline_bind_point,
        view_mask,
        input_attachments,
        color_attachments,
        preserve_attachments;
        next = C_NULL,
        flags = 0,
        resolve_attachments = C_NULL,
        depth_stencil_attachment = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pInputAttachments = if input_attachments == C_NULL
            input_attachments
        else
            getproperty.(input_attachments, :vks)
        end
        _pColorAttachments = if color_attachments == C_NULL
            color_attachments
        else
            getproperty.(color_attachments, :vks)
        end
        _pResolveAttachments = if resolve_attachments == C_NULL
            resolve_attachments
        else
            getproperty.(resolve_attachments, :vks)
        end
        _pDepthStencilAttachment = if depth_stencil_attachment == C_NULL
            depth_stencil_attachment
        else
            Ref(depth_stencil_attachment.vks)
        end
        preserve_attachments = convert(Array{UInt32}, preserve_attachments)
        bag = BagSubpassDescription2(
            bag_next,
            _pNext,
            getproperty.(input_attachments, :bag),
            _pInputAttachments,
            getproperty.(color_attachments, :bag),
            _pColorAttachments,
            if resolve_attachments == C_NULL
                EmptyBag
            else
                getproperty.(resolve_attachments, :bag)
            end,
            _pResolveAttachments,
            if depth_stencil_attachment == C_NULL
                EmptyBag
            else
                depth_stencil_attachment.bag
            end,
            _pDepthStencilAttachment,
            preserve_attachments,
        )
        vks = VkSubpassDescription2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            pipeline_bind_point,
            view_mask,
            _pInputAttachments,
            _pColorAttachments,
            if _pResolveAttachments == C_NULL
                C_NULL
            else
                _pResolveAttachments
            end,
            if _pDepthStencilAttachment == C_NULL
                C_NULL
            else
                _pDepthStencilAttachment
            end,
            preserve_attachments,
        )
        new(vks, bag)
    end
end

struct AttachmentReference2 <: VulkanStruct
    vks::VkAttachmentReference2
    bag::BagAttachmentReference2
    """
    Generic constructor.
    """
    function AttachmentReference2(attachment, layout, aspect_mask; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAttachmentReference2(bag_next, _pNext)
        vks = VkAttachmentReference2(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, attachment, layout, aspect_mask)
        new(vks, bag)
    end
end

struct AttachmentDescription2 <: VulkanStruct
    vks::VkAttachmentDescription2
    bag::BagAttachmentDescription2
    """
    Generic constructor.
    """
    function AttachmentDescription2(
        format,
        samples,
        load_op,
        store_op,
        stencil_load_op,
        stencil_store_op,
        initial_layout,
        final_layout;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagAttachmentDescription2(bag_next, _pNext)
        vks = VkAttachmentDescription2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            format,
            samples,
            load_op,
            store_op,
            stencil_load_op,
            stencil_store_op,
            initial_layout,
            final_layout,
        )
        new(vks, bag)
    end
end

struct ImageFormatListCreateInfo <: VulkanStruct
    vks::VkImageFormatListCreateInfo
    bag::BagImageFormatListCreateInfo
    """
    Generic constructor.
    """
    function ImageFormatListCreateInfo(view_formats; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageFormatListCreateInfo(bag_next, _pNext, view_formats)
        vks = VkImageFormatListCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, view_formats)
        new(vks, bag)
    end
end

struct ConformanceVersion <: VulkanStruct
    vks::VkConformanceVersion
    ConformanceVersion(vks::VkConformanceVersion) = new(vks)
end

struct PhysicalDeviceVulkan12Features <: VulkanStruct
    vks::VkPhysicalDeviceVulkan12Features
    bag::BagPhysicalDeviceVulkan12Features
    """
    Generic constructor.
    """
    function PhysicalDeviceVulkan12Features(
        sampler_mirror_clamp_to_edge,
        draw_indirect_count,
        storage_buffer_8_bit_access,
        uniform_and_storage_buffer_8_bit_access,
        storage_push_constant_8,
        shader_buffer_int_64_atomics,
        shader_shared_int_64_atomics,
        shader_float_16,
        shader_int_8,
        descriptor_indexing,
        shader_input_attachment_array_dynamic_indexing,
        shader_uniform_texel_buffer_array_dynamic_indexing,
        shader_storage_texel_buffer_array_dynamic_indexing,
        shader_uniform_buffer_array_non_uniform_indexing,
        shader_sampled_image_array_non_uniform_indexing,
        shader_storage_buffer_array_non_uniform_indexing,
        shader_storage_image_array_non_uniform_indexing,
        shader_input_attachment_array_non_uniform_indexing,
        shader_uniform_texel_buffer_array_non_uniform_indexing,
        shader_storage_texel_buffer_array_non_uniform_indexing,
        descriptor_binding_uniform_buffer_update_after_bind,
        descriptor_binding_sampled_image_update_after_bind,
        descriptor_binding_storage_image_update_after_bind,
        descriptor_binding_storage_buffer_update_after_bind,
        descriptor_binding_uniform_texel_buffer_update_after_bind,
        descriptor_binding_storage_texel_buffer_update_after_bind,
        descriptor_binding_update_unused_while_pending,
        descriptor_binding_partially_bound,
        descriptor_binding_variable_descriptor_count,
        runtime_descriptor_array,
        sampler_filter_minmax,
        scalar_block_layout,
        imageless_framebuffer,
        uniform_buffer_standard_layout,
        shader_subgroup_extended_types,
        separate_depth_stencil_layouts,
        host_query_reset,
        timeline_semaphore,
        buffer_device_address,
        buffer_device_address_capture_replay,
        buffer_device_address_multi_device,
        vulkan_memory_model,
        vulkan_memory_model_device_scope,
        vulkan_memory_model_availability_visibility_chains,
        shader_output_viewport_index,
        shader_output_layer,
        subgroup_broadcast_dynamic_id;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceVulkan12Features(bag_next, _pNext)
        vks = VkPhysicalDeviceVulkan12Features(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            sampler_mirror_clamp_to_edge,
            draw_indirect_count,
            storage_buffer_8_bit_access,
            uniform_and_storage_buffer_8_bit_access,
            storage_push_constant_8,
            shader_buffer_int_64_atomics,
            shader_shared_int_64_atomics,
            shader_float_16,
            shader_int_8,
            descriptor_indexing,
            shader_input_attachment_array_dynamic_indexing,
            shader_uniform_texel_buffer_array_dynamic_indexing,
            shader_storage_texel_buffer_array_dynamic_indexing,
            shader_uniform_buffer_array_non_uniform_indexing,
            shader_sampled_image_array_non_uniform_indexing,
            shader_storage_buffer_array_non_uniform_indexing,
            shader_storage_image_array_non_uniform_indexing,
            shader_input_attachment_array_non_uniform_indexing,
            shader_uniform_texel_buffer_array_non_uniform_indexing,
            shader_storage_texel_buffer_array_non_uniform_indexing,
            descriptor_binding_uniform_buffer_update_after_bind,
            descriptor_binding_sampled_image_update_after_bind,
            descriptor_binding_storage_image_update_after_bind,
            descriptor_binding_storage_buffer_update_after_bind,
            descriptor_binding_uniform_texel_buffer_update_after_bind,
            descriptor_binding_storage_texel_buffer_update_after_bind,
            descriptor_binding_update_unused_while_pending,
            descriptor_binding_partially_bound,
            descriptor_binding_variable_descriptor_count,
            runtime_descriptor_array,
            sampler_filter_minmax,
            scalar_block_layout,
            imageless_framebuffer,
            uniform_buffer_standard_layout,
            shader_subgroup_extended_types,
            separate_depth_stencil_layouts,
            host_query_reset,
            timeline_semaphore,
            buffer_device_address,
            buffer_device_address_capture_replay,
            buffer_device_address_multi_device,
            vulkan_memory_model,
            vulkan_memory_model_device_scope,
            vulkan_memory_model_availability_visibility_chains,
            shader_output_viewport_index,
            shader_output_layer,
            subgroup_broadcast_dynamic_id,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceVulkan11Features <: VulkanStruct
    vks::VkPhysicalDeviceVulkan11Features
    bag::BagPhysicalDeviceVulkan11Features
    """
    Generic constructor.
    """
    function PhysicalDeviceVulkan11Features(
        storage_buffer_16_bit_access,
        uniform_and_storage_buffer_16_bit_access,
        storage_push_constant_16,
        storage_input_output_16,
        multiview,
        multiview_geometry_shader,
        multiview_tessellation_shader,
        variable_pointers_storage_buffer,
        variable_pointers,
        protected_memory,
        sampler_ycbcr_conversion,
        shader_draw_parameters;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceVulkan11Features(bag_next, _pNext)
        vks = VkPhysicalDeviceVulkan11Features(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            storage_buffer_16_bit_access,
            uniform_and_storage_buffer_16_bit_access,
            storage_push_constant_16,
            storage_input_output_16,
            multiview,
            multiview_geometry_shader,
            multiview_tessellation_shader,
            variable_pointers_storage_buffer,
            variable_pointers,
            protected_memory,
            sampler_ycbcr_conversion,
            shader_draw_parameters,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceShaderDrawParametersFeatures <: VulkanStruct
    vks::VkPhysicalDeviceShaderDrawParametersFeatures
    bag::BagPhysicalDeviceShaderDrawParametersFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceShaderDrawParametersFeatures(
        shader_draw_parameters;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceShaderDrawParametersFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceShaderDrawParametersFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            shader_draw_parameters,
        )
        new(vks, bag)
    end
end

struct DescriptorSetLayoutSupport <: ReturnedOnly
    next::Ptr{Cvoid}
    supported::Bool
end

struct PhysicalDeviceExternalSemaphoreInfo <: VulkanStruct
    vks::VkPhysicalDeviceExternalSemaphoreInfo
    bag::BagPhysicalDeviceExternalSemaphoreInfo
    """
    Generic constructor.
    """
    function PhysicalDeviceExternalSemaphoreInfo(handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExternalSemaphoreInfo(bag_next, _pNext)
        vks = VkPhysicalDeviceExternalSemaphoreInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, handle_type)
        new(vks, bag)
    end
end

struct ExportSemaphoreCreateInfo <: VulkanStruct
    vks::VkExportSemaphoreCreateInfo
    bag::BagExportSemaphoreCreateInfo
    """
    Generic constructor.
    """
    function ExportSemaphoreCreateInfo(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExportSemaphoreCreateInfo(bag_next, _pNext)
        vks = VkExportSemaphoreCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct ExportFenceCreateInfo <: VulkanStruct
    vks::VkExportFenceCreateInfo
    bag::BagExportFenceCreateInfo
    """
    Generic constructor.
    """
    function ExportFenceCreateInfo(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExportFenceCreateInfo(bag_next, _pNext)
        vks = VkExportFenceCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct PhysicalDeviceExternalFenceInfo <: VulkanStruct
    vks::VkPhysicalDeviceExternalFenceInfo
    bag::BagPhysicalDeviceExternalFenceInfo
    """
    Generic constructor.
    """
    function PhysicalDeviceExternalFenceInfo(handle_type; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExternalFenceInfo(bag_next, _pNext)
        vks = VkPhysicalDeviceExternalFenceInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, handle_type)
        new(vks, bag)
    end
end

struct ExportMemoryAllocateInfo <: VulkanStruct
    vks::VkExportMemoryAllocateInfo
    bag::BagExportMemoryAllocateInfo
    """
    Generic constructor.
    """
    function ExportMemoryAllocateInfo(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExportMemoryAllocateInfo(bag_next, _pNext)
        vks = VkExportMemoryAllocateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct ExternalMemoryBufferCreateInfo <: VulkanStruct
    vks::VkExternalMemoryBufferCreateInfo
    bag::BagExternalMemoryBufferCreateInfo
    """
    Generic constructor.
    """
    function ExternalMemoryBufferCreateInfo(; next = C_NULL, handle_types = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExternalMemoryBufferCreateInfo(bag_next, _pNext)
        vks = VkExternalMemoryBufferCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if handle_types == 0
            0
        else
            handle_types
        end)
        new(vks, bag)
    end
end

struct ExternalMemoryImageCreateInfo <: VulkanStruct
    vks::VkExternalMemoryImageCreateInfo
    bag::BagExternalMemoryImageCreateInfo
    """
    Generic constructor.
    """
    function ExternalMemoryImageCreateInfo(handle_types; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagExternalMemoryImageCreateInfo(bag_next, _pNext)
        vks = VkExternalMemoryImageCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, handle_types)
        new(vks, bag)
    end
end

struct PhysicalDeviceIDProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
end

struct PhysicalDeviceExternalBufferInfo <: VulkanStruct
    vks::VkPhysicalDeviceExternalBufferInfo
    bag::BagPhysicalDeviceExternalBufferInfo
    """
    Generic constructor.
    """
    function PhysicalDeviceExternalBufferInfo(usage, handle_type; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExternalBufferInfo(bag_next, _pNext)
        vks = VkPhysicalDeviceExternalBufferInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            usage,
            handle_type,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceExternalImageFormatInfo <: VulkanStruct
    vks::VkPhysicalDeviceExternalImageFormatInfo
    bag::BagPhysicalDeviceExternalImageFormatInfo
    """
    Generic constructor.
    """
    function PhysicalDeviceExternalImageFormatInfo(; next = C_NULL, handle_type = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceExternalImageFormatInfo(bag_next, _pNext)
        vks = VkPhysicalDeviceExternalImageFormatInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if handle_type == 0
                0
            else
                handle_type
            end,
        )
        new(vks, bag)
    end
end

struct DescriptorUpdateTemplateCreateInfo <: VulkanStruct
    vks::VkDescriptorUpdateTemplateCreateInfo
    bag::BagDescriptorUpdateTemplateCreateInfo
    """
    Generic constructor.
    """
    function DescriptorUpdateTemplateCreateInfo(
        descriptor_update_entries,
        template_type,
        descriptor_set_layout,
        pipeline_bind_point,
        pipeline_layout,
        set;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pDescriptorUpdateEntries = if descriptor_update_entries == C_NULL
            descriptor_update_entries
        else
            getproperty.(descriptor_update_entries, :vks)
        end
        bag = BagDescriptorUpdateTemplateCreateInfo(
            bag_next,
            _pNext,
            _pDescriptorUpdateEntries,
        )
        vks = VkDescriptorUpdateTemplateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pDescriptorUpdateEntries,
            template_type,
            descriptor_set_layout.handle,
            pipeline_bind_point,
            pipeline_layout.handle,
            set,
        )
        new(vks, bag)
    end
end

struct DescriptorUpdateTemplateEntry <: VulkanStruct
    vks::VkDescriptorUpdateTemplateEntry
    DescriptorUpdateTemplateEntry(vks::VkDescriptorUpdateTemplateEntry) = new(vks)
end

struct SamplerYcbcrConversionImageFormatProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    combined_image_sampler_descriptor_count::UInt32
end

struct PhysicalDeviceSamplerYcbcrConversionFeatures <: VulkanStruct
    vks::VkPhysicalDeviceSamplerYcbcrConversionFeatures
    bag::BagPhysicalDeviceSamplerYcbcrConversionFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceSamplerYcbcrConversionFeatures(
        sampler_ycbcr_conversion;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceSamplerYcbcrConversionFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceSamplerYcbcrConversionFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            sampler_ycbcr_conversion,
        )
        new(vks, bag)
    end
end

struct ImagePlaneMemoryRequirementsInfo <: VulkanStruct
    vks::VkImagePlaneMemoryRequirementsInfo
    bag::BagImagePlaneMemoryRequirementsInfo
    """
    Generic constructor.
    """
    function ImagePlaneMemoryRequirementsInfo(plane_aspect; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImagePlaneMemoryRequirementsInfo(bag_next, _pNext)
        vks = VkImagePlaneMemoryRequirementsInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, plane_aspect)
        new(vks, bag)
    end
end

struct BindImagePlaneMemoryInfo <: VulkanStruct
    vks::VkBindImagePlaneMemoryInfo
    bag::BagBindImagePlaneMemoryInfo
    """
    Generic constructor.
    """
    function BindImagePlaneMemoryInfo(plane_aspect; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBindImagePlaneMemoryInfo(bag_next, _pNext)
        vks = VkBindImagePlaneMemoryInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, plane_aspect)
        new(vks, bag)
    end
end

struct SamplerYcbcrConversionInfo <: VulkanStruct
    vks::VkSamplerYcbcrConversionInfo
    bag::BagSamplerYcbcrConversionInfo
    """
    Generic constructor.
    """
    function SamplerYcbcrConversionInfo(conversion; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSamplerYcbcrConversionInfo(bag_next, _pNext)
        vks = VkSamplerYcbcrConversionInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, conversion.handle)
        new(vks, bag)
    end
end

struct SamplerYcbcrConversionCreateInfo <: VulkanStruct
    vks::VkSamplerYcbcrConversionCreateInfo
    bag::BagSamplerYcbcrConversionCreateInfo
    """
    Generic constructor.
    """
    function SamplerYcbcrConversionCreateInfo(
        format,
        ycbcr_model,
        ycbcr_range,
        components,
        x_chroma_offset,
        y_chroma_offset,
        chroma_filter,
        force_explicit_reconstruction;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSamplerYcbcrConversionCreateInfo(bag_next, _pNext)
        vks = VkSamplerYcbcrConversionCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            format,
            ycbcr_model,
            ycbcr_range,
            components.vks,
            x_chroma_offset,
            y_chroma_offset,
            chroma_filter,
            force_explicit_reconstruction,
        )
        new(vks, bag)
    end
end

struct ProtectedSubmitInfo <: VulkanStruct
    vks::VkProtectedSubmitInfo
    bag::BagProtectedSubmitInfo
    """
    Generic constructor.
    """
    function ProtectedSubmitInfo(protected_submit; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagProtectedSubmitInfo(bag_next, _pNext)
        vks = VkProtectedSubmitInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, protected_submit)
        new(vks, bag)
    end
end

struct DeviceQueueInfo2 <: VulkanStruct
    vks::VkDeviceQueueInfo2
    bag::BagDeviceQueueInfo2
    """
    Generic constructor.
    """
    function DeviceQueueInfo2(queue_family_index, queue_index; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceQueueInfo2(bag_next, _pNext)
        vks = VkDeviceQueueInfo2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            queue_family_index,
            queue_index,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceProtectedMemoryProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    protected_no_fault::Bool
end

struct PhysicalDeviceProtectedMemoryFeatures <: VulkanStruct
    vks::VkPhysicalDeviceProtectedMemoryFeatures
    bag::BagPhysicalDeviceProtectedMemoryFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceProtectedMemoryFeatures(protected_memory; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceProtectedMemoryFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceProtectedMemoryFeatures(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, protected_memory)
        new(vks, bag)
    end
end

struct PhysicalDeviceVariablePointersFeatures <: VulkanStruct
    vks::VkPhysicalDeviceVariablePointersFeatures
    bag::BagPhysicalDeviceVariablePointersFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceVariablePointersFeatures(
        variable_pointers_storage_buffer,
        variable_pointers;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceVariablePointersFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceVariablePointersFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            variable_pointers_storage_buffer,
            variable_pointers,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceMultiviewProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
end

struct PhysicalDeviceMultiviewFeatures <: VulkanStruct
    vks::VkPhysicalDeviceMultiviewFeatures
    bag::BagPhysicalDeviceMultiviewFeatures
    """
    Generic constructor.
    """
    function PhysicalDeviceMultiviewFeatures(
        multiview,
        multiview_geometry_shader,
        multiview_tessellation_shader;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceMultiviewFeatures(bag_next, _pNext)
        vks = VkPhysicalDeviceMultiviewFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            multiview,
            multiview_geometry_shader,
            multiview_tessellation_shader,
        )
        new(vks, bag)
    end
end

struct RenderPassMultiviewCreateInfo <: VulkanStruct
    vks::VkRenderPassMultiviewCreateInfo
    bag::BagRenderPassMultiviewCreateInfo
    """
    Generic constructor.
    """
    function RenderPassMultiviewCreateInfo(
        view_masks,
        view_offsets,
        correlation_masks;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        view_masks = convert(Array{UInt32}, view_masks)
        view_offsets = convert(Array{Int32}, view_offsets)
        correlation_masks = convert(Array{UInt32}, correlation_masks)
        bag = BagRenderPassMultiviewCreateInfo(
            bag_next,
            _pNext,
            view_masks,
            view_offsets,
            correlation_masks,
        )
        vks = VkRenderPassMultiviewCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            view_masks,
            view_offsets,
            correlation_masks,
        )
        new(vks, bag)
    end
end

struct PipelineTessellationDomainOriginStateCreateInfo <: VulkanStruct
    vks::VkPipelineTessellationDomainOriginStateCreateInfo
    bag::BagPipelineTessellationDomainOriginStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineTessellationDomainOriginStateCreateInfo(domain_origin; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineTessellationDomainOriginStateCreateInfo(bag_next, _pNext)
        vks = VkPipelineTessellationDomainOriginStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            domain_origin,
        )
        new(vks, bag)
    end
end

struct ImageViewUsageCreateInfo <: VulkanStruct
    vks::VkImageViewUsageCreateInfo
    bag::BagImageViewUsageCreateInfo
    """
    Generic constructor.
    """
    function ImageViewUsageCreateInfo(usage; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageViewUsageCreateInfo(bag_next, _pNext)
        vks = VkImageViewUsageCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, usage)
        new(vks, bag)
    end
end

struct RenderPassInputAttachmentAspectCreateInfo <: VulkanStruct
    vks::VkRenderPassInputAttachmentAspectCreateInfo
    bag::BagRenderPassInputAttachmentAspectCreateInfo
    """
    Generic constructor.
    """
    function RenderPassInputAttachmentAspectCreateInfo(aspect_references; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAspectReferences = if aspect_references == C_NULL
            aspect_references
        else
            getproperty.(aspect_references, :vks)
        end
        bag = BagRenderPassInputAttachmentAspectCreateInfo(
            bag_next,
            _pNext,
            _pAspectReferences,
        )
        vks = VkRenderPassInputAttachmentAspectCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pAspectReferences,
        )
        new(vks, bag)
    end
end

struct InputAttachmentAspectReference <: VulkanStruct
    vks::VkInputAttachmentAspectReference
    InputAttachmentAspectReference(vks::VkInputAttachmentAspectReference) = new(vks)
end

struct PhysicalDeviceSparseImageFormatInfo2 <: VulkanStruct
    vks::VkPhysicalDeviceSparseImageFormatInfo2
    bag::BagPhysicalDeviceSparseImageFormatInfo2
    """
    Generic constructor.
    """
    function PhysicalDeviceSparseImageFormatInfo2(
        format,
        type,
        samples,
        usage,
        tiling;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceSparseImageFormatInfo2(bag_next, _pNext)
        vks = VkPhysicalDeviceSparseImageFormatInfo2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            format,
            type,
            samples,
            usage,
            tiling,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceImageFormatInfo2 <: VulkanStruct
    vks::VkPhysicalDeviceImageFormatInfo2
    bag::BagPhysicalDeviceImageFormatInfo2
    """
    Generic constructor.
    """
    function PhysicalDeviceImageFormatInfo2(
        format,
        type,
        tiling,
        usage;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceImageFormatInfo2(bag_next, _pNext)
        vks = VkPhysicalDeviceImageFormatInfo2(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            format,
            type,
            tiling,
            usage,
            if flags == 0
                0
            else
                flags
            end,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceFeatures2 <: VulkanStruct
    vks::VkPhysicalDeviceFeatures2
    bag::BagPhysicalDeviceFeatures2
    """
    Generic constructor.
    """
    function PhysicalDeviceFeatures2(features; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDeviceFeatures2(bag_next, _pNext)
        vks = VkPhysicalDeviceFeatures2(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, features.vks)
        new(vks, bag)
    end
end

struct ImageSparseMemoryRequirementsInfo2 <: VulkanStruct
    vks::VkImageSparseMemoryRequirementsInfo2
    bag::BagImageSparseMemoryRequirementsInfo2
    """
    Generic constructor.
    """
    function ImageSparseMemoryRequirementsInfo2(image; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageSparseMemoryRequirementsInfo2(bag_next, _pNext)
        vks = VkImageSparseMemoryRequirementsInfo2(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, image.handle)
        new(vks, bag)
    end
end

struct ImageMemoryRequirementsInfo2 <: VulkanStruct
    vks::VkImageMemoryRequirementsInfo2
    bag::BagImageMemoryRequirementsInfo2
    """
    Generic constructor.
    """
    function ImageMemoryRequirementsInfo2(image; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageMemoryRequirementsInfo2(bag_next, _pNext)
        vks = VkImageMemoryRequirementsInfo2(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, image.handle)
        new(vks, bag)
    end
end

struct BufferMemoryRequirementsInfo2 <: VulkanStruct
    vks::VkBufferMemoryRequirementsInfo2
    bag::BagBufferMemoryRequirementsInfo2
    """
    Generic constructor.
    """
    function BufferMemoryRequirementsInfo2(buffer; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferMemoryRequirementsInfo2(bag_next, _pNext)
        vks = VkBufferMemoryRequirementsInfo2(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, buffer.handle)
        new(vks, bag)
    end
end

struct DeviceGroupDeviceCreateInfo <: VulkanStruct
    vks::VkDeviceGroupDeviceCreateInfo
    bag::BagDeviceGroupDeviceCreateInfo
    """
    Generic constructor.
    """
    function DeviceGroupDeviceCreateInfo(physical_devices; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pPhysicalDevices = if physical_devices == C_NULL
            physical_devices
        else
            getproperty.(physical_devices, :handle)
        end
        bag = BagDeviceGroupDeviceCreateInfo(bag_next, _pNext, _pPhysicalDevices)
        vks = VkDeviceGroupDeviceCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, _pPhysicalDevices)
        new(vks, bag)
    end
end

struct PhysicalDeviceGroupProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    physical_device_count::UInt32
    physical_devices::NTuple{32,VkPhysicalDevice}
    subset_allocation::Bool
end

struct BindImageMemoryDeviceGroupInfo <: VulkanStruct
    vks::VkBindImageMemoryDeviceGroupInfo
    bag::BagBindImageMemoryDeviceGroupInfo
    """
    Generic constructor.
    """
    function BindImageMemoryDeviceGroupInfo(
        device_indices,
        split_instance_bind_regions;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        device_indices = convert(Array{UInt32}, device_indices)
        _pSplitInstanceBindRegions = if split_instance_bind_regions == C_NULL
            split_instance_bind_regions
        else
            getproperty.(split_instance_bind_regions, :vks)
        end
        bag = BagBindImageMemoryDeviceGroupInfo(
            bag_next,
            _pNext,
            device_indices,
            _pSplitInstanceBindRegions,
        )
        vks = VkBindImageMemoryDeviceGroupInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            device_indices,
            _pSplitInstanceBindRegions,
        )
        new(vks, bag)
    end
end

struct BindBufferMemoryDeviceGroupInfo <: VulkanStruct
    vks::VkBindBufferMemoryDeviceGroupInfo
    bag::BagBindBufferMemoryDeviceGroupInfo
    """
    Generic constructor.
    """
    function BindBufferMemoryDeviceGroupInfo(device_indices; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        device_indices = convert(Array{UInt32}, device_indices)
        bag = BagBindBufferMemoryDeviceGroupInfo(bag_next, _pNext, device_indices)
        vks = VkBindBufferMemoryDeviceGroupInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, device_indices)
        new(vks, bag)
    end
end

struct DeviceGroupBindSparseInfo <: VulkanStruct
    vks::VkDeviceGroupBindSparseInfo
    bag::BagDeviceGroupBindSparseInfo
    """
    Generic constructor.
    """
    function DeviceGroupBindSparseInfo(
        resource_device_index,
        memory_device_index;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceGroupBindSparseInfo(bag_next, _pNext)
        vks = VkDeviceGroupBindSparseInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            resource_device_index,
            memory_device_index,
        )
        new(vks, bag)
    end
end

struct DeviceGroupSubmitInfo <: VulkanStruct
    vks::VkDeviceGroupSubmitInfo
    bag::BagDeviceGroupSubmitInfo
    """
    Generic constructor.
    """
    function DeviceGroupSubmitInfo(
        wait_semaphore_device_indices,
        command_buffer_device_masks,
        signal_semaphore_device_indices;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        wait_semaphore_device_indices =
            convert(Array{UInt32}, wait_semaphore_device_indices)
        command_buffer_device_masks = convert(Array{UInt32}, command_buffer_device_masks)
        signal_semaphore_device_indices =
            convert(Array{UInt32}, signal_semaphore_device_indices)
        bag = BagDeviceGroupSubmitInfo(
            bag_next,
            _pNext,
            wait_semaphore_device_indices,
            command_buffer_device_masks,
            signal_semaphore_device_indices,
        )
        vks = VkDeviceGroupSubmitInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            wait_semaphore_device_indices,
            command_buffer_device_masks,
            signal_semaphore_device_indices,
        )
        new(vks, bag)
    end
end

struct DeviceGroupCommandBufferBeginInfo <: VulkanStruct
    vks::VkDeviceGroupCommandBufferBeginInfo
    bag::BagDeviceGroupCommandBufferBeginInfo
    """
    Generic constructor.
    """
    function DeviceGroupCommandBufferBeginInfo(device_mask; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagDeviceGroupCommandBufferBeginInfo(bag_next, _pNext)
        vks = VkDeviceGroupCommandBufferBeginInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, device_mask)
        new(vks, bag)
    end
end

struct DeviceGroupRenderPassBeginInfo <: VulkanStruct
    vks::VkDeviceGroupRenderPassBeginInfo
    bag::BagDeviceGroupRenderPassBeginInfo
    """
    Generic constructor.
    """
    function DeviceGroupRenderPassBeginInfo(device_mask, device_render_areas; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pDeviceRenderAreas = if device_render_areas == C_NULL
            device_render_areas
        else
            getproperty.(device_render_areas, :vks)
        end
        bag = BagDeviceGroupRenderPassBeginInfo(bag_next, _pNext, _pDeviceRenderAreas)
        vks = VkDeviceGroupRenderPassBeginInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            device_mask,
            _pDeviceRenderAreas,
        )
        new(vks, bag)
    end
end

struct MemoryAllocateFlagsInfo <: VulkanStruct
    vks::VkMemoryAllocateFlagsInfo
    bag::BagMemoryAllocateFlagsInfo
    """
    Generic constructor.
    """
    function MemoryAllocateFlagsInfo(device_mask; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryAllocateFlagsInfo(bag_next, _pNext)
        vks = VkMemoryAllocateFlagsInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, device_mask)
        new(vks, bag)
    end
end

struct MemoryDedicatedAllocateInfo <: VulkanStruct
    vks::VkMemoryDedicatedAllocateInfo
    bag::BagMemoryDedicatedAllocateInfo
    """
    Generic constructor.
    """
    function MemoryDedicatedAllocateInfo(; next = C_NULL, image = C_NULL, buffer = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryDedicatedAllocateInfo(bag_next, _pNext)
        vks = VkMemoryDedicatedAllocateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if image == C_NULL
                C_NULL
            else
                image.handle
            end,
            if buffer == C_NULL
                C_NULL
            else
                buffer.handle
            end,
        )
        new(vks, bag)
    end
end

struct MemoryDedicatedRequirements <: ReturnedOnly
    next::Ptr{Cvoid}
    prefers_dedicated_allocation::Bool
    requires_dedicated_allocation::Bool
end

struct PhysicalDevice16BitStorageFeatures <: VulkanStruct
    vks::VkPhysicalDevice16BitStorageFeatures
    bag::BagPhysicalDevice16BitStorageFeatures
    """
    Generic constructor.
    """
    function PhysicalDevice16BitStorageFeatures(
        storage_buffer_16_bit_access,
        uniform_and_storage_buffer_16_bit_access,
        storage_push_constant_16,
        storage_input_output_16;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPhysicalDevice16BitStorageFeatures(bag_next, _pNext)
        vks = VkPhysicalDevice16BitStorageFeatures(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            storage_buffer_16_bit_access,
            uniform_and_storage_buffer_16_bit_access,
            storage_push_constant_16,
            storage_input_output_16,
        )
        new(vks, bag)
    end
end

struct BindImageMemoryInfo <: VulkanStruct
    vks::VkBindImageMemoryInfo
    bag::BagBindImageMemoryInfo
    """
    Generic constructor.
    """
    function BindImageMemoryInfo(image, memory, memory_offset; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBindImageMemoryInfo(bag_next, _pNext)
        vks = VkBindImageMemoryInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            image.handle,
            memory.handle,
            memory_offset,
        )
        new(vks, bag)
    end
end

struct BindBufferMemoryInfo <: VulkanStruct
    vks::VkBindBufferMemoryInfo
    bag::BagBindBufferMemoryInfo
    """
    Generic constructor.
    """
    function BindBufferMemoryInfo(buffer, memory, memory_offset; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBindBufferMemoryInfo(bag_next, _pNext)
        vks = VkBindBufferMemoryInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            buffer.handle,
            memory.handle,
            memory_offset,
        )
        new(vks, bag)
    end
end

struct RenderPassBeginInfo <: VulkanStruct
    vks::VkRenderPassBeginInfo
    bag::BagRenderPassBeginInfo
    """
    Generic constructor.
    """
    function RenderPassBeginInfo(
        render_pass,
        framebuffer,
        render_area,
        clear_values;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pClearValues = if clear_values == C_NULL
            clear_values
        else
            getproperty.(clear_values, :vks)
        end
        bag = BagRenderPassBeginInfo(bag_next, _pNext, _pClearValues)
        vks = VkRenderPassBeginInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            render_pass.handle,
            framebuffer.handle,
            render_area.vks,
            _pClearValues,
        )
        new(vks, bag)
    end
end

struct ImageResolve <: VulkanStruct
    vks::VkImageResolve
    ImageResolve(vks::VkImageResolve) = new(vks)
end

struct ImageCopy <: VulkanStruct
    vks::VkImageCopy
    ImageCopy(vks::VkImageCopy) = new(vks)
end

struct ImageBlit <: VulkanStruct
    vks::VkImageBlit
    ImageBlit(vks::VkImageBlit) = new(vks)
end

struct ClearRect <: VulkanStruct
    vks::VkClearRect
    ClearRect(vks::VkClearRect) = new(vks)
end

struct ClearAttachment <: VulkanStruct
    vks::VkClearAttachment
    ClearAttachment(vks::VkClearAttachment) = new(vks)
end

struct ClearValue <: VulkanStruct
    vks::VkClearValue
    ClearValue(vks::VkClearValue) = new(vks)
end

struct ClearDepthStencilValue <: VulkanStruct
    vks::VkClearDepthStencilValue
    ClearDepthStencilValue(vks::VkClearDepthStencilValue) = new(vks)
end

struct ClearColorValue <: VulkanStruct
    vks::VkClearColorValue
    ClearColorValue(vks::VkClearColorValue) = new(vks)
end

struct BufferImageCopy <: VulkanStruct
    vks::VkBufferImageCopy
    BufferImageCopy(vks::VkBufferImageCopy) = new(vks)
end

struct ImageSubresourceLayers <: VulkanStruct
    vks::VkImageSubresourceLayers
    ImageSubresourceLayers(vks::VkImageSubresourceLayers) = new(vks)
end

struct BufferCopy <: VulkanStruct
    vks::VkBufferCopy
    BufferCopy(vks::VkBufferCopy) = new(vks)
end

struct CommandBufferBeginInfo <: VulkanStruct
    vks::VkCommandBufferBeginInfo
    bag::BagCommandBufferBeginInfo
    """
    Generic constructor.
    """
    function CommandBufferBeginInfo(; next = C_NULL, flags = 0, inheritance_info = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pInheritanceInfo = if inheritance_info == C_NULL
            inheritance_info
        else
            Ref(inheritance_info.vks)
        end
        bag = BagCommandBufferBeginInfo(
            bag_next,
            _pNext,
            if inheritance_info == C_NULL
                EmptyBag
            else
                inheritance_info.bag
            end,
            _pInheritanceInfo,
        )
        vks = VkCommandBufferBeginInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            if _pInheritanceInfo == C_NULL
                C_NULL
            else
                _pInheritanceInfo
            end,
        )
        new(vks, bag)
    end
end

struct CommandBufferInheritanceInfo <: VulkanStruct
    vks::VkCommandBufferInheritanceInfo
    bag::BagCommandBufferInheritanceInfo
    """
    Generic constructor.
    """
    function CommandBufferInheritanceInfo(
        subpass,
        occlusion_query_enable;
        next = C_NULL,
        render_pass = C_NULL,
        framebuffer = C_NULL,
        query_flags = 0,
        pipeline_statistics = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCommandBufferInheritanceInfo(bag_next, _pNext)
        vks = VkCommandBufferInheritanceInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if render_pass == C_NULL
                C_NULL
            else
                render_pass.handle
            end,
            subpass,
            if framebuffer == C_NULL
                C_NULL
            else
                framebuffer.handle
            end,
            occlusion_query_enable,
            if query_flags == 0
                0
            else
                query_flags
            end,
            if pipeline_statistics == C_NULL
                C_NULL
            else
                pipeline_statistics
            end,
        )
        new(vks, bag)
    end
end

struct CommandBufferAllocateInfo <: VulkanStruct
    vks::VkCommandBufferAllocateInfo
    bag::BagCommandBufferAllocateInfo
    """
    Generic constructor.
    """
    function CommandBufferAllocateInfo(
        command_pool,
        level,
        command_buffer_count;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCommandBufferAllocateInfo(bag_next, _pNext)
        vks = VkCommandBufferAllocateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            command_pool.handle,
            level,
            command_buffer_count,
        )
        new(vks, bag)
    end
end

struct CommandPoolCreateInfo <: VulkanStruct
    vks::VkCommandPoolCreateInfo
    bag::BagCommandPoolCreateInfo
    """
    Generic constructor.
    """
    function CommandPoolCreateInfo(queue_family_index; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCommandPoolCreateInfo(bag_next, _pNext)
        vks = VkCommandPoolCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, queue_family_index)
        new(vks, bag)
    end
end

struct RenderPassCreateInfo <: VulkanStruct
    vks::VkRenderPassCreateInfo
    bag::BagRenderPassCreateInfo
    """
    Generic constructor.
    """
    function RenderPassCreateInfo(
        attachments,
        subpasses,
        dependencies;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachments = if attachments == C_NULL
            attachments
        else
            getproperty.(attachments, :vks)
        end
        _pSubpasses = if subpasses == C_NULL
            subpasses
        else
            getproperty.(subpasses, :vks)
        end
        _pDependencies = if dependencies == C_NULL
            dependencies
        else
            getproperty.(dependencies, :vks)
        end
        bag = BagRenderPassCreateInfo(
            bag_next,
            _pNext,
            _pAttachments,
            getproperty.(subpasses, :bag),
            _pSubpasses,
            _pDependencies,
        )
        vks = VkRenderPassCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pAttachments,
            _pSubpasses,
            _pDependencies,
        )
        new(vks, bag)
    end
end

struct SubpassDependency <: VulkanStruct
    vks::VkSubpassDependency
    SubpassDependency(vks::VkSubpassDependency) = new(vks)
end

struct SubpassDescription <: VulkanStruct
    vks::VkSubpassDescription
    bag::BagSubpassDescription
    """
    Generic constructor.
    """
    function SubpassDescription(
        pipeline_bind_point,
        input_attachments,
        color_attachments,
        preserve_attachments;
        flags = 0,
        resolve_attachments = C_NULL,
        depth_stencil_attachment = C_NULL,
    )
        _pInputAttachments = if input_attachments == C_NULL
            input_attachments
        else
            getproperty.(input_attachments, :vks)
        end
        _pColorAttachments = if color_attachments == C_NULL
            color_attachments
        else
            getproperty.(color_attachments, :vks)
        end
        _pResolveAttachments = if resolve_attachments == C_NULL
            resolve_attachments
        else
            getproperty.(resolve_attachments, :vks)
        end
        _pDepthStencilAttachment = if depth_stencil_attachment == C_NULL
            depth_stencil_attachment
        else
            Ref(depth_stencil_attachment.vks)
        end
        preserve_attachments = convert(Array{UInt32}, preserve_attachments)
        bag = BagSubpassDescription(
            _pInputAttachments,
            _pColorAttachments,
            _pResolveAttachments,
            _pDepthStencilAttachment,
            preserve_attachments,
        )
        vks = VkSubpassDescription(
            if flags == 0
                0
            else
                flags
            end,
            pipeline_bind_point,
            _pInputAttachments,
            _pColorAttachments,
            if _pResolveAttachments == C_NULL
                C_NULL
            else
                _pResolveAttachments
            end,
            if _pDepthStencilAttachment == C_NULL
                C_NULL
            else
                _pDepthStencilAttachment
            end,
            preserve_attachments,
        )
        new(vks, bag)
    end
end

struct FramebufferCreateInfo <: VulkanStruct
    vks::VkFramebufferCreateInfo
    bag::BagFramebufferCreateInfo
    """
    Generic constructor.
    """
    function FramebufferCreateInfo(
        render_pass,
        attachments,
        width,
        height,
        layers;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachments = if attachments == C_NULL
            attachments
        else
            getproperty.(attachments, :handle)
        end
        bag = BagFramebufferCreateInfo(bag_next, _pNext, _pAttachments)
        vks = VkFramebufferCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            render_pass.handle,
            _pAttachments,
            width,
            height,
            layers,
        )
        new(vks, bag)
    end
end

struct AttachmentReference <: VulkanStruct
    vks::VkAttachmentReference
    AttachmentReference(vks::VkAttachmentReference) = new(vks)
end

struct AttachmentDescription <: VulkanStruct
    vks::VkAttachmentDescription
    AttachmentDescription(vks::VkAttachmentDescription) = new(vks)
end

struct WriteDescriptorSet <: VulkanStruct
    vks::VkWriteDescriptorSet
    bag::BagWriteDescriptorSet
    """
    Generic constructor.
    """
    function WriteDescriptorSet(
        dst_set,
        dst_binding,
        dst_array_element,
        descriptor_type,
        image_info,
        buffer_info,
        texel_buffer_view;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pImageInfo = if image_info == C_NULL
            image_info
        else
            getproperty.(image_info, :vks)
        end
        _pBufferInfo = if buffer_info == C_NULL
            buffer_info
        else
            getproperty.(buffer_info, :vks)
        end
        _pTexelBufferView = if texel_buffer_view == C_NULL
            texel_buffer_view
        else
            getproperty.(texel_buffer_view, :handle)
        end
        bag = BagWriteDescriptorSet(
            bag_next,
            _pNext,
            _pImageInfo,
            _pBufferInfo,
            _pTexelBufferView,
        )
        vks = VkWriteDescriptorSet(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            dst_set.handle,
            dst_binding,
            dst_array_element,
            descriptor_type,
            _pImageInfo,
            _pBufferInfo,
            _pTexelBufferView,
        )
        new(vks, bag)
    end
end

struct DescriptorSetLayoutCreateInfo <: VulkanStruct
    vks::VkDescriptorSetLayoutCreateInfo
    bag::BagDescriptorSetLayoutCreateInfo
    """
    Generic constructor.
    """
    function DescriptorSetLayoutCreateInfo(bindings; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pBindings = if bindings == C_NULL
            bindings
        else
            getproperty.(bindings, :vks)
        end
        bag = BagDescriptorSetLayoutCreateInfo(
            bag_next,
            _pNext,
            getproperty.(bindings, :bag),
            _pBindings,
        )
        vks = VkDescriptorSetLayoutCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _pBindings)
        new(vks, bag)
    end
end

struct DescriptorSetLayoutBinding <: VulkanStruct
    vks::VkDescriptorSetLayoutBinding
    bag::BagDescriptorSetLayoutBinding
    """
    Generic constructor.
    """
    function DescriptorSetLayoutBinding(
        binding,
        descriptor_type,
        stage_flags;
        immutable_samplers = C_NULL,
    )
        _pImmutableSamplers = if immutable_samplers == C_NULL
            immutable_samplers
        else
            getproperty.(immutable_samplers, :handle)
        end
        bag = BagDescriptorSetLayoutBinding(_pImmutableSamplers)
        vks = VkDescriptorSetLayoutBinding(
            binding,
            descriptor_type,
            stage_flags,
            if _pImmutableSamplers == C_NULL
                C_NULL
            else
                _pImmutableSamplers
            end,
        )
        new(vks, bag)
    end
end

struct DescriptorSetAllocateInfo <: VulkanStruct
    vks::VkDescriptorSetAllocateInfo
    bag::BagDescriptorSetAllocateInfo
    """
    Generic constructor.
    """
    function DescriptorSetAllocateInfo(descriptor_pool, set_layouts; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pSetLayouts = if set_layouts == C_NULL
            set_layouts
        else
            getproperty.(set_layouts, :handle)
        end
        bag = BagDescriptorSetAllocateInfo(bag_next, _pNext, _pSetLayouts)
        vks = VkDescriptorSetAllocateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            descriptor_pool.handle,
            _pSetLayouts,
        )
        new(vks, bag)
    end
end

struct DescriptorPoolCreateInfo <: VulkanStruct
    vks::VkDescriptorPoolCreateInfo
    bag::BagDescriptorPoolCreateInfo
    """
    Generic constructor.
    """
    function DescriptorPoolCreateInfo(max_sets, pool_sizes; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pPoolSizes = if pool_sizes == C_NULL
            pool_sizes
        else
            getproperty.(pool_sizes, :vks)
        end
        bag = BagDescriptorPoolCreateInfo(bag_next, _pNext, _pPoolSizes)
        vks = VkDescriptorPoolCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            max_sets,
            _pPoolSizes,
        )
        new(vks, bag)
    end
end

struct DescriptorPoolSize <: VulkanStruct
    vks::VkDescriptorPoolSize
    DescriptorPoolSize(vks::VkDescriptorPoolSize) = new(vks)
end

struct DescriptorImageInfo <: VulkanStruct
    vks::VkDescriptorImageInfo
    DescriptorImageInfo(vks::VkDescriptorImageInfo) = new(vks)
end

struct DescriptorBufferInfo <: VulkanStruct
    vks::VkDescriptorBufferInfo
    DescriptorBufferInfo(vks::VkDescriptorBufferInfo) = new(vks)
end

struct CopyDescriptorSet <: VulkanStruct
    vks::VkCopyDescriptorSet
    bag::BagCopyDescriptorSet
    """
    Generic constructor.
    """
    function CopyDescriptorSet(
        src_set,
        src_binding,
        src_array_element,
        dst_set,
        dst_binding,
        dst_array_element,
        descriptor_count;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagCopyDescriptorSet(bag_next, _pNext)
        vks = VkCopyDescriptorSet(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_set.handle,
            src_binding,
            src_array_element,
            dst_set.handle,
            dst_binding,
            dst_array_element,
            descriptor_count,
        )
        new(vks, bag)
    end
end

struct SamplerCreateInfo <: VulkanStruct
    vks::VkSamplerCreateInfo
    bag::BagSamplerCreateInfo
    """
    Generic constructor.
    """
    function SamplerCreateInfo(
        mag_filter,
        min_filter,
        mipmap_mode,
        address_mode_u,
        address_mode_v,
        address_mode_w,
        mip_lod_bias,
        anisotropy_enable,
        max_anisotropy,
        compare_enable,
        compare_op,
        min_lod,
        max_lod,
        border_color,
        unnormalized_coordinates;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSamplerCreateInfo(bag_next, _pNext)
        vks = VkSamplerCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            mag_filter,
            min_filter,
            mipmap_mode,
            address_mode_u,
            address_mode_v,
            address_mode_w,
            mip_lod_bias,
            anisotropy_enable,
            max_anisotropy,
            compare_enable,
            compare_op,
            min_lod,
            max_lod,
            border_color,
            unnormalized_coordinates,
        )
        new(vks, bag)
    end
end

struct PipelineLayoutCreateInfo <: VulkanStruct
    vks::VkPipelineLayoutCreateInfo
    bag::BagPipelineLayoutCreateInfo
    """
    Generic constructor.
    """
    function PipelineLayoutCreateInfo(
        set_layouts,
        push_constant_ranges;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pSetLayouts = if set_layouts == C_NULL
            set_layouts
        else
            getproperty.(set_layouts, :handle)
        end
        _pPushConstantRanges = if push_constant_ranges == C_NULL
            push_constant_ranges
        else
            getproperty.(push_constant_ranges, :vks)
        end
        bag = BagPipelineLayoutCreateInfo(
            bag_next,
            _pNext,
            _pSetLayouts,
            _pPushConstantRanges,
        )
        vks = VkPipelineLayoutCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pSetLayouts,
            _pPushConstantRanges,
        )
        new(vks, bag)
    end
end

struct PushConstantRange <: VulkanStruct
    vks::VkPushConstantRange
    PushConstantRange(vks::VkPushConstantRange) = new(vks)
end

struct GraphicsPipelineCreateInfo <: VulkanStruct
    vks::VkGraphicsPipelineCreateInfo
    bag::BagGraphicsPipelineCreateInfo
    """
    Generic constructor.
    """
    function GraphicsPipelineCreateInfo(
        stages,
        rasterization_state,
        layout,
        render_pass,
        subpass,
        base_pipeline_index;
        next = C_NULL,
        flags = 0,
        vertex_input_state = C_NULL,
        input_assembly_state = C_NULL,
        tessellation_state = C_NULL,
        viewport_state = C_NULL,
        multisample_state = C_NULL,
        depth_stencil_state = C_NULL,
        color_blend_state = C_NULL,
        dynamic_state = C_NULL,
        base_pipeline_handle = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pStages = if stages == C_NULL
            stages
        else
            getproperty.(stages, :vks)
        end
        _pVertexInputState = if vertex_input_state == C_NULL
            vertex_input_state
        else
            Ref(vertex_input_state.vks)
        end
        _pInputAssemblyState = if input_assembly_state == C_NULL
            input_assembly_state
        else
            Ref(input_assembly_state.vks)
        end
        _pTessellationState = if tessellation_state == C_NULL
            tessellation_state
        else
            Ref(tessellation_state.vks)
        end
        _pViewportState = if viewport_state == C_NULL
            viewport_state
        else
            Ref(viewport_state.vks)
        end
        _pRasterizationState = if rasterization_state == C_NULL
            rasterization_state
        else
            Ref(rasterization_state.vks)
        end
        _pMultisampleState = if multisample_state == C_NULL
            multisample_state
        else
            Ref(multisample_state.vks)
        end
        _pDepthStencilState = if depth_stencil_state == C_NULL
            depth_stencil_state
        else
            Ref(depth_stencil_state.vks)
        end
        _pColorBlendState = if color_blend_state == C_NULL
            color_blend_state
        else
            Ref(color_blend_state.vks)
        end
        _pDynamicState = if dynamic_state == C_NULL
            dynamic_state
        else
            Ref(dynamic_state.vks)
        end
        bag = BagGraphicsPipelineCreateInfo(
            bag_next,
            _pNext,
            getproperty.(stages, :bag),
            _pStages,
            if vertex_input_state == C_NULL
                EmptyBag
            else
                vertex_input_state.bag
            end,
            _pVertexInputState,
            if input_assembly_state == C_NULL
                EmptyBag
            else
                input_assembly_state.bag
            end,
            _pInputAssemblyState,
            if tessellation_state == C_NULL
                EmptyBag
            else
                tessellation_state.bag
            end,
            _pTessellationState,
            if viewport_state == C_NULL
                EmptyBag
            else
                viewport_state.bag
            end,
            _pViewportState,
            rasterization_state.bag,
            _pRasterizationState,
            if multisample_state == C_NULL
                EmptyBag
            else
                multisample_state.bag
            end,
            _pMultisampleState,
            if depth_stencil_state == C_NULL
                EmptyBag
            else
                depth_stencil_state.bag
            end,
            _pDepthStencilState,
            if color_blend_state == C_NULL
                EmptyBag
            else
                color_blend_state.bag
            end,
            _pColorBlendState,
            if dynamic_state == C_NULL
                EmptyBag
            else
                dynamic_state.bag
            end,
            _pDynamicState,
        )
        vks = VkGraphicsPipelineCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pStages,
            if _pVertexInputState == C_NULL
                C_NULL
            else
                _pVertexInputState
            end,
            if _pInputAssemblyState == C_NULL
                C_NULL
            else
                _pInputAssemblyState
            end,
            if _pTessellationState == C_NULL
                C_NULL
            else
                _pTessellationState
            end,
            if _pViewportState == C_NULL
                C_NULL
            else
                _pViewportState
            end,
            _pRasterizationState,
            if _pMultisampleState == C_NULL
                C_NULL
            else
                _pMultisampleState
            end,
            if _pDepthStencilState == C_NULL
                C_NULL
            else
                _pDepthStencilState
            end,
            if _pColorBlendState == C_NULL
                C_NULL
            else
                _pColorBlendState
            end,
            if _pDynamicState == C_NULL
                C_NULL
            else
                _pDynamicState
            end,
            layout.handle,
            render_pass.handle,
            subpass,
            if base_pipeline_handle == C_NULL
                C_NULL
            else
                base_pipeline_handle.handle
            end,
            base_pipeline_index,
        )
        new(vks, bag)
    end
end

struct PipelineDynamicStateCreateInfo <: VulkanStruct
    vks::VkPipelineDynamicStateCreateInfo
    bag::BagPipelineDynamicStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineDynamicStateCreateInfo(dynamic_states; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineDynamicStateCreateInfo(bag_next, _pNext, dynamic_states)
        vks = VkPipelineDynamicStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            dynamic_states,
        )
        new(vks, bag)
    end
end

struct PipelineColorBlendStateCreateInfo <: VulkanStruct
    vks::VkPipelineColorBlendStateCreateInfo
    bag::BagPipelineColorBlendStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineColorBlendStateCreateInfo(
        logic_op_enable,
        logic_op,
        attachments,
        blend_constants;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pAttachments = if attachments == C_NULL
            attachments
        else
            getproperty.(attachments, :vks)
        end
        bag = BagPipelineColorBlendStateCreateInfo(bag_next, _pNext, _pAttachments)
        vks = VkPipelineColorBlendStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            logic_op_enable,
            logic_op,
            _pAttachments,
            blend_constants,
        )
        new(vks, bag)
    end
end

struct PipelineColorBlendAttachmentState <: VulkanStruct
    vks::VkPipelineColorBlendAttachmentState
    PipelineColorBlendAttachmentState(vks::VkPipelineColorBlendAttachmentState) = new(vks)
end

struct PipelineDepthStencilStateCreateInfo <: VulkanStruct
    vks::VkPipelineDepthStencilStateCreateInfo
    bag::BagPipelineDepthStencilStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineDepthStencilStateCreateInfo(
        depth_test_enable,
        depth_write_enable,
        depth_compare_op,
        depth_bounds_test_enable,
        stencil_test_enable,
        front,
        back,
        min_depth_bounds,
        max_depth_bounds;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineDepthStencilStateCreateInfo(bag_next, _pNext)
        vks = VkPipelineDepthStencilStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            depth_test_enable,
            depth_write_enable,
            depth_compare_op,
            depth_bounds_test_enable,
            stencil_test_enable,
            front.vks,
            back.vks,
            min_depth_bounds,
            max_depth_bounds,
        )
        new(vks, bag)
    end
end

struct StencilOpState <: VulkanStruct
    vks::VkStencilOpState
    StencilOpState(vks::VkStencilOpState) = new(vks)
end

struct PipelineMultisampleStateCreateInfo <: VulkanStruct
    vks::VkPipelineMultisampleStateCreateInfo
    bag::BagPipelineMultisampleStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineMultisampleStateCreateInfo(
        rasterization_samples,
        sample_shading_enable,
        min_sample_shading,
        alpha_to_coverage_enable,
        alpha_to_one_enable;
        next = C_NULL,
        flags = 0,
        sample_mask = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineMultisampleStateCreateInfo(bag_next, _pNext, sample_mask)
        vks = VkPipelineMultisampleStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            rasterization_samples,
            sample_shading_enable,
            min_sample_shading,
            if sample_mask == C_NULL
                C_NULL
            else
                sample_mask
            end,
            alpha_to_coverage_enable,
            alpha_to_one_enable,
        )
        new(vks, bag)
    end
end

struct PipelineRasterizationStateCreateInfo <: VulkanStruct
    vks::VkPipelineRasterizationStateCreateInfo
    bag::BagPipelineRasterizationStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineRasterizationStateCreateInfo(
        depth_clamp_enable,
        rasterizer_discard_enable,
        polygon_mode,
        front_face,
        depth_bias_enable,
        depth_bias_constant_factor,
        depth_bias_clamp,
        depth_bias_slope_factor,
        line_width;
        next = C_NULL,
        flags = 0,
        cull_mode = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineRasterizationStateCreateInfo(bag_next, _pNext)
        vks = VkPipelineRasterizationStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            depth_clamp_enable,
            rasterizer_discard_enable,
            polygon_mode,
            if cull_mode == 0
                0
            else
                cull_mode
            end,
            front_face,
            depth_bias_enable,
            depth_bias_constant_factor,
            depth_bias_clamp,
            depth_bias_slope_factor,
            line_width,
        )
        new(vks, bag)
    end
end

struct PipelineViewportStateCreateInfo <: VulkanStruct
    vks::VkPipelineViewportStateCreateInfo
    bag::BagPipelineViewportStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineViewportStateCreateInfo(;
        next = C_NULL,
        flags = 0,
        viewports = C_NULL,
        scissors = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pViewports = if viewports == C_NULL
            viewports
        else
            getproperty.(viewports, :vks)
        end
        _pScissors = if scissors == C_NULL
            scissors
        else
            getproperty.(scissors, :vks)
        end
        bag = BagPipelineViewportStateCreateInfo(bag_next, _pNext, _pViewports, _pScissors)
        vks = VkPipelineViewportStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            if _pViewports == C_NULL
                C_NULL
            else
                _pViewports
            end,
            if _pScissors == C_NULL
                C_NULL
            else
                _pScissors
            end,
        )
        new(vks, bag)
    end
end

struct Viewport <: VulkanStruct
    vks::VkViewport
    Viewport(vks::VkViewport) = new(vks)
end

struct PipelineTessellationStateCreateInfo <: VulkanStruct
    vks::VkPipelineTessellationStateCreateInfo
    bag::BagPipelineTessellationStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineTessellationStateCreateInfo(
        patch_control_points;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineTessellationStateCreateInfo(bag_next, _pNext)
        vks = VkPipelineTessellationStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            patch_control_points,
        )
        new(vks, bag)
    end
end

struct PipelineInputAssemblyStateCreateInfo <: VulkanStruct
    vks::VkPipelineInputAssemblyStateCreateInfo
    bag::BagPipelineInputAssemblyStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineInputAssemblyStateCreateInfo(
        topology,
        primitive_restart_enable;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagPipelineInputAssemblyStateCreateInfo(bag_next, _pNext)
        vks = VkPipelineInputAssemblyStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            topology,
            primitive_restart_enable,
        )
        new(vks, bag)
    end
end

struct PipelineVertexInputStateCreateInfo <: VulkanStruct
    vks::VkPipelineVertexInputStateCreateInfo
    bag::BagPipelineVertexInputStateCreateInfo
    """
    Generic constructor.
    """
    function PipelineVertexInputStateCreateInfo(
        vertex_binding_descriptions,
        vertex_attribute_descriptions;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pVertexBindingDescriptions = if vertex_binding_descriptions == C_NULL
            vertex_binding_descriptions
        else
            getproperty.(vertex_binding_descriptions, :vks)
        end
        _pVertexAttributeDescriptions = if vertex_attribute_descriptions == C_NULL
            vertex_attribute_descriptions
        else
            getproperty.(vertex_attribute_descriptions, :vks)
        end
        bag = BagPipelineVertexInputStateCreateInfo(
            bag_next,
            _pNext,
            _pVertexBindingDescriptions,
            _pVertexAttributeDescriptions,
        )
        vks = VkPipelineVertexInputStateCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pVertexBindingDescriptions,
            _pVertexAttributeDescriptions,
        )
        new(vks, bag)
    end
end

struct VertexInputAttributeDescription <: VulkanStruct
    vks::VkVertexInputAttributeDescription
    VertexInputAttributeDescription(vks::VkVertexInputAttributeDescription) = new(vks)
end

struct VertexInputBindingDescription <: VulkanStruct
    vks::VkVertexInputBindingDescription
    VertexInputBindingDescription(vks::VkVertexInputBindingDescription) = new(vks)
end

struct ComputePipelineCreateInfo <: VulkanStruct
    vks::VkComputePipelineCreateInfo
    bag::BagComputePipelineCreateInfo
    """
    Generic constructor.
    """
    function ComputePipelineCreateInfo(
        stage,
        layout,
        base_pipeline_index;
        next = C_NULL,
        flags = 0,
        base_pipeline_handle = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagComputePipelineCreateInfo(bag_next, _pNext, stage.bag)
        vks = VkComputePipelineCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            stage.vks,
            layout.handle,
            if base_pipeline_handle == C_NULL
                C_NULL
            else
                base_pipeline_handle.handle
            end,
            base_pipeline_index,
        )
        new(vks, bag)
    end
end

struct PipelineShaderStageCreateInfo <: VulkanStruct
    vks::VkPipelineShaderStageCreateInfo
    bag::BagPipelineShaderStageCreateInfo
    """
    Generic constructor.
    """
    function PipelineShaderStageCreateInfo(
        stage,
        _module,
        name;
        next = C_NULL,
        flags = 0,
        specialization_info = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pSpecializationInfo = if specialization_info == C_NULL
            specialization_info
        else
            Ref(specialization_info.vks)
        end
        bag = BagPipelineShaderStageCreateInfo(
            bag_next,
            _pNext,
            name,
            if specialization_info == C_NULL
                EmptyBag
            else
                specialization_info.bag
            end,
            _pSpecializationInfo,
        )
        vks = VkPipelineShaderStageCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            stage,
            _module.handle,
            name,
            if _pSpecializationInfo == C_NULL
                C_NULL
            else
                _pSpecializationInfo
            end,
        )
        new(vks, bag)
    end
end

struct SpecializationInfo <: VulkanStruct
    vks::VkSpecializationInfo
    bag::BagSpecializationInfo
    """
    Generic constructor.
    """
    function SpecializationInfo(map_entries, data)
        _pMapEntries = if map_entries == C_NULL
            map_entries
        else
            getproperty.(map_entries, :vks)
        end
        _pData = if data == C_NULL
            data
        else
            Ref(data)
        end
        bag = BagSpecializationInfo(_pMapEntries, _pData)
        vks = VkSpecializationInfo(_pMapEntries, _pData)
        new(vks, bag)
    end
end

struct SpecializationMapEntry <: VulkanStruct
    vks::VkSpecializationMapEntry
    SpecializationMapEntry(vks::VkSpecializationMapEntry) = new(vks)
end

struct PipelineCacheCreateInfo <: VulkanStruct
    vks::VkPipelineCacheCreateInfo
    bag::BagPipelineCacheCreateInfo
    """
    Generic constructor.
    """
    function PipelineCacheCreateInfo(initial_data; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pInitialData = if initial_data == C_NULL
            initial_data
        else
            Ref(initial_data)
        end
        bag = BagPipelineCacheCreateInfo(bag_next, _pNext, _pInitialData)
        vks = VkPipelineCacheCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, _pInitialData)
        new(vks, bag)
    end
end

struct ShaderModuleCreateInfo <: VulkanStruct
    vks::VkShaderModuleCreateInfo
    bag::BagShaderModuleCreateInfo
    """
    Generic constructor.
    """
    function ShaderModuleCreateInfo(code_size, code; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        code = convert(Array{UInt32}, code)
        bag = BagShaderModuleCreateInfo(bag_next, _pNext, code)
        vks = VkShaderModuleCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end, code_size, code)
        new(vks, bag)
    end
end

struct ImageViewCreateInfo <: VulkanStruct
    vks::VkImageViewCreateInfo
    bag::BagImageViewCreateInfo
    """
    Generic constructor.
    """
    function ImageViewCreateInfo(
        image,
        view_type,
        format,
        components,
        subresource_range;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageViewCreateInfo(bag_next, _pNext)
        vks = VkImageViewCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            image.handle,
            view_type,
            format,
            components.vks,
            subresource_range.vks,
        )
        new(vks, bag)
    end
end

struct ComponentMapping <: VulkanStruct
    vks::VkComponentMapping
    ComponentMapping(vks::VkComponentMapping) = new(vks)
end

struct ImageCreateInfo <: VulkanStruct
    vks::VkImageCreateInfo
    bag::BagImageCreateInfo
    """
    Generic constructor.
    """
    function ImageCreateInfo(
        image_type,
        format,
        extent,
        mip_levels,
        array_layers,
        samples,
        tiling,
        usage,
        sharing_mode,
        queue_family_indices,
        initial_layout;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        queue_family_indices = convert(Array{UInt32}, queue_family_indices)
        bag = BagImageCreateInfo(bag_next, _pNext, queue_family_indices)
        vks = VkImageCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            image_type,
            format,
            extent.vks,
            mip_levels,
            array_layers,
            samples,
            tiling,
            usage,
            sharing_mode,
            queue_family_indices,
            initial_layout,
        )
        new(vks, bag)
    end
end

struct BufferViewCreateInfo <: VulkanStruct
    vks::VkBufferViewCreateInfo
    bag::BagBufferViewCreateInfo
    """
    Generic constructor.
    """
    function BufferViewCreateInfo(buffer, format, offset, range; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferViewCreateInfo(bag_next, _pNext)
        vks = VkBufferViewCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            buffer.handle,
            format,
            offset,
            range,
        )
        new(vks, bag)
    end
end

struct BufferCreateInfo <: VulkanStruct
    vks::VkBufferCreateInfo
    bag::BagBufferCreateInfo
    """
    Generic constructor.
    """
    function BufferCreateInfo(
        size,
        usage,
        sharing_mode,
        queue_family_indices;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        queue_family_indices = convert(Array{UInt32}, queue_family_indices)
        bag = BagBufferCreateInfo(bag_next, _pNext, queue_family_indices)
        vks = VkBufferCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            size,
            usage,
            sharing_mode,
            queue_family_indices,
        )
        new(vks, bag)
    end
end

struct QueryPoolCreateInfo <: VulkanStruct
    vks::VkQueryPoolCreateInfo
    bag::BagQueryPoolCreateInfo
    """
    Generic constructor.
    """
    function QueryPoolCreateInfo(
        query_type,
        query_count;
        next = C_NULL,
        flags = 0,
        pipeline_statistics = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagQueryPoolCreateInfo(bag_next, _pNext)
        vks = VkQueryPoolCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            query_type,
            query_count,
            if pipeline_statistics == C_NULL
                C_NULL
            else
                pipeline_statistics
            end,
        )
        new(vks, bag)
    end
end

struct EventCreateInfo <: VulkanStruct
    vks::VkEventCreateInfo
    bag::BagEventCreateInfo
    """
    Generic constructor.
    """
    function EventCreateInfo(; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagEventCreateInfo(bag_next, _pNext)
        vks = VkEventCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct SemaphoreCreateInfo <: VulkanStruct
    vks::VkSemaphoreCreateInfo
    bag::BagSemaphoreCreateInfo
    """
    Generic constructor.
    """
    function SemaphoreCreateInfo(; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagSemaphoreCreateInfo(bag_next, _pNext)
        vks = VkSemaphoreCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct FenceCreateInfo <: VulkanStruct
    vks::VkFenceCreateInfo
    bag::BagFenceCreateInfo
    """
    Generic constructor.
    """
    function FenceCreateInfo(; next = C_NULL, flags = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagFenceCreateInfo(bag_next, _pNext)
        vks = VkFenceCreateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, if flags == 0
            0
        else
            flags
        end)
        new(vks, bag)
    end
end

struct BindSparseInfo <: VulkanStruct
    vks::VkBindSparseInfo
    bag::BagBindSparseInfo
    """
    Generic constructor.
    """
    function BindSparseInfo(
        wait_semaphores,
        buffer_binds,
        image_opaque_binds,
        image_binds,
        signal_semaphores;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pWaitSemaphores = if wait_semaphores == C_NULL
            wait_semaphores
        else
            getproperty.(wait_semaphores, :handle)
        end
        _pBufferBinds = if buffer_binds == C_NULL
            buffer_binds
        else
            getproperty.(buffer_binds, :vks)
        end
        _pImageOpaqueBinds = if image_opaque_binds == C_NULL
            image_opaque_binds
        else
            getproperty.(image_opaque_binds, :vks)
        end
        _pImageBinds = if image_binds == C_NULL
            image_binds
        else
            getproperty.(image_binds, :vks)
        end
        _pSignalSemaphores = if signal_semaphores == C_NULL
            signal_semaphores
        else
            getproperty.(signal_semaphores, :handle)
        end
        bag = BagBindSparseInfo(
            bag_next,
            _pNext,
            _pWaitSemaphores,
            getproperty.(buffer_binds, :bag),
            _pBufferBinds,
            getproperty.(image_opaque_binds, :bag),
            _pImageOpaqueBinds,
            getproperty.(image_binds, :bag),
            _pImageBinds,
            _pSignalSemaphores,
        )
        vks = VkBindSparseInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pWaitSemaphores,
            _pBufferBinds,
            _pImageOpaqueBinds,
            _pImageBinds,
            _pSignalSemaphores,
        )
        new(vks, bag)
    end
end

struct SparseImageMemoryBindInfo <: VulkanStruct
    vks::VkSparseImageMemoryBindInfo
    bag::BagSparseImageMemoryBindInfo
    """
    Generic constructor.
    """
    function SparseImageMemoryBindInfo(image, binds)
        _pBinds = if binds == C_NULL
            binds
        else
            getproperty.(binds, :vks)
        end
        bag = BagSparseImageMemoryBindInfo(_pBinds)
        vks = VkSparseImageMemoryBindInfo(image.handle, _pBinds)
        new(vks, bag)
    end
end

struct SparseImageMemoryBind <: VulkanStruct
    vks::VkSparseImageMemoryBind
    SparseImageMemoryBind(vks::VkSparseImageMemoryBind) = new(vks)
end

struct ImageSubresource <: VulkanStruct
    vks::VkImageSubresource
    ImageSubresource(vks::VkImageSubresource) = new(vks)
end

struct SparseImageOpaqueMemoryBindInfo <: VulkanStruct
    vks::VkSparseImageOpaqueMemoryBindInfo
    bag::BagSparseImageOpaqueMemoryBindInfo
    """
    Generic constructor.
    """
    function SparseImageOpaqueMemoryBindInfo(image, binds)
        _pBinds = if binds == C_NULL
            binds
        else
            getproperty.(binds, :vks)
        end
        bag = BagSparseImageOpaqueMemoryBindInfo(_pBinds)
        vks = VkSparseImageOpaqueMemoryBindInfo(image.handle, _pBinds)
        new(vks, bag)
    end
end

struct SparseBufferMemoryBindInfo <: VulkanStruct
    vks::VkSparseBufferMemoryBindInfo
    bag::BagSparseBufferMemoryBindInfo
    """
    Generic constructor.
    """
    function SparseBufferMemoryBindInfo(buffer, binds)
        _pBinds = if binds == C_NULL
            binds
        else
            getproperty.(binds, :vks)
        end
        bag = BagSparseBufferMemoryBindInfo(_pBinds)
        vks = VkSparseBufferMemoryBindInfo(buffer.handle, _pBinds)
        new(vks, bag)
    end
end

struct SparseMemoryBind <: VulkanStruct
    vks::VkSparseMemoryBind
    SparseMemoryBind(vks::VkSparseMemoryBind) = new(vks)
end

struct MemoryAllocateInfo <: VulkanStruct
    vks::VkMemoryAllocateInfo
    bag::BagMemoryAllocateInfo
    """
    Generic constructor.
    """
    function MemoryAllocateInfo(allocation_size, memory_type_index; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryAllocateInfo(bag_next, _pNext)
        vks = VkMemoryAllocateInfo(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, allocation_size, memory_type_index)
        new(vks, bag)
    end
end

struct MappedMemoryRange <: VulkanStruct
    vks::VkMappedMemoryRange
    bag::BagMappedMemoryRange
    """
    Generic constructor.
    """
    function MappedMemoryRange(memory, offset, size; next = C_NULL)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMappedMemoryRange(bag_next, _pNext)
        vks = VkMappedMemoryRange(if _pNext == C_NULL
            C_NULL
        else
            _pNext
        end, memory.handle, offset, size)
        new(vks, bag)
    end
end

struct SubmitInfo <: VulkanStruct
    vks::VkSubmitInfo
    bag::BagSubmitInfo
    """
    Generic constructor.
    """
    function SubmitInfo(
        wait_semaphores,
        wait_dst_stage_mask,
        command_buffers,
        signal_semaphores;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pWaitSemaphores = if wait_semaphores == C_NULL
            wait_semaphores
        else
            getproperty.(wait_semaphores, :handle)
        end
        _pCommandBuffers = if command_buffers == C_NULL
            command_buffers
        else
            getproperty.(command_buffers, :handle)
        end
        _pSignalSemaphores = if signal_semaphores == C_NULL
            signal_semaphores
        else
            getproperty.(signal_semaphores, :handle)
        end
        bag = BagSubmitInfo(
            bag_next,
            _pNext,
            _pWaitSemaphores,
            wait_dst_stage_mask,
            _pCommandBuffers,
            _pSignalSemaphores,
        )
        vks = VkSubmitInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            _pWaitSemaphores,
            wait_dst_stage_mask,
            _pCommandBuffers,
            _pSignalSemaphores,
        )
        new(vks, bag)
    end
end

struct LayerProperties <: ReturnedOnly
    layer_name::String
    spec_version::VersionNumber
    implementation_version::VersionNumber
    description::String
end

struct ExtensionProperties <: ReturnedOnly
    extension_name::String
    spec_version::VersionNumber
end

struct DeviceCreateInfo <: VulkanStruct
    vks::VkDeviceCreateInfo
    bag::BagDeviceCreateInfo
    """
    Generic constructor.
    """
    function DeviceCreateInfo(
        queue_create_infos,
        enabled_layer_names,
        enabled_extension_names;
        next = C_NULL,
        flags = 0,
        enabled_features = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pQueueCreateInfos = if queue_create_infos == C_NULL
            queue_create_infos
        else
            getproperty.(queue_create_infos, :vks)
        end
        enabled_layer_names_ptrarray = pointer.(enabled_layer_names)
        enabled_extension_names_ptrarray = pointer.(enabled_extension_names)
        _pEnabledFeatures = if enabled_features == C_NULL
            enabled_features
        else
            Ref(enabled_features.vks)
        end
        bag = BagDeviceCreateInfo(
            bag_next,
            _pNext,
            getproperty.(queue_create_infos, :bag),
            _pQueueCreateInfos,
            enabled_layer_names_ptrarray,
            enabled_layer_names,
            enabled_extension_names_ptrarray,
            enabled_extension_names,
            _pEnabledFeatures,
        )
        vks = VkDeviceCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            _pQueueCreateInfos,
            enabled_layer_names_ptrarray,
            enabled_extension_names_ptrarray,
            if _pEnabledFeatures == C_NULL
                C_NULL
            else
                _pEnabledFeatures
            end,
        )
        new(vks, bag)
    end
end

struct DeviceQueueCreateInfo <: VulkanStruct
    vks::VkDeviceQueueCreateInfo
    bag::BagDeviceQueueCreateInfo
    """
    Generic constructor.
    """
    function DeviceQueueCreateInfo(
        queue_family_index,
        queue_priorities;
        next = C_NULL,
        flags = 0,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        queue_priorities = convert(Array{Float32}, queue_priorities)
        bag = BagDeviceQueueCreateInfo(bag_next, _pNext, queue_priorities)
        vks = VkDeviceQueueCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            queue_family_index,
            queue_priorities,
        )
        new(vks, bag)
    end
end

struct PhysicalDeviceSparseProperties <: ReturnedOnly
    residency_standard_2_d_block_shape::Bool
    residency_standard_2_d_multisample_block_shape::Bool
    residency_standard_3_d_block_shape::Bool
    residency_aligned_mip_size::Bool
    residency_non_resident_strict::Bool
end

struct PhysicalDeviceMemoryProperties <: ReturnedOnly
    memory_type_count::UInt32
    memory_types::NTuple{32,VkMemoryType}
    memory_heap_count::UInt32
    memory_heaps::NTuple{16,VkMemoryHeap}
end

struct PhysicalDeviceMemoryProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_properties::PhysicalDeviceMemoryProperties
end

struct PhysicalDeviceFeatures <: VulkanStruct
    vks::VkPhysicalDeviceFeatures
    PhysicalDeviceFeatures(vks::VkPhysicalDeviceFeatures) = new(vks)
end

struct InstanceCreateInfo <: VulkanStruct
    vks::VkInstanceCreateInfo
    bag::BagInstanceCreateInfo
    """
    Generic constructor.
    """
    function InstanceCreateInfo(
        enabled_layer_names,
        enabled_extension_names;
        next = C_NULL,
        flags = 0,
        application_info = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        _pApplicationInfo = if application_info == C_NULL
            application_info
        else
            Ref(application_info.vks)
        end
        enabled_layer_names_ptrarray = pointer.(enabled_layer_names)
        enabled_extension_names_ptrarray = pointer.(enabled_extension_names)
        bag = BagInstanceCreateInfo(
            bag_next,
            _pNext,
            if application_info == C_NULL
                EmptyBag
            else
                application_info.bag
            end,
            _pApplicationInfo,
            enabled_layer_names_ptrarray,
            enabled_layer_names,
            enabled_extension_names_ptrarray,
            enabled_extension_names,
        )
        vks = VkInstanceCreateInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if flags == 0
                0
            else
                flags
            end,
            if _pApplicationInfo == C_NULL
                C_NULL
            else
                _pApplicationInfo
            end,
            enabled_layer_names_ptrarray,
            enabled_extension_names_ptrarray,
        )
        new(vks, bag)
    end
end

struct ApplicationInfo <: VulkanStruct
    vks::VkApplicationInfo
    bag::BagApplicationInfo
    """
    Generic constructor.
    """
    function ApplicationInfo(
        application_version,
        engine_version,
        api_version;
        next = C_NULL,
        application_name = C_NULL,
        engine_name = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagApplicationInfo(bag_next, _pNext, application_name, engine_name)
        vks = VkApplicationInfo(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if application_name == C_NULL
                C_NULL
            else
                application_name
            end,
            application_version,
            if engine_name == C_NULL
                C_NULL
            else
                engine_name
            end,
            engine_version,
            api_version,
        )
        new(vks, bag)
    end
end

struct AllocationCallbacks <: VulkanStruct
    vks::VkAllocationCallbacks
    bag::BagAllocationCallbacks
    """
    Generic constructor.
    """
    function AllocationCallbacks(
        allocation,
        reallocation,
        free;
        user_data = C_NULL,
        internal_allocation = C_NULL,
        internal_free = C_NULL,
    )
        _pUserData = if user_data == C_NULL
            user_data
        else
            Ref(user_data)
        end
        bag = BagAllocationCallbacks(_pUserData)
        vks = VkAllocationCallbacks(
            if _pUserData == C_NULL
                C_NULL
            else
                _pUserData
            end,
            allocation,
            reallocation,
            free,
            if internal_allocation == C_NULL
                C_NULL
            else
                internal_allocation
            end,
            if internal_free == C_NULL
                C_NULL
            else
                internal_free
            end,
        )
        new(vks, bag)
    end
end

struct MemoryBarrier <: VulkanStruct
    vks::VkMemoryBarrier
    bag::BagMemoryBarrier
    """
    Generic constructor.
    """
    function MemoryBarrier(; next = C_NULL, src_access_mask = 0, dst_access_mask = 0)
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagMemoryBarrier(bag_next, _pNext)
        vks = VkMemoryBarrier(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            if src_access_mask == 0
                0
            else
                src_access_mask
            end,
            if dst_access_mask == 0
                0
            else
                dst_access_mask
            end,
        )
        new(vks, bag)
    end
end

struct ImageMemoryBarrier <: VulkanStruct
    vks::VkImageMemoryBarrier
    bag::BagImageMemoryBarrier
    """
    Generic constructor.
    """
    function ImageMemoryBarrier(
        src_access_mask,
        dst_access_mask,
        old_layout,
        new_layout,
        src_queue_family_index,
        dst_queue_family_index,
        image,
        subresource_range;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagImageMemoryBarrier(bag_next, _pNext)
        vks = VkImageMemoryBarrier(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_access_mask,
            dst_access_mask,
            old_layout,
            new_layout,
            src_queue_family_index,
            dst_queue_family_index,
            image.handle,
            subresource_range.vks,
        )
        new(vks, bag)
    end
end

struct ImageSubresourceRange <: VulkanStruct
    vks::VkImageSubresourceRange
    ImageSubresourceRange(vks::VkImageSubresourceRange) = new(vks)
end

struct DrawIndirectCommand <: VulkanStruct
    vks::VkDrawIndirectCommand
    DrawIndirectCommand(vks::VkDrawIndirectCommand) = new(vks)
end

struct DrawIndexedIndirectCommand <: VulkanStruct
    vks::VkDrawIndexedIndirectCommand
    DrawIndexedIndirectCommand(vks::VkDrawIndexedIndirectCommand) = new(vks)
end

struct DispatchIndirectCommand <: VulkanStruct
    vks::VkDispatchIndirectCommand
    DispatchIndirectCommand(vks::VkDispatchIndirectCommand) = new(vks)
end

struct BufferMemoryBarrier <: VulkanStruct
    vks::VkBufferMemoryBarrier
    bag::BagBufferMemoryBarrier
    """
    Generic constructor.
    """
    function BufferMemoryBarrier(
        src_access_mask,
        dst_access_mask,
        src_queue_family_index,
        dst_queue_family_index,
        buffer,
        offset,
        size;
        next = C_NULL,
    )
        _pNext = if next == C_NULL
            next
        else
            Ref(next)
        end
        bag_next = if next == C_NULL
            EmptyBag
        else
            next.bag
        end
        bag = BagBufferMemoryBarrier(bag_next, _pNext)
        vks = VkBufferMemoryBarrier(
            if _pNext == C_NULL
                C_NULL
            else
                _pNext
            end,
            src_access_mask,
            dst_access_mask,
            src_queue_family_index,
            dst_queue_family_index,
            buffer.handle,
            offset,
            size,
        )
        new(vks, bag)
    end
end

struct Rect2D <: VulkanStruct
    vks::VkRect2D
    Rect2D(vks::VkRect2D) = new(vks)
end

struct Offset3D <: VulkanStruct
    vks::VkOffset3D
    Offset3D(vks::VkOffset3D) = new(vks)
end

struct Offset2D <: VulkanStruct
    vks::VkOffset2D
    Offset2D(vks::VkOffset2D) = new(vks)
end

struct Extent3D <: VulkanStruct
    vks::VkExtent3D
    Extent3D(vks::VkExtent3D) = new(vks)
end

struct Extent2D <: VulkanStruct
    vks::VkExtent2D
    Extent2D(vks::VkExtent2D) = new(vks)
end

struct PhysicalDeviceFragmentDensityMapPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    min_fragment_density_texel_size::Extent2D
    max_fragment_density_texel_size::Extent2D
    fragment_density_invocations::Bool
end

struct PhysicalDeviceShadingRateImagePropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    shading_rate_texel_size::Extent2D
    shading_rate_palette_size::UInt32
    shading_rate_max_coarse_samples::UInt32
end

struct MultisamplePropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_sample_location_grid_size::Extent2D
end

@cenum AccelerationStructureBuildTypeKHR::UInt32 begin
    ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
    ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
    ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
    ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647
end
@cenum FullScreenExclusiveEXT::UInt32 begin
    FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0
    FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1
    FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2
    FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3
    FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 2147483647
end
@cenum DeviceDiagnosticsConfigFlagBitsNV::UInt32 begin
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
    DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
end
@cenum PrivateDataSlotCreateFlagBitsEXT::UInt32 PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT =
    2147483647
@cenum IndirectCommandsLayoutUsageFlagBitsNV::UInt32 begin
    INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
    INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
    INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
    INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
end
@cenum IndirectStateFlagBitsNV::UInt32 begin
    INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
    INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
end
@cenum IndirectCommandsTokenTypeNV::UInt32 begin
    INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
    INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
    INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
    INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
    INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
    INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
end
@cenum LineRasterizationModeEXT::UInt32 begin
    LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
    LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
    LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
    LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
    LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
end
@cenum CoverageReductionModeNV::UInt32 begin
    COVERAGE_REDUCTION_MODE_MERGE_NV = 0
    COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
    COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
end
@cenum ScopeNV::UInt32 begin
    SCOPE_DEVICE_NV = 1
    SCOPE_WORKGROUP_NV = 2
    SCOPE_SUBGROUP_NV = 3
    SCOPE_QUEUE_FAMILY_NV = 5
    SCOPE_MAX_ENUM_NV = 2147483647
end
@cenum ComponentTypeNV::UInt32 begin
    COMPONENT_TYPE_FLOAT16_NV = 0
    COMPONENT_TYPE_FLOAT32_NV = 1
    COMPONENT_TYPE_FLOAT64_NV = 2
    COMPONENT_TYPE_SINT8_NV = 3
    COMPONENT_TYPE_SINT16_NV = 4
    COMPONENT_TYPE_SINT32_NV = 5
    COMPONENT_TYPE_SINT64_NV = 6
    COMPONENT_TYPE_UINT8_NV = 7
    COMPONENT_TYPE_UINT16_NV = 8
    COMPONENT_TYPE_UINT32_NV = 9
    COMPONENT_TYPE_UINT64_NV = 10
    COMPONENT_TYPE_MAX_ENUM_NV = 2147483647
end
@cenum ValidationFeatureDisableEXT::UInt32 begin
    VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
    VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
    VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
    VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
    VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
    VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
    VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
    VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
end
@cenum ValidationFeatureEnableEXT::UInt32 begin
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
    VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
    VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
    VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
    VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
end
@cenum ToolPurposeFlagBitsEXT::UInt32 begin
    TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
    TOOL_PURPOSE_PROFILING_BIT_EXT = 2
    TOOL_PURPOSE_TRACING_BIT_EXT = 4
    TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
    TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
    TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
    TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
    TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum ShaderCorePropertiesFlagBitsAMD::UInt32 SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD =
    2147483647
@cenum PerformanceValueTypeINTEL::UInt32 begin
    PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
    PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
    PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
    PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
    PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
    PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
end
@cenum PerformanceParameterTypeINTEL::UInt32 begin
    PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
    PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
    PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
end
@cenum PerformanceOverrideTypeINTEL::UInt32 begin
    PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
    PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
    PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
end
@cenum QueryPoolSamplingModeINTEL::UInt32 begin
    QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
    QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
end
@cenum PerformanceConfigurationTypeINTEL::UInt32 begin
    PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
    PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
end
@cenum PipelineCreationFeedbackFlagBitsEXT::UInt32 begin
    PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
    PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
    PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
    PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum MemoryOverallocationBehaviorAMD::UInt32 begin
    MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
    MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
    MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
    MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
end
@cenum TimeDomainEXT::UInt32 begin
    TIME_DOMAIN_DEVICE_EXT = 0
    TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
    TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
    TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
    TIME_DOMAIN_MAX_ENUM_EXT = 2147483647
end
@cenum PipelineCompilerControlFlagBitsAMD::UInt32 PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD =
    2147483647
@cenum QueueGlobalPriorityEXT::UInt32 begin
    QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
    QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
    QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
    QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
    QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 2147483647
end
@cenum BuildAccelerationStructureFlagBitsKHR::UInt32 begin
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16
    BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum GeometryInstanceFlagBitsKHR::UInt32 begin
    GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
    GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8
    GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum GeometryFlagBitsKHR::UInt32 begin
    GEOMETRY_OPAQUE_BIT_KHR = 1
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
    GEOMETRY_OPAQUE_BIT_NV = 1
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2
    GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum AccelerationStructureMemoryRequirementsTypeKHR::UInt32 begin
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 2147483647
end
@cenum CopyAccelerationStructureModeKHR::UInt32 begin
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
    COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
    COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
    COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
end
@cenum AccelerationStructureTypeKHR::UInt32 begin
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
    ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
end
@cenum GeometryTypeKHR::UInt32 begin
    GEOMETRY_TYPE_TRIANGLES_KHR = 0
    GEOMETRY_TYPE_AABBS_KHR = 1
    GEOMETRY_TYPE_INSTANCES_KHR = 1000150000
    GEOMETRY_TYPE_TRIANGLES_NV = 0
    GEOMETRY_TYPE_AABBS_NV = 1
    GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
end
@cenum RayTracingShaderGroupTypeKHR::UInt32 begin
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
    RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
end
@cenum CoarseSampleOrderTypeNV::UInt32 begin
    COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
    COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
    COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
    COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
    COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
end
@cenum ShadingRatePaletteEntryNV::UInt32 begin
    SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
    SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
    SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
    SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
    SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
    SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
end
@cenum ValidationCacheHeaderVersionEXT::UInt32 begin
    VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
    VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
end
@cenum CoverageModulationModeNV::UInt32 begin
    COVERAGE_MODULATION_MODE_NONE_NV = 0
    COVERAGE_MODULATION_MODE_RGB_NV = 1
    COVERAGE_MODULATION_MODE_ALPHA_NV = 2
    COVERAGE_MODULATION_MODE_RGBA_NV = 3
    COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
end
@cenum BlendOverlapEXT::UInt32 begin
    BLEND_OVERLAP_UNCORRELATED_EXT = 0
    BLEND_OVERLAP_DISJOINT_EXT = 1
    BLEND_OVERLAP_CONJOINT_EXT = 2
    BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
end
@cenum DebugUtilsMessageTypeFlagBitsEXT::UInt32 begin
    DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
    DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
    DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
    DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum DebugUtilsMessageSeverityFlagBitsEXT::UInt32 begin
    DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
    DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
    DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
    DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
    DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum ConservativeRasterizationModeEXT::UInt32 begin
    CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
    CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
    CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
    CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
end
@cenum DiscardRectangleModeEXT::UInt32 begin
    DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
    DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
    DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
end
@cenum ViewportCoordinateSwizzleNV::UInt32 begin
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
    VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
end
@cenum DisplayEventTypeEXT::UInt32 begin
    DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
    DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
end
@cenum DeviceEventTypeEXT::UInt32 begin
    DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
    DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
end
@cenum DisplayPowerStateEXT::UInt32 begin
    DISPLAY_POWER_STATE_OFF_EXT = 0
    DISPLAY_POWER_STATE_SUSPEND_EXT = 1
    DISPLAY_POWER_STATE_ON_EXT = 2
    DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
end
@cenum SurfaceCounterFlagBitsEXT::UInt32 begin
    SURFACE_COUNTER_VBLANK_EXT = 1
    SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum ConditionalRenderingFlagBitsEXT::UInt32 begin
    CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
    CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum ValidationCheckEXT::UInt32 begin
    VALIDATION_CHECK_ALL_EXT = 0
    VALIDATION_CHECK_SHADERS_EXT = 1
    VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
end
@cenum ExternalMemoryFeatureFlagBitsNV::UInt32 begin
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
end
@cenum ExternalMemoryHandleTypeFlagBitsNV::UInt32 begin
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
end
@cenum ShaderInfoTypeAMD::UInt32 begin
    SHADER_INFO_TYPE_STATISTICS_AMD = 0
    SHADER_INFO_TYPE_BINARY_AMD = 1
    SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
    SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
end
@cenum RasterizationOrderAMD::UInt32 begin
    RASTERIZATION_ORDER_STRICT_AMD = 0
    RASTERIZATION_ORDER_RELAXED_AMD = 1
    RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
end
@cenum DebugReportFlagBitsEXT::UInt32 begin
    DEBUG_REPORT_INFORMATION_BIT_EXT = 1
    DEBUG_REPORT_WARNING_BIT_EXT = 2
    DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
    DEBUG_REPORT_ERROR_BIT_EXT = 8
    DEBUG_REPORT_DEBUG_BIT_EXT = 16
    DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
end
@cenum DebugReportObjectTypeEXT::UInt32 begin
    DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
    DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
    DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
    DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
    DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
    DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
    DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
    DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
    DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
    DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
    DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
    DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
    DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
    DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
end
@cenum PipelineExecutableStatisticFormatKHR::UInt32 begin
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
end
struct PipelineExecutableStatisticKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    name::String
    description::String
    format::PipelineExecutableStatisticFormatKHR
    value::PipelineExecutableStatisticValueKHR
end

@cenum AcquireProfilingLockFlagBitsKHR::UInt32 ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR =
    2147483647
@cenum PerformanceCounterDescriptionFlagBitsKHR::UInt32 begin
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2
    PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum PerformanceCounterStorageKHR::UInt32 begin
    PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
    PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
    PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
    PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
    PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
    PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
    PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
end
@cenum PerformanceCounterScopeKHR::UInt32 begin
    PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
    PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
    PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
    QUERY_SCOPE_COMMAND_BUFFER_KHR = 0
    QUERY_SCOPE_RENDER_PASS_KHR = 1
    QUERY_SCOPE_COMMAND_KHR = 2
    PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
end
@cenum PerformanceCounterUnitKHR::UInt32 begin
    PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
    PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
    PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
    PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
    PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
    PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
    PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
    PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
    PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
    PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
    PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
    PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
end
struct PerformanceCounterKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    unit::PerformanceCounterUnitKHR
    scope::PerformanceCounterScopeKHR
    storage::PerformanceCounterStorageKHR
    uuid::String
end

@cenum DisplayPlaneAlphaFlagBitsKHR::UInt32 begin
    DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
    DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
    DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
    DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
    DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum DeviceGroupPresentModeFlagBitsKHR::UInt32 begin
    DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
    DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
    DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
    DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
    DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum SwapchainCreateFlagBitsKHR::UInt32 begin
    SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
    SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
    SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
    SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum CompositeAlphaFlagBitsKHR::UInt32 begin
    COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
    COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
    COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
    COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
    COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum SurfaceTransformFlagBitsKHR::UInt32 begin
    SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
    SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
    SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
    SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
    SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
    SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
end
@cenum ColorSpaceKHR::UInt32 begin
    COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
    COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
    COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
    COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
    COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
    COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
    COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
    COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
    COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
    COLOR_SPACE_DOLBYVISION_EXT = 1000104009
    COLOR_SPACE_HDR10_HLG_EXT = 1000104010
    COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
    COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
    COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
    COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
    COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
    COLORSPACE_SRGB_NONLINEAR_KHR = 0
    COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
    COLOR_SPACE_MAX_ENUM_KHR = 2147483647
end
@cenum PresentModeKHR::UInt32 begin
    PRESENT_MODE_IMMEDIATE_KHR = 0
    PRESENT_MODE_MAILBOX_KHR = 1
    PRESENT_MODE_FIFO_KHR = 2
    PRESENT_MODE_FIFO_RELAXED_KHR = 3
    PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
    PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
    PRESENT_MODE_MAX_ENUM_KHR = 2147483647
end
@cenum SemaphoreWaitFlagBits::UInt32 begin
    SEMAPHORE_WAIT_ANY_BIT = 1
    SEMAPHORE_WAIT_ANY_BIT_KHR = 1
    SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum DescriptorBindingFlagBits::UInt32 begin
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8
    DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ResolveModeFlagBits::UInt32 begin
    RESOLVE_MODE_NONE = 0
    RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
    RESOLVE_MODE_AVERAGE_BIT = 2
    RESOLVE_MODE_MIN_BIT = 4
    RESOLVE_MODE_MAX_BIT = 8
    RESOLVE_MODE_NONE_KHR = 0
    RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1
    RESOLVE_MODE_AVERAGE_BIT_KHR = 2
    RESOLVE_MODE_MIN_BIT_KHR = 4
    RESOLVE_MODE_MAX_BIT_KHR = 8
    RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SemaphoreType::UInt32 begin
    SEMAPHORE_TYPE_BINARY = 0
    SEMAPHORE_TYPE_TIMELINE = 1
    SEMAPHORE_TYPE_BINARY_KHR = 0
    SEMAPHORE_TYPE_TIMELINE_KHR = 1
    SEMAPHORE_TYPE_MAX_ENUM = 2147483647
end
@cenum SamplerReductionMode::UInt32 begin
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
    SAMPLER_REDUCTION_MODE_MIN = 1
    SAMPLER_REDUCTION_MODE_MAX = 2
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
    SAMPLER_REDUCTION_MODE_MIN_EXT = 1
    SAMPLER_REDUCTION_MODE_MAX_EXT = 2
    SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
end
@cenum ShaderFloatControlsIndependence::UInt32 begin
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
end
struct PhysicalDeviceFloatControlsProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
end

@cenum DriverId::UInt32 begin
    DRIVER_ID_AMD_PROPRIETARY = 1
    DRIVER_ID_AMD_OPEN_SOURCE = 2
    DRIVER_ID_MESA_RADV = 3
    DRIVER_ID_NVIDIA_PROPRIETARY = 4
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
    DRIVER_ID_IMAGINATION_PROPRIETARY = 7
    DRIVER_ID_QUALCOMM_PROPRIETARY = 8
    DRIVER_ID_ARM_PROPRIETARY = 9
    DRIVER_ID_GOOGLE_SWIFTSHADER = 10
    DRIVER_ID_GGP_PROPRIETARY = 11
    DRIVER_ID_BROADCOM_PROPRIETARY = 12
    DRIVER_ID_MESA_LLVMPIPE = 13
    DRIVER_ID_MOLTENVK = 14
    DRIVER_ID_AMD_PROPRIETARY_KHR = 1
    DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
    DRIVER_ID_MESA_RADV_KHR = 3
    DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
    DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
    DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
    DRIVER_ID_ARM_PROPRIETARY_KHR = 9
    DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10
    DRIVER_ID_GGP_PROPRIETARY_KHR = 11
    DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12
    DRIVER_ID_MAX_ENUM = 2147483647
end
struct PhysicalDeviceDriverProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::ConformanceVersion
end

@cenum ExternalSemaphoreFeatureFlagBits::UInt32 begin
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2
    EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ExternalSemaphoreHandleTypeFlagBits::UInt32 begin
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SemaphoreImportFlagBits::UInt32 begin
    SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
    SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1
    SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum FenceImportFlagBits::UInt32 begin
    FENCE_IMPORT_TEMPORARY_BIT = 1
    FENCE_IMPORT_TEMPORARY_BIT_KHR = 1
    FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ExternalFenceFeatureFlagBits::UInt32 begin
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2
    EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ExternalFenceHandleTypeFlagBits::UInt32 begin
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8
    EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ExternalMemoryFeatureFlagBits::UInt32 begin
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ExternalMemoryHandleTypeFlagBits::UInt32 begin
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
    EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
    EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum MemoryAllocateFlagBits::UInt32 begin
    MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
    MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4
    MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum PeerMemoryFeatureFlagBits::UInt32 begin
    PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
    PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
    PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1
    PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8
    PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SubgroupFeatureFlagBits::UInt32 begin
    SUBGROUP_FEATURE_BASIC_BIT = 1
    SUBGROUP_FEATURE_VOTE_BIT = 2
    SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
    SUBGROUP_FEATURE_BALLOT_BIT = 8
    SUBGROUP_FEATURE_SHUFFLE_BIT = 16
    SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
    SUBGROUP_FEATURE_CLUSTERED_BIT = 64
    SUBGROUP_FEATURE_QUAD_BIT = 128
    SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
    SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum DescriptorUpdateTemplateType::UInt32 begin
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
end
@cenum ChromaLocation::UInt32 begin
    CHROMA_LOCATION_COSITED_EVEN = 0
    CHROMA_LOCATION_MIDPOINT = 1
    CHROMA_LOCATION_COSITED_EVEN_KHR = 0
    CHROMA_LOCATION_MIDPOINT_KHR = 1
    CHROMA_LOCATION_MAX_ENUM = 2147483647
end
@cenum SamplerYcbcrRange::UInt32 begin
    SAMPLER_YCBCR_RANGE_ITU_FULL = 0
    SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
    SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0
    SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1
    SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
end
@cenum SamplerYcbcrModelConversion::UInt32 begin
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4
    SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
end
@cenum TessellationDomainOrigin::UInt32 begin
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1
    TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
end
@cenum PointClippingBehavior::UInt32 begin
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1
    POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
end
struct PhysicalDevicePointClippingProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    point_clipping_behavior::PointClippingBehavior
end

@cenum StencilFaceFlagBits::UInt32 begin
    STENCIL_FACE_FRONT_BIT = 1
    STENCIL_FACE_BACK_BIT = 2
    STENCIL_FACE_FRONT_AND_BACK = 3
    STENCIL_FRONT_AND_BACK = 3
    STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum CommandBufferResetFlagBits::UInt32 begin
    COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
    COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum QueryControlFlagBits::UInt32 begin
    QUERY_CONTROL_PRECISE_BIT = 1
    QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum CommandBufferUsageFlagBits::UInt32 begin
    COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
    COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum CommandPoolResetFlagBits::UInt32 begin
    COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
    COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum CommandPoolCreateFlagBits::UInt32 begin
    COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
    COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
    COMMAND_POOL_CREATE_PROTECTED_BIT = 4
    COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SubpassDescriptionFlagBits::UInt32 begin
    SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
    SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
    SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
    SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
    SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum RenderPassCreateFlagBits::UInt32 begin
    RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
    RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum FramebufferCreateFlagBits::UInt32 begin
    FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
    FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1
    FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum DependencyFlagBits::UInt32 begin
    DEPENDENCY_BY_REGION_BIT = 1
    DEPENDENCY_DEVICE_GROUP_BIT = 4
    DEPENDENCY_VIEW_LOCAL_BIT = 2
    DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2
    DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4
    DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum AttachmentDescriptionFlagBits::UInt32 begin
    ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
    ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum DescriptorSetLayoutCreateFlagBits::UInt32 begin
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
    DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2
    DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum DescriptorPoolCreateFlagBits::UInt32 begin
    DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2
    DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SamplerCreateFlagBits::UInt32 begin
    SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
    SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
    SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum CullModeFlagBits::UInt32 begin
    CULL_MODE_NONE = 0
    CULL_MODE_FRONT_BIT = 1
    CULL_MODE_BACK_BIT = 2
    CULL_MODE_FRONT_AND_BACK = 3
    CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ShaderStageFlagBits::UInt32 begin
    SHADER_STAGE_VERTEX_BIT = 1
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    SHADER_STAGE_GEOMETRY_BIT = 8
    SHADER_STAGE_FRAGMENT_BIT = 16
    SHADER_STAGE_COMPUTE_BIT = 32
    SHADER_STAGE_ALL_GRAPHICS = 31
    SHADER_STAGE_ALL = 2147483647
    SHADER_STAGE_RAYGEN_BIT_KHR = 256
    SHADER_STAGE_ANY_HIT_BIT_KHR = 512
    SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
    SHADER_STAGE_MISS_BIT_KHR = 2048
    SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
    SHADER_STAGE_CALLABLE_BIT_KHR = 8192
    SHADER_STAGE_TASK_BIT_NV = 64
    SHADER_STAGE_MESH_BIT_NV = 128
    SHADER_STAGE_RAYGEN_BIT_NV = 256
    SHADER_STAGE_ANY_HIT_BIT_NV = 512
    SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024
    SHADER_STAGE_MISS_BIT_NV = 2048
    SHADER_STAGE_INTERSECTION_BIT_NV = 4096
    SHADER_STAGE_CALLABLE_BIT_NV = 8192
    SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum PipelineShaderStageCreateFlagBits::UInt32 begin
    PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
    PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
    PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum PipelineCreateFlagBits::UInt32 begin
    PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
    PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
    PIPELINE_CREATE_DERIVATIVE_BIT = 4
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
    PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
    PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
    PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
    PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
    PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
    PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
    PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
    PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
    PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
    PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
    PIPELINE_CREATE_DISPATCH_BASE = 16
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8
    PIPELINE_CREATE_DISPATCH_BASE_KHR = 16
    PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ColorComponentFlagBits::UInt32 begin
    COLOR_COMPONENT_R_BIT = 1
    COLOR_COMPONENT_G_BIT = 2
    COLOR_COMPONENT_B_BIT = 4
    COLOR_COMPONENT_A_BIT = 8
    COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum PipelineCacheCreateFlagBits::UInt32 begin
    PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
    PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ShaderModuleCreateFlagBits::UInt32 SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM =
    2147483647
@cenum ImageViewCreateFlagBits::UInt32 begin
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
    IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum BufferUsageFlagBits::UInt32 begin
    BUFFER_USAGE_TRANSFER_SRC_BIT = 1
    BUFFER_USAGE_TRANSFER_DST_BIT = 2
    BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
    BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    BUFFER_USAGE_RAY_TRACING_BIT_KHR = 1024
    BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072
    BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum BufferCreateFlagBits::UInt32 begin
    BUFFER_CREATE_SPARSE_BINDING_BIT = 1
    BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
    BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
    BUFFER_CREATE_PROTECTED_BIT = 8
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16
    BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum QueryResultFlagBits::UInt32 begin
    QUERY_RESULT_64_BIT = 1
    QUERY_RESULT_WAIT_BIT = 2
    QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
    QUERY_RESULT_PARTIAL_BIT = 8
    QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum QueryPipelineStatisticFlagBits::UInt32 begin
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
    QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
    QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
    QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
    QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
    QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
    QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
    QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
    QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum FenceCreateFlagBits::UInt32 begin
    FENCE_CREATE_SIGNALED_BIT = 1
    FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SparseImageFormatFlagBits::UInt32 begin
    SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
    SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
    SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
    SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SparseMemoryBindFlagBits::UInt32 begin
    SPARSE_MEMORY_BIND_METADATA_BIT = 1
    SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum PipelineStageFlagBits::UInt32 begin
    PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    PIPELINE_STAGE_TRANSFER_BIT = 4096
    PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    PIPELINE_STAGE_HOST_BIT = 16384
    PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
    PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
    PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
    PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
    PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
    PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432
    PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
end
struct CheckpointDataNV <: ReturnedOnly
    next::Ptr{Cvoid}
    stage::PipelineStageFlagBits
    checkpoint_marker::Ptr{Cvoid}
end

@cenum DeviceQueueCreateFlagBits::UInt32 begin
    DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
    DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum QueueFlagBits::UInt32 begin
    QUEUE_GRAPHICS_BIT = 1
    QUEUE_COMPUTE_BIT = 2
    QUEUE_TRANSFER_BIT = 4
    QUEUE_SPARSE_BINDING_BIT = 8
    QUEUE_PROTECTED_BIT = 16
    QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum MemoryPropertyFlagBits::UInt32 begin
    MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    MEMORY_PROPERTY_PROTECTED_BIT = 32
    MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
    MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum MemoryHeapFlagBits::UInt32 begin
    MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
    MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
    MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2
    MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ImageUsageFlagBits::UInt32 begin
    IMAGE_USAGE_TRANSFER_SRC_BIT = 1
    IMAGE_USAGE_TRANSFER_DST_BIT = 2
    IMAGE_USAGE_SAMPLED_BIT = 4
    IMAGE_USAGE_STORAGE_BIT = 8
    IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
    IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SampleCountFlagBits::UInt32 begin
    SAMPLE_COUNT_1_BIT = 1
    SAMPLE_COUNT_2_BIT = 2
    SAMPLE_COUNT_4_BIT = 4
    SAMPLE_COUNT_8_BIT = 8
    SAMPLE_COUNT_16_BIT = 16
    SAMPLE_COUNT_32_BIT = 32
    SAMPLE_COUNT_64_BIT = 64
    SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ImageCreateFlagBits::UInt32 begin
    IMAGE_CREATE_SPARSE_BINDING_BIT = 1
    IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
    IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
    IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
    IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
    IMAGE_CREATE_ALIAS_BIT = 1024
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
    IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
    IMAGE_CREATE_PROTECTED_BIT = 2048
    IMAGE_CREATE_DISJOINT_BIT = 512
    IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
    IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
    IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128
    IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256
    IMAGE_CREATE_DISJOINT_BIT_KHR = 512
    IMAGE_CREATE_ALIAS_BIT_KHR = 1024
    IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum FormatFeatureFlagBits::UInt32 begin
    FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
    FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
    FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
    FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
    FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
    FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
    FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
    FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
    FORMAT_FEATURE_BLIT_SRC_BIT = 1024
    FORMAT_FEATURE_BLIT_DST_BIT = 2048
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
    FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
    FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT =
        524288
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT =
        1048576
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT =
        2097152
    FORMAT_FEATURE_DISJOINT_BIT = 4194304
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
    FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
    FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
    FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384
    FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR =
        524288
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR =
        1048576
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR =
        2097152
    FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192
    FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum ImageAspectFlagBits::UInt32 begin
    IMAGE_ASPECT_COLOR_BIT = 1
    IMAGE_ASPECT_DEPTH_BIT = 2
    IMAGE_ASPECT_STENCIL_BIT = 4
    IMAGE_ASPECT_METADATA_BIT = 8
    IMAGE_ASPECT_PLANE_0_BIT = 16
    IMAGE_ASPECT_PLANE_1_BIT = 32
    IMAGE_ASPECT_PLANE_2_BIT = 64
    IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
    IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
    IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
    IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
    IMAGE_ASPECT_PLANE_0_BIT_KHR = 16
    IMAGE_ASPECT_PLANE_1_BIT_KHR = 32
    IMAGE_ASPECT_PLANE_2_BIT_KHR = 64
    IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum AccessFlagBits::UInt32 begin
    ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    ACCESS_INDEX_READ_BIT = 2
    ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    ACCESS_UNIFORM_READ_BIT = 8
    ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
    ACCESS_SHADER_READ_BIT = 32
    ACCESS_SHADER_WRITE_BIT = 64
    ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    ACCESS_TRANSFER_READ_BIT = 2048
    ACCESS_TRANSFER_WRITE_BIT = 4096
    ACCESS_HOST_READ_BIT = 8192
    ACCESS_HOST_WRITE_BIT = 16384
    ACCESS_MEMORY_READ_BIT = 32768
    ACCESS_MEMORY_WRITE_BIT = 65536
    ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
    ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
    ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
    ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
    ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
    ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304
    ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
end
@cenum SubpassContents::UInt32 begin
    SUBPASS_CONTENTS_INLINE = 0
    SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    SUBPASS_CONTENTS_MAX_ENUM = 2147483647
end
@cenum IndexType::UInt32 begin
    INDEX_TYPE_UINT16 = 0
    INDEX_TYPE_UINT32 = 1
    INDEX_TYPE_NONE_KHR = 1000165000
    INDEX_TYPE_UINT8_EXT = 1000265000
    INDEX_TYPE_NONE_NV = 1000165000
    INDEX_TYPE_MAX_ENUM = 2147483647
end
@cenum CommandBufferLevel::UInt32 begin
    COMMAND_BUFFER_LEVEL_PRIMARY = 0
    COMMAND_BUFFER_LEVEL_SECONDARY = 1
    COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
end
@cenum PipelineBindPoint::UInt32 begin
    PIPELINE_BIND_POINT_GRAPHICS = 0
    PIPELINE_BIND_POINT_COMPUTE = 1
    PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
    PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000
    PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
end
@cenum AttachmentStoreOp::UInt32 begin
    ATTACHMENT_STORE_OP_STORE = 0
    ATTACHMENT_STORE_OP_DONT_CARE = 1
    ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
    ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
end
@cenum AttachmentLoadOp::UInt32 begin
    ATTACHMENT_LOAD_OP_LOAD = 0
    ATTACHMENT_LOAD_OP_CLEAR = 1
    ATTACHMENT_LOAD_OP_DONT_CARE = 2
    ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
end
@cenum DescriptorType::UInt32 begin
    DESCRIPTOR_TYPE_SAMPLER = 0
    DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
    DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
end
@cenum SamplerMipmapMode::UInt32 begin
    SAMPLER_MIPMAP_MODE_NEAREST = 0
    SAMPLER_MIPMAP_MODE_LINEAR = 1
    SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
end
@cenum SamplerAddressMode::UInt32 begin
    SAMPLER_ADDRESS_MODE_REPEAT = 0
    SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4
    SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
end
@cenum Filter::UInt32 begin
    FILTER_NEAREST = 0
    FILTER_LINEAR = 1
    FILTER_CUBIC_IMG = 1000015000
    FILTER_CUBIC_EXT = 1000015000
    FILTER_MAX_ENUM = 2147483647
end
@cenum BorderColor::UInt32 begin
    BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    BORDER_COLOR_INT_OPAQUE_BLACK = 3
    BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    BORDER_COLOR_INT_OPAQUE_WHITE = 5
    BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
    BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
    BORDER_COLOR_MAX_ENUM = 2147483647
end
@cenum LogicOp::UInt32 begin
    LOGIC_OP_CLEAR = 0
    LOGIC_OP_AND = 1
    LOGIC_OP_AND_REVERSE = 2
    LOGIC_OP_COPY = 3
    LOGIC_OP_AND_INVERTED = 4
    LOGIC_OP_NO_OP = 5
    LOGIC_OP_XOR = 6
    LOGIC_OP_OR = 7
    LOGIC_OP_NOR = 8
    LOGIC_OP_EQUIVALENT = 9
    LOGIC_OP_INVERT = 10
    LOGIC_OP_OR_REVERSE = 11
    LOGIC_OP_COPY_INVERTED = 12
    LOGIC_OP_OR_INVERTED = 13
    LOGIC_OP_NAND = 14
    LOGIC_OP_SET = 15
    LOGIC_OP_MAX_ENUM = 2147483647
end
@cenum StencilOp::UInt32 begin
    STENCIL_OP_KEEP = 0
    STENCIL_OP_ZERO = 1
    STENCIL_OP_REPLACE = 2
    STENCIL_OP_INCREMENT_AND_CLAMP = 3
    STENCIL_OP_DECREMENT_AND_CLAMP = 4
    STENCIL_OP_INVERT = 5
    STENCIL_OP_INCREMENT_AND_WRAP = 6
    STENCIL_OP_DECREMENT_AND_WRAP = 7
    STENCIL_OP_MAX_ENUM = 2147483647
end
@cenum PolygonMode::UInt32 begin
    POLYGON_MODE_FILL = 0
    POLYGON_MODE_LINE = 1
    POLYGON_MODE_POINT = 2
    POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
    POLYGON_MODE_MAX_ENUM = 2147483647
end
@cenum PrimitiveTopology::UInt32 begin
    PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
    PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
end
@cenum VertexInputRate::UInt32 begin
    VERTEX_INPUT_RATE_VERTEX = 0
    VERTEX_INPUT_RATE_INSTANCE = 1
    VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
end
@cenum FrontFace::UInt32 begin
    FRONT_FACE_COUNTER_CLOCKWISE = 0
    FRONT_FACE_CLOCKWISE = 1
    FRONT_FACE_MAX_ENUM = 2147483647
end
@cenum DynamicState::UInt32 begin
    DYNAMIC_STATE_VIEWPORT = 0
    DYNAMIC_STATE_SCISSOR = 1
    DYNAMIC_STATE_LINE_WIDTH = 2
    DYNAMIC_STATE_DEPTH_BIAS = 3
    DYNAMIC_STATE_BLEND_CONSTANTS = 4
    DYNAMIC_STATE_DEPTH_BOUNDS = 5
    DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
    DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
    DYNAMIC_STATE_STENCIL_REFERENCE = 8
    DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
    DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
    DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
    DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
    DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
    DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
    DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
    DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
    DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
    DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
    DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
    DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
    DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
    DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
    DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
    DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
    DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
    DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
    DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
    DYNAMIC_STATE_MAX_ENUM = 2147483647
end
@cenum CompareOp::UInt32 begin
    COMPARE_OP_NEVER = 0
    COMPARE_OP_LESS = 1
    COMPARE_OP_EQUAL = 2
    COMPARE_OP_LESS_OR_EQUAL = 3
    COMPARE_OP_GREATER = 4
    COMPARE_OP_NOT_EQUAL = 5
    COMPARE_OP_GREATER_OR_EQUAL = 6
    COMPARE_OP_ALWAYS = 7
    COMPARE_OP_MAX_ENUM = 2147483647
end
@cenum BlendOp::UInt32 begin
    BLEND_OP_ADD = 0
    BLEND_OP_SUBTRACT = 1
    BLEND_OP_REVERSE_SUBTRACT = 2
    BLEND_OP_MIN = 3
    BLEND_OP_MAX = 4
    BLEND_OP_ZERO_EXT = 1000148000
    BLEND_OP_SRC_EXT = 1000148001
    BLEND_OP_DST_EXT = 1000148002
    BLEND_OP_SRC_OVER_EXT = 1000148003
    BLEND_OP_DST_OVER_EXT = 1000148004
    BLEND_OP_SRC_IN_EXT = 1000148005
    BLEND_OP_DST_IN_EXT = 1000148006
    BLEND_OP_SRC_OUT_EXT = 1000148007
    BLEND_OP_DST_OUT_EXT = 1000148008
    BLEND_OP_SRC_ATOP_EXT = 1000148009
    BLEND_OP_DST_ATOP_EXT = 1000148010
    BLEND_OP_XOR_EXT = 1000148011
    BLEND_OP_MULTIPLY_EXT = 1000148012
    BLEND_OP_SCREEN_EXT = 1000148013
    BLEND_OP_OVERLAY_EXT = 1000148014
    BLEND_OP_DARKEN_EXT = 1000148015
    BLEND_OP_LIGHTEN_EXT = 1000148016
    BLEND_OP_COLORDODGE_EXT = 1000148017
    BLEND_OP_COLORBURN_EXT = 1000148018
    BLEND_OP_HARDLIGHT_EXT = 1000148019
    BLEND_OP_SOFTLIGHT_EXT = 1000148020
    BLEND_OP_DIFFERENCE_EXT = 1000148021
    BLEND_OP_EXCLUSION_EXT = 1000148022
    BLEND_OP_INVERT_EXT = 1000148023
    BLEND_OP_INVERT_RGB_EXT = 1000148024
    BLEND_OP_LINEARDODGE_EXT = 1000148025
    BLEND_OP_LINEARBURN_EXT = 1000148026
    BLEND_OP_VIVIDLIGHT_EXT = 1000148027
    BLEND_OP_LINEARLIGHT_EXT = 1000148028
    BLEND_OP_PINLIGHT_EXT = 1000148029
    BLEND_OP_HARDMIX_EXT = 1000148030
    BLEND_OP_HSL_HUE_EXT = 1000148031
    BLEND_OP_HSL_SATURATION_EXT = 1000148032
    BLEND_OP_HSL_COLOR_EXT = 1000148033
    BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
    BLEND_OP_PLUS_EXT = 1000148035
    BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
    BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
    BLEND_OP_PLUS_DARKER_EXT = 1000148038
    BLEND_OP_MINUS_EXT = 1000148039
    BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
    BLEND_OP_CONTRAST_EXT = 1000148041
    BLEND_OP_INVERT_OVG_EXT = 1000148042
    BLEND_OP_RED_EXT = 1000148043
    BLEND_OP_GREEN_EXT = 1000148044
    BLEND_OP_BLUE_EXT = 1000148045
    BLEND_OP_MAX_ENUM = 2147483647
end
@cenum BlendFactor::UInt32 begin
    BLEND_FACTOR_ZERO = 0
    BLEND_FACTOR_ONE = 1
    BLEND_FACTOR_SRC_COLOR = 2
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    BLEND_FACTOR_DST_COLOR = 4
    BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    BLEND_FACTOR_SRC_ALPHA = 6
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    BLEND_FACTOR_DST_ALPHA = 8
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    BLEND_FACTOR_CONSTANT_COLOR = 10
    BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    BLEND_FACTOR_CONSTANT_ALPHA = 12
    BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    BLEND_FACTOR_SRC1_COLOR = 15
    BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    BLEND_FACTOR_SRC1_ALPHA = 17
    BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    BLEND_FACTOR_MAX_ENUM = 2147483647
end
@cenum ImageViewType::UInt32 begin
    IMAGE_VIEW_TYPE_1D = 0
    IMAGE_VIEW_TYPE_2D = 1
    IMAGE_VIEW_TYPE_3D = 2
    IMAGE_VIEW_TYPE_CUBE = 3
    IMAGE_VIEW_TYPE_1D_ARRAY = 4
    IMAGE_VIEW_TYPE_2D_ARRAY = 5
    IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
    IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
end
@cenum ComponentSwizzle::UInt32 begin
    COMPONENT_SWIZZLE_IDENTITY = 0
    COMPONENT_SWIZZLE_ZERO = 1
    COMPONENT_SWIZZLE_ONE = 2
    COMPONENT_SWIZZLE_R = 3
    COMPONENT_SWIZZLE_G = 4
    COMPONENT_SWIZZLE_B = 5
    COMPONENT_SWIZZLE_A = 6
    COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
end
@cenum SharingMode::UInt32 begin
    SHARING_MODE_EXCLUSIVE = 0
    SHARING_MODE_CONCURRENT = 1
    SHARING_MODE_MAX_ENUM = 2147483647
end
@cenum QueryType::UInt32 begin
    QUERY_TYPE_OCCLUSION = 0
    QUERY_TYPE_PIPELINE_STATISTICS = 1
    QUERY_TYPE_TIMESTAMP = 2
    QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
    QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000
    QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000
    QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
    QUERY_TYPE_MAX_ENUM = 2147483647
end
@cenum PhysicalDeviceType::UInt32 begin
    PHYSICAL_DEVICE_TYPE_OTHER = 0
    PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    PHYSICAL_DEVICE_TYPE_CPU = 4
    PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
end
@cenum ImageType::UInt32 begin
    IMAGE_TYPE_1D = 0
    IMAGE_TYPE_2D = 1
    IMAGE_TYPE_3D = 2
    IMAGE_TYPE_MAX_ENUM = 2147483647
end
@cenum ImageTiling::UInt32 begin
    IMAGE_TILING_OPTIMAL = 0
    IMAGE_TILING_LINEAR = 1
    IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
    IMAGE_TILING_MAX_ENUM = 2147483647
end
@cenum Format::UInt32 begin
    FORMAT_UNDEFINED = 0
    FORMAT_R4G4_UNORM_PACK8 = 1
    FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    FORMAT_R5G6B5_UNORM_PACK16 = 4
    FORMAT_B5G6R5_UNORM_PACK16 = 5
    FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    FORMAT_R8_UNORM = 9
    FORMAT_R8_SNORM = 10
    FORMAT_R8_USCALED = 11
    FORMAT_R8_SSCALED = 12
    FORMAT_R8_UINT = 13
    FORMAT_R8_SINT = 14
    FORMAT_R8_SRGB = 15
    FORMAT_R8G8_UNORM = 16
    FORMAT_R8G8_SNORM = 17
    FORMAT_R8G8_USCALED = 18
    FORMAT_R8G8_SSCALED = 19
    FORMAT_R8G8_UINT = 20
    FORMAT_R8G8_SINT = 21
    FORMAT_R8G8_SRGB = 22
    FORMAT_R8G8B8_UNORM = 23
    FORMAT_R8G8B8_SNORM = 24
    FORMAT_R8G8B8_USCALED = 25
    FORMAT_R8G8B8_SSCALED = 26
    FORMAT_R8G8B8_UINT = 27
    FORMAT_R8G8B8_SINT = 28
    FORMAT_R8G8B8_SRGB = 29
    FORMAT_B8G8R8_UNORM = 30
    FORMAT_B8G8R8_SNORM = 31
    FORMAT_B8G8R8_USCALED = 32
    FORMAT_B8G8R8_SSCALED = 33
    FORMAT_B8G8R8_UINT = 34
    FORMAT_B8G8R8_SINT = 35
    FORMAT_B8G8R8_SRGB = 36
    FORMAT_R8G8B8A8_UNORM = 37
    FORMAT_R8G8B8A8_SNORM = 38
    FORMAT_R8G8B8A8_USCALED = 39
    FORMAT_R8G8B8A8_SSCALED = 40
    FORMAT_R8G8B8A8_UINT = 41
    FORMAT_R8G8B8A8_SINT = 42
    FORMAT_R8G8B8A8_SRGB = 43
    FORMAT_B8G8R8A8_UNORM = 44
    FORMAT_B8G8R8A8_SNORM = 45
    FORMAT_B8G8R8A8_USCALED = 46
    FORMAT_B8G8R8A8_SSCALED = 47
    FORMAT_B8G8R8A8_UINT = 48
    FORMAT_B8G8R8A8_SINT = 49
    FORMAT_B8G8R8A8_SRGB = 50
    FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    FORMAT_A8B8G8R8_UINT_PACK32 = 55
    FORMAT_A8B8G8R8_SINT_PACK32 = 56
    FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    FORMAT_A2R10G10B10_UINT_PACK32 = 62
    FORMAT_A2R10G10B10_SINT_PACK32 = 63
    FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    FORMAT_A2B10G10R10_UINT_PACK32 = 68
    FORMAT_A2B10G10R10_SINT_PACK32 = 69
    FORMAT_R16_UNORM = 70
    FORMAT_R16_SNORM = 71
    FORMAT_R16_USCALED = 72
    FORMAT_R16_SSCALED = 73
    FORMAT_R16_UINT = 74
    FORMAT_R16_SINT = 75
    FORMAT_R16_SFLOAT = 76
    FORMAT_R16G16_UNORM = 77
    FORMAT_R16G16_SNORM = 78
    FORMAT_R16G16_USCALED = 79
    FORMAT_R16G16_SSCALED = 80
    FORMAT_R16G16_UINT = 81
    FORMAT_R16G16_SINT = 82
    FORMAT_R16G16_SFLOAT = 83
    FORMAT_R16G16B16_UNORM = 84
    FORMAT_R16G16B16_SNORM = 85
    FORMAT_R16G16B16_USCALED = 86
    FORMAT_R16G16B16_SSCALED = 87
    FORMAT_R16G16B16_UINT = 88
    FORMAT_R16G16B16_SINT = 89
    FORMAT_R16G16B16_SFLOAT = 90
    FORMAT_R16G16B16A16_UNORM = 91
    FORMAT_R16G16B16A16_SNORM = 92
    FORMAT_R16G16B16A16_USCALED = 93
    FORMAT_R16G16B16A16_SSCALED = 94
    FORMAT_R16G16B16A16_UINT = 95
    FORMAT_R16G16B16A16_SINT = 96
    FORMAT_R16G16B16A16_SFLOAT = 97
    FORMAT_R32_UINT = 98
    FORMAT_R32_SINT = 99
    FORMAT_R32_SFLOAT = 100
    FORMAT_R32G32_UINT = 101
    FORMAT_R32G32_SINT = 102
    FORMAT_R32G32_SFLOAT = 103
    FORMAT_R32G32B32_UINT = 104
    FORMAT_R32G32B32_SINT = 105
    FORMAT_R32G32B32_SFLOAT = 106
    FORMAT_R32G32B32A32_UINT = 107
    FORMAT_R32G32B32A32_SINT = 108
    FORMAT_R32G32B32A32_SFLOAT = 109
    FORMAT_R64_UINT = 110
    FORMAT_R64_SINT = 111
    FORMAT_R64_SFLOAT = 112
    FORMAT_R64G64_UINT = 113
    FORMAT_R64G64_SINT = 114
    FORMAT_R64G64_SFLOAT = 115
    FORMAT_R64G64B64_UINT = 116
    FORMAT_R64G64B64_SINT = 117
    FORMAT_R64G64B64_SFLOAT = 118
    FORMAT_R64G64B64A64_UINT = 119
    FORMAT_R64G64B64A64_SINT = 120
    FORMAT_R64G64B64A64_SFLOAT = 121
    FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    FORMAT_D16_UNORM = 124
    FORMAT_X8_D24_UNORM_PACK32 = 125
    FORMAT_D32_SFLOAT = 126
    FORMAT_S8_UINT = 127
    FORMAT_D16_UNORM_S8_UINT = 128
    FORMAT_D24_UNORM_S8_UINT = 129
    FORMAT_D32_SFLOAT_S8_UINT = 130
    FORMAT_BC1_RGB_UNORM_BLOCK = 131
    FORMAT_BC1_RGB_SRGB_BLOCK = 132
    FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    FORMAT_BC2_UNORM_BLOCK = 135
    FORMAT_BC2_SRGB_BLOCK = 136
    FORMAT_BC3_UNORM_BLOCK = 137
    FORMAT_BC3_SRGB_BLOCK = 138
    FORMAT_BC4_UNORM_BLOCK = 139
    FORMAT_BC4_SNORM_BLOCK = 140
    FORMAT_BC5_UNORM_BLOCK = 141
    FORMAT_BC5_SNORM_BLOCK = 142
    FORMAT_BC6H_UFLOAT_BLOCK = 143
    FORMAT_BC6H_SFLOAT_BLOCK = 144
    FORMAT_BC7_UNORM_BLOCK = 145
    FORMAT_BC7_SRGB_BLOCK = 146
    FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    FORMAT_EAC_R11_UNORM_BLOCK = 153
    FORMAT_EAC_R11_SNORM_BLOCK = 154
    FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    FORMAT_ASTC_12x12_SRGB_BLOCK = 184
    FORMAT_G8B8G8R8_422_UNORM = 1000156000
    FORMAT_B8G8R8G8_422_UNORM = 1000156001
    FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
    FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
    FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
    FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
    FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
    FORMAT_R10X6_UNORM_PACK16 = 1000156007
    FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
    FORMAT_R12X4_UNORM_PACK16 = 1000156017
    FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
    FORMAT_G16B16G16R16_422_UNORM = 1000156027
    FORMAT_B16G16R16G16_422_UNORM = 1000156028
    FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
    FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
    FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
    FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
    FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
    FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
    FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
    FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
    FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
    FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
    FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
    FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
    FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
    FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
    FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
    FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
    FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
    FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
    FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
    FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
    FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
    FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
    FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
    FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
    FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
    FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
    FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
    FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
    FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
    FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000
    FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001
    FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002
    FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003
    FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004
    FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005
    FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006
    FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007
    FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016
    FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017
    FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026
    FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027
    FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028
    FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029
    FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030
    FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031
    FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032
    FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033
    FORMAT_MAX_ENUM = 2147483647
end
struct SurfaceFormatKHR <: ReturnedOnly
    format::Format
    color_space::ColorSpaceKHR
end

struct SurfaceFormat2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    surface_format::SurfaceFormatKHR
end

@cenum InternalAllocationType::UInt32 begin
    INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
    INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
end
@cenum SystemAllocationScope::UInt32 begin
    SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
    SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
    SYSTEM_ALLOCATION_SCOPE_CACHE = 2
    SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
    SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
    SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
end
@cenum PipelineCacheHeaderVersion::UInt32 begin
    PIPELINE_CACHE_HEADER_VERSION_ONE = 1
    PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
end
@cenum VendorId::UInt32 begin
    VENDOR_ID_VIV = 65537
    VENDOR_ID_VSI = 65538
    VENDOR_ID_KAZAN = 65539
    VENDOR_ID_CODEPLAY = 65540
    VENDOR_ID_MESA = 65541
    VENDOR_ID_MAX_ENUM = 2147483647
end
@cenum ObjectType::UInt32 begin
    OBJECT_TYPE_UNKNOWN = 0
    OBJECT_TYPE_INSTANCE = 1
    OBJECT_TYPE_PHYSICAL_DEVICE = 2
    OBJECT_TYPE_DEVICE = 3
    OBJECT_TYPE_QUEUE = 4
    OBJECT_TYPE_SEMAPHORE = 5
    OBJECT_TYPE_COMMAND_BUFFER = 6
    OBJECT_TYPE_FENCE = 7
    OBJECT_TYPE_DEVICE_MEMORY = 8
    OBJECT_TYPE_BUFFER = 9
    OBJECT_TYPE_IMAGE = 10
    OBJECT_TYPE_EVENT = 11
    OBJECT_TYPE_QUERY_POOL = 12
    OBJECT_TYPE_BUFFER_VIEW = 13
    OBJECT_TYPE_IMAGE_VIEW = 14
    OBJECT_TYPE_SHADER_MODULE = 15
    OBJECT_TYPE_PIPELINE_CACHE = 16
    OBJECT_TYPE_PIPELINE_LAYOUT = 17
    OBJECT_TYPE_RENDER_PASS = 18
    OBJECT_TYPE_PIPELINE = 19
    OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
    OBJECT_TYPE_SAMPLER = 21
    OBJECT_TYPE_DESCRIPTOR_POOL = 22
    OBJECT_TYPE_DESCRIPTOR_SET = 23
    OBJECT_TYPE_FRAMEBUFFER = 24
    OBJECT_TYPE_COMMAND_POOL = 25
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
    OBJECT_TYPE_SURFACE_KHR = 1000000000
    OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
    OBJECT_TYPE_DISPLAY_KHR = 1000002000
    OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
    OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
    OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
    OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000
    OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
    OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
    OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
    OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
    OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000
    OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
    OBJECT_TYPE_MAX_ENUM = 2147483647
end
@cenum ImageLayout::UInt32 begin
    IMAGE_LAYOUT_UNDEFINED = 0
    IMAGE_LAYOUT_GENERAL = 1
    IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
    IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
    IMAGE_LAYOUT_PREINITIALIZED = 8
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
    IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
    IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
    IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
    IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003
    IMAGE_LAYOUT_MAX_ENUM = 2147483647
end
@cenum StructureType::UInt32 begin
    STRUCTURE_TYPE_APPLICATION_INFO = 0
    STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
    STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
    STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
    STRUCTURE_TYPE_SUBMIT_INFO = 4
    STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
    STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
    STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
    STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
    STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
    STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
    STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
    STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
    STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
    STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
    STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
    STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
    STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
    STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
    STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
    STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
    STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
    STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
    STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
    STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
    STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
    STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
    STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
    STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
    STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
    STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
    STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
    STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
    STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
    STRUCTURE_TYPE_MEMORY_BARRIER = 46
    STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
    STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
    STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
    STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
    STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
    STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
    STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
    STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
    STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
    STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
    STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
    STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
    STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
    STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
    STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
    STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
    STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
    STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
    STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
    STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
    STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
    STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
    STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
    STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
    STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
    STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
    STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
    STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
    STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
    STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
    STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
    STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
    STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
    STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
    STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
    STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
    STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
    STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
    STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
    STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
    STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
    STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
    STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
    STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
    STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
    STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
    STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
    STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
    STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
    STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
    STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
    STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
    STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
    STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
    STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
    STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
    STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
    STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
    STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
    STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
    STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
    STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
    STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
    STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
    STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
    STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
    STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
    STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
    STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
    STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
    STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
    STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
    STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
    STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
    STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
    STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
    STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
    STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
    STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
    STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
    STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
    STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
    STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
    STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
    STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
    STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
    STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
    STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
    STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
    STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
    STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
    STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
    STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
    STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
    STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
    STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
    STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
    STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
    STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
    STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
    STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
    STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV =
        1000240000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
    STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
    STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
    STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
    STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
    STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
    STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
    STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT =
        1000276000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
    STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
    STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
    STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
    STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
    STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
    STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
    STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
    STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
    STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
    STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000
    STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000
    STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005
    STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000
    STRUCTURE_TYPE_MAX_ENUM = 2147483647
end
@cenum Result::Int32 begin
    SUCCESS = 0
    NOT_READY = 1
    TIMEOUT = 2
    EVENT_SET = 3
    EVENT_RESET = 4
    INCOMPLETE = 5
    ERROR_OUT_OF_HOST_MEMORY = -1
    ERROR_OUT_OF_DEVICE_MEMORY = -2
    ERROR_INITIALIZATION_FAILED = -3
    ERROR_DEVICE_LOST = -4
    ERROR_MEMORY_MAP_FAILED = -5
    ERROR_LAYER_NOT_PRESENT = -6
    ERROR_EXTENSION_NOT_PRESENT = -7
    ERROR_FEATURE_NOT_PRESENT = -8
    ERROR_INCOMPATIBLE_DRIVER = -9
    ERROR_TOO_MANY_OBJECTS = -10
    ERROR_FORMAT_NOT_SUPPORTED = -11
    ERROR_FRAGMENTED_POOL = -12
    ERROR_UNKNOWN = -13
    ERROR_OUT_OF_POOL_MEMORY = -1000069000
    ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
    ERROR_FRAGMENTATION = -1000161000
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
    ERROR_SURFACE_LOST_KHR = -1000000000
    ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
    SUBOPTIMAL_KHR = 1000001003
    ERROR_OUT_OF_DATE_KHR = -1000001004
    ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
    ERROR_VALIDATION_FAILED_EXT = -1000011001
    ERROR_INVALID_SHADER_NV = -1000012000
    ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
    ERROR_NOT_PERMITTED_EXT = -1000174001
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
    THREAD_IDLE_KHR = 1000268000
    THREAD_DONE_KHR = 1000268001
    OPERATION_DEFERRED_KHR = 1000268002
    OPERATION_NOT_DEFERRED_KHR = 1000268003
    PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000
    ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003
    ERROR_FRAGMENTATION_EXT = -1000161000
    ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000
    ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    RESULT_MAX_ENUM = 2147483647
end
const PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = Ptr{Cvoid}
const PFN_vkCmdTraceRaysIndirectKHR = Ptr{Cvoid}
const PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = Ptr{Cvoid}
const PFN_vkGetAccelerationStructureDeviceAddressKHR = Ptr{Cvoid}
const PFN_vkCreateRayTracingPipelinesKHR = Ptr{Cvoid}
const PFN_vkCmdTraceRaysKHR = Ptr{Cvoid}
const PFN_vkCmdCopyMemoryToAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkCmdCopyAccelerationStructureToMemoryKHR = Ptr{Cvoid}
const PFN_vkCmdCopyAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkWriteAccelerationStructuresPropertiesKHR = Ptr{Cvoid}
const PFN_vkCopyMemoryToAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkCopyAccelerationStructureToMemoryKHR = Ptr{Cvoid}
const PFN_vkCopyAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkBuildAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkCmdBuildAccelerationStructureIndirectKHR = Ptr{Cvoid}
const PFN_vkCmdBuildAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkGetAccelerationStructureMemoryRequirementsKHR = Ptr{Cvoid}
const PFN_vkCreateAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkDeferredOperationJoinKHR = Ptr{Cvoid}
const PFN_vkGetDeferredOperationResultKHR = Ptr{Cvoid}
const PFN_vkGetDeferredOperationMaxConcurrencyKHR = Ptr{Cvoid}
const PFN_vkDestroyDeferredOperationKHR = Ptr{Cvoid}
const PFN_vkCreateDeferredOperationKHR = Ptr{Cvoid}
mutable struct DeferredOperationKHR <: Handle
    handle::VkDeferredOperationKHR
end

const DeferredOperationKHR_T = Cvoid
const PFN_vkCreateStreamDescriptorSurfaceGGP = Ptr{Cvoid}
const PFN_vkGetRandROutputDisplayEXT = Ptr{Cvoid}
const PFN_vkAcquireXlibDisplayEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR = Ptr{Cvoid}
const PFN_vkCreateXlibSurfaceKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR = Ptr{Cvoid}
const PFN_vkCreateXcbSurfaceKHR = Ptr{Cvoid}
const PFN_vkGetDeviceGroupSurfacePresentModes2EXT = Ptr{Cvoid}
const PFN_vkReleaseFullScreenExclusiveModeEXT = Ptr{Cvoid}
const PFN_vkAcquireFullScreenExclusiveModeEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT = Ptr{Cvoid}
const PFN_vkGetMemoryWin32HandleNV = Ptr{Cvoid}
const PFN_vkGetFenceWin32HandleKHR = Ptr{Cvoid}
const PFN_vkImportFenceWin32HandleKHR = Ptr{Cvoid}
const PFN_vkGetSemaphoreWin32HandleKHR = Ptr{Cvoid}
const PFN_vkImportSemaphoreWin32HandleKHR = Ptr{Cvoid}
const PFN_vkGetMemoryWin32HandlePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetMemoryWin32HandleKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR = Ptr{Cvoid}
const PFN_vkCreateWin32SurfaceKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR = Ptr{Cvoid}
const PFN_vkCreateWaylandSurfaceKHR = Ptr{Cvoid}
const PFN_vkCreateViSurfaceNN = Ptr{Cvoid}
const PFN_vkCreateMetalSurfaceEXT = Ptr{Cvoid}
const CAMetalLayer = Cvoid
const PFN_vkCreateMacOSSurfaceMVK = Ptr{Cvoid}
const PFN_vkCreateIOSSurfaceMVK = Ptr{Cvoid}
const PFN_vkCreateImagePipeSurfaceFUCHSIA = Ptr{Cvoid}
const PFN_vkGetMemoryAndroidHardwareBufferANDROID = Ptr{Cvoid}
const PFN_vkGetAndroidHardwareBufferPropertiesANDROID = Ptr{Cvoid}
const AHardwareBuffer = Cvoid
const PFN_vkCreateAndroidSurfaceKHR = Ptr{Cvoid}
const ANativeWindow = Cvoid
const PFN_vkGetPrivateDataEXT = Ptr{Cvoid}
const PFN_vkSetPrivateDataEXT = Ptr{Cvoid}
const PFN_vkDestroyPrivateDataSlotEXT = Ptr{Cvoid}
const PFN_vkCreatePrivateDataSlotEXT = Ptr{Cvoid}
mutable struct PrivateDataSlotEXT <: Handle
    handle::VkPrivateDataSlotEXT
end

const PrivateDataSlotEXT_T = Cvoid
const PFN_vkDestroyIndirectCommandsLayoutNV = Ptr{Cvoid}
const PFN_vkCreateIndirectCommandsLayoutNV = Ptr{Cvoid}
const PFN_vkCmdBindPipelineShaderGroupNV = Ptr{Cvoid}
const PFN_vkCmdExecuteGeneratedCommandsNV = Ptr{Cvoid}
const PFN_vkCmdPreprocessGeneratedCommandsNV = Ptr{Cvoid}
const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = Ptr{Cvoid}
mutable struct IndirectCommandsLayoutNV <: Handle
    handle::VkIndirectCommandsLayoutNV
end

const IndirectCommandsLayoutNV_T = Cvoid
const PFN_vkCmdSetStencilOpEXT = Ptr{Cvoid}
const PFN_vkCmdSetStencilTestEnableEXT = Ptr{Cvoid}
const PFN_vkCmdSetDepthBoundsTestEnableEXT = Ptr{Cvoid}
const PFN_vkCmdSetDepthCompareOpEXT = Ptr{Cvoid}
const PFN_vkCmdSetDepthWriteEnableEXT = Ptr{Cvoid}
const PFN_vkCmdSetDepthTestEnableEXT = Ptr{Cvoid}
const PFN_vkCmdBindVertexBuffers2EXT = Ptr{Cvoid}
const PFN_vkCmdSetScissorWithCountEXT = Ptr{Cvoid}
const PFN_vkCmdSetViewportWithCountEXT = Ptr{Cvoid}
const PFN_vkCmdSetPrimitiveTopologyEXT = Ptr{Cvoid}
const PFN_vkCmdSetFrontFaceEXT = Ptr{Cvoid}
const PFN_vkCmdSetCullModeEXT = Ptr{Cvoid}
const PFN_vkResetQueryPoolEXT = Ptr{Cvoid}
const PFN_vkCmdSetLineStippleEXT = Ptr{Cvoid}
const PFN_vkCreateHeadlessSurfaceEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceToolPropertiesEXT = Ptr{Cvoid}
const PFN_vkGetBufferDeviceAddressEXT = Ptr{Cvoid}
const PFN_vkSetLocalDimmingAMD = Ptr{Cvoid}
const PFN_vkGetPerformanceParameterINTEL = Ptr{Cvoid}
const PFN_vkQueueSetPerformanceConfigurationINTEL = Ptr{Cvoid}
const PFN_vkReleasePerformanceConfigurationINTEL = Ptr{Cvoid}
const PFN_vkAcquirePerformanceConfigurationINTEL = Ptr{Cvoid}
const PFN_vkCmdSetPerformanceOverrideINTEL = Ptr{Cvoid}
const PFN_vkCmdSetPerformanceStreamMarkerINTEL = Ptr{Cvoid}
const PFN_vkCmdSetPerformanceMarkerINTEL = Ptr{Cvoid}
const PFN_vkUninitializePerformanceApiINTEL = Ptr{Cvoid}
const PFN_vkInitializePerformanceApiINTEL = Ptr{Cvoid}
mutable struct PerformanceConfigurationINTEL <: Handle
    handle::VkPerformanceConfigurationINTEL
end

const PerformanceConfigurationINTEL_T = Cvoid
const PFN_vkGetQueueCheckpointDataNV = Ptr{Cvoid}
const PFN_vkCmdSetCheckpointNV = Ptr{Cvoid}
const PFN_vkCmdSetExclusiveScissorNV = Ptr{Cvoid}
const PFN_vkCmdDrawMeshTasksIndirectCountNV = Ptr{Cvoid}
const PFN_vkCmdDrawMeshTasksIndirectNV = Ptr{Cvoid}
const PFN_vkCmdDrawMeshTasksNV = Ptr{Cvoid}
const PFN_vkGetCalibratedTimestampsEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = Ptr{Cvoid}
const PFN_vkCmdWriteBufferMarkerAMD = Ptr{Cvoid}
const PFN_vkGetMemoryHostPointerPropertiesEXT = Ptr{Cvoid}
const PFN_vkCompileDeferredNV = Ptr{Cvoid}
const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = Ptr{Cvoid}
const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = Ptr{Cvoid}
const PFN_vkGetAccelerationStructureHandleNV = Ptr{Cvoid}
const PFN_vkGetRayTracingShaderGroupHandlesNV = Ptr{Cvoid}
const PFN_vkGetRayTracingShaderGroupHandlesKHR = Ptr{Cvoid}
const PFN_vkCreateRayTracingPipelinesNV = Ptr{Cvoid}
const PFN_vkCmdTraceRaysNV = Ptr{Cvoid}
const PFN_vkCmdCopyAccelerationStructureNV = Ptr{Cvoid}
const PFN_vkCmdBuildAccelerationStructureNV = Ptr{Cvoid}
const PFN_vkBindAccelerationStructureMemoryNV = Ptr{Cvoid}
const PFN_vkBindAccelerationStructureMemoryKHR = Ptr{Cvoid}
const PFN_vkGetAccelerationStructureMemoryRequirementsNV = Ptr{Cvoid}
const PFN_vkDestroyAccelerationStructureNV = Ptr{Cvoid}
const PFN_vkDestroyAccelerationStructureKHR = Ptr{Cvoid}
const PFN_vkCreateAccelerationStructureNV = Ptr{Cvoid}
mutable struct AccelerationStructureKHR <: Handle
    handle::VkAccelerationStructureKHR
end

const AccelerationStructureKHR_T = Cvoid
const PFN_vkCmdSetCoarseSampleOrderNV = Ptr{Cvoid}
const PFN_vkCmdSetViewportShadingRatePaletteNV = Ptr{Cvoid}
const PFN_vkCmdBindShadingRateImageNV = Ptr{Cvoid}
const PFN_vkGetValidationCacheDataEXT = Ptr{Cvoid}
const PFN_vkMergeValidationCachesEXT = Ptr{Cvoid}
const PFN_vkDestroyValidationCacheEXT = Ptr{Cvoid}
const PFN_vkCreateValidationCacheEXT = Ptr{Cvoid}
mutable struct ValidationCacheEXT <: Handle
    handle::VkValidationCacheEXT
end

const ValidationCacheEXT_T = Cvoid
const PFN_vkGetImageDrmFormatModifierPropertiesEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = Ptr{Cvoid}
const PFN_vkCmdSetSampleLocationsEXT = Ptr{Cvoid}
const PFN_vkSubmitDebugUtilsMessageEXT = Ptr{Cvoid}
const PFN_vkDestroyDebugUtilsMessengerEXT = Ptr{Cvoid}
const PFN_vkCreateDebugUtilsMessengerEXT = Ptr{Cvoid}
const PFN_vkCmdInsertDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkCmdEndDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkCmdBeginDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkQueueInsertDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkQueueEndDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkQueueBeginDebugUtilsLabelEXT = Ptr{Cvoid}
const PFN_vkSetDebugUtilsObjectTagEXT = Ptr{Cvoid}
const PFN_vkSetDebugUtilsObjectNameEXT = Ptr{Cvoid}
const PFN_vkDebugUtilsMessengerCallbackEXT = Ptr{Cvoid}
mutable struct DebugUtilsMessengerEXT <: Handle
    handle::VkDebugUtilsMessengerEXT
end

const DebugUtilsMessengerEXT_T = Cvoid
const PFN_vkSetHdrMetadataEXT = Ptr{Cvoid}
const PFN_vkCmdSetDiscardRectangleEXT = Ptr{Cvoid}
const PFN_vkGetPastPresentationTimingGOOGLE = Ptr{Cvoid}
const PFN_vkGetRefreshCycleDurationGOOGLE = Ptr{Cvoid}
const PFN_vkGetSwapchainCounterEXT = Ptr{Cvoid}
const PFN_vkRegisterDisplayEventEXT = Ptr{Cvoid}
const PFN_vkRegisterDeviceEventEXT = Ptr{Cvoid}
const PFN_vkDisplayPowerControlEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = Ptr{Cvoid}
const PFN_vkReleaseDisplayEXT = Ptr{Cvoid}
const PFN_vkCmdSetViewportWScalingNV = Ptr{Cvoid}
const PFN_vkCmdEndConditionalRenderingEXT = Ptr{Cvoid}
const PFN_vkCmdBeginConditionalRenderingEXT = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = Ptr{Cvoid}
const PFN_vkGetShaderInfoAMD = Ptr{Cvoid}
const PFN_vkCmdDrawIndexedIndirectCountAMD = Ptr{Cvoid}
const PFN_vkCmdDrawIndirectCountAMD = Ptr{Cvoid}
const PFN_vkGetImageViewAddressNVX = Ptr{Cvoid}
const PFN_vkGetImageViewHandleNVX = Ptr{Cvoid}
const PFN_vkCmdDrawIndirectByteCountEXT = Ptr{Cvoid}
const PFN_vkCmdEndQueryIndexedEXT = Ptr{Cvoid}
const PFN_vkCmdBeginQueryIndexedEXT = Ptr{Cvoid}
const PFN_vkCmdEndTransformFeedbackEXT = Ptr{Cvoid}
const PFN_vkCmdBeginTransformFeedbackEXT = Ptr{Cvoid}
const PFN_vkCmdBindTransformFeedbackBuffersEXT = Ptr{Cvoid}
const PFN_vkCmdDebugMarkerInsertEXT = Ptr{Cvoid}
const PFN_vkCmdDebugMarkerEndEXT = Ptr{Cvoid}
const PFN_vkCmdDebugMarkerBeginEXT = Ptr{Cvoid}
const PFN_vkDebugMarkerSetObjectNameEXT = Ptr{Cvoid}
const PFN_vkDebugMarkerSetObjectTagEXT = Ptr{Cvoid}
const PFN_vkDebugReportMessageEXT = Ptr{Cvoid}
const PFN_vkDestroyDebugReportCallbackEXT = Ptr{Cvoid}
const PFN_vkCreateDebugReportCallbackEXT = Ptr{Cvoid}
const PFN_vkDebugReportCallbackEXT = Ptr{Cvoid}
mutable struct DebugReportCallbackEXT <: Handle
    handle::VkDebugReportCallbackEXT
end

const DebugReportCallbackEXT_T = Cvoid
const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = Ptr{Cvoid}
const PFN_vkGetPipelineExecutableStatisticsKHR = Ptr{Cvoid}
const PFN_vkGetPipelineExecutablePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = Ptr{Cvoid}
const PFN_vkGetBufferOpaqueCaptureAddressKHR = Ptr{Cvoid}
const PFN_vkGetBufferDeviceAddressKHR = Ptr{Cvoid}
const PFN_vkSignalSemaphoreKHR = Ptr{Cvoid}
const PFN_vkWaitSemaphoresKHR = Ptr{Cvoid}
const PFN_vkGetSemaphoreCounterValueKHR = Ptr{Cvoid}
const PFN_vkCmdDrawIndexedIndirectCountKHR = Ptr{Cvoid}
const PFN_vkCmdDrawIndirectCountKHR = Ptr{Cvoid}
const PFN_vkGetDescriptorSetLayoutSupportKHR = Ptr{Cvoid}
const PFN_vkBindImageMemory2KHR = Ptr{Cvoid}
const PFN_vkBindBufferMemory2KHR = Ptr{Cvoid}
const PFN_vkDestroySamplerYcbcrConversionKHR = Ptr{Cvoid}
const PFN_vkCreateSamplerYcbcrConversionKHR = Ptr{Cvoid}
const PFN_vkGetImageSparseMemoryRequirements2KHR = Ptr{Cvoid}
const PFN_vkGetBufferMemoryRequirements2KHR = Ptr{Cvoid}
const PFN_vkGetImageMemoryRequirements2KHR = Ptr{Cvoid}
const PFN_vkGetDisplayPlaneCapabilities2KHR = Ptr{Cvoid}
const PFN_vkGetDisplayModeProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = Ptr{Cvoid}
const PFN_vkReleaseProfilingLockKHR = Ptr{Cvoid}
const PFN_vkAcquireProfilingLockKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = Ptr{Cvoid}
const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = Ptr{Cvoid}
const PFN_vkGetFenceFdKHR = Ptr{Cvoid}
const PFN_vkImportFenceFdKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetSwapchainStatusKHR = Ptr{Cvoid}
const PFN_vkCmdEndRenderPass2KHR = Ptr{Cvoid}
const PFN_vkCmdNextSubpass2KHR = Ptr{Cvoid}
const PFN_vkCmdBeginRenderPass2KHR = Ptr{Cvoid}
const PFN_vkCreateRenderPass2KHR = Ptr{Cvoid}
const PFN_vkUpdateDescriptorSetWithTemplateKHR = Ptr{Cvoid}
const PFN_vkDestroyDescriptorUpdateTemplateKHR = Ptr{Cvoid}
const PFN_vkCreateDescriptorUpdateTemplateKHR = Ptr{Cvoid}
const PFN_vkCmdPushDescriptorSetWithTemplateKHR = Ptr{Cvoid}
const PFN_vkCmdPushDescriptorSetKHR = Ptr{Cvoid}
const PFN_vkGetSemaphoreFdKHR = Ptr{Cvoid}
const PFN_vkImportSemaphoreFdKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetMemoryFdPropertiesKHR = Ptr{Cvoid}
const PFN_vkGetMemoryFdKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = Ptr{Cvoid}
const PFN_vkEnumeratePhysicalDeviceGroupsKHR = Ptr{Cvoid}
const PFN_vkTrimCommandPoolKHR = Ptr{Cvoid}
const PFN_vkCmdDispatchBaseKHR = Ptr{Cvoid}
const PFN_vkCmdSetDeviceMaskKHR = Ptr{Cvoid}
const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFormatProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceProperties2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFeatures2KHR = Ptr{Cvoid}
const PFN_vkCreateSharedSwapchainsKHR = Ptr{Cvoid}
const PFN_vkCreateDisplayPlaneSurfaceKHR = Ptr{Cvoid}
const PFN_vkGetDisplayPlaneCapabilitiesKHR = Ptr{Cvoid}
const PFN_vkCreateDisplayModeKHR = Ptr{Cvoid}
const PFN_vkGetDisplayModePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = Ptr{Cvoid}
mutable struct DisplayModeKHR <: Handle
    handle::VkDisplayModeKHR
end

struct DisplayModePropertiesKHR <: ReturnedOnly
    display_mode::DisplayModeKHR
    parameters::DisplayModeParametersKHR
end

struct DisplayModeProperties2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    display_mode_properties::DisplayModePropertiesKHR
end

const DisplayModeKHR_T = Cvoid
mutable struct DisplayKHR <: Handle
    handle::VkDisplayKHR
end

struct DisplayPlanePropertiesKHR <: ReturnedOnly
    current_display::DisplayKHR
    current_stack_index::UInt32
end

struct DisplayPlaneProperties2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    display_plane_properties::DisplayPlanePropertiesKHR
end

const DisplayKHR_T = Cvoid
const PFN_vkAcquireNextImage2KHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDevicePresentRectanglesKHR = Ptr{Cvoid}
const PFN_vkGetDeviceGroupSurfacePresentModesKHR = Ptr{Cvoid}
const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = Ptr{Cvoid}
const PFN_vkQueuePresentKHR = Ptr{Cvoid}
const PFN_vkAcquireNextImageKHR = Ptr{Cvoid}
const PFN_vkGetSwapchainImagesKHR = Ptr{Cvoid}
const PFN_vkDestroySwapchainKHR = Ptr{Cvoid}
const PFN_vkCreateSwapchainKHR = Ptr{Cvoid}
mutable struct SwapchainKHR <: Handle
    handle::VkSwapchainKHR
end

const SwapchainKHR_T = Cvoid
const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = Ptr{Cvoid}
const PFN_vkDestroySurfaceKHR = Ptr{Cvoid}
mutable struct SurfaceKHR <: Handle
    handle::VkSurfaceKHR
end

const SurfaceKHR_T = Cvoid
const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = Ptr{Cvoid}
const PFN_vkGetBufferOpaqueCaptureAddress = Ptr{Cvoid}
const PFN_vkGetBufferDeviceAddress = Ptr{Cvoid}
const PFN_vkSignalSemaphore = Ptr{Cvoid}
const PFN_vkWaitSemaphores = Ptr{Cvoid}
const PFN_vkGetSemaphoreCounterValue = Ptr{Cvoid}
const PFN_vkResetQueryPool = Ptr{Cvoid}
const PFN_vkCmdEndRenderPass2 = Ptr{Cvoid}
const PFN_vkCmdNextSubpass2 = Ptr{Cvoid}
const PFN_vkCmdBeginRenderPass2 = Ptr{Cvoid}
const PFN_vkCreateRenderPass2 = Ptr{Cvoid}
const PFN_vkCmdDrawIndexedIndirectCount = Ptr{Cvoid}
const PFN_vkCmdDrawIndirectCount = Ptr{Cvoid}
const PFN_vkGetDescriptorSetLayoutSupport = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalFenceProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceExternalBufferProperties = Ptr{Cvoid}
const PFN_vkUpdateDescriptorSetWithTemplate = Ptr{Cvoid}
const PFN_vkDestroyDescriptorUpdateTemplate = Ptr{Cvoid}
const PFN_vkCreateDescriptorUpdateTemplate = Ptr{Cvoid}
const PFN_vkDestroySamplerYcbcrConversion = Ptr{Cvoid}
const PFN_vkCreateSamplerYcbcrConversion = Ptr{Cvoid}
const PFN_vkGetDeviceQueue2 = Ptr{Cvoid}
const PFN_vkTrimCommandPool = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceMemoryProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceImageFormatProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFormatProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceProperties2 = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFeatures2 = Ptr{Cvoid}
const PFN_vkGetImageSparseMemoryRequirements2 = Ptr{Cvoid}
const PFN_vkGetBufferMemoryRequirements2 = Ptr{Cvoid}
const PFN_vkGetImageMemoryRequirements2 = Ptr{Cvoid}
const PFN_vkEnumeratePhysicalDeviceGroups = Ptr{Cvoid}
const PFN_vkCmdDispatchBase = Ptr{Cvoid}
const PFN_vkCmdSetDeviceMask = Ptr{Cvoid}
const PFN_vkGetDeviceGroupPeerMemoryFeatures = Ptr{Cvoid}
const PFN_vkBindImageMemory2 = Ptr{Cvoid}
const PFN_vkBindBufferMemory2 = Ptr{Cvoid}
const PFN_vkEnumerateInstanceVersion = Ptr{Cvoid}
mutable struct DescriptorUpdateTemplate <: Handle
    handle::VkDescriptorUpdateTemplate
end

const DescriptorUpdateTemplate_T = Cvoid
mutable struct SamplerYcbcrConversion <: Handle
    handle::VkSamplerYcbcrConversion
end

const SamplerYcbcrConversion_T = Cvoid
const PFN_vkCmdExecuteCommands = Ptr{Cvoid}
const PFN_vkCmdEndRenderPass = Ptr{Cvoid}
const PFN_vkCmdNextSubpass = Ptr{Cvoid}
const PFN_vkCmdBeginRenderPass = Ptr{Cvoid}
const PFN_vkCmdPushConstants = Ptr{Cvoid}
const PFN_vkCmdCopyQueryPoolResults = Ptr{Cvoid}
const PFN_vkCmdWriteTimestamp = Ptr{Cvoid}
const PFN_vkCmdResetQueryPool = Ptr{Cvoid}
const PFN_vkCmdEndQuery = Ptr{Cvoid}
const PFN_vkCmdBeginQuery = Ptr{Cvoid}
const PFN_vkCmdPipelineBarrier = Ptr{Cvoid}
const PFN_vkCmdWaitEvents = Ptr{Cvoid}
const PFN_vkCmdResetEvent = Ptr{Cvoid}
const PFN_vkCmdSetEvent = Ptr{Cvoid}
const PFN_vkCmdResolveImage = Ptr{Cvoid}
const PFN_vkCmdClearAttachments = Ptr{Cvoid}
const PFN_vkCmdClearDepthStencilImage = Ptr{Cvoid}
const PFN_vkCmdClearColorImage = Ptr{Cvoid}
const PFN_vkCmdFillBuffer = Ptr{Cvoid}
const PFN_vkCmdUpdateBuffer = Ptr{Cvoid}
const PFN_vkCmdCopyImageToBuffer = Ptr{Cvoid}
const PFN_vkCmdCopyBufferToImage = Ptr{Cvoid}
const PFN_vkCmdBlitImage = Ptr{Cvoid}
const PFN_vkCmdCopyImage = Ptr{Cvoid}
const PFN_vkCmdCopyBuffer = Ptr{Cvoid}
const PFN_vkCmdDispatchIndirect = Ptr{Cvoid}
const PFN_vkCmdDispatch = Ptr{Cvoid}
const PFN_vkCmdDrawIndexedIndirect = Ptr{Cvoid}
const PFN_vkCmdDrawIndirect = Ptr{Cvoid}
const PFN_vkCmdDrawIndexed = Ptr{Cvoid}
const PFN_vkCmdDraw = Ptr{Cvoid}
const PFN_vkCmdBindVertexBuffers = Ptr{Cvoid}
const PFN_vkCmdBindIndexBuffer = Ptr{Cvoid}
const PFN_vkCmdBindDescriptorSets = Ptr{Cvoid}
const PFN_vkCmdSetStencilReference = Ptr{Cvoid}
const PFN_vkCmdSetStencilWriteMask = Ptr{Cvoid}
const PFN_vkCmdSetStencilCompareMask = Ptr{Cvoid}
const PFN_vkCmdSetDepthBounds = Ptr{Cvoid}
const PFN_vkCmdSetBlendConstants = Ptr{Cvoid}
const PFN_vkCmdSetDepthBias = Ptr{Cvoid}
const PFN_vkCmdSetLineWidth = Ptr{Cvoid}
const PFN_vkCmdSetScissor = Ptr{Cvoid}
const PFN_vkCmdSetViewport = Ptr{Cvoid}
const PFN_vkCmdBindPipeline = Ptr{Cvoid}
const PFN_vkResetCommandBuffer = Ptr{Cvoid}
const PFN_vkEndCommandBuffer = Ptr{Cvoid}
const PFN_vkBeginCommandBuffer = Ptr{Cvoid}
const PFN_vkFreeCommandBuffers = Ptr{Cvoid}
const PFN_vkAllocateCommandBuffers = Ptr{Cvoid}
const PFN_vkResetCommandPool = Ptr{Cvoid}
const PFN_vkDestroyCommandPool = Ptr{Cvoid}
const PFN_vkCreateCommandPool = Ptr{Cvoid}
const PFN_vkGetRenderAreaGranularity = Ptr{Cvoid}
const PFN_vkDestroyRenderPass = Ptr{Cvoid}
const PFN_vkCreateRenderPass = Ptr{Cvoid}
const PFN_vkDestroyFramebuffer = Ptr{Cvoid}
const PFN_vkCreateFramebuffer = Ptr{Cvoid}
const PFN_vkUpdateDescriptorSets = Ptr{Cvoid}
const PFN_vkFreeDescriptorSets = Ptr{Cvoid}
const PFN_vkAllocateDescriptorSets = Ptr{Cvoid}
const PFN_vkResetDescriptorPool = Ptr{Cvoid}
const PFN_vkDestroyDescriptorPool = Ptr{Cvoid}
const PFN_vkCreateDescriptorPool = Ptr{Cvoid}
const PFN_vkDestroyDescriptorSetLayout = Ptr{Cvoid}
const PFN_vkCreateDescriptorSetLayout = Ptr{Cvoid}
const PFN_vkDestroySampler = Ptr{Cvoid}
const PFN_vkCreateSampler = Ptr{Cvoid}
const PFN_vkDestroyPipelineLayout = Ptr{Cvoid}
const PFN_vkCreatePipelineLayout = Ptr{Cvoid}
const PFN_vkDestroyPipeline = Ptr{Cvoid}
const PFN_vkCreateComputePipelines = Ptr{Cvoid}
const PFN_vkCreateGraphicsPipelines = Ptr{Cvoid}
const PFN_vkMergePipelineCaches = Ptr{Cvoid}
const PFN_vkGetPipelineCacheData = Ptr{Cvoid}
const PFN_vkDestroyPipelineCache = Ptr{Cvoid}
const PFN_vkCreatePipelineCache = Ptr{Cvoid}
const PFN_vkDestroyShaderModule = Ptr{Cvoid}
const PFN_vkCreateShaderModule = Ptr{Cvoid}
const PFN_vkDestroyImageView = Ptr{Cvoid}
const PFN_vkCreateImageView = Ptr{Cvoid}
const PFN_vkGetImageSubresourceLayout = Ptr{Cvoid}
const PFN_vkDestroyImage = Ptr{Cvoid}
const PFN_vkCreateImage = Ptr{Cvoid}
const PFN_vkDestroyBufferView = Ptr{Cvoid}
const PFN_vkCreateBufferView = Ptr{Cvoid}
const PFN_vkDestroyBuffer = Ptr{Cvoid}
const PFN_vkCreateBuffer = Ptr{Cvoid}
const PFN_vkGetQueryPoolResults = Ptr{Cvoid}
const PFN_vkDestroyQueryPool = Ptr{Cvoid}
const PFN_vkCreateQueryPool = Ptr{Cvoid}
const PFN_vkResetEvent = Ptr{Cvoid}
const PFN_vkSetEvent = Ptr{Cvoid}
const PFN_vkGetEventStatus = Ptr{Cvoid}
const PFN_vkDestroyEvent = Ptr{Cvoid}
const PFN_vkCreateEvent = Ptr{Cvoid}
const PFN_vkDestroySemaphore = Ptr{Cvoid}
const PFN_vkCreateSemaphore = Ptr{Cvoid}
const PFN_vkWaitForFences = Ptr{Cvoid}
const PFN_vkGetFenceStatus = Ptr{Cvoid}
const PFN_vkResetFences = Ptr{Cvoid}
const PFN_vkDestroyFence = Ptr{Cvoid}
const PFN_vkCreateFence = Ptr{Cvoid}
const PFN_vkQueueBindSparse = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = Ptr{Cvoid}
const PFN_vkGetImageSparseMemoryRequirements = Ptr{Cvoid}
const PFN_vkGetImageMemoryRequirements = Ptr{Cvoid}
const PFN_vkGetBufferMemoryRequirements = Ptr{Cvoid}
const PFN_vkBindImageMemory = Ptr{Cvoid}
const PFN_vkBindBufferMemory = Ptr{Cvoid}
const PFN_vkGetDeviceMemoryCommitment = Ptr{Cvoid}
const PFN_vkInvalidateMappedMemoryRanges = Ptr{Cvoid}
const PFN_vkFlushMappedMemoryRanges = Ptr{Cvoid}
const PFN_vkUnmapMemory = Ptr{Cvoid}
const PFN_vkMapMemory = Ptr{Cvoid}
const PFN_vkFreeMemory = Ptr{Cvoid}
const PFN_vkAllocateMemory = Ptr{Cvoid}
const PFN_vkDeviceWaitIdle = Ptr{Cvoid}
const PFN_vkQueueWaitIdle = Ptr{Cvoid}
const PFN_vkQueueSubmit = Ptr{Cvoid}
const PFN_vkGetDeviceQueue = Ptr{Cvoid}
const PFN_vkEnumerateDeviceLayerProperties = Ptr{Cvoid}
const PFN_vkEnumerateInstanceLayerProperties = Ptr{Cvoid}
const PFN_vkEnumerateDeviceExtensionProperties = Ptr{Cvoid}
const PFN_vkEnumerateInstanceExtensionProperties = Ptr{Cvoid}
const PFN_vkDestroyDevice = Ptr{Cvoid}
const PFN_vkCreateDevice = Ptr{Cvoid}
const PFN_vkGetDeviceProcAddr = Ptr{Cvoid}
const PFN_vkGetInstanceProcAddr = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceMemoryProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceQueueFamilyProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceImageFormatProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFormatProperties = Ptr{Cvoid}
const PFN_vkGetPhysicalDeviceFeatures = Ptr{Cvoid}
const PFN_vkEnumeratePhysicalDevices = Ptr{Cvoid}
const PFN_vkDestroyInstance = Ptr{Cvoid}
const PFN_vkCreateInstance = Ptr{Cvoid}
const PFN_vkVoidFunction = Ptr{Cvoid}
const PFN_vkReallocationFunction = Ptr{Cvoid}
const PFN_vkInternalFreeNotification = Ptr{Cvoid}
const PFN_vkInternalAllocationNotification = Ptr{Cvoid}
const PFN_vkFreeFunction = Ptr{Cvoid}
const PFN_vkAllocationFunction = Ptr{Cvoid}
mutable struct CommandPool <: Handle
    handle::VkCommandPool
end

const CommandPool_T = Cvoid
mutable struct Framebuffer <: Handle
    handle::VkFramebuffer
end

const Framebuffer_T = Cvoid
mutable struct DescriptorPool <: Handle
    handle::VkDescriptorPool
end

const DescriptorPool_T = Cvoid
mutable struct DescriptorSet <: Handle
    handle::VkDescriptorSet
end

const DescriptorSet_T = Cvoid
mutable struct Sampler <: Handle
    handle::VkSampler
end

const Sampler_T = Cvoid
mutable struct DescriptorSetLayout <: Handle
    handle::VkDescriptorSetLayout
end

const DescriptorSetLayout_T = Cvoid
mutable struct RenderPass <: Handle
    handle::VkRenderPass
end

const RenderPass_T = Cvoid
mutable struct Pipeline <: Handle
    handle::VkPipeline
end

const Pipeline_T = Cvoid
mutable struct PipelineLayout <: Handle
    handle::VkPipelineLayout
end

const PipelineLayout_T = Cvoid
mutable struct PipelineCache <: Handle
    handle::VkPipelineCache
end

const PipelineCache_T = Cvoid
mutable struct ShaderModule <: Handle
    handle::VkShaderModule
end

const ShaderModule_T = Cvoid
mutable struct ImageView <: Handle
    handle::VkImageView
end

const ImageView_T = Cvoid
mutable struct BufferView <: Handle
    handle::VkBufferView
end

const BufferView_T = Cvoid
mutable struct QueryPool <: Handle
    handle::VkQueryPool
end

const QueryPool_T = Cvoid
mutable struct Event <: Handle
    handle::VkEvent
end

const Event_T = Cvoid
mutable struct DeviceMemory <: Handle
    handle::VkDeviceMemory
end

const DeviceMemory_T = Cvoid
mutable struct Fence <: Handle
    handle::VkFence
end

const Fence_T = Cvoid
mutable struct CommandBuffer <: Handle
    handle::VkCommandBuffer
end

const CommandBuffer_T = Cvoid
mutable struct Semaphore <: Handle
    handle::VkSemaphore
end

const Semaphore_T = Cvoid
mutable struct Queue <: Handle
    handle::VkQueue
end

const Queue_T = Cvoid
mutable struct Device <: Handle
    handle::VkDevice
end

const Device_T = Cvoid
mutable struct PhysicalDevice <: Handle
    handle::VkPhysicalDevice
end

const PhysicalDevice_T = Cvoid
mutable struct Instance <: Handle
    handle::VkInstance
end

const Instance_T = Cvoid
mutable struct Image <: Handle
    handle::VkImage
end

const Image_T = Cvoid
mutable struct Buffer <: Handle
    handle::VkBuffer
end

const Buffer_T = Cvoid
const SampleMask = UInt32
const Flags = UInt32
const StreamDescriptorSurfaceCreateFlagsGGP = Flags
const XlibSurfaceCreateFlagsKHR = Flags
const XcbSurfaceCreateFlagsKHR = Flags
const Win32SurfaceCreateFlagsKHR = Flags
const WaylandSurfaceCreateFlagsKHR = Flags
const ViSurfaceCreateFlagsNN = Flags
const MetalSurfaceCreateFlagsEXT = Flags
const MacOSSurfaceCreateFlagsMVK = Flags
const IOSSurfaceCreateFlagsMVK = Flags
const ImagePipeSurfaceCreateFlagsFUCHSIA = Flags
const AndroidSurfaceCreateFlagsKHR = Flags
const DeviceDiagnosticsConfigFlagsNV = Flags
const PrivateDataSlotCreateFlagsEXT = Flags
const IndirectCommandsLayoutUsageFlagsNV = Flags
const IndirectStateFlagsNV = Flags
const HeadlessSurfaceCreateFlagsEXT = Flags
const PipelineCoverageReductionStateCreateFlagsNV = Flags
const ToolPurposeFlagsEXT = Flags
struct PhysicalDeviceToolPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    name::String
    version::String
    purposes::ToolPurposeFlagsEXT
    description::String
    layer::String
end

const ShaderCorePropertiesFlagsAMD = Flags
struct PhysicalDeviceShaderCoreProperties2AMD <: ReturnedOnly
    next::Ptr{Cvoid}
    shader_core_features::ShaderCorePropertiesFlagsAMD
    active_compute_unit_count::UInt32
end

const PipelineCreationFeedbackFlagsEXT = Flags
struct PipelineCreationFeedbackEXT <: ReturnedOnly
    flags::PipelineCreationFeedbackFlagsEXT
    duration::UInt64
end

const PipelineCompilerControlFlagsAMD = Flags
const BuildAccelerationStructureFlagsKHR = Flags
const GeometryInstanceFlagsKHR = Flags
const GeometryFlagsKHR = Flags
const ValidationCacheCreateFlagsEXT = Flags
const PipelineCoverageModulationStateCreateFlagsNV = Flags
const PipelineCoverageToColorStateCreateFlagsNV = Flags
const DebugUtilsMessengerCreateFlagsEXT = Flags
const DebugUtilsMessageSeverityFlagsEXT = Flags
const DebugUtilsMessageTypeFlagsEXT = Flags
const DebugUtilsMessengerCallbackDataFlagsEXT = Flags
const PipelineRasterizationDepthClipStateCreateFlagsEXT = Flags
const PipelineRasterizationConservativeStateCreateFlagsEXT = Flags
const PipelineDiscardRectangleStateCreateFlagsEXT = Flags
const PipelineViewportSwizzleStateCreateFlagsNV = Flags
const SurfaceCounterFlagsEXT = Flags
const ConditionalRenderingFlagsEXT = Flags
const ExternalMemoryFeatureFlagsNV = Flags
const ExternalMemoryHandleTypeFlagsNV = Flags
const PipelineRasterizationStateStreamCreateFlagsEXT = Flags
const DebugReportFlagsEXT = Flags
const AcquireProfilingLockFlagsKHR = Flags
const PerformanceCounterDescriptionFlagsKHR = Flags
struct PerformanceCounterDescriptionKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    flags::PerformanceCounterDescriptionFlagsKHR
    name::String
    category::String
    description::String
end

const DisplaySurfaceCreateFlagsKHR = Flags
const DisplayPlaneAlphaFlagsKHR = Flags
struct DisplayPlaneCapabilitiesKHR <: ReturnedOnly
    supported_alpha::DisplayPlaneAlphaFlagsKHR
    min_src_position::Offset2D
    max_src_position::Offset2D
    min_src_extent::Extent2D
    max_src_extent::Extent2D
    min_dst_position::Offset2D
    max_dst_position::Offset2D
    min_dst_extent::Extent2D
    max_dst_extent::Extent2D
end

struct DisplayPlaneCapabilities2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    capabilities::DisplayPlaneCapabilitiesKHR
end

const DisplayModeCreateFlagsKHR = Flags
const DeviceGroupPresentModeFlagsKHR = Flags
struct DeviceGroupPresentCapabilitiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    present_mask::NTuple{32,UInt32}
    modes::DeviceGroupPresentModeFlagsKHR
end

const SwapchainCreateFlagsKHR = Flags
const SurfaceTransformFlagsKHR = Flags
struct DisplayPropertiesKHR <: ReturnedOnly
    display::DisplayKHR
    display_name::String
    physical_dimensions::Extent2D
    physical_resolution::Extent2D
    supported_transforms::SurfaceTransformFlagsKHR
    plane_reorder_possible::Bool
    persistent_content::Bool
end

struct DisplayProperties2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    display_properties::DisplayPropertiesKHR
end

const CompositeAlphaFlagsKHR = Flags
const SemaphoreWaitFlags = Flags
const DescriptorBindingFlags = Flags
const ResolveModeFlags = Flags
struct PhysicalDeviceDepthStencilResolveProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    supported_depth_resolve_modes::ResolveModeFlags
    supported_stencil_resolve_modes::ResolveModeFlags
    independent_resolve_none::Bool
    independent_resolve::Bool
end

const ExternalSemaphoreFeatureFlags = Flags
const ExternalSemaphoreHandleTypeFlags = Flags
struct ExternalSemaphoreProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalSemaphoreHandleTypeFlags
    compatible_handle_types::ExternalSemaphoreHandleTypeFlags
    external_semaphore_features::ExternalSemaphoreFeatureFlags
end

const SemaphoreImportFlags = Flags
const FenceImportFlags = Flags
const ExternalFenceFeatureFlags = Flags
const ExternalFenceHandleTypeFlags = Flags
struct ExternalFenceProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalFenceHandleTypeFlags
    compatible_handle_types::ExternalFenceHandleTypeFlags
    external_fence_features::ExternalFenceFeatureFlags
end

const ExternalMemoryFeatureFlags = Flags
const ExternalMemoryHandleTypeFlags = Flags
struct ExternalMemoryProperties <: ReturnedOnly
    external_memory_features::ExternalMemoryFeatureFlags
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlags
    compatible_handle_types::ExternalMemoryHandleTypeFlags
end

struct ExternalBufferProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

struct ExternalImageFormatProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

const DescriptorUpdateTemplateCreateFlags = Flags
const CommandPoolTrimFlags = Flags
const MemoryAllocateFlags = Flags
const PeerMemoryFeatureFlags = Flags
const SubgroupFeatureFlags = Flags
const StencilFaceFlags = Flags
const CommandBufferResetFlags = Flags
const QueryControlFlags = Flags
const CommandBufferUsageFlags = Flags
const CommandPoolResetFlags = Flags
const CommandPoolCreateFlags = Flags
const SubpassDescriptionFlags = Flags
const RenderPassCreateFlags = Flags
const FramebufferCreateFlags = Flags
const DependencyFlags = Flags
const AttachmentDescriptionFlags = Flags
const DescriptorSetLayoutCreateFlags = Flags
const DescriptorPoolResetFlags = Flags
const DescriptorPoolCreateFlags = Flags
const SamplerCreateFlags = Flags
const ShaderStageFlags = Flags
struct PhysicalDeviceCooperativeMatrixPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    cooperative_matrix_supported_stages::ShaderStageFlags
end

struct PhysicalDeviceSubgroupSizeControlPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    min_subgroup_size::UInt32
    max_subgroup_size::UInt32
    max_compute_workgroup_subgroups::UInt32
    required_subgroup_size_stages::ShaderStageFlags
end

struct ShaderStatisticsInfoAMD <: ReturnedOnly
    shader_stage_mask::ShaderStageFlags
    resource_usage::ShaderResourceUsageAMD
    num_physical_vgprs::UInt32
    num_physical_sgprs::UInt32
    num_available_vgprs::UInt32
    num_available_sgprs::UInt32
    compute_work_group_size::NTuple{3,UInt32}
end

struct PipelineExecutablePropertiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    stages::ShaderStageFlags
    name::String
    description::String
    subgroup_size::UInt32
end

struct PhysicalDeviceSubgroupProperties <: ReturnedOnly
    next::Ptr{Cvoid}
    subgroup_size::UInt32
    supported_stages::ShaderStageFlags
    supported_operations::SubgroupFeatureFlags
    quad_operations_in_all_stages::Bool
end

const PipelineLayoutCreateFlags = Flags
const PipelineDynamicStateCreateFlags = Flags
const PipelineColorBlendStateCreateFlags = Flags
const PipelineDepthStencilStateCreateFlags = Flags
const PipelineMultisampleStateCreateFlags = Flags
const PipelineRasterizationStateCreateFlags = Flags
const PipelineViewportStateCreateFlags = Flags
const PipelineTessellationStateCreateFlags = Flags
const PipelineInputAssemblyStateCreateFlags = Flags
const PipelineVertexInputStateCreateFlags = Flags
const CullModeFlags = Flags
const PipelineShaderStageCreateFlags = Flags
const PipelineCreateFlags = Flags
const ColorComponentFlags = Flags
const PipelineCacheCreateFlags = Flags
const ShaderModuleCreateFlags = Flags
const ImageViewCreateFlags = Flags
const BufferViewCreateFlags = Flags
const BufferUsageFlags = Flags
const BufferCreateFlags = Flags
const QueryResultFlags = Flags
const QueryPoolCreateFlags = Flags
const QueryPipelineStatisticFlags = Flags
const EventCreateFlags = Flags
const SemaphoreCreateFlags = Flags
const FenceCreateFlags = Flags
const SparseImageFormatFlags = Flags
const SparseMemoryBindFlags = Flags
const MemoryMapFlags = Flags
const PipelineStageFlags = Flags
struct QueueFamilyCheckpointPropertiesNV <: ReturnedOnly
    next::Ptr{Cvoid}
    checkpoint_execution_stage_mask::PipelineStageFlags
end

const DeviceQueueCreateFlags = Flags
const DeviceCreateFlags = Flags
const QueueFlags = Flags
struct QueueFamilyProperties <: ReturnedOnly
    queue_flags::QueueFlags
    queue_count::UInt32
    timestamp_valid_bits::UInt32
    min_image_transfer_granularity::Extent3D
end

struct QueueFamilyProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    queue_family_properties::QueueFamilyProperties
end

const MemoryPropertyFlags = Flags
struct MemoryType <: ReturnedOnly
    property_flags::MemoryPropertyFlags
    heap_index::UInt32
end

const MemoryHeapFlags = Flags
const InstanceCreateFlags = Flags
const ImageUsageFlags = Flags
struct SurfaceCapabilities2EXT <: ReturnedOnly
    next::Ptr{Cvoid}
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::Extent2D
    min_image_extent::Extent2D
    max_image_extent::Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagsKHR
    current_transform::SurfaceTransformFlagBitsKHR
    supported_composite_alpha::CompositeAlphaFlagsKHR
    supported_usage_flags::ImageUsageFlags
    supported_surface_counters::SurfaceCounterFlagsEXT
end

struct SharedPresentSurfaceCapabilitiesKHR <: ReturnedOnly
    next::Ptr{Cvoid}
    shared_present_supported_usage_flags::ImageUsageFlags
end

struct SurfaceCapabilitiesKHR <: ReturnedOnly
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::Extent2D
    min_image_extent::Extent2D
    max_image_extent::Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagsKHR
    current_transform::SurfaceTransformFlagBitsKHR
    supported_composite_alpha::CompositeAlphaFlagsKHR
    supported_usage_flags::ImageUsageFlags
end

struct SurfaceCapabilities2KHR <: ReturnedOnly
    next::Ptr{Cvoid}
    surface_capabilities::SurfaceCapabilitiesKHR
end

const SampleCountFlags = Flags
struct FramebufferMixedSamplesCombinationNV <: ReturnedOnly
    next::Ptr{Cvoid}
    coverage_reduction_mode::CoverageReductionModeNV
    rasterization_samples::SampleCountFlagBits
    depth_stencil_samples::SampleCountFlags
    color_samples::SampleCountFlags
end

struct PhysicalDeviceSampleLocationsPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    sample_location_sample_counts::SampleCountFlags
    max_sample_location_grid_size::Extent2D
    sample_location_coordinate_range::NTuple{2,Cfloat}
    sample_location_sub_pixel_bits::UInt32
    variable_sample_locations::Bool
end

struct PhysicalDeviceVulkan12Properties <: ReturnedOnly
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::ConformanceVersion
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
    supported_depth_resolve_modes::ResolveModeFlags
    supported_stencil_resolve_modes::ResolveModeFlags
    independent_resolve_none::Bool
    independent_resolve::Bool
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
    max_timeline_semaphore_value_difference::UInt64
    framebuffer_integer_color_sample_counts::SampleCountFlags
end

const ImageCreateFlags = Flags
const FormatFeatureFlags = Flags
struct AndroidHardwareBufferFormatPropertiesANDROID <: ReturnedOnly
    next::Ptr{Cvoid}
    format::Format
    external_format::UInt64
    format_features::FormatFeatureFlags
    sampler_ycbcr_conversion_components::ComponentMapping
    suggested_ycbcr_model::SamplerYcbcrModelConversion
    suggested_ycbcr_range::SamplerYcbcrRange
    suggested_x_chroma_offset::ChromaLocation
    suggested_y_chroma_offset::ChromaLocation
end

struct DrmFormatModifierPropertiesEXT <: ReturnedOnly
    drm_format_modifier::UInt64
    drm_format_modifier_plane_count::UInt32
    drm_format_modifier_tiling_features::FormatFeatureFlags
end

struct DrmFormatModifierPropertiesListEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    drm_format_modifier_properties::Array{DrmFormatModifierPropertiesEXT}
end

struct FormatProperties <: ReturnedOnly
    linear_tiling_features::FormatFeatureFlags
    optimal_tiling_features::FormatFeatureFlags
    buffer_features::FormatFeatureFlags
end

struct FormatProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    format_properties::FormatProperties
end

const ImageAspectFlags = Flags
struct SparseImageFormatProperties <: ReturnedOnly
    aspect_mask::ImageAspectFlags
    image_granularity::Extent3D
    flags::SparseImageFormatFlags
end

struct SparseImageFormatProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    properties::SparseImageFormatProperties
end

const AccessFlags = Flags
const DeviceSize = UInt64
struct AndroidHardwareBufferPropertiesANDROID <: ReturnedOnly
    next::Ptr{Cvoid}
    allocation_size::DeviceSize
    memory_type_bits::UInt32
end

struct PhysicalDeviceRobustness2PropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    robust_storage_buffer_access_size_alignment::DeviceSize
    robust_uniform_buffer_access_size_alignment::DeviceSize
end

struct PhysicalDeviceTexelBufferAlignmentPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    storage_texel_buffer_offset_alignment_bytes::DeviceSize
    storage_texel_buffer_offset_single_texel_alignment::Bool
    uniform_texel_buffer_offset_alignment_bytes::DeviceSize
    uniform_texel_buffer_offset_single_texel_alignment::Bool
end

struct PhysicalDeviceExternalMemoryHostPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    min_imported_host_pointer_alignment::DeviceSize
end

struct PhysicalDeviceTransformFeedbackPropertiesEXT <: ReturnedOnly
    next::Ptr{Cvoid}
    max_transform_feedback_streams::UInt32
    max_transform_feedback_buffers::UInt32
    max_transform_feedback_buffer_size::DeviceSize
    max_transform_feedback_stream_data_size::UInt32
    max_transform_feedback_buffer_data_size::UInt32
    max_transform_feedback_buffer_data_stride::UInt32
    transform_feedback_queries::Bool
    transform_feedback_streams_lines_triangles::Bool
    transform_feedback_rasterization_stream_select::Bool
    transform_feedback_draw::Bool
end

struct PhysicalDeviceVulkan11Properties <: ReturnedOnly
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
    subgroup_size::UInt32
    subgroup_supported_stages::ShaderStageFlags
    subgroup_supported_operations::SubgroupFeatureFlags
    subgroup_quad_operations_in_all_stages::Bool
    point_clipping_behavior::PointClippingBehavior
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
    protected_no_fault::Bool
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::DeviceSize
end

struct PhysicalDeviceMaintenance3Properties <: ReturnedOnly
    next::Ptr{Cvoid}
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::DeviceSize
end

struct SubresourceLayout <: ReturnedOnly
    offset::DeviceSize
    size::DeviceSize
    row_pitch::DeviceSize
    array_pitch::DeviceSize
    depth_pitch::DeviceSize
end

struct SparseImageMemoryRequirements <: ReturnedOnly
    format_properties::SparseImageFormatProperties
    image_mip_tail_first_lod::UInt32
    image_mip_tail_size::DeviceSize
    image_mip_tail_offset::DeviceSize
    image_mip_tail_stride::DeviceSize
end

struct SparseImageMemoryRequirements2 <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_requirements::SparseImageMemoryRequirements
end

struct MemoryRequirements <: ReturnedOnly
    size::DeviceSize
    alignment::DeviceSize
    memory_type_bits::UInt32
end

struct MemoryRequirements2 <: ReturnedOnly
    next::Ptr{Cvoid}
    memory_requirements::MemoryRequirements
end

struct PhysicalDeviceLimits <: ReturnedOnly
    max_image_dimension_1_d::UInt32
    max_image_dimension_2_d::UInt32
    max_image_dimension_3_d::UInt32
    max_image_dimension_cube::UInt32
    max_image_array_layers::UInt32
    max_texel_buffer_elements::UInt32
    max_uniform_buffer_range::UInt32
    max_storage_buffer_range::UInt32
    max_push_constants_size::UInt32
    max_memory_allocation_count::UInt32
    max_sampler_allocation_count::UInt32
    buffer_image_granularity::DeviceSize
    sparse_address_space_size::DeviceSize
    max_bound_descriptor_sets::UInt32
    max_per_stage_descriptor_samplers::UInt32
    max_per_stage_descriptor_uniform_buffers::UInt32
    max_per_stage_descriptor_storage_buffers::UInt32
    max_per_stage_descriptor_sampled_images::UInt32
    max_per_stage_descriptor_storage_images::UInt32
    max_per_stage_descriptor_input_attachments::UInt32
    max_per_stage_resources::UInt32
    max_descriptor_set_samplers::UInt32
    max_descriptor_set_uniform_buffers::UInt32
    max_descriptor_set_uniform_buffers_dynamic::UInt32
    max_descriptor_set_storage_buffers::UInt32
    max_descriptor_set_storage_buffers_dynamic::UInt32
    max_descriptor_set_sampled_images::UInt32
    max_descriptor_set_storage_images::UInt32
    max_descriptor_set_input_attachments::UInt32
    max_vertex_input_attributes::UInt32
    max_vertex_input_bindings::UInt32
    max_vertex_input_attribute_offset::UInt32
    max_vertex_input_binding_stride::UInt32
    max_vertex_output_components::UInt32
    max_tessellation_generation_level::UInt32
    max_tessellation_patch_size::UInt32
    max_tessellation_control_per_vertex_input_components::UInt32
    max_tessellation_control_per_vertex_output_components::UInt32
    max_tessellation_control_per_patch_output_components::UInt32
    max_tessellation_control_total_output_components::UInt32
    max_tessellation_evaluation_input_components::UInt32
    max_tessellation_evaluation_output_components::UInt32
    max_geometry_shader_invocations::UInt32
    max_geometry_input_components::UInt32
    max_geometry_output_components::UInt32
    max_geometry_output_vertices::UInt32
    max_geometry_total_output_components::UInt32
    max_fragment_input_components::UInt32
    max_fragment_output_attachments::UInt32
    max_fragment_dual_src_attachments::UInt32
    max_fragment_combined_output_resources::UInt32
    max_compute_shared_memory_size::UInt32
    max_compute_work_group_count::NTuple{3,UInt32}
    max_compute_work_group_invocations::UInt32
    max_compute_work_group_size::NTuple{3,UInt32}
    sub_pixel_precision_bits::UInt32
    sub_texel_precision_bits::UInt32
    mipmap_precision_bits::UInt32
    max_draw_indexed_index_value::UInt32
    max_draw_indirect_count::UInt32
    max_sampler_lod_bias::Float32
    max_sampler_anisotropy::Float32
    max_viewports::UInt32
    max_viewport_dimensions::NTuple{2,UInt32}
    viewport_bounds_range::NTuple{2,Cfloat}
    viewport_sub_pixel_bits::UInt32
    min_memory_map_alignment::UInt
    min_texel_buffer_offset_alignment::DeviceSize
    min_uniform_buffer_offset_alignment::DeviceSize
    min_storage_buffer_offset_alignment::DeviceSize
    min_texel_offset::Int32
    max_texel_offset::UInt32
    min_texel_gather_offset::Int32
    max_texel_gather_offset::UInt32
    min_interpolation_offset::Float32
    max_interpolation_offset::Float32
    sub_pixel_interpolation_offset_bits::UInt32
    max_framebuffer_width::UInt32
    max_framebuffer_height::UInt32
    max_framebuffer_layers::UInt32
    framebuffer_color_sample_counts::SampleCountFlags
    framebuffer_depth_sample_counts::SampleCountFlags
    framebuffer_stencil_sample_counts::SampleCountFlags
    framebuffer_no_attachments_sample_counts::SampleCountFlags
    max_color_attachments::UInt32
    sampled_image_color_sample_counts::SampleCountFlags
    sampled_image_integer_sample_counts::SampleCountFlags
    sampled_image_depth_sample_counts::SampleCountFlags
    sampled_image_stencil_sample_counts::SampleCountFlags
    storage_image_sample_counts::SampleCountFlags
    max_sample_mask_words::UInt32
    timestamp_compute_and_graphics::Bool
    timestamp_period::Float32
    max_clip_distances::UInt32
    max_cull_distances::UInt32
    max_combined_clip_and_cull_distances::UInt32
    discrete_queue_priorities::UInt32
    point_size_range::NTuple{2,Cfloat}
    line_width_range::NTuple{2,Cfloat}
    point_size_granularity::Float32
    line_width_granularity::Float32
    strict_lines::Bool
    standard_sample_locations::Bool
    optimal_buffer_copy_offset_alignment::DeviceSize
    optimal_buffer_copy_row_pitch_alignment::DeviceSize
    non_coherent_atom_size::DeviceSize
end

struct PhysicalDeviceProperties <: ReturnedOnly
    api_version::VersionNumber
    driver_version::VersionNumber
    vendor_id::UInt32
    device_id::UInt32
    device_type::PhysicalDeviceType
    device_name::String
    pipeline_cache_uuid::String
    limits::PhysicalDeviceLimits
    sparse_properties::PhysicalDeviceSparseProperties
end

struct PhysicalDeviceProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    properties::PhysicalDeviceProperties
end

struct MemoryHeap <: ReturnedOnly
    size::DeviceSize
    flags::MemoryHeapFlags
end

struct ImageFormatProperties <: ReturnedOnly
    max_extent::Extent3D
    max_mip_levels::UInt32
    max_array_layers::UInt32
    sample_counts::SampleCountFlags
    max_resource_size::DeviceSize
end

struct ExternalImageFormatPropertiesNV <: ReturnedOnly
    image_format_properties::ImageFormatProperties
    external_memory_features::ExternalMemoryFeatureFlagsNV
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlagsNV
    compatible_handle_types::ExternalMemoryHandleTypeFlagsNV
end

struct ImageFormatProperties2 <: ReturnedOnly
    next::Ptr{Cvoid}
    image_format_properties::ImageFormatProperties
end

const DeviceAddress = UInt64
struct ImageViewAddressPropertiesNVX <: ReturnedOnly
    next::Ptr{Cvoid}
    device_address::DeviceAddress
    size::DeviceSize
end

const Bool32 = UInt32
const KHR_RAY_TRACING_EXTENSION_NAME = "VK_KHR_ray_tracing"
const KHR_RAY_TRACING_SPEC_VERSION = 8
const KHR_ray_tracing = 1
const KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library"
const KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1
const KHR_pipeline_library = 1
const KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations"
const KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 3
const KHR_deferred_host_operations = 1
const VULKAN_BETA_H_ = 1
const GGP_FRAME_TOKEN_EXTENSION_NAME = "VK_GGP_frame_token"
const GGP_FRAME_TOKEN_SPEC_VERSION = 1
const GGP_frame_token = 1
const GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME = "VK_GGP_stream_descriptor_surface"
const GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION = 1
const GGP_stream_descriptor_surface = 1
const VULKAN_GGP_H_ = 1
const EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_xlib_display"
const EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION = 1
const EXT_acquire_xlib_display = 1
const VULKAN_XLIB_XRANDR_H_ = 1
const KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface"
const KHR_XLIB_SURFACE_SPEC_VERSION = 6
const KHR_xlib_surface = 1
const VULKAN_XLIB_H_ = 1
const KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface"
const KHR_XCB_SURFACE_SPEC_VERSION = 6
const KHR_xcb_surface = 1
const VULKAN_XCB_H_ = 1
const EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME = "VK_EXT_full_screen_exclusive"
const EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION = 4
const EXT_full_screen_exclusive = 1
const NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex"
const NV_WIN32_KEYED_MUTEX_SPEC_VERSION = 2
const NV_win32_keyed_mutex = 1
const NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32"
const NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
const NV_external_memory_win32 = 1
const KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME = "VK_KHR_external_fence_win32"
const KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION = 1
const KHR_external_fence_win32 = 1
const KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHR_external_semaphore_win32"
const KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION = 1
const KHR_external_semaphore_win32 = 1
const KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHR_win32_keyed_mutex"
const KHR_WIN32_KEYED_MUTEX_SPEC_VERSION = 1
const KHR_win32_keyed_mutex = 1
const KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHR_external_memory_win32"
const KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1
const KHR_external_memory_win32 = 1
const KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface"
const KHR_WIN32_SURFACE_SPEC_VERSION = 6
const KHR_win32_surface = 1
const VULKAN_WIN32_H_ = 1
const KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface"
const KHR_WAYLAND_SURFACE_SPEC_VERSION = 6
const KHR_wayland_surface = 1
const VULKAN_WAYLAND_H_ = 1
const NN_VI_SURFACE_EXTENSION_NAME = "VK_NN_vi_surface"
const NN_VI_SURFACE_SPEC_VERSION = 1
const NN_vi_surface = 1
const VULKAN_VI_H_ = 1
const EXT_METAL_SURFACE_EXTENSION_NAME = "VK_EXT_metal_surface"
const EXT_METAL_SURFACE_SPEC_VERSION = 1
const EXT_metal_surface = 1
const VULKAN_METAL_H_ = 1
const MVK_MACOS_SURFACE_EXTENSION_NAME = "VK_MVK_macos_surface"
const MVK_MACOS_SURFACE_SPEC_VERSION = 3
const MVK_macos_surface = 1
const VULKAN_MACOS_H_ = 1
const MVK_IOS_SURFACE_EXTENSION_NAME = "VK_MVK_ios_surface"
const MVK_IOS_SURFACE_SPEC_VERSION = 3
const MVK_ios_surface = 1
const VULKAN_IOS_H_ = 1
const FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME = "VK_FUCHSIA_imagepipe_surface"
const FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION = 1
const FUCHSIA_imagepipe_surface = 1
const VULKAN_FUCHSIA_H_ = 1
const ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME = "VK_ANDROID_external_memory_android_hardware_buffer"
const ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION = 3
const ANDROID_external_memory_android_hardware_buffer = 1
const KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface"
const KHR_ANDROID_SURFACE_SPEC_VERSION = 6
const KHR_android_surface = 1
const VULKAN_ANDROID_H_ = 1
const EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats"
const EXT_4444_FORMATS_SPEC_VERSION = 1
const EXT_4444_formats = 1
const EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness"
const EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1
const EXT_image_robustness = 1
const EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2"
const EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1
const EXT_fragment_density_map2 = 1
const QCOM_render_pass_store_ops_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops"
const QCOM_render_pass_store_ops_SPEC_VERSION = 2
const QCOM_render_pass_store_ops = 1
const NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config"
const NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 1
const NV_device_diagnostics_config = 1
const EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control"
const EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3
const EXT_pipeline_creation_cache_control = 1
const EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data"
const EXT_PRIVATE_DATA_SPEC_VERSION = 1
const EXT_private_data = 1
const GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type"
const GOOGLE_USER_TYPE_SPEC_VERSION = 1
const GOOGLE_user_type = 1
const EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color"
const EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12
const EXT_custom_border_color = 1
const EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2"
const EXT_ROBUSTNESS_2_SPEC_VERSION = 1
const EXT_robustness2 = 1
const QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform"
const QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 1
const QCOM_render_pass_transform = 1
const EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment"
const EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1
const EXT_texel_buffer_alignment = 1
const NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands"
const NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3
const NV_device_generated_commands = 1
const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation"
const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1
const EXT_shader_demote_to_helper_invocation = 1
const EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state"
const EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1
const EXT_extended_dynamic_state = 1
const EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8"
const EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1
const EXT_index_type_uint8 = 1
const EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset"
const EXT_HOST_QUERY_RESET_SPEC_VERSION = 1
const EXT_host_query_reset = 1
const EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float"
const EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1
const EXT_shader_atomic_float = 1
const EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization"
const EXT_LINE_RASTERIZATION_SPEC_VERSION = 1
const EXT_line_rasterization = 1
const EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface"
const EXT_HEADLESS_SURFACE_SPEC_VERSION = 1
const EXT_headless_surface = 1
const EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays"
const EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1
const EXT_ycbcr_image_arrays = 1
const EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock"
const EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1
const EXT_fragment_shader_interlock = 1
const NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode"
const NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1
const NV_coverage_reduction_mode = 1
const NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix"
const NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1
const NV_cooperative_matrix = 1
const EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features"
const EXT_VALIDATION_FEATURES_SPEC_VERSION = 4
const EXT_validation_features = 1
const EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage"
const EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1
const EXT_separate_stencil_usage = 1
const EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info"
const EXT_TOOLING_INFO_SPEC_VERSION = 1
const EXT_tooling_info = 1
const EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address"
const EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2
const EXT_buffer_device_address = 1
const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing"
const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1
const NV_dedicated_allocation_image_aliasing = 1
const EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority"
const EXT_MEMORY_PRIORITY_SPEC_VERSION = 1
const EXT_memory_priority = 1
const EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget"
const EXT_MEMORY_BUDGET_SPEC_VERSION = 1
const EXT_memory_budget = 1
const AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory"
const AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1
const AMD_device_coherent_memory = 1
const AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2"
const AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1
const AMD_shader_core_properties2 = 1
const EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control"
const EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2
const EXT_subgroup_size_control = 1
const GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string"
const GOOGLE_DECORATE_STRING_SPEC_VERSION = 1
const GOOGLE_decorate_string = 1
const GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1"
const GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1
const GOOGLE_hlsl_functionality1 = 1
const EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout"
const EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1
const EXT_scalar_block_layout = 1
const EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map"
const EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 1
const EXT_fragment_density_map = 1
const AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr"
const AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1
const AMD_display_native_hdr = 1
const EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info"
const EXT_PCI_BUS_INFO_SPEC_VERSION = 2
const EXT_pci_bus_info = 1
const INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query"
const INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2
const INTEL_performance_query = 1
const INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2"
const INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1
const INTEL_shader_integer_functions2 = 1
const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints"
const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2
const NV_device_diagnostic_checkpoints = 1
const NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive"
const NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1
const NV_scissor_exclusive = 1
const NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint"
const NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2
const NV_shader_image_footprint = 1
const NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric"
const NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1
const NV_fragment_shader_barycentric = 1
const NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader"
const NV_MESH_SHADER_SPEC_VERSION = 1
const NV_mesh_shader = 1
const NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives"
const NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1
const NV_compute_shader_derivatives = 1
const NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned"
const NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1
const NV_shader_subgroup_partitioned = 1
const EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback"
const EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1
const EXT_pipeline_creation_feedback = 1
const EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor"
const EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3
const EXT_vertex_attribute_divisor = 1
const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior"
const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1
const AMD_memory_overallocation_behavior = 1
const AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties"
const AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2
const AMD_shader_core_properties = 1
const EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps"
const EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1
const EXT_calibrated_timestamps = 1
const AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control"
const AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1
const AMD_pipeline_compiler_control = 1
const AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker"
const AMD_BUFFER_MARKER_SPEC_VERSION = 1
const AMD_buffer_marker = 1
const EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host"
const EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1
const EXT_external_memory_host = 1
const EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority"
const EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2
const EXT_global_priority = 1
const QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve"
const QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4
const QCOM_render_pass_shader_resolve = 1
const EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic"
const EXT_FILTER_CUBIC_SPEC_VERSION = 3
const EXT_filter_cubic = 1
const NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test"
const NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2
const NV_representative_fragment_test = 1
const SHADER_UNUSED_KHR = ~(UInt32(0))
const NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing"
const NV_RAY_TRACING_SPEC_VERSION = 3
const NV_ray_tracing = 1
const NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image"
const NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3
const NV_shading_rate_image = 1
const EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer"
const EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1
const EXT_shader_viewport_index_layer = 1
const EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing"
const EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2
const EXT_descriptor_indexing = 1
const EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache"
const EXT_VALIDATION_CACHE_SPEC_VERSION = 1
const EXT_validation_cache = 1
const EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier"
const EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 1
const EXT_image_drm_format_modifier = 1
const EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage"
const EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1
const EXT_post_depth_coverage = 1
const NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins"
const NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1
const NV_shader_sm_builtins = 1
const NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle"
const NV_FILL_RECTANGLE_SPEC_VERSION = 1
const NV_fill_rectangle = 1
const NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples"
const NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1
const NV_framebuffer_mixed_samples = 1
const NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color"
const NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1
const NV_fragment_coverage_to_color = 1
const EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced"
const EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2
const EXT_blend_operation_advanced = 1
const EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations"
const EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1
const EXT_sample_locations = 1
const EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export"
const EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1
const EXT_shader_stencil_export = 1
const EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block"
const EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1
const EXT_inline_uniform_block = 1
const AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask"
const AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1
const AMD_shader_fragment_mask = 1
const AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples"
const AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1
const AMD_mixed_attachment_samples = 1
const AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16"
const AMD_GPU_SHADER_INT16_SPEC_VERSION = 2
const AMD_gpu_shader_int16 = 1
const EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax"
const EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2
const EXT_sampler_filter_minmax = 1
const EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils"
const EXT_DEBUG_UTILS_SPEC_VERSION = 2
const EXT_debug_utils = 1
const QUEUE_FAMILY_FOREIGN_EXT = ~(UInt32(0)) - 2
const EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign"
const EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1
const EXT_queue_family_foreign = 1
const EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf"
const EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1
const EXT_external_memory_dma_buf = 1
const EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata"
const EXT_HDR_METADATA_SPEC_VERSION = 2
const EXT_hdr_metadata = 1
const EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace"
const EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4
const EXT_swapchain_colorspace = 1
const EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable"
const EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1
const EXT_depth_clip_enable = 1
const EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization"
const EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1
const EXT_conservative_rasterization = 1
const EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles"
const EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1
const EXT_discard_rectangles = 1
const NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle"
const NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1
const NV_viewport_swizzle = 1
const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes"
const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1
const NVX_multiview_per_view_attributes = 1
const NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2"
const NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1
const NV_viewport_array2 = 1
const NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough"
const NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1
const NV_geometry_shader_passthrough = 1
const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage"
const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1
const NV_sample_mask_override_coverage = 1
const GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing"
const GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1
const GOOGLE_display_timing = 1
const EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control"
const EXT_DISPLAY_CONTROL_SPEC_VERSION = 1
const EXT_display_control = 1
const EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter"
const EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1
const EXT_display_surface_counter = 1
const EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display"
const EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1
const EXT_direct_mode_display = 1
const NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling"
const NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1
const NV_clip_space_w_scaling = 1
const EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering"
const EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2
const EXT_conditional_rendering = 1
const EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode"
const EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1
const EXT_astc_decode_mode = 1
const EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr"
const EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1
const EXT_texture_compression_astc_hdr = 1
const EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote"
const EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1
const EXT_shader_subgroup_vote = 1
const EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot"
const EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1
const EXT_shader_subgroup_ballot = 1
const EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags"
const EXT_VALIDATION_FLAGS_SPEC_VERSION = 2
const EXT_validation_flags = 1
const NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory"
const NV_EXTERNAL_MEMORY_SPEC_VERSION = 1
const NV_external_memory = 1
const NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities"
const NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
const NV_external_memory_capabilities = 1
const IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc"
const IMG_FORMAT_PVRTC_SPEC_VERSION = 1
const IMG_format_pvrtc = 1
const NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image"
const NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2
const NV_corner_sampled_image = 1
const AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod"
const AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1
const AMD_shader_image_load_store_lod = 1
const AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info"
const AMD_SHADER_INFO_SPEC_VERSION = 1
const AMD_shader_info = 1
const AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod"
const AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1
const AMD_texture_gather_bias_lod = 1
const AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot"
const AMD_SHADER_BALLOT_SPEC_VERSION = 1
const AMD_shader_ballot = 1
const AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float"
const AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2
const AMD_gpu_shader_half_float = 1
const AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height"
const AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1
const AMD_negative_viewport_height = 1
const AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count"
const AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2
const AMD_draw_indirect_count = 1
const NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle"
const NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2
const NVX_image_view_handle = 1
const EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback"
const EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1
const EXT_transform_feedback = 1
const NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation"
const NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1
const NV_dedicated_allocation = 1
const AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader"
const AMD_GCN_SHADER_SPEC_VERSION = 1
const AMD_gcn_shader = 1
const EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker"
const EXT_DEBUG_MARKER_SPEC_VERSION = 4
const EXT_debug_marker = 1
const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter"
const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1
const AMD_shader_explicit_vertex_parameter = 1
const AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax"
const AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1
const AMD_shader_trinary_minmax = 1
const AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order"
const AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1
const AMD_rasterization_order = 1
const IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic"
const IMG_FILTER_CUBIC_SPEC_VERSION = 1
const IMG_filter_cubic = 1
const EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted"
const EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1
const EXT_depth_range_unrestricted = 1
const NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader"
const NV_GLSL_SHADER_SPEC_VERSION = 1
const NV_glsl_shader = 1
const EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report"
const EXT_DEBUG_REPORT_SPEC_VERSION = 9
const EXT_debug_report = 1
const KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info"
const KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1
const KHR_shader_non_semantic_info = 1
const KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties"
const KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1
const KHR_pipeline_executable_properties = 1
const KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address"
const KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1
const KHR_buffer_device_address = 1
const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout"
const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1
const KHR_uniform_buffer_standard_layout = 1
const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts"
const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1
const KHR_separate_depth_stencil_layouts = 1
const KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities"
const KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1
const KHR_surface_protected_capabilities = 1
const KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4"
const KHR_SPIRV_1_4_SPEC_VERSION = 1
const KHR_spirv_1_4 = 1
const KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model"
const KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3
const KHR_vulkan_memory_model = 1
const KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore"
const KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2
const KHR_timeline_semaphore = 1
const KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format"
const KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1
const KHR_swapchain_mutable_format = 1
const KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve"
const KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1
const KHR_depth_stencil_resolve = 1
const KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls"
const KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4
const KHR_shader_float_controls = 1
const KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties"
const KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1
const KHR_driver_properties = 1
const KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock"
const KHR_SHADER_CLOCK_SPEC_VERSION = 1
const KHR_shader_clock = 1
const KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64"
const KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1
const KHR_shader_atomic_int64 = 1
const KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage"
const KHR_8BIT_STORAGE_SPEC_VERSION = 1
const KHR_8bit_storage = 1
const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types"
const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1
const KHR_shader_subgroup_extended_types = 1
const KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count"
const KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1
const KHR_draw_indirect_count = 1
const KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3"
const KHR_MAINTENANCE3_SPEC_VERSION = 1
const KHR_maintenance3 = 1
const KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2"
const KHR_BIND_MEMORY_2_SPEC_VERSION = 1
const KHR_bind_memory2 = 1
const KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion"
const KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14
const KHR_sampler_ycbcr_conversion = 1
const KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list"
const KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1
const KHR_image_format_list = 1
const KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2"
const KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1
const KHR_get_memory_requirements2 = 1
const KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout"
const KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1
const KHR_relaxed_block_layout = 1
const KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class"
const KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1
const KHR_storage_buffer_storage_class = 1
const KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation"
const KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3
const KHR_dedicated_allocation = 1
const KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2"
const KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1
const KHR_get_display_properties2 = 1
const KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers"
const KHR_VARIABLE_POINTERS_SPEC_VERSION = 1
const KHR_variable_pointers = 1
const KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2"
const KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1
const KHR_get_surface_capabilities2 = 1
const KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2"
const KHR_MAINTENANCE2_SPEC_VERSION = 1
const KHR_maintenance2 = 1
const KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query"
const KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1
const KHR_performance_query = 1
const KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd"
const KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1
const KHR_external_fence_fd = 1
const KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence"
const KHR_EXTERNAL_FENCE_SPEC_VERSION = 1
const KHR_external_fence = 1
const KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities"
const KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1
const KHR_external_fence_capabilities = 1
const KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image"
const KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1
const KHR_shared_presentable_image = 1
const KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2"
const KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1
const KHR_create_renderpass2 = 1
const KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer"
const KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1
const KHR_imageless_framebuffer = 1
const KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template"
const KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1
const KHR_descriptor_update_template = 1
const KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present"
const KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1
const KHR_incremental_present = 1
const KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage"
const KHR_16BIT_STORAGE_SPEC_VERSION = 1
const KHR_16bit_storage = 1
const KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8"
const KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1
const KHR_shader_float16_int8 = 1
const KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor"
const KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2
const KHR_push_descriptor = 1
const KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd"
const KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1
const KHR_external_semaphore_fd = 1
const KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore"
const KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1
const KHR_external_semaphore = 1
const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities"
const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1
const KHR_external_semaphore_capabilities = 1
const KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd"
const KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1
const KHR_external_memory_fd = 1
const KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory"
const KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1
const KHR_external_memory = 1
const KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities"
const KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1
const KHR_external_memory_capabilities = 1
const KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation"
const KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1
const KHR_device_group_creation = 1
const KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1"
const KHR_MAINTENANCE1_SPEC_VERSION = 2
const KHR_maintenance1 = 1
const KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters"
const KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1
const KHR_shader_draw_parameters = 1
const KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group"
const KHR_DEVICE_GROUP_SPEC_VERSION = 4
const KHR_device_group = 1
const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2"
const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2
const KHR_get_physical_device_properties2 = 1
const KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview"
const KHR_MULTIVIEW_SPEC_VERSION = 1
const KHR_multiview = 1
const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge"
const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3
const KHR_sampler_mirror_clamp_to_edge = 1
const KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain"
const KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10
const KHR_display_swapchain = 1
const KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display"
const KHR_DISPLAY_SPEC_VERSION = 23
const KHR_display = 1
const KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain"
const KHR_SWAPCHAIN_SPEC_VERSION = 70
const KHR_swapchain = 1
const KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface"
const KHR_SURFACE_SPEC_VERSION = 25
const KHR_surface = 1
const MAX_DRIVER_INFO_SIZE = 256
const MAX_DRIVER_NAME_SIZE = 256
const VERSION_1_2 = 1
const QUEUE_FAMILY_EXTERNAL = ~(UInt32(0)) - 1
const LUID_SIZE = 8
const MAX_DEVICE_GROUP_SIZE = 32
const VERSION_1_1 = 1
const MAX_DESCRIPTION_SIZE = 256
const MAX_EXTENSION_NAME_SIZE = 256
const UUID_SIZE = 16
const MAX_PHYSICAL_DEVICE_NAME_SIZE = 256
const MAX_MEMORY_HEAPS = 16
const MAX_MEMORY_TYPES = 32
const WHOLE_SIZE = ~(UInt64(0))
const TRUE = 1
const SUBPASS_EXTERNAL = ~(UInt32(0))
const REMAINING_MIP_LEVELS = ~(UInt32(0))
const REMAINING_ARRAY_LAYERS = ~(UInt32(0))
const QUEUE_FAMILY_IGNORED = ~(UInt32(0))
const LOD_CLAMP_NONE = Float32(1000.0)
const FALSE = 0
const ATTACHMENT_UNUSED = ~(UInt32(0))
const NULL_HANDLE = 0
const HEADER_VERSION = 151
const VERSION_1_0 = 1
const VULKAN_CORE_H_ = 1
const VULKAN_H_ = 1






"""
Generic constructor.
"""
function Extent2D(width, height)
    vks = VkExtent2D(width, height)
    Extent2D(vks)
end

from_vk(T::Type{Extent2D}, x::VkExtent2D) = Extent2D(x.width, x.height)
"""
Generic constructor.
"""
function Extent3D(width, height, depth)
    vks = VkExtent3D(width, height, depth)
    Extent3D(vks)
end

from_vk(T::Type{Extent3D}, x::VkExtent3D) = Extent3D(x.width, x.height, x.depth)
"""
Generic constructor.
"""
function Offset2D(x, y)
    vks = VkOffset2D(x, y)
    Offset2D(vks)
end

from_vk(T::Type{Offset2D}, x::VkOffset2D) = Offset2D(x.x, x.y)
"""
Generic constructor.
"""
function Offset3D(x, y, z)
    vks = VkOffset3D(x, y, z)
    Offset3D(vks)
end

from_vk(T::Type{Offset3D}, x::VkOffset3D) = Offset3D(x.x, x.y, x.z)
"""
Generic constructor.
"""
function Rect2D(offset, extent)
    vks = VkRect2D(offset.vks, extent.vks)
    Rect2D(vks)
end

from_vk(T::Type{Rect2D}, x::VkRect2D) = Rect2D(x.offset, x.extent)
"""
Generic constructor.
"""
function DispatchIndirectCommand(x, y, z)
    vks = VkDispatchIndirectCommand(x, y, z)
    DispatchIndirectCommand(vks)
end

from_vk(T::Type{DispatchIndirectCommand}, x::VkDispatchIndirectCommand) =
    DispatchIndirectCommand(x.x, x.y, x.z)
"""
Generic constructor.
"""
function DrawIndexedIndirectCommand(
    index_count,
    instance_count,
    first_index,
    vertex_offset,
    first_instance,
)
    vks = VkDrawIndexedIndirectCommand(
        index_count,
        instance_count,
        first_index,
        vertex_offset,
        first_instance,
    )
    DrawIndexedIndirectCommand(vks)
end

from_vk(T::Type{DrawIndexedIndirectCommand}, x::VkDrawIndexedIndirectCommand) =
    DrawIndexedIndirectCommand(
        x.indexCount,
        x.instanceCount,
        x.firstIndex,
        x.vertexOffset,
        x.firstInstance,
    )

"""
Generic constructor.
"""
function DrawIndirectCommand(vertex_count, instance_count, first_vertex, first_instance)
    vks = VkDrawIndirectCommand(vertex_count, instance_count, first_vertex, first_instance)
    DrawIndirectCommand(vks)
end

from_vk(T::Type{DrawIndirectCommand}, x::VkDrawIndirectCommand) =
    DrawIndirectCommand(x.vertexCount, x.instanceCount, x.firstVertex, x.firstInstance)

"""
Generic constructor.
"""
function ImageSubresourceRange(
    aspect_mask,
    base_mip_level,
    level_count,
    base_array_layer,
    layer_count,
)
    vks = VkImageSubresourceRange(
        aspect_mask,
        base_mip_level,
        level_count,
        base_array_layer,
        layer_count,
    )
    ImageSubresourceRange(vks)
end

from_vk(T::Type{ImageSubresourceRange}, x::VkImageSubresourceRange) = ImageSubresourceRange(
    x.aspectMask,
    x.baseMipLevel,
    x.levelCount,
    x.baseArrayLayer,
    x.layerCount,
)

FormatProperties(vks::VkFormatProperties) = FormatProperties(
    from_vk(FormatFeatureFlags, vks.linearTilingFeatures),
    from_vk(FormatFeatureFlags, vks.optimalTilingFeatures),
    from_vk(FormatFeatureFlags, vks.bufferFeatures),
)

from_vk(T::Type{FormatProperties}, x::VkFormatProperties) = FormatProperties(x)
ImageFormatProperties(vks::VkImageFormatProperties) = ImageFormatProperties(
    from_vk(Extent3D, vks.maxExtent),
    from_vk(UInt32, vks.maxMipLevels),
    from_vk(UInt32, vks.maxArrayLayers),
    from_vk(SampleCountFlags, vks.sampleCounts),
    from_vk(DeviceSize, vks.maxResourceSize),
)

from_vk(T::Type{ImageFormatProperties}, x::VkImageFormatProperties) =
    ImageFormatProperties(x)
MemoryHeap(vks::VkMemoryHeap) =
    MemoryHeap(from_vk(DeviceSize, vks.size), from_vk(MemoryHeapFlags, vks.flags))
from_vk(T::Type{MemoryHeap}, x::VkMemoryHeap) = MemoryHeap(x)
MemoryType(vks::VkMemoryType) = MemoryType(
    from_vk(MemoryPropertyFlags, vks.propertyFlags),
    from_vk(UInt32, vks.heapIndex),
)
from_vk(T::Type{MemoryType}, x::VkMemoryType) = MemoryType(x)
"""
Generic constructor.
"""
function PhysicalDeviceFeatures(
    robust_buffer_access,
    full_draw_index_uint_32,
    image_cube_array,
    independent_blend,
    geometry_shader,
    tessellation_shader,
    sample_rate_shading,
    dual_src_blend,
    logic_op,
    multi_draw_indirect,
    draw_indirect_first_instance,
    depth_clamp,
    depth_bias_clamp,
    fill_mode_non_solid,
    depth_bounds,
    wide_lines,
    large_points,
    alpha_to_one,
    multi_viewport,
    sampler_anisotropy,
    texture_compression_etc_2,
    texture_compression_astc_ldr,
    texture_compression_bc,
    occlusion_query_precise,
    pipeline_statistics_query,
    vertex_pipeline_stores_and_atomics,
    fragment_stores_and_atomics,
    shader_tessellation_and_geometry_point_size,
    shader_image_gather_extended,
    shader_storage_image_extended_formats,
    shader_storage_image_multisample,
    shader_storage_image_read_without_format,
    shader_storage_image_write_without_format,
    shader_uniform_buffer_array_dynamic_indexing,
    shader_sampled_image_array_dynamic_indexing,
    shader_storage_buffer_array_dynamic_indexing,
    shader_storage_image_array_dynamic_indexing,
    shader_clip_distance,
    shader_cull_distance,
    shader_float_64,
    shader_int_64,
    shader_int_16,
    shader_resource_residency,
    shader_resource_min_lod,
    sparse_binding,
    sparse_residency_buffer,
    sparse_residency_image_2_d,
    sparse_residency_image_3_d,
    sparse_residency_2_samples,
    sparse_residency_4_samples,
    sparse_residency_8_samples,
    sparse_residency_16_samples,
    sparse_residency_aliased,
    variable_multisample_rate,
    inherited_queries,
)
    vks = VkPhysicalDeviceFeatures(
        robust_buffer_access,
        full_draw_index_uint_32,
        image_cube_array,
        independent_blend,
        geometry_shader,
        tessellation_shader,
        sample_rate_shading,
        dual_src_blend,
        logic_op,
        multi_draw_indirect,
        draw_indirect_first_instance,
        depth_clamp,
        depth_bias_clamp,
        fill_mode_non_solid,
        depth_bounds,
        wide_lines,
        large_points,
        alpha_to_one,
        multi_viewport,
        sampler_anisotropy,
        texture_compression_etc_2,
        texture_compression_astc_ldr,
        texture_compression_bc,
        occlusion_query_precise,
        pipeline_statistics_query,
        vertex_pipeline_stores_and_atomics,
        fragment_stores_and_atomics,
        shader_tessellation_and_geometry_point_size,
        shader_image_gather_extended,
        shader_storage_image_extended_formats,
        shader_storage_image_multisample,
        shader_storage_image_read_without_format,
        shader_storage_image_write_without_format,
        shader_uniform_buffer_array_dynamic_indexing,
        shader_sampled_image_array_dynamic_indexing,
        shader_storage_buffer_array_dynamic_indexing,
        shader_storage_image_array_dynamic_indexing,
        shader_clip_distance,
        shader_cull_distance,
        shader_float_64,
        shader_int_64,
        shader_int_16,
        shader_resource_residency,
        shader_resource_min_lod,
        sparse_binding,
        sparse_residency_buffer,
        sparse_residency_image_2_d,
        sparse_residency_image_3_d,
        sparse_residency_2_samples,
        sparse_residency_4_samples,
        sparse_residency_8_samples,
        sparse_residency_16_samples,
        sparse_residency_aliased,
        variable_multisample_rate,
        inherited_queries,
    )
    PhysicalDeviceFeatures(vks)
end

from_vk(T::Type{PhysicalDeviceFeatures}, x::VkPhysicalDeviceFeatures) =
    PhysicalDeviceFeatures(
        x.robustBufferAccess,
        x.fullDrawIndexUint32,
        x.imageCubeArray,
        x.independentBlend,
        x.geometryShader,
        x.tessellationShader,
        x.sampleRateShading,
        x.dualSrcBlend,
        x.logicOp,
        x.multiDrawIndirect,
        x.drawIndirectFirstInstance,
        x.depthClamp,
        x.depthBiasClamp,
        x.fillModeNonSolid,
        x.depthBounds,
        x.wideLines,
        x.largePoints,
        x.alphaToOne,
        x.multiViewport,
        x.samplerAnisotropy,
        x.textureCompressionETC2,
        x.textureCompressionASTC_LDR,
        x.textureCompressionBC,
        x.occlusionQueryPrecise,
        x.pipelineStatisticsQuery,
        x.vertexPipelineStoresAndAtomics,
        x.fragmentStoresAndAtomics,
        x.shaderTessellationAndGeometryPointSize,
        x.shaderImageGatherExtended,
        x.shaderStorageImageExtendedFormats,
        x.shaderStorageImageMultisample,
        x.shaderStorageImageReadWithoutFormat,
        x.shaderStorageImageWriteWithoutFormat,
        x.shaderUniformBufferArrayDynamicIndexing,
        x.shaderSampledImageArrayDynamicIndexing,
        x.shaderStorageBufferArrayDynamicIndexing,
        x.shaderStorageImageArrayDynamicIndexing,
        x.shaderClipDistance,
        x.shaderCullDistance,
        x.shaderFloat64,
        x.shaderInt64,
        x.shaderInt16,
        x.shaderResourceResidency,
        x.shaderResourceMinLod,
        x.sparseBinding,
        x.sparseResidencyBuffer,
        x.sparseResidencyImage2D,
        x.sparseResidencyImage3D,
        x.sparseResidency2Samples,
        x.sparseResidency4Samples,
        x.sparseResidency8Samples,
        x.sparseResidency16Samples,
        x.sparseResidencyAliased,
        x.variableMultisampleRate,
        x.inheritedQueries,
    )

PhysicalDeviceLimits(vks::VkPhysicalDeviceLimits) = PhysicalDeviceLimits(
    from_vk(UInt32, vks.maxImageDimension1D),
    from_vk(UInt32, vks.maxImageDimension2D),
    from_vk(UInt32, vks.maxImageDimension3D),
    from_vk(UInt32, vks.maxImageDimensionCube),
    from_vk(UInt32, vks.maxImageArrayLayers),
    from_vk(UInt32, vks.maxTexelBufferElements),
    from_vk(UInt32, vks.maxUniformBufferRange),
    from_vk(UInt32, vks.maxStorageBufferRange),
    from_vk(UInt32, vks.maxPushConstantsSize),
    from_vk(UInt32, vks.maxMemoryAllocationCount),
    from_vk(UInt32, vks.maxSamplerAllocationCount),
    from_vk(DeviceSize, vks.bufferImageGranularity),
    from_vk(DeviceSize, vks.sparseAddressSpaceSize),
    from_vk(UInt32, vks.maxBoundDescriptorSets),
    from_vk(UInt32, vks.maxPerStageDescriptorSamplers),
    from_vk(UInt32, vks.maxPerStageDescriptorUniformBuffers),
    from_vk(UInt32, vks.maxPerStageDescriptorStorageBuffers),
    from_vk(UInt32, vks.maxPerStageDescriptorSampledImages),
    from_vk(UInt32, vks.maxPerStageDescriptorStorageImages),
    from_vk(UInt32, vks.maxPerStageDescriptorInputAttachments),
    from_vk(UInt32, vks.maxPerStageResources),
    from_vk(UInt32, vks.maxDescriptorSetSamplers),
    from_vk(UInt32, vks.maxDescriptorSetUniformBuffers),
    from_vk(UInt32, vks.maxDescriptorSetUniformBuffersDynamic),
    from_vk(UInt32, vks.maxDescriptorSetStorageBuffers),
    from_vk(UInt32, vks.maxDescriptorSetStorageBuffersDynamic),
    from_vk(UInt32, vks.maxDescriptorSetSampledImages),
    from_vk(UInt32, vks.maxDescriptorSetStorageImages),
    from_vk(UInt32, vks.maxDescriptorSetInputAttachments),
    from_vk(UInt32, vks.maxVertexInputAttributes),
    from_vk(UInt32, vks.maxVertexInputBindings),
    from_vk(UInt32, vks.maxVertexInputAttributeOffset),
    from_vk(UInt32, vks.maxVertexInputBindingStride),
    from_vk(UInt32, vks.maxVertexOutputComponents),
    from_vk(UInt32, vks.maxTessellationGenerationLevel),
    from_vk(UInt32, vks.maxTessellationPatchSize),
    from_vk(UInt32, vks.maxTessellationControlPerVertexInputComponents),
    from_vk(UInt32, vks.maxTessellationControlPerVertexOutputComponents),
    from_vk(UInt32, vks.maxTessellationControlPerPatchOutputComponents),
    from_vk(UInt32, vks.maxTessellationControlTotalOutputComponents),
    from_vk(UInt32, vks.maxTessellationEvaluationInputComponents),
    from_vk(UInt32, vks.maxTessellationEvaluationOutputComponents),
    from_vk(UInt32, vks.maxGeometryShaderInvocations),
    from_vk(UInt32, vks.maxGeometryInputComponents),
    from_vk(UInt32, vks.maxGeometryOutputComponents),
    from_vk(UInt32, vks.maxGeometryOutputVertices),
    from_vk(UInt32, vks.maxGeometryTotalOutputComponents),
    from_vk(UInt32, vks.maxFragmentInputComponents),
    from_vk(UInt32, vks.maxFragmentOutputAttachments),
    from_vk(UInt32, vks.maxFragmentDualSrcAttachments),
    from_vk(UInt32, vks.maxFragmentCombinedOutputResources),
    from_vk(UInt32, vks.maxComputeSharedMemorySize),
    from_vk(NTuple{3,UInt32}, vks.maxComputeWorkGroupCount),
    from_vk(UInt32, vks.maxComputeWorkGroupInvocations),
    from_vk(NTuple{3,UInt32}, vks.maxComputeWorkGroupSize),
    from_vk(UInt32, vks.subPixelPrecisionBits),
    from_vk(UInt32, vks.subTexelPrecisionBits),
    from_vk(UInt32, vks.mipmapPrecisionBits),
    from_vk(UInt32, vks.maxDrawIndexedIndexValue),
    from_vk(UInt32, vks.maxDrawIndirectCount),
    from_vk(Float32, vks.maxSamplerLodBias),
    from_vk(Float32, vks.maxSamplerAnisotropy),
    from_vk(UInt32, vks.maxViewports),
    from_vk(NTuple{2,UInt32}, vks.maxViewportDimensions),
    from_vk(NTuple{2,Cfloat}, vks.viewportBoundsRange),
    from_vk(UInt32, vks.viewportSubPixelBits),
    from_vk(UInt, vks.minMemoryMapAlignment),
    from_vk(DeviceSize, vks.minTexelBufferOffsetAlignment),
    from_vk(DeviceSize, vks.minUniformBufferOffsetAlignment),
    from_vk(DeviceSize, vks.minStorageBufferOffsetAlignment),
    from_vk(Int32, vks.minTexelOffset),
    from_vk(UInt32, vks.maxTexelOffset),
    from_vk(Int32, vks.minTexelGatherOffset),
    from_vk(UInt32, vks.maxTexelGatherOffset),
    from_vk(Float32, vks.minInterpolationOffset),
    from_vk(Float32, vks.maxInterpolationOffset),
    from_vk(UInt32, vks.subPixelInterpolationOffsetBits),
    from_vk(UInt32, vks.maxFramebufferWidth),
    from_vk(UInt32, vks.maxFramebufferHeight),
    from_vk(UInt32, vks.maxFramebufferLayers),
    from_vk(SampleCountFlags, vks.framebufferColorSampleCounts),
    from_vk(SampleCountFlags, vks.framebufferDepthSampleCounts),
    from_vk(SampleCountFlags, vks.framebufferStencilSampleCounts),
    from_vk(SampleCountFlags, vks.framebufferNoAttachmentsSampleCounts),
    from_vk(UInt32, vks.maxColorAttachments),
    from_vk(SampleCountFlags, vks.sampledImageColorSampleCounts),
    from_vk(SampleCountFlags, vks.sampledImageIntegerSampleCounts),
    from_vk(SampleCountFlags, vks.sampledImageDepthSampleCounts),
    from_vk(SampleCountFlags, vks.sampledImageStencilSampleCounts),
    from_vk(SampleCountFlags, vks.storageImageSampleCounts),
    from_vk(UInt32, vks.maxSampleMaskWords),
    from_vk(Bool, vks.timestampComputeAndGraphics),
    from_vk(Float32, vks.timestampPeriod),
    from_vk(UInt32, vks.maxClipDistances),
    from_vk(UInt32, vks.maxCullDistances),
    from_vk(UInt32, vks.maxCombinedClipAndCullDistances),
    from_vk(UInt32, vks.discreteQueuePriorities),
    from_vk(NTuple{2,Cfloat}, vks.pointSizeRange),
    from_vk(NTuple{2,Cfloat}, vks.lineWidthRange),
    from_vk(Float32, vks.pointSizeGranularity),
    from_vk(Float32, vks.lineWidthGranularity),
    from_vk(Bool, vks.strictLines),
    from_vk(Bool, vks.standardSampleLocations),
    from_vk(DeviceSize, vks.optimalBufferCopyOffsetAlignment),
    from_vk(DeviceSize, vks.optimalBufferCopyRowPitchAlignment),
    from_vk(DeviceSize, vks.nonCoherentAtomSize),
)

from_vk(T::Type{PhysicalDeviceLimits}, x::VkPhysicalDeviceLimits) = PhysicalDeviceLimits(x)
PhysicalDeviceMemoryProperties(vks::VkPhysicalDeviceMemoryProperties) =
    PhysicalDeviceMemoryProperties(
        from_vk(UInt32, vks.memoryTypeCount),
        from_vk(NTuple{32,VkMemoryType}, vks.memoryTypes),
        from_vk(UInt32, vks.memoryHeapCount),
        from_vk(NTuple{16,VkMemoryHeap}, vks.memoryHeaps),
    )

from_vk(T::Type{PhysicalDeviceMemoryProperties}, x::VkPhysicalDeviceMemoryProperties) =
    PhysicalDeviceMemoryProperties(x)
PhysicalDeviceSparseProperties(vks::VkPhysicalDeviceSparseProperties) =
    PhysicalDeviceSparseProperties(
        from_vk(Bool, vks.residencyStandard2DBlockShape),
        from_vk(Bool, vks.residencyStandard2DMultisampleBlockShape),
        from_vk(Bool, vks.residencyStandard3DBlockShape),
        from_vk(Bool, vks.residencyAlignedMipSize),
        from_vk(Bool, vks.residencyNonResidentStrict),
    )

from_vk(T::Type{PhysicalDeviceSparseProperties}, x::VkPhysicalDeviceSparseProperties) =
    PhysicalDeviceSparseProperties(x)
PhysicalDeviceProperties(vks::VkPhysicalDeviceProperties) = PhysicalDeviceProperties(
    from_vk(VersionNumber, vks.apiVersion),
    from_vk(VersionNumber, vks.driverVersion),
    from_vk(UInt32, vks.vendorID),
    from_vk(UInt32, vks.deviceID),
    from_vk(PhysicalDeviceType, vks.deviceType),
    from_vk(String, vks.deviceName),
    from_vk(String, vks.pipelineCacheUUID),
    from_vk(PhysicalDeviceLimits, vks.limits),
    from_vk(PhysicalDeviceSparseProperties, vks.sparseProperties),
)

from_vk(T::Type{PhysicalDeviceProperties}, x::VkPhysicalDeviceProperties) =
    PhysicalDeviceProperties(x)
QueueFamilyProperties(vks::VkQueueFamilyProperties) = QueueFamilyProperties(
    from_vk(QueueFlags, vks.queueFlags),
    from_vk(UInt32, vks.queueCount),
    from_vk(UInt32, vks.timestampValidBits),
    from_vk(Extent3D, vks.minImageTransferGranularity),
)

from_vk(T::Type{QueueFamilyProperties}, x::VkQueueFamilyProperties) =
    QueueFamilyProperties(x)
ExtensionProperties(vks::VkExtensionProperties) = ExtensionProperties(
    from_vk(String, vks.extensionName),
    from_vk(VersionNumber, vks.specVersion),
)

from_vk(T::Type{ExtensionProperties}, x::VkExtensionProperties) = ExtensionProperties(x)
LayerProperties(vks::VkLayerProperties) = LayerProperties(
    from_vk(String, vks.layerName),
    from_vk(VersionNumber, vks.specVersion),
    from_vk(VersionNumber, vks.implementationVersion),
    from_vk(String, vks.description),
)

from_vk(T::Type{LayerProperties}, x::VkLayerProperties) = LayerProperties(x)
MemoryRequirements(vks::VkMemoryRequirements) = MemoryRequirements(
    from_vk(DeviceSize, vks.size),
    from_vk(DeviceSize, vks.alignment),
    from_vk(UInt32, vks.memoryTypeBits),
)

from_vk(T::Type{MemoryRequirements}, x::VkMemoryRequirements) = MemoryRequirements(x)
"""
Generic constructor.
"""
function SparseMemoryBind(resource_offset, size, memory_offset; memory = C_NULL, flags = 0)
    vks = VkSparseMemoryBind(
        resource_offset,
        size,
        if memory == C_NULL
            C_NULL
        else
            memory.handle
        end,
        memory_offset,
        if flags == 0
            0
        else
            flags
        end,
    )
    SparseMemoryBind(vks)
end

from_vk(T::Type{SparseMemoryBind}, x::VkSparseMemoryBind) =
    SparseMemoryBind(x.resourceOffset, x.size, x.memory, x.memoryOffset, x.flags)
"""
Generic constructor.
"""
function ImageSubresource(aspect_mask, mip_level, array_layer)
    vks = VkImageSubresource(aspect_mask, mip_level, array_layer)
    ImageSubresource(vks)
end

from_vk(T::Type{ImageSubresource}, x::VkImageSubresource) =
    ImageSubresource(x.aspectMask, x.mipLevel, x.arrayLayer)
"""
Generic constructor.
"""
function SparseImageMemoryBind(
    subresource,
    offset,
    extent,
    memory_offset;
    memory = C_NULL,
    flags = 0,
)
    vks = VkSparseImageMemoryBind(
        subresource.vks,
        offset.vks,
        extent.vks,
        if memory == C_NULL
            C_NULL
        else
            memory.handle
        end,
        memory_offset,
        if flags == 0
            0
        else
            flags
        end,
    )
    SparseImageMemoryBind(vks)
end

from_vk(T::Type{SparseImageMemoryBind}, x::VkSparseImageMemoryBind) = SparseImageMemoryBind(
    x.subresource,
    x.offset,
    x.extent,
    x.memory,
    x.memoryOffset,
    x.flags,
)

SparseImageFormatProperties(vks::VkSparseImageFormatProperties) =
    SparseImageFormatProperties(
        from_vk(ImageAspectFlags, vks.aspectMask),
        from_vk(Extent3D, vks.imageGranularity),
        from_vk(SparseImageFormatFlags, vks.flags),
    )

from_vk(T::Type{SparseImageFormatProperties}, x::VkSparseImageFormatProperties) =
    SparseImageFormatProperties(x)
SparseImageMemoryRequirements(vks::VkSparseImageMemoryRequirements) =
    SparseImageMemoryRequirements(
        from_vk(SparseImageFormatProperties, vks.formatProperties),
        from_vk(UInt32, vks.imageMipTailFirstLod),
        from_vk(DeviceSize, vks.imageMipTailSize),
        from_vk(DeviceSize, vks.imageMipTailOffset),
        from_vk(DeviceSize, vks.imageMipTailStride),
    )

from_vk(T::Type{SparseImageMemoryRequirements}, x::VkSparseImageMemoryRequirements) =
    SparseImageMemoryRequirements(x)
SubresourceLayout(vks::VkSubresourceLayout) = SubresourceLayout(
    from_vk(DeviceSize, vks.offset),
    from_vk(DeviceSize, vks.size),
    from_vk(DeviceSize, vks.rowPitch),
    from_vk(DeviceSize, vks.arrayPitch),
    from_vk(DeviceSize, vks.depthPitch),
)

from_vk(T::Type{SubresourceLayout}, x::VkSubresourceLayout) = SubresourceLayout(x)
"""
Generic constructor.
"""
function ComponentMapping(r, g, b, a)
    vks = VkComponentMapping(r, g, b, a)
    ComponentMapping(vks)
end

from_vk(T::Type{ComponentMapping}, x::VkComponentMapping) =
    ComponentMapping(x.r, x.g, x.b, x.a)
"""
Generic constructor.
"""
function SpecializationMapEntry(constant_id, offset, size)
    vks = VkSpecializationMapEntry(constant_id, offset, size)
    SpecializationMapEntry(vks)
end

from_vk(T::Type{SpecializationMapEntry}, x::VkSpecializationMapEntry) =
    SpecializationMapEntry(x.constantID, x.offset, x.size)
"""
Generic constructor.
"""
function VertexInputBindingDescription(binding, stride, input_rate)
    vks = VkVertexInputBindingDescription(binding, stride, input_rate)
    VertexInputBindingDescription(vks)
end

from_vk(T::Type{VertexInputBindingDescription}, x::VkVertexInputBindingDescription) =
    VertexInputBindingDescription(x.binding, x.stride, x.inputRate)

"""
Generic constructor.
"""
function VertexInputAttributeDescription(location, binding, format, offset)
    vks = VkVertexInputAttributeDescription(location, binding, format, offset)
    VertexInputAttributeDescription(vks)
end

from_vk(T::Type{VertexInputAttributeDescription}, x::VkVertexInputAttributeDescription) =
    VertexInputAttributeDescription(x.location, x.binding, x.format, x.offset)

"""
Generic constructor.
"""
function Viewport(x, y, width, height, min_depth, max_depth)
    vks = VkViewport(x, y, width, height, min_depth, max_depth)
    Viewport(vks)
end

from_vk(T::Type{Viewport}, x::VkViewport) =
    Viewport(x.x, x.y, x.width, x.height, x.minDepth, x.maxDepth)
"""
Generic constructor.
"""
function StencilOpState(
    fail_op,
    pass_op,
    depth_fail_op,
    compare_op,
    compare_mask,
    write_mask,
    reference,
)
    vks = VkStencilOpState(
        fail_op,
        pass_op,
        depth_fail_op,
        compare_op,
        compare_mask,
        write_mask,
        reference,
    )
    StencilOpState(vks)
end

from_vk(T::Type{StencilOpState}, x::VkStencilOpState) = StencilOpState(
    x.failOp,
    x.passOp,
    x.depthFailOp,
    x.compareOp,
    x.compareMask,
    x.writeMask,
    x.reference,
)

"""
Generic constructor.
"""
function PipelineColorBlendAttachmentState(
    blend_enable,
    src_color_blend_factor,
    dst_color_blend_factor,
    color_blend_op,
    src_alpha_blend_factor,
    dst_alpha_blend_factor,
    alpha_blend_op;
    color_write_mask = 0,
)
    vks = VkPipelineColorBlendAttachmentState(
        blend_enable,
        src_color_blend_factor,
        dst_color_blend_factor,
        color_blend_op,
        src_alpha_blend_factor,
        dst_alpha_blend_factor,
        alpha_blend_op,
        if color_write_mask == 0
            0
        else
            color_write_mask
        end,
    )
    PipelineColorBlendAttachmentState(vks)
end

from_vk(
    T::Type{PipelineColorBlendAttachmentState},
    x::VkPipelineColorBlendAttachmentState,
) = PipelineColorBlendAttachmentState(
    x.blendEnable,
    x.srcColorBlendFactor,
    x.dstColorBlendFactor,
    x.colorBlendOp,
    x.srcAlphaBlendFactor,
    x.dstAlphaBlendFactor,
    x.alphaBlendOp,
    x.colorWriteMask,
)

"""
Generic constructor.
"""
function PushConstantRange(stage_flags, offset, size)
    vks = VkPushConstantRange(stage_flags, offset, size)
    PushConstantRange(vks)
end

from_vk(T::Type{PushConstantRange}, x::VkPushConstantRange) =
    PushConstantRange(x.stageFlags, x.offset, x.size)
"""
Generic constructor.
"""
function DescriptorBufferInfo(offset, range; buffer = C_NULL)
    vks = VkDescriptorBufferInfo(if buffer == C_NULL
        C_NULL
    else
        buffer.handle
    end, offset, range)
    DescriptorBufferInfo(vks)
end

from_vk(T::Type{DescriptorBufferInfo}, x::VkDescriptorBufferInfo) =
    DescriptorBufferInfo(x.buffer, x.offset, x.range)
"""
Generic constructor.
"""
function DescriptorImageInfo(sampler, image_view, image_layout)
    vks = VkDescriptorImageInfo(sampler.handle, image_view.handle, image_layout)
    DescriptorImageInfo(vks)
end

from_vk(T::Type{DescriptorImageInfo}, x::VkDescriptorImageInfo) =
    DescriptorImageInfo(x.sampler, x.imageView, x.imageLayout)
"""
Generic constructor.
"""
function DescriptorPoolSize(type, descriptor_count)
    vks = VkDescriptorPoolSize(type, descriptor_count)
    DescriptorPoolSize(vks)
end

from_vk(T::Type{DescriptorPoolSize}, x::VkDescriptorPoolSize) =
    DescriptorPoolSize(x.type, x.descriptorCount)
"""
Generic constructor.
"""
function AttachmentDescription(
    format,
    samples,
    load_op,
    store_op,
    stencil_load_op,
    stencil_store_op,
    initial_layout,
    final_layout;
    flags = 0,
)
    vks = VkAttachmentDescription(
        if flags == 0
            0
        else
            flags
        end,
        format,
        samples,
        load_op,
        store_op,
        stencil_load_op,
        stencil_store_op,
        initial_layout,
        final_layout,
    )
    AttachmentDescription(vks)
end

from_vk(T::Type{AttachmentDescription}, x::VkAttachmentDescription) = AttachmentDescription(
    x.flags,
    x.format,
    x.samples,
    x.loadOp,
    x.storeOp,
    x.stencilLoadOp,
    x.stencilStoreOp,
    x.initialLayout,
    x.finalLayout,
)

"""
Generic constructor.
"""
function AttachmentReference(attachment, layout)
    vks = VkAttachmentReference(attachment, layout)
    AttachmentReference(vks)
end

from_vk(T::Type{AttachmentReference}, x::VkAttachmentReference) =
    AttachmentReference(x.attachment, x.layout)
"""
Generic constructor.
"""
function SubpassDependency(
    src_subpass,
    dst_subpass,
    src_stage_mask,
    dst_stage_mask;
    src_access_mask = 0,
    dst_access_mask = 0,
    dependency_flags = 0,
)
    vks = VkSubpassDependency(
        src_subpass,
        dst_subpass,
        src_stage_mask,
        dst_stage_mask,
        if src_access_mask == 0
            0
        else
            src_access_mask
        end,
        if dst_access_mask == 0
            0
        else
            dst_access_mask
        end,
        if dependency_flags == 0
            0
        else
            dependency_flags
        end,
    )
    SubpassDependency(vks)
end

from_vk(T::Type{SubpassDependency}, x::VkSubpassDependency) = SubpassDependency(
    x.srcSubpass,
    x.dstSubpass,
    x.srcStageMask,
    x.dstStageMask,
    x.srcAccessMask,
    x.dstAccessMask,
    x.dependencyFlags,
)

"""
Generic constructor.
"""
function BufferCopy(src_offset, dst_offset, size)
    vks = VkBufferCopy(src_offset, dst_offset, size)
    BufferCopy(vks)
end

from_vk(T::Type{BufferCopy}, x::VkBufferCopy) = BufferCopy(x.srcOffset, x.dstOffset, x.size)
"""
Generic constructor.
"""
function ImageSubresourceLayers(aspect_mask, mip_level, base_array_layer, layer_count)
    vks = VkImageSubresourceLayers(aspect_mask, mip_level, base_array_layer, layer_count)
    ImageSubresourceLayers(vks)
end

from_vk(T::Type{ImageSubresourceLayers}, x::VkImageSubresourceLayers) =
    ImageSubresourceLayers(x.aspectMask, x.mipLevel, x.baseArrayLayer, x.layerCount)

"""
Generic constructor.
"""
function BufferImageCopy(
    buffer_offset,
    buffer_row_length,
    buffer_image_height,
    image_subresource,
    image_offset,
    image_extent,
)
    vks = VkBufferImageCopy(
        buffer_offset,
        buffer_row_length,
        buffer_image_height,
        image_subresource.vks,
        image_offset.vks,
        image_extent.vks,
    )
    BufferImageCopy(vks)
end

from_vk(T::Type{BufferImageCopy}, x::VkBufferImageCopy) = BufferImageCopy(
    x.bufferOffset,
    x.bufferRowLength,
    x.bufferImageHeight,
    x.imageSubresource,
    x.imageOffset,
    x.imageExtent,
)

"""
Generic constructor.
"""
function ClearColorValue(float32)
    vks = VkClearColorValue(float32)
    ClearColorValue(vks)
end

from_vk(T::Type{ClearColorValue}, x::VkClearColorValue) = ClearColorValue(x.float32)
"""
Generic constructor.
"""
function ClearDepthStencilValue(depth, stencil)
    vks = VkClearDepthStencilValue(depth, stencil)
    ClearDepthStencilValue(vks)
end

from_vk(T::Type{ClearDepthStencilValue}, x::VkClearDepthStencilValue) =
    ClearDepthStencilValue(x.depth, x.stencil)
"""
Generic constructor.
"""
function ClearValue(color)
    vks = VkClearValue(color.vks)
    ClearValue(vks)
end

from_vk(T::Type{ClearValue}, x::VkClearValue) = ClearValue(x.color)
"""
Generic constructor.
"""
function ClearAttachment(aspect_mask, color_attachment, clear_value)
    vks = VkClearAttachment(aspect_mask, color_attachment, clear_value.vks)
    ClearAttachment(vks)
end

from_vk(T::Type{ClearAttachment}, x::VkClearAttachment) =
    ClearAttachment(x.aspectMask, x.colorAttachment, x.clearValue)
"""
Generic constructor.
"""
function ClearRect(rect, base_array_layer, layer_count)
    vks = VkClearRect(rect.vks, base_array_layer, layer_count)
    ClearRect(vks)
end

from_vk(T::Type{ClearRect}, x::VkClearRect) =
    ClearRect(x.rect, x.baseArrayLayer, x.layerCount)
"""
Generic constructor.
"""
function ImageBlit(src_subresource, src_offsets, dst_subresource, dst_offsets)
    vks = VkImageBlit(src_subresource.vks, src_offsets, dst_subresource.vks, dst_offsets)
    ImageBlit(vks)
end

from_vk(T::Type{ImageBlit}, x::VkImageBlit) =
    ImageBlit(x.srcSubresource, x.srcOffsets, x.dstSubresource, x.dstOffsets)
"""
Generic constructor.
"""
function ImageCopy(src_subresource, src_offset, dst_subresource, dst_offset, extent)
    vks = VkImageCopy(
        src_subresource.vks,
        src_offset.vks,
        dst_subresource.vks,
        dst_offset.vks,
        extent.vks,
    )
    ImageCopy(vks)
end

from_vk(T::Type{ImageCopy}, x::VkImageCopy) =
    ImageCopy(x.srcSubresource, x.srcOffset, x.dstSubresource, x.dstOffset, x.extent)
"""
Generic constructor.
"""
function ImageResolve(src_subresource, src_offset, dst_subresource, dst_offset, extent)
    vks = VkImageResolve(
        src_subresource.vks,
        src_offset.vks,
        dst_subresource.vks,
        dst_offset.vks,
        extent.vks,
    )
    ImageResolve(vks)
end

from_vk(T::Type{ImageResolve}, x::VkImageResolve) =
    ImageResolve(x.srcSubresource, x.srcOffset, x.dstSubresource, x.dstOffset, x.extent)
PhysicalDeviceSubgroupProperties(vks::VkPhysicalDeviceSubgroupProperties) =
    PhysicalDeviceSubgroupProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.subgroupSize),
        from_vk(ShaderStageFlags, vks.supportedStages),
        from_vk(SubgroupFeatureFlags, vks.supportedOperations),
        from_vk(Bool, vks.quadOperationsInAllStages),
    )

from_vk(T::Type{PhysicalDeviceSubgroupProperties}, x::VkPhysicalDeviceSubgroupProperties) =
    PhysicalDeviceSubgroupProperties(x)
MemoryDedicatedRequirements(vks::VkMemoryDedicatedRequirements) =
    MemoryDedicatedRequirements(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(Bool, vks.prefersDedicatedAllocation),
        from_vk(Bool, vks.requiresDedicatedAllocation),
    )

from_vk(T::Type{MemoryDedicatedRequirements}, x::VkMemoryDedicatedRequirements) =
    MemoryDedicatedRequirements(x)
PhysicalDeviceGroupProperties(vks::VkPhysicalDeviceGroupProperties) =
    PhysicalDeviceGroupProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.physicalDeviceCount),
        from_vk(NTuple{32,VkPhysicalDevice}, vks.physicalDevices),
        from_vk(Bool, vks.subsetAllocation),
    )

from_vk(T::Type{PhysicalDeviceGroupProperties}, x::VkPhysicalDeviceGroupProperties) =
    PhysicalDeviceGroupProperties(x)
MemoryRequirements2(vks::VkMemoryRequirements2) = MemoryRequirements2(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(MemoryRequirements, vks.memoryRequirements),
)

from_vk(T::Type{MemoryRequirements2}, x::VkMemoryRequirements2) = MemoryRequirements2(x)
SparseImageMemoryRequirements2(vks::VkSparseImageMemoryRequirements2) =
    SparseImageMemoryRequirements2(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(SparseImageMemoryRequirements, vks.memoryRequirements),
    )

from_vk(T::Type{SparseImageMemoryRequirements2}, x::VkSparseImageMemoryRequirements2) =
    SparseImageMemoryRequirements2(x)
PhysicalDeviceProperties2(vks::VkPhysicalDeviceProperties2) = PhysicalDeviceProperties2(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(PhysicalDeviceProperties, vks.properties),
)

from_vk(T::Type{PhysicalDeviceProperties2}, x::VkPhysicalDeviceProperties2) =
    PhysicalDeviceProperties2(x)
FormatProperties2(vks::VkFormatProperties2) = FormatProperties2(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(FormatProperties, vks.formatProperties),
)

from_vk(T::Type{FormatProperties2}, x::VkFormatProperties2) = FormatProperties2(x)
ImageFormatProperties2(vks::VkImageFormatProperties2) = ImageFormatProperties2(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(ImageFormatProperties, vks.imageFormatProperties),
)

from_vk(T::Type{ImageFormatProperties2}, x::VkImageFormatProperties2) =
    ImageFormatProperties2(x)
QueueFamilyProperties2(vks::VkQueueFamilyProperties2) = QueueFamilyProperties2(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(QueueFamilyProperties, vks.queueFamilyProperties),
)

from_vk(T::Type{QueueFamilyProperties2}, x::VkQueueFamilyProperties2) =
    QueueFamilyProperties2(x)
PhysicalDeviceMemoryProperties2(vks::VkPhysicalDeviceMemoryProperties2) =
    PhysicalDeviceMemoryProperties2(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(PhysicalDeviceMemoryProperties, vks.memoryProperties),
    )

from_vk(T::Type{PhysicalDeviceMemoryProperties2}, x::VkPhysicalDeviceMemoryProperties2) =
    PhysicalDeviceMemoryProperties2(x)
SparseImageFormatProperties2(vks::VkSparseImageFormatProperties2) =
    SparseImageFormatProperties2(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(SparseImageFormatProperties, vks.properties),
    )

from_vk(T::Type{SparseImageFormatProperties2}, x::VkSparseImageFormatProperties2) =
    SparseImageFormatProperties2(x)
PhysicalDevicePointClippingProperties(vks::VkPhysicalDevicePointClippingProperties) =
    PhysicalDevicePointClippingProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(PointClippingBehavior, vks.pointClippingBehavior),
    )

from_vk(
    T::Type{PhysicalDevicePointClippingProperties},
    x::VkPhysicalDevicePointClippingProperties,
) = PhysicalDevicePointClippingProperties(x)

"""
Generic constructor.
"""
function InputAttachmentAspectReference(subpass, input_attachment_index, aspect_mask)
    vks = VkInputAttachmentAspectReference(subpass, input_attachment_index, aspect_mask)
    InputAttachmentAspectReference(vks)
end

from_vk(T::Type{InputAttachmentAspectReference}, x::VkInputAttachmentAspectReference) =
    InputAttachmentAspectReference(x.subpass, x.inputAttachmentIndex, x.aspectMask)

PhysicalDeviceMultiviewProperties(vks::VkPhysicalDeviceMultiviewProperties) =
    PhysicalDeviceMultiviewProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.maxMultiviewViewCount),
        from_vk(UInt32, vks.maxMultiviewInstanceIndex),
    )

from_vk(
    T::Type{PhysicalDeviceMultiviewProperties},
    x::VkPhysicalDeviceMultiviewProperties,
) = PhysicalDeviceMultiviewProperties(x)
PhysicalDeviceProtectedMemoryProperties(vks::VkPhysicalDeviceProtectedMemoryProperties) =
    PhysicalDeviceProtectedMemoryProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(Bool, vks.protectedNoFault),
    )

from_vk(
    T::Type{PhysicalDeviceProtectedMemoryProperties},
    x::VkPhysicalDeviceProtectedMemoryProperties,
) = PhysicalDeviceProtectedMemoryProperties(x)

SamplerYcbcrConversionImageFormatProperties(
    vks::VkSamplerYcbcrConversionImageFormatProperties,
) = SamplerYcbcrConversionImageFormatProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.combinedImageSamplerDescriptorCount),
)

from_vk(
    T::Type{SamplerYcbcrConversionImageFormatProperties},
    x::VkSamplerYcbcrConversionImageFormatProperties,
) = SamplerYcbcrConversionImageFormatProperties(x)

"""
Generic constructor.
"""
function DescriptorUpdateTemplateEntry(
    dst_binding,
    dst_array_element,
    descriptor_count,
    descriptor_type,
    offset,
    stride,
)
    vks = VkDescriptorUpdateTemplateEntry(
        dst_binding,
        dst_array_element,
        descriptor_count,
        descriptor_type,
        offset,
        stride,
    )
    DescriptorUpdateTemplateEntry(vks)
end

from_vk(T::Type{DescriptorUpdateTemplateEntry}, x::VkDescriptorUpdateTemplateEntry) =
    DescriptorUpdateTemplateEntry(
        x.dstBinding,
        x.dstArrayElement,
        x.descriptorCount,
        x.descriptorType,
        x.offset,
        x.stride,
    )

ExternalMemoryProperties(vks::VkExternalMemoryProperties) = ExternalMemoryProperties(
    from_vk(ExternalMemoryFeatureFlags, vks.externalMemoryFeatures),
    from_vk(ExternalMemoryHandleTypeFlags, vks.exportFromImportedHandleTypes),
    from_vk(ExternalMemoryHandleTypeFlags, vks.compatibleHandleTypes),
)

from_vk(T::Type{ExternalMemoryProperties}, x::VkExternalMemoryProperties) =
    ExternalMemoryProperties(x)
ExternalImageFormatProperties(vks::VkExternalImageFormatProperties) =
    ExternalImageFormatProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ExternalMemoryProperties, vks.externalMemoryProperties),
    )

from_vk(T::Type{ExternalImageFormatProperties}, x::VkExternalImageFormatProperties) =
    ExternalImageFormatProperties(x)
ExternalBufferProperties(vks::VkExternalBufferProperties) = ExternalBufferProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(ExternalMemoryProperties, vks.externalMemoryProperties),
)

from_vk(T::Type{ExternalBufferProperties}, x::VkExternalBufferProperties) =
    ExternalBufferProperties(x)
PhysicalDeviceIDProperties(vks::VkPhysicalDeviceIDProperties) = PhysicalDeviceIDProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(String, vks.deviceUUID),
    from_vk(String, vks.driverUUID),
    from_vk(String, vks.deviceLUID),
    from_vk(UInt32, vks.deviceNodeMask),
    from_vk(Bool, vks.deviceLUIDValid),
)

from_vk(T::Type{PhysicalDeviceIDProperties}, x::VkPhysicalDeviceIDProperties) =
    PhysicalDeviceIDProperties(x)
ExternalFenceProperties(vks::VkExternalFenceProperties) = ExternalFenceProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(ExternalFenceHandleTypeFlags, vks.exportFromImportedHandleTypes),
    from_vk(ExternalFenceHandleTypeFlags, vks.compatibleHandleTypes),
    from_vk(ExternalFenceFeatureFlags, vks.externalFenceFeatures),
)

from_vk(T::Type{ExternalFenceProperties}, x::VkExternalFenceProperties) =
    ExternalFenceProperties(x)
ExternalSemaphoreProperties(vks::VkExternalSemaphoreProperties) =
    ExternalSemaphoreProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ExternalSemaphoreHandleTypeFlags, vks.exportFromImportedHandleTypes),
        from_vk(ExternalSemaphoreHandleTypeFlags, vks.compatibleHandleTypes),
        from_vk(ExternalSemaphoreFeatureFlags, vks.externalSemaphoreFeatures),
    )

from_vk(T::Type{ExternalSemaphoreProperties}, x::VkExternalSemaphoreProperties) =
    ExternalSemaphoreProperties(x)
PhysicalDeviceMaintenance3Properties(vks::VkPhysicalDeviceMaintenance3Properties) =
    PhysicalDeviceMaintenance3Properties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.maxPerSetDescriptors),
        from_vk(DeviceSize, vks.maxMemoryAllocationSize),
    )

from_vk(
    T::Type{PhysicalDeviceMaintenance3Properties},
    x::VkPhysicalDeviceMaintenance3Properties,
) = PhysicalDeviceMaintenance3Properties(x)

DescriptorSetLayoutSupport(vks::VkDescriptorSetLayoutSupport) =
    DescriptorSetLayoutSupport(from_vk(Ptr{Cvoid}, vks.pNext), from_vk(Bool, vks.supported))

from_vk(T::Type{DescriptorSetLayoutSupport}, x::VkDescriptorSetLayoutSupport) =
    DescriptorSetLayoutSupport(x)
PhysicalDeviceVulkan11Properties(vks::VkPhysicalDeviceVulkan11Properties) =
    PhysicalDeviceVulkan11Properties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(String, vks.deviceUUID),
        from_vk(String, vks.driverUUID),
        from_vk(String, vks.deviceLUID),
        from_vk(UInt32, vks.deviceNodeMask),
        from_vk(Bool, vks.deviceLUIDValid),
        from_vk(UInt32, vks.subgroupSize),
        from_vk(ShaderStageFlags, vks.subgroupSupportedStages),
        from_vk(SubgroupFeatureFlags, vks.subgroupSupportedOperations),
        from_vk(Bool, vks.subgroupQuadOperationsInAllStages),
        from_vk(PointClippingBehavior, vks.pointClippingBehavior),
        from_vk(UInt32, vks.maxMultiviewViewCount),
        from_vk(UInt32, vks.maxMultiviewInstanceIndex),
        from_vk(Bool, vks.protectedNoFault),
        from_vk(UInt32, vks.maxPerSetDescriptors),
        from_vk(DeviceSize, vks.maxMemoryAllocationSize),
    )

from_vk(T::Type{PhysicalDeviceVulkan11Properties}, x::VkPhysicalDeviceVulkan11Properties) =
    PhysicalDeviceVulkan11Properties(x)
"""
Generic constructor.
"""
function ConformanceVersion(major, minor, subminor, patch)
    vks = VkConformanceVersion(major, minor, subminor, patch)
    ConformanceVersion(vks)
end

from_vk(T::Type{ConformanceVersion}, x::VkConformanceVersion) =
    ConformanceVersion(x.major, x.minor, x.subminor, x.patch)
PhysicalDeviceVulkan12Properties(vks::VkPhysicalDeviceVulkan12Properties) =
    PhysicalDeviceVulkan12Properties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DriverId, vks.driverID),
        from_vk(String, vks.driverName),
        from_vk(String, vks.driverInfo),
        from_vk(ConformanceVersion, vks.conformanceVersion),
        from_vk(ShaderFloatControlsIndependence, vks.denormBehaviorIndependence),
        from_vk(ShaderFloatControlsIndependence, vks.roundingModeIndependence),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat16),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat32),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat64),
        from_vk(Bool, vks.shaderDenormPreserveFloat16),
        from_vk(Bool, vks.shaderDenormPreserveFloat32),
        from_vk(Bool, vks.shaderDenormPreserveFloat64),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat16),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat32),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat64),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat16),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat32),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat64),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat16),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat32),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat64),
        from_vk(UInt32, vks.maxUpdateAfterBindDescriptorsInAllPools),
        from_vk(Bool, vks.shaderUniformBufferArrayNonUniformIndexingNative),
        from_vk(Bool, vks.shaderSampledImageArrayNonUniformIndexingNative),
        from_vk(Bool, vks.shaderStorageBufferArrayNonUniformIndexingNative),
        from_vk(Bool, vks.shaderStorageImageArrayNonUniformIndexingNative),
        from_vk(Bool, vks.shaderInputAttachmentArrayNonUniformIndexingNative),
        from_vk(Bool, vks.robustBufferAccessUpdateAfterBind),
        from_vk(Bool, vks.quadDivergentImplicitLod),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindSamplers),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindUniformBuffers),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindStorageBuffers),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindSampledImages),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindStorageImages),
        from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindInputAttachments),
        from_vk(UInt32, vks.maxPerStageUpdateAfterBindResources),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindSamplers),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindUniformBuffers),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageBuffers),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindSampledImages),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageImages),
        from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindInputAttachments),
        from_vk(ResolveModeFlags, vks.supportedDepthResolveModes),
        from_vk(ResolveModeFlags, vks.supportedStencilResolveModes),
        from_vk(Bool, vks.independentResolveNone),
        from_vk(Bool, vks.independentResolve),
        from_vk(Bool, vks.filterMinmaxSingleComponentFormats),
        from_vk(Bool, vks.filterMinmaxImageComponentMapping),
        from_vk(UInt64, vks.maxTimelineSemaphoreValueDifference),
        from_vk(SampleCountFlags, vks.framebufferIntegerColorSampleCounts),
    )

from_vk(T::Type{PhysicalDeviceVulkan12Properties}, x::VkPhysicalDeviceVulkan12Properties) =
    PhysicalDeviceVulkan12Properties(x)
PhysicalDeviceDriverProperties(vks::VkPhysicalDeviceDriverProperties) =
    PhysicalDeviceDriverProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DriverId, vks.driverID),
        from_vk(String, vks.driverName),
        from_vk(String, vks.driverInfo),
        from_vk(ConformanceVersion, vks.conformanceVersion),
    )

from_vk(T::Type{PhysicalDeviceDriverProperties}, x::VkPhysicalDeviceDriverProperties) =
    PhysicalDeviceDriverProperties(x)
PhysicalDeviceFloatControlsProperties(vks::VkPhysicalDeviceFloatControlsProperties) =
    PhysicalDeviceFloatControlsProperties(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ShaderFloatControlsIndependence, vks.denormBehaviorIndependence),
        from_vk(ShaderFloatControlsIndependence, vks.roundingModeIndependence),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat16),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat32),
        from_vk(Bool, vks.shaderSignedZeroInfNanPreserveFloat64),
        from_vk(Bool, vks.shaderDenormPreserveFloat16),
        from_vk(Bool, vks.shaderDenormPreserveFloat32),
        from_vk(Bool, vks.shaderDenormPreserveFloat64),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat16),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat32),
        from_vk(Bool, vks.shaderDenormFlushToZeroFloat64),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat16),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat32),
        from_vk(Bool, vks.shaderRoundingModeRTEFloat64),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat16),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat32),
        from_vk(Bool, vks.shaderRoundingModeRTZFloat64),
    )

from_vk(
    T::Type{PhysicalDeviceFloatControlsProperties},
    x::VkPhysicalDeviceFloatControlsProperties,
) = PhysicalDeviceFloatControlsProperties(x)

PhysicalDeviceDescriptorIndexingProperties(
    vks::VkPhysicalDeviceDescriptorIndexingProperties,
) = PhysicalDeviceDescriptorIndexingProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxUpdateAfterBindDescriptorsInAllPools),
    from_vk(Bool, vks.shaderUniformBufferArrayNonUniformIndexingNative),
    from_vk(Bool, vks.shaderSampledImageArrayNonUniformIndexingNative),
    from_vk(Bool, vks.shaderStorageBufferArrayNonUniformIndexingNative),
    from_vk(Bool, vks.shaderStorageImageArrayNonUniformIndexingNative),
    from_vk(Bool, vks.shaderInputAttachmentArrayNonUniformIndexingNative),
    from_vk(Bool, vks.robustBufferAccessUpdateAfterBind),
    from_vk(Bool, vks.quadDivergentImplicitLod),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindSamplers),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindUniformBuffers),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindStorageBuffers),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindSampledImages),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindStorageImages),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindInputAttachments),
    from_vk(UInt32, vks.maxPerStageUpdateAfterBindResources),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindSamplers),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindUniformBuffers),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageBuffers),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindSampledImages),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindStorageImages),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindInputAttachments),
)

from_vk(
    T::Type{PhysicalDeviceDescriptorIndexingProperties},
    x::VkPhysicalDeviceDescriptorIndexingProperties,
) = PhysicalDeviceDescriptorIndexingProperties(x)

DescriptorSetVariableDescriptorCountLayoutSupport(
    vks::VkDescriptorSetVariableDescriptorCountLayoutSupport,
) = DescriptorSetVariableDescriptorCountLayoutSupport(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxVariableDescriptorCount),
)

from_vk(
    T::Type{DescriptorSetVariableDescriptorCountLayoutSupport},
    x::VkDescriptorSetVariableDescriptorCountLayoutSupport,
) = DescriptorSetVariableDescriptorCountLayoutSupport(x)

PhysicalDeviceDepthStencilResolveProperties(
    vks::VkPhysicalDeviceDepthStencilResolveProperties,
) = PhysicalDeviceDepthStencilResolveProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(ResolveModeFlags, vks.supportedDepthResolveModes),
    from_vk(ResolveModeFlags, vks.supportedStencilResolveModes),
    from_vk(Bool, vks.independentResolveNone),
    from_vk(Bool, vks.independentResolve),
)

from_vk(
    T::Type{PhysicalDeviceDepthStencilResolveProperties},
    x::VkPhysicalDeviceDepthStencilResolveProperties,
) = PhysicalDeviceDepthStencilResolveProperties(x)

PhysicalDeviceSamplerFilterMinmaxProperties(
    vks::VkPhysicalDeviceSamplerFilterMinmaxProperties,
) = PhysicalDeviceSamplerFilterMinmaxProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Bool, vks.filterMinmaxSingleComponentFormats),
    from_vk(Bool, vks.filterMinmaxImageComponentMapping),
)

from_vk(
    T::Type{PhysicalDeviceSamplerFilterMinmaxProperties},
    x::VkPhysicalDeviceSamplerFilterMinmaxProperties,
) = PhysicalDeviceSamplerFilterMinmaxProperties(x)

PhysicalDeviceTimelineSemaphoreProperties(
    vks::VkPhysicalDeviceTimelineSemaphoreProperties,
) = PhysicalDeviceTimelineSemaphoreProperties(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt64, vks.maxTimelineSemaphoreValueDifference),
)

from_vk(
    T::Type{PhysicalDeviceTimelineSemaphoreProperties},
    x::VkPhysicalDeviceTimelineSemaphoreProperties,
) = PhysicalDeviceTimelineSemaphoreProperties(x)

SurfaceCapabilitiesKHR(vks::VkSurfaceCapabilitiesKHR) = SurfaceCapabilitiesKHR(
    from_vk(UInt32, vks.minImageCount),
    from_vk(UInt32, vks.maxImageCount),
    from_vk(Extent2D, vks.currentExtent),
    from_vk(Extent2D, vks.minImageExtent),
    from_vk(Extent2D, vks.maxImageExtent),
    from_vk(UInt32, vks.maxImageArrayLayers),
    from_vk(SurfaceTransformFlagsKHR, vks.supportedTransforms),
    from_vk(SurfaceTransformFlagBitsKHR, vks.currentTransform),
    from_vk(CompositeAlphaFlagsKHR, vks.supportedCompositeAlpha),
    from_vk(ImageUsageFlags, vks.supportedUsageFlags),
)

from_vk(T::Type{SurfaceCapabilitiesKHR}, x::VkSurfaceCapabilitiesKHR) =
    SurfaceCapabilitiesKHR(x)
SurfaceFormatKHR(vks::VkSurfaceFormatKHR) =
    SurfaceFormatKHR(from_vk(Format, vks.format), from_vk(ColorSpaceKHR, vks.colorSpace))
from_vk(T::Type{SurfaceFormatKHR}, x::VkSurfaceFormatKHR) = SurfaceFormatKHR(x)
DeviceGroupPresentCapabilitiesKHR(vks::VkDeviceGroupPresentCapabilitiesKHR) =
    DeviceGroupPresentCapabilitiesKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(NTuple{32,UInt32}, vks.presentMask),
        from_vk(DeviceGroupPresentModeFlagsKHR, vks.modes),
    )

from_vk(
    T::Type{DeviceGroupPresentCapabilitiesKHR},
    x::VkDeviceGroupPresentCapabilitiesKHR,
) = DeviceGroupPresentCapabilitiesKHR(x)
"""
Generic constructor.
"""
function DisplayModeParametersKHR(visible_region, refresh_rate)
    vks = VkDisplayModeParametersKHR(visible_region.vks, refresh_rate)
    DisplayModeParametersKHR(vks)
end

from_vk(T::Type{DisplayModeParametersKHR}, x::VkDisplayModeParametersKHR) =
    DisplayModeParametersKHR(x.visibleRegion, x.refreshRate)
DisplayModePropertiesKHR(vks::VkDisplayModePropertiesKHR) = DisplayModePropertiesKHR(
    from_vk(DisplayModeKHR, vks.displayMode),
    from_vk(DisplayModeParametersKHR, vks.parameters),
)

from_vk(T::Type{DisplayModePropertiesKHR}, x::VkDisplayModePropertiesKHR) =
    DisplayModePropertiesKHR(x)
DisplayPlaneCapabilitiesKHR(vks::VkDisplayPlaneCapabilitiesKHR) =
    DisplayPlaneCapabilitiesKHR(
        from_vk(DisplayPlaneAlphaFlagsKHR, vks.supportedAlpha),
        from_vk(Offset2D, vks.minSrcPosition),
        from_vk(Offset2D, vks.maxSrcPosition),
        from_vk(Extent2D, vks.minSrcExtent),
        from_vk(Extent2D, vks.maxSrcExtent),
        from_vk(Offset2D, vks.minDstPosition),
        from_vk(Offset2D, vks.maxDstPosition),
        from_vk(Extent2D, vks.minDstExtent),
        from_vk(Extent2D, vks.maxDstExtent),
    )

from_vk(T::Type{DisplayPlaneCapabilitiesKHR}, x::VkDisplayPlaneCapabilitiesKHR) =
    DisplayPlaneCapabilitiesKHR(x)
DisplayPlanePropertiesKHR(vks::VkDisplayPlanePropertiesKHR) = DisplayPlanePropertiesKHR(
    from_vk(DisplayKHR, vks.currentDisplay),
    from_vk(UInt32, vks.currentStackIndex),
)

from_vk(T::Type{DisplayPlanePropertiesKHR}, x::VkDisplayPlanePropertiesKHR) =
    DisplayPlanePropertiesKHR(x)
DisplayPropertiesKHR(vks::VkDisplayPropertiesKHR) = DisplayPropertiesKHR(
    from_vk(DisplayKHR, vks.display),
    from_vk(String, vks.displayName),
    from_vk(Extent2D, vks.physicalDimensions),
    from_vk(Extent2D, vks.physicalResolution),
    from_vk(SurfaceTransformFlagsKHR, vks.supportedTransforms),
    from_vk(Bool, vks.planeReorderPossible),
    from_vk(Bool, vks.persistentContent),
)

from_vk(T::Type{DisplayPropertiesKHR}, x::VkDisplayPropertiesKHR) = DisplayPropertiesKHR(x)
MemoryFdPropertiesKHR(vks::VkMemoryFdPropertiesKHR) = MemoryFdPropertiesKHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.memoryTypeBits),
)

from_vk(T::Type{MemoryFdPropertiesKHR}, x::VkMemoryFdPropertiesKHR) =
    MemoryFdPropertiesKHR(x)
PhysicalDevicePushDescriptorPropertiesKHR(
    vks::VkPhysicalDevicePushDescriptorPropertiesKHR,
) = PhysicalDevicePushDescriptorPropertiesKHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxPushDescriptors),
)

from_vk(
    T::Type{PhysicalDevicePushDescriptorPropertiesKHR},
    x::VkPhysicalDevicePushDescriptorPropertiesKHR,
) = PhysicalDevicePushDescriptorPropertiesKHR(x)

"""
Generic constructor.
"""
function RectLayerKHR(offset, extent, layer)
    vks = VkRectLayerKHR(offset.vks, extent.vks, layer)
    RectLayerKHR(vks)
end

from_vk(T::Type{RectLayerKHR}, x::VkRectLayerKHR) =
    RectLayerKHR(x.offset, x.extent, x.layer)
SharedPresentSurfaceCapabilitiesKHR(vks::VkSharedPresentSurfaceCapabilitiesKHR) =
    SharedPresentSurfaceCapabilitiesKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ImageUsageFlags, vks.sharedPresentSupportedUsageFlags),
    )

from_vk(
    T::Type{SharedPresentSurfaceCapabilitiesKHR},
    x::VkSharedPresentSurfaceCapabilitiesKHR,
) = SharedPresentSurfaceCapabilitiesKHR(x)
PhysicalDevicePerformanceQueryPropertiesKHR(
    vks::VkPhysicalDevicePerformanceQueryPropertiesKHR,
) = PhysicalDevicePerformanceQueryPropertiesKHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Bool, vks.allowCommandBufferQueryCopies),
)

from_vk(
    T::Type{PhysicalDevicePerformanceQueryPropertiesKHR},
    x::VkPhysicalDevicePerformanceQueryPropertiesKHR,
) = PhysicalDevicePerformanceQueryPropertiesKHR(x)

PerformanceCounterKHR(vks::VkPerformanceCounterKHR) = PerformanceCounterKHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(PerformanceCounterUnitKHR, vks.unit),
    from_vk(PerformanceCounterScopeKHR, vks.scope),
    from_vk(PerformanceCounterStorageKHR, vks.storage),
    from_vk(String, vks.uuid),
)

from_vk(T::Type{PerformanceCounterKHR}, x::VkPerformanceCounterKHR) =
    PerformanceCounterKHR(x)
PerformanceCounterDescriptionKHR(vks::VkPerformanceCounterDescriptionKHR) =
    PerformanceCounterDescriptionKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(PerformanceCounterDescriptionFlagsKHR, vks.flags),
        from_vk(String, vks.name),
        from_vk(String, vks.category),
        from_vk(String, vks.description),
    )

from_vk(T::Type{PerformanceCounterDescriptionKHR}, x::VkPerformanceCounterDescriptionKHR) =
    PerformanceCounterDescriptionKHR(x)
"""
Generic constructor.
"""
function PerformanceCounterResultKHR(int64)
    vks = VkPerformanceCounterResultKHR(int64)
    PerformanceCounterResultKHR(vks)
end

from_vk(T::Type{PerformanceCounterResultKHR}, x::VkPerformanceCounterResultKHR) =
    PerformanceCounterResultKHR(x.int64)
SurfaceCapabilities2KHR(vks::VkSurfaceCapabilities2KHR) = SurfaceCapabilities2KHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(SurfaceCapabilitiesKHR, vks.surfaceCapabilities),
)

from_vk(T::Type{SurfaceCapabilities2KHR}, x::VkSurfaceCapabilities2KHR) =
    SurfaceCapabilities2KHR(x)
SurfaceFormat2KHR(vks::VkSurfaceFormat2KHR) = SurfaceFormat2KHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(SurfaceFormatKHR, vks.surfaceFormat),
)

from_vk(T::Type{SurfaceFormat2KHR}, x::VkSurfaceFormat2KHR) = SurfaceFormat2KHR(x)
DisplayProperties2KHR(vks::VkDisplayProperties2KHR) = DisplayProperties2KHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(DisplayPropertiesKHR, vks.displayProperties),
)

from_vk(T::Type{DisplayProperties2KHR}, x::VkDisplayProperties2KHR) =
    DisplayProperties2KHR(x)
DisplayPlaneProperties2KHR(vks::VkDisplayPlaneProperties2KHR) = DisplayPlaneProperties2KHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(DisplayPlanePropertiesKHR, vks.displayPlaneProperties),
)

from_vk(T::Type{DisplayPlaneProperties2KHR}, x::VkDisplayPlaneProperties2KHR) =
    DisplayPlaneProperties2KHR(x)
DisplayModeProperties2KHR(vks::VkDisplayModeProperties2KHR) = DisplayModeProperties2KHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(DisplayModePropertiesKHR, vks.displayModeProperties),
)

from_vk(T::Type{DisplayModeProperties2KHR}, x::VkDisplayModeProperties2KHR) =
    DisplayModeProperties2KHR(x)
DisplayPlaneCapabilities2KHR(vks::VkDisplayPlaneCapabilities2KHR) =
    DisplayPlaneCapabilities2KHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DisplayPlaneCapabilitiesKHR, vks.capabilities),
    )

from_vk(T::Type{DisplayPlaneCapabilities2KHR}, x::VkDisplayPlaneCapabilities2KHR) =
    DisplayPlaneCapabilities2KHR(x)
PipelineExecutablePropertiesKHR(vks::VkPipelineExecutablePropertiesKHR) =
    PipelineExecutablePropertiesKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ShaderStageFlags, vks.stages),
        from_vk(String, vks.name),
        from_vk(String, vks.description),
        from_vk(UInt32, vks.subgroupSize),
    )

from_vk(T::Type{PipelineExecutablePropertiesKHR}, x::VkPipelineExecutablePropertiesKHR) =
    PipelineExecutablePropertiesKHR(x)
PipelineExecutableStatisticValueKHR(vks::VkPipelineExecutableStatisticValueKHR) =
    PipelineExecutableStatisticValueKHR(from_vk(Int64, vks.i64))
from_vk(
    T::Type{PipelineExecutableStatisticValueKHR},
    x::VkPipelineExecutableStatisticValueKHR,
) = PipelineExecutableStatisticValueKHR(x)
PipelineExecutableStatisticKHR(vks::VkPipelineExecutableStatisticKHR) =
    PipelineExecutableStatisticKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(String, vks.name),
        from_vk(String, vks.description),
        from_vk(PipelineExecutableStatisticFormatKHR, vks.format),
        from_vk(PipelineExecutableStatisticValueKHR, vks.value),
    )

from_vk(T::Type{PipelineExecutableStatisticKHR}, x::VkPipelineExecutableStatisticKHR) =
    PipelineExecutableStatisticKHR(x)
PipelineExecutableInternalRepresentationKHR(
    vks::VkPipelineExecutableInternalRepresentationKHR,
) = PipelineExecutableInternalRepresentationKHR(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(String, vks.name),
    from_vk(String, vks.description),
    from_vk(Bool, vks.isText),
    from_vk(Ptr{Cvoid}, vks.pData),
)

from_vk(
    T::Type{PipelineExecutableInternalRepresentationKHR},
    x::VkPipelineExecutableInternalRepresentationKHR,
) = PipelineExecutableInternalRepresentationKHR(x)

PhysicalDeviceTransformFeedbackPropertiesEXT(
    vks::VkPhysicalDeviceTransformFeedbackPropertiesEXT,
) = PhysicalDeviceTransformFeedbackPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxTransformFeedbackStreams),
    from_vk(UInt32, vks.maxTransformFeedbackBuffers),
    from_vk(DeviceSize, vks.maxTransformFeedbackBufferSize),
    from_vk(UInt32, vks.maxTransformFeedbackStreamDataSize),
    from_vk(UInt32, vks.maxTransformFeedbackBufferDataSize),
    from_vk(UInt32, vks.maxTransformFeedbackBufferDataStride),
    from_vk(Bool, vks.transformFeedbackQueries),
    from_vk(Bool, vks.transformFeedbackStreamsLinesTriangles),
    from_vk(Bool, vks.transformFeedbackRasterizationStreamSelect),
    from_vk(Bool, vks.transformFeedbackDraw),
)

from_vk(
    T::Type{PhysicalDeviceTransformFeedbackPropertiesEXT},
    x::VkPhysicalDeviceTransformFeedbackPropertiesEXT,
) = PhysicalDeviceTransformFeedbackPropertiesEXT(x)

ImageViewAddressPropertiesNVX(vks::VkImageViewAddressPropertiesNVX) =
    ImageViewAddressPropertiesNVX(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DeviceAddress, vks.deviceAddress),
        from_vk(DeviceSize, vks.size),
    )

from_vk(T::Type{ImageViewAddressPropertiesNVX}, x::VkImageViewAddressPropertiesNVX) =
    ImageViewAddressPropertiesNVX(x)
TextureLODGatherFormatPropertiesAMD(vks::VkTextureLODGatherFormatPropertiesAMD) =
    TextureLODGatherFormatPropertiesAMD(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(Bool, vks.supportsTextureGatherLODBiasAMD),
    )

from_vk(
    T::Type{TextureLODGatherFormatPropertiesAMD},
    x::VkTextureLODGatherFormatPropertiesAMD,
) = TextureLODGatherFormatPropertiesAMD(x)
ShaderResourceUsageAMD(vks::VkShaderResourceUsageAMD) = ShaderResourceUsageAMD(
    from_vk(UInt32, vks.numUsedVgprs),
    from_vk(UInt32, vks.numUsedSgprs),
    from_vk(UInt32, vks.ldsSizePerLocalWorkGroup),
    from_vk(UInt, vks.ldsUsageSizeInBytes),
    from_vk(UInt, vks.scratchMemUsageInBytes),
)

from_vk(T::Type{ShaderResourceUsageAMD}, x::VkShaderResourceUsageAMD) =
    ShaderResourceUsageAMD(x)
ShaderStatisticsInfoAMD(vks::VkShaderStatisticsInfoAMD) = ShaderStatisticsInfoAMD(
    from_vk(ShaderStageFlags, vks.shaderStageMask),
    from_vk(ShaderResourceUsageAMD, vks.resourceUsage),
    from_vk(UInt32, vks.numPhysicalVgprs),
    from_vk(UInt32, vks.numPhysicalSgprs),
    from_vk(UInt32, vks.numAvailableVgprs),
    from_vk(UInt32, vks.numAvailableSgprs),
    from_vk(NTuple{3,UInt32}, vks.computeWorkGroupSize),
)

from_vk(T::Type{ShaderStatisticsInfoAMD}, x::VkShaderStatisticsInfoAMD) =
    ShaderStatisticsInfoAMD(x)
ExternalImageFormatPropertiesNV(vks::VkExternalImageFormatPropertiesNV) =
    ExternalImageFormatPropertiesNV(
        from_vk(ImageFormatProperties, vks.imageFormatProperties),
        from_vk(ExternalMemoryFeatureFlagsNV, vks.externalMemoryFeatures),
        from_vk(ExternalMemoryHandleTypeFlagsNV, vks.exportFromImportedHandleTypes),
        from_vk(ExternalMemoryHandleTypeFlagsNV, vks.compatibleHandleTypes),
    )

from_vk(T::Type{ExternalImageFormatPropertiesNV}, x::VkExternalImageFormatPropertiesNV) =
    ExternalImageFormatPropertiesNV(x)
"""
Generic constructor.
"""
function ViewportWScalingNV(xcoeff, ycoeff)
    vks = VkViewportWScalingNV(xcoeff, ycoeff)
    ViewportWScalingNV(vks)
end

from_vk(T::Type{ViewportWScalingNV}, x::VkViewportWScalingNV) =
    ViewportWScalingNV(x.xcoeff, x.ycoeff)
SurfaceCapabilities2EXT(vks::VkSurfaceCapabilities2EXT) = SurfaceCapabilities2EXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.minImageCount),
    from_vk(UInt32, vks.maxImageCount),
    from_vk(Extent2D, vks.currentExtent),
    from_vk(Extent2D, vks.minImageExtent),
    from_vk(Extent2D, vks.maxImageExtent),
    from_vk(UInt32, vks.maxImageArrayLayers),
    from_vk(SurfaceTransformFlagsKHR, vks.supportedTransforms),
    from_vk(SurfaceTransformFlagBitsKHR, vks.currentTransform),
    from_vk(CompositeAlphaFlagsKHR, vks.supportedCompositeAlpha),
    from_vk(ImageUsageFlags, vks.supportedUsageFlags),
    from_vk(SurfaceCounterFlagsEXT, vks.supportedSurfaceCounters),
)

from_vk(T::Type{SurfaceCapabilities2EXT}, x::VkSurfaceCapabilities2EXT) =
    SurfaceCapabilities2EXT(x)
RefreshCycleDurationGOOGLE(vks::VkRefreshCycleDurationGOOGLE) =
    RefreshCycleDurationGOOGLE(from_vk(UInt64, vks.refreshDuration))
from_vk(T::Type{RefreshCycleDurationGOOGLE}, x::VkRefreshCycleDurationGOOGLE) =
    RefreshCycleDurationGOOGLE(x)
PastPresentationTimingGOOGLE(vks::VkPastPresentationTimingGOOGLE) =
    PastPresentationTimingGOOGLE(
        from_vk(UInt32, vks.presentID),
        from_vk(UInt64, vks.desiredPresentTime),
        from_vk(UInt64, vks.actualPresentTime),
        from_vk(UInt64, vks.earliestPresentTime),
        from_vk(UInt64, vks.presentMargin),
    )

from_vk(T::Type{PastPresentationTimingGOOGLE}, x::VkPastPresentationTimingGOOGLE) =
    PastPresentationTimingGOOGLE(x)
"""
Generic constructor.
"""
function PresentTimeGOOGLE(present_id, desired_present_time)
    vks = VkPresentTimeGOOGLE(present_id, desired_present_time)
    PresentTimeGOOGLE(vks)
end

from_vk(T::Type{PresentTimeGOOGLE}, x::VkPresentTimeGOOGLE) =
    PresentTimeGOOGLE(x.presentID, x.desiredPresentTime)
PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    vks::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
) = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Bool, vks.perViewPositionAllComponents),
)

from_vk(
    T::Type{PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX},
    x::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
) = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(x)

"""
Generic constructor.
"""
function ViewportSwizzleNV(x, y, z, w)
    vks = VkViewportSwizzleNV(x, y, z, w)
    ViewportSwizzleNV(vks)
end

from_vk(T::Type{ViewportSwizzleNV}, x::VkViewportSwizzleNV) =
    ViewportSwizzleNV(x.x, x.y, x.z, x.w)
PhysicalDeviceDiscardRectanglePropertiesEXT(
    vks::VkPhysicalDeviceDiscardRectanglePropertiesEXT,
) = PhysicalDeviceDiscardRectanglePropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxDiscardRectangles),
)

from_vk(
    T::Type{PhysicalDeviceDiscardRectanglePropertiesEXT},
    x::VkPhysicalDeviceDiscardRectanglePropertiesEXT,
) = PhysicalDeviceDiscardRectanglePropertiesEXT(x)

PhysicalDeviceConservativeRasterizationPropertiesEXT(
    vks::VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
) = PhysicalDeviceConservativeRasterizationPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Float32, vks.primitiveOverestimationSize),
    from_vk(Float32, vks.maxExtraPrimitiveOverestimationSize),
    from_vk(Float32, vks.extraPrimitiveOverestimationSizeGranularity),
    from_vk(Bool, vks.primitiveUnderestimation),
    from_vk(Bool, vks.conservativePointAndLineRasterization),
    from_vk(Bool, vks.degenerateTrianglesRasterized),
    from_vk(Bool, vks.degenerateLinesRasterized),
    from_vk(Bool, vks.fullyCoveredFragmentShaderInputVariable),
    from_vk(Bool, vks.conservativeRasterizationPostDepthCoverage),
)

from_vk(
    T::Type{PhysicalDeviceConservativeRasterizationPropertiesEXT},
    x::VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
) = PhysicalDeviceConservativeRasterizationPropertiesEXT(x)

"""
Generic constructor.
"""
function XYColorEXT(x, y)
    vks = VkXYColorEXT(x, y)
    XYColorEXT(vks)
end

from_vk(T::Type{XYColorEXT}, x::VkXYColorEXT) = XYColorEXT(x.x, x.y)
PhysicalDeviceInlineUniformBlockPropertiesEXT(
    vks::VkPhysicalDeviceInlineUniformBlockPropertiesEXT,
) = PhysicalDeviceInlineUniformBlockPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxInlineUniformBlockSize),
    from_vk(UInt32, vks.maxPerStageDescriptorInlineUniformBlocks),
    from_vk(UInt32, vks.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks),
    from_vk(UInt32, vks.maxDescriptorSetInlineUniformBlocks),
    from_vk(UInt32, vks.maxDescriptorSetUpdateAfterBindInlineUniformBlocks),
)

from_vk(
    T::Type{PhysicalDeviceInlineUniformBlockPropertiesEXT},
    x::VkPhysicalDeviceInlineUniformBlockPropertiesEXT,
) = PhysicalDeviceInlineUniformBlockPropertiesEXT(x)

"""
Generic constructor.
"""
function SampleLocationEXT(x, y)
    vks = VkSampleLocationEXT(x, y)
    SampleLocationEXT(vks)
end

from_vk(T::Type{SampleLocationEXT}, x::VkSampleLocationEXT) = SampleLocationEXT(x.x, x.y)
"""
Generic constructor.
"""
function AttachmentSampleLocationsEXT(attachment_index, sample_locations_info)
    vks = VkAttachmentSampleLocationsEXT(attachment_index, sample_locations_info.vks)
    AttachmentSampleLocationsEXT(vks)
end

from_vk(T::Type{AttachmentSampleLocationsEXT}, x::VkAttachmentSampleLocationsEXT) =
    AttachmentSampleLocationsEXT(x.attachmentIndex, x.sampleLocationsInfo)

"""
Generic constructor.
"""
function SubpassSampleLocationsEXT(subpass_index, sample_locations_info)
    vks = VkSubpassSampleLocationsEXT(subpass_index, sample_locations_info.vks)
    SubpassSampleLocationsEXT(vks)
end

from_vk(T::Type{SubpassSampleLocationsEXT}, x::VkSubpassSampleLocationsEXT) =
    SubpassSampleLocationsEXT(x.subpassIndex, x.sampleLocationsInfo)
PhysicalDeviceSampleLocationsPropertiesEXT(
    vks::VkPhysicalDeviceSampleLocationsPropertiesEXT,
) = PhysicalDeviceSampleLocationsPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(SampleCountFlags, vks.sampleLocationSampleCounts),
    from_vk(Extent2D, vks.maxSampleLocationGridSize),
    from_vk(NTuple{2,Cfloat}, vks.sampleLocationCoordinateRange),
    from_vk(UInt32, vks.sampleLocationSubPixelBits),
    from_vk(Bool, vks.variableSampleLocations),
)

from_vk(
    T::Type{PhysicalDeviceSampleLocationsPropertiesEXT},
    x::VkPhysicalDeviceSampleLocationsPropertiesEXT,
) = PhysicalDeviceSampleLocationsPropertiesEXT(x)

MultisamplePropertiesEXT(vks::VkMultisamplePropertiesEXT) = MultisamplePropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Extent2D, vks.maxSampleLocationGridSize),
)

from_vk(T::Type{MultisamplePropertiesEXT}, x::VkMultisamplePropertiesEXT) =
    MultisamplePropertiesEXT(x)
PhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    vks::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
) = PhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.advancedBlendMaxColorAttachments),
    from_vk(Bool, vks.advancedBlendIndependentBlend),
    from_vk(Bool, vks.advancedBlendNonPremultipliedSrcColor),
    from_vk(Bool, vks.advancedBlendNonPremultipliedDstColor),
    from_vk(Bool, vks.advancedBlendCorrelatedOverlap),
    from_vk(Bool, vks.advancedBlendAllOperations),
)

from_vk(
    T::Type{PhysicalDeviceBlendOperationAdvancedPropertiesEXT},
    x::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
) = PhysicalDeviceBlendOperationAdvancedPropertiesEXT(x)

PhysicalDeviceShaderSMBuiltinsPropertiesNV(
    vks::VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
) = PhysicalDeviceShaderSMBuiltinsPropertiesNV(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.shaderSMCount),
    from_vk(UInt32, vks.shaderWarpsPerSM),
)

from_vk(
    T::Type{PhysicalDeviceShaderSMBuiltinsPropertiesNV},
    x::VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
) = PhysicalDeviceShaderSMBuiltinsPropertiesNV(x)

DrmFormatModifierPropertiesEXT(vks::VkDrmFormatModifierPropertiesEXT) =
    DrmFormatModifierPropertiesEXT(
        from_vk(UInt64, vks.drmFormatModifier),
        from_vk(UInt32, vks.drmFormatModifierPlaneCount),
        from_vk(FormatFeatureFlags, vks.drmFormatModifierTilingFeatures),
    )

from_vk(T::Type{DrmFormatModifierPropertiesEXT}, x::VkDrmFormatModifierPropertiesEXT) =
    DrmFormatModifierPropertiesEXT(x)
DrmFormatModifierPropertiesListEXT(vks::VkDrmFormatModifierPropertiesListEXT) =
    DrmFormatModifierPropertiesListEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(Array{DrmFormatModifierPropertiesEXT}, vks.pDrmFormatModifierProperties),
    )

from_vk(
    T::Type{DrmFormatModifierPropertiesListEXT},
    x::VkDrmFormatModifierPropertiesListEXT,
) = DrmFormatModifierPropertiesListEXT(x)
ImageDrmFormatModifierPropertiesEXT(vks::VkImageDrmFormatModifierPropertiesEXT) =
    ImageDrmFormatModifierPropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt64, vks.drmFormatModifier),
    )

from_vk(
    T::Type{ImageDrmFormatModifierPropertiesEXT},
    x::VkImageDrmFormatModifierPropertiesEXT,
) = ImageDrmFormatModifierPropertiesEXT(x)
PhysicalDeviceShadingRateImagePropertiesNV(
    vks::VkPhysicalDeviceShadingRateImagePropertiesNV,
) = PhysicalDeviceShadingRateImagePropertiesNV(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Extent2D, vks.shadingRateTexelSize),
    from_vk(UInt32, vks.shadingRatePaletteSize),
    from_vk(UInt32, vks.shadingRateMaxCoarseSamples),
)

from_vk(
    T::Type{PhysicalDeviceShadingRateImagePropertiesNV},
    x::VkPhysicalDeviceShadingRateImagePropertiesNV,
) = PhysicalDeviceShadingRateImagePropertiesNV(x)

"""
Generic constructor.
"""
function CoarseSampleLocationNV(pixel_x, pixel_y, sample)
    vks = VkCoarseSampleLocationNV(pixel_x, pixel_y, sample)
    CoarseSampleLocationNV(vks)
end

from_vk(T::Type{CoarseSampleLocationNV}, x::VkCoarseSampleLocationNV) =
    CoarseSampleLocationNV(x.pixelX, x.pixelY, x.sample)
"""
Generic constructor.
"""
function GeometryDataNV(triangles, aabbs)
    vks = VkGeometryDataNV(triangles.vks, aabbs.vks)
    GeometryDataNV(vks)
end

from_vk(T::Type{GeometryDataNV}, x::VkGeometryDataNV) = GeometryDataNV(x.triangles, x.aabbs)
PhysicalDeviceRayTracingPropertiesNV(vks::VkPhysicalDeviceRayTracingPropertiesNV) =
    PhysicalDeviceRayTracingPropertiesNV(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.shaderGroupHandleSize),
        from_vk(UInt32, vks.maxRecursionDepth),
        from_vk(UInt32, vks.maxShaderGroupStride),
        from_vk(UInt32, vks.shaderGroupBaseAlignment),
        from_vk(UInt64, vks.maxGeometryCount),
        from_vk(UInt64, vks.maxInstanceCount),
        from_vk(UInt64, vks.maxTriangleCount),
        from_vk(UInt32, vks.maxDescriptorSetAccelerationStructures),
    )

from_vk(
    T::Type{PhysicalDeviceRayTracingPropertiesNV},
    x::VkPhysicalDeviceRayTracingPropertiesNV,
) = PhysicalDeviceRayTracingPropertiesNV(x)

"""
Generic constructor.
"""
function TransformMatrixKHR(matrix)
    vks = VkTransformMatrixKHR(matrix)
    TransformMatrixKHR(vks)
end

from_vk(T::Type{TransformMatrixKHR}, x::VkTransformMatrixKHR) = TransformMatrixKHR(x.matrix)
"""
Generic constructor.
"""
function AabbPositionsKHR(min_x, min_y, min_z, max_x, max_y, max_z)
    vks = VkAabbPositionsKHR(min_x, min_y, min_z, max_x, max_y, max_z)
    AabbPositionsKHR(vks)
end

from_vk(T::Type{AabbPositionsKHR}, x::VkAabbPositionsKHR) =
    AabbPositionsKHR(x.minX, x.minY, x.minZ, x.maxX, x.maxY, x.maxZ)
"""
Generic constructor.
"""
function AccelerationStructureInstanceKHR(
    transform,
    instance_custom_index,
    mask,
    instance_shader_binding_table_record_offset,
    acceleration_structure_reference;
    flags = 0,
)
    vks = VkAccelerationStructureInstanceKHR(
        transform.vks,
        instance_custom_index,
        mask,
        instance_shader_binding_table_record_offset,
        if flags == 0
            0
        else
            flags
        end,
        acceleration_structure_reference,
    )
    AccelerationStructureInstanceKHR(vks)
end

from_vk(T::Type{AccelerationStructureInstanceKHR}, x::VkAccelerationStructureInstanceKHR) =
    AccelerationStructureInstanceKHR(
        x.transform,
        x.instanceCustomIndex,
        x.mask,
        x.instanceShaderBindingTableRecordOffset,
        x.flags,
        x.accelerationStructureReference,
    )

FilterCubicImageViewImageFormatPropertiesEXT(
    vks::VkFilterCubicImageViewImageFormatPropertiesEXT,
) = FilterCubicImageViewImageFormatPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Bool, vks.filterCubic),
    from_vk(Bool, vks.filterCubicMinmax),
)

from_vk(
    T::Type{FilterCubicImageViewImageFormatPropertiesEXT},
    x::VkFilterCubicImageViewImageFormatPropertiesEXT,
) = FilterCubicImageViewImageFormatPropertiesEXT(x)

MemoryHostPointerPropertiesEXT(vks::VkMemoryHostPointerPropertiesEXT) =
    MemoryHostPointerPropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.memoryTypeBits),
    )

from_vk(T::Type{MemoryHostPointerPropertiesEXT}, x::VkMemoryHostPointerPropertiesEXT) =
    MemoryHostPointerPropertiesEXT(x)
PhysicalDeviceExternalMemoryHostPropertiesEXT(
    vks::VkPhysicalDeviceExternalMemoryHostPropertiesEXT,
) = PhysicalDeviceExternalMemoryHostPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(DeviceSize, vks.minImportedHostPointerAlignment),
)

from_vk(
    T::Type{PhysicalDeviceExternalMemoryHostPropertiesEXT},
    x::VkPhysicalDeviceExternalMemoryHostPropertiesEXT,
) = PhysicalDeviceExternalMemoryHostPropertiesEXT(x)

PhysicalDeviceShaderCorePropertiesAMD(vks::VkPhysicalDeviceShaderCorePropertiesAMD) =
    PhysicalDeviceShaderCorePropertiesAMD(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.shaderEngineCount),
        from_vk(UInt32, vks.shaderArraysPerEngineCount),
        from_vk(UInt32, vks.computeUnitsPerShaderArray),
        from_vk(UInt32, vks.simdPerComputeUnit),
        from_vk(UInt32, vks.wavefrontsPerSimd),
        from_vk(UInt32, vks.wavefrontSize),
        from_vk(UInt32, vks.sgprsPerSimd),
        from_vk(UInt32, vks.minSgprAllocation),
        from_vk(UInt32, vks.maxSgprAllocation),
        from_vk(UInt32, vks.sgprAllocationGranularity),
        from_vk(UInt32, vks.vgprsPerSimd),
        from_vk(UInt32, vks.minVgprAllocation),
        from_vk(UInt32, vks.maxVgprAllocation),
        from_vk(UInt32, vks.vgprAllocationGranularity),
    )

from_vk(
    T::Type{PhysicalDeviceShaderCorePropertiesAMD},
    x::VkPhysicalDeviceShaderCorePropertiesAMD,
) = PhysicalDeviceShaderCorePropertiesAMD(x)

PhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    vks::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
) = PhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxVertexAttribDivisor),
)

from_vk(
    T::Type{PhysicalDeviceVertexAttributeDivisorPropertiesEXT},
    x::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
) = PhysicalDeviceVertexAttributeDivisorPropertiesEXT(x)

"""
Generic constructor.
"""
function VertexInputBindingDivisorDescriptionEXT(binding, divisor)
    vks = VkVertexInputBindingDivisorDescriptionEXT(binding, divisor)
    VertexInputBindingDivisorDescriptionEXT(vks)
end

from_vk(
    T::Type{VertexInputBindingDivisorDescriptionEXT},
    x::VkVertexInputBindingDivisorDescriptionEXT,
) = VertexInputBindingDivisorDescriptionEXT(x.binding, x.divisor)

PipelineCreationFeedbackEXT(vks::VkPipelineCreationFeedbackEXT) =
    PipelineCreationFeedbackEXT(
        from_vk(PipelineCreationFeedbackFlagsEXT, vks.flags),
        from_vk(UInt64, vks.duration),
    )

from_vk(T::Type{PipelineCreationFeedbackEXT}, x::VkPipelineCreationFeedbackEXT) =
    PipelineCreationFeedbackEXT(x)
PhysicalDeviceMeshShaderPropertiesNV(vks::VkPhysicalDeviceMeshShaderPropertiesNV) =
    PhysicalDeviceMeshShaderPropertiesNV(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.maxDrawMeshTasksCount),
        from_vk(UInt32, vks.maxTaskWorkGroupInvocations),
        from_vk(NTuple{3,UInt32}, vks.maxTaskWorkGroupSize),
        from_vk(UInt32, vks.maxTaskTotalMemorySize),
        from_vk(UInt32, vks.maxTaskOutputCount),
        from_vk(UInt32, vks.maxMeshWorkGroupInvocations),
        from_vk(NTuple{3,UInt32}, vks.maxMeshWorkGroupSize),
        from_vk(UInt32, vks.maxMeshTotalMemorySize),
        from_vk(UInt32, vks.maxMeshOutputVertices),
        from_vk(UInt32, vks.maxMeshOutputPrimitives),
        from_vk(UInt32, vks.maxMeshMultiviewViewCount),
        from_vk(UInt32, vks.meshOutputPerVertexGranularity),
        from_vk(UInt32, vks.meshOutputPerPrimitiveGranularity),
    )

from_vk(
    T::Type{PhysicalDeviceMeshShaderPropertiesNV},
    x::VkPhysicalDeviceMeshShaderPropertiesNV,
) = PhysicalDeviceMeshShaderPropertiesNV(x)

"""
Generic constructor.
"""
function DrawMeshTasksIndirectCommandNV(task_count, first_task)
    vks = VkDrawMeshTasksIndirectCommandNV(task_count, first_task)
    DrawMeshTasksIndirectCommandNV(vks)
end

from_vk(T::Type{DrawMeshTasksIndirectCommandNV}, x::VkDrawMeshTasksIndirectCommandNV) =
    DrawMeshTasksIndirectCommandNV(x.taskCount, x.firstTask)
QueueFamilyCheckpointPropertiesNV(vks::VkQueueFamilyCheckpointPropertiesNV) =
    QueueFamilyCheckpointPropertiesNV(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(PipelineStageFlags, vks.checkpointExecutionStageMask),
    )

from_vk(
    T::Type{QueueFamilyCheckpointPropertiesNV},
    x::VkQueueFamilyCheckpointPropertiesNV,
) = QueueFamilyCheckpointPropertiesNV(x)
CheckpointDataNV(vks::VkCheckpointDataNV) = CheckpointDataNV(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(PipelineStageFlagBits, vks.stage),
    from_vk(Ptr{Cvoid}, vks.pCheckpointMarker),
)

from_vk(T::Type{CheckpointDataNV}, x::VkCheckpointDataNV) = CheckpointDataNV(x)
"""
Generic constructor.
"""
function PerformanceValueDataINTEL(value64)
    vks = VkPerformanceValueDataINTEL(value64)
    PerformanceValueDataINTEL(vks)
end

from_vk(T::Type{PerformanceValueDataINTEL}, x::VkPerformanceValueDataINTEL) =
    PerformanceValueDataINTEL(x.value64)
"""
Generic constructor.
"""
function PerformanceValueINTEL(type, data)
    vks = VkPerformanceValueINTEL(type, data.vks)
    PerformanceValueINTEL(vks)
end

from_vk(T::Type{PerformanceValueINTEL}, x::VkPerformanceValueINTEL) =
    PerformanceValueINTEL(x.type, x.data)
PhysicalDevicePCIBusInfoPropertiesEXT(vks::VkPhysicalDevicePCIBusInfoPropertiesEXT) =
    PhysicalDevicePCIBusInfoPropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.pciDomain),
        from_vk(UInt32, vks.pciBus),
        from_vk(UInt32, vks.pciDevice),
        from_vk(UInt32, vks.pciFunction),
    )

from_vk(
    T::Type{PhysicalDevicePCIBusInfoPropertiesEXT},
    x::VkPhysicalDevicePCIBusInfoPropertiesEXT,
) = PhysicalDevicePCIBusInfoPropertiesEXT(x)

DisplayNativeHdrSurfaceCapabilitiesAMD(vks::VkDisplayNativeHdrSurfaceCapabilitiesAMD) =
    DisplayNativeHdrSurfaceCapabilitiesAMD(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(Bool, vks.localDimmingSupport),
    )

from_vk(
    T::Type{DisplayNativeHdrSurfaceCapabilitiesAMD},
    x::VkDisplayNativeHdrSurfaceCapabilitiesAMD,
) = DisplayNativeHdrSurfaceCapabilitiesAMD(x)

PhysicalDeviceFragmentDensityMapPropertiesEXT(
    vks::VkPhysicalDeviceFragmentDensityMapPropertiesEXT,
) = PhysicalDeviceFragmentDensityMapPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Extent2D, vks.minFragmentDensityTexelSize),
    from_vk(Extent2D, vks.maxFragmentDensityTexelSize),
    from_vk(Bool, vks.fragmentDensityInvocations),
)

from_vk(
    T::Type{PhysicalDeviceFragmentDensityMapPropertiesEXT},
    x::VkPhysicalDeviceFragmentDensityMapPropertiesEXT,
) = PhysicalDeviceFragmentDensityMapPropertiesEXT(x)

PhysicalDeviceSubgroupSizeControlPropertiesEXT(
    vks::VkPhysicalDeviceSubgroupSizeControlPropertiesEXT,
) = PhysicalDeviceSubgroupSizeControlPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.minSubgroupSize),
    from_vk(UInt32, vks.maxSubgroupSize),
    from_vk(UInt32, vks.maxComputeWorkgroupSubgroups),
    from_vk(ShaderStageFlags, vks.requiredSubgroupSizeStages),
)

from_vk(
    T::Type{PhysicalDeviceSubgroupSizeControlPropertiesEXT},
    x::VkPhysicalDeviceSubgroupSizeControlPropertiesEXT,
) = PhysicalDeviceSubgroupSizeControlPropertiesEXT(x)

PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    vks::VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT,
) = PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.requiredSubgroupSize),
)

from_vk(
    T::Type{PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT},
    x::VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT,
) = PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(x)

PhysicalDeviceShaderCoreProperties2AMD(vks::VkPhysicalDeviceShaderCoreProperties2AMD) =
    PhysicalDeviceShaderCoreProperties2AMD(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(ShaderCorePropertiesFlagsAMD, vks.shaderCoreFeatures),
        from_vk(UInt32, vks.activeComputeUnitCount),
    )

from_vk(
    T::Type{PhysicalDeviceShaderCoreProperties2AMD},
    x::VkPhysicalDeviceShaderCoreProperties2AMD,
) = PhysicalDeviceShaderCoreProperties2AMD(x)

PhysicalDeviceMemoryBudgetPropertiesEXT(vks::VkPhysicalDeviceMemoryBudgetPropertiesEXT) =
    PhysicalDeviceMemoryBudgetPropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(NTuple{16,VkDeviceSize}, vks.heapBudget),
        from_vk(NTuple{16,VkDeviceSize}, vks.heapUsage),
    )

from_vk(
    T::Type{PhysicalDeviceMemoryBudgetPropertiesEXT},
    x::VkPhysicalDeviceMemoryBudgetPropertiesEXT,
) = PhysicalDeviceMemoryBudgetPropertiesEXT(x)

PhysicalDeviceToolPropertiesEXT(vks::VkPhysicalDeviceToolPropertiesEXT) =
    PhysicalDeviceToolPropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(String, vks.name),
        from_vk(String, vks.version),
        from_vk(ToolPurposeFlagsEXT, vks.purposes),
        from_vk(String, vks.description),
        from_vk(String, vks.layer),
    )

from_vk(T::Type{PhysicalDeviceToolPropertiesEXT}, x::VkPhysicalDeviceToolPropertiesEXT) =
    PhysicalDeviceToolPropertiesEXT(x)
PhysicalDeviceCooperativeMatrixPropertiesNV(
    vks::VkPhysicalDeviceCooperativeMatrixPropertiesNV,
) = PhysicalDeviceCooperativeMatrixPropertiesNV(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(ShaderStageFlags, vks.cooperativeMatrixSupportedStages),
)

from_vk(
    T::Type{PhysicalDeviceCooperativeMatrixPropertiesNV},
    x::VkPhysicalDeviceCooperativeMatrixPropertiesNV,
) = PhysicalDeviceCooperativeMatrixPropertiesNV(x)

FramebufferMixedSamplesCombinationNV(vks::VkFramebufferMixedSamplesCombinationNV) =
    FramebufferMixedSamplesCombinationNV(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(CoverageReductionModeNV, vks.coverageReductionMode),
        from_vk(SampleCountFlagBits, vks.rasterizationSamples),
        from_vk(SampleCountFlags, vks.depthStencilSamples),
        from_vk(SampleCountFlags, vks.colorSamples),
    )

from_vk(
    T::Type{FramebufferMixedSamplesCombinationNV},
    x::VkFramebufferMixedSamplesCombinationNV,
) = FramebufferMixedSamplesCombinationNV(x)

PhysicalDeviceLineRasterizationPropertiesEXT(
    vks::VkPhysicalDeviceLineRasterizationPropertiesEXT,
) = PhysicalDeviceLineRasterizationPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.lineSubPixelPrecisionBits),
)

from_vk(
    T::Type{PhysicalDeviceLineRasterizationPropertiesEXT},
    x::VkPhysicalDeviceLineRasterizationPropertiesEXT,
) = PhysicalDeviceLineRasterizationPropertiesEXT(x)

PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    vks::VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
) = PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxGraphicsShaderGroupCount),
    from_vk(UInt32, vks.maxIndirectSequenceCount),
    from_vk(UInt32, vks.maxIndirectCommandsTokenCount),
    from_vk(UInt32, vks.maxIndirectCommandsStreamCount),
    from_vk(UInt32, vks.maxIndirectCommandsTokenOffset),
    from_vk(UInt32, vks.maxIndirectCommandsStreamStride),
    from_vk(UInt32, vks.minSequencesCountBufferOffsetAlignment),
    from_vk(UInt32, vks.minSequencesIndexBufferOffsetAlignment),
    from_vk(UInt32, vks.minIndirectCommandsBufferOffsetAlignment),
)

from_vk(
    T::Type{PhysicalDeviceDeviceGeneratedCommandsPropertiesNV},
    x::VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
) = PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(x)

"""
Generic constructor.
"""
function BindShaderGroupIndirectCommandNV(group_index)
    vks = VkBindShaderGroupIndirectCommandNV(group_index)
    BindShaderGroupIndirectCommandNV(vks)
end

from_vk(T::Type{BindShaderGroupIndirectCommandNV}, x::VkBindShaderGroupIndirectCommandNV) =
    BindShaderGroupIndirectCommandNV(x.groupIndex)
"""
Generic constructor.
"""
function BindIndexBufferIndirectCommandNV(buffer_address, size, index_type)
    vks = VkBindIndexBufferIndirectCommandNV(buffer_address, size, index_type)
    BindIndexBufferIndirectCommandNV(vks)
end

from_vk(T::Type{BindIndexBufferIndirectCommandNV}, x::VkBindIndexBufferIndirectCommandNV) =
    BindIndexBufferIndirectCommandNV(x.bufferAddress, x.size, x.indexType)

"""
Generic constructor.
"""
function BindVertexBufferIndirectCommandNV(buffer_address, size, stride)
    vks = VkBindVertexBufferIndirectCommandNV(buffer_address, size, stride)
    BindVertexBufferIndirectCommandNV(vks)
end

from_vk(
    T::Type{BindVertexBufferIndirectCommandNV},
    x::VkBindVertexBufferIndirectCommandNV,
) = BindVertexBufferIndirectCommandNV(x.bufferAddress, x.size, x.stride)

"""
Generic constructor.
"""
function SetStateFlagsIndirectCommandNV(data)
    vks = VkSetStateFlagsIndirectCommandNV(data)
    SetStateFlagsIndirectCommandNV(vks)
end

from_vk(T::Type{SetStateFlagsIndirectCommandNV}, x::VkSetStateFlagsIndirectCommandNV) =
    SetStateFlagsIndirectCommandNV(x.data)
"""
Generic constructor.
"""
function IndirectCommandsStreamNV(buffer, offset)
    vks = VkIndirectCommandsStreamNV(buffer.handle, offset)
    IndirectCommandsStreamNV(vks)
end

from_vk(T::Type{IndirectCommandsStreamNV}, x::VkIndirectCommandsStreamNV) =
    IndirectCommandsStreamNV(x.buffer, x.offset)
PhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    vks::VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT,
) = PhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(DeviceSize, vks.storageTexelBufferOffsetAlignmentBytes),
    from_vk(Bool, vks.storageTexelBufferOffsetSingleTexelAlignment),
    from_vk(DeviceSize, vks.uniformTexelBufferOffsetAlignmentBytes),
    from_vk(Bool, vks.uniformTexelBufferOffsetSingleTexelAlignment),
)

from_vk(
    T::Type{PhysicalDeviceTexelBufferAlignmentPropertiesEXT},
    x::VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT,
) = PhysicalDeviceTexelBufferAlignmentPropertiesEXT(x)

PhysicalDeviceRobustness2PropertiesEXT(vks::VkPhysicalDeviceRobustness2PropertiesEXT) =
    PhysicalDeviceRobustness2PropertiesEXT(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DeviceSize, vks.robustStorageBufferAccessSizeAlignment),
        from_vk(DeviceSize, vks.robustUniformBufferAccessSizeAlignment),
    )

from_vk(
    T::Type{PhysicalDeviceRobustness2PropertiesEXT},
    x::VkPhysicalDeviceRobustness2PropertiesEXT,
) = PhysicalDeviceRobustness2PropertiesEXT(x)

PhysicalDeviceCustomBorderColorPropertiesEXT(
    vks::VkPhysicalDeviceCustomBorderColorPropertiesEXT,
) = PhysicalDeviceCustomBorderColorPropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(UInt32, vks.maxCustomBorderColorSamplers),
)

from_vk(
    T::Type{PhysicalDeviceCustomBorderColorPropertiesEXT},
    x::VkPhysicalDeviceCustomBorderColorPropertiesEXT,
) = PhysicalDeviceCustomBorderColorPropertiesEXT(x)

PhysicalDeviceFragmentDensityMap2PropertiesEXT(
    vks::VkPhysicalDeviceFragmentDensityMap2PropertiesEXT,
) = PhysicalDeviceFragmentDensityMap2PropertiesEXT(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Bool, vks.subsampledLoads),
    from_vk(Bool, vks.subsampledCoarseReconstructionEarlyAccess),
    from_vk(UInt32, vks.maxSubsampledArrayLayers),
    from_vk(UInt32, vks.maxDescriptorSetSubsampledSamplers),
)

from_vk(
    T::Type{PhysicalDeviceFragmentDensityMap2PropertiesEXT},
    x::VkPhysicalDeviceFragmentDensityMap2PropertiesEXT,
) = PhysicalDeviceFragmentDensityMap2PropertiesEXT(x)

AndroidHardwareBufferUsageANDROID(vks::VkAndroidHardwareBufferUsageANDROID) =
    AndroidHardwareBufferUsageANDROID(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt64, vks.androidHardwareBufferUsage),
    )

from_vk(
    T::Type{AndroidHardwareBufferUsageANDROID},
    x::VkAndroidHardwareBufferUsageANDROID,
) = AndroidHardwareBufferUsageANDROID(x)
AndroidHardwareBufferPropertiesANDROID(vks::VkAndroidHardwareBufferPropertiesANDROID) =
    AndroidHardwareBufferPropertiesANDROID(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(DeviceSize, vks.allocationSize),
        from_vk(UInt32, vks.memoryTypeBits),
    )

from_vk(
    T::Type{AndroidHardwareBufferPropertiesANDROID},
    x::VkAndroidHardwareBufferPropertiesANDROID,
) = AndroidHardwareBufferPropertiesANDROID(x)

AndroidHardwareBufferFormatPropertiesANDROID(
    vks::VkAndroidHardwareBufferFormatPropertiesANDROID,
) = AndroidHardwareBufferFormatPropertiesANDROID(
    from_vk(Ptr{Cvoid}, vks.pNext),
    from_vk(Format, vks.format),
    from_vk(UInt64, vks.externalFormat),
    from_vk(FormatFeatureFlags, vks.formatFeatures),
    from_vk(ComponentMapping, vks.samplerYcbcrConversionComponents),
    from_vk(SamplerYcbcrModelConversion, vks.suggestedYcbcrModel),
    from_vk(SamplerYcbcrRange, vks.suggestedYcbcrRange),
    from_vk(ChromaLocation, vks.suggestedXChromaOffset),
    from_vk(ChromaLocation, vks.suggestedYChromaOffset),
)

from_vk(
    T::Type{AndroidHardwareBufferFormatPropertiesANDROID},
    x::VkAndroidHardwareBufferFormatPropertiesANDROID,
) = AndroidHardwareBufferFormatPropertiesANDROID(x)

MemoryWin32HandlePropertiesKHR(vks::VkMemoryWin32HandlePropertiesKHR) =
    MemoryWin32HandlePropertiesKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.memoryTypeBits),
    )

from_vk(T::Type{MemoryWin32HandlePropertiesKHR}, x::VkMemoryWin32HandlePropertiesKHR) =
    MemoryWin32HandlePropertiesKHR(x)
"""
Generic constructor.
"""
function DeviceOrHostAddressKHR(device_address)
    vks = VkDeviceOrHostAddressKHR(device_address)
    DeviceOrHostAddressKHR(vks)
end

from_vk(T::Type{DeviceOrHostAddressKHR}, x::VkDeviceOrHostAddressKHR) =
    DeviceOrHostAddressKHR(x.deviceAddress)
"""
Generic constructor.
"""
function DeviceOrHostAddressConstKHR(device_address)
    vks = VkDeviceOrHostAddressConstKHR(device_address)
    DeviceOrHostAddressConstKHR(vks)
end

from_vk(T::Type{DeviceOrHostAddressConstKHR}, x::VkDeviceOrHostAddressConstKHR) =
    DeviceOrHostAddressConstKHR(x.deviceAddress)
"""
Generic constructor.
"""
function AccelerationStructureBuildOffsetInfoKHR(
    primitive_count,
    primitive_offset;
    first_vertex = 0,
    transform_offset = 0,
)
    vks = VkAccelerationStructureBuildOffsetInfoKHR(
        primitive_count,
        primitive_offset,
        if first_vertex == 0
            0
        else
            first_vertex
        end,
        if transform_offset == 0
            0
        else
            transform_offset
        end,
    )
    AccelerationStructureBuildOffsetInfoKHR(vks)
end

from_vk(
    T::Type{AccelerationStructureBuildOffsetInfoKHR},
    x::VkAccelerationStructureBuildOffsetInfoKHR,
) = AccelerationStructureBuildOffsetInfoKHR(
    x.primitiveCount,
    x.primitiveOffset,
    x.firstVertex,
    x.transformOffset,
)

"""
Generic constructor.
"""
function AccelerationStructureGeometryDataKHR(triangles)
    vks = VkAccelerationStructureGeometryDataKHR(triangles.vks)
    AccelerationStructureGeometryDataKHR(vks)
end

from_vk(
    T::Type{AccelerationStructureGeometryDataKHR},
    x::VkAccelerationStructureGeometryDataKHR,
) = AccelerationStructureGeometryDataKHR(x.triangles)

PhysicalDeviceRayTracingPropertiesKHR(vks::VkPhysicalDeviceRayTracingPropertiesKHR) =
    PhysicalDeviceRayTracingPropertiesKHR(
        from_vk(Ptr{Cvoid}, vks.pNext),
        from_vk(UInt32, vks.shaderGroupHandleSize),
        from_vk(UInt32, vks.maxRecursionDepth),
        from_vk(UInt32, vks.maxShaderGroupStride),
        from_vk(UInt32, vks.shaderGroupBaseAlignment),
        from_vk(UInt64, vks.maxGeometryCount),
        from_vk(UInt64, vks.maxInstanceCount),
        from_vk(UInt64, vks.maxPrimitiveCount),
        from_vk(UInt32, vks.maxDescriptorSetAccelerationStructures),
        from_vk(UInt32, vks.shaderGroupHandleCaptureReplaySize),
    )

from_vk(
    T::Type{PhysicalDeviceRayTracingPropertiesKHR},
    x::VkPhysicalDeviceRayTracingPropertiesKHR,
) = PhysicalDeviceRayTracingPropertiesKHR(x)

"""
Generic constructor.
"""
function StridedBufferRegionKHR(offset, stride, size; buffer = C_NULL)
    vks = VkStridedBufferRegionKHR(if buffer == C_NULL
        C_NULL
    else
        buffer.handle
    end, offset, stride, size)
    StridedBufferRegionKHR(vks)
end

from_vk(T::Type{StridedBufferRegionKHR}, x::VkStridedBufferRegionKHR) =
    StridedBufferRegionKHR(x.buffer, x.offset, x.stride, x.size)
"""
Generic constructor.
"""
function TraceRaysIndirectCommandKHR(width, height, depth)
    vks = VkTraceRaysIndirectCommandKHR(width, height, depth)
    TraceRaysIndirectCommandKHR(vks)
end

from_vk(T::Type{TraceRaysIndirectCommandKHR}, x::VkTraceRaysIndirectCommandKHR) =
    TraceRaysIndirectCommandKHR(x.width, x.height, x.depth)
function Buffer(device, create_info::BufferCreateInfo; allocator = C_NULL)
    buffer = Ref{VkBuffer}()
    @check vkCreateBuffer(device, create_info, allocator, buffer)
    vks = Buffer(buffer[])
    finalizer((x -> vkDestroyBuffer(device, x, allocator)), vks)
end

function Buffer(
    device,
    create_info::BufferCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    buffer = Ref{VkBuffer}()
    @check vkCreateBuffer(device, create_info, allocator, buffer, fun_ptr_create)
    vks = Buffer(buffer[])
    finalizer((x -> vkDestroyBuffer(device, x, allocator, fun_ptr_destroy)), vks)
end

function Image(device, create_info::ImageCreateInfo; allocator = C_NULL)
    image = Ref{VkImage}()
    @check vkCreateImage(device, create_info, allocator, image)
    vks = Image(image[])
    finalizer((x -> vkDestroyImage(device, x, allocator)), vks)
end

function Image(
    device,
    create_info::ImageCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    image = Ref{VkImage}()
    @check vkCreateImage(device, create_info, allocator, image, fun_ptr_create)
    vks = Image(image[])
    finalizer((x -> vkDestroyImage(device, x, allocator, fun_ptr_destroy)), vks)
end

function Instance(create_info::InstanceCreateInfo; allocator = C_NULL)
    instance = Ref{VkInstance}()
    @check vkCreateInstance(create_info, allocator, instance)
    vks = Instance(instance[])
    finalizer((x -> vkDestroyInstance(x, allocator)), vks)
end

function Instance(
    create_info::InstanceCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    instance = Ref{VkInstance}()
    @check vkCreateInstance(create_info, allocator, instance, fun_ptr_create)
    vks = Instance(instance[])
    finalizer((x -> vkDestroyInstance(x, allocator, fun_ptr_destroy)), vks)
end

function Device(physical_device, create_info::DeviceCreateInfo; allocator = C_NULL)
    device = Ref{VkDevice}()
    @check vkCreateDevice(physical_device, create_info, allocator, device)
    vks = Device(device[])
    finalizer((x -> vkDestroyDevice(x, allocator)), vks)
end

function Device(
    physical_device,
    create_info::DeviceCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    device = Ref{VkDevice}()
    @check vkCreateDevice(physical_device, create_info, allocator, device, fun_ptr_create)
    vks = Device(device[])
    finalizer((x -> vkDestroyDevice(x, allocator, fun_ptr_destroy)), vks)
end

function Semaphore(device, create_info::SemaphoreCreateInfo; allocator = C_NULL)
    semaphore = Ref{VkSemaphore}()
    @check vkCreateSemaphore(device, create_info, allocator, semaphore)
    vks = Semaphore(semaphore[])
    finalizer((x -> vkDestroySemaphore(device, x, allocator)), vks)
end

function Semaphore(
    device,
    create_info::SemaphoreCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    semaphore = Ref{VkSemaphore}()
    @check vkCreateSemaphore(device, create_info, allocator, semaphore, fun_ptr_create)
    vks = Semaphore(semaphore[])
    finalizer((x -> vkDestroySemaphore(device, x, allocator, fun_ptr_destroy)), vks)
end

function CommandBuffer(device, allocate_info, n)
    command_buffers = Array{VkCommandBuffer,1}(undef, n)
    @check vkAllocateCommandBuffers(device, allocate_info, command_buffers)
    vks = CommandBuffer.(command_buffers)
end

function CommandBuffer(device, allocate_info, n, fun_ptr_create)
    command_buffers = Array{VkCommandBuffer,1}(undef, n)
    @check vkAllocateCommandBuffers(device, allocate_info, command_buffers, fun_ptr_create)
    vks = CommandBuffer.(command_buffers)
end

function Fence(device, create_info::FenceCreateInfo; allocator = C_NULL)
    fence = Ref{VkFence}()
    @check vkCreateFence(device, create_info, allocator, fence)
    vks = Fence(fence[])
    finalizer((x -> vkDestroyFence(device, x, allocator)), vks)
end

function Fence(
    device,
    create_info::FenceCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    fence = Ref{VkFence}()
    @check vkCreateFence(device, create_info, allocator, fence, fun_ptr_create)
    vks = Fence(fence[])
    finalizer((x -> vkDestroyFence(device, x, allocator, fun_ptr_destroy)), vks)
end

function DeviceMemory(device, allocate_info, n; allocator = C_NULL)
    memory = Array{VkDeviceMemory,1}(undef, n)
    @check vkAllocateMemory(device, allocate_info, allocator, memory)
    vks = DeviceMemory.(memory)
end

function DeviceMemory(device, allocate_info, n, fun_ptr_create; allocator = C_NULL)
    memory = Array{VkDeviceMemory,1}(undef, n)
    @check vkAllocateMemory(device, allocate_info, allocator, memory, fun_ptr_create)
    vks = DeviceMemory.(memory)
end

function Event(device, create_info::EventCreateInfo; allocator = C_NULL)
    event = Ref{VkEvent}()
    @check vkCreateEvent(device, create_info, allocator, event)
    vks = Event(event[])
    finalizer((x -> vkDestroyEvent(device, x, allocator)), vks)
end

function Event(
    device,
    create_info::EventCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    event = Ref{VkEvent}()
    @check vkCreateEvent(device, create_info, allocator, event, fun_ptr_create)
    vks = Event(event[])
    finalizer((x -> vkDestroyEvent(device, x, allocator, fun_ptr_destroy)), vks)
end

function QueryPool(device, create_info::QueryPoolCreateInfo; allocator = C_NULL)
    query_pool = Ref{VkQueryPool}()
    @check vkCreateQueryPool(device, create_info, allocator, query_pool)
    vks = QueryPool(query_pool[])
    finalizer((x -> vkDestroyQueryPool(device, x, allocator)), vks)
end

function QueryPool(
    device,
    create_info::QueryPoolCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    query_pool = Ref{VkQueryPool}()
    @check vkCreateQueryPool(device, create_info, allocator, query_pool, fun_ptr_create)
    vks = QueryPool(query_pool[])
    finalizer((x -> vkDestroyQueryPool(device, x, allocator, fun_ptr_destroy)), vks)
end

function BufferView(device, create_info::BufferViewCreateInfo; allocator = C_NULL)
    view = Ref{VkBufferView}()
    @check vkCreateBufferView(device, create_info, allocator, view)
    vks = BufferView(view[])
    finalizer((x -> vkDestroyBufferView(device, x, allocator)), vks)
end

function BufferView(
    device,
    create_info::BufferViewCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    view = Ref{VkBufferView}()
    @check vkCreateBufferView(device, create_info, allocator, view, fun_ptr_create)
    vks = BufferView(view[])
    finalizer((x -> vkDestroyBufferView(device, x, allocator, fun_ptr_destroy)), vks)
end

function ImageView(device, create_info::ImageViewCreateInfo; allocator = C_NULL)
    view = Ref{VkImageView}()
    @check vkCreateImageView(device, create_info, allocator, view)
    vks = ImageView(view[])
    finalizer((x -> vkDestroyImageView(device, x, allocator)), vks)
end

function ImageView(
    device,
    create_info::ImageViewCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    view = Ref{VkImageView}()
    @check vkCreateImageView(device, create_info, allocator, view, fun_ptr_create)
    vks = ImageView(view[])
    finalizer((x -> vkDestroyImageView(device, x, allocator, fun_ptr_destroy)), vks)
end

function ShaderModule(device, create_info::ShaderModuleCreateInfo; allocator = C_NULL)
    shader_module = Ref{VkShaderModule}()
    @check vkCreateShaderModule(device, create_info, allocator, shader_module)
    vks = ShaderModule(shader_module[])
    finalizer((x -> vkDestroyShaderModule(device, x, allocator)), vks)
end

function ShaderModule(
    device,
    create_info::ShaderModuleCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    shader_module = Ref{VkShaderModule}()
    @check vkCreateShaderModule(
        device,
        create_info,
        allocator,
        shader_module,
        fun_ptr_create,
    )
    vks = ShaderModule(shader_module[])
    finalizer((x -> vkDestroyShaderModule(device, x, allocator, fun_ptr_destroy)), vks)
end

function PipelineCache(device, create_info::PipelineCacheCreateInfo; allocator = C_NULL)
    pipeline_cache = Ref{VkPipelineCache}()
    @check vkCreatePipelineCache(device, create_info, allocator, pipeline_cache)
    vks = PipelineCache(pipeline_cache[])
    finalizer((x -> vkDestroyPipelineCache(device, x, allocator)), vks)
end

function PipelineCache(
    device,
    create_info::PipelineCacheCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    pipeline_cache = Ref{VkPipelineCache}()
    @check vkCreatePipelineCache(
        device,
        create_info,
        allocator,
        pipeline_cache,
        fun_ptr_create,
    )
    vks = PipelineCache(pipeline_cache[])
    finalizer((x -> vkDestroyPipelineCache(device, x, allocator, fun_ptr_destroy)), vks)
end

function PipelineLayout(device, create_info::PipelineLayoutCreateInfo; allocator = C_NULL)
    pipeline_layout = Ref{VkPipelineLayout}()
    @check vkCreatePipelineLayout(device, create_info, allocator, pipeline_layout)
    vks = PipelineLayout(pipeline_layout[])
    finalizer((x -> vkDestroyPipelineLayout(device, x, allocator)), vks)
end

function PipelineLayout(
    device,
    create_info::PipelineLayoutCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    pipeline_layout = Ref{VkPipelineLayout}()
    @check vkCreatePipelineLayout(
        device,
        create_info,
        allocator,
        pipeline_layout,
        fun_ptr_create,
    )
    vks = PipelineLayout(pipeline_layout[])
    finalizer((x -> vkDestroyPipelineLayout(device, x, allocator, fun_ptr_destroy)), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{GraphicsPipelineCreateInfo,1};
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateGraphicsPipelines(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{GraphicsPipelineCreateInfo,1},
    fun_ptr_create,
    fun_ptr_destroy;
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateGraphicsPipelines(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
        fun_ptr_create,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator, fun_ptr_destroy))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{ComputePipelineCreateInfo,1};
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateComputePipelines(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{ComputePipelineCreateInfo,1},
    fun_ptr_create,
    fun_ptr_destroy;
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateComputePipelines(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
        fun_ptr_create,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator, fun_ptr_destroy))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{RayTracingPipelineCreateInfoNV,1};
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateRayTracingPipelinesNV(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{RayTracingPipelineCreateInfoNV,1},
    fun_ptr_create,
    fun_ptr_destroy;
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateRayTracingPipelinesNV(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
        fun_ptr_create,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator, fun_ptr_destroy))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{RayTracingPipelineCreateInfoKHR,1};
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateRayTracingPipelinesKHR(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator))), vks)
end

function Pipeline(
    device,
    create_infos::AbstractArray{RayTracingPipelineCreateInfoKHR,1},
    fun_ptr_create,
    fun_ptr_destroy;
    pipeline_cache = C_NULL,
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    pipelines = Array{VkPipeline,1}(undef, create_info_count)
    @check vkCreateRayTracingPipelinesKHR(
        device,
        pipeline_cache,
        create_info_count,
        create_infos,
        allocator,
        pipelines,
        fun_ptr_create,
    )
    vks = Pipeline.(pipelines)
    finalizer.(Ref((x -> vkDestroyPipeline(device, x, allocator, fun_ptr_destroy))), vks)
end

function RenderPass(device, create_info::RenderPassCreateInfo; allocator = C_NULL)
    render_pass = Ref{VkRenderPass}()
    @check vkCreateRenderPass(device, create_info, allocator, render_pass)
    vks = RenderPass(render_pass[])
    finalizer((x -> vkDestroyRenderPass(device, x, allocator)), vks)
end

function RenderPass(
    device,
    create_info::RenderPassCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    render_pass = Ref{VkRenderPass}()
    @check vkCreateRenderPass(device, create_info, allocator, render_pass, fun_ptr_create)
    vks = RenderPass(render_pass[])
    finalizer((x -> vkDestroyRenderPass(device, x, allocator, fun_ptr_destroy)), vks)
end

function RenderPass(device, create_info::RenderPassCreateInfo2; allocator = C_NULL)
    render_pass = Ref{VkRenderPass}()
    @check vkCreateRenderPass2(device, create_info, allocator, render_pass)
    vks = RenderPass(render_pass[])
    finalizer((x -> vkDestroyRenderPass(device, x, allocator)), vks)
end

function RenderPass(
    device,
    create_info::RenderPassCreateInfo2,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    render_pass = Ref{VkRenderPass}()
    @check vkCreateRenderPass2(device, create_info, allocator, render_pass, fun_ptr_create)
    vks = RenderPass(render_pass[])
    finalizer((x -> vkDestroyRenderPass(device, x, allocator, fun_ptr_destroy)), vks)
end

function DescriptorSetLayout(
    device,
    create_info::DescriptorSetLayoutCreateInfo;
    allocator = C_NULL,
)
    set_layout = Ref{VkDescriptorSetLayout}()
    @check vkCreateDescriptorSetLayout(device, create_info, allocator, set_layout)
    vks = DescriptorSetLayout(set_layout[])
    finalizer((x -> vkDestroyDescriptorSetLayout(device, x, allocator)), vks)
end

function DescriptorSetLayout(
    device,
    create_info::DescriptorSetLayoutCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    set_layout = Ref{VkDescriptorSetLayout}()
    @check vkCreateDescriptorSetLayout(
        device,
        create_info,
        allocator,
        set_layout,
        fun_ptr_create,
    )
    vks = DescriptorSetLayout(set_layout[])
    finalizer(
        (x -> vkDestroyDescriptorSetLayout(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function Sampler(device, create_info::SamplerCreateInfo; allocator = C_NULL)
    sampler = Ref{VkSampler}()
    @check vkCreateSampler(device, create_info, allocator, sampler)
    vks = Sampler(sampler[])
    finalizer((x -> vkDestroySampler(device, x, allocator)), vks)
end

function Sampler(
    device,
    create_info::SamplerCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    sampler = Ref{VkSampler}()
    @check vkCreateSampler(device, create_info, allocator, sampler, fun_ptr_create)
    vks = Sampler(sampler[])
    finalizer((x -> vkDestroySampler(device, x, allocator, fun_ptr_destroy)), vks)
end

function DescriptorSet(device, allocate_info, n)
    descriptor_sets = Array{VkDescriptorSet,1}(undef, n)
    @check vkAllocateDescriptorSets(device, allocate_info, descriptor_sets)
    vks = DescriptorSet.(descriptor_sets)
end

function DescriptorSet(device, allocate_info, n, fun_ptr_create)
    descriptor_sets = Array{VkDescriptorSet,1}(undef, n)
    @check vkAllocateDescriptorSets(device, allocate_info, descriptor_sets, fun_ptr_create)
    vks = DescriptorSet.(descriptor_sets)
end

function DescriptorPool(device, create_info::DescriptorPoolCreateInfo; allocator = C_NULL)
    descriptor_pool = Ref{VkDescriptorPool}()
    @check vkCreateDescriptorPool(device, create_info, allocator, descriptor_pool)
    vks = DescriptorPool(descriptor_pool[])
    finalizer((x -> vkDestroyDescriptorPool(device, x, allocator)), vks)
end

function DescriptorPool(
    device,
    create_info::DescriptorPoolCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    descriptor_pool = Ref{VkDescriptorPool}()
    @check vkCreateDescriptorPool(
        device,
        create_info,
        allocator,
        descriptor_pool,
        fun_ptr_create,
    )
    vks = DescriptorPool(descriptor_pool[])
    finalizer((x -> vkDestroyDescriptorPool(device, x, allocator, fun_ptr_destroy)), vks)
end

function Framebuffer(device, create_info::FramebufferCreateInfo; allocator = C_NULL)
    framebuffer = Ref{VkFramebuffer}()
    @check vkCreateFramebuffer(device, create_info, allocator, framebuffer)
    vks = Framebuffer(framebuffer[])
    finalizer((x -> vkDestroyFramebuffer(device, x, allocator)), vks)
end

function Framebuffer(
    device,
    create_info::FramebufferCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    framebuffer = Ref{VkFramebuffer}()
    @check vkCreateFramebuffer(device, create_info, allocator, framebuffer, fun_ptr_create)
    vks = Framebuffer(framebuffer[])
    finalizer((x -> vkDestroyFramebuffer(device, x, allocator, fun_ptr_destroy)), vks)
end

function CommandPool(device, create_info::CommandPoolCreateInfo; allocator = C_NULL)
    command_pool = Ref{VkCommandPool}()
    @check vkCreateCommandPool(device, create_info, allocator, command_pool)
    vks = CommandPool(command_pool[])
    finalizer((x -> vkDestroyCommandPool(device, x, allocator)), vks)
end

function CommandPool(
    device,
    create_info::CommandPoolCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    command_pool = Ref{VkCommandPool}()
    @check vkCreateCommandPool(device, create_info, allocator, command_pool, fun_ptr_create)
    vks = CommandPool(command_pool[])
    finalizer((x -> vkDestroyCommandPool(device, x, allocator, fun_ptr_destroy)), vks)
end

function SamplerYcbcrConversion(
    device,
    create_info::SamplerYcbcrConversionCreateInfo;
    allocator = C_NULL,
)
    ycbcr_conversion = Ref{VkSamplerYcbcrConversion}()
    @check vkCreateSamplerYcbcrConversion(device, create_info, allocator, ycbcr_conversion)
    vks = SamplerYcbcrConversion(ycbcr_conversion[])
    finalizer((x -> vkDestroySamplerYcbcrConversion(device, x, allocator)), vks)
end

function SamplerYcbcrConversion(
    device,
    create_info::SamplerYcbcrConversionCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    ycbcr_conversion = Ref{VkSamplerYcbcrConversion}()
    @check vkCreateSamplerYcbcrConversion(
        device,
        create_info,
        allocator,
        ycbcr_conversion,
        fun_ptr_create,
    )
    vks = SamplerYcbcrConversion(ycbcr_conversion[])
    finalizer(
        (x -> vkDestroySamplerYcbcrConversion(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function DescriptorUpdateTemplate(
    device,
    create_info::DescriptorUpdateTemplateCreateInfo;
    allocator = C_NULL,
)
    descriptor_update_template = Ref{VkDescriptorUpdateTemplate}()
    @check vkCreateDescriptorUpdateTemplate(
        device,
        create_info,
        allocator,
        descriptor_update_template,
    )
    vks = DescriptorUpdateTemplate(descriptor_update_template[])
    finalizer((x -> vkDestroyDescriptorUpdateTemplate(device, x, allocator)), vks)
end

function DescriptorUpdateTemplate(
    device,
    create_info::DescriptorUpdateTemplateCreateInfo,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    descriptor_update_template = Ref{VkDescriptorUpdateTemplate}()
    @check vkCreateDescriptorUpdateTemplate(
        device,
        create_info,
        allocator,
        descriptor_update_template,
        fun_ptr_create,
    )
    vks = DescriptorUpdateTemplate(descriptor_update_template[])
    finalizer(
        (x -> vkDestroyDescriptorUpdateTemplate(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function SurfaceKHR(instance, create_info::AndroidSurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateAndroidSurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::AndroidSurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateAndroidSurfaceKHR(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::DisplaySurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateDisplayPlaneSurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::DisplaySurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateDisplayPlaneSurfaceKHR(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::ViSurfaceCreateInfoNN; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateViSurfaceNN(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::ViSurfaceCreateInfoNN,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateViSurfaceNN(instance, create_info, allocator, surface, fun_ptr_create)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::WaylandSurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateWaylandSurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::WaylandSurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateWaylandSurfaceKHR(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::Win32SurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateWin32SurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::Win32SurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateWin32SurfaceKHR(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::XlibSurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateXlibSurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::XlibSurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateXlibSurfaceKHR(instance, create_info, allocator, surface, fun_ptr_create)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::XcbSurfaceCreateInfoKHR; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateXcbSurfaceKHR(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::XcbSurfaceCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateXcbSurfaceKHR(instance, create_info, allocator, surface, fun_ptr_create)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(
    instance,
    create_info::ImagePipeSurfaceCreateInfoFUCHSIA;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateImagePipeSurfaceFUCHSIA(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::ImagePipeSurfaceCreateInfoFUCHSIA,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateImagePipeSurfaceFUCHSIA(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(
    instance,
    create_info::StreamDescriptorSurfaceCreateInfoGGP;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateStreamDescriptorSurfaceGGP(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::StreamDescriptorSurfaceCreateInfoGGP,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateStreamDescriptorSurfaceGGP(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::IOSSurfaceCreateInfoMVK; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateIOSSurfaceMVK(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::IOSSurfaceCreateInfoMVK,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateIOSSurfaceMVK(instance, create_info, allocator, surface, fun_ptr_create)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::MacOSSurfaceCreateInfoMVK; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateMacOSSurfaceMVK(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::MacOSSurfaceCreateInfoMVK,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateMacOSSurfaceMVK(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::MetalSurfaceCreateInfoEXT; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateMetalSurfaceEXT(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::MetalSurfaceCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateMetalSurfaceEXT(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SurfaceKHR(instance, create_info::HeadlessSurfaceCreateInfoEXT; allocator = C_NULL)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateHeadlessSurfaceEXT(instance, create_info, allocator, surface)
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator)), vks)
end

function SurfaceKHR(
    instance,
    create_info::HeadlessSurfaceCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    surface = Ref{VkSurfaceKHR}()
    @check vkCreateHeadlessSurfaceEXT(
        instance,
        create_info,
        allocator,
        surface,
        fun_ptr_create,
    )
    vks = SurfaceKHR(surface[])
    finalizer((x -> vkDestroySurfaceKHR(instance, x, allocator, fun_ptr_destroy)), vks)
end

function SwapchainKHR(
    device,
    create_infos::AbstractArray{SwapchainCreateInfoKHR,1};
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    swapchains = Array{VkSwapchainKHR,1}(undef, create_info_count)
    @check vkCreateSharedSwapchainsKHR(
        device,
        swapchain_count,
        create_infos,
        allocator,
        swapchains,
    )
    vks = SwapchainKHR.(swapchains)
    finalizer.(Ref((x -> vkDestroySwapchainKHR(device, x, allocator))), vks)
end

function SwapchainKHR(
    device,
    create_infos::AbstractArray{SwapchainCreateInfoKHR,1},
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    create_info_count = length(create_infos)
    swapchains = Array{VkSwapchainKHR,1}(undef, create_info_count)
    @check vkCreateSharedSwapchainsKHR(
        device,
        swapchain_count,
        create_infos,
        allocator,
        swapchains,
        fun_ptr_create,
    )
    vks = SwapchainKHR.(swapchains)
    finalizer.(
        Ref((x -> vkDestroySwapchainKHR(device, x, allocator, fun_ptr_destroy))),
        vks,
    )
end

function SwapchainKHR(device, create_info::SwapchainCreateInfoKHR; allocator = C_NULL)
    swapchain = Ref{VkSwapchainKHR}()
    @check vkCreateSwapchainKHR(device, create_info, allocator, swapchain)
    vks = SwapchainKHR(swapchain[])
    finalizer((x -> vkDestroySwapchainKHR(device, x, allocator)), vks)
end

function SwapchainKHR(
    device,
    create_info::SwapchainCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    swapchain = Ref{VkSwapchainKHR}()
    @check vkCreateSwapchainKHR(device, create_info, allocator, swapchain, fun_ptr_create)
    vks = SwapchainKHR(swapchain[])
    finalizer((x -> vkDestroySwapchainKHR(device, x, allocator, fun_ptr_destroy)), vks)
end

function DisplayModeKHR(
    physical_device,
    display,
    create_info::DisplayModeCreateInfoKHR;
    allocator = C_NULL,
)
    mode = Ref{VkDisplayModeKHR}()
    @check vkCreateDisplayModeKHR(physical_device, display, create_info, allocator, mode)
    vks = DisplayModeKHR(mode[])
end

function DisplayModeKHR(
    physical_device,
    display,
    create_info::DisplayModeCreateInfoKHR,
    fun_ptr_create;
    allocator = C_NULL,
)
    mode = Ref{VkDisplayModeKHR}()
    @check vkCreateDisplayModeKHR(
        physical_device,
        display,
        create_info,
        allocator,
        mode,
        fun_ptr_create,
    )
    vks = DisplayModeKHR(mode[])
end

function DebugReportCallbackEXT(
    instance,
    create_info::DebugReportCallbackCreateInfoEXT;
    allocator = C_NULL,
)
    callback = Ref{VkDebugReportCallbackEXT}()
    @check vkCreateDebugReportCallbackEXT(instance, create_info, allocator, callback)
    vks = DebugReportCallbackEXT(callback[])
    finalizer((x -> vkDestroyDebugReportCallbackEXT(instance, x, allocator)), vks)
end

function DebugReportCallbackEXT(
    instance,
    create_info::DebugReportCallbackCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    callback = Ref{VkDebugReportCallbackEXT}()
    @check vkCreateDebugReportCallbackEXT(
        instance,
        create_info,
        allocator,
        callback,
        fun_ptr_create,
    )
    vks = DebugReportCallbackEXT(callback[])
    finalizer(
        (x -> vkDestroyDebugReportCallbackEXT(instance, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function DebugUtilsMessengerEXT(
    instance,
    create_info::DebugUtilsMessengerCreateInfoEXT;
    allocator = C_NULL,
)
    messenger = Ref{VkDebugUtilsMessengerEXT}()
    @check vkCreateDebugUtilsMessengerEXT(instance, create_info, allocator, messenger)
    vks = DebugUtilsMessengerEXT(messenger[])
    finalizer((x -> vkDestroyDebugUtilsMessengerEXT(instance, x, allocator)), vks)
end

function DebugUtilsMessengerEXT(
    instance,
    create_info::DebugUtilsMessengerCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    messenger = Ref{VkDebugUtilsMessengerEXT}()
    @check vkCreateDebugUtilsMessengerEXT(
        instance,
        create_info,
        allocator,
        messenger,
        fun_ptr_create,
    )
    vks = DebugUtilsMessengerEXT(messenger[])
    finalizer(
        (x -> vkDestroyDebugUtilsMessengerEXT(instance, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function ValidationCacheEXT(
    device,
    create_info::ValidationCacheCreateInfoEXT;
    allocator = C_NULL,
)
    validation_cache = Ref{VkValidationCacheEXT}()
    @check vkCreateValidationCacheEXT(device, create_info, allocator, validation_cache)
    vks = ValidationCacheEXT(validation_cache[])
    finalizer((x -> vkDestroyValidationCacheEXT(device, x, allocator)), vks)
end

function ValidationCacheEXT(
    device,
    create_info::ValidationCacheCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    validation_cache = Ref{VkValidationCacheEXT}()
    @check vkCreateValidationCacheEXT(
        device,
        create_info,
        allocator,
        validation_cache,
        fun_ptr_create,
    )
    vks = ValidationCacheEXT(validation_cache[])
    finalizer(
        (x -> vkDestroyValidationCacheEXT(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function AccelerationStructureKHR(
    device,
    create_info::AccelerationStructureCreateInfoKHR;
    allocator = C_NULL,
)
    acceleration_structure = Ref{VkAccelerationStructureKHR}()
    @check vkCreateAccelerationStructureKHR(
        device,
        create_info,
        allocator,
        acceleration_structure,
    )
    vks = AccelerationStructureKHR(acceleration_structure[])
    finalizer((x -> vkDestroyAccelerationStructureKHR(device, x, allocator)), vks)
end

function AccelerationStructureKHR(
    device,
    create_info::AccelerationStructureCreateInfoKHR,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    acceleration_structure = Ref{VkAccelerationStructureKHR}()
    @check vkCreateAccelerationStructureKHR(
        device,
        create_info,
        allocator,
        acceleration_structure,
        fun_ptr_create,
    )
    vks = AccelerationStructureKHR(acceleration_structure[])
    finalizer(
        (x -> vkDestroyAccelerationStructureKHR(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function IndirectCommandsLayoutNV(
    device,
    create_info::IndirectCommandsLayoutCreateInfoNV;
    allocator = C_NULL,
)
    indirect_commands_layout = Ref{VkIndirectCommandsLayoutNV}()
    @check vkCreateIndirectCommandsLayoutNV(
        device,
        create_info,
        allocator,
        indirect_commands_layout,
    )
    vks = IndirectCommandsLayoutNV(indirect_commands_layout[])
    finalizer((x -> vkDestroyIndirectCommandsLayoutNV(device, x, allocator)), vks)
end

function IndirectCommandsLayoutNV(
    device,
    create_info::IndirectCommandsLayoutCreateInfoNV,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    indirect_commands_layout = Ref{VkIndirectCommandsLayoutNV}()
    @check vkCreateIndirectCommandsLayoutNV(
        device,
        create_info,
        allocator,
        indirect_commands_layout,
        fun_ptr_create,
    )
    vks = IndirectCommandsLayoutNV(indirect_commands_layout[])
    finalizer(
        (x -> vkDestroyIndirectCommandsLayoutNV(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function PrivateDataSlotEXT(
    device,
    create_info::PrivateDataSlotCreateInfoEXT;
    allocator = C_NULL,
)
    private_data_slot = Ref{VkPrivateDataSlotEXT}()
    @check vkCreatePrivateDataSlotEXT(device, create_info, allocator, private_data_slot)
    vks = PrivateDataSlotEXT(private_data_slot[])
    finalizer((x -> vkDestroyPrivateDataSlotEXT(device, x, allocator)), vks)
end

function PrivateDataSlotEXT(
    device,
    create_info::PrivateDataSlotCreateInfoEXT,
    fun_ptr_create,
    fun_ptr_destroy;
    allocator = C_NULL,
)
    private_data_slot = Ref{VkPrivateDataSlotEXT}()
    @check vkCreatePrivateDataSlotEXT(
        device,
        create_info,
        allocator,
        private_data_slot,
        fun_ptr_create,
    )
    vks = PrivateDataSlotEXT(private_data_slot[])
    finalizer(
        (x -> vkDestroyPrivateDataSlotEXT(device, x, allocator, fun_ptr_destroy)),
        vks,
    )
end

function enumerate_physical_devices(instance)
    physical_device_count = Ref{UInt32}(0)
    @check vkEnumeratePhysicalDevices(instance, physical_device_count, C_NULL)
    physical_devices = Array{VkPhysicalDevice}(undef, physical_device_count[])
    @check vkEnumeratePhysicalDevices(instance, physical_device_count, physical_devices)
    PhysicalDevice.(physical_devices)
end

"""
Generic definition
"""
function get_physical_device_features(physical_device)
    pFeatures = Ref{VkPhysicalDeviceFeatures}()
    vkGetPhysicalDeviceFeatures(physical_device, pFeatures)
    PhysicalDeviceFeatures(pFeatures[])
end

"""
Generic definition
"""
function get_physical_device_format_properties(physical_device, format)
    pFormatProperties = Ref{VkFormatProperties}()
    vkGetPhysicalDeviceFormatProperties(physical_device, format, pFormatProperties)
    FormatProperties(pFormatProperties[])
end

"""
Generic definition
"""
function get_physical_device_image_format_properties(
    physical_device,
    format,
    type,
    tiling,
    usage;
    flags = 0,
)
    pImageFormatProperties = Ref{VkImageFormatProperties}()
    @check vkGetPhysicalDeviceImageFormatProperties(
        physical_device,
        format,
        type,
        tiling,
        usage,
        flags,
        pImageFormatProperties,
    )
    ImageFormatProperties(pImageFormatProperties[])
end

"""
Generic definition
"""
function get_physical_device_properties(physical_device)
    pProperties = Ref{VkPhysicalDeviceProperties}()
    vkGetPhysicalDeviceProperties(physical_device, pProperties)
    PhysicalDeviceProperties(pProperties[])
end

function get_physical_device_queue_family_properties(physical_device)
    queue_family_property_count = Ref{UInt32}(0)
    vkGetPhysicalDeviceQueueFamilyProperties(
        physical_device,
        queue_family_property_count,
        C_NULL,
    )
    queue_family_properties =
        Array{VkQueueFamilyProperties}(undef, queue_family_property_count[])
    vkGetPhysicalDeviceQueueFamilyProperties(
        physical_device,
        queue_family_property_count,
        queue_family_properties,
    )
    QueueFamilyProperties.(queue_family_properties)
end

"""
Generic definition
"""
function get_physical_device_memory_properties(physical_device)
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties}()
    vkGetPhysicalDeviceMemoryProperties(physical_device, pMemoryProperties)
    PhysicalDeviceMemoryProperties(pMemoryProperties[])
end

"""
Generic definition
"""
function get_instance_proc_addr(name; instance = C_NULL)
    vkGetInstanceProcAddr(instance, name)
end

"""
Generic definition
"""
function get_device_proc_addr(device, name)
    vkGetDeviceProcAddr(device, name)
end

function enumerate_instance_extension_properties(; layer_name = C_NULL)
    property_count = Ref{UInt32}(0)
    @check vkEnumerateInstanceExtensionProperties(layer_name, property_count, C_NULL)
    properties = Array{VkExtensionProperties}(undef, property_count[])
    @check vkEnumerateInstanceExtensionProperties(layer_name, property_count, properties)
    ExtensionProperties.(properties)
end

function enumerate_device_extension_properties(physical_device; layer_name = C_NULL)
    property_count = Ref{UInt32}(0)
    @check vkEnumerateDeviceExtensionProperties(
        physical_device,
        layer_name,
        property_count,
        C_NULL,
    )
    properties = Array{VkExtensionProperties}(undef, property_count[])
    @check vkEnumerateDeviceExtensionProperties(
        physical_device,
        layer_name,
        property_count,
        properties,
    )
    ExtensionProperties.(properties)
end

function enumerate_instance_layer_properties()
    property_count = Ref{UInt32}(0)
    @check vkEnumerateInstanceLayerProperties(property_count, C_NULL)
    properties = Array{VkLayerProperties}(undef, property_count[])
    @check vkEnumerateInstanceLayerProperties(property_count, properties)
    LayerProperties.(properties)
end

function enumerate_device_layer_properties(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkEnumerateDeviceLayerProperties(physical_device, property_count, C_NULL)
    properties = Array{VkLayerProperties}(undef, property_count[])
    @check vkEnumerateDeviceLayerProperties(physical_device, property_count, properties)
    LayerProperties.(properties)
end

"""
Generic definition
"""
function get_device_queue(device, queue_family_index, queue_index)
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue(device, queue_family_index, queue_index, pQueue)
    Queue(pQueue[])
end

"""
Generic definition
"""
function queue_submit(queue, submits; fence = C_NULL)
    _submitCount = pointer_length(submits)
    @check vkQueueSubmit(queue, _submitCount, submits, fence)
end

"""
Generic definition
"""
function queue_wait_idle(queue)
    @check vkQueueWaitIdle(queue)
end

"""
Generic definition
"""
function device_wait_idle(device)
    @check vkDeviceWaitIdle(device)
end

"""
Generic definition
"""
function allocate_memory(device, allocate_info; allocator = C_NULL)
    pMemory = Ref{VkDeviceMemory}()
    @check vkAllocateMemory(device, allocate_info, allocator, pMemory)
    DeviceMemory(pMemory[])
end

"""
Generic definition
"""
function free_memory(device; memory = C_NULL, allocator = C_NULL)
    vkFreeMemory(device, memory, allocator)
end

"""
Generic definition
"""
function map_memory(device, memory, offset, size; flags = 0)
    ppData = Ref{Cvoid}()
    @check vkMapMemory(device, memory, offset, size, flags, ppData)
    ppData[]
end

"""
Generic definition
"""
function unmap_memory(device, memory)
    vkUnmapMemory(device, memory)
end

"""
Generic definition
"""
function flush_mapped_memory_ranges(device, memory_ranges)
    _memoryRangeCount = pointer_length(memory_ranges)
    @check vkFlushMappedMemoryRanges(device, _memoryRangeCount, memory_ranges)
end

"""
Generic definition
"""
function invalidate_mapped_memory_ranges(device, memory_ranges)
    _memoryRangeCount = pointer_length(memory_ranges)
    @check vkInvalidateMappedMemoryRanges(device, _memoryRangeCount, memory_ranges)
end

"""
Generic definition
"""
function get_device_memory_commitment(device, memory)
    pCommittedMemoryInBytes = Ref{VkDeviceSize}()
    vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes)
    pCommittedMemoryInBytes[]
end

"""
Generic definition
"""
function bind_buffer_memory(device, buffer, memory, memory_offset)
    @check vkBindBufferMemory(device, buffer, memory, memory_offset)
end

"""
Generic definition
"""
function bind_image_memory(device, image, memory, memory_offset)
    @check vkBindImageMemory(device, image, memory, memory_offset)
end

"""
Generic definition
"""
function get_buffer_memory_requirements(device, buffer)
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements)
    MemoryRequirements(pMemoryRequirements[])
end

"""
Generic definition
"""
function get_image_memory_requirements(device, image)
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetImageMemoryRequirements(device, image, pMemoryRequirements)
    MemoryRequirements(pMemoryRequirements[])
end

function get_image_sparse_memory_requirements(device, image)
    sparse_memory_requirement_count = Ref{UInt32}(0)
    vkGetImageSparseMemoryRequirements(
        device,
        image,
        sparse_memory_requirement_count,
        C_NULL,
    )
    sparse_memory_requirements =
        Array{VkSparseImageMemoryRequirements}(undef, sparse_memory_requirement_count[])
    vkGetImageSparseMemoryRequirements(
        device,
        image,
        sparse_memory_requirement_count,
        sparse_memory_requirements,
    )
    SparseImageMemoryRequirements.(sparse_memory_requirements)
end

function get_physical_device_sparse_image_format_properties(
    physical_device,
    format,
    type,
    samples,
    usage,
    tiling,
)
    property_count = Ref{UInt32}(0)
    vkGetPhysicalDeviceSparseImageFormatProperties(
        physical_device,
        format,
        type,
        samples,
        usage,
        tiling,
        property_count,
        C_NULL,
    )
    properties = Array{VkSparseImageFormatProperties}(undef, property_count[])
    vkGetPhysicalDeviceSparseImageFormatProperties(
        physical_device,
        format,
        type,
        samples,
        usage,
        tiling,
        property_count,
        properties,
    )
    SparseImageFormatProperties.(properties)
end

"""
Generic definition
"""
function queue_bind_sparse(queue, bind_info; fence = C_NULL)
    _bindInfoCount = pointer_length(bind_info)
    @check vkQueueBindSparse(queue, _bindInfoCount, bind_info, fence)
end

"""
Generic definition
"""
function reset_fences(device, fences)
    _fenceCount = pointer_length(fences)
    @check vkResetFences(device, _fenceCount, fences)
end

"""
Generic definition
"""
function get_fence_status(device, fence)
    @check vkGetFenceStatus(device, fence)
end

"""
Generic definition
"""
function wait_for_fences(device, fences, wait_all, timeout)
    _fenceCount = pointer_length(fences)
    @check vkWaitForFences(device, _fenceCount, fences, wait_all, timeout)
end

"""
Generic definition
"""
function get_event_status(device, event)
    @check vkGetEventStatus(device, event)
end

"""
Generic definition
"""
function set_event(device, event)
    @check vkSetEvent(device, event)
end

"""
Generic definition
"""
function reset_event(device, event)
    @check vkResetEvent(device, event)
end

"""
Generic definition
"""
function get_query_pool_results(
    device,
    query_pool,
    first_query,
    query_count,
    data,
    stride;
    flags = 0,
)
    _dataSize = pointer_length(data)
    @check vkGetQueryPoolResults(
        device,
        query_pool,
        first_query,
        query_count,
        _dataSize,
        data,
        stride,
        flags,
    )
end

"""
Generic definition
"""
function get_image_subresource_layout(device, image, subresource)
    pLayout = Ref{VkSubresourceLayout}()
    vkGetImageSubresourceLayout(device, image, subresource, pLayout)
    SubresourceLayout(pLayout[])
end

function get_pipeline_cache_data(device, pipeline_cache)
    data_size = Ref{UInt32}(0)
    @check vkGetPipelineCacheData(device, pipeline_cache, C_NULL_size, C_NULL)
    data = Array{void}(undef, data_size[])
    @check vkGetPipelineCacheData(device, pipeline_cache, data_size, data)
    data
end

"""
Generic definition
"""
function merge_pipeline_caches(device, dst_cache, src_caches)
    _srcCacheCount = pointer_length(src_caches)
    @check vkMergePipelineCaches(device, dst_cache, _srcCacheCount, src_caches)
end

"""
Generic definition
"""
function reset_descriptor_pool(device, descriptor_pool; flags = 0)
    @check vkResetDescriptorPool(device, descriptor_pool, flags)
end

"""
Generic definition
"""
function allocate_descriptor_sets(device, allocate_info)
    pDescriptorSets = Ref{VkDescriptorSet}()
    @check vkAllocateDescriptorSets(device, allocate_info, pDescriptorSets)
    DescriptorSet(pDescriptorSets[])
end

"""
Generic definition
"""
function free_descriptor_sets(device, descriptor_pool, descriptor_sets)
    _descriptorSetCount = pointer_length(descriptor_sets)
    @check vkFreeDescriptorSets(
        device,
        descriptor_pool,
        _descriptorSetCount,
        descriptor_sets,
    )
end

"""
Generic definition
"""
function update_descriptor_sets(device, descriptor_writes, descriptor_copies)
    _descriptorWriteCount = pointer_length(descriptor_writes)
    _descriptorCopyCount = pointer_length(descriptor_copies)
    vkUpdateDescriptorSets(
        device,
        _descriptorWriteCount,
        descriptor_writes,
        _descriptorCopyCount,
        descriptor_copies,
    )
end

"""
Generic definition
"""
function get_render_area_granularity(device, render_pass)
    pGranularity = Ref{VkExtent2D}()
    vkGetRenderAreaGranularity(device, render_pass, pGranularity)
    Extent2D(pGranularity[])
end

"""
Generic definition
"""
function reset_command_pool(device, command_pool; flags = 0)
    @check vkResetCommandPool(device, command_pool, flags)
end

"""
Generic definition
"""
function allocate_command_buffers(device, allocate_info)
    pCommandBuffers = Ref{VkCommandBuffer}()
    @check vkAllocateCommandBuffers(device, allocate_info, pCommandBuffers)
    CommandBuffer(pCommandBuffers[])
end

"""
Generic definition
"""
function free_command_buffers(device, command_pool, command_buffers)
    _commandBufferCount = pointer_length(command_buffers)
    vkFreeCommandBuffers(device, command_pool, _commandBufferCount, command_buffers)
end

"""
Generic definition
"""
function begin_command_buffer(command_buffer, begin_info)
    @check vkBeginCommandBuffer(command_buffer, begin_info)
end

"""
Generic definition
"""
function end_command_buffer(command_buffer)
    @check vkEndCommandBuffer(command_buffer)
end

"""
Generic definition
"""
function reset_command_buffer(command_buffer; flags = 0)
    @check vkResetCommandBuffer(command_buffer, flags)
end

"""
Generic definition
"""
function cmd_bind_pipeline(command_buffer, pipeline_bind_point, pipeline)
    vkCmdBindPipeline(command_buffer, pipeline_bind_point, pipeline)
end

"""
Generic definition
"""
function cmd_set_viewport(command_buffer, first_viewport, viewports)
    _viewportCount = pointer_length(viewports)
    vkCmdSetViewport(command_buffer, first_viewport, _viewportCount, viewports)
end

"""
Generic definition
"""
function cmd_set_scissor(command_buffer, first_scissor, scissors)
    _scissorCount = pointer_length(scissors)
    vkCmdSetScissor(command_buffer, first_scissor, _scissorCount, scissors)
end

"""
Generic definition
"""
function cmd_set_line_width(command_buffer, line_width)
    vkCmdSetLineWidth(command_buffer, line_width)
end

"""
Generic definition
"""
function cmd_set_depth_bias(
    command_buffer,
    depth_bias_constant_factor,
    depth_bias_clamp,
    depth_bias_slope_factor,
)
    vkCmdSetDepthBias(
        command_buffer,
        depth_bias_constant_factor,
        depth_bias_clamp,
        depth_bias_slope_factor,
    )
end

"""
Generic definition
"""
function cmd_set_blend_constants(command_buffer, blend_constants)
    vkCmdSetBlendConstants(command_buffer, blend_constants)
end

"""
Generic definition
"""
function cmd_set_depth_bounds(command_buffer, min_depth_bounds, max_depth_bounds)
    vkCmdSetDepthBounds(command_buffer, min_depth_bounds, max_depth_bounds)
end

"""
Generic definition
"""
function cmd_set_stencil_compare_mask(command_buffer, face_mask, compare_mask)
    vkCmdSetStencilCompareMask(command_buffer, face_mask, compare_mask)
end

"""
Generic definition
"""
function cmd_set_stencil_write_mask(command_buffer, face_mask, write_mask)
    vkCmdSetStencilWriteMask(command_buffer, face_mask, write_mask)
end

"""
Generic definition
"""
function cmd_set_stencil_reference(command_buffer, face_mask, reference)
    vkCmdSetStencilReference(command_buffer, face_mask, reference)
end

"""
Generic definition
"""
function cmd_bind_descriptor_sets(
    command_buffer,
    pipeline_bind_point,
    layout,
    first_set,
    descriptor_sets,
    dynamic_offsets,
)
    _descriptorSetCount = pointer_length(descriptor_sets)
    _dynamicOffsetCount = pointer_length(dynamic_offsets)
    vkCmdBindDescriptorSets(
        command_buffer,
        pipeline_bind_point,
        layout,
        first_set,
        _descriptorSetCount,
        descriptor_sets,
        _dynamicOffsetCount,
        dynamic_offsets,
    )
end

"""
Generic definition
"""
function cmd_bind_index_buffer(command_buffer, buffer, offset, index_type)
    vkCmdBindIndexBuffer(command_buffer, buffer, offset, index_type)
end

"""
Generic definition
"""
function cmd_bind_vertex_buffers(command_buffer, first_binding, buffers, offsets)
    _bindingCount = pointer_length(buffers)
    vkCmdBindVertexBuffers(command_buffer, first_binding, _bindingCount, buffers, offsets)
end

"""
Generic definition
"""
function cmd_draw(
    command_buffer,
    vertex_count,
    instance_count,
    first_vertex,
    first_instance,
)
    vkCmdDraw(command_buffer, vertex_count, instance_count, first_vertex, first_instance)
end

"""
Generic definition
"""
function cmd_draw_indexed(
    command_buffer,
    index_count,
    instance_count,
    first_index,
    vertex_offset,
    first_instance,
)
    vkCmdDrawIndexed(
        command_buffer,
        index_count,
        instance_count,
        first_index,
        vertex_offset,
        first_instance,
    )
end

"""
Generic definition
"""
function cmd_draw_indirect(command_buffer, buffer, offset, draw_count, stride)
    vkCmdDrawIndirect(command_buffer, buffer, offset, draw_count, stride)
end

"""
Generic definition
"""
function cmd_draw_indexed_indirect(command_buffer, buffer, offset, draw_count, stride)
    vkCmdDrawIndexedIndirect(command_buffer, buffer, offset, draw_count, stride)
end

"""
Generic definition
"""
function cmd_dispatch(command_buffer, group_count_x, group_count_y, group_count_z)
    vkCmdDispatch(command_buffer, group_count_x, group_count_y, group_count_z)
end

"""
Generic definition
"""
function cmd_dispatch_indirect(command_buffer, buffer, offset)
    vkCmdDispatchIndirect(command_buffer, buffer, offset)
end

"""
Generic definition
"""
function cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions)
    _regionCount = pointer_length(regions)
    vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, _regionCount, regions)
end

"""
Generic definition
"""
function cmd_copy_image(
    command_buffer,
    src_image,
    src_image_layout,
    dst_image,
    dst_image_layout,
    regions,
)
    _regionCount = pointer_length(regions)
    vkCmdCopyImage(
        command_buffer,
        src_image,
        src_image_layout,
        dst_image,
        dst_image_layout,
        _regionCount,
        regions,
    )
end

"""
Generic definition
"""
function cmd_blit_image(
    command_buffer,
    src_image,
    src_image_layout,
    dst_image,
    dst_image_layout,
    regions,
    filter,
)
    _regionCount = pointer_length(regions)
    vkCmdBlitImage(
        command_buffer,
        src_image,
        src_image_layout,
        dst_image,
        dst_image_layout,
        _regionCount,
        regions,
        filter,
    )
end

"""
Generic definition
"""
function cmd_copy_buffer_to_image(
    command_buffer,
    src_buffer,
    dst_image,
    dst_image_layout,
    regions,
)
    _regionCount = pointer_length(regions)
    vkCmdCopyBufferToImage(
        command_buffer,
        src_buffer,
        dst_image,
        dst_image_layout,
        _regionCount,
        regions,
    )
end

"""
Generic definition
"""
function cmd_copy_image_to_buffer(
    command_buffer,
    src_image,
    src_image_layout,
    dst_buffer,
    regions,
)
    _regionCount = pointer_length(regions)
    vkCmdCopyImageToBuffer(
        command_buffer,
        src_image,
        src_image_layout,
        dst_buffer,
        _regionCount,
        regions,
    )
end

"""
Generic definition
"""
function cmd_update_buffer(command_buffer, dst_buffer, dst_offset, data)
    _dataSize = pointer_length(data)
    vkCmdUpdateBuffer(command_buffer, dst_buffer, dst_offset, _dataSize, data)
end

"""
Generic definition
"""
function cmd_fill_buffer(command_buffer, dst_buffer, dst_offset, size, data)
    vkCmdFillBuffer(command_buffer, dst_buffer, dst_offset, size, data)
end

"""
Generic definition
"""
function cmd_clear_color_image(command_buffer, image, image_layout, color, ranges)
    _rangeCount = pointer_length(ranges)
    vkCmdClearColorImage(command_buffer, image, image_layout, color, _rangeCount, ranges)
end

"""
Generic definition
"""
function cmd_clear_depth_stencil_image(
    command_buffer,
    image,
    image_layout,
    depth_stencil,
    ranges,
)
    _rangeCount = pointer_length(ranges)
    vkCmdClearDepthStencilImage(
        command_buffer,
        image,
        image_layout,
        depth_stencil,
        _rangeCount,
        ranges,
    )
end

"""
Generic definition
"""
function cmd_clear_attachments(command_buffer, attachments, rects)
    _attachmentCount = pointer_length(attachments)
    _rectCount = pointer_length(rects)
    vkCmdClearAttachments(command_buffer, _attachmentCount, attachments, _rectCount, rects)
end

"""
Generic definition
"""
function cmd_resolve_image(
    command_buffer,
    src_image,
    src_image_layout,
    dst_image,
    dst_image_layout,
    regions,
)
    _regionCount = pointer_length(regions)
    vkCmdResolveImage(
        command_buffer,
        src_image,
        src_image_layout,
        dst_image,
        dst_image_layout,
        _regionCount,
        regions,
    )
end

"""
Generic definition
"""
function cmd_set_event(command_buffer, event, stage_mask)
    vkCmdSetEvent(command_buffer, event, stage_mask)
end

"""
Generic definition
"""
function cmd_reset_event(command_buffer, event, stage_mask)
    vkCmdResetEvent(command_buffer, event, stage_mask)
end

"""
Generic definition
"""
function cmd_wait_events(
    command_buffer,
    events,
    src_stage_mask,
    dst_stage_mask,
    memory_barriers,
    buffer_memory_barriers,
    image_memory_barriers,
)
    _eventCount = pointer_length(events)
    _memoryBarrierCount = pointer_length(memory_barriers)
    _bufferMemoryBarrierCount = pointer_length(buffer_memory_barriers)
    _imageMemoryBarrierCount = pointer_length(image_memory_barriers)
    vkCmdWaitEvents(
        command_buffer,
        _eventCount,
        events,
        src_stage_mask,
        dst_stage_mask,
        _memoryBarrierCount,
        memory_barriers,
        _bufferMemoryBarrierCount,
        buffer_memory_barriers,
        _imageMemoryBarrierCount,
        image_memory_barriers,
    )
end

"""
Generic definition
"""
function cmd_pipeline_barrier(
    command_buffer,
    src_stage_mask,
    dst_stage_mask,
    memory_barriers,
    buffer_memory_barriers,
    image_memory_barriers;
    dependency_flags = 0,
)
    _memoryBarrierCount = pointer_length(memory_barriers)
    _bufferMemoryBarrierCount = pointer_length(buffer_memory_barriers)
    _imageMemoryBarrierCount = pointer_length(image_memory_barriers)
    vkCmdPipelineBarrier(
        command_buffer,
        src_stage_mask,
        dst_stage_mask,
        dependency_flags,
        _memoryBarrierCount,
        memory_barriers,
        _bufferMemoryBarrierCount,
        buffer_memory_barriers,
        _imageMemoryBarrierCount,
        image_memory_barriers,
    )
end

"""
Generic definition
"""
function cmd_begin_query(command_buffer, query_pool, query; flags = 0)
    vkCmdBeginQuery(command_buffer, query_pool, query, flags)
end

"""
Generic definition
"""
function cmd_end_query(command_buffer, query_pool, query)
    vkCmdEndQuery(command_buffer, query_pool, query)
end

"""
Generic definition
"""
function cmd_reset_query_pool(command_buffer, query_pool, first_query, query_count)
    vkCmdResetQueryPool(command_buffer, query_pool, first_query, query_count)
end

"""
Generic definition
"""
function cmd_write_timestamp(command_buffer, pipeline_stage, query_pool, query)
    vkCmdWriteTimestamp(command_buffer, pipeline_stage, query_pool, query)
end

"""
Generic definition
"""
function cmd_copy_query_pool_results(
    command_buffer,
    query_pool,
    first_query,
    query_count,
    dst_buffer,
    dst_offset,
    stride;
    flags = 0,
)
    vkCmdCopyQueryPoolResults(
        command_buffer,
        query_pool,
        first_query,
        query_count,
        dst_buffer,
        dst_offset,
        stride,
        flags,
    )
end

"""
Generic definition
"""
function cmd_push_constants(command_buffer, layout, stage_flags, offset, values)
    _size = pointer_length(values)
    vkCmdPushConstants(command_buffer, layout, stage_flags, offset, _size, values)
end

"""
Generic definition
"""
function cmd_begin_render_pass(command_buffer, render_pass_begin, contents)
    vkCmdBeginRenderPass(command_buffer, render_pass_begin, contents)
end

"""
Generic definition
"""
function cmd_next_subpass(command_buffer, contents)
    vkCmdNextSubpass(command_buffer, contents)
end

"""
Generic definition
"""
function cmd_end_render_pass(command_buffer)
    vkCmdEndRenderPass(command_buffer)
end

"""
Generic definition
"""
function cmd_execute_commands(command_buffer, command_buffers)
    _commandBufferCount = pointer_length(command_buffers)
    vkCmdExecuteCommands(command_buffer, _commandBufferCount, command_buffers)
end

"""
Generic definition
"""
function enumerate_instance_version()
    pApiVersion = Ref{UInt32}()
    @check vkEnumerateInstanceVersion(pApiVersion)
    pApiVersion[]
end

"""
Generic definition
"""
function bind_buffer_memory_2(device, bind_infos)
    _bindInfoCount = pointer_length(bind_infos)
    @check vkBindBufferMemory2(device, _bindInfoCount, bind_infos)
end

"""
Generic definition
"""
function bind_image_memory_2(device, bind_infos)
    _bindInfoCount = pointer_length(bind_infos)
    @check vkBindImageMemory2(device, _bindInfoCount, bind_infos)
end

"""
Generic definition
"""
function get_device_group_peer_memory_features(
    device,
    heap_index,
    local_device_index,
    remote_device_index,
)
    pPeerMemoryFeatures = Ref{VkPeerMemoryFeatureFlags}()
    vkGetDeviceGroupPeerMemoryFeatures(
        device,
        heap_index,
        local_device_index,
        remote_device_index,
        pPeerMemoryFeatures,
    )
    pPeerMemoryFeatures[]
end

"""
Generic definition
"""
function cmd_set_device_mask(command_buffer, device_mask)
    vkCmdSetDeviceMask(command_buffer, device_mask)
end

"""
Generic definition
"""
function cmd_dispatch_base(
    command_buffer,
    base_group_x,
    base_group_y,
    base_group_z,
    group_count_x,
    group_count_y,
    group_count_z,
)
    vkCmdDispatchBase(
        command_buffer,
        base_group_x,
        base_group_y,
        base_group_z,
        group_count_x,
        group_count_y,
        group_count_z,
    )
end

function enumerate_physical_device_groups(instance)
    physical_device_group_count = Ref{UInt32}(0)
    @check vkEnumeratePhysicalDeviceGroups(instance, physical_device_group_count, C_NULL)
    physical_device_group_properties =
        Array{VkPhysicalDeviceGroupProperties}(undef, physical_device_group_count[])
    @check vkEnumeratePhysicalDeviceGroups(
        instance,
        physical_device_group_count,
        physical_device_group_properties,
    )
    PhysicalDeviceGroupProperties.(physical_device_group_properties)
end

"""
Generic definition
"""
function get_image_memory_requirements_2(device, info)
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetImageMemoryRequirements2(device, info, pMemoryRequirements)
    MemoryRequirements2(pMemoryRequirements[])
end

"""
Generic definition
"""
function get_buffer_memory_requirements_2(device, info)
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetBufferMemoryRequirements2(device, info, pMemoryRequirements)
    MemoryRequirements2(pMemoryRequirements[])
end

function get_image_sparse_memory_requirements_2(device, info)
    sparse_memory_requirement_count = Ref{UInt32}(0)
    vkGetImageSparseMemoryRequirements2(
        device,
        info,
        sparse_memory_requirement_count,
        C_NULL,
    )
    sparse_memory_requirements =
        Array{VkSparseImageMemoryRequirements2}(undef, sparse_memory_requirement_count[])
    vkGetImageSparseMemoryRequirements2(
        device,
        info,
        sparse_memory_requirement_count,
        sparse_memory_requirements,
    )
    SparseImageMemoryRequirements2.(sparse_memory_requirements)
end

"""
Generic definition
"""
function get_physical_device_features_2(physical_device)
    pFeatures = Ref{VkPhysicalDeviceFeatures2}()
    vkGetPhysicalDeviceFeatures2(physical_device, pFeatures)
    PhysicalDeviceFeatures2(pFeatures[])
end

"""
Generic definition
"""
function get_physical_device_properties_2(physical_device)
    pProperties = Ref{VkPhysicalDeviceProperties2}()
    vkGetPhysicalDeviceProperties2(physical_device, pProperties)
    PhysicalDeviceProperties2(pProperties[])
end

"""
Generic definition
"""
function get_physical_device_format_properties_2(physical_device, format)
    pFormatProperties = Ref{VkFormatProperties2}()
    vkGetPhysicalDeviceFormatProperties2(physical_device, format, pFormatProperties)
    FormatProperties2(pFormatProperties[])
end

"""
Generic definition
"""
function get_physical_device_image_format_properties_2(physical_device, image_format_info)
    pImageFormatProperties = Ref{VkImageFormatProperties2}()
    @check vkGetPhysicalDeviceImageFormatProperties2(
        physical_device,
        image_format_info,
        pImageFormatProperties,
    )
    ImageFormatProperties2(pImageFormatProperties[])
end

function get_physical_device_queue_family_properties_2(physical_device)
    queue_family_property_count = Ref{UInt32}(0)
    vkGetPhysicalDeviceQueueFamilyProperties2(
        physical_device,
        queue_family_property_count,
        C_NULL,
    )
    queue_family_properties =
        Array{VkQueueFamilyProperties2}(undef, queue_family_property_count[])
    vkGetPhysicalDeviceQueueFamilyProperties2(
        physical_device,
        queue_family_property_count,
        queue_family_properties,
    )
    QueueFamilyProperties2.(queue_family_properties)
end

"""
Generic definition
"""
function get_physical_device_memory_properties_2(physical_device)
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties2}()
    vkGetPhysicalDeviceMemoryProperties2(physical_device, pMemoryProperties)
    PhysicalDeviceMemoryProperties2(pMemoryProperties[])
end

function get_physical_device_sparse_image_format_properties_2(physical_device, format_info)
    property_count = Ref{UInt32}(0)
    vkGetPhysicalDeviceSparseImageFormatProperties2(
        physical_device,
        format_info,
        property_count,
        C_NULL,
    )
    properties = Array{VkSparseImageFormatProperties2}(undef, property_count[])
    vkGetPhysicalDeviceSparseImageFormatProperties2(
        physical_device,
        format_info,
        property_count,
        properties,
    )
    SparseImageFormatProperties2.(properties)
end

"""
Generic definition
"""
function trim_command_pool(device, command_pool; flags = 0)
    vkTrimCommandPool(device, command_pool, flags)
end

"""
Generic definition
"""
function get_device_queue_2(device, queue_info)
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue2(device, queue_info, pQueue)
    Queue(pQueue[])
end

"""
Generic definition
"""
function update_descriptor_set_with_template(
    device,
    descriptor_set,
    descriptor_update_template,
    data,
)
    vkUpdateDescriptorSetWithTemplate(
        device,
        descriptor_set,
        descriptor_update_template,
        data,
    )
end

"""
Generic definition
"""
function get_physical_device_external_buffer_properties(
    physical_device,
    external_buffer_info,
)
    pExternalBufferProperties = Ref{VkExternalBufferProperties}()
    vkGetPhysicalDeviceExternalBufferProperties(
        physical_device,
        external_buffer_info,
        pExternalBufferProperties,
    )
    ExternalBufferProperties(pExternalBufferProperties[])
end

"""
Generic definition
"""
function get_physical_device_external_fence_properties(physical_device, external_fence_info)
    pExternalFenceProperties = Ref{VkExternalFenceProperties}()
    vkGetPhysicalDeviceExternalFenceProperties(
        physical_device,
        external_fence_info,
        pExternalFenceProperties,
    )
    ExternalFenceProperties(pExternalFenceProperties[])
end

"""
Generic definition
"""
function get_physical_device_external_semaphore_properties(
    physical_device,
    external_semaphore_info,
)
    pExternalSemaphoreProperties = Ref{VkExternalSemaphoreProperties}()
    vkGetPhysicalDeviceExternalSemaphoreProperties(
        physical_device,
        external_semaphore_info,
        pExternalSemaphoreProperties,
    )
    ExternalSemaphoreProperties(pExternalSemaphoreProperties[])
end

"""
Generic definition
"""
function get_descriptor_set_layout_support(device, create_info)
    pSupport = Ref{VkDescriptorSetLayoutSupport}()
    vkGetDescriptorSetLayoutSupport(device, create_info, pSupport)
    DescriptorSetLayoutSupport(pSupport[])
end

"""
Generic definition
"""
function cmd_draw_indirect_count(
    command_buffer,
    buffer,
    offset,
    count_buffer,
    count_buffer_offset,
    max_draw_count,
    stride,
)
    vkCmdDrawIndirectCount(
        command_buffer,
        buffer,
        offset,
        count_buffer,
        count_buffer_offset,
        max_draw_count,
        stride,
    )
end

"""
Generic definition
"""
function cmd_draw_indexed_indirect_count(
    command_buffer,
    buffer,
    offset,
    count_buffer,
    count_buffer_offset,
    max_draw_count,
    stride,
)
    vkCmdDrawIndexedIndirectCount(
        command_buffer,
        buffer,
        offset,
        count_buffer,
        count_buffer_offset,
        max_draw_count,
        stride,
    )
end

"""
Generic definition
"""
function cmd_begin_render_pass_2(command_buffer, render_pass_begin, subpass_begin_info)
    vkCmdBeginRenderPass2(command_buffer, render_pass_begin, subpass_begin_info)
end

"""
Generic definition
"""
function cmd_next_subpass_2(command_buffer, subpass_begin_info, subpass_end_info)
    vkCmdNextSubpass2(command_buffer, subpass_begin_info, subpass_end_info)
end

"""
Generic definition
"""
function cmd_end_render_pass_2(command_buffer, subpass_end_info)
    vkCmdEndRenderPass2(command_buffer, subpass_end_info)
end

"""
Generic definition
"""
function reset_query_pool(device, query_pool, first_query, query_count)
    vkResetQueryPool(device, query_pool, first_query, query_count)
end

"""
Generic definition
"""
function get_semaphore_counter_value(device, semaphore)
    pValue = Ref{UInt64}()
    @check vkGetSemaphoreCounterValue(device, semaphore, pValue)
    pValue[]
end

"""
Generic definition
"""
function wait_semaphores(device, wait_info, timeout)
    @check vkWaitSemaphores(device, wait_info, timeout)
end

"""
Generic definition
"""
function signal_semaphore(device, signal_info)
    @check vkSignalSemaphore(device, signal_info)
end

"""
Generic definition
"""
function get_buffer_device_address(device, info)
    vkGetBufferDeviceAddress(device, info)
end

"""
Generic definition
"""
function get_buffer_opaque_capture_address(device, info)
    vkGetBufferOpaqueCaptureAddress(device, info)
end

"""
Generic definition
"""
function get_device_memory_opaque_capture_address(device, info)
    vkGetDeviceMemoryOpaqueCaptureAddress(device, info)
end

"""
Generic definition
"""
function get_physical_device_surface_support_khr(
    physical_device,
    queue_family_index,
    surface,
)
    pSupported = Ref{VkBool32}()
    @check vkGetPhysicalDeviceSurfaceSupportKHR(
        physical_device,
        queue_family_index,
        surface,
        pSupported,
    )
    pSupported[]
end

"""
Generic definition
"""
function get_physical_device_surface_capabilities_khr(physical_device, surface)
    pSurfaceCapabilities = Ref{VkSurfaceCapabilitiesKHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
        physical_device,
        surface,
        pSurfaceCapabilities,
    )
    SurfaceCapabilitiesKHR(pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_khr(physical_device, surface)
    surface_format_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceSurfaceFormatsKHR(
        physical_device,
        surface,
        surface_format_count,
        C_NULL,
    )
    surface_formats = Array{VkSurfaceFormatKHR}(undef, surface_format_count[])
    @check vkGetPhysicalDeviceSurfaceFormatsKHR(
        physical_device,
        surface,
        surface_format_count,
        surface_formats,
    )
    SurfaceFormatKHR.(surface_formats)
end

function get_physical_device_surface_present_modes_khr(physical_device, surface)
    present_mode_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceSurfacePresentModesKHR(
        physical_device,
        surface,
        present_mode_count,
        C_NULL,
    )
    present_modes = Array{VkPresentModeKHR}(undef, present_mode_count[])
    @check vkGetPhysicalDeviceSurfacePresentModesKHR(
        physical_device,
        surface,
        present_mode_count,
        present_modes,
    )
    PresentModeKHR.(present_modes)
end

function get_swapchain_images_khr(device, swapchain)
    swapchain_image_count = Ref{UInt32}(0)
    @check vkGetSwapchainImagesKHR(device, swapchain, swapchain_image_count, C_NULL)
    swapchain_images = Array{VkImage}(undef, swapchain_image_count[])
    @check vkGetSwapchainImagesKHR(
        device,
        swapchain,
        swapchain_image_count,
        swapchain_images,
    )
    Image.(swapchain_images)
end

"""
Generic definition
"""
function acquire_next_image_khr(
    device,
    swapchain,
    timeout;
    semaphore = C_NULL,
    fence = C_NULL,
)
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex)
    pImageIndex[]
end

"""
Generic definition
"""
function queue_present_khr(queue, present_info)
    @check vkQueuePresentKHR(queue, present_info)
end

"""
Generic definition
"""
function get_device_group_present_capabilities_khr(device)
    pDeviceGroupPresentCapabilities = Ref{VkDeviceGroupPresentCapabilitiesKHR}()
    @check vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities)
    DeviceGroupPresentCapabilitiesKHR(pDeviceGroupPresentCapabilities[])
end

"""
Generic definition
"""
function get_device_group_surface_present_modes_khr(device, surface)
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes)
    pModes[]
end

function get_physical_device_present_rectangles_khr(physical_device, surface)
    rect_count = Ref{UInt32}(0)
    @check vkGetPhysicalDevicePresentRectanglesKHR(
        physical_device,
        surface,
        rect_count,
        C_NULL,
    )
    rects = Array{VkRect2D}(undef, rect_count[])
    @check vkGetPhysicalDevicePresentRectanglesKHR(
        physical_device,
        surface,
        rect_count,
        rects,
    )
    Rect2D.(rects)
end

"""
Generic definition
"""
function acquire_next_image_2_khr(device, acquire_info)
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImage2KHR(device, acquire_info, pImageIndex)
    pImageIndex[]
end

function get_physical_device_display_properties_khr(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, property_count, C_NULL)
    properties = Array{VkDisplayPropertiesKHR}(undef, property_count[])
    @check vkGetPhysicalDeviceDisplayPropertiesKHR(
        physical_device,
        property_count,
        properties,
    )
    DisplayPropertiesKHR.(properties)
end

function get_physical_device_display_plane_properties_khr(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        physical_device,
        property_count,
        C_NULL,
    )
    properties = Array{VkDisplayPlanePropertiesKHR}(undef, property_count[])
    @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        physical_device,
        property_count,
        properties,
    )
    DisplayPlanePropertiesKHR.(properties)
end

function get_display_plane_supported_displays_khr(physical_device, plane_index)
    display_count = Ref{UInt32}(0)
    @check vkGetDisplayPlaneSupportedDisplaysKHR(
        physical_device,
        plane_index,
        display_count,
        C_NULL,
    )
    displays = Array{VkDisplayKHR}(undef, display_count[])
    @check vkGetDisplayPlaneSupportedDisplaysKHR(
        physical_device,
        plane_index,
        display_count,
        displays,
    )
    DisplayKHR.(displays)
end

function get_display_mode_properties_khr(physical_device, display)
    property_count = Ref{UInt32}(0)
    @check vkGetDisplayModePropertiesKHR(physical_device, display, property_count, C_NULL)
    properties = Array{VkDisplayModePropertiesKHR}(undef, property_count[])
    @check vkGetDisplayModePropertiesKHR(
        physical_device,
        display,
        property_count,
        properties,
    )
    DisplayModePropertiesKHR.(properties)
end

"""
Generic definition
"""
function get_display_plane_capabilities_khr(physical_device, mode, plane_index)
    pCapabilities = Ref{VkDisplayPlaneCapabilitiesKHR}()
    @check vkGetDisplayPlaneCapabilitiesKHR(
        physical_device,
        mode,
        plane_index,
        pCapabilities,
    )
    DisplayPlaneCapabilitiesKHR(pCapabilities[])
end

"""
Generic definition
"""
function get_memory_fd_khr(device, get_fd_info)
    pFd = Ref{Cint}()
    @check vkGetMemoryFdKHR(device, get_fd_info, pFd)
    pFd[]
end

"""
Generic definition
"""
function get_memory_fd_properties_khr(device, handle_type, fd)
    pMemoryFdProperties = Ref{VkMemoryFdPropertiesKHR}()
    @check vkGetMemoryFdPropertiesKHR(device, handle_type, fd, pMemoryFdProperties)
    MemoryFdPropertiesKHR(pMemoryFdProperties[])
end

"""
Generic definition
"""
function import_semaphore_fd_khr(device, import_semaphore_fd_info)
    @check vkImportSemaphoreFdKHR(device, import_semaphore_fd_info)
end

"""
Generic definition
"""
function get_semaphore_fd_khr(device, get_fd_info)
    pFd = Ref{Cint}()
    @check vkGetSemaphoreFdKHR(device, get_fd_info, pFd)
    pFd[]
end

"""
Generic definition
"""
function cmd_push_descriptor_set_khr(
    command_buffer,
    pipeline_bind_point,
    layout,
    set,
    descriptor_writes,
)
    _descriptorWriteCount = pointer_length(descriptor_writes)
    vkCmdPushDescriptorSetKHR(
        command_buffer,
        pipeline_bind_point,
        layout,
        set,
        _descriptorWriteCount,
        descriptor_writes,
    )
end

"""
Generic definition
"""
function cmd_push_descriptor_set_with_template_khr(
    command_buffer,
    descriptor_update_template,
    layout,
    set,
    data,
)
    vkCmdPushDescriptorSetWithTemplateKHR(
        command_buffer,
        descriptor_update_template,
        layout,
        set,
        data,
    )
end

"""
Generic definition
"""
function get_swapchain_status_khr(device, swapchain)
    @check vkGetSwapchainStatusKHR(device, swapchain)
end

"""
Generic definition
"""
function import_fence_fd_khr(device, import_fence_fd_info)
    @check vkImportFenceFdKHR(device, import_fence_fd_info)
end

"""
Generic definition
"""
function get_fence_fd_khr(device, get_fd_info)
    pFd = Ref{Cint}()
    @check vkGetFenceFdKHR(device, get_fd_info, pFd)
    pFd[]
end

function enumerate_physical_device_queue_family_performance_query_counters_khr(
    physical_device,
    queue_family_index;
    counter_descriptions = C_NULL,
)
    counter_count = Ref{UInt32}(0)
    @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physical_device,
        queue_family_index,
        counter_count,
        C_NULL,
        counter_descriptions,
    )
    counters = Array{VkPerformanceCounterKHR}(undef, counter_count[])
    @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physical_device,
        queue_family_index,
        counter_count,
        counters,
        counter_descriptions,
    )
    PerformanceCounterKHR.(counters)
end

"""
Generic definition
"""
function get_physical_device_queue_family_performance_query_passes_khr(
    physical_device,
    performance_query_create_info,
)
    pNumPasses = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        physical_device,
        performance_query_create_info,
        pNumPasses,
    )
    pNumPasses[]
end

"""
Generic definition
"""
function acquire_profiling_lock_khr(device, info)
    @check vkAcquireProfilingLockKHR(device, info)
end

"""
Generic definition
"""
function release_profiling_lock_khr(device)
    vkReleaseProfilingLockKHR(device)
end

"""
Generic definition
"""
function get_physical_device_surface_capabilities_2_khr(physical_device, surface_info)
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2KHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2KHR(
        physical_device,
        surface_info,
        pSurfaceCapabilities,
    )
    SurfaceCapabilities2KHR(pSurfaceCapabilities[])
end

function get_physical_device_surface_formats_2_khr(physical_device, surface_info)
    surface_format_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceSurfaceFormats2KHR(
        physical_device,
        surface_info,
        surface_format_count,
        C_NULL,
    )
    surface_formats = Array{VkSurfaceFormat2KHR}(undef, surface_format_count[])
    @check vkGetPhysicalDeviceSurfaceFormats2KHR(
        physical_device,
        surface_info,
        surface_format_count,
        surface_formats,
    )
    SurfaceFormat2KHR.(surface_formats)
end

function get_physical_device_display_properties_2_khr(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, property_count, C_NULL)
    properties = Array{VkDisplayProperties2KHR}(undef, property_count[])
    @check vkGetPhysicalDeviceDisplayProperties2KHR(
        physical_device,
        property_count,
        properties,
    )
    DisplayProperties2KHR.(properties)
end

function get_physical_device_display_plane_properties_2_khr(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        physical_device,
        property_count,
        C_NULL,
    )
    properties = Array{VkDisplayPlaneProperties2KHR}(undef, property_count[])
    @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        physical_device,
        property_count,
        properties,
    )
    DisplayPlaneProperties2KHR.(properties)
end

function get_display_mode_properties_2_khr(physical_device, display)
    property_count = Ref{UInt32}(0)
    @check vkGetDisplayModeProperties2KHR(physical_device, display, property_count, C_NULL)
    properties = Array{VkDisplayModeProperties2KHR}(undef, property_count[])
    @check vkGetDisplayModeProperties2KHR(
        physical_device,
        display,
        property_count,
        properties,
    )
    DisplayModeProperties2KHR.(properties)
end

"""
Generic definition
"""
function get_display_plane_capabilities_2_khr(physical_device, display_plane_info)
    pCapabilities = Ref{VkDisplayPlaneCapabilities2KHR}()
    @check vkGetDisplayPlaneCapabilities2KHR(
        physical_device,
        display_plane_info,
        pCapabilities,
    )
    DisplayPlaneCapabilities2KHR(pCapabilities[])
end

function get_pipeline_executable_properties_khr(device, pipeline_info)
    executable_count = Ref{UInt32}(0)
    @check vkGetPipelineExecutablePropertiesKHR(
        device,
        pipeline_info,
        executable_count,
        C_NULL,
    )
    properties = Array{VkPipelineExecutablePropertiesKHR}(undef, executable_count[])
    @check vkGetPipelineExecutablePropertiesKHR(
        device,
        pipeline_info,
        executable_count,
        properties,
    )
    PipelineExecutablePropertiesKHR.(properties)
end

function get_pipeline_executable_statistics_khr(device, executable_info)
    statistic_count = Ref{UInt32}(0)
    @check vkGetPipelineExecutableStatisticsKHR(
        device,
        executable_info,
        statistic_count,
        C_NULL,
    )
    statistics = Array{VkPipelineExecutableStatisticKHR}(undef, statistic_count[])
    @check vkGetPipelineExecutableStatisticsKHR(
        device,
        executable_info,
        statistic_count,
        statistics,
    )
    PipelineExecutableStatisticKHR.(statistics)
end

function get_pipeline_executable_internal_representations_khr(device, executable_info)
    internal_representation_count = Ref{UInt32}(0)
    @check vkGetPipelineExecutableInternalRepresentationsKHR(
        device,
        executable_info,
        internal_representation_count,
        C_NULL,
    )
    internal_representations = Array{VkPipelineExecutableInternalRepresentationKHR}(
        undef,
        internal_representation_count[],
    )
    @check vkGetPipelineExecutableInternalRepresentationsKHR(
        device,
        executable_info,
        internal_representation_count,
        internal_representations,
    )
    PipelineExecutableInternalRepresentationKHR.(internal_representations)
end

"""
Generic definition
"""
function debug_report_message_ext(
    instance,
    flags,
    object_type,
    object,
    location,
    message_code,
    layer_prefix,
    message,
)
    vkDebugReportMessageEXT(
        instance,
        flags,
        object_type,
        object,
        location,
        message_code,
        layer_prefix,
        message,
    )
end

"""
Generic definition
"""
function debug_marker_set_object_tag_ext(device, tag_info)
    @check vkDebugMarkerSetObjectTagEXT(device, tag_info)
end

"""
Generic definition
"""
function debug_marker_set_object_name_ext(device, name_info)
    @check vkDebugMarkerSetObjectNameEXT(device, name_info)
end

"""
Generic definition
"""
function cmd_debug_marker_begin_ext(command_buffer, marker_info)
    vkCmdDebugMarkerBeginEXT(command_buffer, marker_info)
end

"""
Generic definition
"""
function cmd_debug_marker_end_ext(command_buffer)
    vkCmdDebugMarkerEndEXT(command_buffer)
end

"""
Generic definition
"""
function cmd_debug_marker_insert_ext(command_buffer, marker_info)
    vkCmdDebugMarkerInsertEXT(command_buffer, marker_info)
end

"""
Generic definition
"""
function cmd_bind_transform_feedback_buffers_ext(
    command_buffer,
    first_binding,
    buffers,
    offsets;
    sizes = C_NULL,
)
    _bindingCount = pointer_length(buffers)
    vkCmdBindTransformFeedbackBuffersEXT(
        command_buffer,
        first_binding,
        _bindingCount,
        buffers,
        offsets,
        sizes,
    )
end

"""
Generic definition
"""
function cmd_begin_transform_feedback_ext(
    command_buffer,
    first_counter_buffer,
    counter_buffers;
    counter_buffer_offsets = C_NULL,
)
    _counterBufferCount = pointer_length(counter_buffers)
    vkCmdBeginTransformFeedbackEXT(
        command_buffer,
        first_counter_buffer,
        _counterBufferCount,
        counter_buffers,
        counter_buffer_offsets,
    )
end

"""
Generic definition
"""
function cmd_end_transform_feedback_ext(
    command_buffer,
    first_counter_buffer,
    counter_buffers;
    counter_buffer_offsets = C_NULL,
)
    _counterBufferCount = pointer_length(counter_buffers)
    vkCmdEndTransformFeedbackEXT(
        command_buffer,
        first_counter_buffer,
        _counterBufferCount,
        counter_buffers,
        counter_buffer_offsets,
    )
end

"""
Generic definition
"""
function cmd_begin_query_indexed_ext(command_buffer, query_pool, query, index; flags = 0)
    vkCmdBeginQueryIndexedEXT(command_buffer, query_pool, query, flags, index)
end

"""
Generic definition
"""
function cmd_end_query_indexed_ext(command_buffer, query_pool, query, index)
    vkCmdEndQueryIndexedEXT(command_buffer, query_pool, query, index)
end

"""
Generic definition
"""
function cmd_draw_indirect_byte_count_ext(
    command_buffer,
    instance_count,
    first_instance,
    counter_buffer,
    counter_buffer_offset,
    counter_offset,
    vertex_stride,
)
    vkCmdDrawIndirectByteCountEXT(
        command_buffer,
        instance_count,
        first_instance,
        counter_buffer,
        counter_buffer_offset,
        counter_offset,
        vertex_stride,
    )
end

"""
Generic definition
"""
function get_image_view_handle_nvx(device, info)
    vkGetImageViewHandleNVX(device, info)
end

"""
Generic definition
"""
function get_image_view_address_nvx(device, image_view)
    pProperties = Ref{VkImageViewAddressPropertiesNVX}()
    @check vkGetImageViewAddressNVX(device, image_view, pProperties)
    ImageViewAddressPropertiesNVX(pProperties[])
end

function get_shader_info_amd(device, pipeline, shader_stage, info_type)
    info_size = Ref{UInt32}(0)
    @check vkGetShaderInfoAMD(
        device,
        pipeline,
        shader_stage,
        C_NULL_type,
        C_NULL_size,
        C_NULL,
    )
    info = Array{void}(undef, info_size[])
    @check vkGetShaderInfoAMD(device, pipeline, shader_stage, info_type, info_size, info)
    info
end

"""
Generic definition
"""
function get_physical_device_external_image_format_properties_nv(
    physical_device,
    format,
    type,
    tiling,
    usage;
    flags = 0,
    external_handle_type = 0,
)
    pExternalImageFormatProperties = Ref{VkExternalImageFormatPropertiesNV}()
    @check vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
        physical_device,
        format,
        type,
        tiling,
        usage,
        flags,
        external_handle_type,
        pExternalImageFormatProperties,
    )
    ExternalImageFormatPropertiesNV(pExternalImageFormatProperties[])
end

"""
Generic definition
"""
function cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin)
    vkCmdBeginConditionalRenderingEXT(command_buffer, conditional_rendering_begin)
end

"""
Generic definition
"""
function cmd_end_conditional_rendering_ext(command_buffer)
    vkCmdEndConditionalRenderingEXT(command_buffer)
end

"""
Generic definition
"""
function cmd_set_viewport_w_scaling_nv(command_buffer, first_viewport, viewport_w_scalings)
    _viewportCount = pointer_length(viewport_w_scalings)
    vkCmdSetViewportWScalingNV(
        command_buffer,
        first_viewport,
        _viewportCount,
        viewport_w_scalings,
    )
end

"""
Generic definition
"""
function release_display_ext(physical_device, display)
    @check vkReleaseDisplayEXT(physical_device, display)
end

"""
Generic definition
"""
function get_physical_device_surface_capabilities_2_ext(physical_device, surface)
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2EXT}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2EXT(
        physical_device,
        surface,
        pSurfaceCapabilities,
    )
    SurfaceCapabilities2EXT(pSurfaceCapabilities[])
end

"""
Generic definition
"""
function display_power_control_ext(device, display, display_power_info)
    @check vkDisplayPowerControlEXT(device, display, display_power_info)
end

"""
Generic definition
"""
function register_device_event_ext(device, device_event_info; allocator = C_NULL)
    pFence = Ref{VkFence}()
    @check vkRegisterDeviceEventEXT(device, device_event_info, allocator, pFence)
    Fence(pFence[])
end

"""
Generic definition
"""
function register_display_event_ext(device, display, display_event_info; allocator = C_NULL)
    pFence = Ref{VkFence}()
    @check vkRegisterDisplayEventEXT(device, display, display_event_info, allocator, pFence)
    Fence(pFence[])
end

"""
Generic definition
"""
function get_swapchain_counter_ext(device, swapchain, counter)
    pCounterValue = Ref{UInt64}()
    @check vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue)
    pCounterValue[]
end

"""
Generic definition
"""
function get_refresh_cycle_duration_google(device, swapchain)
    pDisplayTimingProperties = Ref{VkRefreshCycleDurationGOOGLE}()
    @check vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties)
    RefreshCycleDurationGOOGLE(pDisplayTimingProperties[])
end

function get_past_presentation_timing_google(device, swapchain)
    presentation_timing_count = Ref{UInt32}(0)
    @check vkGetPastPresentationTimingGOOGLE(
        device,
        swapchain,
        presentation_timing_count,
        C_NULL,
    )
    presentation_timings =
        Array{VkPastPresentationTimingGOOGLE}(undef, presentation_timing_count[])
    @check vkGetPastPresentationTimingGOOGLE(
        device,
        swapchain,
        presentation_timing_count,
        presentation_timings,
    )
    PastPresentationTimingGOOGLE.(presentation_timings)
end

"""
Generic definition
"""
function cmd_set_discard_rectangle_ext(
    command_buffer,
    first_discard_rectangle,
    discard_rectangles,
)
    _discardRectangleCount = pointer_length(discard_rectangles)
    vkCmdSetDiscardRectangleEXT(
        command_buffer,
        first_discard_rectangle,
        _discardRectangleCount,
        discard_rectangles,
    )
end

"""
Generic definition
"""
function set_hdr_metadata_ext(device, swapchains, metadata)
    _swapchainCount = pointer_length(swapchains)
    vkSetHdrMetadataEXT(device, _swapchainCount, swapchains, metadata)
end

"""
Generic definition
"""
function set_debug_utils_object_name_ext(device, name_info)
    @check vkSetDebugUtilsObjectNameEXT(device, name_info)
end

"""
Generic definition
"""
function set_debug_utils_object_tag_ext(device, tag_info)
    @check vkSetDebugUtilsObjectTagEXT(device, tag_info)
end

"""
Generic definition
"""
function queue_begin_debug_utils_label_ext(queue, label_info)
    vkQueueBeginDebugUtilsLabelEXT(queue, label_info)
end

"""
Generic definition
"""
function queue_end_debug_utils_label_ext(queue)
    vkQueueEndDebugUtilsLabelEXT(queue)
end

"""
Generic definition
"""
function queue_insert_debug_utils_label_ext(queue, label_info)
    vkQueueInsertDebugUtilsLabelEXT(queue, label_info)
end

"""
Generic definition
"""
function cmd_begin_debug_utils_label_ext(command_buffer, label_info)
    vkCmdBeginDebugUtilsLabelEXT(command_buffer, label_info)
end

"""
Generic definition
"""
function cmd_end_debug_utils_label_ext(command_buffer)
    vkCmdEndDebugUtilsLabelEXT(command_buffer)
end

"""
Generic definition
"""
function cmd_insert_debug_utils_label_ext(command_buffer, label_info)
    vkCmdInsertDebugUtilsLabelEXT(command_buffer, label_info)
end

"""
Generic definition
"""
function submit_debug_utils_message_ext(
    instance,
    message_severity,
    message_types,
    callback_data,
)
    vkSubmitDebugUtilsMessageEXT(instance, message_severity, message_types, callback_data)
end

"""
Generic definition
"""
function cmd_set_sample_locations_ext(command_buffer, sample_locations_info)
    vkCmdSetSampleLocationsEXT(command_buffer, sample_locations_info)
end

"""
Generic definition
"""
function get_physical_device_multisample_properties_ext(physical_device, samples)
    pMultisampleProperties = Ref{VkMultisamplePropertiesEXT}()
    vkGetPhysicalDeviceMultisamplePropertiesEXT(
        physical_device,
        samples,
        pMultisampleProperties,
    )
    MultisamplePropertiesEXT(pMultisampleProperties[])
end

"""
Generic definition
"""
function get_image_drm_format_modifier_properties_ext(device, image)
    pProperties = Ref{VkImageDrmFormatModifierPropertiesEXT}()
    @check vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties)
    ImageDrmFormatModifierPropertiesEXT(pProperties[])
end

"""
Generic definition
"""
function merge_validation_caches_ext(device, dst_cache, src_caches)
    _srcCacheCount = pointer_length(src_caches)
    @check vkMergeValidationCachesEXT(device, dst_cache, _srcCacheCount, src_caches)
end

function get_validation_cache_data_ext(device, validation_cache)
    data_size = Ref{UInt32}(0)
    @check vkGetValidationCacheDataEXT(device, validation_cache, C_NULL_size, C_NULL)
    data = Array{void}(undef, data_size[])
    @check vkGetValidationCacheDataEXT(device, validation_cache, data_size, data)
    data
end

"""
Generic definition
"""
function cmd_bind_shading_rate_image_nv(command_buffer, image_layout; image_view = C_NULL)
    vkCmdBindShadingRateImageNV(command_buffer, image_view, image_layout)
end

"""
Generic definition
"""
function cmd_set_viewport_shading_rate_palette_nv(
    command_buffer,
    first_viewport,
    shading_rate_palettes,
)
    _viewportCount = pointer_length(shading_rate_palettes)
    vkCmdSetViewportShadingRatePaletteNV(
        command_buffer,
        first_viewport,
        _viewportCount,
        shading_rate_palettes,
    )
end

"""
Generic definition
"""
function cmd_set_coarse_sample_order_nv(
    command_buffer,
    sample_order_type,
    custom_sample_orders,
)
    _customSampleOrderCount = pointer_length(custom_sample_orders)
    vkCmdSetCoarseSampleOrderNV(
        command_buffer,
        sample_order_type,
        _customSampleOrderCount,
        custom_sample_orders,
    )
end

"""
Generic definition
"""
function get_acceleration_structure_memory_requirements_nv(device, info)
    pMemoryRequirements = Ref{VkMemoryRequirements2KHR}()
    vkGetAccelerationStructureMemoryRequirementsNV(device, info, pMemoryRequirements)
    pMemoryRequirements[]
end

"""
Generic definition
"""
function bind_acceleration_structure_memory_khr(device, bind_infos)
    _bindInfoCount = pointer_length(bind_infos)
    @check vkBindAccelerationStructureMemoryKHR(device, _bindInfoCount, bind_infos)
end

"""
Generic definition
"""
function cmd_build_acceleration_structure_nv(
    command_buffer,
    info,
    instance_offset,
    update,
    dst,
    scratch,
    scratch_offset;
    instance_data = C_NULL,
    src = C_NULL,
)
    vkCmdBuildAccelerationStructureNV(
        command_buffer,
        info,
        instance_data,
        instance_offset,
        update,
        dst,
        src,
        scratch,
        scratch_offset,
    )
end

"""
Generic definition
"""
function cmd_copy_acceleration_structure_nv(command_buffer, dst, src, mode)
    vkCmdCopyAccelerationStructureNV(command_buffer, dst, src, mode)
end

"""
Generic definition
"""
function cmd_trace_rays_nv(
    command_buffer,
    raygen_shader_binding_table_buffer,
    raygen_shader_binding_offset,
    miss_shader_binding_offset,
    miss_shader_binding_stride,
    hit_shader_binding_offset,
    hit_shader_binding_stride,
    callable_shader_binding_offset,
    callable_shader_binding_stride,
    width,
    height,
    depth;
    miss_shader_binding_table_buffer = C_NULL,
    hit_shader_binding_table_buffer = C_NULL,
    callable_shader_binding_table_buffer = C_NULL,
)
    vkCmdTraceRaysNV(
        command_buffer,
        raygen_shader_binding_table_buffer,
        raygen_shader_binding_offset,
        miss_shader_binding_table_buffer,
        miss_shader_binding_offset,
        miss_shader_binding_stride,
        hit_shader_binding_table_buffer,
        hit_shader_binding_offset,
        hit_shader_binding_stride,
        callable_shader_binding_table_buffer,
        callable_shader_binding_offset,
        callable_shader_binding_stride,
        width,
        height,
        depth,
    )
end

"""
Generic definition
"""
function get_ray_tracing_shader_group_handles_khr(
    device,
    pipeline,
    first_group,
    group_count,
)
    _dataSize = pointer_length(data)
    pData = Ref{Cvoid}()
    @check vkGetRayTracingShaderGroupHandlesKHR(
        device,
        pipeline,
        first_group,
        group_count,
        _dataSize,
        pData,
    )
    pData[]
end

"""
Generic definition
"""
function get_acceleration_structure_handle_nv(device, acceleration_structure)
    _dataSize = pointer_length(data)
    pData = Ref{Cvoid}()
    @check vkGetAccelerationStructureHandleNV(
        device,
        acceleration_structure,
        _dataSize,
        pData,
    )
    pData[]
end

"""
Generic definition
"""
function cmd_write_acceleration_structures_properties_khr(
    command_buffer,
    acceleration_structures,
    query_type,
    query_pool,
    first_query,
)
    _accelerationStructureCount = pointer_length(acceleration_structures)
    vkCmdWriteAccelerationStructuresPropertiesKHR(
        command_buffer,
        _accelerationStructureCount,
        acceleration_structures,
        query_type,
        query_pool,
        first_query,
    )
end

"""
Generic definition
"""
function compile_deferred_nv(device, pipeline, shader)
    @check vkCompileDeferredNV(device, pipeline, shader)
end

"""
Generic definition
"""
function get_memory_host_pointer_properties_ext(device, handle_type, host_pointer)
    pMemoryHostPointerProperties = Ref{VkMemoryHostPointerPropertiesEXT}()
    @check vkGetMemoryHostPointerPropertiesEXT(
        device,
        handle_type,
        host_pointer,
        pMemoryHostPointerProperties,
    )
    MemoryHostPointerPropertiesEXT(pMemoryHostPointerProperties[])
end

"""
Generic definition
"""
function cmd_write_buffer_marker_amd(
    command_buffer,
    pipeline_stage,
    dst_buffer,
    dst_offset,
    marker,
)
    vkCmdWriteBufferMarkerAMD(
        command_buffer,
        pipeline_stage,
        dst_buffer,
        dst_offset,
        marker,
    )
end

function get_physical_device_calibrateable_time_domains_ext(physical_device)
    time_domain_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        physical_device,
        time_domain_count,
        C_NULL,
    )
    time_domains = Array{VkTimeDomainEXT}(undef, time_domain_count[])
    @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        physical_device,
        time_domain_count,
        time_domains,
    )
    TimeDomainEXT.(time_domains)
end

"""
Generic definition
"""
function get_calibrated_timestamps_ext(device, timestamp_infos, timestamps)
    _timestampCount = pointer_length(timestamp_infos)
    pMaxDeviation = Ref{UInt64}()
    @check vkGetCalibratedTimestampsEXT(
        device,
        _timestampCount,
        timestamp_infos,
        timestamps,
        pMaxDeviation,
    )
    pMaxDeviation[]
end

"""
Generic definition
"""
function cmd_draw_mesh_tasks_nv(command_buffer, task_count, first_task)
    vkCmdDrawMeshTasksNV(command_buffer, task_count, first_task)
end

"""
Generic definition
"""
function cmd_draw_mesh_tasks_indirect_nv(command_buffer, buffer, offset, draw_count, stride)
    vkCmdDrawMeshTasksIndirectNV(command_buffer, buffer, offset, draw_count, stride)
end

"""
Generic definition
"""
function cmd_draw_mesh_tasks_indirect_count_nv(
    command_buffer,
    buffer,
    offset,
    count_buffer,
    count_buffer_offset,
    max_draw_count,
    stride,
)
    vkCmdDrawMeshTasksIndirectCountNV(
        command_buffer,
        buffer,
        offset,
        count_buffer,
        count_buffer_offset,
        max_draw_count,
        stride,
    )
end

"""
Generic definition
"""
function cmd_set_exclusive_scissor_nv(
    command_buffer,
    first_exclusive_scissor,
    exclusive_scissors,
)
    _exclusiveScissorCount = pointer_length(exclusive_scissors)
    vkCmdSetExclusiveScissorNV(
        command_buffer,
        first_exclusive_scissor,
        _exclusiveScissorCount,
        exclusive_scissors,
    )
end

"""
Generic definition
"""
function cmd_set_checkpoint_nv(command_buffer, checkpoint_marker)
    vkCmdSetCheckpointNV(command_buffer, checkpoint_marker)
end

function get_queue_checkpoint_data_nv(queue)
    checkpoint_data_count = Ref{UInt32}(0)
    vkGetQueueCheckpointDataNV(queue, C_NULL_count, C_NULL)
    checkpoint_data = Array{VkCheckpointDataNV}(undef, checkpoint_data_count[])
    vkGetQueueCheckpointDataNV(queue, checkpoint_data_count, checkpoint_data)
    CheckpointDataNV.(checkpoint_data)
end

"""
Generic definition
"""
function initialize_performance_api_intel(device, initialize_info)
    @check vkInitializePerformanceApiINTEL(device, initialize_info)
end

"""
Generic definition
"""
function uninitialize_performance_api_intel(device)
    vkUninitializePerformanceApiINTEL(device)
end

"""
Generic definition
"""
function cmd_set_performance_marker_intel(command_buffer, marker_info)
    @check vkCmdSetPerformanceMarkerINTEL(command_buffer, marker_info)
end

"""
Generic definition
"""
function cmd_set_performance_stream_marker_intel(command_buffer, marker_info)
    @check vkCmdSetPerformanceStreamMarkerINTEL(command_buffer, marker_info)
end

"""
Generic definition
"""
function cmd_set_performance_override_intel(command_buffer, override_info)
    @check vkCmdSetPerformanceOverrideINTEL(command_buffer, override_info)
end

"""
Generic definition
"""
function acquire_performance_configuration_intel(device, acquire_info)
    pConfiguration = Ref{VkPerformanceConfigurationINTEL}()
    @check vkAcquirePerformanceConfigurationINTEL(device, acquire_info, pConfiguration)
    PerformanceConfigurationINTEL(pConfiguration[])
end

"""
Generic definition
"""
function release_performance_configuration_intel(device, configuration)
    @check vkReleasePerformanceConfigurationINTEL(device, configuration)
end

"""
Generic definition
"""
function queue_set_performance_configuration_intel(queue, configuration)
    @check vkQueueSetPerformanceConfigurationINTEL(queue, configuration)
end

"""
Generic definition
"""
function get_performance_parameter_intel(device, parameter)
    pValue = Ref{VkPerformanceValueINTEL}()
    @check vkGetPerformanceParameterINTEL(device, parameter, pValue)
    PerformanceValueINTEL(pValue[])
end

"""
Generic definition
"""
function set_local_dimming_amd(device, swap_chain, local_dimming_enable)
    vkSetLocalDimmingAMD(device, swap_chain, local_dimming_enable)
end

function get_physical_device_tool_properties_ext(physical_device)
    tool_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, tool_count, C_NULL)
    tool_properties = Array{VkPhysicalDeviceToolPropertiesEXT}(undef, tool_count[])
    @check vkGetPhysicalDeviceToolPropertiesEXT(
        physical_device,
        tool_count,
        tool_properties,
    )
    PhysicalDeviceToolPropertiesEXT.(tool_properties)
end

function get_physical_device_cooperative_matrix_properties_nv(physical_device)
    property_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
        physical_device,
        property_count,
        C_NULL,
    )
    properties = Array{VkCooperativeMatrixPropertiesNV}(undef, property_count[])
    @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
        physical_device,
        property_count,
        properties,
    )
    CooperativeMatrixPropertiesNV.(properties)
end

function get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(
    physical_device,
)
    combination_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        physical_device,
        combination_count,
        C_NULL,
    )
    combinations = Array{VkFramebufferMixedSamplesCombinationNV}(undef, combination_count[])
    @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        physical_device,
        combination_count,
        combinations,
    )
    FramebufferMixedSamplesCombinationNV.(combinations)
end

"""
Generic definition
"""
function cmd_set_line_stipple_ext(command_buffer, line_stipple_factor, line_stipple_pattern)
    vkCmdSetLineStippleEXT(command_buffer, line_stipple_factor, line_stipple_pattern)
end

"""
Generic definition
"""
function cmd_set_cull_mode_ext(command_buffer; cull_mode = 0)
    vkCmdSetCullModeEXT(command_buffer, cull_mode)
end

"""
Generic definition
"""
function cmd_set_front_face_ext(command_buffer, front_face)
    vkCmdSetFrontFaceEXT(command_buffer, front_face)
end

"""
Generic definition
"""
function cmd_set_primitive_topology_ext(command_buffer, primitive_topology)
    vkCmdSetPrimitiveTopologyEXT(command_buffer, primitive_topology)
end

"""
Generic definition
"""
function cmd_set_viewport_with_count_ext(command_buffer, viewports)
    _viewportCount = pointer_length(viewports)
    vkCmdSetViewportWithCountEXT(command_buffer, _viewportCount, viewports)
end

"""
Generic definition
"""
function cmd_set_scissor_with_count_ext(command_buffer, scissors)
    _scissorCount = pointer_length(scissors)
    vkCmdSetScissorWithCountEXT(command_buffer, _scissorCount, scissors)
end

"""
Generic definition
"""
function cmd_bind_vertex_buffers_2_ext(
    command_buffer,
    first_binding,
    buffers,
    offsets;
    sizes = C_NULL,
    strides = C_NULL,
)
    _bindingCount = pointer_length(buffers)
    vkCmdBindVertexBuffers2EXT(
        command_buffer,
        first_binding,
        _bindingCount,
        buffers,
        offsets,
        sizes,
        strides,
    )
end

"""
Generic definition
"""
function cmd_set_depth_test_enable_ext(command_buffer, depth_test_enable)
    vkCmdSetDepthTestEnableEXT(command_buffer, depth_test_enable)
end

"""
Generic definition
"""
function cmd_set_depth_write_enable_ext(command_buffer, depth_write_enable)
    vkCmdSetDepthWriteEnableEXT(command_buffer, depth_write_enable)
end

"""
Generic definition
"""
function cmd_set_depth_compare_op_ext(command_buffer, depth_compare_op)
    vkCmdSetDepthCompareOpEXT(command_buffer, depth_compare_op)
end

"""
Generic definition
"""
function cmd_set_depth_bounds_test_enable_ext(command_buffer, depth_bounds_test_enable)
    vkCmdSetDepthBoundsTestEnableEXT(command_buffer, depth_bounds_test_enable)
end

"""
Generic definition
"""
function cmd_set_stencil_test_enable_ext(command_buffer, stencil_test_enable)
    vkCmdSetStencilTestEnableEXT(command_buffer, stencil_test_enable)
end

"""
Generic definition
"""
function cmd_set_stencil_op_ext(
    command_buffer,
    face_mask,
    fail_op,
    pass_op,
    depth_fail_op,
    compare_op,
)
    vkCmdSetStencilOpEXT(
        command_buffer,
        face_mask,
        fail_op,
        pass_op,
        depth_fail_op,
        compare_op,
    )
end

"""
Generic definition
"""
function get_generated_commands_memory_requirements_nv(device, info)
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetGeneratedCommandsMemoryRequirementsNV(device, info, pMemoryRequirements)
    MemoryRequirements2(pMemoryRequirements[])
end

"""
Generic definition
"""
function cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info)
    vkCmdPreprocessGeneratedCommandsNV(command_buffer, generated_commands_info)
end

"""
Generic definition
"""
function cmd_execute_generated_commands_nv(
    command_buffer,
    is_preprocessed,
    generated_commands_info,
)
    vkCmdExecuteGeneratedCommandsNV(
        command_buffer,
        is_preprocessed,
        generated_commands_info,
    )
end

"""
Generic definition
"""
function cmd_bind_pipeline_shader_group_nv(
    command_buffer,
    pipeline_bind_point,
    pipeline,
    group_index,
)
    vkCmdBindPipelineShaderGroupNV(
        command_buffer,
        pipeline_bind_point,
        pipeline,
        group_index,
    )
end

"""
Generic definition
"""
function set_private_data_ext(device, object_type, object_handle, private_data_slot, data)
    @check vkSetPrivateDataEXT(device, object_type, object_handle, private_data_slot, data)
end

"""
Generic definition
"""
function get_private_data_ext(device, object_type, object_handle, private_data_slot)
    pData = Ref{UInt64}()
    vkGetPrivateDataEXT(device, object_type, object_handle, private_data_slot, pData)
    pData[]
end

"""
Generic definition
"""
function get_android_hardware_buffer_properties_android(device, buffer)
    pProperties = Ref{VkAndroidHardwareBufferPropertiesANDROID}()
    @check vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties)
    AndroidHardwareBufferPropertiesANDROID(pProperties[])
end

"""
Generic definition
"""
function get_memory_android_hardware_buffer_android(device, info)
    pBuffer = Ref{AHardwareBuffer}()
    @check vkGetMemoryAndroidHardwareBufferANDROID(device, info, pBuffer)
    pBuffer[]
end

"""
Generic definition
"""
function get_physical_device_wayland_presentation_support_khr(
    physical_device,
    queue_family_index,
)
    display = Ref{wl_display}()
    vkGetPhysicalDeviceWaylandPresentationSupportKHR(
        physical_device,
        queue_family_index,
        display,
    )
    display[]
end

"""
Generic definition
"""
function get_physical_device_win_32_presentation_support_khr(
    physical_device,
    queue_family_index,
)
    vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device, queue_family_index)
end

"""
Generic definition
"""
function get_memory_win_32_handle_khr(device, get_win_32_handle_info)
    pHandle = Ref{Cint}()
    @check vkGetMemoryWin32HandleKHR(device, get_win_32_handle_info, pHandle)
    pHandle[]
end

"""
Generic definition
"""
function get_memory_win_32_handle_properties_khr(device, handle_type, handle)
    pMemoryWin32HandleProperties = Ref{VkMemoryWin32HandlePropertiesKHR}()
    @check vkGetMemoryWin32HandlePropertiesKHR(
        device,
        handle_type,
        handle,
        pMemoryWin32HandleProperties,
    )
    MemoryWin32HandlePropertiesKHR(pMemoryWin32HandleProperties[])
end

"""
Generic definition
"""
function import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info)
    @check vkImportSemaphoreWin32HandleKHR(device, import_semaphore_win_32_handle_info)
end

"""
Generic definition
"""
function get_semaphore_win_32_handle_khr(device, get_win_32_handle_info)
    pHandle = Ref{Cint}()
    @check vkGetSemaphoreWin32HandleKHR(device, get_win_32_handle_info, pHandle)
    pHandle[]
end

"""
Generic definition
"""
function import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info)
    @check vkImportFenceWin32HandleKHR(device, import_fence_win_32_handle_info)
end

"""
Generic definition
"""
function get_fence_win_32_handle_khr(device, get_win_32_handle_info)
    pHandle = Ref{Cint}()
    @check vkGetFenceWin32HandleKHR(device, get_win_32_handle_info, pHandle)
    pHandle[]
end

"""
Generic definition
"""
function get_memory_win_32_handle_nv(device, memory, handle_type)
    pHandle = Ref{Cint}()
    @check vkGetMemoryWin32HandleNV(device, memory, handle_type, pHandle)
    pHandle[]
end

function get_physical_device_surface_present_modes_2_ext(physical_device, surface_info)
    present_mode_count = Ref{UInt32}(0)
    @check vkGetPhysicalDeviceSurfacePresentModes2EXT(
        physical_device,
        surface_info,
        present_mode_count,
        C_NULL,
    )
    present_modes = Array{VkPresentModeKHR}(undef, present_mode_count[])
    @check vkGetPhysicalDeviceSurfacePresentModes2EXT(
        physical_device,
        surface_info,
        present_mode_count,
        present_modes,
    )
    PresentModeKHR.(present_modes)
end

"""
Generic definition
"""
function acquire_full_screen_exclusive_mode_ext(device, swapchain)
    @check vkAcquireFullScreenExclusiveModeEXT(device, swapchain)
end

"""
Generic definition
"""
function release_full_screen_exclusive_mode_ext(device, swapchain)
    @check vkReleaseFullScreenExclusiveModeEXT(device, swapchain)
end

"""
Generic definition
"""
function get_device_group_surface_present_modes_2_ext(device, surface_info)
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModes2EXT(device, surface_info, pModes)
    pModes[]
end

"""
Generic definition
"""
function get_physical_device_xcb_presentation_support_khr(
    physical_device,
    queue_family_index,
    connection,
    visual_id,
)
    vkGetPhysicalDeviceXcbPresentationSupportKHR(
        physical_device,
        queue_family_index,
        connection,
        visual_id,
    )
end

"""
Generic definition
"""
function get_physical_device_xlib_presentation_support_khr(
    physical_device,
    queue_family_index,
    dpy,
    visual_id,
)
    vkGetPhysicalDeviceXlibPresentationSupportKHR(
        physical_device,
        queue_family_index,
        dpy,
        visual_id,
    )
end

"""
Generic definition
"""
function acquire_xlib_display_ext(physical_device, dpy, display)
    @check vkAcquireXlibDisplayEXT(physical_device, dpy, display)
end

"""
Generic definition
"""
function get_rand_r_output_display_ext(physical_device, dpy, rr_output)
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetRandROutputDisplayEXT(physical_device, dpy, rr_output, pDisplay)
    DisplayKHR(pDisplay[])
end

"""
Generic definition
"""
function get_deferred_operation_max_concurrency_khr(device, operation)
    vkGetDeferredOperationMaxConcurrencyKHR(device, operation)
end

"""
Generic definition
"""
function get_deferred_operation_result_khr(device, operation)
    @check vkGetDeferredOperationResultKHR(device, operation)
end

"""
Generic definition
"""
function deferred_operation_join_khr(device, operation)
    @check vkDeferredOperationJoinKHR(device, operation)
end

"""
Generic definition
"""
function get_acceleration_structure_memory_requirements_khr(device, info)
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetAccelerationStructureMemoryRequirementsKHR(device, info, pMemoryRequirements)
    MemoryRequirements2(pMemoryRequirements[])
end

"""
Generic definition
"""
function cmd_build_acceleration_structure_khr(command_buffer, infos, offset_infos)
    _infoCount = pointer_length(infos)
    vkCmdBuildAccelerationStructureKHR(command_buffer, _infoCount, infos, offset_infos)
end

"""
Generic definition
"""
function cmd_build_acceleration_structure_indirect_khr(
    command_buffer,
    info,
    indirect_buffer,
    indirect_offset,
    indirect_stride,
)
    vkCmdBuildAccelerationStructureIndirectKHR(
        command_buffer,
        info,
        indirect_buffer,
        indirect_offset,
        indirect_stride,
    )
end

"""
Generic definition
"""
function build_acceleration_structure_khr(device, infos, offset_infos)
    _infoCount = pointer_length(infos)
    @check vkBuildAccelerationStructureKHR(device, _infoCount, infos, offset_infos)
end

"""
Generic definition
"""
function copy_acceleration_structure_khr(device, info)
    @check vkCopyAccelerationStructureKHR(device, info)
end

"""
Generic definition
"""
function copy_acceleration_structure_to_memory_khr(device, info)
    @check vkCopyAccelerationStructureToMemoryKHR(device, info)
end

"""
Generic definition
"""
function copy_memory_to_acceleration_structure_khr(device, info)
    @check vkCopyMemoryToAccelerationStructureKHR(device, info)
end

"""
Generic definition
"""
function write_acceleration_structures_properties_khr(
    device,
    acceleration_structures,
    query_type,
    data,
    stride,
)
    _accelerationStructureCount = pointer_length(acceleration_structures)
    _dataSize = pointer_length(data)
    @check vkWriteAccelerationStructuresPropertiesKHR(
        device,
        _accelerationStructureCount,
        acceleration_structures,
        query_type,
        _dataSize,
        data,
        stride,
    )
end

"""
Generic definition
"""
function cmd_copy_acceleration_structure_khr(command_buffer, info)
    vkCmdCopyAccelerationStructureKHR(command_buffer, info)
end

"""
Generic definition
"""
function cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info)
    vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer, info)
end

"""
Generic definition
"""
function cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info)
    vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer, info)
end

"""
Generic definition
"""
function cmd_trace_rays_khr(
    command_buffer,
    raygen_shader_binding_table,
    miss_shader_binding_table,
    hit_shader_binding_table,
    callable_shader_binding_table,
    width,
    height,
    depth,
)
    vkCmdTraceRaysKHR(
        command_buffer,
        raygen_shader_binding_table,
        miss_shader_binding_table,
        hit_shader_binding_table,
        callable_shader_binding_table,
        width,
        height,
        depth,
    )
end

"""
Generic definition
"""
function get_acceleration_structure_device_address_khr(device, info)
    vkGetAccelerationStructureDeviceAddressKHR(device, info)
end

"""
Generic definition
"""
function get_ray_tracing_capture_replay_shader_group_handles_khr(
    device,
    pipeline,
    first_group,
    group_count,
)
    _dataSize = pointer_length(data)
    pData = Ref{Cvoid}()
    @check vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
        device,
        pipeline,
        first_group,
        group_count,
        _dataSize,
        pData,
    )
    pData[]
end

"""
Generic definition
"""
function cmd_trace_rays_indirect_khr(
    command_buffer,
    raygen_shader_binding_table,
    miss_shader_binding_table,
    hit_shader_binding_table,
    callable_shader_binding_table,
    buffer,
    offset,
)
    vkCmdTraceRaysIndirectKHR(
        command_buffer,
        raygen_shader_binding_table,
        miss_shader_binding_table,
        hit_shader_binding_table,
        callable_shader_binding_table,
        buffer,
        offset,
    )
end

"""
Generic definition
"""
function get_device_acceleration_structure_compatibility_khr(device, version)
    @check vkGetDeviceAccelerationStructureCompatibilityKHR(device, version)
end

Base.convert(T::Type{Result}, e::VkResult) = T(UInt(e))
Base.convert(T::Type{VkResult}, e::Result) = T(UInt(e))
Base.convert(T::Type{StructureType}, e::VkStructureType) = T(UInt(e))
Base.convert(T::Type{VkStructureType}, e::StructureType) = T(UInt(e))
Base.convert(T::Type{ImageLayout}, e::VkImageLayout) = T(UInt(e))
Base.convert(T::Type{VkImageLayout}, e::ImageLayout) = T(UInt(e))
Base.convert(T::Type{ObjectType}, e::VkObjectType) = T(UInt(e))
Base.convert(T::Type{VkObjectType}, e::ObjectType) = T(UInt(e))
Base.convert(T::Type{VendorId}, e::VkVendorId) = T(UInt(e))
Base.convert(T::Type{VkVendorId}, e::VendorId) = T(UInt(e))
Base.convert(T::Type{PipelineCacheHeaderVersion}, e::VkPipelineCacheHeaderVersion) =
    T(UInt(e))
Base.convert(T::Type{VkPipelineCacheHeaderVersion}, e::PipelineCacheHeaderVersion) =
    T(UInt(e))
Base.convert(T::Type{SystemAllocationScope}, e::VkSystemAllocationScope) = T(UInt(e))
Base.convert(T::Type{VkSystemAllocationScope}, e::SystemAllocationScope) = T(UInt(e))
Base.convert(T::Type{InternalAllocationType}, e::VkInternalAllocationType) = T(UInt(e))
Base.convert(T::Type{VkInternalAllocationType}, e::InternalAllocationType) = T(UInt(e))
Base.convert(T::Type{Format}, e::VkFormat) = T(UInt(e))
Base.convert(T::Type{VkFormat}, e::Format) = T(UInt(e))
Base.convert(T::Type{ImageTiling}, e::VkImageTiling) = T(UInt(e))
Base.convert(T::Type{VkImageTiling}, e::ImageTiling) = T(UInt(e))
Base.convert(T::Type{ImageType}, e::VkImageType) = T(UInt(e))
Base.convert(T::Type{VkImageType}, e::ImageType) = T(UInt(e))
Base.convert(T::Type{PhysicalDeviceType}, e::VkPhysicalDeviceType) = T(UInt(e))
Base.convert(T::Type{VkPhysicalDeviceType}, e::PhysicalDeviceType) = T(UInt(e))
Base.convert(T::Type{QueryType}, e::VkQueryType) = T(UInt(e))
Base.convert(T::Type{VkQueryType}, e::QueryType) = T(UInt(e))
Base.convert(T::Type{SharingMode}, e::VkSharingMode) = T(UInt(e))
Base.convert(T::Type{VkSharingMode}, e::SharingMode) = T(UInt(e))
Base.convert(T::Type{ComponentSwizzle}, e::VkComponentSwizzle) = T(UInt(e))
Base.convert(T::Type{VkComponentSwizzle}, e::ComponentSwizzle) = T(UInt(e))
Base.convert(T::Type{ImageViewType}, e::VkImageViewType) = T(UInt(e))
Base.convert(T::Type{VkImageViewType}, e::ImageViewType) = T(UInt(e))
Base.convert(T::Type{BlendFactor}, e::VkBlendFactor) = T(UInt(e))
Base.convert(T::Type{VkBlendFactor}, e::BlendFactor) = T(UInt(e))
Base.convert(T::Type{BlendOp}, e::VkBlendOp) = T(UInt(e))
Base.convert(T::Type{VkBlendOp}, e::BlendOp) = T(UInt(e))
Base.convert(T::Type{CompareOp}, e::VkCompareOp) = T(UInt(e))
Base.convert(T::Type{VkCompareOp}, e::CompareOp) = T(UInt(e))
Base.convert(T::Type{DynamicState}, e::VkDynamicState) = T(UInt(e))
Base.convert(T::Type{VkDynamicState}, e::DynamicState) = T(UInt(e))
Base.convert(T::Type{FrontFace}, e::VkFrontFace) = T(UInt(e))
Base.convert(T::Type{VkFrontFace}, e::FrontFace) = T(UInt(e))
Base.convert(T::Type{VertexInputRate}, e::VkVertexInputRate) = T(UInt(e))
Base.convert(T::Type{VkVertexInputRate}, e::VertexInputRate) = T(UInt(e))
Base.convert(T::Type{PrimitiveTopology}, e::VkPrimitiveTopology) = T(UInt(e))
Base.convert(T::Type{VkPrimitiveTopology}, e::PrimitiveTopology) = T(UInt(e))
Base.convert(T::Type{PolygonMode}, e::VkPolygonMode) = T(UInt(e))
Base.convert(T::Type{VkPolygonMode}, e::PolygonMode) = T(UInt(e))
Base.convert(T::Type{StencilOp}, e::VkStencilOp) = T(UInt(e))
Base.convert(T::Type{VkStencilOp}, e::StencilOp) = T(UInt(e))
Base.convert(T::Type{LogicOp}, e::VkLogicOp) = T(UInt(e))
Base.convert(T::Type{VkLogicOp}, e::LogicOp) = T(UInt(e))
Base.convert(T::Type{BorderColor}, e::VkBorderColor) = T(UInt(e))
Base.convert(T::Type{VkBorderColor}, e::BorderColor) = T(UInt(e))
Base.convert(T::Type{Filter}, e::VkFilter) = T(UInt(e))
Base.convert(T::Type{VkFilter}, e::Filter) = T(UInt(e))
Base.convert(T::Type{SamplerAddressMode}, e::VkSamplerAddressMode) = T(UInt(e))
Base.convert(T::Type{VkSamplerAddressMode}, e::SamplerAddressMode) = T(UInt(e))
Base.convert(T::Type{SamplerMipmapMode}, e::VkSamplerMipmapMode) = T(UInt(e))
Base.convert(T::Type{VkSamplerMipmapMode}, e::SamplerMipmapMode) = T(UInt(e))
Base.convert(T::Type{DescriptorType}, e::VkDescriptorType) = T(UInt(e))
Base.convert(T::Type{VkDescriptorType}, e::DescriptorType) = T(UInt(e))
Base.convert(T::Type{AttachmentLoadOp}, e::VkAttachmentLoadOp) = T(UInt(e))
Base.convert(T::Type{VkAttachmentLoadOp}, e::AttachmentLoadOp) = T(UInt(e))
Base.convert(T::Type{AttachmentStoreOp}, e::VkAttachmentStoreOp) = T(UInt(e))
Base.convert(T::Type{VkAttachmentStoreOp}, e::AttachmentStoreOp) = T(UInt(e))
Base.convert(T::Type{PipelineBindPoint}, e::VkPipelineBindPoint) = T(UInt(e))
Base.convert(T::Type{VkPipelineBindPoint}, e::PipelineBindPoint) = T(UInt(e))
Base.convert(T::Type{CommandBufferLevel}, e::VkCommandBufferLevel) = T(UInt(e))
Base.convert(T::Type{VkCommandBufferLevel}, e::CommandBufferLevel) = T(UInt(e))
Base.convert(T::Type{IndexType}, e::VkIndexType) = T(UInt(e))
Base.convert(T::Type{VkIndexType}, e::IndexType) = T(UInt(e))
Base.convert(T::Type{SubpassContents}, e::VkSubpassContents) = T(UInt(e))
Base.convert(T::Type{VkSubpassContents}, e::SubpassContents) = T(UInt(e))
Base.convert(T::Type{AccessFlagBits}, e::VkAccessFlagBits) = T(UInt(e))
Base.convert(T::Type{VkAccessFlagBits}, e::AccessFlagBits) = T(UInt(e))
Base.convert(T::Type{ImageAspectFlagBits}, e::VkImageAspectFlagBits) = T(UInt(e))
Base.convert(T::Type{VkImageAspectFlagBits}, e::ImageAspectFlagBits) = T(UInt(e))
Base.convert(T::Type{FormatFeatureFlagBits}, e::VkFormatFeatureFlagBits) = T(UInt(e))
Base.convert(T::Type{VkFormatFeatureFlagBits}, e::FormatFeatureFlagBits) = T(UInt(e))
Base.convert(T::Type{ImageCreateFlagBits}, e::VkImageCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkImageCreateFlagBits}, e::ImageCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{SampleCountFlagBits}, e::VkSampleCountFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSampleCountFlagBits}, e::SampleCountFlagBits) = T(UInt(e))
Base.convert(T::Type{ImageUsageFlagBits}, e::VkImageUsageFlagBits) = T(UInt(e))
Base.convert(T::Type{VkImageUsageFlagBits}, e::ImageUsageFlagBits) = T(UInt(e))
Base.convert(T::Type{MemoryHeapFlagBits}, e::VkMemoryHeapFlagBits) = T(UInt(e))
Base.convert(T::Type{VkMemoryHeapFlagBits}, e::MemoryHeapFlagBits) = T(UInt(e))
Base.convert(T::Type{MemoryPropertyFlagBits}, e::VkMemoryPropertyFlagBits) = T(UInt(e))
Base.convert(T::Type{VkMemoryPropertyFlagBits}, e::MemoryPropertyFlagBits) = T(UInt(e))
Base.convert(T::Type{QueueFlagBits}, e::VkQueueFlagBits) = T(UInt(e))
Base.convert(T::Type{VkQueueFlagBits}, e::QueueFlagBits) = T(UInt(e))
Base.convert(T::Type{DeviceQueueCreateFlagBits}, e::VkDeviceQueueCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkDeviceQueueCreateFlagBits}, e::DeviceQueueCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{PipelineStageFlagBits}, e::VkPipelineStageFlagBits) = T(UInt(e))
Base.convert(T::Type{VkPipelineStageFlagBits}, e::PipelineStageFlagBits) = T(UInt(e))
Base.convert(T::Type{SparseMemoryBindFlagBits}, e::VkSparseMemoryBindFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSparseMemoryBindFlagBits}, e::SparseMemoryBindFlagBits) = T(UInt(e))
Base.convert(T::Type{SparseImageFormatFlagBits}, e::VkSparseImageFormatFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkSparseImageFormatFlagBits}, e::SparseImageFormatFlagBits) =
    T(UInt(e))
Base.convert(T::Type{FenceCreateFlagBits}, e::VkFenceCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkFenceCreateFlagBits}, e::FenceCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{QueryPipelineStatisticFlagBits}, e::VkQueryPipelineStatisticFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkQueryPipelineStatisticFlagBits}, e::QueryPipelineStatisticFlagBits) =
    T(UInt(e))
Base.convert(T::Type{QueryResultFlagBits}, e::VkQueryResultFlagBits) = T(UInt(e))
Base.convert(T::Type{VkQueryResultFlagBits}, e::QueryResultFlagBits) = T(UInt(e))
Base.convert(T::Type{BufferCreateFlagBits}, e::VkBufferCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkBufferCreateFlagBits}, e::BufferCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{BufferUsageFlagBits}, e::VkBufferUsageFlagBits) = T(UInt(e))
Base.convert(T::Type{VkBufferUsageFlagBits}, e::BufferUsageFlagBits) = T(UInt(e))
Base.convert(T::Type{ImageViewCreateFlagBits}, e::VkImageViewCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkImageViewCreateFlagBits}, e::ImageViewCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{ShaderModuleCreateFlagBits}, e::VkShaderModuleCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkShaderModuleCreateFlagBits}, e::ShaderModuleCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{PipelineCacheCreateFlagBits}, e::VkPipelineCacheCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkPipelineCacheCreateFlagBits}, e::PipelineCacheCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{ColorComponentFlagBits}, e::VkColorComponentFlagBits) = T(UInt(e))
Base.convert(T::Type{VkColorComponentFlagBits}, e::ColorComponentFlagBits) = T(UInt(e))
Base.convert(T::Type{PipelineCreateFlagBits}, e::VkPipelineCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkPipelineCreateFlagBits}, e::PipelineCreateFlagBits) = T(UInt(e))
Base.convert(
    T::Type{PipelineShaderStageCreateFlagBits},
    e::VkPipelineShaderStageCreateFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkPipelineShaderStageCreateFlagBits},
    e::PipelineShaderStageCreateFlagBits,
) = T(UInt(e))
Base.convert(T::Type{ShaderStageFlagBits}, e::VkShaderStageFlagBits) = T(UInt(e))
Base.convert(T::Type{VkShaderStageFlagBits}, e::ShaderStageFlagBits) = T(UInt(e))
Base.convert(T::Type{CullModeFlagBits}, e::VkCullModeFlagBits) = T(UInt(e))
Base.convert(T::Type{VkCullModeFlagBits}, e::CullModeFlagBits) = T(UInt(e))
Base.convert(T::Type{SamplerCreateFlagBits}, e::VkSamplerCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSamplerCreateFlagBits}, e::SamplerCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{DescriptorPoolCreateFlagBits}, e::VkDescriptorPoolCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkDescriptorPoolCreateFlagBits}, e::DescriptorPoolCreateFlagBits) =
    T(UInt(e))
Base.convert(
    T::Type{DescriptorSetLayoutCreateFlagBits},
    e::VkDescriptorSetLayoutCreateFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkDescriptorSetLayoutCreateFlagBits},
    e::DescriptorSetLayoutCreateFlagBits,
) = T(UInt(e))
Base.convert(T::Type{AttachmentDescriptionFlagBits}, e::VkAttachmentDescriptionFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkAttachmentDescriptionFlagBits}, e::AttachmentDescriptionFlagBits) =
    T(UInt(e))
Base.convert(T::Type{DependencyFlagBits}, e::VkDependencyFlagBits) = T(UInt(e))
Base.convert(T::Type{VkDependencyFlagBits}, e::DependencyFlagBits) = T(UInt(e))
Base.convert(T::Type{FramebufferCreateFlagBits}, e::VkFramebufferCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkFramebufferCreateFlagBits}, e::FramebufferCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{RenderPassCreateFlagBits}, e::VkRenderPassCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkRenderPassCreateFlagBits}, e::RenderPassCreateFlagBits) = T(UInt(e))
Base.convert(T::Type{SubpassDescriptionFlagBits}, e::VkSubpassDescriptionFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkSubpassDescriptionFlagBits}, e::SubpassDescriptionFlagBits) =
    T(UInt(e))
Base.convert(T::Type{CommandPoolCreateFlagBits}, e::VkCommandPoolCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkCommandPoolCreateFlagBits}, e::CommandPoolCreateFlagBits) =
    T(UInt(e))
Base.convert(T::Type{CommandPoolResetFlagBits}, e::VkCommandPoolResetFlagBits) = T(UInt(e))
Base.convert(T::Type{VkCommandPoolResetFlagBits}, e::CommandPoolResetFlagBits) = T(UInt(e))
Base.convert(T::Type{CommandBufferUsageFlagBits}, e::VkCommandBufferUsageFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkCommandBufferUsageFlagBits}, e::CommandBufferUsageFlagBits) =
    T(UInt(e))
Base.convert(T::Type{QueryControlFlagBits}, e::VkQueryControlFlagBits) = T(UInt(e))
Base.convert(T::Type{VkQueryControlFlagBits}, e::QueryControlFlagBits) = T(UInt(e))
Base.convert(T::Type{CommandBufferResetFlagBits}, e::VkCommandBufferResetFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkCommandBufferResetFlagBits}, e::CommandBufferResetFlagBits) =
    T(UInt(e))
Base.convert(T::Type{StencilFaceFlagBits}, e::VkStencilFaceFlagBits) = T(UInt(e))
Base.convert(T::Type{VkStencilFaceFlagBits}, e::StencilFaceFlagBits) = T(UInt(e))
Base.convert(T::Type{PointClippingBehavior}, e::VkPointClippingBehavior) = T(UInt(e))
Base.convert(T::Type{VkPointClippingBehavior}, e::PointClippingBehavior) = T(UInt(e))
Base.convert(T::Type{TessellationDomainOrigin}, e::VkTessellationDomainOrigin) = T(UInt(e))
Base.convert(T::Type{VkTessellationDomainOrigin}, e::TessellationDomainOrigin) = T(UInt(e))
Base.convert(T::Type{SamplerYcbcrModelConversion}, e::VkSamplerYcbcrModelConversion) =
    T(UInt(e))
Base.convert(T::Type{VkSamplerYcbcrModelConversion}, e::SamplerYcbcrModelConversion) =
    T(UInt(e))
Base.convert(T::Type{SamplerYcbcrRange}, e::VkSamplerYcbcrRange) = T(UInt(e))
Base.convert(T::Type{VkSamplerYcbcrRange}, e::SamplerYcbcrRange) = T(UInt(e))
Base.convert(T::Type{ChromaLocation}, e::VkChromaLocation) = T(UInt(e))
Base.convert(T::Type{VkChromaLocation}, e::ChromaLocation) = T(UInt(e))
Base.convert(T::Type{DescriptorUpdateTemplateType}, e::VkDescriptorUpdateTemplateType) =
    T(UInt(e))
Base.convert(T::Type{VkDescriptorUpdateTemplateType}, e::DescriptorUpdateTemplateType) =
    T(UInt(e))
Base.convert(T::Type{SubgroupFeatureFlagBits}, e::VkSubgroupFeatureFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSubgroupFeatureFlagBits}, e::SubgroupFeatureFlagBits) = T(UInt(e))
Base.convert(T::Type{PeerMemoryFeatureFlagBits}, e::VkPeerMemoryFeatureFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkPeerMemoryFeatureFlagBits}, e::PeerMemoryFeatureFlagBits) =
    T(UInt(e))
Base.convert(T::Type{MemoryAllocateFlagBits}, e::VkMemoryAllocateFlagBits) = T(UInt(e))
Base.convert(T::Type{VkMemoryAllocateFlagBits}, e::MemoryAllocateFlagBits) = T(UInt(e))
Base.convert(
    T::Type{ExternalMemoryHandleTypeFlagBits},
    e::VkExternalMemoryHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalMemoryHandleTypeFlagBits},
    e::ExternalMemoryHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(T::Type{ExternalMemoryFeatureFlagBits}, e::VkExternalMemoryFeatureFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkExternalMemoryFeatureFlagBits}, e::ExternalMemoryFeatureFlagBits) =
    T(UInt(e))
Base.convert(
    T::Type{ExternalFenceHandleTypeFlagBits},
    e::VkExternalFenceHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalFenceHandleTypeFlagBits},
    e::ExternalFenceHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(T::Type{ExternalFenceFeatureFlagBits}, e::VkExternalFenceFeatureFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkExternalFenceFeatureFlagBits}, e::ExternalFenceFeatureFlagBits) =
    T(UInt(e))
Base.convert(T::Type{FenceImportFlagBits}, e::VkFenceImportFlagBits) = T(UInt(e))
Base.convert(T::Type{VkFenceImportFlagBits}, e::FenceImportFlagBits) = T(UInt(e))
Base.convert(T::Type{SemaphoreImportFlagBits}, e::VkSemaphoreImportFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSemaphoreImportFlagBits}, e::SemaphoreImportFlagBits) = T(UInt(e))
Base.convert(
    T::Type{ExternalSemaphoreHandleTypeFlagBits},
    e::VkExternalSemaphoreHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalSemaphoreHandleTypeFlagBits},
    e::ExternalSemaphoreHandleTypeFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{ExternalSemaphoreFeatureFlagBits},
    e::VkExternalSemaphoreFeatureFlagBits,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalSemaphoreFeatureFlagBits},
    e::ExternalSemaphoreFeatureFlagBits,
) = T(UInt(e))
Base.convert(T::Type{DriverId}, e::VkDriverId) = T(UInt(e))
Base.convert(T::Type{VkDriverId}, e::DriverId) = T(UInt(e))
Base.convert(
    T::Type{ShaderFloatControlsIndependence},
    e::VkShaderFloatControlsIndependence,
) = T(UInt(e))
Base.convert(
    T::Type{VkShaderFloatControlsIndependence},
    e::ShaderFloatControlsIndependence,
) = T(UInt(e))
Base.convert(T::Type{SamplerReductionMode}, e::VkSamplerReductionMode) = T(UInt(e))
Base.convert(T::Type{VkSamplerReductionMode}, e::SamplerReductionMode) = T(UInt(e))
Base.convert(T::Type{SemaphoreType}, e::VkSemaphoreType) = T(UInt(e))
Base.convert(T::Type{VkSemaphoreType}, e::SemaphoreType) = T(UInt(e))
Base.convert(T::Type{ResolveModeFlagBits}, e::VkResolveModeFlagBits) = T(UInt(e))
Base.convert(T::Type{VkResolveModeFlagBits}, e::ResolveModeFlagBits) = T(UInt(e))
Base.convert(T::Type{DescriptorBindingFlagBits}, e::VkDescriptorBindingFlagBits) =
    T(UInt(e))
Base.convert(T::Type{VkDescriptorBindingFlagBits}, e::DescriptorBindingFlagBits) =
    T(UInt(e))
Base.convert(T::Type{SemaphoreWaitFlagBits}, e::VkSemaphoreWaitFlagBits) = T(UInt(e))
Base.convert(T::Type{VkSemaphoreWaitFlagBits}, e::SemaphoreWaitFlagBits) = T(UInt(e))
Base.convert(T::Type{PresentModeKHR}, e::VkPresentModeKHR) = T(UInt(e))
Base.convert(T::Type{VkPresentModeKHR}, e::PresentModeKHR) = T(UInt(e))
Base.convert(T::Type{ColorSpaceKHR}, e::VkColorSpaceKHR) = T(UInt(e))
Base.convert(T::Type{VkColorSpaceKHR}, e::ColorSpaceKHR) = T(UInt(e))
Base.convert(T::Type{SurfaceTransformFlagBitsKHR}, e::VkSurfaceTransformFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{VkSurfaceTransformFlagBitsKHR}, e::SurfaceTransformFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{CompositeAlphaFlagBitsKHR}, e::VkCompositeAlphaFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{VkCompositeAlphaFlagBitsKHR}, e::CompositeAlphaFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{SwapchainCreateFlagBitsKHR}, e::VkSwapchainCreateFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{VkSwapchainCreateFlagBitsKHR}, e::SwapchainCreateFlagBitsKHR) =
    T(UInt(e))
Base.convert(
    T::Type{DeviceGroupPresentModeFlagBitsKHR},
    e::VkDeviceGroupPresentModeFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkDeviceGroupPresentModeFlagBitsKHR},
    e::DeviceGroupPresentModeFlagBitsKHR,
) = T(UInt(e))
Base.convert(T::Type{DisplayPlaneAlphaFlagBitsKHR}, e::VkDisplayPlaneAlphaFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{VkDisplayPlaneAlphaFlagBitsKHR}, e::DisplayPlaneAlphaFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{PerformanceCounterUnitKHR}, e::VkPerformanceCounterUnitKHR) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceCounterUnitKHR}, e::PerformanceCounterUnitKHR) =
    T(UInt(e))
Base.convert(T::Type{PerformanceCounterScopeKHR}, e::VkPerformanceCounterScopeKHR) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceCounterScopeKHR}, e::PerformanceCounterScopeKHR) =
    T(UInt(e))
Base.convert(T::Type{PerformanceCounterStorageKHR}, e::VkPerformanceCounterStorageKHR) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceCounterStorageKHR}, e::PerformanceCounterStorageKHR) =
    T(UInt(e))
Base.convert(
    T::Type{PerformanceCounterDescriptionFlagBitsKHR},
    e::VkPerformanceCounterDescriptionFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkPerformanceCounterDescriptionFlagBitsKHR},
    e::PerformanceCounterDescriptionFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{AcquireProfilingLockFlagBitsKHR},
    e::VkAcquireProfilingLockFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkAcquireProfilingLockFlagBitsKHR},
    e::AcquireProfilingLockFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{PipelineExecutableStatisticFormatKHR},
    e::VkPipelineExecutableStatisticFormatKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkPipelineExecutableStatisticFormatKHR},
    e::PipelineExecutableStatisticFormatKHR,
) = T(UInt(e))
Base.convert(T::Type{DebugReportObjectTypeEXT}, e::VkDebugReportObjectTypeEXT) = T(UInt(e))
Base.convert(T::Type{VkDebugReportObjectTypeEXT}, e::DebugReportObjectTypeEXT) = T(UInt(e))
Base.convert(T::Type{DebugReportFlagBitsEXT}, e::VkDebugReportFlagBitsEXT) = T(UInt(e))
Base.convert(T::Type{VkDebugReportFlagBitsEXT}, e::DebugReportFlagBitsEXT) = T(UInt(e))
Base.convert(T::Type{RasterizationOrderAMD}, e::VkRasterizationOrderAMD) = T(UInt(e))
Base.convert(T::Type{VkRasterizationOrderAMD}, e::RasterizationOrderAMD) = T(UInt(e))
Base.convert(T::Type{ShaderInfoTypeAMD}, e::VkShaderInfoTypeAMD) = T(UInt(e))
Base.convert(T::Type{VkShaderInfoTypeAMD}, e::ShaderInfoTypeAMD) = T(UInt(e))
Base.convert(
    T::Type{ExternalMemoryHandleTypeFlagBitsNV},
    e::VkExternalMemoryHandleTypeFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalMemoryHandleTypeFlagBitsNV},
    e::ExternalMemoryHandleTypeFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{ExternalMemoryFeatureFlagBitsNV},
    e::VkExternalMemoryFeatureFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{VkExternalMemoryFeatureFlagBitsNV},
    e::ExternalMemoryFeatureFlagBitsNV,
) = T(UInt(e))
Base.convert(T::Type{ValidationCheckEXT}, e::VkValidationCheckEXT) = T(UInt(e))
Base.convert(T::Type{VkValidationCheckEXT}, e::ValidationCheckEXT) = T(UInt(e))
Base.convert(
    T::Type{ConditionalRenderingFlagBitsEXT},
    e::VkConditionalRenderingFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkConditionalRenderingFlagBitsEXT},
    e::ConditionalRenderingFlagBitsEXT,
) = T(UInt(e))
Base.convert(T::Type{SurfaceCounterFlagBitsEXT}, e::VkSurfaceCounterFlagBitsEXT) =
    T(UInt(e))
Base.convert(T::Type{VkSurfaceCounterFlagBitsEXT}, e::SurfaceCounterFlagBitsEXT) =
    T(UInt(e))
Base.convert(T::Type{DisplayPowerStateEXT}, e::VkDisplayPowerStateEXT) = T(UInt(e))
Base.convert(T::Type{VkDisplayPowerStateEXT}, e::DisplayPowerStateEXT) = T(UInt(e))
Base.convert(T::Type{DeviceEventTypeEXT}, e::VkDeviceEventTypeEXT) = T(UInt(e))
Base.convert(T::Type{VkDeviceEventTypeEXT}, e::DeviceEventTypeEXT) = T(UInt(e))
Base.convert(T::Type{DisplayEventTypeEXT}, e::VkDisplayEventTypeEXT) = T(UInt(e))
Base.convert(T::Type{VkDisplayEventTypeEXT}, e::DisplayEventTypeEXT) = T(UInt(e))
Base.convert(T::Type{ViewportCoordinateSwizzleNV}, e::VkViewportCoordinateSwizzleNV) =
    T(UInt(e))
Base.convert(T::Type{VkViewportCoordinateSwizzleNV}, e::ViewportCoordinateSwizzleNV) =
    T(UInt(e))
Base.convert(T::Type{DiscardRectangleModeEXT}, e::VkDiscardRectangleModeEXT) = T(UInt(e))
Base.convert(T::Type{VkDiscardRectangleModeEXT}, e::DiscardRectangleModeEXT) = T(UInt(e))
Base.convert(
    T::Type{ConservativeRasterizationModeEXT},
    e::VkConservativeRasterizationModeEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkConservativeRasterizationModeEXT},
    e::ConservativeRasterizationModeEXT,
) = T(UInt(e))
Base.convert(
    T::Type{DebugUtilsMessageSeverityFlagBitsEXT},
    e::VkDebugUtilsMessageSeverityFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkDebugUtilsMessageSeverityFlagBitsEXT},
    e::DebugUtilsMessageSeverityFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{DebugUtilsMessageTypeFlagBitsEXT},
    e::VkDebugUtilsMessageTypeFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkDebugUtilsMessageTypeFlagBitsEXT},
    e::DebugUtilsMessageTypeFlagBitsEXT,
) = T(UInt(e))
Base.convert(T::Type{BlendOverlapEXT}, e::VkBlendOverlapEXT) = T(UInt(e))
Base.convert(T::Type{VkBlendOverlapEXT}, e::BlendOverlapEXT) = T(UInt(e))
Base.convert(T::Type{CoverageModulationModeNV}, e::VkCoverageModulationModeNV) = T(UInt(e))
Base.convert(T::Type{VkCoverageModulationModeNV}, e::CoverageModulationModeNV) = T(UInt(e))
Base.convert(
    T::Type{ValidationCacheHeaderVersionEXT},
    e::VkValidationCacheHeaderVersionEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkValidationCacheHeaderVersionEXT},
    e::ValidationCacheHeaderVersionEXT,
) = T(UInt(e))
Base.convert(T::Type{ShadingRatePaletteEntryNV}, e::VkShadingRatePaletteEntryNV) =
    T(UInt(e))
Base.convert(T::Type{VkShadingRatePaletteEntryNV}, e::ShadingRatePaletteEntryNV) =
    T(UInt(e))
Base.convert(T::Type{CoarseSampleOrderTypeNV}, e::VkCoarseSampleOrderTypeNV) = T(UInt(e))
Base.convert(T::Type{VkCoarseSampleOrderTypeNV}, e::CoarseSampleOrderTypeNV) = T(UInt(e))
Base.convert(T::Type{RayTracingShaderGroupTypeKHR}, e::VkRayTracingShaderGroupTypeKHR) =
    T(UInt(e))
Base.convert(T::Type{VkRayTracingShaderGroupTypeKHR}, e::RayTracingShaderGroupTypeKHR) =
    T(UInt(e))
Base.convert(T::Type{GeometryTypeKHR}, e::VkGeometryTypeKHR) = T(UInt(e))
Base.convert(T::Type{VkGeometryTypeKHR}, e::GeometryTypeKHR) = T(UInt(e))
Base.convert(T::Type{AccelerationStructureTypeKHR}, e::VkAccelerationStructureTypeKHR) =
    T(UInt(e))
Base.convert(T::Type{VkAccelerationStructureTypeKHR}, e::AccelerationStructureTypeKHR) =
    T(UInt(e))
Base.convert(
    T::Type{CopyAccelerationStructureModeKHR},
    e::VkCopyAccelerationStructureModeKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkCopyAccelerationStructureModeKHR},
    e::CopyAccelerationStructureModeKHR,
) = T(UInt(e))
Base.convert(
    T::Type{AccelerationStructureMemoryRequirementsTypeKHR},
    e::VkAccelerationStructureMemoryRequirementsTypeKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkAccelerationStructureMemoryRequirementsTypeKHR},
    e::AccelerationStructureMemoryRequirementsTypeKHR,
) = T(UInt(e))
Base.convert(T::Type{GeometryFlagBitsKHR}, e::VkGeometryFlagBitsKHR) = T(UInt(e))
Base.convert(T::Type{VkGeometryFlagBitsKHR}, e::GeometryFlagBitsKHR) = T(UInt(e))
Base.convert(T::Type{GeometryInstanceFlagBitsKHR}, e::VkGeometryInstanceFlagBitsKHR) =
    T(UInt(e))
Base.convert(T::Type{VkGeometryInstanceFlagBitsKHR}, e::GeometryInstanceFlagBitsKHR) =
    T(UInt(e))
Base.convert(
    T::Type{BuildAccelerationStructureFlagBitsKHR},
    e::VkBuildAccelerationStructureFlagBitsKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkBuildAccelerationStructureFlagBitsKHR},
    e::BuildAccelerationStructureFlagBitsKHR,
) = T(UInt(e))
Base.convert(T::Type{QueueGlobalPriorityEXT}, e::VkQueueGlobalPriorityEXT) = T(UInt(e))
Base.convert(T::Type{VkQueueGlobalPriorityEXT}, e::QueueGlobalPriorityEXT) = T(UInt(e))
Base.convert(
    T::Type{PipelineCompilerControlFlagBitsAMD},
    e::VkPipelineCompilerControlFlagBitsAMD,
) = T(UInt(e))
Base.convert(
    T::Type{VkPipelineCompilerControlFlagBitsAMD},
    e::PipelineCompilerControlFlagBitsAMD,
) = T(UInt(e))
Base.convert(T::Type{TimeDomainEXT}, e::VkTimeDomainEXT) = T(UInt(e))
Base.convert(T::Type{VkTimeDomainEXT}, e::TimeDomainEXT) = T(UInt(e))
Base.convert(
    T::Type{MemoryOverallocationBehaviorAMD},
    e::VkMemoryOverallocationBehaviorAMD,
) = T(UInt(e))
Base.convert(
    T::Type{VkMemoryOverallocationBehaviorAMD},
    e::MemoryOverallocationBehaviorAMD,
) = T(UInt(e))
Base.convert(
    T::Type{PipelineCreationFeedbackFlagBitsEXT},
    e::VkPipelineCreationFeedbackFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkPipelineCreationFeedbackFlagBitsEXT},
    e::PipelineCreationFeedbackFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{PerformanceConfigurationTypeINTEL},
    e::VkPerformanceConfigurationTypeINTEL,
) = T(UInt(e))
Base.convert(
    T::Type{VkPerformanceConfigurationTypeINTEL},
    e::PerformanceConfigurationTypeINTEL,
) = T(UInt(e))
Base.convert(T::Type{QueryPoolSamplingModeINTEL}, e::VkQueryPoolSamplingModeINTEL) =
    T(UInt(e))
Base.convert(T::Type{VkQueryPoolSamplingModeINTEL}, e::QueryPoolSamplingModeINTEL) =
    T(UInt(e))
Base.convert(T::Type{PerformanceOverrideTypeINTEL}, e::VkPerformanceOverrideTypeINTEL) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceOverrideTypeINTEL}, e::PerformanceOverrideTypeINTEL) =
    T(UInt(e))
Base.convert(T::Type{PerformanceParameterTypeINTEL}, e::VkPerformanceParameterTypeINTEL) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceParameterTypeINTEL}, e::PerformanceParameterTypeINTEL) =
    T(UInt(e))
Base.convert(T::Type{PerformanceValueTypeINTEL}, e::VkPerformanceValueTypeINTEL) =
    T(UInt(e))
Base.convert(T::Type{VkPerformanceValueTypeINTEL}, e::PerformanceValueTypeINTEL) =
    T(UInt(e))
Base.convert(
    T::Type{ShaderCorePropertiesFlagBitsAMD},
    e::VkShaderCorePropertiesFlagBitsAMD,
) = T(UInt(e))
Base.convert(
    T::Type{VkShaderCorePropertiesFlagBitsAMD},
    e::ShaderCorePropertiesFlagBitsAMD,
) = T(UInt(e))
Base.convert(T::Type{ToolPurposeFlagBitsEXT}, e::VkToolPurposeFlagBitsEXT) = T(UInt(e))
Base.convert(T::Type{VkToolPurposeFlagBitsEXT}, e::ToolPurposeFlagBitsEXT) = T(UInt(e))
Base.convert(T::Type{ValidationFeatureEnableEXT}, e::VkValidationFeatureEnableEXT) =
    T(UInt(e))
Base.convert(T::Type{VkValidationFeatureEnableEXT}, e::ValidationFeatureEnableEXT) =
    T(UInt(e))
Base.convert(T::Type{ValidationFeatureDisableEXT}, e::VkValidationFeatureDisableEXT) =
    T(UInt(e))
Base.convert(T::Type{VkValidationFeatureDisableEXT}, e::ValidationFeatureDisableEXT) =
    T(UInt(e))
Base.convert(T::Type{ComponentTypeNV}, e::VkComponentTypeNV) = T(UInt(e))
Base.convert(T::Type{VkComponentTypeNV}, e::ComponentTypeNV) = T(UInt(e))
Base.convert(T::Type{ScopeNV}, e::VkScopeNV) = T(UInt(e))
Base.convert(T::Type{VkScopeNV}, e::ScopeNV) = T(UInt(e))
Base.convert(T::Type{CoverageReductionModeNV}, e::VkCoverageReductionModeNV) = T(UInt(e))
Base.convert(T::Type{VkCoverageReductionModeNV}, e::CoverageReductionModeNV) = T(UInt(e))
Base.convert(T::Type{LineRasterizationModeEXT}, e::VkLineRasterizationModeEXT) = T(UInt(e))
Base.convert(T::Type{VkLineRasterizationModeEXT}, e::LineRasterizationModeEXT) = T(UInt(e))
Base.convert(T::Type{IndirectCommandsTokenTypeNV}, e::VkIndirectCommandsTokenTypeNV) =
    T(UInt(e))
Base.convert(T::Type{VkIndirectCommandsTokenTypeNV}, e::IndirectCommandsTokenTypeNV) =
    T(UInt(e))
Base.convert(T::Type{IndirectStateFlagBitsNV}, e::VkIndirectStateFlagBitsNV) = T(UInt(e))
Base.convert(T::Type{VkIndirectStateFlagBitsNV}, e::IndirectStateFlagBitsNV) = T(UInt(e))
Base.convert(
    T::Type{IndirectCommandsLayoutUsageFlagBitsNV},
    e::VkIndirectCommandsLayoutUsageFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{VkIndirectCommandsLayoutUsageFlagBitsNV},
    e::IndirectCommandsLayoutUsageFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{PrivateDataSlotCreateFlagBitsEXT},
    e::VkPrivateDataSlotCreateFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{VkPrivateDataSlotCreateFlagBitsEXT},
    e::PrivateDataSlotCreateFlagBitsEXT,
) = T(UInt(e))
Base.convert(
    T::Type{DeviceDiagnosticsConfigFlagBitsNV},
    e::VkDeviceDiagnosticsConfigFlagBitsNV,
) = T(UInt(e))
Base.convert(
    T::Type{VkDeviceDiagnosticsConfigFlagBitsNV},
    e::DeviceDiagnosticsConfigFlagBitsNV,
) = T(UInt(e))
Base.convert(T::Type{FullScreenExclusiveEXT}, e::VkFullScreenExclusiveEXT) = T(UInt(e))
Base.convert(T::Type{VkFullScreenExclusiveEXT}, e::FullScreenExclusiveEXT) = T(UInt(e))
Base.convert(
    T::Type{AccelerationStructureBuildTypeKHR},
    e::VkAccelerationStructureBuildTypeKHR,
) = T(UInt(e))
Base.convert(
    T::Type{VkAccelerationStructureBuildTypeKHR},
    e::AccelerationStructureBuildTypeKHR,
) = T(UInt(e))


export VULKAN_H_,
    VULKAN_CORE_H_,
    VERSION_1_0,
    HEADER_VERSION,
    NULL_HANDLE,
    ATTACHMENT_UNUSED,
    FALSE,
    LOD_CLAMP_NONE,
    QUEUE_FAMILY_IGNORED,
    REMAINING_ARRAY_LAYERS,
    REMAINING_MIP_LEVELS,
    SUBPASS_EXTERNAL,
    TRUE,
    WHOLE_SIZE,
    MAX_MEMORY_TYPES,
    MAX_MEMORY_HEAPS,
    MAX_PHYSICAL_DEVICE_NAME_SIZE,
    UUID_SIZE,
    MAX_EXTENSION_NAME_SIZE,
    MAX_DESCRIPTION_SIZE,
    VERSION_1_1,
    MAX_DEVICE_GROUP_SIZE,
    LUID_SIZE,
    QUEUE_FAMILY_EXTERNAL,
    VERSION_1_2,
    MAX_DRIVER_NAME_SIZE,
    MAX_DRIVER_INFO_SIZE,
    KHR_surface,
    KHR_SURFACE_SPEC_VERSION,
    KHR_SURFACE_EXTENSION_NAME,
    KHR_swapchain,
    KHR_SWAPCHAIN_SPEC_VERSION,
    KHR_SWAPCHAIN_EXTENSION_NAME,
    KHR_display,
    KHR_DISPLAY_SPEC_VERSION,
    KHR_DISPLAY_EXTENSION_NAME,
    KHR_display_swapchain,
    KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION,
    KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME,
    KHR_sampler_mirror_clamp_to_edge,
    KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION,
    KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,
    KHR_multiview,
    KHR_MULTIVIEW_SPEC_VERSION,
    KHR_MULTIVIEW_EXTENSION_NAME,
    KHR_get_physical_device_properties2,
    KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION,
    KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
    KHR_device_group,
    KHR_DEVICE_GROUP_SPEC_VERSION,
    KHR_DEVICE_GROUP_EXTENSION_NAME,
    KHR_shader_draw_parameters,
    KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION,
    KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,
    KHR_maintenance1,
    KHR_MAINTENANCE1_SPEC_VERSION,
    KHR_MAINTENANCE1_EXTENSION_NAME,
    KHR_device_group_creation,
    KHR_DEVICE_GROUP_CREATION_SPEC_VERSION,
    KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME,
    KHR_external_memory_capabilities,
    KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
    KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
    KHR_external_memory,
    KHR_EXTERNAL_MEMORY_SPEC_VERSION,
    KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
    KHR_external_memory_fd,
    KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION,
    KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME,
    KHR_external_semaphore_capabilities,
    KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION,
    KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
    KHR_external_semaphore,
    KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION,
    KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME,
    KHR_external_semaphore_fd,
    KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION,
    KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME,
    KHR_push_descriptor,
    KHR_PUSH_DESCRIPTOR_SPEC_VERSION,
    KHR_PUSH_DESCRIPTOR_EXTENSION_NAME,
    KHR_shader_float16_int8,
    KHR_SHADER_FLOAT16_INT8_SPEC_VERSION,
    KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME,
    KHR_16bit_storage,
    KHR_16BIT_STORAGE_SPEC_VERSION,
    KHR_16BIT_STORAGE_EXTENSION_NAME,
    KHR_incremental_present,
    KHR_INCREMENTAL_PRESENT_SPEC_VERSION,
    KHR_INCREMENTAL_PRESENT_EXTENSION_NAME,
    KHR_descriptor_update_template,
    KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION,
    KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME,
    KHR_imageless_framebuffer,
    KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION,
    KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME,
    KHR_create_renderpass2,
    KHR_CREATE_RENDERPASS_2_SPEC_VERSION,
    KHR_CREATE_RENDERPASS_2_EXTENSION_NAME,
    KHR_shared_presentable_image,
    KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION,
    KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME,
    KHR_external_fence_capabilities,
    KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION,
    KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
    KHR_external_fence,
    KHR_EXTERNAL_FENCE_SPEC_VERSION,
    KHR_EXTERNAL_FENCE_EXTENSION_NAME,
    KHR_external_fence_fd,
    KHR_EXTERNAL_FENCE_FD_SPEC_VERSION,
    KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME,
    KHR_performance_query,
    KHR_PERFORMANCE_QUERY_SPEC_VERSION,
    KHR_PERFORMANCE_QUERY_EXTENSION_NAME,
    KHR_maintenance2,
    KHR_MAINTENANCE2_SPEC_VERSION,
    KHR_MAINTENANCE2_EXTENSION_NAME,
    KHR_get_surface_capabilities2,
    KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION,
    KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME,
    KHR_variable_pointers,
    KHR_VARIABLE_POINTERS_SPEC_VERSION,
    KHR_VARIABLE_POINTERS_EXTENSION_NAME,
    KHR_get_display_properties2,
    KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION,
    KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME,
    KHR_dedicated_allocation,
    KHR_DEDICATED_ALLOCATION_SPEC_VERSION,
    KHR_DEDICATED_ALLOCATION_EXTENSION_NAME,
    KHR_storage_buffer_storage_class,
    KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION,
    KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME,
    KHR_relaxed_block_layout,
    KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION,
    KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME,
    KHR_get_memory_requirements2,
    KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION,
    KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
    KHR_image_format_list,
    KHR_IMAGE_FORMAT_LIST_SPEC_VERSION,
    KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME,
    KHR_sampler_ycbcr_conversion,
    KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION,
    KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
    KHR_bind_memory2,
    KHR_BIND_MEMORY_2_SPEC_VERSION,
    KHR_BIND_MEMORY_2_EXTENSION_NAME,
    KHR_maintenance3,
    KHR_MAINTENANCE3_SPEC_VERSION,
    KHR_MAINTENANCE3_EXTENSION_NAME,
    KHR_draw_indirect_count,
    KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION,
    KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
    KHR_shader_subgroup_extended_types,
    KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION,
    KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME,
    KHR_8bit_storage,
    KHR_8BIT_STORAGE_SPEC_VERSION,
    KHR_8BIT_STORAGE_EXTENSION_NAME,
    KHR_shader_atomic_int64,
    KHR_SHADER_ATOMIC_INT64_SPEC_VERSION,
    KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME,
    KHR_shader_clock,
    KHR_SHADER_CLOCK_SPEC_VERSION,
    KHR_SHADER_CLOCK_EXTENSION_NAME,
    KHR_driver_properties,
    KHR_DRIVER_PROPERTIES_SPEC_VERSION,
    KHR_DRIVER_PROPERTIES_EXTENSION_NAME,
    KHR_shader_float_controls,
    KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION,
    KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME,
    KHR_depth_stencil_resolve,
    KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION,
    KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME,
    KHR_swapchain_mutable_format,
    KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION,
    KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME,
    KHR_timeline_semaphore,
    KHR_TIMELINE_SEMAPHORE_SPEC_VERSION,
    KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME,
    KHR_vulkan_memory_model,
    KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION,
    KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
    KHR_spirv_1_4,
    KHR_SPIRV_1_4_SPEC_VERSION,
    KHR_SPIRV_1_4_EXTENSION_NAME,
    KHR_surface_protected_capabilities,
    KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION,
    KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME,
    KHR_separate_depth_stencil_layouts,
    KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION,
    KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME,
    KHR_uniform_buffer_standard_layout,
    KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION,
    KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME,
    KHR_buffer_device_address,
    KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
    KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
    KHR_pipeline_executable_properties,
    KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION,
    KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME,
    KHR_shader_non_semantic_info,
    KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION,
    KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME,
    EXT_debug_report,
    EXT_DEBUG_REPORT_SPEC_VERSION,
    EXT_DEBUG_REPORT_EXTENSION_NAME,
    NV_glsl_shader,
    NV_GLSL_SHADER_SPEC_VERSION,
    NV_GLSL_SHADER_EXTENSION_NAME,
    EXT_depth_range_unrestricted,
    EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION,
    EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME,
    IMG_filter_cubic,
    IMG_FILTER_CUBIC_SPEC_VERSION,
    IMG_FILTER_CUBIC_EXTENSION_NAME,
    AMD_rasterization_order,
    AMD_RASTERIZATION_ORDER_SPEC_VERSION,
    AMD_RASTERIZATION_ORDER_EXTENSION_NAME,
    AMD_shader_trinary_minmax,
    AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION,
    AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME,
    AMD_shader_explicit_vertex_parameter,
    AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION,
    AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME,
    EXT_debug_marker,
    EXT_DEBUG_MARKER_SPEC_VERSION,
    EXT_DEBUG_MARKER_EXTENSION_NAME,
    AMD_gcn_shader,
    AMD_GCN_SHADER_SPEC_VERSION,
    AMD_GCN_SHADER_EXTENSION_NAME,
    NV_dedicated_allocation,
    NV_DEDICATED_ALLOCATION_SPEC_VERSION,
    NV_DEDICATED_ALLOCATION_EXTENSION_NAME,
    EXT_transform_feedback,
    EXT_TRANSFORM_FEEDBACK_SPEC_VERSION,
    EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,
    NVX_image_view_handle,
    NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION,
    NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME,
    AMD_draw_indirect_count,
    AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION,
    AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
    AMD_negative_viewport_height,
    AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION,
    AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME,
    AMD_gpu_shader_half_float,
    AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION,
    AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME,
    AMD_shader_ballot,
    AMD_SHADER_BALLOT_SPEC_VERSION,
    AMD_SHADER_BALLOT_EXTENSION_NAME,
    AMD_texture_gather_bias_lod,
    AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION,
    AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME,
    AMD_shader_info,
    AMD_SHADER_INFO_SPEC_VERSION,
    AMD_SHADER_INFO_EXTENSION_NAME,
    AMD_shader_image_load_store_lod,
    AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION,
    AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME,
    NV_corner_sampled_image,
    NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION,
    NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
    IMG_format_pvrtc,
    IMG_FORMAT_PVRTC_SPEC_VERSION,
    IMG_FORMAT_PVRTC_EXTENSION_NAME,
    NV_external_memory_capabilities,
    NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
    NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
    NV_external_memory,
    NV_EXTERNAL_MEMORY_SPEC_VERSION,
    NV_EXTERNAL_MEMORY_EXTENSION_NAME,
    EXT_validation_flags,
    EXT_VALIDATION_FLAGS_SPEC_VERSION,
    EXT_VALIDATION_FLAGS_EXTENSION_NAME,
    EXT_shader_subgroup_ballot,
    EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION,
    EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME,
    EXT_shader_subgroup_vote,
    EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION,
    EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME,
    EXT_texture_compression_astc_hdr,
    EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION,
    EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME,
    EXT_astc_decode_mode,
    EXT_ASTC_DECODE_MODE_SPEC_VERSION,
    EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
    EXT_conditional_rendering,
    EXT_CONDITIONAL_RENDERING_SPEC_VERSION,
    EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
    NV_clip_space_w_scaling,
    NV_CLIP_SPACE_W_SCALING_SPEC_VERSION,
    NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME,
    EXT_direct_mode_display,
    EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION,
    EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME,
    EXT_display_surface_counter,
    EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION,
    EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME,
    EXT_display_control,
    EXT_DISPLAY_CONTROL_SPEC_VERSION,
    EXT_DISPLAY_CONTROL_EXTENSION_NAME,
    GOOGLE_display_timing,
    GOOGLE_DISPLAY_TIMING_SPEC_VERSION,
    GOOGLE_DISPLAY_TIMING_EXTENSION_NAME,
    NV_sample_mask_override_coverage,
    NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION,
    NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME,
    NV_geometry_shader_passthrough,
    NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION,
    NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME,
    NV_viewport_array2,
    NV_VIEWPORT_ARRAY2_SPEC_VERSION,
    NV_VIEWPORT_ARRAY2_EXTENSION_NAME,
    NVX_multiview_per_view_attributes,
    NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION,
    NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME,
    NV_viewport_swizzle,
    NV_VIEWPORT_SWIZZLE_SPEC_VERSION,
    NV_VIEWPORT_SWIZZLE_EXTENSION_NAME,
    EXT_discard_rectangles,
    EXT_DISCARD_RECTANGLES_SPEC_VERSION,
    EXT_DISCARD_RECTANGLES_EXTENSION_NAME,
    EXT_conservative_rasterization,
    EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION,
    EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME,
    EXT_depth_clip_enable,
    EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION,
    EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME,
    EXT_swapchain_colorspace,
    EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION,
    EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME,
    EXT_hdr_metadata,
    EXT_HDR_METADATA_SPEC_VERSION,
    EXT_HDR_METADATA_EXTENSION_NAME,
    EXT_external_memory_dma_buf,
    EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION,
    EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME,
    EXT_queue_family_foreign,
    EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION,
    EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME,
    QUEUE_FAMILY_FOREIGN_EXT,
    EXT_debug_utils,
    EXT_DEBUG_UTILS_SPEC_VERSION,
    EXT_DEBUG_UTILS_EXTENSION_NAME,
    EXT_sampler_filter_minmax,
    EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION,
    EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME,
    AMD_gpu_shader_int16,
    AMD_GPU_SHADER_INT16_SPEC_VERSION,
    AMD_GPU_SHADER_INT16_EXTENSION_NAME,
    AMD_mixed_attachment_samples,
    AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION,
    AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME,
    AMD_shader_fragment_mask,
    AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION,
    AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME,
    EXT_inline_uniform_block,
    EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION,
    EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
    EXT_shader_stencil_export,
    EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION,
    EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,
    EXT_sample_locations,
    EXT_SAMPLE_LOCATIONS_SPEC_VERSION,
    EXT_SAMPLE_LOCATIONS_EXTENSION_NAME,
    EXT_blend_operation_advanced,
    EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION,
    EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
    NV_fragment_coverage_to_color,
    NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION,
    NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME,
    NV_framebuffer_mixed_samples,
    NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION,
    NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME,
    NV_fill_rectangle,
    NV_FILL_RECTANGLE_SPEC_VERSION,
    NV_FILL_RECTANGLE_EXTENSION_NAME,
    NV_shader_sm_builtins,
    NV_SHADER_SM_BUILTINS_SPEC_VERSION,
    NV_SHADER_SM_BUILTINS_EXTENSION_NAME,
    EXT_post_depth_coverage,
    EXT_POST_DEPTH_COVERAGE_SPEC_VERSION,
    EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME,
    EXT_image_drm_format_modifier,
    EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION,
    EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME,
    EXT_validation_cache,
    EXT_VALIDATION_CACHE_SPEC_VERSION,
    EXT_VALIDATION_CACHE_EXTENSION_NAME,
    EXT_descriptor_indexing,
    EXT_DESCRIPTOR_INDEXING_SPEC_VERSION,
    EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
    EXT_shader_viewport_index_layer,
    EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION,
    EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME,
    NV_shading_rate_image,
    NV_SHADING_RATE_IMAGE_SPEC_VERSION,
    NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
    NV_ray_tracing,
    NV_RAY_TRACING_SPEC_VERSION,
    NV_RAY_TRACING_EXTENSION_NAME,
    SHADER_UNUSED_KHR,
    NV_representative_fragment_test,
    NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION,
    NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
    EXT_filter_cubic,
    EXT_FILTER_CUBIC_SPEC_VERSION,
    EXT_FILTER_CUBIC_EXTENSION_NAME,
    QCOM_render_pass_shader_resolve,
    QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION,
    QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME,
    EXT_global_priority,
    EXT_GLOBAL_PRIORITY_SPEC_VERSION,
    EXT_GLOBAL_PRIORITY_EXTENSION_NAME,
    EXT_external_memory_host,
    EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION,
    EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
    AMD_buffer_marker,
    AMD_BUFFER_MARKER_SPEC_VERSION,
    AMD_BUFFER_MARKER_EXTENSION_NAME,
    AMD_pipeline_compiler_control,
    AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION,
    AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME,
    EXT_calibrated_timestamps,
    EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION,
    EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME,
    AMD_shader_core_properties,
    AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION,
    AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME,
    AMD_memory_overallocation_behavior,
    AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION,
    AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME,
    EXT_vertex_attribute_divisor,
    EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION,
    EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
    EXT_pipeline_creation_feedback,
    EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION,
    EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME,
    NV_shader_subgroup_partitioned,
    NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION,
    NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
    NV_compute_shader_derivatives,
    NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION,
    NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
    NV_mesh_shader,
    NV_MESH_SHADER_SPEC_VERSION,
    NV_MESH_SHADER_EXTENSION_NAME,
    NV_fragment_shader_barycentric,
    NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION,
    NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
    NV_shader_image_footprint,
    NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION,
    NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
    NV_scissor_exclusive,
    NV_SCISSOR_EXCLUSIVE_SPEC_VERSION,
    NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
    NV_device_diagnostic_checkpoints,
    NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION,
    NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME,
    INTEL_shader_integer_functions2,
    INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION,
    INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME,
    INTEL_performance_query,
    INTEL_PERFORMANCE_QUERY_SPEC_VERSION,
    INTEL_PERFORMANCE_QUERY_EXTENSION_NAME,
    EXT_pci_bus_info,
    EXT_PCI_BUS_INFO_SPEC_VERSION,
    EXT_PCI_BUS_INFO_EXTENSION_NAME,
    AMD_display_native_hdr,
    AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION,
    AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME,
    EXT_fragment_density_map,
    EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION,
    EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME,
    EXT_scalar_block_layout,
    EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION,
    EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME,
    GOOGLE_hlsl_functionality1,
    GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION,
    GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME,
    GOOGLE_decorate_string,
    GOOGLE_DECORATE_STRING_SPEC_VERSION,
    GOOGLE_DECORATE_STRING_EXTENSION_NAME,
    EXT_subgroup_size_control,
    EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION,
    EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME,
    AMD_shader_core_properties2,
    AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION,
    AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME,
    AMD_device_coherent_memory,
    AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION,
    AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME,
    EXT_memory_budget,
    EXT_MEMORY_BUDGET_SPEC_VERSION,
    EXT_MEMORY_BUDGET_EXTENSION_NAME,
    EXT_memory_priority,
    EXT_MEMORY_PRIORITY_SPEC_VERSION,
    EXT_MEMORY_PRIORITY_EXTENSION_NAME,
    NV_dedicated_allocation_image_aliasing,
    NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION,
    NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME,
    EXT_buffer_device_address,
    EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
    EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
    EXT_tooling_info,
    EXT_TOOLING_INFO_SPEC_VERSION,
    EXT_TOOLING_INFO_EXTENSION_NAME,
    EXT_separate_stencil_usage,
    EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION,
    EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME,
    EXT_validation_features,
    EXT_VALIDATION_FEATURES_SPEC_VERSION,
    EXT_VALIDATION_FEATURES_EXTENSION_NAME,
    NV_cooperative_matrix,
    NV_COOPERATIVE_MATRIX_SPEC_VERSION,
    NV_COOPERATIVE_MATRIX_EXTENSION_NAME,
    NV_coverage_reduction_mode,
    NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION,
    NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME,
    EXT_fragment_shader_interlock,
    EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION,
    EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME,
    EXT_ycbcr_image_arrays,
    EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION,
    EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME,
    EXT_headless_surface,
    EXT_HEADLESS_SURFACE_SPEC_VERSION,
    EXT_HEADLESS_SURFACE_EXTENSION_NAME,
    EXT_line_rasterization,
    EXT_LINE_RASTERIZATION_SPEC_VERSION,
    EXT_LINE_RASTERIZATION_EXTENSION_NAME,
    EXT_shader_atomic_float,
    EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION,
    EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME,
    EXT_host_query_reset,
    EXT_HOST_QUERY_RESET_SPEC_VERSION,
    EXT_HOST_QUERY_RESET_EXTENSION_NAME,
    EXT_index_type_uint8,
    EXT_INDEX_TYPE_UINT8_SPEC_VERSION,
    EXT_INDEX_TYPE_UINT8_EXTENSION_NAME,
    EXT_extended_dynamic_state,
    EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION,
    EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME,
    EXT_shader_demote_to_helper_invocation,
    EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION,
    EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME,
    NV_device_generated_commands,
    NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
    NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
    EXT_texel_buffer_alignment,
    EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION,
    EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME,
    QCOM_render_pass_transform,
    QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION,
    QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME,
    EXT_robustness2,
    EXT_ROBUSTNESS_2_SPEC_VERSION,
    EXT_ROBUSTNESS_2_EXTENSION_NAME,
    EXT_custom_border_color,
    EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION,
    EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME,
    GOOGLE_user_type,
    GOOGLE_USER_TYPE_SPEC_VERSION,
    GOOGLE_USER_TYPE_EXTENSION_NAME,
    EXT_private_data,
    EXT_PRIVATE_DATA_SPEC_VERSION,
    EXT_PRIVATE_DATA_EXTENSION_NAME,
    EXT_pipeline_creation_cache_control,
    EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION,
    EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME,
    NV_device_diagnostics_config,
    NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION,
    NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME,
    QCOM_render_pass_store_ops,
    QCOM_render_pass_store_ops_SPEC_VERSION,
    QCOM_render_pass_store_ops_EXTENSION_NAME,
    EXT_fragment_density_map2,
    EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION,
    EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME,
    EXT_image_robustness,
    EXT_IMAGE_ROBUSTNESS_SPEC_VERSION,
    EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME,
    EXT_4444_formats,
    EXT_4444_FORMATS_SPEC_VERSION,
    EXT_4444_FORMATS_EXTENSION_NAME,
    VULKAN_ANDROID_H_,
    KHR_android_surface,
    KHR_ANDROID_SURFACE_SPEC_VERSION,
    KHR_ANDROID_SURFACE_EXTENSION_NAME,
    ANDROID_external_memory_android_hardware_buffer,
    ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION,
    ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME,
    VULKAN_FUCHSIA_H_,
    FUCHSIA_imagepipe_surface,
    FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION,
    FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME,
    VULKAN_IOS_H_,
    MVK_ios_surface,
    MVK_IOS_SURFACE_SPEC_VERSION,
    MVK_IOS_SURFACE_EXTENSION_NAME,
    VULKAN_MACOS_H_,
    MVK_macos_surface,
    MVK_MACOS_SURFACE_SPEC_VERSION,
    MVK_MACOS_SURFACE_EXTENSION_NAME,
    VULKAN_METAL_H_,
    EXT_metal_surface,
    EXT_METAL_SURFACE_SPEC_VERSION,
    EXT_METAL_SURFACE_EXTENSION_NAME,
    VULKAN_VI_H_,
    NN_vi_surface,
    NN_VI_SURFACE_SPEC_VERSION,
    NN_VI_SURFACE_EXTENSION_NAME,
    VULKAN_WAYLAND_H_,
    KHR_wayland_surface,
    KHR_WAYLAND_SURFACE_SPEC_VERSION,
    KHR_WAYLAND_SURFACE_EXTENSION_NAME,
    VULKAN_WIN32_H_,
    KHR_win32_surface,
    KHR_WIN32_SURFACE_SPEC_VERSION,
    KHR_WIN32_SURFACE_EXTENSION_NAME,
    KHR_external_memory_win32,
    KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
    KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
    KHR_win32_keyed_mutex,
    KHR_WIN32_KEYED_MUTEX_SPEC_VERSION,
    KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME,
    KHR_external_semaphore_win32,
    KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION,
    KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME,
    KHR_external_fence_win32,
    KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION,
    KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME,
    NV_external_memory_win32,
    NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
    NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
    NV_win32_keyed_mutex,
    NV_WIN32_KEYED_MUTEX_SPEC_VERSION,
    NV_WIN32_KEYED_MUTEX_EXTENSION_NAME,
    EXT_full_screen_exclusive,
    EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION,
    EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME,
    VULKAN_XCB_H_,
    KHR_xcb_surface,
    KHR_XCB_SURFACE_SPEC_VERSION,
    KHR_XCB_SURFACE_EXTENSION_NAME,
    VULKAN_XLIB_H_,
    KHR_xlib_surface,
    KHR_XLIB_SURFACE_SPEC_VERSION,
    KHR_XLIB_SURFACE_EXTENSION_NAME,
    VULKAN_XLIB_XRANDR_H_,
    EXT_acquire_xlib_display,
    EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION,
    EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME,
    VULKAN_GGP_H_,
    GGP_stream_descriptor_surface,
    GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION,
    GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME,
    GGP_frame_token,
    GGP_FRAME_TOKEN_SPEC_VERSION,
    GGP_FRAME_TOKEN_EXTENSION_NAME,
    VULKAN_BETA_H_,
    KHR_deferred_host_operations,
    KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION,
    KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME,
    KHR_pipeline_library,
    KHR_PIPELINE_LIBRARY_SPEC_VERSION,
    KHR_PIPELINE_LIBRARY_EXTENSION_NAME,
    KHR_ray_tracing,
    KHR_RAY_TRACING_SPEC_VERSION,
    KHR_RAY_TRACING_EXTENSION_NAME,
    Bool32,
    DeviceAddress,
    DeviceSize,
    Flags,
    SampleMask,
    Buffer_T,
    Buffer,
    Image_T,
    Image,
    Instance_T,
    Instance,
    PhysicalDevice_T,
    PhysicalDevice,
    Device_T,
    Device,
    Queue_T,
    Queue,
    Semaphore_T,
    Semaphore,
    CommandBuffer_T,
    CommandBuffer,
    Fence_T,
    Fence,
    DeviceMemory_T,
    DeviceMemory,
    Event_T,
    Event,
    QueryPool_T,
    QueryPool,
    BufferView_T,
    BufferView,
    ImageView_T,
    ImageView,
    ShaderModule_T,
    ShaderModule,
    PipelineCache_T,
    PipelineCache,
    PipelineLayout_T,
    PipelineLayout,
    Pipeline_T,
    Pipeline,
    RenderPass_T,
    RenderPass,
    DescriptorSetLayout_T,
    DescriptorSetLayout,
    Sampler_T,
    Sampler,
    DescriptorSet_T,
    DescriptorSet,
    DescriptorPool_T,
    DescriptorPool,
    Framebuffer_T,
    Framebuffer,
    CommandPool_T,
    CommandPool,
    AccessFlags,
    ImageAspectFlags,
    FormatFeatureFlags,
    ImageCreateFlags,
    SampleCountFlags,
    ImageUsageFlags,
    InstanceCreateFlags,
    MemoryHeapFlags,
    MemoryPropertyFlags,
    QueueFlags,
    DeviceCreateFlags,
    DeviceQueueCreateFlags,
    PipelineStageFlags,
    MemoryMapFlags,
    SparseMemoryBindFlags,
    SparseImageFormatFlags,
    FenceCreateFlags,
    SemaphoreCreateFlags,
    EventCreateFlags,
    QueryPipelineStatisticFlags,
    QueryPoolCreateFlags,
    QueryResultFlags,
    BufferCreateFlags,
    BufferUsageFlags,
    BufferViewCreateFlags,
    ImageViewCreateFlags,
    ShaderModuleCreateFlags,
    PipelineCacheCreateFlags,
    ColorComponentFlags,
    PipelineCreateFlags,
    PipelineShaderStageCreateFlags,
    CullModeFlags,
    PipelineVertexInputStateCreateFlags,
    PipelineInputAssemblyStateCreateFlags,
    PipelineTessellationStateCreateFlags,
    PipelineViewportStateCreateFlags,
    PipelineRasterizationStateCreateFlags,
    PipelineMultisampleStateCreateFlags,
    PipelineDepthStencilStateCreateFlags,
    PipelineColorBlendStateCreateFlags,
    PipelineDynamicStateCreateFlags,
    PipelineLayoutCreateFlags,
    ShaderStageFlags,
    SamplerCreateFlags,
    DescriptorPoolCreateFlags,
    DescriptorPoolResetFlags,
    DescriptorSetLayoutCreateFlags,
    AttachmentDescriptionFlags,
    DependencyFlags,
    FramebufferCreateFlags,
    RenderPassCreateFlags,
    SubpassDescriptionFlags,
    CommandPoolCreateFlags,
    CommandPoolResetFlags,
    CommandBufferUsageFlags,
    QueryControlFlags,
    CommandBufferResetFlags,
    StencilFaceFlags,
    PFN_vkAllocationFunction,
    PFN_vkFreeFunction,
    PFN_vkInternalAllocationNotification,
    PFN_vkInternalFreeNotification,
    PFN_vkReallocationFunction,
    PFN_vkVoidFunction,
    PFN_vkCreateInstance,
    PFN_vkDestroyInstance,
    PFN_vkEnumeratePhysicalDevices,
    PFN_vkGetPhysicalDeviceFeatures,
    PFN_vkGetPhysicalDeviceFormatProperties,
    PFN_vkGetPhysicalDeviceImageFormatProperties,
    PFN_vkGetPhysicalDeviceProperties,
    PFN_vkGetPhysicalDeviceQueueFamilyProperties,
    PFN_vkGetPhysicalDeviceMemoryProperties,
    PFN_vkGetInstanceProcAddr,
    PFN_vkGetDeviceProcAddr,
    PFN_vkCreateDevice,
    PFN_vkDestroyDevice,
    PFN_vkEnumerateInstanceExtensionProperties,
    PFN_vkEnumerateDeviceExtensionProperties,
    PFN_vkEnumerateInstanceLayerProperties,
    PFN_vkEnumerateDeviceLayerProperties,
    PFN_vkGetDeviceQueue,
    PFN_vkQueueSubmit,
    PFN_vkQueueWaitIdle,
    PFN_vkDeviceWaitIdle,
    PFN_vkAllocateMemory,
    PFN_vkFreeMemory,
    PFN_vkMapMemory,
    PFN_vkUnmapMemory,
    PFN_vkFlushMappedMemoryRanges,
    PFN_vkInvalidateMappedMemoryRanges,
    PFN_vkGetDeviceMemoryCommitment,
    PFN_vkBindBufferMemory,
    PFN_vkBindImageMemory,
    PFN_vkGetBufferMemoryRequirements,
    PFN_vkGetImageMemoryRequirements,
    PFN_vkGetImageSparseMemoryRequirements,
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties,
    PFN_vkQueueBindSparse,
    PFN_vkCreateFence,
    PFN_vkDestroyFence,
    PFN_vkResetFences,
    PFN_vkGetFenceStatus,
    PFN_vkWaitForFences,
    PFN_vkCreateSemaphore,
    PFN_vkDestroySemaphore,
    PFN_vkCreateEvent,
    PFN_vkDestroyEvent,
    PFN_vkGetEventStatus,
    PFN_vkSetEvent,
    PFN_vkResetEvent,
    PFN_vkCreateQueryPool,
    PFN_vkDestroyQueryPool,
    PFN_vkGetQueryPoolResults,
    PFN_vkCreateBuffer,
    PFN_vkDestroyBuffer,
    PFN_vkCreateBufferView,
    PFN_vkDestroyBufferView,
    PFN_vkCreateImage,
    PFN_vkDestroyImage,
    PFN_vkGetImageSubresourceLayout,
    PFN_vkCreateImageView,
    PFN_vkDestroyImageView,
    PFN_vkCreateShaderModule,
    PFN_vkDestroyShaderModule,
    PFN_vkCreatePipelineCache,
    PFN_vkDestroyPipelineCache,
    PFN_vkGetPipelineCacheData,
    PFN_vkMergePipelineCaches,
    PFN_vkCreateGraphicsPipelines,
    PFN_vkCreateComputePipelines,
    PFN_vkDestroyPipeline,
    PFN_vkCreatePipelineLayout,
    PFN_vkDestroyPipelineLayout,
    PFN_vkCreateSampler,
    PFN_vkDestroySampler,
    PFN_vkCreateDescriptorSetLayout,
    PFN_vkDestroyDescriptorSetLayout,
    PFN_vkCreateDescriptorPool,
    PFN_vkDestroyDescriptorPool,
    PFN_vkResetDescriptorPool,
    PFN_vkAllocateDescriptorSets,
    PFN_vkFreeDescriptorSets,
    PFN_vkUpdateDescriptorSets,
    PFN_vkCreateFramebuffer,
    PFN_vkDestroyFramebuffer,
    PFN_vkCreateRenderPass,
    PFN_vkDestroyRenderPass,
    PFN_vkGetRenderAreaGranularity,
    PFN_vkCreateCommandPool,
    PFN_vkDestroyCommandPool,
    PFN_vkResetCommandPool,
    PFN_vkAllocateCommandBuffers,
    PFN_vkFreeCommandBuffers,
    PFN_vkBeginCommandBuffer,
    PFN_vkEndCommandBuffer,
    PFN_vkResetCommandBuffer,
    PFN_vkCmdBindPipeline,
    PFN_vkCmdSetViewport,
    PFN_vkCmdSetScissor,
    PFN_vkCmdSetLineWidth,
    PFN_vkCmdSetDepthBias,
    PFN_vkCmdSetBlendConstants,
    PFN_vkCmdSetDepthBounds,
    PFN_vkCmdSetStencilCompareMask,
    PFN_vkCmdSetStencilWriteMask,
    PFN_vkCmdSetStencilReference,
    PFN_vkCmdBindDescriptorSets,
    PFN_vkCmdBindIndexBuffer,
    PFN_vkCmdBindVertexBuffers,
    PFN_vkCmdDraw,
    PFN_vkCmdDrawIndexed,
    PFN_vkCmdDrawIndirect,
    PFN_vkCmdDrawIndexedIndirect,
    PFN_vkCmdDispatch,
    PFN_vkCmdDispatchIndirect,
    PFN_vkCmdCopyBuffer,
    PFN_vkCmdCopyImage,
    PFN_vkCmdBlitImage,
    PFN_vkCmdCopyBufferToImage,
    PFN_vkCmdCopyImageToBuffer,
    PFN_vkCmdUpdateBuffer,
    PFN_vkCmdFillBuffer,
    PFN_vkCmdClearColorImage,
    PFN_vkCmdClearDepthStencilImage,
    PFN_vkCmdClearAttachments,
    PFN_vkCmdResolveImage,
    PFN_vkCmdSetEvent,
    PFN_vkCmdResetEvent,
    PFN_vkCmdWaitEvents,
    PFN_vkCmdPipelineBarrier,
    PFN_vkCmdBeginQuery,
    PFN_vkCmdEndQuery,
    PFN_vkCmdResetQueryPool,
    PFN_vkCmdWriteTimestamp,
    PFN_vkCmdCopyQueryPoolResults,
    PFN_vkCmdPushConstants,
    PFN_vkCmdBeginRenderPass,
    PFN_vkCmdNextSubpass,
    PFN_vkCmdEndRenderPass,
    PFN_vkCmdExecuteCommands,
    SamplerYcbcrConversion_T,
    SamplerYcbcrConversion,
    DescriptorUpdateTemplate_T,
    DescriptorUpdateTemplate,
    SubgroupFeatureFlags,
    PeerMemoryFeatureFlags,
    MemoryAllocateFlags,
    CommandPoolTrimFlags,
    DescriptorUpdateTemplateCreateFlags,
    ExternalMemoryHandleTypeFlags,
    ExternalMemoryFeatureFlags,
    ExternalFenceHandleTypeFlags,
    ExternalFenceFeatureFlags,
    FenceImportFlags,
    SemaphoreImportFlags,
    ExternalSemaphoreHandleTypeFlags,
    ExternalSemaphoreFeatureFlags,
    PFN_vkEnumerateInstanceVersion,
    PFN_vkBindBufferMemory2,
    PFN_vkBindImageMemory2,
    PFN_vkGetDeviceGroupPeerMemoryFeatures,
    PFN_vkCmdSetDeviceMask,
    PFN_vkCmdDispatchBase,
    PFN_vkEnumeratePhysicalDeviceGroups,
    PFN_vkGetImageMemoryRequirements2,
    PFN_vkGetBufferMemoryRequirements2,
    PFN_vkGetImageSparseMemoryRequirements2,
    PFN_vkGetPhysicalDeviceFeatures2,
    PFN_vkGetPhysicalDeviceProperties2,
    PFN_vkGetPhysicalDeviceFormatProperties2,
    PFN_vkGetPhysicalDeviceImageFormatProperties2,
    PFN_vkGetPhysicalDeviceQueueFamilyProperties2,
    PFN_vkGetPhysicalDeviceMemoryProperties2,
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties2,
    PFN_vkTrimCommandPool,
    PFN_vkGetDeviceQueue2,
    PFN_vkCreateSamplerYcbcrConversion,
    PFN_vkDestroySamplerYcbcrConversion,
    PFN_vkCreateDescriptorUpdateTemplate,
    PFN_vkDestroyDescriptorUpdateTemplate,
    PFN_vkUpdateDescriptorSetWithTemplate,
    PFN_vkGetPhysicalDeviceExternalBufferProperties,
    PFN_vkGetPhysicalDeviceExternalFenceProperties,
    PFN_vkGetPhysicalDeviceExternalSemaphoreProperties,
    PFN_vkGetDescriptorSetLayoutSupport,
    ResolveModeFlags,
    DescriptorBindingFlags,
    SemaphoreWaitFlags,
    PFN_vkCmdDrawIndirectCount,
    PFN_vkCmdDrawIndexedIndirectCount,
    PFN_vkCreateRenderPass2,
    PFN_vkCmdBeginRenderPass2,
    PFN_vkCmdNextSubpass2,
    PFN_vkCmdEndRenderPass2,
    PFN_vkResetQueryPool,
    PFN_vkGetSemaphoreCounterValue,
    PFN_vkWaitSemaphores,
    PFN_vkSignalSemaphore,
    PFN_vkGetBufferDeviceAddress,
    PFN_vkGetBufferOpaqueCaptureAddress,
    PFN_vkGetDeviceMemoryOpaqueCaptureAddress,
    SurfaceKHR_T,
    SurfaceKHR,
    CompositeAlphaFlagsKHR,
    SurfaceTransformFlagsKHR,
    PFN_vkDestroySurfaceKHR,
    PFN_vkGetPhysicalDeviceSurfaceSupportKHR,
    PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR,
    PFN_vkGetPhysicalDeviceSurfacePresentModesKHR,
    SwapchainKHR_T,
    SwapchainKHR,
    SwapchainCreateFlagsKHR,
    DeviceGroupPresentModeFlagsKHR,
    PFN_vkCreateSwapchainKHR,
    PFN_vkDestroySwapchainKHR,
    PFN_vkGetSwapchainImagesKHR,
    PFN_vkAcquireNextImageKHR,
    PFN_vkQueuePresentKHR,
    PFN_vkGetDeviceGroupPresentCapabilitiesKHR,
    PFN_vkGetDeviceGroupSurfacePresentModesKHR,
    PFN_vkGetPhysicalDevicePresentRectanglesKHR,
    PFN_vkAcquireNextImage2KHR,
    DisplayKHR_T,
    DisplayKHR,
    DisplayModeKHR_T,
    DisplayModeKHR,
    DisplayModeCreateFlagsKHR,
    DisplayPlaneAlphaFlagsKHR,
    DisplaySurfaceCreateFlagsKHR,
    PFN_vkGetPhysicalDeviceDisplayPropertiesKHR,
    PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
    PFN_vkGetDisplayPlaneSupportedDisplaysKHR,
    PFN_vkGetDisplayModePropertiesKHR,
    PFN_vkCreateDisplayModeKHR,
    PFN_vkGetDisplayPlaneCapabilitiesKHR,
    PFN_vkCreateDisplayPlaneSurfaceKHR,
    PFN_vkCreateSharedSwapchainsKHR,
    PFN_vkGetPhysicalDeviceFeatures2KHR,
    PFN_vkGetPhysicalDeviceProperties2KHR,
    PFN_vkGetPhysicalDeviceFormatProperties2KHR,
    PFN_vkGetPhysicalDeviceImageFormatProperties2KHR,
    PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR,
    PFN_vkGetPhysicalDeviceMemoryProperties2KHR,
    PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR,
    PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR,
    PFN_vkCmdSetDeviceMaskKHR,
    PFN_vkCmdDispatchBaseKHR,
    PFN_vkTrimCommandPoolKHR,
    PFN_vkEnumeratePhysicalDeviceGroupsKHR,
    PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR,
    PFN_vkGetMemoryFdKHR,
    PFN_vkGetMemoryFdPropertiesKHR,
    PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR,
    PFN_vkImportSemaphoreFdKHR,
    PFN_vkGetSemaphoreFdKHR,
    PFN_vkCmdPushDescriptorSetKHR,
    PFN_vkCmdPushDescriptorSetWithTemplateKHR,
    PFN_vkCreateDescriptorUpdateTemplateKHR,
    PFN_vkDestroyDescriptorUpdateTemplateKHR,
    PFN_vkUpdateDescriptorSetWithTemplateKHR,
    PFN_vkCreateRenderPass2KHR,
    PFN_vkCmdBeginRenderPass2KHR,
    PFN_vkCmdNextSubpass2KHR,
    PFN_vkCmdEndRenderPass2KHR,
    PFN_vkGetSwapchainStatusKHR,
    PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR,
    PFN_vkImportFenceFdKHR,
    PFN_vkGetFenceFdKHR,
    PerformanceCounterDescriptionFlagsKHR,
    AcquireProfilingLockFlagsKHR,
    PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
    PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
    PFN_vkAcquireProfilingLockKHR,
    PFN_vkReleaseProfilingLockKHR,
    PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
    PFN_vkGetPhysicalDeviceSurfaceFormats2KHR,
    PFN_vkGetPhysicalDeviceDisplayProperties2KHR,
    PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
    PFN_vkGetDisplayModeProperties2KHR,
    PFN_vkGetDisplayPlaneCapabilities2KHR,
    PFN_vkGetImageMemoryRequirements2KHR,
    PFN_vkGetBufferMemoryRequirements2KHR,
    PFN_vkGetImageSparseMemoryRequirements2KHR,
    PFN_vkCreateSamplerYcbcrConversionKHR,
    PFN_vkDestroySamplerYcbcrConversionKHR,
    PFN_vkBindBufferMemory2KHR,
    PFN_vkBindImageMemory2KHR,
    PFN_vkGetDescriptorSetLayoutSupportKHR,
    PFN_vkCmdDrawIndirectCountKHR,
    PFN_vkCmdDrawIndexedIndirectCountKHR,
    PFN_vkGetSemaphoreCounterValueKHR,
    PFN_vkWaitSemaphoresKHR,
    PFN_vkSignalSemaphoreKHR,
    PFN_vkGetBufferDeviceAddressKHR,
    PFN_vkGetBufferOpaqueCaptureAddressKHR,
    PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR,
    PFN_vkGetPipelineExecutablePropertiesKHR,
    PFN_vkGetPipelineExecutableStatisticsKHR,
    PFN_vkGetPipelineExecutableInternalRepresentationsKHR,
    DebugReportCallbackEXT_T,
    DebugReportCallbackEXT,
    DebugReportFlagsEXT,
    PFN_vkDebugReportCallbackEXT,
    PFN_vkCreateDebugReportCallbackEXT,
    PFN_vkDestroyDebugReportCallbackEXT,
    PFN_vkDebugReportMessageEXT,
    PFN_vkDebugMarkerSetObjectTagEXT,
    PFN_vkDebugMarkerSetObjectNameEXT,
    PFN_vkCmdDebugMarkerBeginEXT,
    PFN_vkCmdDebugMarkerEndEXT,
    PFN_vkCmdDebugMarkerInsertEXT,
    PipelineRasterizationStateStreamCreateFlagsEXT,
    PFN_vkCmdBindTransformFeedbackBuffersEXT,
    PFN_vkCmdBeginTransformFeedbackEXT,
    PFN_vkCmdEndTransformFeedbackEXT,
    PFN_vkCmdBeginQueryIndexedEXT,
    PFN_vkCmdEndQueryIndexedEXT,
    PFN_vkCmdDrawIndirectByteCountEXT,
    PFN_vkGetImageViewHandleNVX,
    PFN_vkGetImageViewAddressNVX,
    PFN_vkCmdDrawIndirectCountAMD,
    PFN_vkCmdDrawIndexedIndirectCountAMD,
    PFN_vkGetShaderInfoAMD,
    ExternalMemoryHandleTypeFlagsNV,
    ExternalMemoryFeatureFlagsNV,
    PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
    ConditionalRenderingFlagsEXT,
    PFN_vkCmdBeginConditionalRenderingEXT,
    PFN_vkCmdEndConditionalRenderingEXT,
    PFN_vkCmdSetViewportWScalingNV,
    PFN_vkReleaseDisplayEXT,
    SurfaceCounterFlagsEXT,
    PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
    PFN_vkDisplayPowerControlEXT,
    PFN_vkRegisterDeviceEventEXT,
    PFN_vkRegisterDisplayEventEXT,
    PFN_vkGetSwapchainCounterEXT,
    PFN_vkGetRefreshCycleDurationGOOGLE,
    PFN_vkGetPastPresentationTimingGOOGLE,
    PipelineViewportSwizzleStateCreateFlagsNV,
    PipelineDiscardRectangleStateCreateFlagsEXT,
    PFN_vkCmdSetDiscardRectangleEXT,
    PipelineRasterizationConservativeStateCreateFlagsEXT,
    PipelineRasterizationDepthClipStateCreateFlagsEXT,
    PFN_vkSetHdrMetadataEXT,
    DebugUtilsMessengerEXT_T,
    DebugUtilsMessengerEXT,
    DebugUtilsMessengerCallbackDataFlagsEXT,
    DebugUtilsMessageTypeFlagsEXT,
    DebugUtilsMessageSeverityFlagsEXT,
    DebugUtilsMessengerCreateFlagsEXT,
    PFN_vkDebugUtilsMessengerCallbackEXT,
    PFN_vkSetDebugUtilsObjectNameEXT,
    PFN_vkSetDebugUtilsObjectTagEXT,
    PFN_vkQueueBeginDebugUtilsLabelEXT,
    PFN_vkQueueEndDebugUtilsLabelEXT,
    PFN_vkQueueInsertDebugUtilsLabelEXT,
    PFN_vkCmdBeginDebugUtilsLabelEXT,
    PFN_vkCmdEndDebugUtilsLabelEXT,
    PFN_vkCmdInsertDebugUtilsLabelEXT,
    PFN_vkCreateDebugUtilsMessengerEXT,
    PFN_vkDestroyDebugUtilsMessengerEXT,
    PFN_vkSubmitDebugUtilsMessageEXT,
    PFN_vkCmdSetSampleLocationsEXT,
    PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT,
    PipelineCoverageToColorStateCreateFlagsNV,
    PipelineCoverageModulationStateCreateFlagsNV,
    PFN_vkGetImageDrmFormatModifierPropertiesEXT,
    ValidationCacheEXT_T,
    ValidationCacheEXT,
    ValidationCacheCreateFlagsEXT,
    PFN_vkCreateValidationCacheEXT,
    PFN_vkDestroyValidationCacheEXT,
    PFN_vkMergeValidationCachesEXT,
    PFN_vkGetValidationCacheDataEXT,
    PFN_vkCmdBindShadingRateImageNV,
    PFN_vkCmdSetViewportShadingRatePaletteNV,
    PFN_vkCmdSetCoarseSampleOrderNV,
    AccelerationStructureKHR_T,
    AccelerationStructureKHR,
    GeometryFlagsKHR,
    GeometryInstanceFlagsKHR,
    BuildAccelerationStructureFlagsKHR,
    PFN_vkCreateAccelerationStructureNV,
    PFN_vkDestroyAccelerationStructureKHR,
    PFN_vkDestroyAccelerationStructureNV,
    PFN_vkGetAccelerationStructureMemoryRequirementsNV,
    PFN_vkBindAccelerationStructureMemoryKHR,
    PFN_vkBindAccelerationStructureMemoryNV,
    PFN_vkCmdBuildAccelerationStructureNV,
    PFN_vkCmdCopyAccelerationStructureNV,
    PFN_vkCmdTraceRaysNV,
    PFN_vkCreateRayTracingPipelinesNV,
    PFN_vkGetRayTracingShaderGroupHandlesKHR,
    PFN_vkGetRayTracingShaderGroupHandlesNV,
    PFN_vkGetAccelerationStructureHandleNV,
    PFN_vkCmdWriteAccelerationStructuresPropertiesKHR,
    PFN_vkCmdWriteAccelerationStructuresPropertiesNV,
    PFN_vkCompileDeferredNV,
    PFN_vkGetMemoryHostPointerPropertiesEXT,
    PFN_vkCmdWriteBufferMarkerAMD,
    PipelineCompilerControlFlagsAMD,
    PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
    PFN_vkGetCalibratedTimestampsEXT,
    PipelineCreationFeedbackFlagsEXT,
    PFN_vkCmdDrawMeshTasksNV,
    PFN_vkCmdDrawMeshTasksIndirectNV,
    PFN_vkCmdDrawMeshTasksIndirectCountNV,
    PFN_vkCmdSetExclusiveScissorNV,
    PFN_vkCmdSetCheckpointNV,
    PFN_vkGetQueueCheckpointDataNV,
    PerformanceConfigurationINTEL_T,
    PerformanceConfigurationINTEL,
    PFN_vkInitializePerformanceApiINTEL,
    PFN_vkUninitializePerformanceApiINTEL,
    PFN_vkCmdSetPerformanceMarkerINTEL,
    PFN_vkCmdSetPerformanceStreamMarkerINTEL,
    PFN_vkCmdSetPerformanceOverrideINTEL,
    PFN_vkAcquirePerformanceConfigurationINTEL,
    PFN_vkReleasePerformanceConfigurationINTEL,
    PFN_vkQueueSetPerformanceConfigurationINTEL,
    PFN_vkGetPerformanceParameterINTEL,
    PFN_vkSetLocalDimmingAMD,
    ShaderCorePropertiesFlagsAMD,
    PFN_vkGetBufferDeviceAddressEXT,
    ToolPurposeFlagsEXT,
    PFN_vkGetPhysicalDeviceToolPropertiesEXT,
    PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
    PipelineCoverageReductionStateCreateFlagsNV,
    PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
    HeadlessSurfaceCreateFlagsEXT,
    PFN_vkCreateHeadlessSurfaceEXT,
    PFN_vkCmdSetLineStippleEXT,
    PFN_vkResetQueryPoolEXT,
    PFN_vkCmdSetCullModeEXT,
    PFN_vkCmdSetFrontFaceEXT,
    PFN_vkCmdSetPrimitiveTopologyEXT,
    PFN_vkCmdSetViewportWithCountEXT,
    PFN_vkCmdSetScissorWithCountEXT,
    PFN_vkCmdBindVertexBuffers2EXT,
    PFN_vkCmdSetDepthTestEnableEXT,
    PFN_vkCmdSetDepthWriteEnableEXT,
    PFN_vkCmdSetDepthCompareOpEXT,
    PFN_vkCmdSetDepthBoundsTestEnableEXT,
    PFN_vkCmdSetStencilTestEnableEXT,
    PFN_vkCmdSetStencilOpEXT,
    IndirectCommandsLayoutNV_T,
    IndirectCommandsLayoutNV,
    IndirectStateFlagsNV,
    IndirectCommandsLayoutUsageFlagsNV,
    PFN_vkGetGeneratedCommandsMemoryRequirementsNV,
    PFN_vkCmdPreprocessGeneratedCommandsNV,
    PFN_vkCmdExecuteGeneratedCommandsNV,
    PFN_vkCmdBindPipelineShaderGroupNV,
    PFN_vkCreateIndirectCommandsLayoutNV,
    PFN_vkDestroyIndirectCommandsLayoutNV,
    PrivateDataSlotEXT_T,
    PrivateDataSlotEXT,
    PrivateDataSlotCreateFlagsEXT,
    PFN_vkCreatePrivateDataSlotEXT,
    PFN_vkDestroyPrivateDataSlotEXT,
    PFN_vkSetPrivateDataEXT,
    PFN_vkGetPrivateDataEXT,
    DeviceDiagnosticsConfigFlagsNV,
    AndroidSurfaceCreateFlagsKHR,
    PFN_vkCreateAndroidSurfaceKHR,
    PFN_vkGetAndroidHardwareBufferPropertiesANDROID,
    PFN_vkGetMemoryAndroidHardwareBufferANDROID,
    ImagePipeSurfaceCreateFlagsFUCHSIA,
    PFN_vkCreateImagePipeSurfaceFUCHSIA,
    IOSSurfaceCreateFlagsMVK,
    PFN_vkCreateIOSSurfaceMVK,
    MacOSSurfaceCreateFlagsMVK,
    PFN_vkCreateMacOSSurfaceMVK,
    MetalSurfaceCreateFlagsEXT,
    PFN_vkCreateMetalSurfaceEXT,
    ViSurfaceCreateFlagsNN,
    PFN_vkCreateViSurfaceNN,
    WaylandSurfaceCreateFlagsKHR,
    PFN_vkCreateWaylandSurfaceKHR,
    PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
    Win32SurfaceCreateFlagsKHR,
    PFN_vkCreateWin32SurfaceKHR,
    PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR,
    PFN_vkGetMemoryWin32HandleKHR,
    PFN_vkGetMemoryWin32HandlePropertiesKHR,
    PFN_vkImportSemaphoreWin32HandleKHR,
    PFN_vkGetSemaphoreWin32HandleKHR,
    PFN_vkImportFenceWin32HandleKHR,
    PFN_vkGetFenceWin32HandleKHR,
    PFN_vkGetMemoryWin32HandleNV,
    PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT,
    PFN_vkAcquireFullScreenExclusiveModeEXT,
    PFN_vkReleaseFullScreenExclusiveModeEXT,
    PFN_vkGetDeviceGroupSurfacePresentModes2EXT,
    XcbSurfaceCreateFlagsKHR,
    PFN_vkCreateXcbSurfaceKHR,
    PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR,
    XlibSurfaceCreateFlagsKHR,
    PFN_vkCreateXlibSurfaceKHR,
    PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR,
    PFN_vkAcquireXlibDisplayEXT,
    PFN_vkGetRandROutputDisplayEXT,
    StreamDescriptorSurfaceCreateFlagsGGP,
    PFN_vkCreateStreamDescriptorSurfaceGGP,
    DeferredOperationKHR_T,
    DeferredOperationKHR,
    PFN_vkCreateDeferredOperationKHR,
    PFN_vkDestroyDeferredOperationKHR,
    PFN_vkGetDeferredOperationMaxConcurrencyKHR,
    PFN_vkGetDeferredOperationResultKHR,
    PFN_vkDeferredOperationJoinKHR,
    PFN_vkCreateAccelerationStructureKHR,
    PFN_vkGetAccelerationStructureMemoryRequirementsKHR,
    PFN_vkCmdBuildAccelerationStructureKHR,
    PFN_vkCmdBuildAccelerationStructureIndirectKHR,
    PFN_vkBuildAccelerationStructureKHR,
    PFN_vkCopyAccelerationStructureKHR,
    PFN_vkCopyAccelerationStructureToMemoryKHR,
    PFN_vkCopyMemoryToAccelerationStructureKHR,
    PFN_vkWriteAccelerationStructuresPropertiesKHR,
    PFN_vkCmdCopyAccelerationStructureKHR,
    PFN_vkCmdCopyAccelerationStructureToMemoryKHR,
    PFN_vkCmdCopyMemoryToAccelerationStructureKHR,
    PFN_vkCmdTraceRaysKHR,
    PFN_vkCreateRayTracingPipelinesKHR,
    PFN_vkGetAccelerationStructureDeviceAddressKHR,
    PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
    PFN_vkCmdTraceRaysIndirectKHR,
    PFN_vkGetDeviceAccelerationStructureCompatibilityKHR,
    Result,
    StructureType,
    ImageLayout,
    ObjectType,
    VendorId,
    PipelineCacheHeaderVersion,
    SystemAllocationScope,
    InternalAllocationType,
    Format,
    ImageTiling,
    ImageType,
    PhysicalDeviceType,
    QueryType,
    SharingMode,
    ComponentSwizzle,
    ImageViewType,
    BlendFactor,
    BlendOp,
    CompareOp,
    DynamicState,
    FrontFace,
    VertexInputRate,
    PrimitiveTopology,
    PolygonMode,
    StencilOp,
    LogicOp,
    BorderColor,
    Filter,
    SamplerAddressMode,
    SamplerMipmapMode,
    DescriptorType,
    AttachmentLoadOp,
    AttachmentStoreOp,
    PipelineBindPoint,
    CommandBufferLevel,
    IndexType,
    SubpassContents,
    AccessFlagBits,
    ImageAspectFlagBits,
    FormatFeatureFlagBits,
    ImageCreateFlagBits,
    SampleCountFlagBits,
    ImageUsageFlagBits,
    MemoryHeapFlagBits,
    MemoryPropertyFlagBits,
    QueueFlagBits,
    DeviceQueueCreateFlagBits,
    PipelineStageFlagBits,
    SparseMemoryBindFlagBits,
    SparseImageFormatFlagBits,
    FenceCreateFlagBits,
    QueryPipelineStatisticFlagBits,
    QueryResultFlagBits,
    BufferCreateFlagBits,
    BufferUsageFlagBits,
    ImageViewCreateFlagBits,
    ShaderModuleCreateFlagBits,
    PipelineCacheCreateFlagBits,
    ColorComponentFlagBits,
    PipelineCreateFlagBits,
    PipelineShaderStageCreateFlagBits,
    ShaderStageFlagBits,
    CullModeFlagBits,
    SamplerCreateFlagBits,
    DescriptorPoolCreateFlagBits,
    DescriptorSetLayoutCreateFlagBits,
    AttachmentDescriptionFlagBits,
    DependencyFlagBits,
    FramebufferCreateFlagBits,
    RenderPassCreateFlagBits,
    SubpassDescriptionFlagBits,
    CommandPoolCreateFlagBits,
    CommandPoolResetFlagBits,
    CommandBufferUsageFlagBits,
    QueryControlFlagBits,
    CommandBufferResetFlagBits,
    StencilFaceFlagBits,
    PointClippingBehavior,
    TessellationDomainOrigin,
    SamplerYcbcrModelConversion,
    SamplerYcbcrRange,
    ChromaLocation,
    DescriptorUpdateTemplateType,
    SubgroupFeatureFlagBits,
    PeerMemoryFeatureFlagBits,
    MemoryAllocateFlagBits,
    ExternalMemoryHandleTypeFlagBits,
    ExternalMemoryFeatureFlagBits,
    ExternalFenceHandleTypeFlagBits,
    ExternalFenceFeatureFlagBits,
    FenceImportFlagBits,
    SemaphoreImportFlagBits,
    ExternalSemaphoreHandleTypeFlagBits,
    ExternalSemaphoreFeatureFlagBits,
    DriverId,
    ShaderFloatControlsIndependence,
    SamplerReductionMode,
    SemaphoreType,
    ResolveModeFlagBits,
    DescriptorBindingFlagBits,
    SemaphoreWaitFlagBits,
    PresentModeKHR,
    ColorSpaceKHR,
    SurfaceTransformFlagBitsKHR,
    CompositeAlphaFlagBitsKHR,
    SwapchainCreateFlagBitsKHR,
    DeviceGroupPresentModeFlagBitsKHR,
    DisplayPlaneAlphaFlagBitsKHR,
    PerformanceCounterUnitKHR,
    PerformanceCounterScopeKHR,
    PerformanceCounterStorageKHR,
    PerformanceCounterDescriptionFlagBitsKHR,
    AcquireProfilingLockFlagBitsKHR,
    PipelineExecutableStatisticFormatKHR,
    DebugReportObjectTypeEXT,
    DebugReportFlagBitsEXT,
    RasterizationOrderAMD,
    ShaderInfoTypeAMD,
    ExternalMemoryHandleTypeFlagBitsNV,
    ExternalMemoryFeatureFlagBitsNV,
    ValidationCheckEXT,
    ConditionalRenderingFlagBitsEXT,
    SurfaceCounterFlagBitsEXT,
    DisplayPowerStateEXT,
    DeviceEventTypeEXT,
    DisplayEventTypeEXT,
    ViewportCoordinateSwizzleNV,
    DiscardRectangleModeEXT,
    ConservativeRasterizationModeEXT,
    DebugUtilsMessageSeverityFlagBitsEXT,
    DebugUtilsMessageTypeFlagBitsEXT,
    BlendOverlapEXT,
    CoverageModulationModeNV,
    ValidationCacheHeaderVersionEXT,
    ShadingRatePaletteEntryNV,
    CoarseSampleOrderTypeNV,
    RayTracingShaderGroupTypeKHR,
    GeometryTypeKHR,
    AccelerationStructureTypeKHR,
    CopyAccelerationStructureModeKHR,
    AccelerationStructureMemoryRequirementsTypeKHR,
    GeometryFlagBitsKHR,
    GeometryInstanceFlagBitsKHR,
    BuildAccelerationStructureFlagBitsKHR,
    QueueGlobalPriorityEXT,
    PipelineCompilerControlFlagBitsAMD,
    TimeDomainEXT,
    MemoryOverallocationBehaviorAMD,
    PipelineCreationFeedbackFlagBitsEXT,
    PerformanceConfigurationTypeINTEL,
    QueryPoolSamplingModeINTEL,
    PerformanceOverrideTypeINTEL,
    PerformanceParameterTypeINTEL,
    PerformanceValueTypeINTEL,
    ShaderCorePropertiesFlagBitsAMD,
    ToolPurposeFlagBitsEXT,
    ValidationFeatureEnableEXT,
    ValidationFeatureDisableEXT,
    ComponentTypeNV,
    ScopeNV,
    CoverageReductionModeNV,
    LineRasterizationModeEXT,
    IndirectCommandsTokenTypeNV,
    IndirectStateFlagBitsNV,
    IndirectCommandsLayoutUsageFlagBitsNV,
    PrivateDataSlotCreateFlagBitsEXT,
    DeviceDiagnosticsConfigFlagBitsNV,
    FullScreenExclusiveEXT,
    AccelerationStructureBuildTypeKHR,
    Extent2D,
    Extent3D,
    Offset2D,
    Offset3D,
    Rect2D,
    BufferMemoryBarrier,
    DispatchIndirectCommand,
    DrawIndexedIndirectCommand,
    DrawIndirectCommand,
    ImageSubresourceRange,
    ImageMemoryBarrier,
    MemoryBarrier,
    AllocationCallbacks,
    ApplicationInfo,
    FormatProperties,
    ImageFormatProperties,
    InstanceCreateInfo,
    MemoryHeap,
    MemoryType,
    PhysicalDeviceFeatures,
    PhysicalDeviceLimits,
    PhysicalDeviceMemoryProperties,
    PhysicalDeviceSparseProperties,
    PhysicalDeviceProperties,
    QueueFamilyProperties,
    DeviceQueueCreateInfo,
    DeviceCreateInfo,
    ExtensionProperties,
    LayerProperties,
    SubmitInfo,
    MappedMemoryRange,
    MemoryAllocateInfo,
    MemoryRequirements,
    SparseMemoryBind,
    SparseBufferMemoryBindInfo,
    SparseImageOpaqueMemoryBindInfo,
    ImageSubresource,
    SparseImageMemoryBind,
    SparseImageMemoryBindInfo,
    BindSparseInfo,
    SparseImageFormatProperties,
    SparseImageMemoryRequirements,
    FenceCreateInfo,
    SemaphoreCreateInfo,
    EventCreateInfo,
    QueryPoolCreateInfo,
    BufferCreateInfo,
    BufferViewCreateInfo,
    ImageCreateInfo,
    SubresourceLayout,
    ComponentMapping,
    ImageViewCreateInfo,
    ShaderModuleCreateInfo,
    PipelineCacheCreateInfo,
    SpecializationMapEntry,
    SpecializationInfo,
    PipelineShaderStageCreateInfo,
    ComputePipelineCreateInfo,
    VertexInputBindingDescription,
    VertexInputAttributeDescription,
    PipelineVertexInputStateCreateInfo,
    PipelineInputAssemblyStateCreateInfo,
    PipelineTessellationStateCreateInfo,
    Viewport,
    PipelineViewportStateCreateInfo,
    PipelineRasterizationStateCreateInfo,
    PipelineMultisampleStateCreateInfo,
    StencilOpState,
    PipelineDepthStencilStateCreateInfo,
    PipelineColorBlendAttachmentState,
    PipelineColorBlendStateCreateInfo,
    PipelineDynamicStateCreateInfo,
    GraphicsPipelineCreateInfo,
    PushConstantRange,
    PipelineLayoutCreateInfo,
    SamplerCreateInfo,
    CopyDescriptorSet,
    DescriptorBufferInfo,
    DescriptorImageInfo,
    DescriptorPoolSize,
    DescriptorPoolCreateInfo,
    DescriptorSetAllocateInfo,
    DescriptorSetLayoutBinding,
    DescriptorSetLayoutCreateInfo,
    WriteDescriptorSet,
    AttachmentDescription,
    AttachmentReference,
    FramebufferCreateInfo,
    SubpassDescription,
    SubpassDependency,
    RenderPassCreateInfo,
    CommandPoolCreateInfo,
    CommandBufferAllocateInfo,
    CommandBufferInheritanceInfo,
    CommandBufferBeginInfo,
    BufferCopy,
    ImageSubresourceLayers,
    BufferImageCopy,
    ClearColorValue,
    ClearDepthStencilValue,
    ClearValue,
    ClearAttachment,
    ClearRect,
    ImageBlit,
    ImageCopy,
    ImageResolve,
    RenderPassBeginInfo,
    PhysicalDeviceSubgroupProperties,
    BindBufferMemoryInfo,
    BindImageMemoryInfo,
    PhysicalDevice16BitStorageFeatures,
    MemoryDedicatedRequirements,
    MemoryDedicatedAllocateInfo,
    MemoryAllocateFlagsInfo,
    DeviceGroupRenderPassBeginInfo,
    DeviceGroupCommandBufferBeginInfo,
    DeviceGroupSubmitInfo,
    DeviceGroupBindSparseInfo,
    BindBufferMemoryDeviceGroupInfo,
    BindImageMemoryDeviceGroupInfo,
    PhysicalDeviceGroupProperties,
    DeviceGroupDeviceCreateInfo,
    BufferMemoryRequirementsInfo2,
    ImageMemoryRequirementsInfo2,
    ImageSparseMemoryRequirementsInfo2,
    MemoryRequirements2,
    SparseImageMemoryRequirements2,
    PhysicalDeviceFeatures2,
    PhysicalDeviceProperties2,
    FormatProperties2,
    ImageFormatProperties2,
    PhysicalDeviceImageFormatInfo2,
    QueueFamilyProperties2,
    PhysicalDeviceMemoryProperties2,
    SparseImageFormatProperties2,
    PhysicalDeviceSparseImageFormatInfo2,
    PhysicalDevicePointClippingProperties,
    InputAttachmentAspectReference,
    RenderPassInputAttachmentAspectCreateInfo,
    ImageViewUsageCreateInfo,
    PipelineTessellationDomainOriginStateCreateInfo,
    RenderPassMultiviewCreateInfo,
    PhysicalDeviceMultiviewFeatures,
    PhysicalDeviceMultiviewProperties,
    PhysicalDeviceVariablePointersFeatures,
    PhysicalDeviceProtectedMemoryFeatures,
    PhysicalDeviceProtectedMemoryProperties,
    DeviceQueueInfo2,
    ProtectedSubmitInfo,
    SamplerYcbcrConversionCreateInfo,
    SamplerYcbcrConversionInfo,
    BindImagePlaneMemoryInfo,
    ImagePlaneMemoryRequirementsInfo,
    PhysicalDeviceSamplerYcbcrConversionFeatures,
    SamplerYcbcrConversionImageFormatProperties,
    DescriptorUpdateTemplateEntry,
    DescriptorUpdateTemplateCreateInfo,
    ExternalMemoryProperties,
    PhysicalDeviceExternalImageFormatInfo,
    ExternalImageFormatProperties,
    PhysicalDeviceExternalBufferInfo,
    ExternalBufferProperties,
    PhysicalDeviceIDProperties,
    ExternalMemoryImageCreateInfo,
    ExternalMemoryBufferCreateInfo,
    ExportMemoryAllocateInfo,
    PhysicalDeviceExternalFenceInfo,
    ExternalFenceProperties,
    ExportFenceCreateInfo,
    ExportSemaphoreCreateInfo,
    PhysicalDeviceExternalSemaphoreInfo,
    ExternalSemaphoreProperties,
    PhysicalDeviceMaintenance3Properties,
    DescriptorSetLayoutSupport,
    PhysicalDeviceShaderDrawParametersFeatures,
    PhysicalDeviceVulkan11Features,
    PhysicalDeviceVulkan11Properties,
    PhysicalDeviceVulkan12Features,
    ConformanceVersion,
    PhysicalDeviceVulkan12Properties,
    ImageFormatListCreateInfo,
    AttachmentDescription2,
    AttachmentReference2,
    SubpassDescription2,
    SubpassDependency2,
    RenderPassCreateInfo2,
    SubpassBeginInfo,
    SubpassEndInfo,
    PhysicalDevice8BitStorageFeatures,
    PhysicalDeviceDriverProperties,
    PhysicalDeviceShaderAtomicInt64Features,
    PhysicalDeviceShaderFloat16Int8Features,
    PhysicalDeviceFloatControlsProperties,
    DescriptorSetLayoutBindingFlagsCreateInfo,
    PhysicalDeviceDescriptorIndexingFeatures,
    PhysicalDeviceDescriptorIndexingProperties,
    DescriptorSetVariableDescriptorCountAllocateInfo,
    DescriptorSetVariableDescriptorCountLayoutSupport,
    SubpassDescriptionDepthStencilResolve,
    PhysicalDeviceDepthStencilResolveProperties,
    PhysicalDeviceScalarBlockLayoutFeatures,
    ImageStencilUsageCreateInfo,
    SamplerReductionModeCreateInfo,
    PhysicalDeviceSamplerFilterMinmaxProperties,
    PhysicalDeviceVulkanMemoryModelFeatures,
    PhysicalDeviceImagelessFramebufferFeatures,
    FramebufferAttachmentImageInfo,
    FramebufferAttachmentsCreateInfo,
    RenderPassAttachmentBeginInfo,
    PhysicalDeviceUniformBufferStandardLayoutFeatures,
    PhysicalDeviceShaderSubgroupExtendedTypesFeatures,
    PhysicalDeviceSeparateDepthStencilLayoutsFeatures,
    AttachmentReferenceStencilLayout,
    AttachmentDescriptionStencilLayout,
    PhysicalDeviceHostQueryResetFeatures,
    PhysicalDeviceTimelineSemaphoreFeatures,
    PhysicalDeviceTimelineSemaphoreProperties,
    SemaphoreTypeCreateInfo,
    TimelineSemaphoreSubmitInfo,
    SemaphoreWaitInfo,
    SemaphoreSignalInfo,
    PhysicalDeviceBufferDeviceAddressFeatures,
    BufferDeviceAddressInfo,
    BufferOpaqueCaptureAddressCreateInfo,
    MemoryOpaqueCaptureAddressAllocateInfo,
    DeviceMemoryOpaqueCaptureAddressInfo,
    SurfaceCapabilitiesKHR,
    SurfaceFormatKHR,
    SwapchainCreateInfoKHR,
    PresentInfoKHR,
    ImageSwapchainCreateInfoKHR,
    BindImageMemorySwapchainInfoKHR,
    AcquireNextImageInfoKHR,
    DeviceGroupPresentCapabilitiesKHR,
    DeviceGroupPresentInfoKHR,
    DeviceGroupSwapchainCreateInfoKHR,
    DisplayModeParametersKHR,
    DisplayModeCreateInfoKHR,
    DisplayModePropertiesKHR,
    DisplayPlaneCapabilitiesKHR,
    DisplayPlanePropertiesKHR,
    DisplayPropertiesKHR,
    DisplaySurfaceCreateInfoKHR,
    DisplayPresentInfoKHR,
    ImportMemoryFdInfoKHR,
    MemoryFdPropertiesKHR,
    MemoryGetFdInfoKHR,
    ImportSemaphoreFdInfoKHR,
    SemaphoreGetFdInfoKHR,
    PhysicalDevicePushDescriptorPropertiesKHR,
    RectLayerKHR,
    PresentRegionKHR,
    PresentRegionsKHR,
    SharedPresentSurfaceCapabilitiesKHR,
    ImportFenceFdInfoKHR,
    FenceGetFdInfoKHR,
    PhysicalDevicePerformanceQueryFeaturesKHR,
    PhysicalDevicePerformanceQueryPropertiesKHR,
    PerformanceCounterKHR,
    PerformanceCounterDescriptionKHR,
    QueryPoolPerformanceCreateInfoKHR,
    PerformanceCounterResultKHR,
    AcquireProfilingLockInfoKHR,
    PerformanceQuerySubmitInfoKHR,
    PhysicalDeviceSurfaceInfo2KHR,
    SurfaceCapabilities2KHR,
    SurfaceFormat2KHR,
    DisplayProperties2KHR,
    DisplayPlaneProperties2KHR,
    DisplayModeProperties2KHR,
    DisplayPlaneInfo2KHR,
    DisplayPlaneCapabilities2KHR,
    PhysicalDeviceShaderClockFeaturesKHR,
    SurfaceProtectedCapabilitiesKHR,
    PhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    PipelineInfoKHR,
    PipelineExecutablePropertiesKHR,
    PipelineExecutableInfoKHR,
    PipelineExecutableStatisticValueKHR,
    PipelineExecutableStatisticKHR,
    PipelineExecutableInternalRepresentationKHR,
    DebugReportCallbackCreateInfoEXT,
    PipelineRasterizationStateRasterizationOrderAMD,
    DebugMarkerObjectNameInfoEXT,
    DebugMarkerObjectTagInfoEXT,
    DebugMarkerMarkerInfoEXT,
    DedicatedAllocationImageCreateInfoNV,
    DedicatedAllocationBufferCreateInfoNV,
    DedicatedAllocationMemoryAllocateInfoNV,
    PhysicalDeviceTransformFeedbackFeaturesEXT,
    PhysicalDeviceTransformFeedbackPropertiesEXT,
    PipelineRasterizationStateStreamCreateInfoEXT,
    ImageViewHandleInfoNVX,
    ImageViewAddressPropertiesNVX,
    TextureLODGatherFormatPropertiesAMD,
    ShaderResourceUsageAMD,
    ShaderStatisticsInfoAMD,
    PhysicalDeviceCornerSampledImageFeaturesNV,
    ExternalImageFormatPropertiesNV,
    ExternalMemoryImageCreateInfoNV,
    ExportMemoryAllocateInfoNV,
    ValidationFlagsEXT,
    PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT,
    ImageViewASTCDecodeModeEXT,
    PhysicalDeviceASTCDecodeFeaturesEXT,
    ConditionalRenderingBeginInfoEXT,
    PhysicalDeviceConditionalRenderingFeaturesEXT,
    CommandBufferInheritanceConditionalRenderingInfoEXT,
    ViewportWScalingNV,
    PipelineViewportWScalingStateCreateInfoNV,
    SurfaceCapabilities2EXT,
    DisplayPowerInfoEXT,
    DeviceEventInfoEXT,
    DisplayEventInfoEXT,
    SwapchainCounterCreateInfoEXT,
    RefreshCycleDurationGOOGLE,
    PastPresentationTimingGOOGLE,
    PresentTimeGOOGLE,
    PresentTimesInfoGOOGLE,
    PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    ViewportSwizzleNV,
    PipelineViewportSwizzleStateCreateInfoNV,
    PhysicalDeviceDiscardRectanglePropertiesEXT,
    PipelineDiscardRectangleStateCreateInfoEXT,
    PhysicalDeviceConservativeRasterizationPropertiesEXT,
    PipelineRasterizationConservativeStateCreateInfoEXT,
    PhysicalDeviceDepthClipEnableFeaturesEXT,
    PipelineRasterizationDepthClipStateCreateInfoEXT,
    XYColorEXT,
    HdrMetadataEXT,
    DebugUtilsLabelEXT,
    DebugUtilsObjectNameInfoEXT,
    DebugUtilsMessengerCallbackDataEXT,
    DebugUtilsMessengerCreateInfoEXT,
    DebugUtilsObjectTagInfoEXT,
    PhysicalDeviceInlineUniformBlockFeaturesEXT,
    PhysicalDeviceInlineUniformBlockPropertiesEXT,
    WriteDescriptorSetInlineUniformBlockEXT,
    DescriptorPoolInlineUniformBlockCreateInfoEXT,
    SampleLocationEXT,
    SampleLocationsInfoEXT,
    AttachmentSampleLocationsEXT,
    SubpassSampleLocationsEXT,
    RenderPassSampleLocationsBeginInfoEXT,
    PipelineSampleLocationsStateCreateInfoEXT,
    PhysicalDeviceSampleLocationsPropertiesEXT,
    MultisamplePropertiesEXT,
    PhysicalDeviceBlendOperationAdvancedFeaturesEXT,
    PhysicalDeviceBlendOperationAdvancedPropertiesEXT,
    PipelineColorBlendAdvancedStateCreateInfoEXT,
    PipelineCoverageToColorStateCreateInfoNV,
    PipelineCoverageModulationStateCreateInfoNV,
    PhysicalDeviceShaderSMBuiltinsPropertiesNV,
    PhysicalDeviceShaderSMBuiltinsFeaturesNV,
    DrmFormatModifierPropertiesEXT,
    DrmFormatModifierPropertiesListEXT,
    PhysicalDeviceImageDrmFormatModifierInfoEXT,
    ImageDrmFormatModifierListCreateInfoEXT,
    ImageDrmFormatModifierExplicitCreateInfoEXT,
    ImageDrmFormatModifierPropertiesEXT,
    ValidationCacheCreateInfoEXT,
    ShaderModuleValidationCacheCreateInfoEXT,
    ShadingRatePaletteNV,
    PipelineViewportShadingRateImageStateCreateInfoNV,
    PhysicalDeviceShadingRateImageFeaturesNV,
    PhysicalDeviceShadingRateImagePropertiesNV,
    CoarseSampleLocationNV,
    CoarseSampleOrderCustomNV,
    PipelineViewportCoarseSampleOrderStateCreateInfoNV,
    RayTracingShaderGroupCreateInfoNV,
    RayTracingPipelineCreateInfoNV,
    GeometryTrianglesNV,
    GeometryAABBNV,
    GeometryDataNV,
    GeometryNV,
    AccelerationStructureInfoNV,
    AccelerationStructureCreateInfoNV,
    BindAccelerationStructureMemoryInfoKHR,
    WriteDescriptorSetAccelerationStructureKHR,
    AccelerationStructureMemoryRequirementsInfoNV,
    PhysicalDeviceRayTracingPropertiesNV,
    TransformMatrixKHR,
    AabbPositionsKHR,
    AccelerationStructureInstanceKHR,
    PhysicalDeviceRepresentativeFragmentTestFeaturesNV,
    PipelineRepresentativeFragmentTestStateCreateInfoNV,
    PhysicalDeviceImageViewImageFormatInfoEXT,
    FilterCubicImageViewImageFormatPropertiesEXT,
    DeviceQueueGlobalPriorityCreateInfoEXT,
    ImportMemoryHostPointerInfoEXT,
    MemoryHostPointerPropertiesEXT,
    PhysicalDeviceExternalMemoryHostPropertiesEXT,
    PipelineCompilerControlCreateInfoAMD,
    CalibratedTimestampInfoEXT,
    PhysicalDeviceShaderCorePropertiesAMD,
    DeviceMemoryOverallocationCreateInfoAMD,
    PhysicalDeviceVertexAttributeDivisorPropertiesEXT,
    VertexInputBindingDivisorDescriptionEXT,
    PipelineVertexInputDivisorStateCreateInfoEXT,
    PhysicalDeviceVertexAttributeDivisorFeaturesEXT,
    PipelineCreationFeedbackEXT,
    PipelineCreationFeedbackCreateInfoEXT,
    PhysicalDeviceComputeShaderDerivativesFeaturesNV,
    PhysicalDeviceMeshShaderFeaturesNV,
    PhysicalDeviceMeshShaderPropertiesNV,
    DrawMeshTasksIndirectCommandNV,
    PhysicalDeviceFragmentShaderBarycentricFeaturesNV,
    PhysicalDeviceShaderImageFootprintFeaturesNV,
    PipelineViewportExclusiveScissorStateCreateInfoNV,
    PhysicalDeviceExclusiveScissorFeaturesNV,
    QueueFamilyCheckpointPropertiesNV,
    CheckpointDataNV,
    PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
    PerformanceValueDataINTEL,
    PerformanceValueINTEL,
    InitializePerformanceApiInfoINTEL,
    QueryPoolPerformanceQueryCreateInfoINTEL,
    PerformanceMarkerInfoINTEL,
    PerformanceStreamMarkerInfoINTEL,
    PerformanceOverrideInfoINTEL,
    PerformanceConfigurationAcquireInfoINTEL,
    PhysicalDevicePCIBusInfoPropertiesEXT,
    DisplayNativeHdrSurfaceCapabilitiesAMD,
    SwapchainDisplayNativeHdrCreateInfoAMD,
    PhysicalDeviceFragmentDensityMapFeaturesEXT,
    PhysicalDeviceFragmentDensityMapPropertiesEXT,
    RenderPassFragmentDensityMapCreateInfoEXT,
    PhysicalDeviceSubgroupSizeControlFeaturesEXT,
    PhysicalDeviceSubgroupSizeControlPropertiesEXT,
    PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT,
    PhysicalDeviceShaderCoreProperties2AMD,
    PhysicalDeviceCoherentMemoryFeaturesAMD,
    PhysicalDeviceMemoryBudgetPropertiesEXT,
    PhysicalDeviceMemoryPriorityFeaturesEXT,
    MemoryPriorityAllocateInfoEXT,
    PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    PhysicalDeviceBufferDeviceAddressFeaturesEXT,
    BufferDeviceAddressCreateInfoEXT,
    PhysicalDeviceToolPropertiesEXT,
    ValidationFeaturesEXT,
    CooperativeMatrixPropertiesNV,
    PhysicalDeviceCooperativeMatrixFeaturesNV,
    PhysicalDeviceCooperativeMatrixPropertiesNV,
    PhysicalDeviceCoverageReductionModeFeaturesNV,
    PipelineCoverageReductionStateCreateInfoNV,
    FramebufferMixedSamplesCombinationNV,
    PhysicalDeviceFragmentShaderInterlockFeaturesEXT,
    PhysicalDeviceYcbcrImageArraysFeaturesEXT,
    HeadlessSurfaceCreateInfoEXT,
    PhysicalDeviceLineRasterizationFeaturesEXT,
    PhysicalDeviceLineRasterizationPropertiesEXT,
    PipelineRasterizationLineStateCreateInfoEXT,
    PhysicalDeviceShaderAtomicFloatFeaturesEXT,
    PhysicalDeviceIndexTypeUint8FeaturesEXT,
    PhysicalDeviceExtendedDynamicStateFeaturesEXT,
    PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT,
    PhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
    PhysicalDeviceDeviceGeneratedCommandsFeaturesNV,
    GraphicsShaderGroupCreateInfoNV,
    GraphicsPipelineShaderGroupsCreateInfoNV,
    BindShaderGroupIndirectCommandNV,
    BindIndexBufferIndirectCommandNV,
    BindVertexBufferIndirectCommandNV,
    SetStateFlagsIndirectCommandNV,
    IndirectCommandsStreamNV,
    IndirectCommandsLayoutTokenNV,
    IndirectCommandsLayoutCreateInfoNV,
    GeneratedCommandsInfoNV,
    GeneratedCommandsMemoryRequirementsInfoNV,
    PhysicalDeviceTexelBufferAlignmentFeaturesEXT,
    PhysicalDeviceTexelBufferAlignmentPropertiesEXT,
    RenderPassTransformBeginInfoQCOM,
    CommandBufferInheritanceRenderPassTransformInfoQCOM,
    PhysicalDeviceRobustness2FeaturesEXT,
    PhysicalDeviceRobustness2PropertiesEXT,
    SamplerCustomBorderColorCreateInfoEXT,
    PhysicalDeviceCustomBorderColorPropertiesEXT,
    PhysicalDeviceCustomBorderColorFeaturesEXT,
    PhysicalDevicePrivateDataFeaturesEXT,
    DevicePrivateDataCreateInfoEXT,
    PrivateDataSlotCreateInfoEXT,
    PhysicalDevicePipelineCreationCacheControlFeaturesEXT,
    PhysicalDeviceDiagnosticsConfigFeaturesNV,
    DeviceDiagnosticsConfigCreateInfoNV,
    PhysicalDeviceFragmentDensityMap2FeaturesEXT,
    PhysicalDeviceFragmentDensityMap2PropertiesEXT,
    PhysicalDeviceImageRobustnessFeaturesEXT,
    PhysicalDevice4444FormatsFeaturesEXT,
    AndroidSurfaceCreateInfoKHR,
    AndroidHardwareBufferUsageANDROID,
    AndroidHardwareBufferPropertiesANDROID,
    AndroidHardwareBufferFormatPropertiesANDROID,
    ImportAndroidHardwareBufferInfoANDROID,
    MemoryGetAndroidHardwareBufferInfoANDROID,
    ExternalFormatANDROID,
    ImagePipeSurfaceCreateInfoFUCHSIA,
    IOSSurfaceCreateInfoMVK,
    MacOSSurfaceCreateInfoMVK,
    MetalSurfaceCreateInfoEXT,
    ViSurfaceCreateInfoNN,
    WaylandSurfaceCreateInfoKHR,
    Win32SurfaceCreateInfoKHR,
    ImportMemoryWin32HandleInfoKHR,
    ExportMemoryWin32HandleInfoKHR,
    MemoryWin32HandlePropertiesKHR,
    MemoryGetWin32HandleInfoKHR,
    Win32KeyedMutexAcquireReleaseInfoKHR,
    ImportSemaphoreWin32HandleInfoKHR,
    ExportSemaphoreWin32HandleInfoKHR,
    D3D12FenceSubmitInfoKHR,
    SemaphoreGetWin32HandleInfoKHR,
    ImportFenceWin32HandleInfoKHR,
    ExportFenceWin32HandleInfoKHR,
    FenceGetWin32HandleInfoKHR,
    ImportMemoryWin32HandleInfoNV,
    ExportMemoryWin32HandleInfoNV,
    Win32KeyedMutexAcquireReleaseInfoNV,
    SurfaceFullScreenExclusiveInfoEXT,
    SurfaceCapabilitiesFullScreenExclusiveEXT,
    SurfaceFullScreenExclusiveWin32InfoEXT,
    XcbSurfaceCreateInfoKHR,
    XlibSurfaceCreateInfoKHR,
    StreamDescriptorSurfaceCreateInfoGGP,
    PresentFrameTokenGGP,
    DeferredOperationInfoKHR,
    PipelineLibraryCreateInfoKHR,
    DeviceOrHostAddressKHR,
    DeviceOrHostAddressConstKHR,
    AccelerationStructureBuildOffsetInfoKHR,
    RayTracingShaderGroupCreateInfoKHR,
    RayTracingPipelineInterfaceCreateInfoKHR,
    RayTracingPipelineCreateInfoKHR,
    AccelerationStructureGeometryTrianglesDataKHR,
    AccelerationStructureGeometryAabbsDataKHR,
    AccelerationStructureGeometryInstancesDataKHR,
    AccelerationStructureGeometryDataKHR,
    AccelerationStructureGeometryKHR,
    AccelerationStructureBuildGeometryInfoKHR,
    AccelerationStructureCreateGeometryTypeInfoKHR,
    AccelerationStructureCreateInfoKHR,
    AccelerationStructureMemoryRequirementsInfoKHR,
    PhysicalDeviceRayTracingFeaturesKHR,
    PhysicalDeviceRayTracingPropertiesKHR,
    AccelerationStructureDeviceAddressInfoKHR,
    AccelerationStructureVersionKHR,
    StridedBufferRegionKHR,
    TraceRaysIndirectCommandKHR,
    CopyAccelerationStructureToMemoryInfoKHR,
    CopyMemoryToAccelerationStructureInfoKHR,
    CopyAccelerationStructureInfoKHR,
    BagBufferMemoryBarrier,
    BagImageMemoryBarrier,
    BagMemoryBarrier,
    BagAllocationCallbacks,
    BagApplicationInfo,
    BagInstanceCreateInfo,
    BagDeviceQueueCreateInfo,
    BagDeviceCreateInfo,
    BagSubmitInfo,
    BagMappedMemoryRange,
    BagMemoryAllocateInfo,
    BagSparseBufferMemoryBindInfo,
    BagSparseImageOpaqueMemoryBindInfo,
    BagSparseImageMemoryBindInfo,
    BagBindSparseInfo,
    BagFenceCreateInfo,
    BagSemaphoreCreateInfo,
    BagEventCreateInfo,
    BagQueryPoolCreateInfo,
    BagBufferCreateInfo,
    BagBufferViewCreateInfo,
    BagImageCreateInfo,
    BagImageViewCreateInfo,
    BagShaderModuleCreateInfo,
    BagPipelineCacheCreateInfo,
    BagSpecializationInfo,
    BagPipelineShaderStageCreateInfo,
    BagComputePipelineCreateInfo,
    BagPipelineVertexInputStateCreateInfo,
    BagPipelineInputAssemblyStateCreateInfo,
    BagPipelineTessellationStateCreateInfo,
    BagPipelineViewportStateCreateInfo,
    BagPipelineRasterizationStateCreateInfo,
    BagPipelineMultisampleStateCreateInfo,
    BagPipelineDepthStencilStateCreateInfo,
    BagPipelineColorBlendStateCreateInfo,
    BagPipelineDynamicStateCreateInfo,
    BagGraphicsPipelineCreateInfo,
    BagPipelineLayoutCreateInfo,
    BagSamplerCreateInfo,
    BagCopyDescriptorSet,
    BagDescriptorPoolCreateInfo,
    BagDescriptorSetAllocateInfo,
    BagDescriptorSetLayoutBinding,
    BagDescriptorSetLayoutCreateInfo,
    BagWriteDescriptorSet,
    BagFramebufferCreateInfo,
    BagSubpassDescription,
    BagRenderPassCreateInfo,
    BagCommandPoolCreateInfo,
    BagCommandBufferAllocateInfo,
    BagCommandBufferInheritanceInfo,
    BagCommandBufferBeginInfo,
    BagRenderPassBeginInfo,
    BagPhysicalDeviceSubgroupProperties,
    BagBindBufferMemoryInfo,
    BagBindImageMemoryInfo,
    BagPhysicalDevice16BitStorageFeatures,
    BagMemoryDedicatedRequirements,
    BagMemoryDedicatedAllocateInfo,
    BagMemoryAllocateFlagsInfo,
    BagDeviceGroupRenderPassBeginInfo,
    BagDeviceGroupCommandBufferBeginInfo,
    BagDeviceGroupSubmitInfo,
    BagDeviceGroupBindSparseInfo,
    BagBindBufferMemoryDeviceGroupInfo,
    BagBindImageMemoryDeviceGroupInfo,
    BagPhysicalDeviceGroupProperties,
    BagDeviceGroupDeviceCreateInfo,
    BagBufferMemoryRequirementsInfo2,
    BagImageMemoryRequirementsInfo2,
    BagImageSparseMemoryRequirementsInfo2,
    BagMemoryRequirements2,
    BagSparseImageMemoryRequirements2,
    BagPhysicalDeviceFeatures2,
    BagPhysicalDeviceProperties2,
    BagFormatProperties2,
    BagImageFormatProperties2,
    BagPhysicalDeviceImageFormatInfo2,
    BagQueueFamilyProperties2,
    BagPhysicalDeviceMemoryProperties2,
    BagSparseImageFormatProperties2,
    BagPhysicalDeviceSparseImageFormatInfo2,
    BagPhysicalDevicePointClippingProperties,
    BagRenderPassInputAttachmentAspectCreateInfo,
    BagImageViewUsageCreateInfo,
    BagPipelineTessellationDomainOriginStateCreateInfo,
    BagRenderPassMultiviewCreateInfo,
    BagPhysicalDeviceMultiviewFeatures,
    BagPhysicalDeviceMultiviewProperties,
    BagPhysicalDeviceVariablePointersFeatures,
    BagPhysicalDeviceProtectedMemoryFeatures,
    BagPhysicalDeviceProtectedMemoryProperties,
    BagDeviceQueueInfo2,
    BagProtectedSubmitInfo,
    BagSamplerYcbcrConversionCreateInfo,
    BagSamplerYcbcrConversionInfo,
    BagBindImagePlaneMemoryInfo,
    BagImagePlaneMemoryRequirementsInfo,
    BagPhysicalDeviceSamplerYcbcrConversionFeatures,
    BagSamplerYcbcrConversionImageFormatProperties,
    BagDescriptorUpdateTemplateCreateInfo,
    BagPhysicalDeviceExternalImageFormatInfo,
    BagExternalImageFormatProperties,
    BagPhysicalDeviceExternalBufferInfo,
    BagExternalBufferProperties,
    BagPhysicalDeviceIDProperties,
    BagExternalMemoryImageCreateInfo,
    BagExternalMemoryBufferCreateInfo,
    BagExportMemoryAllocateInfo,
    BagPhysicalDeviceExternalFenceInfo,
    BagExternalFenceProperties,
    BagExportFenceCreateInfo,
    BagExportSemaphoreCreateInfo,
    BagPhysicalDeviceExternalSemaphoreInfo,
    BagExternalSemaphoreProperties,
    BagPhysicalDeviceMaintenance3Properties,
    BagDescriptorSetLayoutSupport,
    BagPhysicalDeviceShaderDrawParametersFeatures,
    BagPhysicalDeviceVulkan11Features,
    BagPhysicalDeviceVulkan11Properties,
    BagPhysicalDeviceVulkan12Features,
    BagPhysicalDeviceVulkan12Properties,
    BagImageFormatListCreateInfo,
    BagAttachmentDescription2,
    BagAttachmentReference2,
    BagSubpassDescription2,
    BagSubpassDependency2,
    BagRenderPassCreateInfo2,
    BagSubpassBeginInfo,
    BagSubpassEndInfo,
    BagPhysicalDevice8BitStorageFeatures,
    BagPhysicalDeviceDriverProperties,
    BagPhysicalDeviceShaderAtomicInt64Features,
    BagPhysicalDeviceShaderFloat16Int8Features,
    BagPhysicalDeviceFloatControlsProperties,
    BagDescriptorSetLayoutBindingFlagsCreateInfo,
    BagPhysicalDeviceDescriptorIndexingFeatures,
    BagPhysicalDeviceDescriptorIndexingProperties,
    BagDescriptorSetVariableDescriptorCountAllocateInfo,
    BagDescriptorSetVariableDescriptorCountLayoutSupport,
    BagSubpassDescriptionDepthStencilResolve,
    BagPhysicalDeviceDepthStencilResolveProperties,
    BagPhysicalDeviceScalarBlockLayoutFeatures,
    BagImageStencilUsageCreateInfo,
    BagSamplerReductionModeCreateInfo,
    BagPhysicalDeviceSamplerFilterMinmaxProperties,
    BagPhysicalDeviceVulkanMemoryModelFeatures,
    BagPhysicalDeviceImagelessFramebufferFeatures,
    BagFramebufferAttachmentImageInfo,
    BagFramebufferAttachmentsCreateInfo,
    BagRenderPassAttachmentBeginInfo,
    BagPhysicalDeviceUniformBufferStandardLayoutFeatures,
    BagPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
    BagPhysicalDeviceSeparateDepthStencilLayoutsFeatures,
    BagAttachmentReferenceStencilLayout,
    BagAttachmentDescriptionStencilLayout,
    BagPhysicalDeviceHostQueryResetFeatures,
    BagPhysicalDeviceTimelineSemaphoreFeatures,
    BagPhysicalDeviceTimelineSemaphoreProperties,
    BagSemaphoreTypeCreateInfo,
    BagTimelineSemaphoreSubmitInfo,
    BagSemaphoreWaitInfo,
    BagSemaphoreSignalInfo,
    BagPhysicalDeviceBufferDeviceAddressFeatures,
    BagBufferDeviceAddressInfo,
    BagBufferOpaqueCaptureAddressCreateInfo,
    BagMemoryOpaqueCaptureAddressAllocateInfo,
    BagDeviceMemoryOpaqueCaptureAddressInfo,
    BagSwapchainCreateInfoKHR,
    BagPresentInfoKHR,
    BagImageSwapchainCreateInfoKHR,
    BagBindImageMemorySwapchainInfoKHR,
    BagAcquireNextImageInfoKHR,
    BagDeviceGroupPresentCapabilitiesKHR,
    BagDeviceGroupPresentInfoKHR,
    BagDeviceGroupSwapchainCreateInfoKHR,
    BagDisplayModeCreateInfoKHR,
    BagDisplayPropertiesKHR,
    BagDisplaySurfaceCreateInfoKHR,
    BagDisplayPresentInfoKHR,
    BagImportMemoryFdInfoKHR,
    BagMemoryFdPropertiesKHR,
    BagMemoryGetFdInfoKHR,
    BagImportSemaphoreFdInfoKHR,
    BagSemaphoreGetFdInfoKHR,
    BagPhysicalDevicePushDescriptorPropertiesKHR,
    BagPresentRegionKHR,
    BagPresentRegionsKHR,
    BagSharedPresentSurfaceCapabilitiesKHR,
    BagImportFenceFdInfoKHR,
    BagFenceGetFdInfoKHR,
    BagPhysicalDevicePerformanceQueryFeaturesKHR,
    BagPhysicalDevicePerformanceQueryPropertiesKHR,
    BagPerformanceCounterKHR,
    BagPerformanceCounterDescriptionKHR,
    BagQueryPoolPerformanceCreateInfoKHR,
    BagAcquireProfilingLockInfoKHR,
    BagPerformanceQuerySubmitInfoKHR,
    BagPhysicalDeviceSurfaceInfo2KHR,
    BagSurfaceCapabilities2KHR,
    BagSurfaceFormat2KHR,
    BagDisplayProperties2KHR,
    BagDisplayPlaneProperties2KHR,
    BagDisplayModeProperties2KHR,
    BagDisplayPlaneInfo2KHR,
    BagDisplayPlaneCapabilities2KHR,
    BagPhysicalDeviceShaderClockFeaturesKHR,
    BagSurfaceProtectedCapabilitiesKHR,
    BagPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    BagPipelineInfoKHR,
    BagPipelineExecutablePropertiesKHR,
    BagPipelineExecutableInfoKHR,
    BagPipelineExecutableStatisticKHR,
    BagPipelineExecutableInternalRepresentationKHR,
    BagDebugReportCallbackCreateInfoEXT,
    BagPipelineRasterizationStateRasterizationOrderAMD,
    BagDebugMarkerObjectNameInfoEXT,
    BagDebugMarkerObjectTagInfoEXT,
    BagDebugMarkerMarkerInfoEXT,
    BagDedicatedAllocationImageCreateInfoNV,
    BagDedicatedAllocationBufferCreateInfoNV,
    BagDedicatedAllocationMemoryAllocateInfoNV,
    BagPhysicalDeviceTransformFeedbackFeaturesEXT,
    BagPhysicalDeviceTransformFeedbackPropertiesEXT,
    BagPipelineRasterizationStateStreamCreateInfoEXT,
    BagImageViewHandleInfoNVX,
    BagImageViewAddressPropertiesNVX,
    BagTextureLODGatherFormatPropertiesAMD,
    BagPhysicalDeviceCornerSampledImageFeaturesNV,
    BagExternalMemoryImageCreateInfoNV,
    BagExportMemoryAllocateInfoNV,
    BagValidationFlagsEXT,
    BagPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT,
    BagImageViewASTCDecodeModeEXT,
    BagPhysicalDeviceASTCDecodeFeaturesEXT,
    BagConditionalRenderingBeginInfoEXT,
    BagPhysicalDeviceConditionalRenderingFeaturesEXT,
    BagCommandBufferInheritanceConditionalRenderingInfoEXT,
    BagPipelineViewportWScalingStateCreateInfoNV,
    BagSurfaceCapabilities2EXT,
    BagDisplayPowerInfoEXT,
    BagDeviceEventInfoEXT,
    BagDisplayEventInfoEXT,
    BagSwapchainCounterCreateInfoEXT,
    BagPresentTimesInfoGOOGLE,
    BagPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    BagPipelineViewportSwizzleStateCreateInfoNV,
    BagPhysicalDeviceDiscardRectanglePropertiesEXT,
    BagPipelineDiscardRectangleStateCreateInfoEXT,
    BagPhysicalDeviceConservativeRasterizationPropertiesEXT,
    BagPipelineRasterizationConservativeStateCreateInfoEXT,
    BagPhysicalDeviceDepthClipEnableFeaturesEXT,
    BagPipelineRasterizationDepthClipStateCreateInfoEXT,
    BagHdrMetadataEXT,
    BagDebugUtilsLabelEXT,
    BagDebugUtilsObjectNameInfoEXT,
    BagDebugUtilsMessengerCallbackDataEXT,
    BagDebugUtilsMessengerCreateInfoEXT,
    BagDebugUtilsObjectTagInfoEXT,
    BagPhysicalDeviceInlineUniformBlockFeaturesEXT,
    BagPhysicalDeviceInlineUniformBlockPropertiesEXT,
    BagWriteDescriptorSetInlineUniformBlockEXT,
    BagDescriptorPoolInlineUniformBlockCreateInfoEXT,
    BagSampleLocationsInfoEXT,
    BagRenderPassSampleLocationsBeginInfoEXT,
    BagPipelineSampleLocationsStateCreateInfoEXT,
    BagPhysicalDeviceSampleLocationsPropertiesEXT,
    BagMultisamplePropertiesEXT,
    BagPhysicalDeviceBlendOperationAdvancedFeaturesEXT,
    BagPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
    BagPipelineColorBlendAdvancedStateCreateInfoEXT,
    BagPipelineCoverageToColorStateCreateInfoNV,
    BagPipelineCoverageModulationStateCreateInfoNV,
    BagPhysicalDeviceShaderSMBuiltinsPropertiesNV,
    BagPhysicalDeviceShaderSMBuiltinsFeaturesNV,
    BagDrmFormatModifierPropertiesListEXT,
    BagPhysicalDeviceImageDrmFormatModifierInfoEXT,
    BagImageDrmFormatModifierListCreateInfoEXT,
    BagImageDrmFormatModifierExplicitCreateInfoEXT,
    BagImageDrmFormatModifierPropertiesEXT,
    BagValidationCacheCreateInfoEXT,
    BagShaderModuleValidationCacheCreateInfoEXT,
    BagShadingRatePaletteNV,
    BagPipelineViewportShadingRateImageStateCreateInfoNV,
    BagPhysicalDeviceShadingRateImageFeaturesNV,
    BagPhysicalDeviceShadingRateImagePropertiesNV,
    BagCoarseSampleOrderCustomNV,
    BagPipelineViewportCoarseSampleOrderStateCreateInfoNV,
    BagRayTracingShaderGroupCreateInfoNV,
    BagRayTracingPipelineCreateInfoNV,
    BagGeometryTrianglesNV,
    BagGeometryAABBNV,
    BagGeometryNV,
    BagAccelerationStructureInfoNV,
    BagAccelerationStructureCreateInfoNV,
    BagBindAccelerationStructureMemoryInfoKHR,
    BagWriteDescriptorSetAccelerationStructureKHR,
    BagAccelerationStructureMemoryRequirementsInfoNV,
    BagPhysicalDeviceRayTracingPropertiesNV,
    BagPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
    BagPipelineRepresentativeFragmentTestStateCreateInfoNV,
    BagPhysicalDeviceImageViewImageFormatInfoEXT,
    BagFilterCubicImageViewImageFormatPropertiesEXT,
    BagDeviceQueueGlobalPriorityCreateInfoEXT,
    BagImportMemoryHostPointerInfoEXT,
    BagMemoryHostPointerPropertiesEXT,
    BagPhysicalDeviceExternalMemoryHostPropertiesEXT,
    BagPipelineCompilerControlCreateInfoAMD,
    BagCalibratedTimestampInfoEXT,
    BagPhysicalDeviceShaderCorePropertiesAMD,
    BagDeviceMemoryOverallocationCreateInfoAMD,
    BagPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
    BagPipelineVertexInputDivisorStateCreateInfoEXT,
    BagPhysicalDeviceVertexAttributeDivisorFeaturesEXT,
    BagPipelineCreationFeedbackCreateInfoEXT,
    BagPhysicalDeviceComputeShaderDerivativesFeaturesNV,
    BagPhysicalDeviceMeshShaderFeaturesNV,
    BagPhysicalDeviceMeshShaderPropertiesNV,
    BagPhysicalDeviceFragmentShaderBarycentricFeaturesNV,
    BagPhysicalDeviceShaderImageFootprintFeaturesNV,
    BagPipelineViewportExclusiveScissorStateCreateInfoNV,
    BagPhysicalDeviceExclusiveScissorFeaturesNV,
    BagQueueFamilyCheckpointPropertiesNV,
    BagCheckpointDataNV,
    BagPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
    BagInitializePerformanceApiInfoINTEL,
    BagQueryPoolPerformanceQueryCreateInfoINTEL,
    BagPerformanceMarkerInfoINTEL,
    BagPerformanceStreamMarkerInfoINTEL,
    BagPerformanceOverrideInfoINTEL,
    BagPerformanceConfigurationAcquireInfoINTEL,
    BagPhysicalDevicePCIBusInfoPropertiesEXT,
    BagDisplayNativeHdrSurfaceCapabilitiesAMD,
    BagSwapchainDisplayNativeHdrCreateInfoAMD,
    BagPhysicalDeviceFragmentDensityMapFeaturesEXT,
    BagPhysicalDeviceFragmentDensityMapPropertiesEXT,
    BagRenderPassFragmentDensityMapCreateInfoEXT,
    BagPhysicalDeviceSubgroupSizeControlFeaturesEXT,
    BagPhysicalDeviceSubgroupSizeControlPropertiesEXT,
    BagPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT,
    BagPhysicalDeviceShaderCoreProperties2AMD,
    BagPhysicalDeviceCoherentMemoryFeaturesAMD,
    BagPhysicalDeviceMemoryBudgetPropertiesEXT,
    BagPhysicalDeviceMemoryPriorityFeaturesEXT,
    BagMemoryPriorityAllocateInfoEXT,
    BagPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    BagPhysicalDeviceBufferDeviceAddressFeaturesEXT,
    BagBufferDeviceAddressCreateInfoEXT,
    BagPhysicalDeviceToolPropertiesEXT,
    BagValidationFeaturesEXT,
    BagCooperativeMatrixPropertiesNV,
    BagPhysicalDeviceCooperativeMatrixFeaturesNV,
    BagPhysicalDeviceCooperativeMatrixPropertiesNV,
    BagPhysicalDeviceCoverageReductionModeFeaturesNV,
    BagPipelineCoverageReductionStateCreateInfoNV,
    BagFramebufferMixedSamplesCombinationNV,
    BagPhysicalDeviceFragmentShaderInterlockFeaturesEXT,
    BagPhysicalDeviceYcbcrImageArraysFeaturesEXT,
    BagHeadlessSurfaceCreateInfoEXT,
    BagPhysicalDeviceLineRasterizationFeaturesEXT,
    BagPhysicalDeviceLineRasterizationPropertiesEXT,
    BagPipelineRasterizationLineStateCreateInfoEXT,
    BagPhysicalDeviceShaderAtomicFloatFeaturesEXT,
    BagPhysicalDeviceIndexTypeUint8FeaturesEXT,
    BagPhysicalDeviceExtendedDynamicStateFeaturesEXT,
    BagPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT,
    BagPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
    BagPhysicalDeviceDeviceGeneratedCommandsFeaturesNV,
    BagGraphicsShaderGroupCreateInfoNV,
    BagGraphicsPipelineShaderGroupsCreateInfoNV,
    BagIndirectCommandsLayoutTokenNV,
    BagIndirectCommandsLayoutCreateInfoNV,
    BagGeneratedCommandsInfoNV,
    BagGeneratedCommandsMemoryRequirementsInfoNV,
    BagPhysicalDeviceTexelBufferAlignmentFeaturesEXT,
    BagPhysicalDeviceTexelBufferAlignmentPropertiesEXT,
    BagRenderPassTransformBeginInfoQCOM,
    BagCommandBufferInheritanceRenderPassTransformInfoQCOM,
    BagPhysicalDeviceRobustness2FeaturesEXT,
    BagPhysicalDeviceRobustness2PropertiesEXT,
    BagSamplerCustomBorderColorCreateInfoEXT,
    BagPhysicalDeviceCustomBorderColorPropertiesEXT,
    BagPhysicalDeviceCustomBorderColorFeaturesEXT,
    BagPhysicalDevicePrivateDataFeaturesEXT,
    BagDevicePrivateDataCreateInfoEXT,
    BagPrivateDataSlotCreateInfoEXT,
    BagPhysicalDevicePipelineCreationCacheControlFeaturesEXT,
    BagPhysicalDeviceDiagnosticsConfigFeaturesNV,
    BagDeviceDiagnosticsConfigCreateInfoNV,
    BagPhysicalDeviceFragmentDensityMap2FeaturesEXT,
    BagPhysicalDeviceFragmentDensityMap2PropertiesEXT,
    BagPhysicalDeviceImageRobustnessFeaturesEXT,
    BagPhysicalDevice4444FormatsFeaturesEXT,
    BagAndroidSurfaceCreateInfoKHR,
    BagAndroidHardwareBufferUsageANDROID,
    BagAndroidHardwareBufferPropertiesANDROID,
    BagAndroidHardwareBufferFormatPropertiesANDROID,
    BagImportAndroidHardwareBufferInfoANDROID,
    BagMemoryGetAndroidHardwareBufferInfoANDROID,
    BagExternalFormatANDROID,
    BagImagePipeSurfaceCreateInfoFUCHSIA,
    BagIOSSurfaceCreateInfoMVK,
    BagMacOSSurfaceCreateInfoMVK,
    BagMetalSurfaceCreateInfoEXT,
    BagViSurfaceCreateInfoNN,
    BagWaylandSurfaceCreateInfoKHR,
    BagWin32SurfaceCreateInfoKHR,
    BagImportMemoryWin32HandleInfoKHR,
    BagExportMemoryWin32HandleInfoKHR,
    BagMemoryWin32HandlePropertiesKHR,
    BagMemoryGetWin32HandleInfoKHR,
    BagWin32KeyedMutexAcquireReleaseInfoKHR,
    BagImportSemaphoreWin32HandleInfoKHR,
    BagExportSemaphoreWin32HandleInfoKHR,
    BagD3D12FenceSubmitInfoKHR,
    BagSemaphoreGetWin32HandleInfoKHR,
    BagImportFenceWin32HandleInfoKHR,
    BagExportFenceWin32HandleInfoKHR,
    BagFenceGetWin32HandleInfoKHR,
    BagImportMemoryWin32HandleInfoNV,
    BagExportMemoryWin32HandleInfoNV,
    BagWin32KeyedMutexAcquireReleaseInfoNV,
    BagSurfaceFullScreenExclusiveInfoEXT,
    BagSurfaceCapabilitiesFullScreenExclusiveEXT,
    BagSurfaceFullScreenExclusiveWin32InfoEXT,
    BagXcbSurfaceCreateInfoKHR,
    BagXlibSurfaceCreateInfoKHR,
    BagStreamDescriptorSurfaceCreateInfoGGP,
    BagPresentFrameTokenGGP,
    BagDeferredOperationInfoKHR,
    BagPipelineLibraryCreateInfoKHR,
    BagRayTracingShaderGroupCreateInfoKHR,
    BagRayTracingPipelineInterfaceCreateInfoKHR,
    BagRayTracingPipelineCreateInfoKHR,
    BagAccelerationStructureGeometryTrianglesDataKHR,
    BagAccelerationStructureGeometryAabbsDataKHR,
    BagAccelerationStructureGeometryInstancesDataKHR,
    BagAccelerationStructureGeometryKHR,
    BagAccelerationStructureBuildGeometryInfoKHR,
    BagAccelerationStructureCreateGeometryTypeInfoKHR,
    BagAccelerationStructureCreateInfoKHR,
    BagAccelerationStructureMemoryRequirementsInfoKHR,
    BagPhysicalDeviceRayTracingFeaturesKHR,
    BagPhysicalDeviceRayTracingPropertiesKHR,
    BagAccelerationStructureDeviceAddressInfoKHR,
    BagAccelerationStructureVersionKHR,
    BagCopyAccelerationStructureToMemoryInfoKHR,
    BagCopyMemoryToAccelerationStructureInfoKHR,
    BagCopyAccelerationStructureInfoKHR,
    from_vk,
    enumerate_physical_devices,
    get_physical_device_features,
    get_physical_device_format_properties,
    get_physical_device_image_format_properties,
    get_physical_device_properties,
    get_physical_device_queue_family_properties,
    get_physical_device_memory_properties,
    get_instance_proc_addr,
    get_device_proc_addr,
    enumerate_instance_extension_properties,
    enumerate_device_extension_properties,
    enumerate_instance_layer_properties,
    enumerate_device_layer_properties,
    get_device_queue,
    queue_submit,
    queue_wait_idle,
    device_wait_idle,
    allocate_memory,
    free_memory,
    map_memory,
    unmap_memory,
    flush_mapped_memory_ranges,
    invalidate_mapped_memory_ranges,
    get_device_memory_commitment,
    bind_buffer_memory,
    bind_image_memory,
    get_buffer_memory_requirements,
    get_image_memory_requirements,
    get_image_sparse_memory_requirements,
    get_physical_device_sparse_image_format_properties,
    queue_bind_sparse,
    reset_fences,
    get_fence_status,
    wait_for_fences,
    get_event_status,
    set_event,
    reset_event,
    get_query_pool_results,
    get_image_subresource_layout,
    get_pipeline_cache_data,
    merge_pipeline_caches,
    reset_descriptor_pool,
    allocate_descriptor_sets,
    free_descriptor_sets,
    update_descriptor_sets,
    get_render_area_granularity,
    reset_command_pool,
    allocate_command_buffers,
    free_command_buffers,
    begin_command_buffer,
    end_command_buffer,
    reset_command_buffer,
    cmd_bind_pipeline,
    cmd_set_viewport,
    cmd_set_scissor,
    cmd_set_line_width,
    cmd_set_depth_bias,
    cmd_set_blend_constants,
    cmd_set_depth_bounds,
    cmd_set_stencil_compare_mask,
    cmd_set_stencil_write_mask,
    cmd_set_stencil_reference,
    cmd_bind_descriptor_sets,
    cmd_bind_index_buffer,
    cmd_bind_vertex_buffers,
    cmd_draw,
    cmd_draw_indexed,
    cmd_draw_indirect,
    cmd_draw_indexed_indirect,
    cmd_dispatch,
    cmd_dispatch_indirect,
    cmd_copy_buffer,
    cmd_copy_image,
    cmd_blit_image,
    cmd_copy_buffer_to_image,
    cmd_copy_image_to_buffer,
    cmd_update_buffer,
    cmd_fill_buffer,
    cmd_clear_color_image,
    cmd_clear_depth_stencil_image,
    cmd_clear_attachments,
    cmd_resolve_image,
    cmd_set_event,
    cmd_reset_event,
    cmd_wait_events,
    cmd_pipeline_barrier,
    cmd_begin_query,
    cmd_end_query,
    cmd_reset_query_pool,
    cmd_write_timestamp,
    cmd_copy_query_pool_results,
    cmd_push_constants,
    cmd_begin_render_pass,
    cmd_next_subpass,
    cmd_end_render_pass,
    cmd_execute_commands,
    enumerate_instance_version,
    bind_buffer_memory_2,
    bind_image_memory_2,
    get_device_group_peer_memory_features,
    cmd_set_device_mask,
    cmd_dispatch_base,
    enumerate_physical_device_groups,
    get_image_memory_requirements_2,
    get_buffer_memory_requirements_2,
    get_image_sparse_memory_requirements_2,
    get_physical_device_features_2,
    get_physical_device_properties_2,
    get_physical_device_format_properties_2,
    get_physical_device_image_format_properties_2,
    get_physical_device_queue_family_properties_2,
    get_physical_device_memory_properties_2,
    get_physical_device_sparse_image_format_properties_2,
    trim_command_pool,
    get_device_queue_2,
    update_descriptor_set_with_template,
    get_physical_device_external_buffer_properties,
    get_physical_device_external_fence_properties,
    get_physical_device_external_semaphore_properties,
    get_descriptor_set_layout_support,
    cmd_draw_indirect_count,
    cmd_draw_indexed_indirect_count,
    cmd_begin_render_pass_2,
    cmd_next_subpass_2,
    cmd_end_render_pass_2,
    reset_query_pool,
    get_semaphore_counter_value,
    wait_semaphores,
    signal_semaphore,
    get_buffer_device_address,
    get_buffer_opaque_capture_address,
    get_device_memory_opaque_capture_address,
    get_physical_device_surface_support_khr,
    get_physical_device_surface_capabilities_khr,
    get_physical_device_surface_formats_khr,
    get_physical_device_surface_present_modes_khr,
    get_swapchain_images_khr,
    acquire_next_image_khr,
    queue_present_khr,
    get_device_group_present_capabilities_khr,
    get_device_group_surface_present_modes_khr,
    get_physical_device_present_rectangles_khr,
    acquire_next_image_2_khr,
    get_physical_device_display_properties_khr,
    get_physical_device_display_plane_properties_khr,
    get_display_plane_supported_displays_khr,
    get_display_mode_properties_khr,
    get_display_plane_capabilities_khr,
    get_memory_fd_khr,
    get_memory_fd_properties_khr,
    import_semaphore_fd_khr,
    get_semaphore_fd_khr,
    cmd_push_descriptor_set_khr,
    cmd_push_descriptor_set_with_template_khr,
    get_swapchain_status_khr,
    import_fence_fd_khr,
    get_fence_fd_khr,
    enumerate_physical_device_queue_family_performance_query_counters_khr,
    get_physical_device_queue_family_performance_query_passes_khr,
    acquire_profiling_lock_khr,
    release_profiling_lock_khr,
    get_physical_device_surface_capabilities_2_khr,
    get_physical_device_surface_formats_2_khr,
    get_physical_device_display_properties_2_khr,
    get_physical_device_display_plane_properties_2_khr,
    get_display_mode_properties_2_khr,
    get_display_plane_capabilities_2_khr,
    get_pipeline_executable_properties_khr,
    get_pipeline_executable_statistics_khr,
    get_pipeline_executable_internal_representations_khr,
    debug_report_message_ext,
    debug_marker_set_object_tag_ext,
    debug_marker_set_object_name_ext,
    cmd_debug_marker_begin_ext,
    cmd_debug_marker_end_ext,
    cmd_debug_marker_insert_ext,
    cmd_bind_transform_feedback_buffers_ext,
    cmd_begin_transform_feedback_ext,
    cmd_end_transform_feedback_ext,
    cmd_begin_query_indexed_ext,
    cmd_end_query_indexed_ext,
    cmd_draw_indirect_byte_count_ext,
    get_image_view_handle_nvx,
    get_image_view_address_nvx,
    get_shader_info_amd,
    get_physical_device_external_image_format_properties_nv,
    cmd_begin_conditional_rendering_ext,
    cmd_end_conditional_rendering_ext,
    cmd_set_viewport_w_scaling_nv,
    release_display_ext,
    get_physical_device_surface_capabilities_2_ext,
    display_power_control_ext,
    register_device_event_ext,
    register_display_event_ext,
    get_swapchain_counter_ext,
    get_refresh_cycle_duration_google,
    get_past_presentation_timing_google,
    cmd_set_discard_rectangle_ext,
    set_hdr_metadata_ext,
    set_debug_utils_object_name_ext,
    set_debug_utils_object_tag_ext,
    queue_begin_debug_utils_label_ext,
    queue_end_debug_utils_label_ext,
    queue_insert_debug_utils_label_ext,
    cmd_begin_debug_utils_label_ext,
    cmd_end_debug_utils_label_ext,
    cmd_insert_debug_utils_label_ext,
    submit_debug_utils_message_ext,
    cmd_set_sample_locations_ext,
    get_physical_device_multisample_properties_ext,
    get_image_drm_format_modifier_properties_ext,
    merge_validation_caches_ext,
    get_validation_cache_data_ext,
    cmd_bind_shading_rate_image_nv,
    cmd_set_viewport_shading_rate_palette_nv,
    cmd_set_coarse_sample_order_nv,
    get_acceleration_structure_memory_requirements_nv,
    bind_acceleration_structure_memory_khr,
    cmd_build_acceleration_structure_nv,
    cmd_copy_acceleration_structure_nv,
    cmd_trace_rays_nv,
    get_ray_tracing_shader_group_handles_khr,
    get_acceleration_structure_handle_nv,
    cmd_write_acceleration_structures_properties_khr,
    compile_deferred_nv,
    get_memory_host_pointer_properties_ext,
    cmd_write_buffer_marker_amd,
    get_physical_device_calibrateable_time_domains_ext,
    get_calibrated_timestamps_ext,
    cmd_draw_mesh_tasks_nv,
    cmd_draw_mesh_tasks_indirect_nv,
    cmd_draw_mesh_tasks_indirect_count_nv,
    cmd_set_exclusive_scissor_nv,
    cmd_set_checkpoint_nv,
    get_queue_checkpoint_data_nv,
    initialize_performance_api_intel,
    uninitialize_performance_api_intel,
    cmd_set_performance_marker_intel,
    cmd_set_performance_stream_marker_intel,
    cmd_set_performance_override_intel,
    acquire_performance_configuration_intel,
    release_performance_configuration_intel,
    queue_set_performance_configuration_intel,
    get_performance_parameter_intel,
    set_local_dimming_amd,
    get_physical_device_tool_properties_ext,
    get_physical_device_cooperative_matrix_properties_nv,
    get_physical_device_supported_framebuffer_mixed_samples_combinations_nv,
    cmd_set_line_stipple_ext,
    cmd_set_cull_mode_ext,
    cmd_set_front_face_ext,
    cmd_set_primitive_topology_ext,
    cmd_set_viewport_with_count_ext,
    cmd_set_scissor_with_count_ext,
    cmd_bind_vertex_buffers_2_ext,
    cmd_set_depth_test_enable_ext,
    cmd_set_depth_write_enable_ext,
    cmd_set_depth_compare_op_ext,
    cmd_set_depth_bounds_test_enable_ext,
    cmd_set_stencil_test_enable_ext,
    cmd_set_stencil_op_ext,
    get_generated_commands_memory_requirements_nv,
    cmd_preprocess_generated_commands_nv,
    cmd_execute_generated_commands_nv,
    cmd_bind_pipeline_shader_group_nv,
    set_private_data_ext,
    get_private_data_ext,
    get_android_hardware_buffer_properties_android,
    get_memory_android_hardware_buffer_android,
    get_physical_device_wayland_presentation_support_khr,
    get_physical_device_win_32_presentation_support_khr,
    get_memory_win_32_handle_khr,
    get_memory_win_32_handle_properties_khr,
    import_semaphore_win_32_handle_khr,
    get_semaphore_win_32_handle_khr,
    import_fence_win_32_handle_khr,
    get_fence_win_32_handle_khr,
    get_memory_win_32_handle_nv,
    get_physical_device_surface_present_modes_2_ext,
    acquire_full_screen_exclusive_mode_ext,
    release_full_screen_exclusive_mode_ext,
    get_device_group_surface_present_modes_2_ext,
    get_physical_device_xcb_presentation_support_khr,
    get_physical_device_xlib_presentation_support_khr,
    acquire_xlib_display_ext,
    get_rand_r_output_display_ext,
    get_deferred_operation_max_concurrency_khr,
    get_deferred_operation_result_khr,
    deferred_operation_join_khr,
    get_acceleration_structure_memory_requirements_khr,
    cmd_build_acceleration_structure_khr,
    cmd_build_acceleration_structure_indirect_khr,
    build_acceleration_structure_khr,
    copy_acceleration_structure_khr,
    copy_acceleration_structure_to_memory_khr,
    copy_memory_to_acceleration_structure_khr,
    write_acceleration_structures_properties_khr,
    cmd_copy_acceleration_structure_khr,
    cmd_copy_acceleration_structure_to_memory_khr,
    cmd_copy_memory_to_acceleration_structure_khr,
    cmd_trace_rays_khr,
    get_acceleration_structure_device_address_khr,
    get_ray_tracing_capture_replay_shader_group_handles_khr,
    cmd_trace_rays_indirect_khr,
    get_device_acceleration_structure_compatibility_khr,
    nothing
