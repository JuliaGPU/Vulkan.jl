"""

"""
const MAX_PHYSICAL_DEVICE_NAME_SIZE = VK_MAX_PHYSICAL_DEVICE_NAME_SIZE
"""

"""
const UUID_SIZE = VK_UUID_SIZE
"""

"""
const LUID_SIZE = VK_LUID_SIZE
"""

"""
const MAX_DESCRIPTION_SIZE = VK_MAX_DESCRIPTION_SIZE
"""

"""
const MAX_MEMORY_TYPES = VK_MAX_MEMORY_TYPES
"""

"""
const MAX_MEMORY_HEAPS = VK_MAX_MEMORY_HEAPS
"""

"""
const LOD_CLAMP_NONE = VK_LOD_CLAMP_NONE
"""

"""
const REMAINING_MIP_LEVELS = VK_REMAINING_MIP_LEVELS
"""

"""
const REMAINING_ARRAY_LAYERS = VK_REMAINING_ARRAY_LAYERS
"""

"""
const WHOLE_SIZE = VK_WHOLE_SIZE
"""

"""
const ATTACHMENT_UNUSED = VK_ATTACHMENT_UNUSED
"""

"""
const QUEUE_FAMILY_IGNORED = VK_QUEUE_FAMILY_IGNORED
"""

"""
const QUEUE_FAMILY_EXTERNAL = VK_QUEUE_FAMILY_EXTERNAL
"""

"""
const QUEUE_FAMILY_FOREIGN_EXT = VK_QUEUE_FAMILY_FOREIGN_EXT
"""

"""
const SUBPASS_EXTERNAL = VK_SUBPASS_EXTERNAL
"""

"""
const MAX_DEVICE_GROUP_SIZE = VK_MAX_DEVICE_GROUP_SIZE
"""

"""
const MAX_DRIVER_NAME_SIZE = VK_MAX_DRIVER_NAME_SIZE
"""

"""
const MAX_DRIVER_INFO_SIZE = VK_MAX_DRIVER_INFO_SIZE
"""

"""
const SHADER_UNUSED_KHR = VK_SHADER_UNUSED_KHR
"""

"""
@cenum ImageLayout::UInt32 begin
        IMAGE_LAYOUT_UNDEFINED = 0
        IMAGE_LAYOUT_GENERAL = 1
        IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
        IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
        IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
        IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
        IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
        IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
        IMAGE_LAYOUT_PREINITIALIZED = 8
        IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
        IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
        IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
        IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
        IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
        IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
        IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000
        IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001
        IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002
        IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000
        IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001
        IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002
        IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
        IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
        IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
        IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000
        IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001
    end

"""

"""
@cenum AttachmentLoadOp::UInt32 begin
        ATTACHMENT_LOAD_OP_LOAD = 0
        ATTACHMENT_LOAD_OP_CLEAR = 1
        ATTACHMENT_LOAD_OP_DONT_CARE = 2
    end

"""

"""
@cenum AttachmentStoreOp::UInt32 begin
        ATTACHMENT_STORE_OP_STORE = 0
        ATTACHMENT_STORE_OP_DONT_CARE = 1
        ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
    end

"""

"""
@cenum ImageType::UInt32 begin
        IMAGE_TYPE_1D = 0
        IMAGE_TYPE_2D = 1
        IMAGE_TYPE_3D = 2
    end

"""

"""
@cenum ImageTiling::UInt32 begin
        IMAGE_TILING_OPTIMAL = 0
        IMAGE_TILING_LINEAR = 1
        IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
    end

"""

"""
@cenum ImageViewType::UInt32 begin
        IMAGE_VIEW_TYPE_1D = 0
        IMAGE_VIEW_TYPE_2D = 1
        IMAGE_VIEW_TYPE_3D = 2
        IMAGE_VIEW_TYPE_CUBE = 3
        IMAGE_VIEW_TYPE_1D_ARRAY = 4
        IMAGE_VIEW_TYPE_2D_ARRAY = 5
        IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
    end

"""

"""
@cenum CommandBufferLevel::UInt32 begin
        COMMAND_BUFFER_LEVEL_PRIMARY = 0
        COMMAND_BUFFER_LEVEL_SECONDARY = 1
    end

"""

"""
@cenum ComponentSwizzle::UInt32 begin
        COMPONENT_SWIZZLE_IDENTITY = 0
        COMPONENT_SWIZZLE_ZERO = 1
        COMPONENT_SWIZZLE_ONE = 2
        COMPONENT_SWIZZLE_R = 3
        COMPONENT_SWIZZLE_G = 4
        COMPONENT_SWIZZLE_B = 5
        COMPONENT_SWIZZLE_A = 6
    end

"""

"""
@cenum DescriptorType::UInt32 begin
        DESCRIPTOR_TYPE_SAMPLER = 0
        DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
        DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
        DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
        DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
        DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
        DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
        DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
        DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
        DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
        DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
        DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
        DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
    end

"""

"""
@cenum QueryType::UInt32 begin
        QUERY_TYPE_OCCLUSION = 0
        QUERY_TYPE_PIPELINE_STATISTICS = 1
        QUERY_TYPE_TIMESTAMP = 2
        QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000
        QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000
        QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
        QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
        QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
        QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
        QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
        QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
    end

"""

"""
@cenum BorderColor::UInt32 begin
        BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
        BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
        BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
        BORDER_COLOR_INT_OPAQUE_BLACK = 3
        BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
        BORDER_COLOR_INT_OPAQUE_WHITE = 5
        BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
        BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
    end

"""

"""
@cenum PipelineBindPoint::UInt32 begin
        PIPELINE_BIND_POINT_GRAPHICS = 0
        PIPELINE_BIND_POINT_COMPUTE = 1
        PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
    end

"""

"""
@cenum PipelineCacheHeaderVersion::UInt32 PIPELINE_CACHE_HEADER_VERSION_ONE = 1

"""

"""
@cenum PrimitiveTopology::UInt32 begin
        PRIMITIVE_TOPOLOGY_POINT_LIST = 0
        PRIMITIVE_TOPOLOGY_LINE_LIST = 1
        PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
        PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
        PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
        PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
        PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
    end

"""

"""
@cenum SharingMode::UInt32 begin
        SHARING_MODE_EXCLUSIVE = 0
        SHARING_MODE_CONCURRENT = 1
    end

"""

"""
@cenum IndexType::UInt32 begin
        INDEX_TYPE_UINT16 = 0
        INDEX_TYPE_UINT32 = 1
        INDEX_TYPE_NONE_KHR = 1000165000
        INDEX_TYPE_UINT8_EXT = 1000265000
    end

"""

"""
@cenum Filter::UInt32 begin
        FILTER_NEAREST = 0
        FILTER_LINEAR = 1
        FILTER_CUBIC_IMG = 1000015000
    end

"""

"""
@cenum SamplerMipmapMode::UInt32 begin
        SAMPLER_MIPMAP_MODE_NEAREST = 0
        SAMPLER_MIPMAP_MODE_LINEAR = 1
    end

"""

"""
@cenum SamplerAddressMode::UInt32 begin
        SAMPLER_ADDRESS_MODE_REPEAT = 0
        SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
        SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
        SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
        SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
    end

"""

"""
@cenum CompareOp::UInt32 begin
        COMPARE_OP_NEVER = 0
        COMPARE_OP_LESS = 1
        COMPARE_OP_EQUAL = 2
        COMPARE_OP_LESS_OR_EQUAL = 3
        COMPARE_OP_GREATER = 4
        COMPARE_OP_NOT_EQUAL = 5
        COMPARE_OP_GREATER_OR_EQUAL = 6
        COMPARE_OP_ALWAYS = 7
    end

"""

"""
@cenum PolygonMode::UInt32 begin
        POLYGON_MODE_FILL = 0
        POLYGON_MODE_LINE = 1
        POLYGON_MODE_POINT = 2
        POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
    end

"""

"""
@cenum FrontFace::UInt32 begin
        FRONT_FACE_COUNTER_CLOCKWISE = 0
        FRONT_FACE_CLOCKWISE = 1
    end

"""

"""
@cenum BlendFactor::UInt32 begin
        BLEND_FACTOR_ZERO = 0
        BLEND_FACTOR_ONE = 1
        BLEND_FACTOR_SRC_COLOR = 2
        BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
        BLEND_FACTOR_DST_COLOR = 4
        BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
        BLEND_FACTOR_SRC_ALPHA = 6
        BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
        BLEND_FACTOR_DST_ALPHA = 8
        BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
        BLEND_FACTOR_CONSTANT_COLOR = 10
        BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
        BLEND_FACTOR_CONSTANT_ALPHA = 12
        BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
        BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
        BLEND_FACTOR_SRC1_COLOR = 15
        BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
        BLEND_FACTOR_SRC1_ALPHA = 17
        BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    end

"""

"""
@cenum BlendOp::UInt32 begin
        BLEND_OP_ADD = 0
        BLEND_OP_SUBTRACT = 1
        BLEND_OP_REVERSE_SUBTRACT = 2
        BLEND_OP_MIN = 3
        BLEND_OP_MAX = 4
        BLEND_OP_ZERO_EXT = 1000148000
        BLEND_OP_SRC_EXT = 1000148001
        BLEND_OP_DST_EXT = 1000148002
        BLEND_OP_SRC_OVER_EXT = 1000148003
        BLEND_OP_DST_OVER_EXT = 1000148004
        BLEND_OP_SRC_IN_EXT = 1000148005
        BLEND_OP_DST_IN_EXT = 1000148006
        BLEND_OP_SRC_OUT_EXT = 1000148007
        BLEND_OP_DST_OUT_EXT = 1000148008
        BLEND_OP_SRC_ATOP_EXT = 1000148009
        BLEND_OP_DST_ATOP_EXT = 1000148010
        BLEND_OP_XOR_EXT = 1000148011
        BLEND_OP_MULTIPLY_EXT = 1000148012
        BLEND_OP_SCREEN_EXT = 1000148013
        BLEND_OP_OVERLAY_EXT = 1000148014
        BLEND_OP_DARKEN_EXT = 1000148015
        BLEND_OP_LIGHTEN_EXT = 1000148016
        BLEND_OP_COLORDODGE_EXT = 1000148017
        BLEND_OP_COLORBURN_EXT = 1000148018
        BLEND_OP_HARDLIGHT_EXT = 1000148019
        BLEND_OP_SOFTLIGHT_EXT = 1000148020
        BLEND_OP_DIFFERENCE_EXT = 1000148021
        BLEND_OP_EXCLUSION_EXT = 1000148022
        BLEND_OP_INVERT_EXT = 1000148023
        BLEND_OP_INVERT_RGB_EXT = 1000148024
        BLEND_OP_LINEARDODGE_EXT = 1000148025
        BLEND_OP_LINEARBURN_EXT = 1000148026
        BLEND_OP_VIVIDLIGHT_EXT = 1000148027
        BLEND_OP_LINEARLIGHT_EXT = 1000148028
        BLEND_OP_PINLIGHT_EXT = 1000148029
        BLEND_OP_HARDMIX_EXT = 1000148030
        BLEND_OP_HSL_HUE_EXT = 1000148031
        BLEND_OP_HSL_SATURATION_EXT = 1000148032
        BLEND_OP_HSL_COLOR_EXT = 1000148033
        BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
        BLEND_OP_PLUS_EXT = 1000148035
        BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
        BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
        BLEND_OP_PLUS_DARKER_EXT = 1000148038
        BLEND_OP_MINUS_EXT = 1000148039
        BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
        BLEND_OP_CONTRAST_EXT = 1000148041
        BLEND_OP_INVERT_OVG_EXT = 1000148042
        BLEND_OP_RED_EXT = 1000148043
        BLEND_OP_GREEN_EXT = 1000148044
        BLEND_OP_BLUE_EXT = 1000148045
    end

"""

"""
@cenum StencilOp::UInt32 begin
        STENCIL_OP_KEEP = 0
        STENCIL_OP_ZERO = 1
        STENCIL_OP_REPLACE = 2
        STENCIL_OP_INCREMENT_AND_CLAMP = 3
        STENCIL_OP_DECREMENT_AND_CLAMP = 4
        STENCIL_OP_INVERT = 5
        STENCIL_OP_INCREMENT_AND_WRAP = 6
        STENCIL_OP_DECREMENT_AND_WRAP = 7
    end

"""

"""
@cenum LogicOp::UInt32 begin
        LOGIC_OP_CLEAR = 0
        LOGIC_OP_AND = 1
        LOGIC_OP_AND_REVERSE = 2
        LOGIC_OP_COPY = 3
        LOGIC_OP_AND_INVERTED = 4
        LOGIC_OP_NO_OP = 5
        LOGIC_OP_XOR = 6
        LOGIC_OP_OR = 7
        LOGIC_OP_NOR = 8
        LOGIC_OP_EQUIVALENT = 9
        LOGIC_OP_INVERT = 10
        LOGIC_OP_OR_REVERSE = 11
        LOGIC_OP_COPY_INVERTED = 12
        LOGIC_OP_OR_INVERTED = 13
        LOGIC_OP_NAND = 14
        LOGIC_OP_SET = 15
    end

"""

"""
@cenum InternalAllocationType::UInt32 INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0

"""

"""
@cenum SystemAllocationScope::UInt32 begin
        SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
        SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
        SYSTEM_ALLOCATION_SCOPE_CACHE = 2
        SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
        SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
    end

"""

"""
@cenum PhysicalDeviceType::UInt32 begin
        PHYSICAL_DEVICE_TYPE_OTHER = 0
        PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
        PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
        PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
        PHYSICAL_DEVICE_TYPE_CPU = 4
    end

"""

"""
@cenum VertexInputRate::UInt32 begin
        VERTEX_INPUT_RATE_VERTEX = 0
        VERTEX_INPUT_RATE_INSTANCE = 1
    end

"""

"""
@cenum Format::UInt32 begin
        FORMAT_UNDEFINED = 0
        FORMAT_R4G4_UNORM_PACK8 = 1
        FORMAT_R4G4B4A4_UNORM_PACK16 = 2
        FORMAT_B4G4R4A4_UNORM_PACK16 = 3
        FORMAT_R5G6B5_UNORM_PACK16 = 4
        FORMAT_B5G6R5_UNORM_PACK16 = 5
        FORMAT_R5G5B5A1_UNORM_PACK16 = 6
        FORMAT_B5G5R5A1_UNORM_PACK16 = 7
        FORMAT_A1R5G5B5_UNORM_PACK16 = 8
        FORMAT_R8_UNORM = 9
        FORMAT_R8_SNORM = 10
        FORMAT_R8_USCALED = 11
        FORMAT_R8_SSCALED = 12
        FORMAT_R8_UINT = 13
        FORMAT_R8_SINT = 14
        FORMAT_R8_SRGB = 15
        FORMAT_R8G8_UNORM = 16
        FORMAT_R8G8_SNORM = 17
        FORMAT_R8G8_USCALED = 18
        FORMAT_R8G8_SSCALED = 19
        FORMAT_R8G8_UINT = 20
        FORMAT_R8G8_SINT = 21
        FORMAT_R8G8_SRGB = 22
        FORMAT_R8G8B8_UNORM = 23
        FORMAT_R8G8B8_SNORM = 24
        FORMAT_R8G8B8_USCALED = 25
        FORMAT_R8G8B8_SSCALED = 26
        FORMAT_R8G8B8_UINT = 27
        FORMAT_R8G8B8_SINT = 28
        FORMAT_R8G8B8_SRGB = 29
        FORMAT_B8G8R8_UNORM = 30
        FORMAT_B8G8R8_SNORM = 31
        FORMAT_B8G8R8_USCALED = 32
        FORMAT_B8G8R8_SSCALED = 33
        FORMAT_B8G8R8_UINT = 34
        FORMAT_B8G8R8_SINT = 35
        FORMAT_B8G8R8_SRGB = 36
        FORMAT_R8G8B8A8_UNORM = 37
        FORMAT_R8G8B8A8_SNORM = 38
        FORMAT_R8G8B8A8_USCALED = 39
        FORMAT_R8G8B8A8_SSCALED = 40
        FORMAT_R8G8B8A8_UINT = 41
        FORMAT_R8G8B8A8_SINT = 42
        FORMAT_R8G8B8A8_SRGB = 43
        FORMAT_B8G8R8A8_UNORM = 44
        FORMAT_B8G8R8A8_SNORM = 45
        FORMAT_B8G8R8A8_USCALED = 46
        FORMAT_B8G8R8A8_SSCALED = 47
        FORMAT_B8G8R8A8_UINT = 48
        FORMAT_B8G8R8A8_SINT = 49
        FORMAT_B8G8R8A8_SRGB = 50
        FORMAT_A8B8G8R8_UNORM_PACK32 = 51
        FORMAT_A8B8G8R8_SNORM_PACK32 = 52
        FORMAT_A8B8G8R8_USCALED_PACK32 = 53
        FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
        FORMAT_A8B8G8R8_UINT_PACK32 = 55
        FORMAT_A8B8G8R8_SINT_PACK32 = 56
        FORMAT_A8B8G8R8_SRGB_PACK32 = 57
        FORMAT_A2R10G10B10_UNORM_PACK32 = 58
        FORMAT_A2R10G10B10_SNORM_PACK32 = 59
        FORMAT_A2R10G10B10_USCALED_PACK32 = 60
        FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
        FORMAT_A2R10G10B10_UINT_PACK32 = 62
        FORMAT_A2R10G10B10_SINT_PACK32 = 63
        FORMAT_A2B10G10R10_UNORM_PACK32 = 64
        FORMAT_A2B10G10R10_SNORM_PACK32 = 65
        FORMAT_A2B10G10R10_USCALED_PACK32 = 66
        FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
        FORMAT_A2B10G10R10_UINT_PACK32 = 68
        FORMAT_A2B10G10R10_SINT_PACK32 = 69
        FORMAT_R16_UNORM = 70
        FORMAT_R16_SNORM = 71
        FORMAT_R16_USCALED = 72
        FORMAT_R16_SSCALED = 73
        FORMAT_R16_UINT = 74
        FORMAT_R16_SINT = 75
        FORMAT_R16_SFLOAT = 76
        FORMAT_R16G16_UNORM = 77
        FORMAT_R16G16_SNORM = 78
        FORMAT_R16G16_USCALED = 79
        FORMAT_R16G16_SSCALED = 80
        FORMAT_R16G16_UINT = 81
        FORMAT_R16G16_SINT = 82
        FORMAT_R16G16_SFLOAT = 83
        FORMAT_R16G16B16_UNORM = 84
        FORMAT_R16G16B16_SNORM = 85
        FORMAT_R16G16B16_USCALED = 86
        FORMAT_R16G16B16_SSCALED = 87
        FORMAT_R16G16B16_UINT = 88
        FORMAT_R16G16B16_SINT = 89
        FORMAT_R16G16B16_SFLOAT = 90
        FORMAT_R16G16B16A16_UNORM = 91
        FORMAT_R16G16B16A16_SNORM = 92
        FORMAT_R16G16B16A16_USCALED = 93
        FORMAT_R16G16B16A16_SSCALED = 94
        FORMAT_R16G16B16A16_UINT = 95
        FORMAT_R16G16B16A16_SINT = 96
        FORMAT_R16G16B16A16_SFLOAT = 97
        FORMAT_R32_UINT = 98
        FORMAT_R32_SINT = 99
        FORMAT_R32_SFLOAT = 100
        FORMAT_R32G32_UINT = 101
        FORMAT_R32G32_SINT = 102
        FORMAT_R32G32_SFLOAT = 103
        FORMAT_R32G32B32_UINT = 104
        FORMAT_R32G32B32_SINT = 105
        FORMAT_R32G32B32_SFLOAT = 106
        FORMAT_R32G32B32A32_UINT = 107
        FORMAT_R32G32B32A32_SINT = 108
        FORMAT_R32G32B32A32_SFLOAT = 109
        FORMAT_R64_UINT = 110
        FORMAT_R64_SINT = 111
        FORMAT_R64_SFLOAT = 112
        FORMAT_R64G64_UINT = 113
        FORMAT_R64G64_SINT = 114
        FORMAT_R64G64_SFLOAT = 115
        FORMAT_R64G64B64_UINT = 116
        FORMAT_R64G64B64_SINT = 117
        FORMAT_R64G64B64_SFLOAT = 118
        FORMAT_R64G64B64A64_UINT = 119
        FORMAT_R64G64B64A64_SINT = 120
        FORMAT_R64G64B64A64_SFLOAT = 121
        FORMAT_B10G11R11_UFLOAT_PACK32 = 122
        FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
        FORMAT_D16_UNORM = 124
        FORMAT_X8_D24_UNORM_PACK32 = 125
        FORMAT_D32_SFLOAT = 126
        FORMAT_S8_UINT = 127
        FORMAT_D16_UNORM_S8_UINT = 128
        FORMAT_D24_UNORM_S8_UINT = 129
        FORMAT_D32_SFLOAT_S8_UINT = 130
        FORMAT_BC1_RGB_UNORM_BLOCK = 131
        FORMAT_BC1_RGB_SRGB_BLOCK = 132
        FORMAT_BC1_RGBA_UNORM_BLOCK = 133
        FORMAT_BC1_RGBA_SRGB_BLOCK = 134
        FORMAT_BC2_UNORM_BLOCK = 135
        FORMAT_BC2_SRGB_BLOCK = 136
        FORMAT_BC3_UNORM_BLOCK = 137
        FORMAT_BC3_SRGB_BLOCK = 138
        FORMAT_BC4_UNORM_BLOCK = 139
        FORMAT_BC4_SNORM_BLOCK = 140
        FORMAT_BC5_UNORM_BLOCK = 141
        FORMAT_BC5_SNORM_BLOCK = 142
        FORMAT_BC6H_UFLOAT_BLOCK = 143
        FORMAT_BC6H_SFLOAT_BLOCK = 144
        FORMAT_BC7_UNORM_BLOCK = 145
        FORMAT_BC7_SRGB_BLOCK = 146
        FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
        FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
        FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
        FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
        FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
        FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
        FORMAT_EAC_R11_UNORM_BLOCK = 153
        FORMAT_EAC_R11_SNORM_BLOCK = 154
        FORMAT_EAC_R11G11_UNORM_BLOCK = 155
        FORMAT_EAC_R11G11_SNORM_BLOCK = 156
        FORMAT_ASTC_4x4_UNORM_BLOCK = 157
        FORMAT_ASTC_4x4_SRGB_BLOCK = 158
        FORMAT_ASTC_5x4_UNORM_BLOCK = 159
        FORMAT_ASTC_5x4_SRGB_BLOCK = 160
        FORMAT_ASTC_5x5_UNORM_BLOCK = 161
        FORMAT_ASTC_5x5_SRGB_BLOCK = 162
        FORMAT_ASTC_6x5_UNORM_BLOCK = 163
        FORMAT_ASTC_6x5_SRGB_BLOCK = 164
        FORMAT_ASTC_6x6_UNORM_BLOCK = 165
        FORMAT_ASTC_6x6_SRGB_BLOCK = 166
        FORMAT_ASTC_8x5_UNORM_BLOCK = 167
        FORMAT_ASTC_8x5_SRGB_BLOCK = 168
        FORMAT_ASTC_8x6_UNORM_BLOCK = 169
        FORMAT_ASTC_8x6_SRGB_BLOCK = 170
        FORMAT_ASTC_8x8_UNORM_BLOCK = 171
        FORMAT_ASTC_8x8_SRGB_BLOCK = 172
        FORMAT_ASTC_10x5_UNORM_BLOCK = 173
        FORMAT_ASTC_10x5_SRGB_BLOCK = 174
        FORMAT_ASTC_10x6_UNORM_BLOCK = 175
        FORMAT_ASTC_10x6_SRGB_BLOCK = 176
        FORMAT_ASTC_10x8_UNORM_BLOCK = 177
        FORMAT_ASTC_10x8_SRGB_BLOCK = 178
        FORMAT_ASTC_10x10_UNORM_BLOCK = 179
        FORMAT_ASTC_10x10_SRGB_BLOCK = 180
        FORMAT_ASTC_12x10_UNORM_BLOCK = 181
        FORMAT_ASTC_12x10_SRGB_BLOCK = 182
        FORMAT_ASTC_12x12_UNORM_BLOCK = 183
        FORMAT_ASTC_12x12_SRGB_BLOCK = 184
        FORMAT_G8B8G8R8_422_UNORM = 1000156000
        FORMAT_B8G8R8G8_422_UNORM = 1000156001
        FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
        FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
        FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
        FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
        FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
        FORMAT_R10X6_UNORM_PACK16 = 1000156007
        FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
        FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
        FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
        FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
        FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
        FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
        FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
        FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
        FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
        FORMAT_R12X4_UNORM_PACK16 = 1000156017
        FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
        FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
        FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
        FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
        FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
        FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
        FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
        FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
        FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
        FORMAT_G16B16G16R16_422_UNORM = 1000156027
        FORMAT_B16G16R16G16_422_UNORM = 1000156028
        FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
        FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
        FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
        FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
        FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
        FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
        FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
        FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
        FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
        FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
        FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
        FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
        FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
        FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
        FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
        FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
        FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
        FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
        FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
        FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
        FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
        FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
        FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
        FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
        FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
        FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
        FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
        FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000
        FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001
        FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002
        FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003
        FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004
        FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005
        FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006
        FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007
        FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008
        FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009
        FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010
        FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011
        FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012
        FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013
        FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014
        FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015
        FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016
        FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017
        FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018
        FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019
        FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020
        FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021
        FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022
        FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023
        FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024
        FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025
        FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026
        FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027
        FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028
        FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029
        FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000
        FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001
        FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002
        FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003
        FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
        FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
    end

"""

"""
@cenum StructureType::UInt32 begin
        STRUCTURE_TYPE_APPLICATION_INFO = 0
        STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
        STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
        STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
        STRUCTURE_TYPE_SUBMIT_INFO = 4
        STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
        STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
        STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
        STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
        STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
        STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
        STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
        STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
        STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
        STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
        STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
        STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
        STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
        STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
        STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
        STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
        STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
        STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
        STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
        STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
        STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
        STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
        STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
        STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
        STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
        STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
        STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
        STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
        STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
        STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
        STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
        STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
        STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
        STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
        STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
        STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
        STRUCTURE_TYPE_MEMORY_BARRIER = 46
        STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
        STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
        STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
        STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
        STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
        STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
        STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
        STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
        STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
        STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
        STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
        STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
        STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
        STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
        STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
        STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
        STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
        STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
        STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
        STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
        STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
        STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
        STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
        STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
        STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
        STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
        STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
        STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
        STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
        STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
        STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
        STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
        STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
        STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
        STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
        STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
        STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
        STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
        STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
        STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
        STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
        STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
        STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
        STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
        STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
        STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
        STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
        STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
        STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
        STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
        STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
        STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
        STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
        STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
        STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
        STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
        STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
        STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
        STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
        STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
        STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
        STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
        STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
        STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
        STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
        STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
        STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
        STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
        STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
        STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
        STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
        STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
        STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
        STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
        STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
        STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
        STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
        STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
        STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
        STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
        STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
        STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
        STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
        STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000
        STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002
        STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
        STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
        STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
        STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
        STRUCTURE_TYPE_VIDEO_PROFILE_KHR = 1000023000
        STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001
        STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR = 1000023002
        STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR = 1000023003
        STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR = 1000023004
        STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005
        STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006
        STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007
        STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008
        STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009
        STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010
        STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR = 1000023011
        STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000023012
        STRUCTURE_TYPE_VIDEO_PROFILES_KHR = 1000023013
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014
        STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015
        STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000
        STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000
        STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
        STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
        STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
        STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = 1000038001
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038002
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038003
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038004
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038005
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT = 1000038006
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT = 1000038007
        STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT = 1000038008
        STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT = 1000040001
        STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040002
        STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT = 1000040003
        STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT = 1000040004
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040005
        STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040006
        STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040007
        STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
        STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
        STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
        STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
        STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
        STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
        STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
        STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
        STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
        STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
        STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
        STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
        STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
        STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
        STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
        STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
        STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
        STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
        STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
        STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
        STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
        STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
        STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
        STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
        STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
        STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
        STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
        STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
        STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
        STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
        STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
        STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
        STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
        STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
        STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
        STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
        STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
        STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
        STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
        STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
        STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
        STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
        STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
        STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
        STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
        STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
        STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
        STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
        STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
        STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
        STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
        STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
        STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
        STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
        STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
        STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
        STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
        STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
        STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
        STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
        STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
        STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
        STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
        STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
        STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
        STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
        STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
        STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
        STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
        STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
        STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
        STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
        STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
        STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
        STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
        STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
        STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
        STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
        STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
        STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
        STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
        STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
        STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
        STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
        STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
        STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
        STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
        STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
        STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
        STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
        STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
        STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
        STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT = 1000187001
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187002
        STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187003
        STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT = 1000187004
        STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187005
        STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187006
        STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
        STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
        STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
        STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
        STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
        STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
        STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
        STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
        STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
        STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
        STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
        STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
        STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
        STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
        STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
        STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000
        STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
        STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
        STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
        STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
        STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
        STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
        STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
        STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
        STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
        STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
        STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
        STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
        STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
        STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
        STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
        STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
        STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
        STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
        STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
        STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
        STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
        STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
        STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
        STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
        STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
        STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
        STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
        STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
        STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
        STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
        STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
        STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
        STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
        STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
        STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
        STRUCTURE_TYPE_RESERVED_QCOM = 1000309000
        STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000
        STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001
        STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002
        STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003
        STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004
        STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005
        STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006
        STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007
        STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
        STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
        STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
        STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
        STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
        STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
        STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
        STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
        STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
        STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
        STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
        STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
        STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
        STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
        STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
        STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
        STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
        STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
        STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
        STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
        STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
        STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
        STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
        STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
        STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
        STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
        STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
        STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
        STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
        STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
        STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
    end

"""

"""
@cenum SubpassContents::UInt32 begin
        SUBPASS_CONTENTS_INLINE = 0
        SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
    end

"""

"""
@cenum Result::Int32 begin
        SUCCESS = 0
        NOT_READY = 1
        TIMEOUT = 2
        EVENT_SET = 3
        EVENT_RESET = 4
        INCOMPLETE = 5
        ERROR_OUT_OF_HOST_MEMORY = -1
        ERROR_OUT_OF_DEVICE_MEMORY = -2
        ERROR_INITIALIZATION_FAILED = -3
        ERROR_DEVICE_LOST = -4
        ERROR_MEMORY_MAP_FAILED = -5
        ERROR_LAYER_NOT_PRESENT = -6
        ERROR_EXTENSION_NOT_PRESENT = -7
        ERROR_FEATURE_NOT_PRESENT = -8
        ERROR_INCOMPATIBLE_DRIVER = -9
        ERROR_TOO_MANY_OBJECTS = -10
        ERROR_FORMAT_NOT_SUPPORTED = -11
        ERROR_FRAGMENTED_POOL = -12
        ERROR_UNKNOWN = -13
        ERROR_OUT_OF_POOL_MEMORY = -1000069000
        ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
        ERROR_FRAGMENTATION = -1000161000
        ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
        ERROR_SURFACE_LOST_KHR = -1000000000
        ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
        SUBOPTIMAL_KHR = 1000001003
        ERROR_OUT_OF_DATE_KHR = -1000001004
        ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
        ERROR_VALIDATION_FAILED_EXT = -1000011001
        ERROR_INVALID_SHADER_NV = -1000012000
        ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
        ERROR_NOT_PERMITTED_EXT = -1000174001
        ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
        THREAD_IDLE_KHR = 1000268000
        THREAD_DONE_KHR = 1000268001
        OPERATION_DEFERRED_KHR = 1000268002
        OPERATION_NOT_DEFERRED_KHR = 1000268003
        PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
    end

"""

"""
@cenum DynamicState::UInt32 begin
        DYNAMIC_STATE_VIEWPORT = 0
        DYNAMIC_STATE_SCISSOR = 1
        DYNAMIC_STATE_LINE_WIDTH = 2
        DYNAMIC_STATE_DEPTH_BIAS = 3
        DYNAMIC_STATE_BLEND_CONSTANTS = 4
        DYNAMIC_STATE_DEPTH_BOUNDS = 5
        DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
        DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
        DYNAMIC_STATE_STENCIL_REFERENCE = 8
        DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
        DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
        DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
        DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
        DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
        DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
        DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
        DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
        DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
        DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
        DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
        DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
        DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
        DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
        DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
        DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
        DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
        DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
        DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
        DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
        DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
        DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
        DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
        DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001
        DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002
        DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
        DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004
        DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
    end

"""

"""
@cenum DescriptorUpdateTemplateType::UInt32 begin
        DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
        DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
    end

"""

"""
@cenum ObjectType::UInt32 begin
        OBJECT_TYPE_UNKNOWN = 0
        OBJECT_TYPE_INSTANCE = 1
        OBJECT_TYPE_PHYSICAL_DEVICE = 2
        OBJECT_TYPE_DEVICE = 3
        OBJECT_TYPE_QUEUE = 4
        OBJECT_TYPE_SEMAPHORE = 5
        OBJECT_TYPE_COMMAND_BUFFER = 6
        OBJECT_TYPE_FENCE = 7
        OBJECT_TYPE_DEVICE_MEMORY = 8
        OBJECT_TYPE_BUFFER = 9
        OBJECT_TYPE_IMAGE = 10
        OBJECT_TYPE_EVENT = 11
        OBJECT_TYPE_QUERY_POOL = 12
        OBJECT_TYPE_BUFFER_VIEW = 13
        OBJECT_TYPE_IMAGE_VIEW = 14
        OBJECT_TYPE_SHADER_MODULE = 15
        OBJECT_TYPE_PIPELINE_CACHE = 16
        OBJECT_TYPE_PIPELINE_LAYOUT = 17
        OBJECT_TYPE_RENDER_PASS = 18
        OBJECT_TYPE_PIPELINE = 19
        OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
        OBJECT_TYPE_SAMPLER = 21
        OBJECT_TYPE_DESCRIPTOR_POOL = 22
        OBJECT_TYPE_DESCRIPTOR_SET = 23
        OBJECT_TYPE_FRAMEBUFFER = 24
        OBJECT_TYPE_COMMAND_POOL = 25
        OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
        OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
        OBJECT_TYPE_SURFACE_KHR = 1000000000
        OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
        OBJECT_TYPE_DISPLAY_KHR = 1000002000
        OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
        OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
        OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000
        OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001
        OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
        OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
        OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
        OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
        OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
        OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
        OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
    end

"""

"""
@cenum SemaphoreType::UInt32 begin
        SEMAPHORE_TYPE_BINARY = 0
        SEMAPHORE_TYPE_TIMELINE = 1
    end

"""

"""
@cenum PresentModeKHR::UInt32 begin
        PRESENT_MODE_IMMEDIATE_KHR = 0
        PRESENT_MODE_MAILBOX_KHR = 1
        PRESENT_MODE_FIFO_KHR = 2
        PRESENT_MODE_FIFO_RELAXED_KHR = 3
        PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
        PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
    end

"""

"""
@cenum ColorSpaceKHR::UInt32 begin
        COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
        COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
        COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
        COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
        COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
        COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
        COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
        COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
        COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
        COLOR_SPACE_DOLBYVISION_EXT = 1000104009
        COLOR_SPACE_HDR10_HLG_EXT = 1000104010
        COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
        COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
        COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
        COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
        COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
    end

"""

"""
@cenum TimeDomainEXT::UInt32 begin
        TIME_DOMAIN_DEVICE_EXT = 0
        TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
        TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
        TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
    end

"""

"""
@cenum DebugReportObjectTypeEXT::UInt32 begin
        DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
        DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
        DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
        DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
        DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
        DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
        DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
        DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
        DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
        DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
        DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
        DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
        DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
        DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
        DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
        DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
        DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
        DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
        DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
        DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
        DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
        DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
        DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
        DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
        DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
        DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
        DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
        DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
        DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
        DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
        DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
    end

"""

"""
@cenum DeviceMemoryReportEventTypeEXT::UInt32 begin
        DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
        DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
        DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
        DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
        DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
    end

"""

"""
@cenum RasterizationOrderAMD::UInt32 begin
        RASTERIZATION_ORDER_STRICT_AMD = 0
        RASTERIZATION_ORDER_RELAXED_AMD = 1
    end

"""

"""
@cenum ValidationCheckEXT::UInt32 begin
        VALIDATION_CHECK_ALL_EXT = 0
        VALIDATION_CHECK_SHADERS_EXT = 1
    end

"""

"""
@cenum ValidationFeatureEnableEXT::UInt32 begin
        VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
        VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
        VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
        VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
        VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
    end

"""

"""
@cenum ValidationFeatureDisableEXT::UInt32 begin
        VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
        VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
        VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
        VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
        VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
        VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
        VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
    end

"""

"""
@cenum IndirectCommandsTokenTypeNV::UInt32 begin
        INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
        INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
        INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
        INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
        INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
        INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
    end

"""

"""
@cenum DisplayPowerStateEXT::UInt32 begin
        DISPLAY_POWER_STATE_OFF_EXT = 0
        DISPLAY_POWER_STATE_SUSPEND_EXT = 1
        DISPLAY_POWER_STATE_ON_EXT = 2
    end

"""

"""
@cenum DeviceEventTypeEXT::UInt32 DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0

"""

"""
@cenum DisplayEventTypeEXT::UInt32 DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0

"""

"""
@cenum ViewportCoordinateSwizzleNV::UInt32 begin
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
        VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
        VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
    end

"""

"""
@cenum DiscardRectangleModeEXT::UInt32 begin
        DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
        DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
    end

"""

"""
@cenum PointClippingBehavior::UInt32 begin
        POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
        POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
    end

"""

"""
@cenum SamplerReductionMode::UInt32 begin
        SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
        SAMPLER_REDUCTION_MODE_MIN = 1
        SAMPLER_REDUCTION_MODE_MAX = 2
    end

"""

"""
@cenum TessellationDomainOrigin::UInt32 begin
        TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
        TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
    end

"""

"""
@cenum SamplerYcbcrModelConversion::UInt32 begin
        SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
        SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
    end

"""

"""
@cenum SamplerYcbcrRange::UInt32 begin
        SAMPLER_YCBCR_RANGE_ITU_FULL = 0
        SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
    end

"""

"""
@cenum ChromaLocation::UInt32 begin
        CHROMA_LOCATION_COSITED_EVEN = 0
        CHROMA_LOCATION_MIDPOINT = 1
    end

"""

"""
@cenum BlendOverlapEXT::UInt32 begin
        BLEND_OVERLAP_UNCORRELATED_EXT = 0
        BLEND_OVERLAP_DISJOINT_EXT = 1
        BLEND_OVERLAP_CONJOINT_EXT = 2
    end

"""

"""
@cenum CoverageModulationModeNV::UInt32 begin
        COVERAGE_MODULATION_MODE_NONE_NV = 0
        COVERAGE_MODULATION_MODE_RGB_NV = 1
        COVERAGE_MODULATION_MODE_ALPHA_NV = 2
        COVERAGE_MODULATION_MODE_RGBA_NV = 3
    end

"""

"""
@cenum CoverageReductionModeNV::UInt32 begin
        COVERAGE_REDUCTION_MODE_MERGE_NV = 0
        COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
    end

"""

"""
@cenum ValidationCacheHeaderVersionEXT::UInt32 VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1

"""

"""
@cenum ShaderInfoTypeAMD::UInt32 begin
        SHADER_INFO_TYPE_STATISTICS_AMD = 0
        SHADER_INFO_TYPE_BINARY_AMD = 1
        SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
    end

"""

"""
@cenum QueueGlobalPriorityEXT::UInt32 begin
        QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
        QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
        QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
        QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
    end

"""

"""
@cenum ConservativeRasterizationModeEXT::UInt32 begin
        CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
        CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
        CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
    end

"""

"""
@cenum VendorId::UInt32 begin
        VENDOR_ID_VIV = 0x00010001
        VENDOR_ID_VSI = 0x00010002
        VENDOR_ID_KAZAN = 0x00010003
        VENDOR_ID_CODEPLAY = 0x00010004
        VENDOR_ID_MESA = 0x00010005
        VENDOR_ID_POCL = 0x00010006
    end

"""

"""
@cenum DriverId::UInt32 begin
        DRIVER_ID_AMD_PROPRIETARY = 1
        DRIVER_ID_AMD_OPEN_SOURCE = 2
        DRIVER_ID_MESA_RADV = 3
        DRIVER_ID_NVIDIA_PROPRIETARY = 4
        DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
        DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
        DRIVER_ID_IMAGINATION_PROPRIETARY = 7
        DRIVER_ID_QUALCOMM_PROPRIETARY = 8
        DRIVER_ID_ARM_PROPRIETARY = 9
        DRIVER_ID_GOOGLE_SWIFTSHADER = 10
        DRIVER_ID_GGP_PROPRIETARY = 11
        DRIVER_ID_BROADCOM_PROPRIETARY = 12
        DRIVER_ID_MESA_LLVMPIPE = 13
        DRIVER_ID_MOLTENVK = 14
        DRIVER_ID_COREAVI_PROPRIETARY = 15
    end

"""

"""
@cenum ShadingRatePaletteEntryNV::UInt32 begin
        SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
        SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
        SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
        SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
        SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
        SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
    end

"""

"""
@cenum CoarseSampleOrderTypeNV::UInt32 begin
        COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
        COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
        COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
        COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
    end

"""

"""
@cenum CopyAccelerationStructureModeKHR::UInt32 begin
        COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
        COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
        COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
        COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
    end

"""

"""
@cenum BuildAccelerationStructureModeKHR::UInt32 begin
        BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
        BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
    end

"""

"""
@cenum AccelerationStructureTypeKHR::UInt32 begin
        ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
        ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
        ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
    end

"""

"""
@cenum GeometryTypeKHR::UInt32 begin
        GEOMETRY_TYPE_TRIANGLES_KHR = 0
        GEOMETRY_TYPE_AABBS_KHR = 1
        GEOMETRY_TYPE_INSTANCES_KHR = 2
    end

"""

"""
@cenum AccelerationStructureMemoryRequirementsTypeNV::UInt32 begin
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
        ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
    end

"""

"""
@cenum AccelerationStructureBuildTypeKHR::UInt32 begin
        ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
        ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
        ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
    end

"""

"""
@cenum RayTracingShaderGroupTypeKHR::UInt32 begin
        RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
        RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
        RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
    end

"""

"""
@cenum AccelerationStructureCompatibilityKHR::UInt32 begin
        ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
        ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
    end

"""

"""
@cenum ShaderGroupShaderKHR::UInt32 begin
        SHADER_GROUP_SHADER_GENERAL_KHR = 0
        SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
        SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
        SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
    end

"""

"""
@cenum MemoryOverallocationBehaviorAMD::UInt32 begin
        MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
        MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
        MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
    end

"""

"""
@cenum ScopeNV::UInt32 begin
        SCOPE_DEVICE_NV = 1
        SCOPE_WORKGROUP_NV = 2
        SCOPE_SUBGROUP_NV = 3
        SCOPE_QUEUE_FAMILY_NV = 5
    end

"""

"""
@cenum ComponentTypeNV::UInt32 begin
        COMPONENT_TYPE_FLOAT16_NV = 0
        COMPONENT_TYPE_FLOAT32_NV = 1
        COMPONENT_TYPE_FLOAT64_NV = 2
        COMPONENT_TYPE_SINT8_NV = 3
        COMPONENT_TYPE_SINT16_NV = 4
        COMPONENT_TYPE_SINT32_NV = 5
        COMPONENT_TYPE_SINT64_NV = 6
        COMPONENT_TYPE_UINT8_NV = 7
        COMPONENT_TYPE_UINT16_NV = 8
        COMPONENT_TYPE_UINT32_NV = 9
        COMPONENT_TYPE_UINT64_NV = 10
    end

"""

"""
@cenum FullScreenExclusiveEXT::UInt32 begin
        FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0
        FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1
        FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2
        FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3
    end

"""

"""
@cenum PerformanceCounterScopeKHR::UInt32 begin
        PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
        PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
        PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
    end

"""

"""
@cenum PerformanceCounterUnitKHR::UInt32 begin
        PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
        PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
        PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
        PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
        PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
        PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
        PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
        PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
        PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
        PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
        PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
    end

"""

"""
@cenum PerformanceCounterStorageKHR::UInt32 begin
        PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
        PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
        PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
        PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
        PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
        PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
    end

"""

"""
@cenum PerformanceConfigurationTypeINTEL::UInt32 PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0

"""

"""
@cenum QueryPoolSamplingModeINTEL::UInt32 QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0

"""

"""
@cenum PerformanceOverrideTypeINTEL::UInt32 begin
        PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
        PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
    end

"""

"""
@cenum PerformanceParameterTypeINTEL::UInt32 begin
        PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
        PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
    end

"""

"""
@cenum PerformanceValueTypeINTEL::UInt32 begin
        PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
        PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
        PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
        PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
        PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
    end

"""

"""
@cenum ShaderFloatControlsIndependence::UInt32 begin
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
        SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
    end

"""

"""
@cenum PipelineExecutableStatisticFormatKHR::UInt32 begin
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
        PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
    end

"""

"""
@cenum LineRasterizationModeEXT::UInt32 begin
        LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
        LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
        LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
        LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
    end

"""

"""
@cenum FragmentShadingRateCombinerOpKHR::UInt32 begin
        FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
        FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
        FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
        FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
        FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
    end

"""

"""
@cenum FragmentShadingRateNV::UInt32 begin
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
        FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
        FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
        FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
        FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
        FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
        FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
    end

"""

"""
@cenum FragmentShadingRateTypeNV::UInt32 begin
        FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
        FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
    end

"""

"""
@cenum ProvokingVertexModeEXT::UInt32 begin
        PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
        PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
    end

"""

"""
convert(T::Type{UInt32}, x::ImageLayout) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AttachmentLoadOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AttachmentStoreOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ImageType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ImageTiling) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ImageViewType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CommandBufferLevel) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ComponentSwizzle) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DescriptorType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::QueryType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::BorderColor) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PipelineBindPoint) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PipelineCacheHeaderVersion) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PrimitiveTopology) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SharingMode) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::IndexType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::Filter) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SamplerMipmapMode) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SamplerAddressMode) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CompareOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PolygonMode) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::FrontFace) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::BlendFactor) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::BlendOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::StencilOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::LogicOp) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::InternalAllocationType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SystemAllocationScope) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PhysicalDeviceType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::VertexInputRate) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::Format) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::StructureType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SubpassContents) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{Int32}, x::Result) = Base.bitcast(Int32, x)

"""

"""
convert(T::Type{UInt32}, x::DynamicState) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DescriptorUpdateTemplateType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ObjectType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SemaphoreType) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PresentModeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ColorSpaceKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::TimeDomainEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DebugReportObjectTypeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DeviceMemoryReportEventTypeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::RasterizationOrderAMD) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ValidationCheckEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ValidationFeatureEnableEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ValidationFeatureDisableEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::IndirectCommandsTokenTypeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DisplayPowerStateEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DeviceEventTypeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DisplayEventTypeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ViewportCoordinateSwizzleNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DiscardRectangleModeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PointClippingBehavior) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SamplerReductionMode) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::TessellationDomainOrigin) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SamplerYcbcrModelConversion) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::SamplerYcbcrRange) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ChromaLocation) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::BlendOverlapEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CoverageModulationModeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CoverageReductionModeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ValidationCacheHeaderVersionEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ShaderInfoTypeAMD) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::QueueGlobalPriorityEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ConservativeRasterizationModeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::VendorId) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::DriverId) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ShadingRatePaletteEntryNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CoarseSampleOrderTypeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::CopyAccelerationStructureModeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::BuildAccelerationStructureModeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AccelerationStructureTypeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::GeometryTypeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AccelerationStructureMemoryRequirementsTypeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AccelerationStructureBuildTypeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::RayTracingShaderGroupTypeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::AccelerationStructureCompatibilityKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ShaderGroupShaderKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::MemoryOverallocationBehaviorAMD) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ScopeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ComponentTypeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::FullScreenExclusiveEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceCounterScopeKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceCounterUnitKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceCounterStorageKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceConfigurationTypeINTEL) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::QueryPoolSamplingModeINTEL) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceOverrideTypeINTEL) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceParameterTypeINTEL) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PerformanceValueTypeINTEL) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ShaderFloatControlsIndependence) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::PipelineExecutableStatisticFormatKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::LineRasterizationModeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::FragmentShadingRateCombinerOpKHR) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::FragmentShadingRateNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::FragmentShadingRateTypeNV) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{UInt32}, x::ProvokingVertexModeEXT) = Base.bitcast(UInt32, x)

"""

"""
convert(T::Type{ImageLayout}, x::UInt32) = Base.bitcast(ImageLayout, x)

"""

"""
convert(T::Type{AttachmentLoadOp}, x::UInt32) = Base.bitcast(AttachmentLoadOp, x)

"""

"""
convert(T::Type{AttachmentStoreOp}, x::UInt32) = Base.bitcast(AttachmentStoreOp, x)

"""

"""
convert(T::Type{ImageType}, x::UInt32) = Base.bitcast(ImageType, x)

"""

"""
convert(T::Type{ImageTiling}, x::UInt32) = Base.bitcast(ImageTiling, x)

"""

"""
convert(T::Type{ImageViewType}, x::UInt32) = Base.bitcast(ImageViewType, x)

"""

"""
convert(T::Type{CommandBufferLevel}, x::UInt32) = Base.bitcast(CommandBufferLevel, x)

"""

"""
convert(T::Type{ComponentSwizzle}, x::UInt32) = Base.bitcast(ComponentSwizzle, x)

"""

"""
convert(T::Type{DescriptorType}, x::UInt32) = Base.bitcast(DescriptorType, x)

"""

"""
convert(T::Type{QueryType}, x::UInt32) = Base.bitcast(QueryType, x)

"""

"""
convert(T::Type{BorderColor}, x::UInt32) = Base.bitcast(BorderColor, x)

"""

"""
convert(T::Type{PipelineBindPoint}, x::UInt32) = Base.bitcast(PipelineBindPoint, x)

"""

"""
convert(T::Type{PipelineCacheHeaderVersion}, x::UInt32) = Base.bitcast(PipelineCacheHeaderVersion, x)

"""

"""
convert(T::Type{PrimitiveTopology}, x::UInt32) = Base.bitcast(PrimitiveTopology, x)

"""

"""
convert(T::Type{SharingMode}, x::UInt32) = Base.bitcast(SharingMode, x)

"""

"""
convert(T::Type{IndexType}, x::UInt32) = Base.bitcast(IndexType, x)

"""

"""
convert(T::Type{Filter}, x::UInt32) = Base.bitcast(Filter, x)

"""

"""
convert(T::Type{SamplerMipmapMode}, x::UInt32) = Base.bitcast(SamplerMipmapMode, x)

"""

"""
convert(T::Type{SamplerAddressMode}, x::UInt32) = Base.bitcast(SamplerAddressMode, x)

"""

"""
convert(T::Type{CompareOp}, x::UInt32) = Base.bitcast(CompareOp, x)

"""

"""
convert(T::Type{PolygonMode}, x::UInt32) = Base.bitcast(PolygonMode, x)

"""

"""
convert(T::Type{FrontFace}, x::UInt32) = Base.bitcast(FrontFace, x)

"""

"""
convert(T::Type{BlendFactor}, x::UInt32) = Base.bitcast(BlendFactor, x)

"""

"""
convert(T::Type{BlendOp}, x::UInt32) = Base.bitcast(BlendOp, x)

"""

"""
convert(T::Type{StencilOp}, x::UInt32) = Base.bitcast(StencilOp, x)

"""

"""
convert(T::Type{LogicOp}, x::UInt32) = Base.bitcast(LogicOp, x)

"""

"""
convert(T::Type{InternalAllocationType}, x::UInt32) = Base.bitcast(InternalAllocationType, x)

"""

"""
convert(T::Type{SystemAllocationScope}, x::UInt32) = Base.bitcast(SystemAllocationScope, x)

"""

"""
convert(T::Type{PhysicalDeviceType}, x::UInt32) = Base.bitcast(PhysicalDeviceType, x)

"""

"""
convert(T::Type{VertexInputRate}, x::UInt32) = Base.bitcast(VertexInputRate, x)

"""

"""
convert(T::Type{Format}, x::UInt32) = Base.bitcast(Format, x)

"""

"""
convert(T::Type{StructureType}, x::UInt32) = Base.bitcast(StructureType, x)

"""

"""
convert(T::Type{SubpassContents}, x::UInt32) = Base.bitcast(SubpassContents, x)

"""

"""
convert(T::Type{Result}, x::Int32) = Base.bitcast(Result, x)

"""

"""
convert(T::Type{DynamicState}, x::UInt32) = Base.bitcast(DynamicState, x)

"""

"""
convert(T::Type{DescriptorUpdateTemplateType}, x::UInt32) = Base.bitcast(DescriptorUpdateTemplateType, x)

"""

"""
convert(T::Type{ObjectType}, x::UInt32) = Base.bitcast(ObjectType, x)

"""

"""
convert(T::Type{SemaphoreType}, x::UInt32) = Base.bitcast(SemaphoreType, x)

"""

"""
convert(T::Type{PresentModeKHR}, x::UInt32) = Base.bitcast(PresentModeKHR, x)

"""

"""
convert(T::Type{ColorSpaceKHR}, x::UInt32) = Base.bitcast(ColorSpaceKHR, x)

"""

"""
convert(T::Type{TimeDomainEXT}, x::UInt32) = Base.bitcast(TimeDomainEXT, x)

"""

"""
convert(T::Type{DebugReportObjectTypeEXT}, x::UInt32) = Base.bitcast(DebugReportObjectTypeEXT, x)

"""

"""
convert(T::Type{DeviceMemoryReportEventTypeEXT}, x::UInt32) = Base.bitcast(DeviceMemoryReportEventTypeEXT, x)

"""

"""
convert(T::Type{RasterizationOrderAMD}, x::UInt32) = Base.bitcast(RasterizationOrderAMD, x)

"""

"""
convert(T::Type{ValidationCheckEXT}, x::UInt32) = Base.bitcast(ValidationCheckEXT, x)

"""

"""
convert(T::Type{ValidationFeatureEnableEXT}, x::UInt32) = Base.bitcast(ValidationFeatureEnableEXT, x)

"""

"""
convert(T::Type{ValidationFeatureDisableEXT}, x::UInt32) = Base.bitcast(ValidationFeatureDisableEXT, x)

"""

"""
convert(T::Type{IndirectCommandsTokenTypeNV}, x::UInt32) = Base.bitcast(IndirectCommandsTokenTypeNV, x)

"""

"""
convert(T::Type{DisplayPowerStateEXT}, x::UInt32) = Base.bitcast(DisplayPowerStateEXT, x)

"""

"""
convert(T::Type{DeviceEventTypeEXT}, x::UInt32) = Base.bitcast(DeviceEventTypeEXT, x)

"""

"""
convert(T::Type{DisplayEventTypeEXT}, x::UInt32) = Base.bitcast(DisplayEventTypeEXT, x)

"""

"""
convert(T::Type{ViewportCoordinateSwizzleNV}, x::UInt32) = Base.bitcast(ViewportCoordinateSwizzleNV, x)

"""

"""
convert(T::Type{DiscardRectangleModeEXT}, x::UInt32) = Base.bitcast(DiscardRectangleModeEXT, x)

"""

"""
convert(T::Type{PointClippingBehavior}, x::UInt32) = Base.bitcast(PointClippingBehavior, x)

"""

"""
convert(T::Type{SamplerReductionMode}, x::UInt32) = Base.bitcast(SamplerReductionMode, x)

"""

"""
convert(T::Type{TessellationDomainOrigin}, x::UInt32) = Base.bitcast(TessellationDomainOrigin, x)

"""

"""
convert(T::Type{SamplerYcbcrModelConversion}, x::UInt32) = Base.bitcast(SamplerYcbcrModelConversion, x)

"""

"""
convert(T::Type{SamplerYcbcrRange}, x::UInt32) = Base.bitcast(SamplerYcbcrRange, x)

"""

"""
convert(T::Type{ChromaLocation}, x::UInt32) = Base.bitcast(ChromaLocation, x)

"""

"""
convert(T::Type{BlendOverlapEXT}, x::UInt32) = Base.bitcast(BlendOverlapEXT, x)

"""

"""
convert(T::Type{CoverageModulationModeNV}, x::UInt32) = Base.bitcast(CoverageModulationModeNV, x)

"""

"""
convert(T::Type{CoverageReductionModeNV}, x::UInt32) = Base.bitcast(CoverageReductionModeNV, x)

"""

"""
convert(T::Type{ValidationCacheHeaderVersionEXT}, x::UInt32) = Base.bitcast(ValidationCacheHeaderVersionEXT, x)

"""

"""
convert(T::Type{ShaderInfoTypeAMD}, x::UInt32) = Base.bitcast(ShaderInfoTypeAMD, x)

"""

"""
convert(T::Type{QueueGlobalPriorityEXT}, x::UInt32) = Base.bitcast(QueueGlobalPriorityEXT, x)

"""

"""
convert(T::Type{ConservativeRasterizationModeEXT}, x::UInt32) = Base.bitcast(ConservativeRasterizationModeEXT, x)

"""

"""
convert(T::Type{VendorId}, x::UInt32) = Base.bitcast(VendorId, x)

"""

"""
convert(T::Type{DriverId}, x::UInt32) = Base.bitcast(DriverId, x)

"""

"""
convert(T::Type{ShadingRatePaletteEntryNV}, x::UInt32) = Base.bitcast(ShadingRatePaletteEntryNV, x)

"""

"""
convert(T::Type{CoarseSampleOrderTypeNV}, x::UInt32) = Base.bitcast(CoarseSampleOrderTypeNV, x)

"""

"""
convert(T::Type{CopyAccelerationStructureModeKHR}, x::UInt32) = Base.bitcast(CopyAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{BuildAccelerationStructureModeKHR}, x::UInt32) = Base.bitcast(BuildAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureTypeKHR}, x::UInt32) = Base.bitcast(AccelerationStructureTypeKHR, x)

"""

"""
convert(T::Type{GeometryTypeKHR}, x::UInt32) = Base.bitcast(GeometryTypeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureMemoryRequirementsTypeNV}, x::UInt32) = Base.bitcast(AccelerationStructureMemoryRequirementsTypeNV, x)

"""

"""
convert(T::Type{AccelerationStructureBuildTypeKHR}, x::UInt32) = Base.bitcast(AccelerationStructureBuildTypeKHR, x)

"""

"""
convert(T::Type{RayTracingShaderGroupTypeKHR}, x::UInt32) = Base.bitcast(RayTracingShaderGroupTypeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureCompatibilityKHR}, x::UInt32) = Base.bitcast(AccelerationStructureCompatibilityKHR, x)

"""

"""
convert(T::Type{ShaderGroupShaderKHR}, x::UInt32) = Base.bitcast(ShaderGroupShaderKHR, x)

"""

"""
convert(T::Type{MemoryOverallocationBehaviorAMD}, x::UInt32) = Base.bitcast(MemoryOverallocationBehaviorAMD, x)

"""

"""
convert(T::Type{ScopeNV}, x::UInt32) = Base.bitcast(ScopeNV, x)

"""

"""
convert(T::Type{ComponentTypeNV}, x::UInt32) = Base.bitcast(ComponentTypeNV, x)

"""

"""
convert(T::Type{FullScreenExclusiveEXT}, x::UInt32) = Base.bitcast(FullScreenExclusiveEXT, x)

"""

"""
convert(T::Type{PerformanceCounterScopeKHR}, x::UInt32) = Base.bitcast(PerformanceCounterScopeKHR, x)

"""

"""
convert(T::Type{PerformanceCounterUnitKHR}, x::UInt32) = Base.bitcast(PerformanceCounterUnitKHR, x)

"""

"""
convert(T::Type{PerformanceCounterStorageKHR}, x::UInt32) = Base.bitcast(PerformanceCounterStorageKHR, x)

"""

"""
convert(T::Type{PerformanceConfigurationTypeINTEL}, x::UInt32) = Base.bitcast(PerformanceConfigurationTypeINTEL, x)

"""

"""
convert(T::Type{QueryPoolSamplingModeINTEL}, x::UInt32) = Base.bitcast(QueryPoolSamplingModeINTEL, x)

"""

"""
convert(T::Type{PerformanceOverrideTypeINTEL}, x::UInt32) = Base.bitcast(PerformanceOverrideTypeINTEL, x)

"""

"""
convert(T::Type{PerformanceParameterTypeINTEL}, x::UInt32) = Base.bitcast(PerformanceParameterTypeINTEL, x)

"""

"""
convert(T::Type{PerformanceValueTypeINTEL}, x::UInt32) = Base.bitcast(PerformanceValueTypeINTEL, x)

"""

"""
convert(T::Type{ShaderFloatControlsIndependence}, x::UInt32) = Base.bitcast(ShaderFloatControlsIndependence, x)

"""

"""
convert(T::Type{PipelineExecutableStatisticFormatKHR}, x::UInt32) = Base.bitcast(PipelineExecutableStatisticFormatKHR, x)

"""

"""
convert(T::Type{LineRasterizationModeEXT}, x::UInt32) = Base.bitcast(LineRasterizationModeEXT, x)

"""

"""
convert(T::Type{FragmentShadingRateCombinerOpKHR}, x::UInt32) = Base.bitcast(FragmentShadingRateCombinerOpKHR, x)

"""

"""
convert(T::Type{FragmentShadingRateNV}, x::UInt32) = Base.bitcast(FragmentShadingRateNV, x)

"""

"""
convert(T::Type{FragmentShadingRateTypeNV}, x::UInt32) = Base.bitcast(FragmentShadingRateTypeNV, x)

"""

"""
convert(T::Type{ProvokingVertexModeEXT}, x::UInt32) = Base.bitcast(ProvokingVertexModeEXT, x)

"""

"""
convert(T::Type{ImageLayout}, x::VkImageLayout) = Base.bitcast(ImageLayout, x)

"""

"""
convert(T::Type{AttachmentLoadOp}, x::VkAttachmentLoadOp) = Base.bitcast(AttachmentLoadOp, x)

"""

"""
convert(T::Type{AttachmentStoreOp}, x::VkAttachmentStoreOp) = Base.bitcast(AttachmentStoreOp, x)

"""

"""
convert(T::Type{ImageType}, x::VkImageType) = Base.bitcast(ImageType, x)

"""

"""
convert(T::Type{ImageTiling}, x::VkImageTiling) = Base.bitcast(ImageTiling, x)

"""

"""
convert(T::Type{ImageViewType}, x::VkImageViewType) = Base.bitcast(ImageViewType, x)

"""

"""
convert(T::Type{CommandBufferLevel}, x::VkCommandBufferLevel) = Base.bitcast(CommandBufferLevel, x)

"""

"""
convert(T::Type{ComponentSwizzle}, x::VkComponentSwizzle) = Base.bitcast(ComponentSwizzle, x)

"""

"""
convert(T::Type{DescriptorType}, x::VkDescriptorType) = Base.bitcast(DescriptorType, x)

"""

"""
convert(T::Type{QueryType}, x::VkQueryType) = Base.bitcast(QueryType, x)

"""

"""
convert(T::Type{BorderColor}, x::VkBorderColor) = Base.bitcast(BorderColor, x)

"""

"""
convert(T::Type{PipelineBindPoint}, x::VkPipelineBindPoint) = Base.bitcast(PipelineBindPoint, x)

"""

"""
convert(T::Type{PipelineCacheHeaderVersion}, x::VkPipelineCacheHeaderVersion) = Base.bitcast(PipelineCacheHeaderVersion, x)

"""

"""
convert(T::Type{PrimitiveTopology}, x::VkPrimitiveTopology) = Base.bitcast(PrimitiveTopology, x)

"""

"""
convert(T::Type{SharingMode}, x::VkSharingMode) = Base.bitcast(SharingMode, x)

"""

"""
convert(T::Type{IndexType}, x::VkIndexType) = Base.bitcast(IndexType, x)

"""

"""
convert(T::Type{Filter}, x::VkFilter) = Base.bitcast(Filter, x)

"""

"""
convert(T::Type{SamplerMipmapMode}, x::VkSamplerMipmapMode) = Base.bitcast(SamplerMipmapMode, x)

"""

"""
convert(T::Type{SamplerAddressMode}, x::VkSamplerAddressMode) = Base.bitcast(SamplerAddressMode, x)

"""

"""
convert(T::Type{CompareOp}, x::VkCompareOp) = Base.bitcast(CompareOp, x)

"""

"""
convert(T::Type{PolygonMode}, x::VkPolygonMode) = Base.bitcast(PolygonMode, x)

"""

"""
convert(T::Type{FrontFace}, x::VkFrontFace) = Base.bitcast(FrontFace, x)

"""

"""
convert(T::Type{BlendFactor}, x::VkBlendFactor) = Base.bitcast(BlendFactor, x)

"""

"""
convert(T::Type{BlendOp}, x::VkBlendOp) = Base.bitcast(BlendOp, x)

"""

"""
convert(T::Type{StencilOp}, x::VkStencilOp) = Base.bitcast(StencilOp, x)

"""

"""
convert(T::Type{LogicOp}, x::VkLogicOp) = Base.bitcast(LogicOp, x)

"""

"""
convert(T::Type{InternalAllocationType}, x::VkInternalAllocationType) = Base.bitcast(InternalAllocationType, x)

"""

"""
convert(T::Type{SystemAllocationScope}, x::VkSystemAllocationScope) = Base.bitcast(SystemAllocationScope, x)

"""

"""
convert(T::Type{PhysicalDeviceType}, x::VkPhysicalDeviceType) = Base.bitcast(PhysicalDeviceType, x)

"""

"""
convert(T::Type{VertexInputRate}, x::VkVertexInputRate) = Base.bitcast(VertexInputRate, x)

"""

"""
convert(T::Type{Format}, x::VkFormat) = Base.bitcast(Format, x)

"""

"""
convert(T::Type{StructureType}, x::VkStructureType) = Base.bitcast(StructureType, x)

"""

"""
convert(T::Type{SubpassContents}, x::VkSubpassContents) = Base.bitcast(SubpassContents, x)

"""

"""
convert(T::Type{Result}, x::VkResult) = Base.bitcast(Result, x)

"""

"""
convert(T::Type{DynamicState}, x::VkDynamicState) = Base.bitcast(DynamicState, x)

"""

"""
convert(T::Type{DescriptorUpdateTemplateType}, x::VkDescriptorUpdateTemplateType) = Base.bitcast(DescriptorUpdateTemplateType, x)

"""

"""
convert(T::Type{ObjectType}, x::VkObjectType) = Base.bitcast(ObjectType, x)

"""

"""
convert(T::Type{SemaphoreType}, x::VkSemaphoreType) = Base.bitcast(SemaphoreType, x)

"""

"""
convert(T::Type{PresentModeKHR}, x::VkPresentModeKHR) = Base.bitcast(PresentModeKHR, x)

"""

"""
convert(T::Type{ColorSpaceKHR}, x::VkColorSpaceKHR) = Base.bitcast(ColorSpaceKHR, x)

"""

"""
convert(T::Type{TimeDomainEXT}, x::VkTimeDomainEXT) = Base.bitcast(TimeDomainEXT, x)

"""

"""
convert(T::Type{DebugReportObjectTypeEXT}, x::VkDebugReportObjectTypeEXT) = Base.bitcast(DebugReportObjectTypeEXT, x)

"""

"""
convert(T::Type{DeviceMemoryReportEventTypeEXT}, x::VkDeviceMemoryReportEventTypeEXT) = Base.bitcast(DeviceMemoryReportEventTypeEXT, x)

"""

"""
convert(T::Type{RasterizationOrderAMD}, x::VkRasterizationOrderAMD) = Base.bitcast(RasterizationOrderAMD, x)

"""

"""
convert(T::Type{ValidationCheckEXT}, x::VkValidationCheckEXT) = Base.bitcast(ValidationCheckEXT, x)

"""

"""
convert(T::Type{ValidationFeatureEnableEXT}, x::VkValidationFeatureEnableEXT) = Base.bitcast(ValidationFeatureEnableEXT, x)

"""

"""
convert(T::Type{ValidationFeatureDisableEXT}, x::VkValidationFeatureDisableEXT) = Base.bitcast(ValidationFeatureDisableEXT, x)

"""

"""
convert(T::Type{IndirectCommandsTokenTypeNV}, x::VkIndirectCommandsTokenTypeNV) = Base.bitcast(IndirectCommandsTokenTypeNV, x)

"""

"""
convert(T::Type{DisplayPowerStateEXT}, x::VkDisplayPowerStateEXT) = Base.bitcast(DisplayPowerStateEXT, x)

"""

"""
convert(T::Type{DeviceEventTypeEXT}, x::VkDeviceEventTypeEXT) = Base.bitcast(DeviceEventTypeEXT, x)

"""

"""
convert(T::Type{DisplayEventTypeEXT}, x::VkDisplayEventTypeEXT) = Base.bitcast(DisplayEventTypeEXT, x)

"""

"""
convert(T::Type{ViewportCoordinateSwizzleNV}, x::VkViewportCoordinateSwizzleNV) = Base.bitcast(ViewportCoordinateSwizzleNV, x)

"""

"""
convert(T::Type{DiscardRectangleModeEXT}, x::VkDiscardRectangleModeEXT) = Base.bitcast(DiscardRectangleModeEXT, x)

"""

"""
convert(T::Type{PointClippingBehavior}, x::VkPointClippingBehavior) = Base.bitcast(PointClippingBehavior, x)

"""

"""
convert(T::Type{SamplerReductionMode}, x::VkSamplerReductionMode) = Base.bitcast(SamplerReductionMode, x)

"""

"""
convert(T::Type{TessellationDomainOrigin}, x::VkTessellationDomainOrigin) = Base.bitcast(TessellationDomainOrigin, x)

"""

"""
convert(T::Type{SamplerYcbcrModelConversion}, x::VkSamplerYcbcrModelConversion) = Base.bitcast(SamplerYcbcrModelConversion, x)

"""

"""
convert(T::Type{SamplerYcbcrRange}, x::VkSamplerYcbcrRange) = Base.bitcast(SamplerYcbcrRange, x)

"""

"""
convert(T::Type{ChromaLocation}, x::VkChromaLocation) = Base.bitcast(ChromaLocation, x)

"""

"""
convert(T::Type{BlendOverlapEXT}, x::VkBlendOverlapEXT) = Base.bitcast(BlendOverlapEXT, x)

"""

"""
convert(T::Type{CoverageModulationModeNV}, x::VkCoverageModulationModeNV) = Base.bitcast(CoverageModulationModeNV, x)

"""

"""
convert(T::Type{CoverageReductionModeNV}, x::VkCoverageReductionModeNV) = Base.bitcast(CoverageReductionModeNV, x)

"""

"""
convert(T::Type{ValidationCacheHeaderVersionEXT}, x::VkValidationCacheHeaderVersionEXT) = Base.bitcast(ValidationCacheHeaderVersionEXT, x)

"""

"""
convert(T::Type{ShaderInfoTypeAMD}, x::VkShaderInfoTypeAMD) = Base.bitcast(ShaderInfoTypeAMD, x)

"""

"""
convert(T::Type{QueueGlobalPriorityEXT}, x::VkQueueGlobalPriorityEXT) = Base.bitcast(QueueGlobalPriorityEXT, x)

"""

"""
convert(T::Type{ConservativeRasterizationModeEXT}, x::VkConservativeRasterizationModeEXT) = Base.bitcast(ConservativeRasterizationModeEXT, x)

"""

"""
convert(T::Type{VendorId}, x::VkVendorId) = Base.bitcast(VendorId, x)

"""

"""
convert(T::Type{DriverId}, x::VkDriverId) = Base.bitcast(DriverId, x)

"""

"""
convert(T::Type{ShadingRatePaletteEntryNV}, x::VkShadingRatePaletteEntryNV) = Base.bitcast(ShadingRatePaletteEntryNV, x)

"""

"""
convert(T::Type{CoarseSampleOrderTypeNV}, x::VkCoarseSampleOrderTypeNV) = Base.bitcast(CoarseSampleOrderTypeNV, x)

"""

"""
convert(T::Type{CopyAccelerationStructureModeKHR}, x::VkCopyAccelerationStructureModeKHR) = Base.bitcast(CopyAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{BuildAccelerationStructureModeKHR}, x::VkBuildAccelerationStructureModeKHR) = Base.bitcast(BuildAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureTypeKHR}, x::VkAccelerationStructureTypeKHR) = Base.bitcast(AccelerationStructureTypeKHR, x)

"""

"""
convert(T::Type{GeometryTypeKHR}, x::VkGeometryTypeKHR) = Base.bitcast(GeometryTypeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureMemoryRequirementsTypeNV}, x::VkAccelerationStructureMemoryRequirementsTypeNV) = Base.bitcast(AccelerationStructureMemoryRequirementsTypeNV, x)

"""

"""
convert(T::Type{AccelerationStructureBuildTypeKHR}, x::VkAccelerationStructureBuildTypeKHR) = Base.bitcast(AccelerationStructureBuildTypeKHR, x)

"""

"""
convert(T::Type{RayTracingShaderGroupTypeKHR}, x::VkRayTracingShaderGroupTypeKHR) = Base.bitcast(RayTracingShaderGroupTypeKHR, x)

"""

"""
convert(T::Type{AccelerationStructureCompatibilityKHR}, x::VkAccelerationStructureCompatibilityKHR) = Base.bitcast(AccelerationStructureCompatibilityKHR, x)

"""

"""
convert(T::Type{ShaderGroupShaderKHR}, x::VkShaderGroupShaderKHR) = Base.bitcast(ShaderGroupShaderKHR, x)

"""

"""
convert(T::Type{MemoryOverallocationBehaviorAMD}, x::VkMemoryOverallocationBehaviorAMD) = Base.bitcast(MemoryOverallocationBehaviorAMD, x)

"""

"""
convert(T::Type{ScopeNV}, x::VkScopeNV) = Base.bitcast(ScopeNV, x)

"""

"""
convert(T::Type{ComponentTypeNV}, x::VkComponentTypeNV) = Base.bitcast(ComponentTypeNV, x)

"""

"""
convert(T::Type{FullScreenExclusiveEXT}, x::VkFullScreenExclusiveEXT) = Base.bitcast(FullScreenExclusiveEXT, x)

"""

"""
convert(T::Type{PerformanceCounterScopeKHR}, x::VkPerformanceCounterScopeKHR) = Base.bitcast(PerformanceCounterScopeKHR, x)

"""

"""
convert(T::Type{PerformanceCounterUnitKHR}, x::VkPerformanceCounterUnitKHR) = Base.bitcast(PerformanceCounterUnitKHR, x)

"""

"""
convert(T::Type{PerformanceCounterStorageKHR}, x::VkPerformanceCounterStorageKHR) = Base.bitcast(PerformanceCounterStorageKHR, x)

"""

"""
convert(T::Type{PerformanceConfigurationTypeINTEL}, x::VkPerformanceConfigurationTypeINTEL) = Base.bitcast(PerformanceConfigurationTypeINTEL, x)

"""

"""
convert(T::Type{QueryPoolSamplingModeINTEL}, x::VkQueryPoolSamplingModeINTEL) = Base.bitcast(QueryPoolSamplingModeINTEL, x)

"""

"""
convert(T::Type{PerformanceOverrideTypeINTEL}, x::VkPerformanceOverrideTypeINTEL) = Base.bitcast(PerformanceOverrideTypeINTEL, x)

"""

"""
convert(T::Type{PerformanceParameterTypeINTEL}, x::VkPerformanceParameterTypeINTEL) = Base.bitcast(PerformanceParameterTypeINTEL, x)

"""

"""
convert(T::Type{PerformanceValueTypeINTEL}, x::VkPerformanceValueTypeINTEL) = Base.bitcast(PerformanceValueTypeINTEL, x)

"""

"""
convert(T::Type{ShaderFloatControlsIndependence}, x::VkShaderFloatControlsIndependence) = Base.bitcast(ShaderFloatControlsIndependence, x)

"""

"""
convert(T::Type{PipelineExecutableStatisticFormatKHR}, x::VkPipelineExecutableStatisticFormatKHR) = Base.bitcast(PipelineExecutableStatisticFormatKHR, x)

"""

"""
convert(T::Type{LineRasterizationModeEXT}, x::VkLineRasterizationModeEXT) = Base.bitcast(LineRasterizationModeEXT, x)

"""

"""
convert(T::Type{FragmentShadingRateCombinerOpKHR}, x::VkFragmentShadingRateCombinerOpKHR) = Base.bitcast(FragmentShadingRateCombinerOpKHR, x)

"""

"""
convert(T::Type{FragmentShadingRateNV}, x::VkFragmentShadingRateNV) = Base.bitcast(FragmentShadingRateNV, x)

"""

"""
convert(T::Type{FragmentShadingRateTypeNV}, x::VkFragmentShadingRateTypeNV) = Base.bitcast(FragmentShadingRateTypeNV, x)

"""

"""
convert(T::Type{ProvokingVertexModeEXT}, x::VkProvokingVertexModeEXT) = Base.bitcast(ProvokingVertexModeEXT, x)

"""

"""
convert(T::Type{VkImageLayout}, x::ImageLayout) = Base.bitcast(VkImageLayout, x)

"""

"""
convert(T::Type{VkAttachmentLoadOp}, x::AttachmentLoadOp) = Base.bitcast(VkAttachmentLoadOp, x)

"""

"""
convert(T::Type{VkAttachmentStoreOp}, x::AttachmentStoreOp) = Base.bitcast(VkAttachmentStoreOp, x)

"""

"""
convert(T::Type{VkImageType}, x::ImageType) = Base.bitcast(VkImageType, x)

"""

"""
convert(T::Type{VkImageTiling}, x::ImageTiling) = Base.bitcast(VkImageTiling, x)

"""

"""
convert(T::Type{VkImageViewType}, x::ImageViewType) = Base.bitcast(VkImageViewType, x)

"""

"""
convert(T::Type{VkCommandBufferLevel}, x::CommandBufferLevel) = Base.bitcast(VkCommandBufferLevel, x)

"""

"""
convert(T::Type{VkComponentSwizzle}, x::ComponentSwizzle) = Base.bitcast(VkComponentSwizzle, x)

"""

"""
convert(T::Type{VkDescriptorType}, x::DescriptorType) = Base.bitcast(VkDescriptorType, x)

"""

"""
convert(T::Type{VkQueryType}, x::QueryType) = Base.bitcast(VkQueryType, x)

"""

"""
convert(T::Type{VkBorderColor}, x::BorderColor) = Base.bitcast(VkBorderColor, x)

"""

"""
convert(T::Type{VkPipelineBindPoint}, x::PipelineBindPoint) = Base.bitcast(VkPipelineBindPoint, x)

"""

"""
convert(T::Type{VkPipelineCacheHeaderVersion}, x::PipelineCacheHeaderVersion) = Base.bitcast(VkPipelineCacheHeaderVersion, x)

"""

"""
convert(T::Type{VkPrimitiveTopology}, x::PrimitiveTopology) = Base.bitcast(VkPrimitiveTopology, x)

"""

"""
convert(T::Type{VkSharingMode}, x::SharingMode) = Base.bitcast(VkSharingMode, x)

"""

"""
convert(T::Type{VkIndexType}, x::IndexType) = Base.bitcast(VkIndexType, x)

"""

"""
convert(T::Type{VkFilter}, x::Filter) = Base.bitcast(VkFilter, x)

"""

"""
convert(T::Type{VkSamplerMipmapMode}, x::SamplerMipmapMode) = Base.bitcast(VkSamplerMipmapMode, x)

"""

"""
convert(T::Type{VkSamplerAddressMode}, x::SamplerAddressMode) = Base.bitcast(VkSamplerAddressMode, x)

"""

"""
convert(T::Type{VkCompareOp}, x::CompareOp) = Base.bitcast(VkCompareOp, x)

"""

"""
convert(T::Type{VkPolygonMode}, x::PolygonMode) = Base.bitcast(VkPolygonMode, x)

"""

"""
convert(T::Type{VkFrontFace}, x::FrontFace) = Base.bitcast(VkFrontFace, x)

"""

"""
convert(T::Type{VkBlendFactor}, x::BlendFactor) = Base.bitcast(VkBlendFactor, x)

"""

"""
convert(T::Type{VkBlendOp}, x::BlendOp) = Base.bitcast(VkBlendOp, x)

"""

"""
convert(T::Type{VkStencilOp}, x::StencilOp) = Base.bitcast(VkStencilOp, x)

"""

"""
convert(T::Type{VkLogicOp}, x::LogicOp) = Base.bitcast(VkLogicOp, x)

"""

"""
convert(T::Type{VkInternalAllocationType}, x::InternalAllocationType) = Base.bitcast(VkInternalAllocationType, x)

"""

"""
convert(T::Type{VkSystemAllocationScope}, x::SystemAllocationScope) = Base.bitcast(VkSystemAllocationScope, x)

"""

"""
convert(T::Type{VkPhysicalDeviceType}, x::PhysicalDeviceType) = Base.bitcast(VkPhysicalDeviceType, x)

"""

"""
convert(T::Type{VkVertexInputRate}, x::VertexInputRate) = Base.bitcast(VkVertexInputRate, x)

"""

"""
convert(T::Type{VkFormat}, x::Format) = Base.bitcast(VkFormat, x)

"""

"""
convert(T::Type{VkStructureType}, x::StructureType) = Base.bitcast(VkStructureType, x)

"""

"""
convert(T::Type{VkSubpassContents}, x::SubpassContents) = Base.bitcast(VkSubpassContents, x)

"""

"""
convert(T::Type{VkResult}, x::Result) = Base.bitcast(VkResult, x)

"""

"""
convert(T::Type{VkDynamicState}, x::DynamicState) = Base.bitcast(VkDynamicState, x)

"""

"""
convert(T::Type{VkDescriptorUpdateTemplateType}, x::DescriptorUpdateTemplateType) = Base.bitcast(VkDescriptorUpdateTemplateType, x)

"""

"""
convert(T::Type{VkObjectType}, x::ObjectType) = Base.bitcast(VkObjectType, x)

"""

"""
convert(T::Type{VkSemaphoreType}, x::SemaphoreType) = Base.bitcast(VkSemaphoreType, x)

"""

"""
convert(T::Type{VkPresentModeKHR}, x::PresentModeKHR) = Base.bitcast(VkPresentModeKHR, x)

"""

"""
convert(T::Type{VkColorSpaceKHR}, x::ColorSpaceKHR) = Base.bitcast(VkColorSpaceKHR, x)

"""

"""
convert(T::Type{VkTimeDomainEXT}, x::TimeDomainEXT) = Base.bitcast(VkTimeDomainEXT, x)

"""

"""
convert(T::Type{VkDebugReportObjectTypeEXT}, x::DebugReportObjectTypeEXT) = Base.bitcast(VkDebugReportObjectTypeEXT, x)

"""

"""
convert(T::Type{VkDeviceMemoryReportEventTypeEXT}, x::DeviceMemoryReportEventTypeEXT) = Base.bitcast(VkDeviceMemoryReportEventTypeEXT, x)

"""

"""
convert(T::Type{VkRasterizationOrderAMD}, x::RasterizationOrderAMD) = Base.bitcast(VkRasterizationOrderAMD, x)

"""

"""
convert(T::Type{VkValidationCheckEXT}, x::ValidationCheckEXT) = Base.bitcast(VkValidationCheckEXT, x)

"""

"""
convert(T::Type{VkValidationFeatureEnableEXT}, x::ValidationFeatureEnableEXT) = Base.bitcast(VkValidationFeatureEnableEXT, x)

"""

"""
convert(T::Type{VkValidationFeatureDisableEXT}, x::ValidationFeatureDisableEXT) = Base.bitcast(VkValidationFeatureDisableEXT, x)

"""

"""
convert(T::Type{VkIndirectCommandsTokenTypeNV}, x::IndirectCommandsTokenTypeNV) = Base.bitcast(VkIndirectCommandsTokenTypeNV, x)

"""

"""
convert(T::Type{VkDisplayPowerStateEXT}, x::DisplayPowerStateEXT) = Base.bitcast(VkDisplayPowerStateEXT, x)

"""

"""
convert(T::Type{VkDeviceEventTypeEXT}, x::DeviceEventTypeEXT) = Base.bitcast(VkDeviceEventTypeEXT, x)

"""

"""
convert(T::Type{VkDisplayEventTypeEXT}, x::DisplayEventTypeEXT) = Base.bitcast(VkDisplayEventTypeEXT, x)

"""

"""
convert(T::Type{VkViewportCoordinateSwizzleNV}, x::ViewportCoordinateSwizzleNV) = Base.bitcast(VkViewportCoordinateSwizzleNV, x)

"""

"""
convert(T::Type{VkDiscardRectangleModeEXT}, x::DiscardRectangleModeEXT) = Base.bitcast(VkDiscardRectangleModeEXT, x)

"""

"""
convert(T::Type{VkPointClippingBehavior}, x::PointClippingBehavior) = Base.bitcast(VkPointClippingBehavior, x)

"""

"""
convert(T::Type{VkSamplerReductionMode}, x::SamplerReductionMode) = Base.bitcast(VkSamplerReductionMode, x)

"""

"""
convert(T::Type{VkTessellationDomainOrigin}, x::TessellationDomainOrigin) = Base.bitcast(VkTessellationDomainOrigin, x)

"""

"""
convert(T::Type{VkSamplerYcbcrModelConversion}, x::SamplerYcbcrModelConversion) = Base.bitcast(VkSamplerYcbcrModelConversion, x)

"""

"""
convert(T::Type{VkSamplerYcbcrRange}, x::SamplerYcbcrRange) = Base.bitcast(VkSamplerYcbcrRange, x)

"""

"""
convert(T::Type{VkChromaLocation}, x::ChromaLocation) = Base.bitcast(VkChromaLocation, x)

"""

"""
convert(T::Type{VkBlendOverlapEXT}, x::BlendOverlapEXT) = Base.bitcast(VkBlendOverlapEXT, x)

"""

"""
convert(T::Type{VkCoverageModulationModeNV}, x::CoverageModulationModeNV) = Base.bitcast(VkCoverageModulationModeNV, x)

"""

"""
convert(T::Type{VkCoverageReductionModeNV}, x::CoverageReductionModeNV) = Base.bitcast(VkCoverageReductionModeNV, x)

"""

"""
convert(T::Type{VkValidationCacheHeaderVersionEXT}, x::ValidationCacheHeaderVersionEXT) = Base.bitcast(VkValidationCacheHeaderVersionEXT, x)

"""

"""
convert(T::Type{VkShaderInfoTypeAMD}, x::ShaderInfoTypeAMD) = Base.bitcast(VkShaderInfoTypeAMD, x)

"""

"""
convert(T::Type{VkQueueGlobalPriorityEXT}, x::QueueGlobalPriorityEXT) = Base.bitcast(VkQueueGlobalPriorityEXT, x)

"""

"""
convert(T::Type{VkConservativeRasterizationModeEXT}, x::ConservativeRasterizationModeEXT) = Base.bitcast(VkConservativeRasterizationModeEXT, x)

"""

"""
convert(T::Type{VkVendorId}, x::VendorId) = Base.bitcast(VkVendorId, x)

"""

"""
convert(T::Type{VkDriverId}, x::DriverId) = Base.bitcast(VkDriverId, x)

"""

"""
convert(T::Type{VkShadingRatePaletteEntryNV}, x::ShadingRatePaletteEntryNV) = Base.bitcast(VkShadingRatePaletteEntryNV, x)

"""

"""
convert(T::Type{VkCoarseSampleOrderTypeNV}, x::CoarseSampleOrderTypeNV) = Base.bitcast(VkCoarseSampleOrderTypeNV, x)

"""

"""
convert(T::Type{VkCopyAccelerationStructureModeKHR}, x::CopyAccelerationStructureModeKHR) = Base.bitcast(VkCopyAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{VkBuildAccelerationStructureModeKHR}, x::BuildAccelerationStructureModeKHR) = Base.bitcast(VkBuildAccelerationStructureModeKHR, x)

"""

"""
convert(T::Type{VkAccelerationStructureTypeKHR}, x::AccelerationStructureTypeKHR) = Base.bitcast(VkAccelerationStructureTypeKHR, x)

"""

"""
convert(T::Type{VkGeometryTypeKHR}, x::GeometryTypeKHR) = Base.bitcast(VkGeometryTypeKHR, x)

"""

"""
convert(T::Type{VkAccelerationStructureMemoryRequirementsTypeNV}, x::AccelerationStructureMemoryRequirementsTypeNV) = Base.bitcast(VkAccelerationStructureMemoryRequirementsTypeNV, x)

"""

"""
convert(T::Type{VkAccelerationStructureBuildTypeKHR}, x::AccelerationStructureBuildTypeKHR) = Base.bitcast(VkAccelerationStructureBuildTypeKHR, x)

"""

"""
convert(T::Type{VkRayTracingShaderGroupTypeKHR}, x::RayTracingShaderGroupTypeKHR) = Base.bitcast(VkRayTracingShaderGroupTypeKHR, x)

"""

"""
convert(T::Type{VkAccelerationStructureCompatibilityKHR}, x::AccelerationStructureCompatibilityKHR) = Base.bitcast(VkAccelerationStructureCompatibilityKHR, x)

"""

"""
convert(T::Type{VkShaderGroupShaderKHR}, x::ShaderGroupShaderKHR) = Base.bitcast(VkShaderGroupShaderKHR, x)

"""

"""
convert(T::Type{VkMemoryOverallocationBehaviorAMD}, x::MemoryOverallocationBehaviorAMD) = Base.bitcast(VkMemoryOverallocationBehaviorAMD, x)

"""

"""
convert(T::Type{VkScopeNV}, x::ScopeNV) = Base.bitcast(VkScopeNV, x)

"""

"""
convert(T::Type{VkComponentTypeNV}, x::ComponentTypeNV) = Base.bitcast(VkComponentTypeNV, x)

"""

"""
convert(T::Type{VkFullScreenExclusiveEXT}, x::FullScreenExclusiveEXT) = Base.bitcast(VkFullScreenExclusiveEXT, x)

"""

"""
convert(T::Type{VkPerformanceCounterScopeKHR}, x::PerformanceCounterScopeKHR) = Base.bitcast(VkPerformanceCounterScopeKHR, x)

"""

"""
convert(T::Type{VkPerformanceCounterUnitKHR}, x::PerformanceCounterUnitKHR) = Base.bitcast(VkPerformanceCounterUnitKHR, x)

"""

"""
convert(T::Type{VkPerformanceCounterStorageKHR}, x::PerformanceCounterStorageKHR) = Base.bitcast(VkPerformanceCounterStorageKHR, x)

"""

"""
convert(T::Type{VkPerformanceConfigurationTypeINTEL}, x::PerformanceConfigurationTypeINTEL) = Base.bitcast(VkPerformanceConfigurationTypeINTEL, x)

"""

"""
convert(T::Type{VkQueryPoolSamplingModeINTEL}, x::QueryPoolSamplingModeINTEL) = Base.bitcast(VkQueryPoolSamplingModeINTEL, x)

"""

"""
convert(T::Type{VkPerformanceOverrideTypeINTEL}, x::PerformanceOverrideTypeINTEL) = Base.bitcast(VkPerformanceOverrideTypeINTEL, x)

"""

"""
convert(T::Type{VkPerformanceParameterTypeINTEL}, x::PerformanceParameterTypeINTEL) = Base.bitcast(VkPerformanceParameterTypeINTEL, x)

"""

"""
convert(T::Type{VkPerformanceValueTypeINTEL}, x::PerformanceValueTypeINTEL) = Base.bitcast(VkPerformanceValueTypeINTEL, x)

"""

"""
convert(T::Type{VkShaderFloatControlsIndependence}, x::ShaderFloatControlsIndependence) = Base.bitcast(VkShaderFloatControlsIndependence, x)

"""

"""
convert(T::Type{VkPipelineExecutableStatisticFormatKHR}, x::PipelineExecutableStatisticFormatKHR) = Base.bitcast(VkPipelineExecutableStatisticFormatKHR, x)

"""

"""
convert(T::Type{VkLineRasterizationModeEXT}, x::LineRasterizationModeEXT) = Base.bitcast(VkLineRasterizationModeEXT, x)

"""

"""
convert(T::Type{VkFragmentShadingRateCombinerOpKHR}, x::FragmentShadingRateCombinerOpKHR) = Base.bitcast(VkFragmentShadingRateCombinerOpKHR, x)

"""

"""
convert(T::Type{VkFragmentShadingRateNV}, x::FragmentShadingRateNV) = Base.bitcast(VkFragmentShadingRateNV, x)

"""

"""
convert(T::Type{VkFragmentShadingRateTypeNV}, x::FragmentShadingRateTypeNV) = Base.bitcast(VkFragmentShadingRateTypeNV, x)

"""

"""
convert(T::Type{VkProvokingVertexModeEXT}, x::ProvokingVertexModeEXT) = Base.bitcast(VkProvokingVertexModeEXT, x)

"""

"""
@bitmask_flag PipelineCacheCreateFlag::UInt32 begin
        PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT = 2
        PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
        PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT = 4
    end

"""

"""
@bitmask_flag QueueFlag::UInt32 begin
        QUEUE_GRAPHICS_BIT = 1
        QUEUE_COMPUTE_BIT = 2
        QUEUE_TRANSFER_BIT = 4
        QUEUE_SPARSE_BINDING_BIT = 8
        QUEUE_PROTECTED_BIT = 16
        QUEUE_VIDEO_DECODE_BIT_KHR = 32
        QUEUE_VIDEO_ENCODE_BIT_KHR = 64
    end

"""

"""
@bitmask_flag CullModeFlag::UInt32 begin
        CULL_MODE_FRONT_BIT = 1
        CULL_MODE_BACK_BIT = 2
        CULL_MODE_NONE = 0
        CULL_MODE_FRONT_AND_BACK = 3
    end

"""

"""
@bitmask_flag RenderPassCreateFlag::UInt32 begin
        RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1
        RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
    end

"""

"""
@bitmask_flag DeviceQueueCreateFlag::UInt32 DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1

"""

"""
@bitmask_flag MemoryPropertyFlag::UInt32 begin
        MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
        MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
        MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
        MEMORY_PROPERTY_HOST_CACHED_BIT = 8
        MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
        MEMORY_PROPERTY_PROTECTED_BIT = 32
        MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
        MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
        MEMORY_PROPERTY_RESERVED_8_BIT_NV = 256
    end

"""

"""
@bitmask_flag MemoryHeapFlag::UInt32 begin
        MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
        MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
        MEMORY_HEAP_RESERVED_2_BIT_KHR = 4
    end

"""

"""
@bitmask_flag AccessFlag::UInt32 begin
        ACCESS_INDIRECT_COMMAND_READ_BIT = 1
        ACCESS_INDEX_READ_BIT = 2
        ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
        ACCESS_UNIFORM_READ_BIT = 8
        ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
        ACCESS_SHADER_READ_BIT = 32
        ACCESS_SHADER_WRITE_BIT = 64
        ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
        ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
        ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
        ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
        ACCESS_TRANSFER_READ_BIT = 2048
        ACCESS_TRANSFER_WRITE_BIT = 4096
        ACCESS_HOST_READ_BIT = 8192
        ACCESS_HOST_WRITE_BIT = 16384
        ACCESS_MEMORY_READ_BIT = 32768
        ACCESS_MEMORY_WRITE_BIT = 65536
        ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
        ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
        ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
        ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
        ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
        ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
        ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
        ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
        ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
        ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
        ACCESS_NONE_KHR = 0
    end

"""

"""
@bitmask_flag BufferUsageFlag::UInt32 begin
        BUFFER_USAGE_TRANSFER_SRC_BIT = 1
        BUFFER_USAGE_TRANSFER_DST_BIT = 2
        BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
        BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
        BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
        BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
        BUFFER_USAGE_INDEX_BUFFER_BIT = 64
        BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
        BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
        BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
        BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
        BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
        BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
        BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
        BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
        BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
        BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
        BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
        BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
        BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
        BUFFER_USAGE_RESERVED_18_BIT_QCOM = 262144
    end

"""

"""
@bitmask_flag BufferCreateFlag::UInt32 begin
        BUFFER_CREATE_SPARSE_BINDING_BIT = 1
        BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
        BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
        BUFFER_CREATE_PROTECTED_BIT = 8
        BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
    end

"""

"""
@bitmask_flag ShaderStageFlag::UInt32 begin
        SHADER_STAGE_VERTEX_BIT = 1
        SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
        SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
        SHADER_STAGE_GEOMETRY_BIT = 8
        SHADER_STAGE_FRAGMENT_BIT = 16
        SHADER_STAGE_COMPUTE_BIT = 32
        SHADER_STAGE_RAYGEN_BIT_KHR = 256
        SHADER_STAGE_ANY_HIT_BIT_KHR = 512
        SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
        SHADER_STAGE_MISS_BIT_KHR = 2048
        SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
        SHADER_STAGE_CALLABLE_BIT_KHR = 8192
        SHADER_STAGE_TASK_BIT_NV = 64
        SHADER_STAGE_MESH_BIT_NV = 128
        SHADER_STAGE_ALL_GRAPHICS = 31
        SHADER_STAGE_ALL = 2147483647
    end

"""

"""
@bitmask_flag ImageUsageFlag::UInt32 begin
        IMAGE_USAGE_TRANSFER_SRC_BIT = 1
        IMAGE_USAGE_TRANSFER_DST_BIT = 2
        IMAGE_USAGE_SAMPLED_BIT = 4
        IMAGE_USAGE_STORAGE_BIT = 8
        IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
        IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
        IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
        IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
        IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024
        IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048
        IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
        IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192
        IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384
        IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
        IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
        IMAGE_USAGE_RESERVED_16_BIT_QCOM = 65536
        IMAGE_USAGE_RESERVED_17_BIT_QCOM = 131072
        IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
    end

"""

"""
@bitmask_flag ImageCreateFlag::UInt32 begin
        IMAGE_CREATE_SPARSE_BINDING_BIT = 1
        IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
        IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
        IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
        IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
        IMAGE_CREATE_ALIAS_BIT = 1024
        IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
        IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
        IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
        IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
        IMAGE_CREATE_PROTECTED_BIT = 2048
        IMAGE_CREATE_DISJOINT_BIT = 512
        IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
        IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
        IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
    end

"""

"""
@bitmask_flag ImageViewCreateFlag::UInt32 begin
        IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
        IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
    end

"""

"""
@bitmask_flag SamplerCreateFlag::UInt32 begin
        SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
        SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
    end

"""

"""
@bitmask_flag PipelineCreateFlag::UInt32 begin
        PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
        PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
        PIPELINE_CREATE_DERIVATIVE_BIT = 4
        PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
        PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
        PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
        PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
        PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
        PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
        PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
        PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
        PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
        PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
        PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
        PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
        PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
        PIPELINE_CREATE_RESERVED_BIT_20_NV = 1048576
    end

"""

"""
@bitmask_flag PipelineShaderStageCreateFlag::UInt32 begin
        PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 4
        PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
        PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
        PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR = 8
    end

"""

"""
@bitmask_flag ColorComponentFlag::UInt32 begin
        COLOR_COMPONENT_R_BIT = 1
        COLOR_COMPONENT_G_BIT = 2
        COLOR_COMPONENT_B_BIT = 4
        COLOR_COMPONENT_A_BIT = 8
    end

"""

"""
@bitmask_flag FenceCreateFlag::UInt32 FENCE_CREATE_SIGNALED_BIT = 1

"""

"""
@bitmask_flag FormatFeatureFlag::UInt32 begin
        FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
        FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
        FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
        FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
        FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
        FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
        FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
        FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
        FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
        FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
        FORMAT_FEATURE_BLIT_SRC_BIT = 1024
        FORMAT_FEATURE_BLIT_DST_BIT = 2048
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
        FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
        FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
        FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
        FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
        FORMAT_FEATURE_DISJOINT_BIT = 4194304
        FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
        FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
        FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432
        FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864
        FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728
        FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456
        FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
        FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
        FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
    end

"""

"""
@bitmask_flag QueryControlFlag::UInt32 QUERY_CONTROL_PRECISE_BIT = 1

"""

"""
@bitmask_flag QueryResultFlag::UInt32 begin
        QUERY_RESULT_64_BIT = 1
        QUERY_RESULT_WAIT_BIT = 2
        QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
        QUERY_RESULT_PARTIAL_BIT = 8
        QUERY_RESULT_WITH_STATUS_BIT_KHR = 16
    end

"""

"""
@bitmask_flag CommandBufferUsageFlag::UInt32 begin
        COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
        COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
        COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
    end

"""

"""
@bitmask_flag QueryPipelineStatisticFlag::UInt32 begin
        QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
        QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
        QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
        QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
        QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
        QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
        QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
        QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
        QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
        QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
        QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
    end

"""

"""
@bitmask_flag ImageAspectFlag::UInt32 begin
        IMAGE_ASPECT_COLOR_BIT = 1
        IMAGE_ASPECT_DEPTH_BIT = 2
        IMAGE_ASPECT_STENCIL_BIT = 4
        IMAGE_ASPECT_METADATA_BIT = 8
        IMAGE_ASPECT_PLANE_0_BIT = 16
        IMAGE_ASPECT_PLANE_1_BIT = 32
        IMAGE_ASPECT_PLANE_2_BIT = 64
        IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
        IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
        IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
        IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
    end

"""

"""
@bitmask_flag SparseImageFormatFlag::UInt32 begin
        SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
        SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
        SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
    end

"""

"""
@bitmask_flag SparseMemoryBindFlag::UInt32 SPARSE_MEMORY_BIND_METADATA_BIT = 1

"""

"""
@bitmask_flag PipelineStageFlag::UInt32 begin
        PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
        PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
        PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
        PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
        PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
        PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
        PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
        PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
        PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
        PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
        PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
        PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
        PIPELINE_STAGE_TRANSFER_BIT = 4096
        PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
        PIPELINE_STAGE_HOST_BIT = 16384
        PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
        PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
        PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
        PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
        PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
        PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
        PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
        PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
        PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
        PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
        PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
        PIPELINE_STAGE_NONE_KHR = 0
    end

"""

"""
@bitmask_flag CommandPoolCreateFlag::UInt32 begin
        COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
        COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
        COMMAND_POOL_CREATE_PROTECTED_BIT = 4
    end

"""

"""
@bitmask_flag CommandPoolResetFlag::UInt32 COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1

"""

"""
@bitmask_flag CommandBufferResetFlag::UInt32 COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1

"""

"""
@bitmask_flag SampleCountFlag::UInt32 begin
        SAMPLE_COUNT_1_BIT = 1
        SAMPLE_COUNT_2_BIT = 2
        SAMPLE_COUNT_4_BIT = 4
        SAMPLE_COUNT_8_BIT = 8
        SAMPLE_COUNT_16_BIT = 16
        SAMPLE_COUNT_32_BIT = 32
        SAMPLE_COUNT_64_BIT = 64
    end

"""

"""
@bitmask_flag AttachmentDescriptionFlag::UInt32 ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1

"""

"""
@bitmask_flag StencilFaceFlag::UInt32 begin
        STENCIL_FACE_FRONT_BIT = 1
        STENCIL_FACE_BACK_BIT = 2
        STENCIL_FACE_FRONT_AND_BACK = 3
    end

"""

"""
@bitmask_flag DescriptorPoolCreateFlag::UInt32 begin
        DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
        DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
        DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
    end

"""

"""
@bitmask_flag DependencyFlag::UInt32 begin
        DEPENDENCY_BY_REGION_BIT = 1
        DEPENDENCY_DEVICE_GROUP_BIT = 4
        DEPENDENCY_VIEW_LOCAL_BIT = 2
    end

"""

"""
@bitmask_flag SemaphoreWaitFlag::UInt32 SEMAPHORE_WAIT_ANY_BIT = 1

"""

"""
@bitmask_flag DisplayPlaneAlphaFlagKHR::UInt32 begin
        DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
        DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
        DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
        DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
    end

"""

"""
@bitmask_flag CompositeAlphaFlagKHR::UInt32 begin
        COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
        COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
        COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
        COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
    end

"""

"""
@bitmask_flag SurfaceTransformFlagKHR::UInt32 begin
        SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
        SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
        SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
        SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
        SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
        SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
    end

"""

"""
@bitmask_flag DebugReportFlagEXT::UInt32 begin
        DEBUG_REPORT_INFORMATION_BIT_EXT = 1
        DEBUG_REPORT_WARNING_BIT_EXT = 2
        DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
        DEBUG_REPORT_ERROR_BIT_EXT = 8
        DEBUG_REPORT_DEBUG_BIT_EXT = 16
    end

"""

"""
@bitmask_flag ExternalMemoryHandleTypeFlagNV::UInt32 begin
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
    end

"""

"""
@bitmask_flag ExternalMemoryFeatureFlagNV::UInt32 begin
        EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
        EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
        EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
    end

"""

"""
@bitmask_flag SubgroupFeatureFlag::UInt32 begin
        SUBGROUP_FEATURE_BASIC_BIT = 1
        SUBGROUP_FEATURE_VOTE_BIT = 2
        SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
        SUBGROUP_FEATURE_BALLOT_BIT = 8
        SUBGROUP_FEATURE_SHUFFLE_BIT = 16
        SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
        SUBGROUP_FEATURE_CLUSTERED_BIT = 64
        SUBGROUP_FEATURE_QUAD_BIT = 128
        SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
    end

"""

"""
@bitmask_flag IndirectCommandsLayoutUsageFlagNV::UInt32 begin
        INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
        INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
        INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
    end

"""

"""
@bitmask_flag IndirectStateFlagNV::UInt32 INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1

"""

"""
@bitmask_flag PrivateDataSlotCreateFlagEXT::UInt32 begin
    end

"""

"""
@bitmask_flag DescriptorSetLayoutCreateFlag::UInt32 begin
        DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
        DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
        DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
    end

"""

"""
@bitmask_flag ExternalMemoryHandleTypeFlag::UInt32 begin
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
        EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
        EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
        EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
        EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
        EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
        EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
        EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_12_BIT_NV = 4096
    end

"""

"""
@bitmask_flag ExternalMemoryFeatureFlag::UInt32 begin
        EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
        EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
        EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
    end

"""

"""
@bitmask_flag ExternalSemaphoreHandleTypeFlag::UInt32 begin
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32
        EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_6_BIT_NV = 64
    end

"""

"""
@bitmask_flag ExternalSemaphoreFeatureFlag::UInt32 begin
        EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
        EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
    end

"""

"""
@bitmask_flag SemaphoreImportFlag::UInt32 SEMAPHORE_IMPORT_TEMPORARY_BIT = 1

"""

"""
@bitmask_flag ExternalFenceHandleTypeFlag::UInt32 begin
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
        EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
        EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
        EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV = 16
        EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32
    end

"""

"""
@bitmask_flag ExternalFenceFeatureFlag::UInt32 begin
        EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
        EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
    end

"""

"""
@bitmask_flag FenceImportFlag::UInt32 FENCE_IMPORT_TEMPORARY_BIT = 1

"""

"""
@bitmask_flag SurfaceCounterFlagEXT::UInt32 SURFACE_COUNTER_VBLANK_BIT_EXT = 1

"""

"""
@bitmask_flag PeerMemoryFeatureFlag::UInt32 begin
        PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
        PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
        PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
        PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
    end

"""

"""
@bitmask_flag MemoryAllocateFlag::UInt32 begin
        MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
        MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
        MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
    end

"""

"""
@bitmask_flag DeviceGroupPresentModeFlagKHR::UInt32 begin
        DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
        DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
        DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
        DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
    end

"""

"""
@bitmask_flag SwapchainCreateFlagKHR::UInt32 begin
        SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
        SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
        SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
        SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
    end

"""

"""
@bitmask_flag SubpassDescriptionFlag::UInt32 begin
        SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
        SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
        SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
        SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
    end

"""

"""
@bitmask_flag DebugUtilsMessageSeverityFlagEXT::UInt32 begin
        DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
        DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
        DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
        DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
    end

"""

"""
@bitmask_flag DebugUtilsMessageTypeFlagEXT::UInt32 begin
        DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
        DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
        DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
    end

"""

"""
@bitmask_flag DescriptorBindingFlag::UInt32 begin
        DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
        DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
        DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
        DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
        DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM = 16
    end

"""

"""
@bitmask_flag ConditionalRenderingFlagEXT::UInt32 CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1

"""

"""
@bitmask_flag ResolveModeFlag::UInt32 begin
        RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
        RESOLVE_MODE_AVERAGE_BIT = 2
        RESOLVE_MODE_MIN_BIT = 4
        RESOLVE_MODE_MAX_BIT = 8
        RESOLVE_MODE_NONE = 0
    end

"""

"""
@bitmask_flag GeometryInstanceFlagKHR::UInt32 begin
        GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
        GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
        GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
        GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
    end

"""

"""
@bitmask_flag GeometryFlagKHR::UInt32 begin
        GEOMETRY_OPAQUE_BIT_KHR = 1
        GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
    end

"""

"""
@bitmask_flag BuildAccelerationStructureFlagKHR::UInt32 begin
        BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
        BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
        BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
        BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
        BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
        BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_5_NV = 32
    end

"""

"""
@bitmask_flag AccelerationStructureCreateFlagKHR::UInt32 begin
        ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
        ACCELERATION_STRUCTURE_CREATE_RESERVED_BIT_2_NV = 4
    end

"""

"""
@bitmask_flag FramebufferCreateFlag::UInt32 FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1

"""

"""
@bitmask_flag DeviceDiagnosticsConfigFlagNV::UInt32 begin
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
        DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
    end

"""

"""
@bitmask_flag PipelineCreationFeedbackFlagEXT::UInt32 begin
        PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
        PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
        PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
    end

"""

"""
@bitmask_flag PerformanceCounterDescriptionFlagKHR::UInt32 begin
        PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
        PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
    end

"""

"""
@bitmask_flag AcquireProfilingLockFlagKHR::UInt32 begin
    end

"""

"""
@bitmask_flag ShaderCorePropertiesFlagAMD::UInt32 begin
    end

"""

"""
@bitmask_flag ShaderModuleCreateFlag::UInt32 SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 1

"""

"""
@bitmask_flag PipelineCompilerControlFlagAMD::UInt32 begin
    end

"""

"""
@bitmask_flag ToolPurposeFlagEXT::UInt32 begin
        TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
        TOOL_PURPOSE_PROFILING_BIT_EXT = 2
        TOOL_PURPOSE_TRACING_BIT_EXT = 4
        TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
        TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
        TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
        TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
        TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
        TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
    end

"""

"""
@bitmask_flag AccessFlag2KHR::UInt64 begin
        ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1
        ACCESS_2_INDEX_READ_BIT_KHR = 2
        ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4
        ACCESS_2_UNIFORM_READ_BIT_KHR = 8
        ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16
        ACCESS_2_SHADER_READ_BIT_KHR = 32
        ACCESS_2_SHADER_WRITE_BIT_KHR = 64
        ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128
        ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256
        ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512
        ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024
        ACCESS_2_TRANSFER_READ_BIT_KHR = 2048
        ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096
        ACCESS_2_HOST_READ_BIT_KHR = 8192
        ACCESS_2_HOST_WRITE_BIT_KHR = 16384
        ACCESS_2_MEMORY_READ_BIT_KHR = 32768
        ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536
        ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296
        ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592
        ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184
        ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368
        ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736
        ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472
        ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944
        ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
        ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
        ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
        ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
        ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072
        ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
        ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
        ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
        ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
        ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
        ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
        ACCESS_2_NONE_KHR = 0
    end

"""

"""
@bitmask_flag PipelineStageFlag2KHR::UInt64 begin
        PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1
        PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2
        PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4
        PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8
        PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16
        PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32
        PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64
        PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128
        PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256
        PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512
        PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024
        PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048
        PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096
        PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192
        PIPELINE_STAGE_2_HOST_BIT_KHR = 16384
        PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768
        PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536
        PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296
        PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592
        PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184
        PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368
        PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736
        PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472
        PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944
        PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864
        PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728
        PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
        PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144
        PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072
        PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
        PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
        PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152
        PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
        PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288
        PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576
        PIPELINE_STAGE_2_NONE_KHR = 0
    end

"""

"""
@bitmask_flag SubmitFlagKHR::UInt32 SUBMIT_PROTECTED_BIT_KHR = 1

"""

"""
@bitmask_flag EventCreateFlag::UInt32 EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1

"""
Minimalistic wrapper for VkClearColorValue.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearColorValue.html

"""
struct _ClearColorValue <: VulkanStruct{false}
    vks::VkClearColorValue
end

"""
Minimalistic wrapper for VkClearValue.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearValue.html

"""
struct _ClearValue <: VulkanStruct{false}
    vks::VkClearValue
end

"""
Minimalistic wrapper for VkPerformanceCounterResultKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceCounterResultKHR.html

"""
struct _PerformanceCounterResultKHR <: VulkanStruct{false}
    vks::VkPerformanceCounterResultKHR
end

"""
Minimalistic wrapper for VkPerformanceValueDataINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceValueDataINTEL.html

"""
struct _PerformanceValueDataINTEL <: VulkanStruct{false}
    vks::VkPerformanceValueDataINTEL
end

"""
Minimalistic wrapper for VkPipelineExecutableStatisticValueKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableStatisticValueKHR.html

"""
struct PipelineExecutableStatisticValueKHR <: ReturnedOnly
    data::VkPipelineExecutableStatisticValueKHR
end

"""
Minimalistic wrapper for VkDeviceOrHostAddressKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceOrHostAddressKHR.html

"""
struct _DeviceOrHostAddressKHR <: VulkanStruct{false}
    vks::VkDeviceOrHostAddressKHR
end

"""
Minimalistic wrapper for VkDeviceOrHostAddressConstKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceOrHostAddressConstKHR.html

"""
struct _DeviceOrHostAddressConstKHR <: VulkanStruct{false}
    vks::VkDeviceOrHostAddressConstKHR
end

"""
Minimalistic wrapper for VkAccelerationStructureGeometryDataKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryDataKHR.html

"""
struct _AccelerationStructureGeometryDataKHR <: VulkanStruct{false}
    vks::VkAccelerationStructureGeometryDataKHR
end

"""
High-level wrapper for VkClearColorValue.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearColorValue.html)

"""
struct ClearColorValue <: HighLevelStruct
    data::VkClearColorValue
end

"""
High-level wrapper for VkClearValue.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearValue.html)

"""
struct ClearValue <: HighLevelStruct
    data::VkClearValue
end

"""
High-level wrapper for VkPerformanceCounterResultKHR.

Extension: VK\\_KHR\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceCounterResultKHR.html)

"""
struct PerformanceCounterResultKHR <: HighLevelStruct
    data::VkPerformanceCounterResultKHR
end

"""
High-level wrapper for VkPerformanceValueDataINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceValueDataINTEL.html)

"""
struct PerformanceValueDataINTEL <: HighLevelStruct
    data::VkPerformanceValueDataINTEL
end

"""
High-level wrapper for VkDeviceOrHostAddressKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceOrHostAddressKHR.html)

"""
struct DeviceOrHostAddressKHR <: HighLevelStruct
    data::VkDeviceOrHostAddressKHR
end

"""
High-level wrapper for VkDeviceOrHostAddressConstKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceOrHostAddressConstKHR.html)

"""
struct DeviceOrHostAddressConstKHR <: HighLevelStruct
    data::VkDeviceOrHostAddressConstKHR
end

"""
High-level wrapper for VkAccelerationStructureGeometryDataKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryDataKHR.html)

"""
struct AccelerationStructureGeometryDataKHR <: HighLevelStruct
    data::VkAccelerationStructureGeometryDataKHR
end


"""
High-level wrapper for VkPhysicalDeviceProvokingVertexFeaturesEXT.

Extension: VK\\_EXT\\_provoking\\_vertex

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProvokingVertexFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceProvokingVertexFeaturesEXT <: HighLevelStruct
        next::Any
        provoking_vertex_last::Bool
        transform_feedback_preserves_provoking_vertex::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.

Extension: VK\\_EXT\\_ycbcr\\_2plane\\_444\\_formats

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT <: HighLevelStruct
        next::Any
        ycbcr_444_formats::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceInheritedViewportScissorFeaturesNV.

Extension: VK\\_NV\\_inherited\\_viewport\\_scissor

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceInheritedViewportScissorFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceInheritedViewportScissorFeaturesNV <: HighLevelStruct
        next::Any
        inherited_viewport_scissor_2_d::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceSynchronization2FeaturesKHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSynchronization2FeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceSynchronization2FeaturesKHR <: HighLevelStruct
        next::Any
        synchronization2::Bool
    end

"""
High-level wrapper for VkMemoryBarrier2KHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryBarrier2KHR.html)

"""
@auto_hash_equals struct MemoryBarrier2KHR <: HighLevelStruct
        next::Any
        src_stage_mask::UInt64
        src_access_mask::UInt64
        dst_stage_mask::UInt64
        dst_access_mask::UInt64
    end

"""
High-level wrapper for VkPipelineColorWriteCreateInfoEXT.

Extension: VK\\_EXT\\_color\\_write\\_enable

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorWriteCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineColorWriteCreateInfoEXT <: HighLevelStruct
        next::Any
        color_write_enables::Vector{Bool}
    end

"""
High-level wrapper for VkPhysicalDeviceColorWriteEnableFeaturesEXT.

Extension: VK\\_EXT\\_color\\_write\\_enable

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceColorWriteEnableFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceColorWriteEnableFeaturesEXT <: HighLevelStruct
        next::Any
        color_write_enable::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.

Extension: VK\\_EXT\\_vertex\\_input\\_dynamic\\_state

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceVertexInputDynamicStateFeaturesEXT <: HighLevelStruct
        next::Any
        vertex_input_dynamic_state::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.

Extension: VK\\_VALVE\\_mutable\\_descriptor\\_type

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.html)

"""
@auto_hash_equals struct PhysicalDeviceMutableDescriptorTypeFeaturesVALVE <: HighLevelStruct
        next::Any
        mutable_descriptor_type::Bool
    end

"""
High-level wrapper for VkAccelerationStructureBuildSizesInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildSizesInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureBuildSizesInfoKHR <: HighLevelStruct
        next::Any
        acceleration_structure_size::UInt64
        update_scratch_size::UInt64
        build_scratch_size::UInt64
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.

Extension: VK\\_NV\\_fragment\\_shading\\_rate\\_enums

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentShadingRateEnumsFeaturesNV <: HighLevelStruct
        next::Any
        fragment_shading_rate_enums::Bool
        supersample_fragment_shading_rates::Bool
        no_invocation_fragment_shading_rates::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.

Extension: VK\\_KHR\\_shader\\_terminate\\_invocation

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderTerminateInvocationFeaturesKHR <: HighLevelStruct
        next::Any
        shader_terminate_invocation::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentShadingRateFeaturesKHR.

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentShadingRateFeaturesKHR <: HighLevelStruct
        next::Any
        pipeline_fragment_shading_rate::Bool
        primitive_fragment_shading_rate::Bool
        attachment_fragment_shading_rate::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.

Extension: VK\\_EXT\\_shader\\_image\\_atomic\\_int64

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderImageAtomicInt64FeaturesEXT <: HighLevelStruct
        next::Any
        shader_image_int_64_atomics::Bool
        sparse_image_int_64_atomics::Bool
    end

"""
High-level wrapper for VkBufferCopy2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCopy2KHR.html)

"""
@auto_hash_equals struct BufferCopy2KHR <: HighLevelStruct
        next::Any
        src_offset::UInt64
        dst_offset::UInt64
        size::UInt64
    end

"""
High-level wrapper for VkPhysicalDevice4444FormatsFeaturesEXT.

Extension: VK\\_EXT\\_4444\\_formats

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice4444FormatsFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDevice4444FormatsFeaturesEXT <: HighLevelStruct
        next::Any
        format_a4r4g4b4::Bool
        format_a4b4g4r4::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.

Extension: VK\\_KHR\\_workgroup\\_memory\\_explicit\\_layout

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR <: HighLevelStruct
        next::Any
        workgroup_memory_explicit_layout::Bool
        workgroup_memory_explicit_layout_scalar_block_layout::Bool
        workgroup_memory_explicit_layout_8_bit_access::Bool
        workgroup_memory_explicit_layout_16_bit_access::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceImageRobustnessFeaturesEXT.

Extension: VK\\_EXT\\_image\\_robustness

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageRobustnessFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceImageRobustnessFeaturesEXT <: HighLevelStruct
        next::Any
        robust_image_access::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceRobustness2FeaturesEXT.

Extension: VK\\_EXT\\_robustness2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceRobustness2FeaturesEXT <: HighLevelStruct
        next::Any
        robust_buffer_access_2::Bool
        robust_image_access_2::Bool
        null_descriptor::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.

Extension: VK\\_KHR\\_zero\\_initialize\\_workgroup\\_memory

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR <: HighLevelStruct
        next::Any
        shader_zero_initialize_workgroup_memory::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceDiagnosticsConfigFeaturesNV.

Extension: VK\\_NV\\_device\\_diagnostics\\_config

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDiagnosticsConfigFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceDiagnosticsConfigFeaturesNV <: HighLevelStruct
        next::Any
        diagnostics_config::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceExtendedDynamicState2FeaturesEXT <: HighLevelStruct
        next::Any
        extended_dynamic_state_2::Bool
        extended_dynamic_state_2_logic_op::Bool
        extended_dynamic_state_2_patch_control_points::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceExtendedDynamicStateFeaturesEXT <: HighLevelStruct
        next::Any
        extended_dynamic_state::Bool
    end

"""
High-level wrapper for VkRayTracingPipelineInterfaceCreateInfoKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineInterfaceCreateInfoKHR.html)

"""
@auto_hash_equals struct RayTracingPipelineInterfaceCreateInfoKHR <: HighLevelStruct
        next::Any
        max_pipeline_ray_payload_size::UInt32
        max_pipeline_ray_hit_attribute_size::UInt32
    end

"""
High-level wrapper for VkAccelerationStructureVersionInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureVersionInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureVersionInfoKHR <: HighLevelStruct
        next::Any
        version_data::Vector{UInt8}
    end

"""
High-level wrapper for VkTransformMatrixKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTransformMatrixKHR.html)

"""
@auto_hash_equals struct TransformMatrixKHR <: HighLevelStruct
        matrix::NTuple{3, NTuple{4, Float32}}
    end

"""
High-level wrapper for VkAabbPositionsKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAabbPositionsKHR.html)

"""
@auto_hash_equals struct AabbPositionsKHR <: HighLevelStruct
        min_x::Float32
        min_y::Float32
        min_z::Float32
        max_x::Float32
        max_y::Float32
        max_z::Float32
    end

"""
High-level wrapper for VkAccelerationStructureBuildRangeInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildRangeInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureBuildRangeInfoKHR <: HighLevelStruct
        primitive_count::UInt32
        primitive_offset::UInt32
        first_vertex::UInt32
        transform_offset::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceCustomBorderColorFeaturesEXT.

Extension: VK\\_EXT\\_custom\\_border\\_color

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCustomBorderColorFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceCustomBorderColorFeaturesEXT <: HighLevelStruct
        next::Any
        custom_border_colors::Bool
        custom_border_color_without_format::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceCoherentMemoryFeaturesAMD.

Extension: VK\\_AMD\\_device\\_coherent\\_memory

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCoherentMemoryFeaturesAMD.html)

"""
@auto_hash_equals struct PhysicalDeviceCoherentMemoryFeaturesAMD <: HighLevelStruct
        next::Any
        device_coherent_memory::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceVulkan12Features.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan12Features.html)

"""
@auto_hash_equals struct PhysicalDeviceVulkan12Features <: HighLevelStruct
        next::Any
        sampler_mirror_clamp_to_edge::Bool
        draw_indirect_count::Bool
        storage_buffer_8_bit_access::Bool
        uniform_and_storage_buffer_8_bit_access::Bool
        storage_push_constant_8::Bool
        shader_buffer_int_64_atomics::Bool
        shader_shared_int_64_atomics::Bool
        shader_float_16::Bool
        shader_int_8::Bool
        descriptor_indexing::Bool
        shader_input_attachment_array_dynamic_indexing::Bool
        shader_uniform_texel_buffer_array_dynamic_indexing::Bool
        shader_storage_texel_buffer_array_dynamic_indexing::Bool
        shader_uniform_buffer_array_non_uniform_indexing::Bool
        shader_sampled_image_array_non_uniform_indexing::Bool
        shader_storage_buffer_array_non_uniform_indexing::Bool
        shader_storage_image_array_non_uniform_indexing::Bool
        shader_input_attachment_array_non_uniform_indexing::Bool
        shader_uniform_texel_buffer_array_non_uniform_indexing::Bool
        shader_storage_texel_buffer_array_non_uniform_indexing::Bool
        descriptor_binding_uniform_buffer_update_after_bind::Bool
        descriptor_binding_sampled_image_update_after_bind::Bool
        descriptor_binding_storage_image_update_after_bind::Bool
        descriptor_binding_storage_buffer_update_after_bind::Bool
        descriptor_binding_uniform_texel_buffer_update_after_bind::Bool
        descriptor_binding_storage_texel_buffer_update_after_bind::Bool
        descriptor_binding_update_unused_while_pending::Bool
        descriptor_binding_partially_bound::Bool
        descriptor_binding_variable_descriptor_count::Bool
        runtime_descriptor_array::Bool
        sampler_filter_minmax::Bool
        scalar_block_layout::Bool
        imageless_framebuffer::Bool
        uniform_buffer_standard_layout::Bool
        shader_subgroup_extended_types::Bool
        separate_depth_stencil_layouts::Bool
        host_query_reset::Bool
        timeline_semaphore::Bool
        buffer_device_address::Bool
        buffer_device_address_capture_replay::Bool
        buffer_device_address_multi_device::Bool
        vulkan_memory_model::Bool
        vulkan_memory_model_device_scope::Bool
        vulkan_memory_model_availability_visibility_chains::Bool
        shader_output_viewport_index::Bool
        shader_output_layer::Bool
        subgroup_broadcast_dynamic_id::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceVulkan11Features.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan11Features.html)

"""
@auto_hash_equals struct PhysicalDeviceVulkan11Features <: HighLevelStruct
        next::Any
        storage_buffer_16_bit_access::Bool
        uniform_and_storage_buffer_16_bit_access::Bool
        storage_push_constant_16::Bool
        storage_input_output_16::Bool
        multiview::Bool
        multiview_geometry_shader::Bool
        multiview_tessellation_shader::Bool
        variable_pointers_storage_buffer::Bool
        variable_pointers::Bool
        protected_memory::Bool
        sampler_ycbcr_conversion::Bool
        shader_draw_parameters::Bool
    end

"""
High-level wrapper for VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.

Extension: VK\\_EXT\\_pipeline\\_creation\\_cache\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDevicePipelineCreationCacheControlFeaturesEXT <: HighLevelStruct
        next::Any
        pipeline_creation_cache_control::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceLineRasterizationFeaturesEXT.

Extension: VK\\_EXT\\_line\\_rasterization

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceLineRasterizationFeaturesEXT <: HighLevelStruct
        next::Any
        rectangular_lines::Bool
        bresenham_lines::Bool
        smooth_lines::Bool
        stippled_rectangular_lines::Bool
        stippled_bresenham_lines::Bool
        stippled_smooth_lines::Bool
    end

"""
High-level wrapper for VkMemoryOpaqueCaptureAddressAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryOpaqueCaptureAddressAllocateInfo.html)

"""
@auto_hash_equals struct MemoryOpaqueCaptureAddressAllocateInfo <: HighLevelStruct
        next::Any
        opaque_capture_address::UInt64
    end

"""
High-level wrapper for VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.

Extension: VK\\_EXT\\_subgroup\\_size\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceSubgroupSizeControlFeaturesEXT <: HighLevelStruct
        next::Any
        subgroup_size_control::Bool
        compute_full_subgroups::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.

Extension: VK\\_EXT\\_texel\\_buffer\\_alignment

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT <: HighLevelStruct
        next::Any
        texel_buffer_alignment::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.

Extension: VK\\_EXT\\_shader\\_demote\\_to\\_helper\\_invocation

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT <: HighLevelStruct
        next::Any
        shader_demote_to_helper_invocation::Bool
    end

"""
High-level wrapper for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR <: HighLevelStruct
        next::Any
        pipeline_executable_info::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures <: HighLevelStruct
        next::Any
        separate_depth_stencil_layouts::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.

Extension: VK\\_EXT\\_fragment\\_shader\\_interlock

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT <: HighLevelStruct
        next::Any
        fragment_shader_sample_interlock::Bool
        fragment_shader_pixel_interlock::Bool
        fragment_shader_shading_rate_interlock::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.

Extension: VK\\_NV\\_shader\\_sm\\_builtins

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderSMBuiltinsFeaturesNV <: HighLevelStruct
        next::Any
        shader_sm_builtins::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceIndexTypeUint8FeaturesEXT.

Extension: VK\\_EXT\\_index\\_type\\_uint8

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceIndexTypeUint8FeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceIndexTypeUint8FeaturesEXT <: HighLevelStruct
        next::Any
        index_type_uint_8::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderClockFeaturesKHR.

Extension: VK\\_KHR\\_shader\\_clock

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderClockFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderClockFeaturesKHR <: HighLevelStruct
        next::Any
        shader_subgroup_clock::Bool
        shader_device_clock::Bool
    end

"""
High-level wrapper for VkPerformanceStreamMarkerInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceStreamMarkerInfoINTEL.html)

"""
@auto_hash_equals struct PerformanceStreamMarkerInfoINTEL <: HighLevelStruct
        next::Any
        marker::UInt32
    end

"""
High-level wrapper for VkPerformanceMarkerInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceMarkerInfoINTEL.html)

"""
@auto_hash_equals struct PerformanceMarkerInfoINTEL <: HighLevelStruct
        next::Any
        marker::UInt64
    end

"""
High-level wrapper for VkInitializePerformanceApiInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInitializePerformanceApiInfoINTEL.html)

"""
@auto_hash_equals struct InitializePerformanceApiInfoINTEL <: HighLevelStruct
        next::Any
        user_data::OptionalPtr{Ptr{Cvoid}}
    end

"""
High-level wrapper for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.

Extension: VK\\_INTEL\\_shader\\_integer\\_functions2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL <: HighLevelStruct
        next::Any
        shader_integer_functions_2::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceCoverageReductionModeFeaturesNV.

Extension: VK\\_NV\\_coverage\\_reduction\\_mode

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCoverageReductionModeFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceCoverageReductionModeFeaturesNV <: HighLevelStruct
        next::Any
        coverage_reduction_mode::Bool
    end

"""
High-level wrapper for VkHeadlessSurfaceCreateInfoEXT.

Extension: VK\\_EXT\\_headless\\_surface

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkHeadlessSurfaceCreateInfoEXT.html)

"""
@auto_hash_equals struct HeadlessSurfaceCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
    end

"""
High-level wrapper for VkPerformanceQuerySubmitInfoKHR.

Extension: VK\\_KHR\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceQuerySubmitInfoKHR.html)

"""
@auto_hash_equals struct PerformanceQuerySubmitInfoKHR <: HighLevelStruct
        next::Any
        counter_pass_index::UInt32
    end

"""
High-level wrapper for VkQueryPoolPerformanceCreateInfoKHR.

Extension: VK\\_KHR\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolPerformanceCreateInfoKHR.html)

"""
@auto_hash_equals struct QueryPoolPerformanceCreateInfoKHR <: HighLevelStruct
        next::Any
        queue_family_index::UInt32
        counter_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkPhysicalDevicePerformanceQueryFeaturesKHR.

Extension: VK\\_KHR\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePerformanceQueryFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDevicePerformanceQueryFeaturesKHR <: HighLevelStruct
        next::Any
        performance_counter_query_pools::Bool
        performance_counter_multiple_query_pools::Bool
    end

"""
High-level wrapper for VkSurfaceCapabilitiesFullScreenExclusiveEXT.

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilitiesFullScreenExclusiveEXT.html)

"""
@auto_hash_equals struct SurfaceCapabilitiesFullScreenExclusiveEXT <: HighLevelStruct
        next::Any
        full_screen_exclusive_supported::Bool
    end

"""
High-level wrapper for VkSurfaceFullScreenExclusiveWin32InfoEXT.

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFullScreenExclusiveWin32InfoEXT.html)

"""
@auto_hash_equals struct SurfaceFullScreenExclusiveWin32InfoEXT <: HighLevelStruct
        next::Any
        hmonitor::vk.HMONITOR
    end

"""
High-level wrapper for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.

Extension: VK\\_EXT\\_ycbcr\\_image\\_arrays

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceYcbcrImageArraysFeaturesEXT <: HighLevelStruct
        next::Any
        ycbcr_image_arrays::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceCooperativeMatrixFeaturesNV.

Extension: VK\\_NV\\_cooperative\\_matrix

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceCooperativeMatrixFeaturesNV <: HighLevelStruct
        next::Any
        cooperative_matrix::Bool
        cooperative_matrix_robust_buffer_access::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.

Extension: VK\\_EXT\\_texture\\_compression\\_astc\\_hdr

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT <: HighLevelStruct
        next::Any
        texture_compression_astc_hdr::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceImagelessFramebufferFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImagelessFramebufferFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceImagelessFramebufferFeatures <: HighLevelStruct
        next::Any
        imageless_framebuffer::Bool
    end

"""
High-level wrapper for VkBufferDeviceAddressCreateInfoEXT.

Extension: VK\\_EXT\\_buffer\\_device\\_address

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferDeviceAddressCreateInfoEXT.html)

"""
@auto_hash_equals struct BufferDeviceAddressCreateInfoEXT <: HighLevelStruct
        next::Any
        device_address::UInt64
    end

"""
High-level wrapper for VkBufferOpaqueCaptureAddressCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferOpaqueCaptureAddressCreateInfo.html)

"""
@auto_hash_equals struct BufferOpaqueCaptureAddressCreateInfo <: HighLevelStruct
        next::Any
        opaque_capture_address::UInt64
    end

"""
High-level wrapper for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.

Extension: VK\\_EXT\\_buffer\\_device\\_address

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceBufferDeviceAddressFeaturesEXT <: HighLevelStruct
        next::Any
        buffer_device_address::Bool
        buffer_device_address_capture_replay::Bool
        buffer_device_address_multi_device::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceBufferDeviceAddressFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceBufferDeviceAddressFeatures <: HighLevelStruct
        next::Any
        buffer_device_address::Bool
        buffer_device_address_capture_replay::Bool
        buffer_device_address_multi_device::Bool
    end

"""
High-level wrapper for VkMemoryPriorityAllocateInfoEXT.

Extension: VK\\_EXT\\_memory\\_priority

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryPriorityAllocateInfoEXT.html)

"""
@auto_hash_equals struct MemoryPriorityAllocateInfoEXT <: HighLevelStruct
        next::Any
        priority::Float32
    end

"""
High-level wrapper for VkPhysicalDeviceMemoryPriorityFeaturesEXT.

Extension: VK\\_EXT\\_memory\\_priority

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryPriorityFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceMemoryPriorityFeaturesEXT <: HighLevelStruct
        next::Any
        memory_priority::Bool
    end

"""
High-level wrapper for VkPipelineRasterizationDepthClipStateCreateInfoEXT.

Extension: VK\\_EXT\\_depth\\_clip\\_enable

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationDepthClipStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineRasterizationDepthClipStateCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        depth_clip_enable::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceDepthClipEnableFeaturesEXT.

Extension: VK\\_EXT\\_depth\\_clip\\_enable

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDepthClipEnableFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceDepthClipEnableFeaturesEXT <: HighLevelStruct
        next::Any
        depth_clip_enable::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceUniformBufferStandardLayoutFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceUniformBufferStandardLayoutFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceUniformBufferStandardLayoutFeatures <: HighLevelStruct
        next::Any
        uniform_buffer_standard_layout::Bool
    end

"""
High-level wrapper for VkSurfaceProtectedCapabilitiesKHR.

Extension: VK\\_KHR\\_surface\\_protected\\_capabilities

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceProtectedCapabilitiesKHR.html)

"""
@auto_hash_equals struct SurfaceProtectedCapabilitiesKHR <: HighLevelStruct
        next::Any
        supports_protected::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceScalarBlockLayoutFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceScalarBlockLayoutFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceScalarBlockLayoutFeatures <: HighLevelStruct
        next::Any
        scalar_block_layout::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.

Extension: VK\\_EXT\\_fragment\\_density\\_map2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentDensityMap2FeaturesEXT <: HighLevelStruct
        next::Any
        fragment_density_map_deferred::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentDensityMapFeaturesEXT.

Extension: VK\\_EXT\\_fragment\\_density\\_map

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentDensityMapFeaturesEXT <: HighLevelStruct
        next::Any
        fragment_density_map::Bool
        fragment_density_map_dynamic::Bool
        fragment_density_map_non_subsampled_images::Bool
    end

"""
High-level wrapper for VkImageDrmFormatModifierListCreateInfoEXT.

Extension: VK\\_EXT\\_image\\_drm\\_format\\_modifier

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageDrmFormatModifierListCreateInfoEXT.html)

"""
@auto_hash_equals struct ImageDrmFormatModifierListCreateInfoEXT <: HighLevelStruct
        next::Any
        drm_format_modifiers::Vector{UInt64}
    end

"""
High-level wrapper for VkTraceRaysIndirectCommandKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTraceRaysIndirectCommandKHR.html)

"""
@auto_hash_equals struct TraceRaysIndirectCommandKHR <: HighLevelStruct
        width::UInt32
        height::UInt32
        depth::UInt32
    end

"""
High-level wrapper for VkStridedDeviceAddressRegionKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkStridedDeviceAddressRegionKHR.html)

"""
@auto_hash_equals struct StridedDeviceAddressRegionKHR <: HighLevelStruct
        device_address::UInt64
        stride::UInt64
        size::UInt64
    end

"""
High-level wrapper for VkPhysicalDeviceRayQueryFeaturesKHR.

Extension: VK\\_KHR\\_ray\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayQueryFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceRayQueryFeaturesKHR <: HighLevelStruct
        next::Any
        ray_query::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceRayTracingPipelineFeaturesKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceRayTracingPipelineFeaturesKHR <: HighLevelStruct
        next::Any
        ray_tracing_pipeline::Bool
        ray_tracing_pipeline_shader_group_handle_capture_replay::Bool
        ray_tracing_pipeline_shader_group_handle_capture_replay_mixed::Bool
        ray_tracing_pipeline_trace_rays_indirect::Bool
        ray_traversal_primitive_culling::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceAccelerationStructureFeaturesKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html)

"""
@auto_hash_equals struct PhysicalDeviceAccelerationStructureFeaturesKHR <: HighLevelStruct
        next::Any
        acceleration_structure::Bool
        acceleration_structure_capture_replay::Bool
        acceleration_structure_indirect_build::Bool
        acceleration_structure_host_commands::Bool
        descriptor_binding_acceleration_structure_update_after_bind::Bool
    end

"""
High-level wrapper for VkDrawMeshTasksIndirectCommandNV.

Extension: VK\\_NV\\_mesh\\_shader

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawMeshTasksIndirectCommandNV.html)

"""
@auto_hash_equals struct DrawMeshTasksIndirectCommandNV <: HighLevelStruct
        task_count::UInt32
        first_task::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceMeshShaderFeaturesNV.

Extension: VK\\_NV\\_mesh\\_shader

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceMeshShaderFeaturesNV <: HighLevelStruct
        next::Any
        task_shader::Bool
        mesh_shader::Bool
    end

"""
High-level wrapper for VkCoarseSampleLocationNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCoarseSampleLocationNV.html)

"""
@auto_hash_equals struct CoarseSampleLocationNV <: HighLevelStruct
        pixel_x::UInt32
        pixel_y::UInt32
        sample::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceShadingRateImageFeaturesNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShadingRateImageFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceShadingRateImageFeaturesNV <: HighLevelStruct
        next::Any
        shading_rate_image::Bool
        shading_rate_coarse_sample_order::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.

Extension: VK\\_NV\\_dedicated\\_allocation\\_image\\_aliasing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV <: HighLevelStruct
        next::Any
        dedicated_allocation_image_aliasing::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderImageFootprintFeaturesNV.

Extension: VK\\_NV\\_shader\\_image\\_footprint

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderImageFootprintFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderImageFootprintFeaturesNV <: HighLevelStruct
        next::Any
        image_footprint::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.

Extension: VK\\_NV\\_fragment\\_shader\\_barycentric

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentShaderBarycentricFeaturesNV <: HighLevelStruct
        next::Any
        fragment_shader_barycentric::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.

Extension: VK\\_NV\\_compute\\_shader\\_derivatives

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceComputeShaderDerivativesFeaturesNV <: HighLevelStruct
        next::Any
        compute_derivative_group_quads::Bool
        compute_derivative_group_linear::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceCornerSampledImageFeaturesNV.

Extension: VK\\_NV\\_corner\\_sampled\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCornerSampledImageFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceCornerSampledImageFeaturesNV <: HighLevelStruct
        next::Any
        corner_sampled_image::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceExclusiveScissorFeaturesNV.

Extension: VK\\_NV\\_scissor\\_exclusive

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExclusiveScissorFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceExclusiveScissorFeaturesNV <: HighLevelStruct
        next::Any
        exclusive_scissor::Bool
    end

"""
High-level wrapper for VkPipelineRepresentativeFragmentTestStateCreateInfoNV.

Extension: VK\\_NV\\_representative\\_fragment\\_test

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRepresentativeFragmentTestStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineRepresentativeFragmentTestStateCreateInfoNV <: HighLevelStruct
        next::Any
        representative_fragment_test_enable::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.

Extension: VK\\_NV\\_representative\\_fragment\\_test

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV <: HighLevelStruct
        next::Any
        representative_fragment_test::Bool
    end

"""
High-level wrapper for VkPipelineRasterizationStateStreamCreateInfoEXT.

Extension: VK\\_EXT\\_transform\\_feedback

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateStreamCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineRasterizationStateStreamCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        rasterization_stream::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceTransformFeedbackFeaturesEXT.

Extension: VK\\_EXT\\_transform\\_feedback

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTransformFeedbackFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceTransformFeedbackFeaturesEXT <: HighLevelStruct
        next::Any
        transform_feedback::Bool
        geometry_streams::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceASTCDecodeFeaturesEXT.

Extension: VK\\_EXT\\_astc\\_decode\\_mode

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceASTCDecodeFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceASTCDecodeFeaturesEXT <: HighLevelStruct
        next::Any
        decode_mode_shared_exponent::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.

Extension: VK\\_EXT\\_vertex\\_attribute\\_divisor

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceVertexAttributeDivisorFeaturesEXT <: HighLevelStruct
        next::Any
        vertex_attribute_instance_rate_divisor::Bool
        vertex_attribute_instance_rate_zero_divisor::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.

Extension: VK\\_EXT\\_shader\\_atomic\\_float

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderAtomicFloatFeaturesEXT <: HighLevelStruct
        next::Any
        shader_buffer_float_32_atomics::Bool
        shader_buffer_float_32_atomic_add::Bool
        shader_buffer_float_64_atomics::Bool
        shader_buffer_float_64_atomic_add::Bool
        shader_shared_float_32_atomics::Bool
        shader_shared_float_32_atomic_add::Bool
        shader_shared_float_64_atomics::Bool
        shader_shared_float_64_atomic_add::Bool
        shader_image_float_32_atomics::Bool
        shader_image_float_32_atomic_add::Bool
        sparse_image_float_32_atomics::Bool
        sparse_image_float_32_atomic_add::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderAtomicInt64Features.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64Features.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderAtomicInt64Features <: HighLevelStruct
        next::Any
        shader_buffer_int_64_atomics::Bool
        shader_shared_int_64_atomics::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceVulkanMemoryModelFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkanMemoryModelFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceVulkanMemoryModelFeatures <: HighLevelStruct
        next::Any
        vulkan_memory_model::Bool
        vulkan_memory_model_device_scope::Bool
        vulkan_memory_model_availability_visibility_chains::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceConditionalRenderingFeaturesEXT.

Extension: VK\\_EXT\\_conditional\\_rendering

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceConditionalRenderingFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceConditionalRenderingFeaturesEXT <: HighLevelStruct
        next::Any
        conditional_rendering::Bool
        inherited_conditional_rendering::Bool
    end

"""
High-level wrapper for VkPhysicalDevice8BitStorageFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice8BitStorageFeatures.html)

"""
@auto_hash_equals struct PhysicalDevice8BitStorageFeatures <: HighLevelStruct
        next::Any
        storage_buffer_8_bit_access::Bool
        uniform_and_storage_buffer_8_bit_access::Bool
        storage_push_constant_8::Bool
    end

"""
High-level wrapper for VkCommandBufferInheritanceConditionalRenderingInfoEXT.

Extension: VK\\_EXT\\_conditional\\_rendering

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceConditionalRenderingInfoEXT.html)

"""
@auto_hash_equals struct CommandBufferInheritanceConditionalRenderingInfoEXT <: HighLevelStruct
        next::Any
        conditional_rendering_enable::Bool
    end

"""
High-level wrapper for VkVertexInputBindingDivisorDescriptionEXT.

Extension: VK\\_EXT\\_vertex\\_attribute\\_divisor

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDivisorDescriptionEXT.html)

"""
@auto_hash_equals struct VertexInputBindingDivisorDescriptionEXT <: HighLevelStruct
        binding::UInt32
        divisor::UInt32
    end

"""
High-level wrapper for VkPipelineVertexInputDivisorStateCreateInfoEXT.

Extension: VK\\_EXT\\_vertex\\_attribute\\_divisor

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineVertexInputDivisorStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineVertexInputDivisorStateCreateInfoEXT <: HighLevelStruct
        next::Any
        vertex_binding_divisors::Vector{VertexInputBindingDivisorDescriptionEXT}
    end

"""
High-level wrapper for VkTimelineSemaphoreSubmitInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTimelineSemaphoreSubmitInfo.html)

"""
@auto_hash_equals struct TimelineSemaphoreSubmitInfo <: HighLevelStruct
        next::Any
        wait_semaphore_values::OptionalPtr{Vector{UInt64}}
        signal_semaphore_values::OptionalPtr{Vector{UInt64}}
    end

"""
High-level wrapper for VkPhysicalDeviceTimelineSemaphoreFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceTimelineSemaphoreFeatures <: HighLevelStruct
        next::Any
        timeline_semaphore::Bool
    end

"""
High-level wrapper for VkSubpassEndInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassEndInfo.html)

"""
@auto_hash_equals struct SubpassEndInfo <: HighLevelStruct
        next::Any
    end

"""
High-level wrapper for VkDescriptorSetVariableDescriptorCountAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfo.html)

"""
@auto_hash_equals struct DescriptorSetVariableDescriptorCountAllocateInfo <: HighLevelStruct
        next::Any
        descriptor_counts::Vector{UInt32}
    end

"""
High-level wrapper for VkPhysicalDeviceDescriptorIndexingFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDescriptorIndexingFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceDescriptorIndexingFeatures <: HighLevelStruct
        next::Any
        shader_input_attachment_array_dynamic_indexing::Bool
        shader_uniform_texel_buffer_array_dynamic_indexing::Bool
        shader_storage_texel_buffer_array_dynamic_indexing::Bool
        shader_uniform_buffer_array_non_uniform_indexing::Bool
        shader_sampled_image_array_non_uniform_indexing::Bool
        shader_storage_buffer_array_non_uniform_indexing::Bool
        shader_storage_image_array_non_uniform_indexing::Bool
        shader_input_attachment_array_non_uniform_indexing::Bool
        shader_uniform_texel_buffer_array_non_uniform_indexing::Bool
        shader_storage_texel_buffer_array_non_uniform_indexing::Bool
        descriptor_binding_uniform_buffer_update_after_bind::Bool
        descriptor_binding_sampled_image_update_after_bind::Bool
        descriptor_binding_storage_image_update_after_bind::Bool
        descriptor_binding_storage_buffer_update_after_bind::Bool
        descriptor_binding_uniform_texel_buffer_update_after_bind::Bool
        descriptor_binding_storage_texel_buffer_update_after_bind::Bool
        descriptor_binding_update_unused_while_pending::Bool
        descriptor_binding_partially_bound::Bool
        descriptor_binding_variable_descriptor_count::Bool
        runtime_descriptor_array::Bool
    end

"""
High-level wrapper for VkDeviceDeviceMemoryReportCreateInfoEXT.

Extension: VK\\_EXT\\_device\\_memory\\_report

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceDeviceMemoryReportCreateInfoEXT.html)

"""
@auto_hash_equals struct DeviceDeviceMemoryReportCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        pfn_user_callback::FunctionPtr
        user_data::Ptr{Cvoid}
    end

"""
High-level wrapper for VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.

Extension: VK\\_EXT\\_device\\_memory\\_report

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceDeviceMemoryReportFeaturesEXT <: HighLevelStruct
        next::Any
        device_memory_report::Bool
    end

"""
High-level wrapper for VkDebugUtilsLabelEXT.

Extension: VK\\_EXT\\_debug\\_utils

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsLabelEXT.html)

"""
@auto_hash_equals struct DebugUtilsLabelEXT <: HighLevelStruct
        next::Any
        label_name::String
        color::NTuple{4, Float32}
    end

"""
High-level wrapper for VkPhysicalDeviceHostQueryResetFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceHostQueryResetFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceHostQueryResetFeatures <: HighLevelStruct
        next::Any
        host_query_reset::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderFloat16Int8Features.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8Features.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderFloat16Int8Features <: HighLevelStruct
        next::Any
        shader_float_16::Bool
        shader_int_8::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderDrawParametersFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDrawParametersFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderDrawParametersFeatures <: HighLevelStruct
        next::Any
        shader_draw_parameters::Bool
    end

"""
High-level wrapper for VkValidationCacheCreateInfoEXT.

Extension: VK\\_EXT\\_validation\\_cache

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationCacheCreateInfoEXT.html)

"""
@auto_hash_equals struct ValidationCacheCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        initial_data_size::OptionalPtr{UInt}
        initial_data::Ptr{Cvoid}
    end

"""
High-level wrapper for VkDescriptorPoolInlineUniformBlockCreateInfoEXT.

Extension: VK\\_EXT\\_inline\\_uniform\\_block

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolInlineUniformBlockCreateInfoEXT.html)

"""
@auto_hash_equals struct DescriptorPoolInlineUniformBlockCreateInfoEXT <: HighLevelStruct
        next::Any
        max_inline_uniform_block_bindings::UInt32
    end

"""
High-level wrapper for VkWriteDescriptorSetInlineUniformBlockEXT.

Extension: VK\\_EXT\\_inline\\_uniform\\_block

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetInlineUniformBlockEXT.html)

"""
@auto_hash_equals struct WriteDescriptorSetInlineUniformBlockEXT <: HighLevelStruct
        next::Any
        data_size::UInt32
        data::Ptr{Cvoid}
    end

"""
High-level wrapper for VkPhysicalDeviceInlineUniformBlockFeaturesEXT.

Extension: VK\\_EXT\\_inline\\_uniform\\_block

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceInlineUniformBlockFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceInlineUniformBlockFeaturesEXT <: HighLevelStruct
        next::Any
        inline_uniform_block::Bool
        descriptor_binding_inline_uniform_block_update_after_bind::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.

Extension: VK\\_EXT\\_blend\\_operation\\_advanced

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT <: HighLevelStruct
        next::Any
        advanced_blend_coherent_operations::Bool
    end

"""
High-level wrapper for VkSampleLocationEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSampleLocationEXT.html)

"""
@auto_hash_equals struct SampleLocationEXT <: HighLevelStruct
        x::Float32
        y::Float32
    end

"""
High-level wrapper for VkPipelineCoverageToColorStateCreateInfoNV.

Extension: VK\\_NV\\_fragment\\_coverage\\_to\\_color

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageToColorStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineCoverageToColorStateCreateInfoNV <: HighLevelStruct
        next::Any
        flags::UInt32
        coverage_to_color_enable::Bool
        coverage_to_color_location::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceProtectedMemoryFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProtectedMemoryFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceProtectedMemoryFeatures <: HighLevelStruct
        next::Any
        protected_memory::Bool
    end

"""
High-level wrapper for VkProtectedSubmitInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkProtectedSubmitInfo.html)

"""
@auto_hash_equals struct ProtectedSubmitInfo <: HighLevelStruct
        next::Any
        protected_submit::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceSamplerYcbcrConversionFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceSamplerYcbcrConversionFeatures <: HighLevelStruct
        next::Any
        sampler_ycbcr_conversion::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures <: HighLevelStruct
        next::Any
        shader_subgroup_extended_types::Bool
    end

"""
High-level wrapper for VkPhysicalDevice16BitStorageFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice16BitStorageFeatures.html)

"""
@auto_hash_equals struct PhysicalDevice16BitStorageFeatures <: HighLevelStruct
        next::Any
        storage_buffer_16_bit_access::Bool
        uniform_and_storage_buffer_16_bit_access::Bool
        storage_push_constant_16::Bool
        storage_input_output_16::Bool
    end

"""
High-level wrapper for VkViewportWScalingNV.

Extension: VK\\_NV\\_clip\\_space\\_w\\_scaling

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewportWScalingNV.html)

"""
@auto_hash_equals struct ViewportWScalingNV <: HighLevelStruct
        xcoeff::Float32
        ycoeff::Float32
    end

"""
High-level wrapper for VkPipelineViewportWScalingStateCreateInfoNV.

Extension: VK\\_NV\\_clip\\_space\\_w\\_scaling

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportWScalingStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineViewportWScalingStateCreateInfoNV <: HighLevelStruct
        next::Any
        viewport_w_scaling_enable::Bool
        viewport_w_scalings::OptionalPtr{Vector{ViewportWScalingNV}}
    end

"""
High-level wrapper for VkPresentTimeGOOGLE.

Extension: VK\\_GOOGLE\\_display\\_timing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentTimeGOOGLE.html)

"""
@auto_hash_equals struct PresentTimeGOOGLE <: HighLevelStruct
        present_id::UInt32
        desired_present_time::UInt64
    end

"""
High-level wrapper for VkPresentTimesInfoGOOGLE.

Extension: VK\\_GOOGLE\\_display\\_timing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentTimesInfoGOOGLE.html)

"""
@auto_hash_equals struct PresentTimesInfoGOOGLE <: HighLevelStruct
        next::Any
        times::OptionalPtr{Vector{PresentTimeGOOGLE}}
    end

"""
High-level wrapper for VkSwapchainDisplayNativeHdrCreateInfoAMD.

Extension: VK\\_AMD\\_display\\_native\\_hdr

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainDisplayNativeHdrCreateInfoAMD.html)

"""
@auto_hash_equals struct SwapchainDisplayNativeHdrCreateInfoAMD <: HighLevelStruct
        next::Any
        local_dimming_enable::Bool
    end

"""
High-level wrapper for VkXYColorEXT.

Extension: VK\\_EXT\\_hdr\\_metadata

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkXYColorEXT.html)

"""
@auto_hash_equals struct XYColorEXT <: HighLevelStruct
        x::Float32
        y::Float32
    end

"""
High-level wrapper for VkHdrMetadataEXT.

Extension: VK\\_EXT\\_hdr\\_metadata

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkHdrMetadataEXT.html)

"""
@auto_hash_equals struct HdrMetadataEXT <: HighLevelStruct
        next::Any
        display_primary_red::XYColorEXT
        display_primary_green::XYColorEXT
        display_primary_blue::XYColorEXT
        white_point::XYColorEXT
        max_luminance::Float32
        min_luminance::Float32
        max_content_light_level::Float32
        max_frame_average_light_level::Float32
    end

"""
High-level wrapper for VkDeviceGroupBindSparseInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupBindSparseInfo.html)

"""
@auto_hash_equals struct DeviceGroupBindSparseInfo <: HighLevelStruct
        next::Any
        resource_device_index::UInt32
        memory_device_index::UInt32
    end

"""
High-level wrapper for VkDeviceGroupSubmitInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSubmitInfo.html)

"""
@auto_hash_equals struct DeviceGroupSubmitInfo <: HighLevelStruct
        next::Any
        wait_semaphore_device_indices::Vector{UInt32}
        command_buffer_device_masks::Vector{UInt32}
        signal_semaphore_device_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkDeviceGroupCommandBufferBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupCommandBufferBeginInfo.html)

"""
@auto_hash_equals struct DeviceGroupCommandBufferBeginInfo <: HighLevelStruct
        next::Any
        device_mask::UInt32
    end

"""
High-level wrapper for VkBindBufferMemoryDeviceGroupInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryDeviceGroupInfo.html)

"""
@auto_hash_equals struct BindBufferMemoryDeviceGroupInfo <: HighLevelStruct
        next::Any
        device_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkRenderPassMultiviewCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassMultiviewCreateInfo.html)

"""
@auto_hash_equals struct RenderPassMultiviewCreateInfo <: HighLevelStruct
        next::Any
        view_masks::Vector{UInt32}
        view_offsets::Vector{Int32}
        correlation_masks::Vector{UInt32}
    end

"""
High-level wrapper for VkPhysicalDeviceMultiviewFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceMultiviewFeatures <: HighLevelStruct
        next::Any
        multiview::Bool
        multiview_geometry_shader::Bool
        multiview_tessellation_shader::Bool
    end

"""
High-level wrapper for VkExportFenceWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_fence\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportFenceWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ExportFenceWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        attributes::OptionalPtr{vk.SECURITY_ATTRIBUTES}
        dw_access::vk.DWORD
        name::vk.LPCWSTR
    end

"""
High-level wrapper for VkD3D12FenceSubmitInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkD3D12FenceSubmitInfoKHR.html)

"""
@auto_hash_equals struct D3D12FenceSubmitInfoKHR <: HighLevelStruct
        next::Any
        wait_semaphore_values::OptionalPtr{Vector{UInt64}}
        signal_semaphore_values::OptionalPtr{Vector{UInt64}}
    end

"""
High-level wrapper for VkExportSemaphoreWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportSemaphoreWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ExportSemaphoreWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        attributes::OptionalPtr{vk.SECURITY_ATTRIBUTES}
        dw_access::vk.DWORD
        name::vk.LPCWSTR
    end

"""
High-level wrapper for VkExportMemoryWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_memory\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ExportMemoryWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        attributes::OptionalPtr{vk.SECURITY_ATTRIBUTES}
        dw_access::vk.DWORD
        name::vk.LPCWSTR
    end

"""
High-level wrapper for VkPhysicalDeviceVariablePointersFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVariablePointersFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceVariablePointersFeatures <: HighLevelStruct
        next::Any
        variable_pointers_storage_buffer::Bool
        variable_pointers::Bool
    end

"""
High-level wrapper for VkConformanceVersion.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkConformanceVersion.html)

"""
@auto_hash_equals struct ConformanceVersion <: HighLevelStruct
        major::UInt8
        minor::UInt8
        subminor::UInt8
        patch::UInt8
    end

"""
High-level wrapper for VkSetStateFlagsIndirectCommandNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSetStateFlagsIndirectCommandNV.html)

"""
@auto_hash_equals struct SetStateFlagsIndirectCommandNV <: HighLevelStruct
        data::UInt32
    end

"""
High-level wrapper for VkBindVertexBufferIndirectCommandNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindVertexBufferIndirectCommandNV.html)

"""
@auto_hash_equals struct BindVertexBufferIndirectCommandNV <: HighLevelStruct
        buffer_address::UInt64
        size::UInt32
        stride::UInt32
    end

"""
High-level wrapper for VkBindShaderGroupIndirectCommandNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindShaderGroupIndirectCommandNV.html)

"""
@auto_hash_equals struct BindShaderGroupIndirectCommandNV <: HighLevelStruct
        group_index::UInt32
    end

"""
High-level wrapper for VkPhysicalDevicePrivateDataFeaturesEXT.

Extension: VK\\_EXT\\_private\\_data

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePrivateDataFeaturesEXT.html)

"""
@auto_hash_equals struct PhysicalDevicePrivateDataFeaturesEXT <: HighLevelStruct
        next::Any
        private_data::Bool
    end

"""
High-level wrapper for VkDevicePrivateDataCreateInfoEXT.

Extension: VK\\_EXT\\_private\\_data

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDevicePrivateDataCreateInfoEXT.html)

"""
@auto_hash_equals struct DevicePrivateDataCreateInfoEXT <: HighLevelStruct
        next::Any
        private_data_slot_request_count::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV <: HighLevelStruct
        next::Any
        device_generated_commands::Bool
    end

"""
High-level wrapper for VkExportMemoryWin32HandleInfoNV.

Extension: VK\\_NV\\_external\\_memory\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryWin32HandleInfoNV.html)

"""
@auto_hash_equals struct ExportMemoryWin32HandleInfoNV <: HighLevelStruct
        next::Any
        attributes::OptionalPtr{vk.SECURITY_ATTRIBUTES}
        dw_access::OptionalPtr{vk.DWORD}
    end

"""
High-level wrapper for VkDedicatedAllocationBufferCreateInfoNV.

Extension: VK\\_NV\\_dedicated\\_allocation

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationBufferCreateInfoNV.html)

"""
@auto_hash_equals struct DedicatedAllocationBufferCreateInfoNV <: HighLevelStruct
        next::Any
        dedicated_allocation::Bool
    end

"""
High-level wrapper for VkDedicatedAllocationImageCreateInfoNV.

Extension: VK\\_NV\\_dedicated\\_allocation

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationImageCreateInfoNV.html)

"""
@auto_hash_equals struct DedicatedAllocationImageCreateInfoNV <: HighLevelStruct
        next::Any
        dedicated_allocation::Bool
    end

"""
High-level wrapper for VkDebugMarkerMarkerInfoEXT.

Extension: VK\\_EXT\\_debug\\_marker

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerMarkerInfoEXT.html)

"""
@auto_hash_equals struct DebugMarkerMarkerInfoEXT <: HighLevelStruct
        next::Any
        marker_name::String
        color::NTuple{4, Float32}
    end

"""
High-level wrapper for VkWin32SurfaceCreateInfoKHR.

Extension: VK\\_KHR\\_win32\\_surface

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32SurfaceCreateInfoKHR.html)

"""
@auto_hash_equals struct Win32SurfaceCreateInfoKHR <: HighLevelStruct
        next::Any
        flags::UInt32
        hinstance::vk.HINSTANCE
        hwnd::vk.HWND
    end

"""
High-level wrapper for VkDispatchIndirectCommand.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDispatchIndirectCommand.html)

"""
@auto_hash_equals struct DispatchIndirectCommand <: HighLevelStruct
        x::UInt32
        y::UInt32
        z::UInt32
    end

"""
High-level wrapper for VkDrawIndexedIndirectCommand.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndexedIndirectCommand.html)

"""
@auto_hash_equals struct DrawIndexedIndirectCommand <: HighLevelStruct
        index_count::UInt32
        instance_count::UInt32
        first_index::UInt32
        vertex_offset::Int32
        first_instance::UInt32
    end

"""
High-level wrapper for VkDrawIndirectCommand.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndirectCommand.html)

"""
@auto_hash_equals struct DrawIndirectCommand <: HighLevelStruct
        vertex_count::UInt32
        instance_count::UInt32
        first_vertex::UInt32
        first_instance::UInt32
    end

"""
High-level wrapper for VkSemaphoreCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreCreateInfo.html)

"""
@auto_hash_equals struct SemaphoreCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceFeatures.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures.html)

"""
@auto_hash_equals struct PhysicalDeviceFeatures <: HighLevelStruct
        robust_buffer_access::Bool
        full_draw_index_uint_32::Bool
        image_cube_array::Bool
        independent_blend::Bool
        geometry_shader::Bool
        tessellation_shader::Bool
        sample_rate_shading::Bool
        dual_src_blend::Bool
        logic_op::Bool
        multi_draw_indirect::Bool
        draw_indirect_first_instance::Bool
        depth_clamp::Bool
        depth_bias_clamp::Bool
        fill_mode_non_solid::Bool
        depth_bounds::Bool
        wide_lines::Bool
        large_points::Bool
        alpha_to_one::Bool
        multi_viewport::Bool
        sampler_anisotropy::Bool
        texture_compression_etc_2::Bool
        texture_compression_astc_ldr::Bool
        texture_compression_bc::Bool
        occlusion_query_precise::Bool
        pipeline_statistics_query::Bool
        vertex_pipeline_stores_and_atomics::Bool
        fragment_stores_and_atomics::Bool
        shader_tessellation_and_geometry_point_size::Bool
        shader_image_gather_extended::Bool
        shader_storage_image_extended_formats::Bool
        shader_storage_image_multisample::Bool
        shader_storage_image_read_without_format::Bool
        shader_storage_image_write_without_format::Bool
        shader_uniform_buffer_array_dynamic_indexing::Bool
        shader_sampled_image_array_dynamic_indexing::Bool
        shader_storage_buffer_array_dynamic_indexing::Bool
        shader_storage_image_array_dynamic_indexing::Bool
        shader_clip_distance::Bool
        shader_cull_distance::Bool
        shader_float_64::Bool
        shader_int_64::Bool
        shader_int_16::Bool
        shader_resource_residency::Bool
        shader_resource_min_lod::Bool
        sparse_binding::Bool
        sparse_residency_buffer::Bool
        sparse_residency_image_2_d::Bool
        sparse_residency_image_3_d::Bool
        sparse_residency_2_samples::Bool
        sparse_residency_4_samples::Bool
        sparse_residency_8_samples::Bool
        sparse_residency_16_samples::Bool
        sparse_residency_aliased::Bool
        variable_multisample_rate::Bool
        inherited_queries::Bool
    end

"""
High-level wrapper for VkPhysicalDeviceFeatures2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures2.html)

"""
@auto_hash_equals struct PhysicalDeviceFeatures2 <: HighLevelStruct
        next::Any
        features::PhysicalDeviceFeatures
    end

"""
High-level wrapper for VkClearDepthStencilValue.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearDepthStencilValue.html)

"""
@auto_hash_equals struct ClearDepthStencilValue <: HighLevelStruct
        depth::Float32
        stencil::UInt32
    end

"""
High-level wrapper for VkPipelineTessellationStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineTessellationStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        patch_control_points::UInt32
    end

"""
High-level wrapper for VkSpecializationMapEntry.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationMapEntry.html)

"""
@auto_hash_equals struct SpecializationMapEntry <: HighLevelStruct
        constant_id::UInt32
        offset::UInt32
        size::UInt
    end

"""
High-level wrapper for VkSpecializationInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationInfo.html)

"""
@auto_hash_equals struct SpecializationInfo <: HighLevelStruct
        map_entries::Vector{SpecializationMapEntry}
        data_size::OptionalPtr{UInt}
        data::Ptr{Cvoid}
    end

"""
High-level wrapper for VkBufferCopy.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCopy.html)

"""
@auto_hash_equals struct BufferCopy <: HighLevelStruct
        src_offset::UInt64
        dst_offset::UInt64
        size::UInt64
    end

"""
High-level wrapper for VkMemoryAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateInfo.html)

"""
@auto_hash_equals struct MemoryAllocateInfo <: HighLevelStruct
        next::Any
        allocation_size::UInt64
        memory_type_index::UInt32
    end

"""
High-level wrapper for VkAllocationCallbacks.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAllocationCallbacks.html)

"""
@auto_hash_equals struct AllocationCallbacks <: HighLevelStruct
        user_data::OptionalPtr{Ptr{Cvoid}}
        pfn_allocation::FunctionPtr
        pfn_reallocation::FunctionPtr
        pfn_free::FunctionPtr
        pfn_internal_allocation::OptionalPtr{FunctionPtr}
        pfn_internal_free::OptionalPtr{FunctionPtr}
    end

"""
High-level wrapper for VkApplicationInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkApplicationInfo.html)

"""
@auto_hash_equals struct ApplicationInfo <: HighLevelStruct
        next::Any
        application_name::String
        application_version::VersionNumber
        engine_name::String
        engine_version::VersionNumber
        api_version::VersionNumber
    end

"""
High-level wrapper for VkInstanceCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInstanceCreateInfo.html)

"""
@auto_hash_equals struct InstanceCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        application_info::OptionalPtr{ApplicationInfo}
        enabled_layer_names::Vector{String}
        enabled_extension_names::Vector{String}
    end

"""
High-level wrapper for VkViewport.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewport.html)

"""
@auto_hash_equals struct Viewport <: HighLevelStruct
        x::Float32
        y::Float32
        width::Float32
        height::Float32
        min_depth::Float32
        max_depth::Float32
    end

"""
High-level wrapper for VkCommandBufferInheritanceViewportScissorInfoNV.

Extension: VK\\_NV\\_inherited\\_viewport\\_scissor

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceViewportScissorInfoNV.html)

"""
@auto_hash_equals struct CommandBufferInheritanceViewportScissorInfoNV <: HighLevelStruct
        next::Any
        viewport_scissor_2_d::Bool
        viewport_depth_count::UInt32
        viewport_depths::Viewport
    end

"""
High-level wrapper for VkExtent3D.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent3D.html)

"""
@auto_hash_equals struct Extent3D <: HighLevelStruct
        width::UInt32
        height::UInt32
        depth::UInt32
    end

"""
High-level wrapper for VkExtent2D.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent2D.html)

"""
@auto_hash_equals struct Extent2D <: HighLevelStruct
        width::UInt32
        height::UInt32
    end

"""
High-level wrapper for VkDisplayModeParametersKHR.

Extension: VK\\_KHR\\_display

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeParametersKHR.html)

"""
@auto_hash_equals struct DisplayModeParametersKHR <: HighLevelStruct
        visible_region::Extent2D
        refresh_rate::UInt32
    end

"""
High-level wrapper for VkDisplayModeCreateInfoKHR.

Extension: VK\\_KHR\\_display

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeCreateInfoKHR.html)

"""
@auto_hash_equals struct DisplayModeCreateInfoKHR <: HighLevelStruct
        next::Any
        flags::UInt32
        parameters::DisplayModeParametersKHR
    end

"""
High-level wrapper for VkOffset3D.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset3D.html)

"""
@auto_hash_equals struct Offset3D <: HighLevelStruct
        x::Int32
        y::Int32
        z::Int32
    end

"""
High-level wrapper for VkOffset2D.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset2D.html)

"""
@auto_hash_equals struct Offset2D <: HighLevelStruct
        x::Int32
        y::Int32
    end

"""
High-level wrapper for VkRectLayerKHR.

Extension: VK\\_KHR\\_incremental\\_present

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRectLayerKHR.html)

"""
@auto_hash_equals struct RectLayerKHR <: HighLevelStruct
        offset::Offset2D
        extent::Extent2D
        layer::UInt32
    end

"""
High-level wrapper for VkPresentRegionKHR.

Extension: VK\\_KHR\\_incremental\\_present

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentRegionKHR.html)

"""
@auto_hash_equals struct PresentRegionKHR <: HighLevelStruct
        rectangles::OptionalPtr{Vector{RectLayerKHR}}
    end

"""
High-level wrapper for VkPresentRegionsKHR.

Extension: VK\\_KHR\\_incremental\\_present

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentRegionsKHR.html)

"""
@auto_hash_equals struct PresentRegionsKHR <: HighLevelStruct
        next::Any
        regions::OptionalPtr{Vector{PresentRegionKHR}}
    end

"""
High-level wrapper for VkRect2D.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRect2D.html)

"""
@auto_hash_equals struct Rect2D <: HighLevelStruct
        offset::Offset2D
        extent::Extent2D
    end

"""
High-level wrapper for VkPipelineViewportExclusiveScissorStateCreateInfoNV.

Extension: VK\\_NV\\_scissor\\_exclusive

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportExclusiveScissorStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineViewportExclusiveScissorStateCreateInfoNV <: HighLevelStruct
        next::Any
        exclusive_scissors::Vector{Rect2D}
    end

"""
High-level wrapper for VkDeviceGroupRenderPassBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html)

"""
@auto_hash_equals struct DeviceGroupRenderPassBeginInfo <: HighLevelStruct
        next::Any
        device_mask::UInt32
        device_render_areas::Vector{Rect2D}
    end

"""
High-level wrapper for VkBindImageMemoryDeviceGroupInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryDeviceGroupInfo.html)

"""
@auto_hash_equals struct BindImageMemoryDeviceGroupInfo <: HighLevelStruct
        next::Any
        device_indices::Vector{UInt32}
        split_instance_bind_regions::Vector{Rect2D}
    end

"""
High-level wrapper for VkDisplayPresentInfoKHR.

Extension: VK\\_KHR\\_display\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPresentInfoKHR.html)

"""
@auto_hash_equals struct DisplayPresentInfoKHR <: HighLevelStruct
        next::Any
        src_rect::Rect2D
        dst_rect::Rect2D
        persistent::Bool
    end

"""
High-level wrapper for VkPipelineViewportStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineViewportStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        viewports::OptionalPtr{Vector{Viewport}}
        scissors::OptionalPtr{Vector{Rect2D}}
    end

"""
High-level wrapper for VkClearRect.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearRect.html)

"""
@auto_hash_equals struct ClearRect <: HighLevelStruct
        rect::Rect2D
        base_array_layer::UInt32
        layer_count::UInt32
    end

"""
High-level wrapper for VkBaseInStructure.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseInStructure.html)

"""
@auto_hash_equals struct BaseInStructure <: HighLevelStruct
        next::Any
    end

"""
High-level wrapper for VkBaseOutStructure.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseOutStructure.html)

"""
@auto_hash_equals struct BaseOutStructure <: HighLevelStruct
        next::Any
    end

"""
Minimalistic wrapper for VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.

Extension: VK_EXT_provoking_vertex

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.html

"""
struct _PipelineRasterizationProvokingVertexStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceProvokingVertexFeaturesEXT.

Extension: VK_EXT_provoking_vertex

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProvokingVertexFeaturesEXT.html

"""
struct _PhysicalDeviceProvokingVertexFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceProvokingVertexFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.

Extension: VK_EXT_ycbcr_2plane_444_formats

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.html

"""
struct _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCommandBufferInheritanceViewportScissorInfoNV.

Extension: VK_NV_inherited_viewport_scissor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceViewportScissorInfoNV.html

"""
struct _CommandBufferInheritanceViewportScissorInfoNV <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceViewportScissorInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceInheritedViewportScissorFeaturesNV.

Extension: VK_NV_inherited_viewport_scissor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceInheritedViewportScissorFeaturesNV.html

"""
struct _PhysicalDeviceInheritedViewportScissorFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceInheritedViewportScissorFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceSynchronization2FeaturesKHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSynchronization2FeaturesKHR.html

"""
struct _PhysicalDeviceSynchronization2FeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceSynchronization2FeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubmitInfo2KHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubmitInfo2KHR.html

"""
struct _SubmitInfo2KHR <: VulkanStruct{true}
    vks::VkSubmitInfo2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDependencyInfoKHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDependencyInfoKHR.html

"""
struct _DependencyInfoKHR <: VulkanStruct{true}
    vks::VkDependencyInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryBarrier2KHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryBarrier2KHR.html

"""
struct _MemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkMemoryBarrier2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineColorWriteCreateInfoEXT.

Extension: VK_EXT_color_write_enable

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorWriteCreateInfoEXT.html

"""
struct _PipelineColorWriteCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineColorWriteCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceColorWriteEnableFeaturesEXT.

Extension: VK_EXT_color_write_enable

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceColorWriteEnableFeaturesEXT.html

"""
struct _PhysicalDeviceColorWriteEnableFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceColorWriteEnableFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkVertexInputAttributeDescription2EXT.

Extension: VK_EXT_vertex_input_dynamic_state

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputAttributeDescription2EXT.html

"""
struct _VertexInputAttributeDescription2EXT <: VulkanStruct{true}
    vks::VkVertexInputAttributeDescription2EXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkVertexInputBindingDescription2EXT.

Extension: VK_EXT_vertex_input_dynamic_state

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDescription2EXT.html

"""
struct _VertexInputBindingDescription2EXT <: VulkanStruct{true}
    vks::VkVertexInputBindingDescription2EXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.

Extension: VK_EXT_vertex_input_dynamic_state

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.html

"""
struct _PhysicalDeviceVertexInputDynamicStateFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMutableDescriptorTypeCreateInfoVALVE.

Extension: VK_VALVE_mutable_descriptor_type

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMutableDescriptorTypeCreateInfoVALVE.html

"""
struct _MutableDescriptorTypeCreateInfoVALVE <: VulkanStruct{true}
    vks::VkMutableDescriptorTypeCreateInfoVALVE
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMutableDescriptorTypeListVALVE.

Extension: VK_VALVE_mutable_descriptor_type

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMutableDescriptorTypeListVALVE.html

"""
struct _MutableDescriptorTypeListVALVE <: VulkanStruct{true}
    vks::VkMutableDescriptorTypeListVALVE
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.

Extension: VK_VALVE_mutable_descriptor_type

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.html

"""
struct _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE <: VulkanStruct{true}
    vks::VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureBuildSizesInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildSizesInfoKHR.html

"""
struct _AccelerationStructureBuildSizesInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureBuildSizesInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineFragmentShadingRateEnumStateCreateInfoNV.

Extension: VK_NV_fragment_shading_rate_enums

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineFragmentShadingRateEnumStateCreateInfoNV.html

"""
struct _PipelineFragmentShadingRateEnumStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.

Extension: VK_NV_fragment_shading_rate_enums

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.html

"""
struct _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.

Extension: VK_NV_fragment_shading_rate_enums

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html

"""
struct _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.

Extension: VK_KHR_shader_terminate_invocation

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.html

"""
struct _PhysicalDeviceShaderTerminateInvocationFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShadingRateFeaturesKHR.

Extension: VK_KHR_fragment_shading_rate

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html

"""
struct _PhysicalDeviceFragmentShadingRateFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineFragmentShadingRateStateCreateInfoKHR.

Extension: VK_KHR_fragment_shading_rate

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineFragmentShadingRateStateCreateInfoKHR.html

"""
struct _PipelineFragmentShadingRateStateCreateInfoKHR <: VulkanStruct{true}
    vks::VkPipelineFragmentShadingRateStateCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkFragmentShadingRateAttachmentInfoKHR.

Extension: VK_KHR_fragment_shading_rate

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFragmentShadingRateAttachmentInfoKHR.html

"""
struct _FragmentShadingRateAttachmentInfoKHR <: VulkanStruct{true}
    vks::VkFragmentShadingRateAttachmentInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.

Extension: VK_EXT_shader_image_atomic_int64

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.html

"""
struct _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageResolve2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageResolve2KHR.html

"""
struct _ImageResolve2KHR <: VulkanStruct{true}
    vks::VkImageResolve2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBufferImageCopy2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferImageCopy2KHR.html

"""
struct _BufferImageCopy2KHR <: VulkanStruct{true}
    vks::VkBufferImageCopy2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageBlit2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageBlit2KHR.html

"""
struct _ImageBlit2KHR <: VulkanStruct{true}
    vks::VkImageBlit2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageCopy2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCopy2KHR.html

"""
struct _ImageCopy2KHR <: VulkanStruct{true}
    vks::VkImageCopy2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBufferCopy2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCopy2KHR.html

"""
struct _BufferCopy2KHR <: VulkanStruct{true}
    vks::VkBufferCopy2KHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevice4444FormatsFeaturesEXT.

Extension: VK_EXT_4444_formats

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice4444FormatsFeaturesEXT.html

"""
struct _PhysicalDevice4444FormatsFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevice4444FormatsFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.

Extension: VK_KHR_workgroup_memory_explicit_layout

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html

"""
struct _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceImageRobustnessFeaturesEXT.

Extension: VK_EXT_image_robustness

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageRobustnessFeaturesEXT.html

"""
struct _PhysicalDeviceImageRobustnessFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageRobustnessFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceRobustness2FeaturesEXT.

Extension: VK_EXT_robustness2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html

"""
struct _PhysicalDeviceRobustness2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceRobustness2FeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.

Extension: VK_KHR_zero_initialize_workgroup_memory

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.html

"""
struct _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceDiagnosticsConfigCreateInfoNV.

Extension: VK_NV_device_diagnostics_config

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceDiagnosticsConfigCreateInfoNV.html

"""
struct _DeviceDiagnosticsConfigCreateInfoNV <: VulkanStruct{true}
    vks::VkDeviceDiagnosticsConfigCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDiagnosticsConfigFeaturesNV.

Extension: VK_NV_device_diagnostics_config

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDiagnosticsConfigFeaturesNV.html

"""
struct _PhysicalDeviceDiagnosticsConfigFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCommandBufferInheritanceRenderPassTransformInfoQCOM.

Extension: VK_QCOM_render_pass_transform

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceRenderPassTransformInfoQCOM.html

"""
struct _CommandBufferInheritanceRenderPassTransformInfoQCOM <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCopyCommandTransformInfoQCOM.

Extension: VK_QCOM_rotated_copy_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyCommandTransformInfoQCOM.html

"""
struct _CopyCommandTransformInfoQCOM <: VulkanStruct{true}
    vks::VkCopyCommandTransformInfoQCOM
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassTransformBeginInfoQCOM.

Extension: VK_QCOM_render_pass_transform

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassTransformBeginInfoQCOM.html

"""
struct _RenderPassTransformBeginInfoQCOM <: VulkanStruct{true}
    vks::VkRenderPassTransformBeginInfoQCOM
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.

Extension: VK_EXT_extended_dynamic_state2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html

"""
struct _PhysicalDeviceExtendedDynamicState2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.

Extension: VK_EXT_extended_dynamic_state

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.html

"""
struct _PhysicalDeviceExtendedDynamicStateFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineLibraryCreateInfoKHR.

Extension: VK_KHR_pipeline_library

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineLibraryCreateInfoKHR.html

"""
struct _PipelineLibraryCreateInfoKHR <: VulkanStruct{true}
    vks::VkPipelineLibraryCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRayTracingPipelineInterfaceCreateInfoKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineInterfaceCreateInfoKHR.html

"""
struct _RayTracingPipelineInterfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingPipelineInterfaceCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureVersionInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureVersionInfoKHR.html

"""
struct _AccelerationStructureVersionInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureVersionInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureInstanceKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureInstanceKHR.html

"""
struct _AccelerationStructureInstanceKHR <: VulkanStruct{false}
    vks::VkAccelerationStructureInstanceKHR
end

"""
Minimalistic wrapper for VkTransformMatrixKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTransformMatrixKHR.html

"""
struct _TransformMatrixKHR <: VulkanStruct{false}
    vks::VkTransformMatrixKHR
end

"""
Minimalistic wrapper for VkAabbPositionsKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAabbPositionsKHR.html

"""
struct _AabbPositionsKHR <: VulkanStruct{false}
    vks::VkAabbPositionsKHR
end

"""
Minimalistic wrapper for VkAccelerationStructureBuildRangeInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildRangeInfoKHR.html

"""
struct _AccelerationStructureBuildRangeInfoKHR <: VulkanStruct{false}
    vks::VkAccelerationStructureBuildRangeInfoKHR
end

"""
Minimalistic wrapper for VkAccelerationStructureGeometryKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryKHR.html

"""
struct _AccelerationStructureGeometryKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureGeometryInstancesDataKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryInstancesDataKHR.html

"""
struct _AccelerationStructureGeometryInstancesDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryInstancesDataKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureGeometryAabbsDataKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryAabbsDataKHR.html

"""
struct _AccelerationStructureGeometryAabbsDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryAabbsDataKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureGeometryTrianglesDataKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryTrianglesDataKHR.html

"""
struct _AccelerationStructureGeometryTrianglesDataKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureGeometryTrianglesDataKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceCustomBorderColorFeaturesEXT.

Extension: VK_EXT_custom_border_color

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCustomBorderColorFeaturesEXT.html

"""
struct _PhysicalDeviceCustomBorderColorFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceCustomBorderColorFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSamplerCustomBorderColorCreateInfoEXT.

Extension: VK_EXT_custom_border_color

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerCustomBorderColorCreateInfoEXT.html

"""
struct _SamplerCustomBorderColorCreateInfoEXT <: VulkanStruct{true}
    vks::VkSamplerCustomBorderColorCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceCoherentMemoryFeaturesAMD.

Extension: VK_AMD_device_coherent_memory

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCoherentMemoryFeaturesAMD.html

"""
struct _PhysicalDeviceCoherentMemoryFeaturesAMD <: VulkanStruct{true}
    vks::VkPhysicalDeviceCoherentMemoryFeaturesAMD
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineCompilerControlCreateInfoAMD.

Extension: VK_AMD_pipeline_compiler_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCompilerControlCreateInfoAMD.html

"""
struct _PipelineCompilerControlCreateInfoAMD <: VulkanStruct{true}
    vks::VkPipelineCompilerControlCreateInfoAMD
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVulkan12Features.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan12Features.html

"""
struct _PhysicalDeviceVulkan12Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkan12Features
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVulkan11Features.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan11Features.html

"""
struct _PhysicalDeviceVulkan11Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkan11Features
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.

Extension: VK_EXT_pipeline_creation_cache_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.html

"""
struct _PhysicalDevicePipelineCreationCacheControlFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationLineStateCreateInfoEXT.

Extension: VK_EXT_line_rasterization

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationLineStateCreateInfoEXT.html

"""
struct _PipelineRasterizationLineStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationLineStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceLineRasterizationFeaturesEXT.

Extension: VK_EXT_line_rasterization

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesEXT.html

"""
struct _PhysicalDeviceLineRasterizationFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceLineRasterizationFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryOpaqueCaptureAddressAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryOpaqueCaptureAddressAllocateInfo.html

"""
struct _MemoryOpaqueCaptureAddressAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryOpaqueCaptureAddressAllocateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.

Extension: VK_EXT_subgroup_size_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.html

"""
struct _PhysicalDeviceSubgroupSizeControlFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.

Extension: VK_EXT_texel_buffer_alignment

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.html

"""
struct _PhysicalDeviceTexelBufferAlignmentFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.

Extension: VK_EXT_shader_demote_to_helper_invocation

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.html

"""
struct _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.html

"""
struct _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAttachmentDescriptionStencilLayout.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescriptionStencilLayout.html

"""
struct _AttachmentDescriptionStencilLayout <: VulkanStruct{true}
    vks::VkAttachmentDescriptionStencilLayout
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAttachmentReferenceStencilLayout.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReferenceStencilLayout.html

"""
struct _AttachmentReferenceStencilLayout <: VulkanStruct{true}
    vks::VkAttachmentReferenceStencilLayout
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.html

"""
struct _PhysicalDeviceSeparateDepthStencilLayoutsFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.

Extension: VK_EXT_fragment_shader_interlock

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html

"""
struct _PhysicalDeviceFragmentShaderInterlockFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.

Extension: VK_NV_shader_sm_builtins

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.html

"""
struct _PhysicalDeviceShaderSMBuiltinsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceIndexTypeUint8FeaturesEXT.

Extension: VK_EXT_index_type_uint8

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceIndexTypeUint8FeaturesEXT.html

"""
struct _PhysicalDeviceIndexTypeUint8FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderClockFeaturesKHR.

Extension: VK_KHR_shader_clock

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderClockFeaturesKHR.html

"""
struct _PhysicalDeviceShaderClockFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderClockFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceConfigurationAcquireInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceConfigurationAcquireInfoINTEL.html

"""
struct _PerformanceConfigurationAcquireInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceConfigurationAcquireInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceOverrideInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceOverrideInfoINTEL.html

"""
struct _PerformanceOverrideInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceOverrideInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceStreamMarkerInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceStreamMarkerInfoINTEL.html

"""
struct _PerformanceStreamMarkerInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceStreamMarkerInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceMarkerInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceMarkerInfoINTEL.html

"""
struct _PerformanceMarkerInfoINTEL <: VulkanStruct{true}
    vks::VkPerformanceMarkerInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkQueryPoolPerformanceQueryCreateInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolPerformanceQueryCreateInfoINTEL.html

"""
struct _QueryPoolPerformanceQueryCreateInfoINTEL <: VulkanStruct{true}
    vks::VkQueryPoolPerformanceQueryCreateInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkInitializePerformanceApiInfoINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInitializePerformanceApiInfoINTEL.html

"""
struct _InitializePerformanceApiInfoINTEL <: VulkanStruct{true}
    vks::VkInitializePerformanceApiInfoINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceValueINTEL.

Extension: VK_INTEL_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceValueINTEL.html

"""
struct _PerformanceValueINTEL <: VulkanStruct{false}
    vks::VkPerformanceValueINTEL
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.

Extension: VK_INTEL_shader_integer_functions2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.html

"""
struct _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineCoverageReductionStateCreateInfoNV.

Extension: VK_NV_coverage_reduction_mode

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageReductionStateCreateInfoNV.html

"""
struct _PipelineCoverageReductionStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageReductionStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceCoverageReductionModeFeaturesNV.

Extension: VK_NV_coverage_reduction_mode

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCoverageReductionModeFeaturesNV.html

"""
struct _PhysicalDeviceCoverageReductionModeFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCoverageReductionModeFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkHeadlessSurfaceCreateInfoEXT.

Extension: VK_EXT_headless_surface

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkHeadlessSurfaceCreateInfoEXT.html

"""
struct _HeadlessSurfaceCreateInfoEXT <: VulkanStruct{true}
    vks::VkHeadlessSurfaceCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPerformanceQuerySubmitInfoKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceQuerySubmitInfoKHR.html

"""
struct _PerformanceQuerySubmitInfoKHR <: VulkanStruct{true}
    vks::VkPerformanceQuerySubmitInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAcquireProfilingLockInfoKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAcquireProfilingLockInfoKHR.html

"""
struct _AcquireProfilingLockInfoKHR <: VulkanStruct{true}
    vks::VkAcquireProfilingLockInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkQueryPoolPerformanceCreateInfoKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolPerformanceCreateInfoKHR.html

"""
struct _QueryPoolPerformanceCreateInfoKHR <: VulkanStruct{true}
    vks::VkQueryPoolPerformanceCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevicePerformanceQueryFeaturesKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePerformanceQueryFeaturesKHR.html

"""
struct _PhysicalDevicePerformanceQueryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDevicePerformanceQueryFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSurfaceCapabilitiesFullScreenExclusiveEXT.

Extension: VK_EXT_full_screen_exclusive

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilitiesFullScreenExclusiveEXT.html

"""
struct _SurfaceCapabilitiesFullScreenExclusiveEXT <: VulkanStruct{true}
    vks::VkSurfaceCapabilitiesFullScreenExclusiveEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSurfaceFullScreenExclusiveWin32InfoEXT.

Extension: VK_EXT_full_screen_exclusive

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFullScreenExclusiveWin32InfoEXT.html

"""
struct _SurfaceFullScreenExclusiveWin32InfoEXT <: VulkanStruct{true}
    vks::VkSurfaceFullScreenExclusiveWin32InfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSurfaceFullScreenExclusiveInfoEXT.

Extension: VK_EXT_full_screen_exclusive

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFullScreenExclusiveInfoEXT.html

"""
struct _SurfaceFullScreenExclusiveInfoEXT <: VulkanStruct{true}
    vks::VkSurfaceFullScreenExclusiveInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineCreationFeedbackCreateInfoEXT.

Extension: VK_EXT_pipeline_creation_feedback

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCreationFeedbackCreateInfoEXT.html

"""
struct _PipelineCreationFeedbackCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineCreationFeedbackCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.

Extension: VK_EXT_ycbcr_image_arrays

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.html

"""
struct _PhysicalDeviceYcbcrImageArraysFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCooperativeMatrixPropertiesNV.

Extension: VK_NV_cooperative_matrix

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCooperativeMatrixPropertiesNV.html

"""
struct _CooperativeMatrixPropertiesNV <: VulkanStruct{true}
    vks::VkCooperativeMatrixPropertiesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceCooperativeMatrixFeaturesNV.

Extension: VK_NV_cooperative_matrix

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesNV.html

"""
struct _PhysicalDeviceCooperativeMatrixFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCooperativeMatrixFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.

Extension: VK_EXT_texture_compression_astc_hdr

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.html

"""
struct _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassAttachmentBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassAttachmentBeginInfo.html

"""
struct _RenderPassAttachmentBeginInfo <: VulkanStruct{true}
    vks::VkRenderPassAttachmentBeginInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkFramebufferAttachmentImageInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentImageInfo.html

"""
struct _FramebufferAttachmentImageInfo <: VulkanStruct{true}
    vks::VkFramebufferAttachmentImageInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkFramebufferAttachmentsCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentsCreateInfo.html

"""
struct _FramebufferAttachmentsCreateInfo <: VulkanStruct{true}
    vks::VkFramebufferAttachmentsCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceImagelessFramebufferFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImagelessFramebufferFeatures.html

"""
struct _PhysicalDeviceImagelessFramebufferFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceImagelessFramebufferFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceImageViewImageFormatInfoEXT.

Extension: VK_EXT_filter_cubic

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageViewImageFormatInfoEXT.html

"""
struct _PhysicalDeviceImageViewImageFormatInfoEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageViewImageFormatInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBufferDeviceAddressCreateInfoEXT.

Extension: VK_EXT_buffer_device_address

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferDeviceAddressCreateInfoEXT.html

"""
struct _BufferDeviceAddressCreateInfoEXT <: VulkanStruct{true}
    vks::VkBufferDeviceAddressCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBufferOpaqueCaptureAddressCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferOpaqueCaptureAddressCreateInfo.html

"""
struct _BufferOpaqueCaptureAddressCreateInfo <: VulkanStruct{true}
    vks::VkBufferOpaqueCaptureAddressCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.

Extension: VK_EXT_buffer_device_address

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.html

"""
struct _PhysicalDeviceBufferDeviceAddressFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceBufferDeviceAddressFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeatures.html

"""
struct _PhysicalDeviceBufferDeviceAddressFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceBufferDeviceAddressFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryPriorityAllocateInfoEXT.

Extension: VK_EXT_memory_priority

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryPriorityAllocateInfoEXT.html

"""
struct _MemoryPriorityAllocateInfoEXT <: VulkanStruct{true}
    vks::VkMemoryPriorityAllocateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceMemoryPriorityFeaturesEXT.

Extension: VK_EXT_memory_priority

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryPriorityFeaturesEXT.html

"""
struct _PhysicalDeviceMemoryPriorityFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceMemoryPriorityFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationDepthClipStateCreateInfoEXT.

Extension: VK_EXT_depth_clip_enable

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationDepthClipStateCreateInfoEXT.html

"""
struct _PipelineRasterizationDepthClipStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationDepthClipStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDepthClipEnableFeaturesEXT.

Extension: VK_EXT_depth_clip_enable

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDepthClipEnableFeaturesEXT.html

"""
struct _PhysicalDeviceDepthClipEnableFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceDepthClipEnableFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceUniformBufferStandardLayoutFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceUniformBufferStandardLayoutFeatures.html

"""
struct _PhysicalDeviceUniformBufferStandardLayoutFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSurfaceProtectedCapabilitiesKHR.

Extension: VK_KHR_surface_protected_capabilities

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceProtectedCapabilitiesKHR.html

"""
struct _SurfaceProtectedCapabilitiesKHR <: VulkanStruct{true}
    vks::VkSurfaceProtectedCapabilitiesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceScalarBlockLayoutFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceScalarBlockLayoutFeatures.html

"""
struct _PhysicalDeviceScalarBlockLayoutFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceScalarBlockLayoutFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassFragmentDensityMapCreateInfoEXT.

Extension: VK_EXT_fragment_density_map

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassFragmentDensityMapCreateInfoEXT.html

"""
struct _RenderPassFragmentDensityMapCreateInfoEXT <: VulkanStruct{true}
    vks::VkRenderPassFragmentDensityMapCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.

Extension: VK_EXT_fragment_density_map2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.html

"""
struct _PhysicalDeviceFragmentDensityMap2FeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentDensityMapFeaturesEXT.

Extension: VK_EXT_fragment_density_map

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html

"""
struct _PhysicalDeviceFragmentDensityMapFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceMemoryOverallocationCreateInfoAMD.

Extension: VK_AMD_memory_overallocation_behavior

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryOverallocationCreateInfoAMD.html

"""
struct _DeviceMemoryOverallocationCreateInfoAMD <: VulkanStruct{true}
    vks::VkDeviceMemoryOverallocationCreateInfoAMD
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageStencilUsageCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageStencilUsageCreateInfo.html

"""
struct _ImageStencilUsageCreateInfo <: VulkanStruct{true}
    vks::VkImageStencilUsageCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageDrmFormatModifierExplicitCreateInfoEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageDrmFormatModifierExplicitCreateInfoEXT.html

"""
struct _ImageDrmFormatModifierExplicitCreateInfoEXT <: VulkanStruct{true}
    vks::VkImageDrmFormatModifierExplicitCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageDrmFormatModifierListCreateInfoEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageDrmFormatModifierListCreateInfoEXT.html

"""
struct _ImageDrmFormatModifierListCreateInfoEXT <: VulkanStruct{true}
    vks::VkImageDrmFormatModifierListCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceImageDrmFormatModifierInfoEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageDrmFormatModifierInfoEXT.html

"""
struct _PhysicalDeviceImageDrmFormatModifierInfoEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkTraceRaysIndirectCommandKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTraceRaysIndirectCommandKHR.html

"""
struct _TraceRaysIndirectCommandKHR <: VulkanStruct{false}
    vks::VkTraceRaysIndirectCommandKHR
end

"""
Minimalistic wrapper for VkStridedDeviceAddressRegionKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkStridedDeviceAddressRegionKHR.html

"""
struct _StridedDeviceAddressRegionKHR <: VulkanStruct{false}
    vks::VkStridedDeviceAddressRegionKHR
end

"""
Minimalistic wrapper for VkPhysicalDeviceRayQueryFeaturesKHR.

Extension: VK_KHR_ray_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayQueryFeaturesKHR.html

"""
struct _PhysicalDeviceRayQueryFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceRayQueryFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceRayTracingPipelineFeaturesKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html

"""
struct _PhysicalDeviceRayTracingPipelineFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceAccelerationStructureFeaturesKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html

"""
struct _PhysicalDeviceAccelerationStructureFeaturesKHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceAccelerationStructureFeaturesKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWriteDescriptorSetAccelerationStructureNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetAccelerationStructureNV.html

"""
struct _WriteDescriptorSetAccelerationStructureNV <: VulkanStruct{true}
    vks::VkWriteDescriptorSetAccelerationStructureNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWriteDescriptorSetAccelerationStructureKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetAccelerationStructureKHR.html

"""
struct _WriteDescriptorSetAccelerationStructureKHR <: VulkanStruct{true}
    vks::VkWriteDescriptorSetAccelerationStructureKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureCreateInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureCreateInfoNV.html

"""
struct _AccelerationStructureCreateInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAccelerationStructureInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureInfoNV.html

"""
struct _AccelerationStructureInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkGeometryNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryNV.html

"""
struct _GeometryNV <: VulkanStruct{true}
    vks::VkGeometryNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkGeometryDataNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryDataNV.html

"""
struct _GeometryDataNV <: VulkanStruct{false}
    vks::VkGeometryDataNV
end

"""
Minimalistic wrapper for VkRayTracingShaderGroupCreateInfoKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingShaderGroupCreateInfoKHR.html

"""
struct _RayTracingShaderGroupCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingShaderGroupCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRayTracingShaderGroupCreateInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingShaderGroupCreateInfoNV.html

"""
struct _RayTracingShaderGroupCreateInfoNV <: VulkanStruct{true}
    vks::VkRayTracingShaderGroupCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDrawMeshTasksIndirectCommandNV.

Extension: VK_NV_mesh_shader

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawMeshTasksIndirectCommandNV.html

"""
struct _DrawMeshTasksIndirectCommandNV <: VulkanStruct{false}
    vks::VkDrawMeshTasksIndirectCommandNV
end

"""
Minimalistic wrapper for VkPhysicalDeviceMeshShaderFeaturesNV.

Extension: VK_NV_mesh_shader

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesNV.html

"""
struct _PhysicalDeviceMeshShaderFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceMeshShaderFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.html

"""
struct _PipelineViewportCoarseSampleOrderStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCoarseSampleOrderCustomNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCoarseSampleOrderCustomNV.html

"""
struct _CoarseSampleOrderCustomNV <: VulkanStruct{true}
    vks::VkCoarseSampleOrderCustomNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCoarseSampleLocationNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCoarseSampleLocationNV.html

"""
struct _CoarseSampleLocationNV <: VulkanStruct{false}
    vks::VkCoarseSampleLocationNV
end

"""
Minimalistic wrapper for VkPhysicalDeviceShadingRateImageFeaturesNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShadingRateImageFeaturesNV.html

"""
struct _PhysicalDeviceShadingRateImageFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShadingRateImageFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineViewportShadingRateImageStateCreateInfoNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportShadingRateImageStateCreateInfoNV.html

"""
struct _PipelineViewportShadingRateImageStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportShadingRateImageStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkShadingRatePaletteNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShadingRatePaletteNV.html

"""
struct _ShadingRatePaletteNV <: VulkanStruct{true}
    vks::VkShadingRatePaletteNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.

Extension: VK_NV_dedicated_allocation_image_aliasing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.html

"""
struct _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderImageFootprintFeaturesNV.

Extension: VK_NV_shader_image_footprint

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderImageFootprintFeaturesNV.html

"""
struct _PhysicalDeviceShaderImageFootprintFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderImageFootprintFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.

Extension: VK_NV_fragment_shader_barycentric

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.html

"""
struct _PhysicalDeviceFragmentShaderBarycentricFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.

Extension: VK_NV_compute_shader_derivatives

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.html

"""
struct _PhysicalDeviceComputeShaderDerivativesFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceCornerSampledImageFeaturesNV.

Extension: VK_NV_corner_sampled_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCornerSampledImageFeaturesNV.html

"""
struct _PhysicalDeviceCornerSampledImageFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceCornerSampledImageFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineViewportExclusiveScissorStateCreateInfoNV.

Extension: VK_NV_scissor_exclusive

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportExclusiveScissorStateCreateInfoNV.html

"""
struct _PipelineViewportExclusiveScissorStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportExclusiveScissorStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExclusiveScissorFeaturesNV.

Extension: VK_NV_scissor_exclusive

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExclusiveScissorFeaturesNV.html

"""
struct _PhysicalDeviceExclusiveScissorFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceExclusiveScissorFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRepresentativeFragmentTestStateCreateInfoNV.

Extension: VK_NV_representative_fragment_test

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRepresentativeFragmentTestStateCreateInfoNV.html

"""
struct _PipelineRepresentativeFragmentTestStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.

Extension: VK_NV_representative_fragment_test

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.html

"""
struct _PhysicalDeviceRepresentativeFragmentTestFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationStateStreamCreateInfoEXT.

Extension: VK_EXT_transform_feedback

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateStreamCreateInfoEXT.html

"""
struct _PipelineRasterizationStateStreamCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateStreamCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceTransformFeedbackFeaturesEXT.

Extension: VK_EXT_transform_feedback

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTransformFeedbackFeaturesEXT.html

"""
struct _PhysicalDeviceTransformFeedbackFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceTransformFeedbackFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceASTCDecodeFeaturesEXT.

Extension: VK_EXT_astc_decode_mode

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceASTCDecodeFeaturesEXT.html

"""
struct _PhysicalDeviceASTCDecodeFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceASTCDecodeFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageViewASTCDecodeModeEXT.

Extension: VK_EXT_astc_decode_mode

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewASTCDecodeModeEXT.html

"""
struct _ImageViewASTCDecodeModeEXT <: VulkanStruct{true}
    vks::VkImageViewASTCDecodeModeEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassDescriptionDepthStencilResolve.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescriptionDepthStencilResolve.html

"""
struct _SubpassDescriptionDepthStencilResolve <: VulkanStruct{true}
    vks::VkSubpassDescriptionDepthStencilResolve
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.

Extension: VK_EXT_vertex_attribute_divisor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.html

"""
struct _PhysicalDeviceVertexAttributeDivisorFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.

Extension: VK_EXT_shader_atomic_float

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html

"""
struct _PhysicalDeviceShaderAtomicFloatFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderAtomicInt64Features.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64Features.html

"""
struct _PhysicalDeviceShaderAtomicInt64Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderAtomicInt64Features
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVulkanMemoryModelFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkanMemoryModelFeatures.html

"""
struct _PhysicalDeviceVulkanMemoryModelFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceVulkanMemoryModelFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceConditionalRenderingFeaturesEXT.

Extension: VK_EXT_conditional_rendering

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceConditionalRenderingFeaturesEXT.html

"""
struct _PhysicalDeviceConditionalRenderingFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceConditionalRenderingFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevice8BitStorageFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice8BitStorageFeatures.html

"""
struct _PhysicalDevice8BitStorageFeatures <: VulkanStruct{true}
    vks::VkPhysicalDevice8BitStorageFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCommandBufferInheritanceConditionalRenderingInfoEXT.

Extension: VK_EXT_conditional_rendering

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceConditionalRenderingInfoEXT.html

"""
struct _CommandBufferInheritanceConditionalRenderingInfoEXT <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceConditionalRenderingInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineVertexInputDivisorStateCreateInfoEXT.

Extension: VK_EXT_vertex_attribute_divisor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineVertexInputDivisorStateCreateInfoEXT.html

"""
struct _PipelineVertexInputDivisorStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineVertexInputDivisorStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkVertexInputBindingDivisorDescriptionEXT.

Extension: VK_EXT_vertex_attribute_divisor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDivisorDescriptionEXT.html

"""
struct _VertexInputBindingDivisorDescriptionEXT <: VulkanStruct{false}
    vks::VkVertexInputBindingDivisorDescriptionEXT
end

"""
Minimalistic wrapper for VkSemaphoreWaitInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreWaitInfo.html

"""
struct _SemaphoreWaitInfo <: VulkanStruct{true}
    vks::VkSemaphoreWaitInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkTimelineSemaphoreSubmitInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTimelineSemaphoreSubmitInfo.html

"""
struct _TimelineSemaphoreSubmitInfo <: VulkanStruct{true}
    vks::VkTimelineSemaphoreSubmitInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSemaphoreTypeCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreTypeCreateInfo.html

"""
struct _SemaphoreTypeCreateInfo <: VulkanStruct{true}
    vks::VkSemaphoreTypeCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceTimelineSemaphoreFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreFeatures.html

"""
struct _PhysicalDeviceTimelineSemaphoreFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceTimelineSemaphoreFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassEndInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassEndInfo.html

"""
struct _SubpassEndInfo <: VulkanStruct{true}
    vks::VkSubpassEndInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassBeginInfo.html

"""
struct _SubpassBeginInfo <: VulkanStruct{true}
    vks::VkSubpassBeginInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassCreateInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo2.html

"""
struct _RenderPassCreateInfo2 <: VulkanStruct{true}
    vks::VkRenderPassCreateInfo2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassDependency2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency2.html

"""
struct _SubpassDependency2 <: VulkanStruct{true}
    vks::VkSubpassDependency2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassDescription2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription2.html

"""
struct _SubpassDescription2 <: VulkanStruct{true}
    vks::VkSubpassDescription2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAttachmentReference2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference2.html

"""
struct _AttachmentReference2 <: VulkanStruct{true}
    vks::VkAttachmentReference2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAttachmentDescription2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription2.html

"""
struct _AttachmentDescription2 <: VulkanStruct{true}
    vks::VkAttachmentDescription2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDescriptorSetVariableDescriptorCountAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfo.html

"""
struct _DescriptorSetVariableDescriptorCountAllocateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetVariableDescriptorCountAllocateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDescriptorSetLayoutBindingFlagsCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfo.html

"""
struct _DescriptorSetLayoutBindingFlagsCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutBindingFlagsCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDescriptorIndexingFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDescriptorIndexingFeatures.html

"""
struct _PhysicalDeviceDescriptorIndexingFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceDescriptorIndexingFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationConservativeStateCreateInfoEXT.

Extension: VK_EXT_conservative_rasterization

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationConservativeStateCreateInfoEXT.html

"""
struct _PipelineRasterizationConservativeStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineRasterizationConservativeStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCalibratedTimestampInfoEXT.

Extension: VK_EXT_calibrated_timestamps

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCalibratedTimestampInfoEXT.html

"""
struct _CalibratedTimestampInfoEXT <: VulkanStruct{true}
    vks::VkCalibratedTimestampInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImportMemoryHostPointerInfoEXT.

Extension: VK_EXT_external_memory_host

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryHostPointerInfoEXT.html

"""
struct _ImportMemoryHostPointerInfoEXT <: VulkanStruct{true}
    vks::VkImportMemoryHostPointerInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceDeviceMemoryReportCreateInfoEXT.

Extension: VK_EXT_device_memory_report

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceDeviceMemoryReportCreateInfoEXT.html

"""
struct _DeviceDeviceMemoryReportCreateInfoEXT <: VulkanStruct{true}
    vks::VkDeviceDeviceMemoryReportCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.

Extension: VK_EXT_device_memory_report

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.html

"""
struct _PhysicalDeviceDeviceMemoryReportFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugUtilsMessengerCallbackDataEXT.

Extension: VK_EXT_debug_utils

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsMessengerCallbackDataEXT.html

"""
struct _DebugUtilsMessengerCallbackDataEXT <: VulkanStruct{true}
    vks::VkDebugUtilsMessengerCallbackDataEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugUtilsMessengerCreateInfoEXT.

Extension: VK_EXT_debug_utils

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsMessengerCreateInfoEXT.html

"""
struct _DebugUtilsMessengerCreateInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsMessengerCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugUtilsLabelEXT.

Extension: VK_EXT_debug_utils

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsLabelEXT.html

"""
struct _DebugUtilsLabelEXT <: VulkanStruct{true}
    vks::VkDebugUtilsLabelEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugUtilsObjectTagInfoEXT.

Extension: VK_EXT_debug_utils

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsObjectTagInfoEXT.html

"""
struct _DebugUtilsObjectTagInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsObjectTagInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugUtilsObjectNameInfoEXT.

Extension: VK_EXT_debug_utils

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsObjectNameInfoEXT.html

"""
struct _DebugUtilsObjectNameInfoEXT <: VulkanStruct{true}
    vks::VkDebugUtilsObjectNameInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceQueueGlobalPriorityCreateInfoEXT.

Extension: VK_EXT_global_priority

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueGlobalPriorityCreateInfoEXT.html

"""
struct _DeviceQueueGlobalPriorityCreateInfoEXT <: VulkanStruct{true}
    vks::VkDeviceQueueGlobalPriorityCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkShaderResourceUsageAMD.

Extension: VK_AMD_shader_info

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderResourceUsageAMD.html

"""
struct ShaderResourceUsageAMD <: ReturnedOnly
    num_used_vgprs::UInt32
    num_used_sgprs::UInt32
    lds_size_per_local_work_group::UInt32
    lds_usage_size_in_bytes::UInt
    scratch_mem_usage_in_bytes::UInt
end

"""
Minimalistic wrapper for VkPhysicalDeviceHostQueryResetFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceHostQueryResetFeatures.html

"""
struct _PhysicalDeviceHostQueryResetFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceHostQueryResetFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderFloat16Int8Features.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8Features.html

"""
struct _PhysicalDeviceShaderFloat16Int8Features <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderFloat16Int8Features
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderDrawParametersFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderDrawParametersFeatures.html

"""
struct _PhysicalDeviceShaderDrawParametersFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderDrawParametersFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkValidationCacheCreateInfoEXT.

Extension: VK_EXT_validation_cache

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationCacheCreateInfoEXT.html

"""
struct _ValidationCacheCreateInfoEXT <: VulkanStruct{true}
    vks::VkValidationCacheCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageFormatListCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatListCreateInfo.html

"""
struct _ImageFormatListCreateInfo <: VulkanStruct{true}
    vks::VkImageFormatListCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineCoverageModulationStateCreateInfoNV.

Extension: VK_NV_framebuffer_mixed_samples

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageModulationStateCreateInfoNV.html

"""
struct _PipelineCoverageModulationStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageModulationStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDescriptorPoolInlineUniformBlockCreateInfoEXT.

Extension: VK_EXT_inline_uniform_block

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolInlineUniformBlockCreateInfoEXT.html

"""
struct _DescriptorPoolInlineUniformBlockCreateInfoEXT <: VulkanStruct{true}
    vks::VkDescriptorPoolInlineUniformBlockCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWriteDescriptorSetInlineUniformBlockEXT.

Extension: VK_EXT_inline_uniform_block

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetInlineUniformBlockEXT.html

"""
struct _WriteDescriptorSetInlineUniformBlockEXT <: VulkanStruct{true}
    vks::VkWriteDescriptorSetInlineUniformBlockEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceInlineUniformBlockFeaturesEXT.

Extension: VK_EXT_inline_uniform_block

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceInlineUniformBlockFeaturesEXT.html

"""
struct _PhysicalDeviceInlineUniformBlockFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceInlineUniformBlockFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineColorBlendAdvancedStateCreateInfoEXT.

Extension: VK_EXT_blend_operation_advanced

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendAdvancedStateCreateInfoEXT.html

"""
struct _PipelineColorBlendAdvancedStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineColorBlendAdvancedStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.

Extension: VK_EXT_blend_operation_advanced

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.html

"""
struct _PhysicalDeviceBlendOperationAdvancedFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSamplerReductionModeCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerReductionModeCreateInfo.html

"""
struct _SamplerReductionModeCreateInfo <: VulkanStruct{true}
    vks::VkSamplerReductionModeCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineSampleLocationsStateCreateInfoEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineSampleLocationsStateCreateInfoEXT.html

"""
struct _PipelineSampleLocationsStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineSampleLocationsStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassSampleLocationsBeginInfoEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassSampleLocationsBeginInfoEXT.html

"""
struct _RenderPassSampleLocationsBeginInfoEXT <: VulkanStruct{true}
    vks::VkRenderPassSampleLocationsBeginInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassSampleLocationsEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassSampleLocationsEXT.html

"""
struct _SubpassSampleLocationsEXT <: VulkanStruct{false}
    vks::VkSubpassSampleLocationsEXT
end

"""
Minimalistic wrapper for VkAttachmentSampleLocationsEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentSampleLocationsEXT.html

"""
struct _AttachmentSampleLocationsEXT <: VulkanStruct{false}
    vks::VkAttachmentSampleLocationsEXT
end

"""
Minimalistic wrapper for VkSampleLocationsInfoEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSampleLocationsInfoEXT.html

"""
struct _SampleLocationsInfoEXT <: VulkanStruct{true}
    vks::VkSampleLocationsInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSampleLocationEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSampleLocationEXT.html

"""
struct _SampleLocationEXT <: VulkanStruct{false}
    vks::VkSampleLocationEXT
end

"""
Minimalistic wrapper for VkPipelineCoverageToColorStateCreateInfoNV.

Extension: VK_NV_fragment_coverage_to_color

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageToColorStateCreateInfoNV.html

"""
struct _PipelineCoverageToColorStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineCoverageToColorStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceQueueInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueInfo2.html

"""
struct _DeviceQueueInfo2 <: VulkanStruct{true}
    vks::VkDeviceQueueInfo2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceProtectedMemoryFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProtectedMemoryFeatures.html

"""
struct _PhysicalDeviceProtectedMemoryFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceProtectedMemoryFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkProtectedSubmitInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkProtectedSubmitInfo.html

"""
struct _ProtectedSubmitInfo <: VulkanStruct{true}
    vks::VkProtectedSubmitInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceSamplerYcbcrConversionFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeatures.html

"""
struct _PhysicalDeviceSamplerYcbcrConversionFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceSamplerYcbcrConversionFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImagePlaneMemoryRequirementsInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImagePlaneMemoryRequirementsInfo.html

"""
struct _ImagePlaneMemoryRequirementsInfo <: VulkanStruct{true}
    vks::VkImagePlaneMemoryRequirementsInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBindImagePlaneMemoryInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImagePlaneMemoryInfo.html

"""
struct _BindImagePlaneMemoryInfo <: VulkanStruct{true}
    vks::VkBindImagePlaneMemoryInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSamplerYcbcrConversionCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionCreateInfo.html

"""
struct _SamplerYcbcrConversionCreateInfo <: VulkanStruct{true}
    vks::VkSamplerYcbcrConversionCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineTessellationDomainOriginStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfo.html

"""
struct _PipelineTessellationDomainOriginStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineTessellationDomainOriginStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageViewUsageCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewUsageCreateInfo.html

"""
struct _ImageViewUsageCreateInfo <: VulkanStruct{true}
    vks::VkImageViewUsageCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.html

"""
struct _PhysicalDeviceShaderSubgroupExtendedTypesFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevice16BitStorageFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevice16BitStorageFeatures.html

"""
struct _PhysicalDevice16BitStorageFeatures <: VulkanStruct{true}
    vks::VkPhysicalDevice16BitStorageFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassInputAttachmentAspectCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html

"""
struct _RenderPassInputAttachmentAspectCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassInputAttachmentAspectCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkInputAttachmentAspectReference.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInputAttachmentAspectReference.html

"""
struct _InputAttachmentAspectReference <: VulkanStruct{false}
    vks::VkInputAttachmentAspectReference
end

"""
Minimalistic wrapper for VkPipelineDiscardRectangleStateCreateInfoEXT.

Extension: VK_EXT_discard_rectangles

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDiscardRectangleStateCreateInfoEXT.html

"""
struct _PipelineDiscardRectangleStateCreateInfoEXT <: VulkanStruct{true}
    vks::VkPipelineDiscardRectangleStateCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineViewportSwizzleStateCreateInfoNV.

Extension: VK_NV_viewport_swizzle

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportSwizzleStateCreateInfoNV.html

"""
struct _PipelineViewportSwizzleStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportSwizzleStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkViewportSwizzleNV.

Extension: VK_NV_viewport_swizzle

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewportSwizzleNV.html

"""
struct _ViewportSwizzleNV <: VulkanStruct{false}
    vks::VkViewportSwizzleNV
end

"""
Minimalistic wrapper for VkPipelineViewportWScalingStateCreateInfoNV.

Extension: VK_NV_clip_space_w_scaling

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportWScalingStateCreateInfoNV.html

"""
struct _PipelineViewportWScalingStateCreateInfoNV <: VulkanStruct{true}
    vks::VkPipelineViewportWScalingStateCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkViewportWScalingNV.

Extension: VK_NV_clip_space_w_scaling

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewportWScalingNV.html

"""
struct _ViewportWScalingNV <: VulkanStruct{false}
    vks::VkViewportWScalingNV
end

"""
Minimalistic wrapper for VkPresentTimeGOOGLE.

Extension: VK_GOOGLE_display_timing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentTimeGOOGLE.html

"""
struct _PresentTimeGOOGLE <: VulkanStruct{false}
    vks::VkPresentTimeGOOGLE
end

"""
Minimalistic wrapper for VkPresentTimesInfoGOOGLE.

Extension: VK_GOOGLE_display_timing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentTimesInfoGOOGLE.html

"""
struct _PresentTimesInfoGOOGLE <: VulkanStruct{true}
    vks::VkPresentTimesInfoGOOGLE
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPastPresentationTimingGOOGLE.

Extension: VK_GOOGLE_display_timing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPastPresentationTimingGOOGLE.html

"""
struct PastPresentationTimingGOOGLE <: ReturnedOnly
    present_id::UInt32
    desired_present_time::UInt64
    actual_present_time::UInt64
    earliest_present_time::UInt64
    present_margin::UInt64
end

"""
Minimalistic wrapper for VkRefreshCycleDurationGOOGLE.

Extension: VK_GOOGLE_display_timing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRefreshCycleDurationGOOGLE.html

"""
struct RefreshCycleDurationGOOGLE <: ReturnedOnly
    refresh_duration::UInt64
end

"""
Minimalistic wrapper for VkSwapchainDisplayNativeHdrCreateInfoAMD.

Extension: VK_AMD_display_native_hdr

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainDisplayNativeHdrCreateInfoAMD.html

"""
struct _SwapchainDisplayNativeHdrCreateInfoAMD <: VulkanStruct{true}
    vks::VkSwapchainDisplayNativeHdrCreateInfoAMD
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkHdrMetadataEXT.

Extension: VK_EXT_hdr_metadata

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkHdrMetadataEXT.html

"""
struct _HdrMetadataEXT <: VulkanStruct{true}
    vks::VkHdrMetadataEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkXYColorEXT.

Extension: VK_EXT_hdr_metadata

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkXYColorEXT.html

"""
struct _XYColorEXT <: VulkanStruct{false}
    vks::VkXYColorEXT
end

"""
Minimalistic wrapper for VkDescriptorUpdateTemplateEntry.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateEntry.html

"""
struct _DescriptorUpdateTemplateEntry <: VulkanStruct{false}
    vks::VkDescriptorUpdateTemplateEntry
end

"""
Minimalistic wrapper for VkDeviceGroupSwapchainCreateInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSwapchainCreateInfoKHR.html

"""
struct _DeviceGroupSwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkDeviceGroupSwapchainCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupDeviceCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupDeviceCreateInfo.html

"""
struct _DeviceGroupDeviceCreateInfo <: VulkanStruct{true}
    vks::VkDeviceGroupDeviceCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupPresentInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupPresentInfoKHR.html

"""
struct _DeviceGroupPresentInfoKHR <: VulkanStruct{true}
    vks::VkDeviceGroupPresentInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupBindSparseInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupBindSparseInfo.html

"""
struct _DeviceGroupBindSparseInfo <: VulkanStruct{true}
    vks::VkDeviceGroupBindSparseInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupSubmitInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSubmitInfo.html

"""
struct _DeviceGroupSubmitInfo <: VulkanStruct{true}
    vks::VkDeviceGroupSubmitInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupCommandBufferBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupCommandBufferBeginInfo.html

"""
struct _DeviceGroupCommandBufferBeginInfo <: VulkanStruct{true}
    vks::VkDeviceGroupCommandBufferBeginInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceGroupRenderPassBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html

"""
struct _DeviceGroupRenderPassBeginInfo <: VulkanStruct{true}
    vks::VkDeviceGroupRenderPassBeginInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBindImageMemoryDeviceGroupInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryDeviceGroupInfo.html

"""
struct _BindImageMemoryDeviceGroupInfo <: VulkanStruct{true}
    vks::VkBindImageMemoryDeviceGroupInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBindBufferMemoryDeviceGroupInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryDeviceGroupInfo.html

"""
struct _BindBufferMemoryDeviceGroupInfo <: VulkanStruct{true}
    vks::VkBindBufferMemoryDeviceGroupInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryAllocateFlagsInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateFlagsInfo.html

"""
struct _MemoryAllocateFlagsInfo <: VulkanStruct{true}
    vks::VkMemoryAllocateFlagsInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSwapchainCounterCreateInfoEXT.

Extension: VK_EXT_display_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainCounterCreateInfoEXT.html

"""
struct _SwapchainCounterCreateInfoEXT <: VulkanStruct{true}
    vks::VkSwapchainCounterCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDisplayEventInfoEXT.

Extension: VK_EXT_display_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayEventInfoEXT.html

"""
struct _DisplayEventInfoEXT <: VulkanStruct{true}
    vks::VkDisplayEventInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceEventInfoEXT.

Extension: VK_EXT_display_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceEventInfoEXT.html

"""
struct _DeviceEventInfoEXT <: VulkanStruct{true}
    vks::VkDeviceEventInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDisplayPowerInfoEXT.

Extension: VK_EXT_display_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPowerInfoEXT.html

"""
struct _DisplayPowerInfoEXT <: VulkanStruct{true}
    vks::VkDisplayPowerInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassMultiviewCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassMultiviewCreateInfo.html

"""
struct _RenderPassMultiviewCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassMultiviewCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceMultiviewFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewFeatures.html

"""
struct _PhysicalDeviceMultiviewFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceMultiviewFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportFenceWin32HandleInfoKHR.

Extension: VK_KHR_external_fence_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportFenceWin32HandleInfoKHR.html

"""
struct _ExportFenceWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportFenceWin32HandleInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportFenceCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportFenceCreateInfo.html

"""
struct _ExportFenceCreateInfo <: VulkanStruct{true}
    vks::VkExportFenceCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExternalFenceInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalFenceInfo.html

"""
struct _PhysicalDeviceExternalFenceInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalFenceInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkD3D12FenceSubmitInfoKHR.

Extension: VK_KHR_external_semaphore_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkD3D12FenceSubmitInfoKHR.html

"""
struct _D3D12FenceSubmitInfoKHR <: VulkanStruct{true}
    vks::VkD3D12FenceSubmitInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportSemaphoreWin32HandleInfoKHR.

Extension: VK_KHR_external_semaphore_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportSemaphoreWin32HandleInfoKHR.html

"""
struct _ExportSemaphoreWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportSemaphoreWin32HandleInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportSemaphoreCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportSemaphoreCreateInfo.html

"""
struct _ExportSemaphoreCreateInfo <: VulkanStruct{true}
    vks::VkExportSemaphoreCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExternalSemaphoreInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfo.html

"""
struct _PhysicalDeviceExternalSemaphoreInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalSemaphoreInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWin32KeyedMutexAcquireReleaseInfoKHR.

Extension: VK_KHR_win32_keyed_mutex

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoKHR.html

"""
struct _Win32KeyedMutexAcquireReleaseInfoKHR <: VulkanStruct{true}
    vks::VkWin32KeyedMutexAcquireReleaseInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImportMemoryFdInfoKHR.

Extension: VK_KHR_external_memory_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryFdInfoKHR.html

"""
struct _ImportMemoryFdInfoKHR <: VulkanStruct{true}
    vks::VkImportMemoryFdInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportMemoryWin32HandleInfoKHR.

Extension: VK_KHR_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryWin32HandleInfoKHR.html

"""
struct _ExportMemoryWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkExportMemoryWin32HandleInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImportMemoryWin32HandleInfoKHR.

Extension: VK_KHR_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryWin32HandleInfoKHR.html

"""
struct _ImportMemoryWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportMemoryWin32HandleInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportMemoryAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryAllocateInfo.html

"""
struct _ExportMemoryAllocateInfo <: VulkanStruct{true}
    vks::VkExportMemoryAllocateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExternalMemoryBufferCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryBufferCreateInfo.html

"""
struct _ExternalMemoryBufferCreateInfo <: VulkanStruct{true}
    vks::VkExternalMemoryBufferCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExternalMemoryImageCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryImageCreateInfo.html

"""
struct _ExternalMemoryImageCreateInfo <: VulkanStruct{true}
    vks::VkExternalMemoryImageCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExternalBufferInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html

"""
struct _PhysicalDeviceExternalBufferInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalBufferInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceExternalImageFormatInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfo.html

"""
struct _PhysicalDeviceExternalImageFormatInfo <: VulkanStruct{true}
    vks::VkPhysicalDeviceExternalImageFormatInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceVariablePointersFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVariablePointersFeatures.html

"""
struct _PhysicalDeviceVariablePointersFeatures <: VulkanStruct{true}
    vks::VkPhysicalDeviceVariablePointersFeatures
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRectLayerKHR.

Extension: VK_KHR_incremental_present

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRectLayerKHR.html

"""
struct _RectLayerKHR <: VulkanStruct{false}
    vks::VkRectLayerKHR
end

"""
Minimalistic wrapper for VkPresentRegionKHR.

Extension: VK_KHR_incremental_present

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentRegionKHR.html

"""
struct _PresentRegionKHR <: VulkanStruct{true}
    vks::VkPresentRegionKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPresentRegionsKHR.

Extension: VK_KHR_incremental_present

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentRegionsKHR.html

"""
struct _PresentRegionsKHR <: VulkanStruct{true}
    vks::VkPresentRegionsKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkConformanceVersion.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkConformanceVersion.html

"""
struct _ConformanceVersion <: VulkanStruct{false}
    vks::VkConformanceVersion
end

"""
Minimalistic wrapper for VkPhysicalDeviceSparseImageFormatInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2.html

"""
struct _PhysicalDeviceSparseImageFormatInfo2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceSparseImageFormatInfo2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceImageFormatInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageFormatInfo2.html

"""
struct _PhysicalDeviceImageFormatInfo2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceImageFormatInfo2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFeatures2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures2.html

"""
struct _PhysicalDeviceFeatures2 <: VulkanStruct{true}
    vks::VkPhysicalDeviceFeatures2
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkIndirectCommandsLayoutCreateInfoNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsLayoutCreateInfoNV.html

"""
struct _IndirectCommandsLayoutCreateInfoNV <: VulkanStruct{true}
    vks::VkIndirectCommandsLayoutCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSetStateFlagsIndirectCommandNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSetStateFlagsIndirectCommandNV.html

"""
struct _SetStateFlagsIndirectCommandNV <: VulkanStruct{false}
    vks::VkSetStateFlagsIndirectCommandNV
end

"""
Minimalistic wrapper for VkBindVertexBufferIndirectCommandNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindVertexBufferIndirectCommandNV.html

"""
struct _BindVertexBufferIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindVertexBufferIndirectCommandNV
end

"""
Minimalistic wrapper for VkBindIndexBufferIndirectCommandNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindIndexBufferIndirectCommandNV.html

"""
struct _BindIndexBufferIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindIndexBufferIndirectCommandNV
end

"""
Minimalistic wrapper for VkBindShaderGroupIndirectCommandNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindShaderGroupIndirectCommandNV.html

"""
struct _BindShaderGroupIndirectCommandNV <: VulkanStruct{false}
    vks::VkBindShaderGroupIndirectCommandNV
end

"""
Minimalistic wrapper for VkGraphicsPipelineShaderGroupsCreateInfoNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineShaderGroupsCreateInfoNV.html

"""
struct _GraphicsPipelineShaderGroupsCreateInfoNV <: VulkanStruct{true}
    vks::VkGraphicsPipelineShaderGroupsCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkGraphicsShaderGroupCreateInfoNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsShaderGroupCreateInfoNV.html

"""
struct _GraphicsShaderGroupCreateInfoNV <: VulkanStruct{true}
    vks::VkGraphicsShaderGroupCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDevicePrivateDataFeaturesEXT.

Extension: VK_EXT_private_data

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePrivateDataFeaturesEXT.html

"""
struct _PhysicalDevicePrivateDataFeaturesEXT <: VulkanStruct{true}
    vks::VkPhysicalDevicePrivateDataFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPrivateDataSlotCreateInfoEXT.

Extension: VK_EXT_private_data

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPrivateDataSlotCreateInfoEXT.html

"""
struct _PrivateDataSlotCreateInfoEXT <: VulkanStruct{true}
    vks::VkPrivateDataSlotCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDevicePrivateDataCreateInfoEXT.

Extension: VK_EXT_private_data

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDevicePrivateDataCreateInfoEXT.html

"""
struct _DevicePrivateDataCreateInfoEXT <: VulkanStruct{true}
    vks::VkDevicePrivateDataCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.html

"""
struct _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV <: VulkanStruct{true}
    vks::VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWin32KeyedMutexAcquireReleaseInfoNV.

Extension: VK_NV_win32_keyed_mutex

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoNV.html

"""
struct _Win32KeyedMutexAcquireReleaseInfoNV <: VulkanStruct{true}
    vks::VkWin32KeyedMutexAcquireReleaseInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportMemoryWin32HandleInfoNV.

Extension: VK_NV_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryWin32HandleInfoNV.html

"""
struct _ExportMemoryWin32HandleInfoNV <: VulkanStruct{true}
    vks::VkExportMemoryWin32HandleInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImportMemoryWin32HandleInfoNV.

Extension: VK_NV_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryWin32HandleInfoNV.html

"""
struct _ImportMemoryWin32HandleInfoNV <: VulkanStruct{true}
    vks::VkImportMemoryWin32HandleInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExportMemoryAllocateInfoNV.

Extension: VK_NV_external_memory

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryAllocateInfoNV.html

"""
struct _ExportMemoryAllocateInfoNV <: VulkanStruct{true}
    vks::VkExportMemoryAllocateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkExternalMemoryImageCreateInfoNV.

Extension: VK_NV_external_memory

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryImageCreateInfoNV.html

"""
struct _ExternalMemoryImageCreateInfoNV <: VulkanStruct{true}
    vks::VkExternalMemoryImageCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDedicatedAllocationBufferCreateInfoNV.

Extension: VK_NV_dedicated_allocation

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationBufferCreateInfoNV.html

"""
struct _DedicatedAllocationBufferCreateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationBufferCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDedicatedAllocationImageCreateInfoNV.

Extension: VK_NV_dedicated_allocation

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationImageCreateInfoNV.html

"""
struct _DedicatedAllocationImageCreateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationImageCreateInfoNV
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugMarkerMarkerInfoEXT.

Extension: VK_EXT_debug_marker

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerMarkerInfoEXT.html

"""
struct _DebugMarkerMarkerInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerMarkerInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugMarkerObjectTagInfoEXT.

Extension: VK_EXT_debug_marker

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerObjectTagInfoEXT.html

"""
struct _DebugMarkerObjectTagInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerObjectTagInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugMarkerObjectNameInfoEXT.

Extension: VK_EXT_debug_marker

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerObjectNameInfoEXT.html

"""
struct _DebugMarkerObjectNameInfoEXT <: VulkanStruct{true}
    vks::VkDebugMarkerObjectNameInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationStateRasterizationOrderAMD.

Extension: VK_AMD_rasterization_order

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateRasterizationOrderAMD.html

"""
struct _PipelineRasterizationStateRasterizationOrderAMD <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateRasterizationOrderAMD
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkValidationFeaturesEXT.

Extension: VK_EXT_validation_features

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationFeaturesEXT.html

"""
struct _ValidationFeaturesEXT <: VulkanStruct{true}
    vks::VkValidationFeaturesEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkValidationFlagsEXT.

Extension: VK_EXT_validation_flags

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationFlagsEXT.html

"""
struct _ValidationFlagsEXT <: VulkanStruct{true}
    vks::VkValidationFlagsEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDebugReportCallbackCreateInfoEXT.

Extension: VK_EXT_debug_report

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugReportCallbackCreateInfoEXT.html

"""
struct _DebugReportCallbackCreateInfoEXT <: VulkanStruct{true}
    vks::VkDebugReportCallbackCreateInfoEXT
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPresentInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentInfoKHR.html

"""
struct _PresentInfoKHR <: VulkanStruct{true}
    vks::VkPresentInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkWin32SurfaceCreateInfoKHR.

Extension: VK_KHR_win32_surface

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32SurfaceCreateInfoKHR.html

"""
struct _Win32SurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkWin32SurfaceCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDisplayPresentInfoKHR.

Extension: VK_KHR_display_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPresentInfoKHR.html

"""
struct _DisplayPresentInfoKHR <: VulkanStruct{true}
    vks::VkDisplayPresentInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDisplayModeCreateInfoKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeCreateInfoKHR.html

"""
struct _DisplayModeCreateInfoKHR <: VulkanStruct{true}
    vks::VkDisplayModeCreateInfoKHR
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDisplayModeParametersKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeParametersKHR.html

"""
struct _DisplayModeParametersKHR <: VulkanStruct{false}
    vks::VkDisplayModeParametersKHR
end

"""
Minimalistic wrapper for VkSubmitInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubmitInfo.html

"""
struct _SubmitInfo <: VulkanStruct{true}
    vks::VkSubmitInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDispatchIndirectCommand.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDispatchIndirectCommand.html

"""
struct _DispatchIndirectCommand <: VulkanStruct{false}
    vks::VkDispatchIndirectCommand
end

"""
Minimalistic wrapper for VkDrawIndexedIndirectCommand.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndexedIndirectCommand.html

"""
struct _DrawIndexedIndirectCommand <: VulkanStruct{false}
    vks::VkDrawIndexedIndirectCommand
end

"""
Minimalistic wrapper for VkDrawIndirectCommand.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrawIndirectCommand.html

"""
struct _DrawIndirectCommand <: VulkanStruct{false}
    vks::VkDrawIndirectCommand
end

"""
Minimalistic wrapper for VkQueryPoolCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolCreateInfo.html

"""
struct _QueryPoolCreateInfo <: VulkanStruct{true}
    vks::VkQueryPoolCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSemaphoreCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreCreateInfo.html

"""
struct _SemaphoreCreateInfo <: VulkanStruct{true}
    vks::VkSemaphoreCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPhysicalDeviceSparseProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSparseProperties.html

"""
struct PhysicalDeviceSparseProperties <: ReturnedOnly
    residency_standard_2_d_block_shape::Bool
    residency_standard_2_d_multisample_block_shape::Bool
    residency_standard_3_d_block_shape::Bool
    residency_aligned_mip_size::Bool
    residency_non_resident_strict::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceFeatures.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFeatures.html

"""
struct _PhysicalDeviceFeatures <: VulkanStruct{false}
    vks::VkPhysicalDeviceFeatures
end

"""
Minimalistic wrapper for VkFenceCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceCreateInfo.html

"""
struct _FenceCreateInfo <: VulkanStruct{true}
    vks::VkFenceCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkEventCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkEventCreateInfo.html

"""
struct _EventCreateInfo <: VulkanStruct{true}
    vks::VkEventCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkRenderPassCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo.html

"""
struct _RenderPassCreateInfo <: VulkanStruct{true}
    vks::VkRenderPassCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSubpassDependency.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency.html

"""
struct _SubpassDependency <: VulkanStruct{false}
    vks::VkSubpassDependency
end

"""
Minimalistic wrapper for VkSubpassDescription.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription.html

"""
struct _SubpassDescription <: VulkanStruct{true}
    vks::VkSubpassDescription
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAttachmentReference.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference.html

"""
struct _AttachmentReference <: VulkanStruct{false}
    vks::VkAttachmentReference
end

"""
Minimalistic wrapper for VkAttachmentDescription.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription.html

"""
struct _AttachmentDescription <: VulkanStruct{false}
    vks::VkAttachmentDescription
end

"""
Minimalistic wrapper for VkClearAttachment.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearAttachment.html

"""
struct _ClearAttachment <: VulkanStruct{false}
    vks::VkClearAttachment
end

"""
Minimalistic wrapper for VkClearDepthStencilValue.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearDepthStencilValue.html

"""
struct _ClearDepthStencilValue <: VulkanStruct{false}
    vks::VkClearDepthStencilValue
end

"""
Minimalistic wrapper for VkCommandBufferBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferBeginInfo.html

"""
struct _CommandBufferBeginInfo <: VulkanStruct{true}
    vks::VkCommandBufferBeginInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkCommandPoolCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandPoolCreateInfo.html

"""
struct _CommandPoolCreateInfo <: VulkanStruct{true}
    vks::VkCommandPoolCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSamplerCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerCreateInfo.html

"""
struct _SamplerCreateInfo <: VulkanStruct{true}
    vks::VkSamplerCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineLayoutCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineLayoutCreateInfo.html

"""
struct _PipelineLayoutCreateInfo <: VulkanStruct{true}
    vks::VkPipelineLayoutCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPushConstantRange.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPushConstantRange.html

"""
struct _PushConstantRange <: VulkanStruct{false}
    vks::VkPushConstantRange
end

"""
Minimalistic wrapper for VkPipelineCacheCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCacheCreateInfo.html

"""
struct _PipelineCacheCreateInfo <: VulkanStruct{true}
    vks::VkPipelineCacheCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineDepthStencilStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html

"""
struct _PipelineDepthStencilStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineDepthStencilStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkStencilOpState.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkStencilOpState.html

"""
struct _StencilOpState <: VulkanStruct{false}
    vks::VkStencilOpState
end

"""
Minimalistic wrapper for VkPipelineDynamicStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDynamicStateCreateInfo.html

"""
struct _PipelineDynamicStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineDynamicStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineColorBlendStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html

"""
struct _PipelineColorBlendStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineColorBlendStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineColorBlendAttachmentState.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendAttachmentState.html

"""
struct _PipelineColorBlendAttachmentState <: VulkanStruct{false}
    vks::VkPipelineColorBlendAttachmentState
end

"""
Minimalistic wrapper for VkPipelineMultisampleStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html

"""
struct _PipelineMultisampleStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineMultisampleStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineRasterizationStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html

"""
struct _PipelineRasterizationStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineRasterizationStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineViewportStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportStateCreateInfo.html

"""
struct _PipelineViewportStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineViewportStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineTessellationStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationStateCreateInfo.html

"""
struct _PipelineTessellationStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineTessellationStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineInputAssemblyStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html

"""
struct _PipelineInputAssemblyStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineInputAssemblyStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkPipelineVertexInputStateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html

"""
struct _PipelineVertexInputStateCreateInfo <: VulkanStruct{true}
    vks::VkPipelineVertexInputStateCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkVertexInputAttributeDescription.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputAttributeDescription.html

"""
struct _VertexInputAttributeDescription <: VulkanStruct{false}
    vks::VkVertexInputAttributeDescription
end

"""
Minimalistic wrapper for VkVertexInputBindingDescription.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDescription.html

"""
struct _VertexInputBindingDescription <: VulkanStruct{false}
    vks::VkVertexInputBindingDescription
end

"""
Minimalistic wrapper for VkSpecializationInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationInfo.html

"""
struct _SpecializationInfo <: VulkanStruct{true}
    vks::VkSpecializationInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkSpecializationMapEntry.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSpecializationMapEntry.html

"""
struct _SpecializationMapEntry <: VulkanStruct{false}
    vks::VkSpecializationMapEntry
end

"""
Minimalistic wrapper for VkDescriptorPoolCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolCreateInfo.html

"""
struct _DescriptorPoolCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorPoolCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDescriptorPoolSize.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolSize.html

"""
struct _DescriptorPoolSize <: VulkanStruct{false}
    vks::VkDescriptorPoolSize
end

"""
Minimalistic wrapper for VkDescriptorSetLayoutCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html

"""
struct _DescriptorSetLayoutCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDescriptorSetLayoutBinding.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBinding.html

"""
struct _DescriptorSetLayoutBinding <: VulkanStruct{true}
    vks::VkDescriptorSetLayoutBinding
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkShaderModuleCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderModuleCreateInfo.html

"""
struct _ShaderModuleCreateInfo <: VulkanStruct{true}
    vks::VkShaderModuleCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageResolve.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageResolve.html

"""
struct _ImageResolve <: VulkanStruct{false}
    vks::VkImageResolve
end

"""
Minimalistic wrapper for VkBufferImageCopy.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferImageCopy.html

"""
struct _BufferImageCopy <: VulkanStruct{false}
    vks::VkBufferImageCopy
end

"""
Minimalistic wrapper for VkImageBlit.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageBlit.html

"""
struct _ImageBlit <: VulkanStruct{false}
    vks::VkImageBlit
end

"""
Minimalistic wrapper for VkImageCopy.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCopy.html

"""
struct _ImageCopy <: VulkanStruct{false}
    vks::VkImageCopy
end

"""
Minimalistic wrapper for VkBindSparseInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindSparseInfo.html

"""
struct _BindSparseInfo <: VulkanStruct{true}
    vks::VkBindSparseInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBufferCopy.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCopy.html

"""
struct _BufferCopy <: VulkanStruct{false}
    vks::VkBufferCopy
end

"""
Minimalistic wrapper for VkSubresourceLayout.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubresourceLayout.html

"""
struct SubresourceLayout <: ReturnedOnly
    offset::UInt64
    size::UInt64
    row_pitch::UInt64
    array_pitch::UInt64
    depth_pitch::UInt64
end

"""
High-level wrapper for VkImageDrmFormatModifierExplicitCreateInfoEXT.

Extension: VK\\_EXT\\_image\\_drm\\_format\\_modifier

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageDrmFormatModifierExplicitCreateInfoEXT.html)

"""
@auto_hash_equals struct ImageDrmFormatModifierExplicitCreateInfoEXT <: HighLevelStruct
        next::Any
        drm_format_modifier::UInt64
        plane_layouts::Vector{SubresourceLayout}
    end

"""
Minimalistic wrapper for VkImageCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCreateInfo.html

"""
struct _ImageCreateInfo <: VulkanStruct{true}
    vks::VkImageCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryBarrier.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryBarrier.html

"""
struct _MemoryBarrier <: VulkanStruct{true}
    vks::VkMemoryBarrier
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkImageSubresourceRange.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceRange.html

"""
struct _ImageSubresourceRange <: VulkanStruct{false}
    vks::VkImageSubresourceRange
end

"""
Minimalistic wrapper for VkImageSubresourceLayers.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceLayers.html

"""
struct _ImageSubresourceLayers <: VulkanStruct{false}
    vks::VkImageSubresourceLayers
end

"""
Minimalistic wrapper for VkImageSubresource.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresource.html

"""
struct _ImageSubresource <: VulkanStruct{false}
    vks::VkImageSubresource
end

"""
Minimalistic wrapper for VkBufferCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCreateInfo.html

"""
struct _BufferCreateInfo <: VulkanStruct{true}
    vks::VkBufferCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkMemoryRequirements.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryRequirements.html

"""
struct MemoryRequirements <: ReturnedOnly
    size::UInt64
    alignment::UInt64
    memory_type_bits::UInt32
end

"""
Minimalistic wrapper for VkMemoryAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateInfo.html

"""
struct _MemoryAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryAllocateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkInstanceCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInstanceCreateInfo.html

"""
struct _InstanceCreateInfo <: VulkanStruct{true}
    vks::VkInstanceCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceCreateInfo.html

"""
struct _DeviceCreateInfo <: VulkanStruct{true}
    vks::VkDeviceCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkDeviceQueueCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueCreateInfo.html

"""
struct _DeviceQueueCreateInfo <: VulkanStruct{true}
    vks::VkDeviceQueueCreateInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkAllocationCallbacks.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAllocationCallbacks.html

"""
struct _AllocationCallbacks <: VulkanStruct{true}
    vks::VkAllocationCallbacks
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkApplicationInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkApplicationInfo.html

"""
struct _ApplicationInfo <: VulkanStruct{true}
    vks::VkApplicationInfo
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkLayerProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkLayerProperties.html

"""
struct LayerProperties <: ReturnedOnly
    layer_name::String
    spec_version::VersionNumber
    implementation_version::VersionNumber
    description::String
end

"""
Minimalistic wrapper for VkExtensionProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtensionProperties.html

"""
struct ExtensionProperties <: ReturnedOnly
    extension_name::String
    spec_version::VersionNumber
end

"""
Minimalistic wrapper for VkComponentMapping.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComponentMapping.html

"""
struct _ComponentMapping <: VulkanStruct{false}
    vks::VkComponentMapping
end

"""
Minimalistic wrapper for VkClearRect.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearRect.html

"""
struct _ClearRect <: VulkanStruct{false}
    vks::VkClearRect
end

"""
Minimalistic wrapper for VkRect2D.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRect2D.html

"""
struct _Rect2D <: VulkanStruct{false}
    vks::VkRect2D
end

"""
Minimalistic wrapper for VkViewport.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewport.html

"""
struct _Viewport <: VulkanStruct{false}
    vks::VkViewport
end

"""
Minimalistic wrapper for VkExtent3D.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent3D.html

"""
struct _Extent3D <: VulkanStruct{false}
    vks::VkExtent3D
end

"""
Minimalistic wrapper for VkExtent2D.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExtent2D.html

"""
struct _Extent2D <: VulkanStruct{false}
    vks::VkExtent2D
end

"""
Minimalistic wrapper for VkOffset3D.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset3D.html

"""
struct _Offset3D <: VulkanStruct{false}
    vks::VkOffset3D
end

"""
Minimalistic wrapper for VkOffset2D.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkOffset2D.html

"""
struct _Offset2D <: VulkanStruct{false}
    vks::VkOffset2D
end

"""
Minimalistic wrapper for VkBaseInStructure.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseInStructure.html

"""
struct _BaseInStructure <: VulkanStruct{true}
    vks::VkBaseInStructure
    deps::Vector{Any}
end

"""
Minimalistic wrapper for VkBaseOutStructure.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBaseOutStructure.html

"""
struct _BaseOutStructure <: VulkanStruct{true}
    vks::VkBaseOutStructure
    deps::Vector{Any}
end

"""

"""
mutable struct Instance <: Handle
    vks::VkInstance
    refcount::RefCounter
    destructor
    Instance(vks::VkInstance, refcount::RefCounter) = new(vks, refcount, undef)
end

"""

"""
mutable struct DebugUtilsMessengerEXT <: Handle
    vks::VkDebugUtilsMessengerEXT
    instance::Instance
    refcount::RefCounter
    destructor
    DebugUtilsMessengerEXT(vks::VkDebugUtilsMessengerEXT, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

"""

"""
mutable struct DebugReportCallbackEXT <: Handle
    vks::VkDebugReportCallbackEXT
    instance::Instance
    refcount::RefCounter
    destructor
    DebugReportCallbackEXT(vks::VkDebugReportCallbackEXT, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

"""

"""
mutable struct SurfaceKHR <: Handle
    vks::VkSurfaceKHR
    instance::Instance
    refcount::RefCounter
    destructor
    SurfaceKHR(vks::VkSurfaceKHR, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

"""
High-level wrapper for VkPhysicalDeviceSurfaceInfo2KHR.

Extension: VK\\_KHR\\_get\\_surface\\_capabilities2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSurfaceInfo2KHR.html)

"""
@auto_hash_equals struct PhysicalDeviceSurfaceInfo2KHR <: HighLevelStruct
        next::Any
        surface::SurfaceKHR
    end

"""
Minimalistic wrapper for VkPhysicalDeviceSurfaceInfo2KHR.

Extension: VK_KHR_get_surface_capabilities2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSurfaceInfo2KHR.html

"""
struct _PhysicalDeviceSurfaceInfo2KHR <: VulkanStruct{true}
    vks::VkPhysicalDeviceSurfaceInfo2KHR
    deps::Vector{Any}
    surface::SurfaceKHR
end

"""

"""
mutable struct SwapchainKHR <: Handle
    vks::VkSwapchainKHR
    surface::SurfaceKHR
    refcount::RefCounter
    destructor
    SwapchainKHR(vks::VkSwapchainKHR, surface::SurfaceKHR, refcount::RefCounter) = new(vks, surface, refcount, undef)
end

"""
High-level wrapper for VkBindImageMemorySwapchainInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemorySwapchainInfoKHR.html)

"""
@auto_hash_equals struct BindImageMemorySwapchainInfoKHR <: HighLevelStruct
        next::Any
        swapchain::SwapchainKHR
        image_index::UInt32
    end

"""
High-level wrapper for VkImageSwapchainCreateInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSwapchainCreateInfoKHR.html)

"""
@auto_hash_equals struct ImageSwapchainCreateInfoKHR <: HighLevelStruct
        next::Any
        swapchain::OptionalPtr{SwapchainKHR}
    end

"""
Minimalistic wrapper for VkBindImageMemorySwapchainInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemorySwapchainInfoKHR.html

"""
struct _BindImageMemorySwapchainInfoKHR <: VulkanStruct{true}
    vks::VkBindImageMemorySwapchainInfoKHR
    deps::Vector{Any}
    swapchain::SwapchainKHR
end

"""
Minimalistic wrapper for VkImageSwapchainCreateInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSwapchainCreateInfoKHR.html

"""
struct _ImageSwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkImageSwapchainCreateInfoKHR
    deps::Vector{Any}
    swapchain::OptionalPtr{SwapchainKHR}
end

"""
Minimalistic wrapper for VkSwapchainCreateInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainCreateInfoKHR.html

"""
struct _SwapchainCreateInfoKHR <: VulkanStruct{true}
    vks::VkSwapchainCreateInfoKHR
    deps::Vector{Any}
    surface::SurfaceKHR
    old_swapchain::OptionalPtr{SwapchainKHR}
end

"""

"""
mutable struct PhysicalDevice <: Handle
    vks::VkPhysicalDevice
    instance::Instance
    refcount::RefCounter
    destructor
    PhysicalDevice(vks::VkPhysicalDevice, instance::Instance, refcount::RefCounter) = new(vks, instance, refcount, undef)
end

"""
High-level wrapper for VkDeviceGroupDeviceCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupDeviceCreateInfo.html)

"""
@auto_hash_equals struct DeviceGroupDeviceCreateInfo <: HighLevelStruct
        next::Any
        physical_devices::Vector{PhysicalDevice}
    end

"""

"""
mutable struct DisplayKHR <: Handle
    vks::VkDisplayKHR
    physical_device::PhysicalDevice
    refcount::RefCounter
    destructor
    DisplayKHR(vks::VkDisplayKHR, physical_device::PhysicalDevice, refcount::RefCounter) = new(vks, physical_device, refcount, undef)
end

"""
Minimalistic wrapper for VkDisplayPlanePropertiesKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlanePropertiesKHR.html

"""
struct DisplayPlanePropertiesKHR <: ReturnedOnly
    current_display::DisplayKHR
    current_stack_index::UInt32
end

"""

"""
mutable struct DisplayModeKHR <: Handle
    vks::VkDisplayModeKHR
    display::DisplayKHR
    refcount::RefCounter
    destructor
    DisplayModeKHR(vks::VkDisplayModeKHR, display::DisplayKHR, refcount::RefCounter) = new(vks, display, refcount, undef)
end

"""
High-level wrapper for VkDisplayPlaneInfo2KHR.

Extension: VK\\_KHR\\_get\\_display\\_properties2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneInfo2KHR.html)

"""
@auto_hash_equals struct DisplayPlaneInfo2KHR <: HighLevelStruct
        next::Any
        mode::DisplayModeKHR
        plane_index::UInt32
    end

"""
Minimalistic wrapper for VkDisplayPlaneInfo2KHR.

Extension: VK_KHR_get_display_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneInfo2KHR.html

"""
struct _DisplayPlaneInfo2KHR <: VulkanStruct{true}
    vks::VkDisplayPlaneInfo2KHR
    deps::Vector{Any}
    mode::DisplayModeKHR
end

"""
Minimalistic wrapper for VkDisplaySurfaceCreateInfoKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplaySurfaceCreateInfoKHR.html

"""
struct _DisplaySurfaceCreateInfoKHR <: VulkanStruct{true}
    vks::VkDisplaySurfaceCreateInfoKHR
    deps::Vector{Any}
    display_mode::DisplayModeKHR
end

"""
Minimalistic wrapper for VkDisplayModePropertiesKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModePropertiesKHR.html

"""
struct DisplayModePropertiesKHR <: ReturnedOnly
    display_mode::DisplayModeKHR
    parameters::_DisplayModeParametersKHR
end

"""

"""
mutable struct Device <: Handle
    vks::VkDevice
    physical_device::PhysicalDevice
    refcount::RefCounter
    destructor
    Device(vks::VkDevice, physical_device::PhysicalDevice, refcount::RefCounter) = new(vks, physical_device, refcount, undef)
end

"""

"""
mutable struct PrivateDataSlotEXT <: Handle
    vks::VkPrivateDataSlotEXT
    device::Device
    refcount::RefCounter
    destructor
    PrivateDataSlotEXT(vks::VkPrivateDataSlotEXT, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct DeferredOperationKHR <: Handle
    vks::VkDeferredOperationKHR
    device::Device
    refcount::RefCounter
    destructor
    DeferredOperationKHR(vks::VkDeferredOperationKHR, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct PerformanceConfigurationINTEL <: Handle
    vks::VkPerformanceConfigurationINTEL
    device::Device
    refcount::RefCounter
    destructor
    PerformanceConfigurationINTEL(vks::VkPerformanceConfigurationINTEL, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct AccelerationStructureNV <: Handle
    vks::VkAccelerationStructureNV
    device::Device
    refcount::RefCounter
    destructor
    AccelerationStructureNV(vks::VkAccelerationStructureNV, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkWriteDescriptorSetAccelerationStructureNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetAccelerationStructureNV.html)

"""
@auto_hash_equals struct WriteDescriptorSetAccelerationStructureNV <: HighLevelStruct
        next::Any
        acceleration_structures::Vector{AccelerationStructureNV}
    end

"""
Minimalistic wrapper for VkAccelerationStructureMemoryRequirementsInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureMemoryRequirementsInfoNV.html

"""
struct _AccelerationStructureMemoryRequirementsInfoNV <: VulkanStruct{true}
    vks::VkAccelerationStructureMemoryRequirementsInfoNV
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureNV
end

"""

"""
mutable struct AccelerationStructureKHR <: Handle
    vks::VkAccelerationStructureKHR
    device::Device
    refcount::RefCounter
    destructor
    AccelerationStructureKHR(vks::VkAccelerationStructureKHR, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkAccelerationStructureDeviceAddressInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureDeviceAddressInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureDeviceAddressInfoKHR <: HighLevelStruct
        next::Any
        acceleration_structure::AccelerationStructureKHR
    end

"""
High-level wrapper for VkWriteDescriptorSetAccelerationStructureKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSetAccelerationStructureKHR.html)

"""
@auto_hash_equals struct WriteDescriptorSetAccelerationStructureKHR <: HighLevelStruct
        next::Any
        acceleration_structures::Vector{AccelerationStructureKHR}
    end

"""
Minimalistic wrapper for VkCopyMemoryToAccelerationStructureInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyMemoryToAccelerationStructureInfoKHR.html

"""
struct _CopyMemoryToAccelerationStructureInfoKHR <: VulkanStruct{true}
    vks::VkCopyMemoryToAccelerationStructureInfoKHR
    deps::Vector{Any}
    dst::AccelerationStructureKHR
end

"""
Minimalistic wrapper for VkCopyAccelerationStructureToMemoryInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyAccelerationStructureToMemoryInfoKHR.html

"""
struct _CopyAccelerationStructureToMemoryInfoKHR <: VulkanStruct{true}
    vks::VkCopyAccelerationStructureToMemoryInfoKHR
    deps::Vector{Any}
    src::AccelerationStructureKHR
end

"""
Minimalistic wrapper for VkCopyAccelerationStructureInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyAccelerationStructureInfoKHR.html

"""
struct _CopyAccelerationStructureInfoKHR <: VulkanStruct{true}
    vks::VkCopyAccelerationStructureInfoKHR
    deps::Vector{Any}
    src::AccelerationStructureKHR
    dst::AccelerationStructureKHR
end

"""
Minimalistic wrapper for VkAccelerationStructureDeviceAddressInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureDeviceAddressInfoKHR.html

"""
struct _AccelerationStructureDeviceAddressInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureDeviceAddressInfoKHR
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureKHR
end

"""
Minimalistic wrapper for VkAccelerationStructureBuildGeometryInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildGeometryInfoKHR.html

"""
struct _AccelerationStructureBuildGeometryInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureBuildGeometryInfoKHR
    deps::Vector{Any}
    src_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
    dst_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
end

"""

"""
mutable struct ValidationCacheEXT <: Handle
    vks::VkValidationCacheEXT
    device::Device
    refcount::RefCounter
    destructor
    ValidationCacheEXT(vks::VkValidationCacheEXT, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkShaderModuleValidationCacheCreateInfoEXT.

Extension: VK\\_EXT\\_validation\\_cache

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderModuleValidationCacheCreateInfoEXT.html)

"""
@auto_hash_equals struct ShaderModuleValidationCacheCreateInfoEXT <: HighLevelStruct
        next::Any
        validation_cache::ValidationCacheEXT
    end

"""
Minimalistic wrapper for VkShaderModuleValidationCacheCreateInfoEXT.

Extension: VK_EXT_validation_cache

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderModuleValidationCacheCreateInfoEXT.html

"""
struct _ShaderModuleValidationCacheCreateInfoEXT <: VulkanStruct{true}
    vks::VkShaderModuleValidationCacheCreateInfoEXT
    deps::Vector{Any}
    validation_cache::ValidationCacheEXT
end

"""

"""
mutable struct SamplerYcbcrConversion <: Handle
    vks::VkSamplerYcbcrConversion
    device::Device
    refcount::RefCounter
    destructor
    SamplerYcbcrConversion(vks::VkSamplerYcbcrConversion, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkSamplerYcbcrConversionInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionInfo.html)

"""
@auto_hash_equals struct SamplerYcbcrConversionInfo <: HighLevelStruct
        next::Any
        conversion::SamplerYcbcrConversion
    end

"""
Minimalistic wrapper for VkSamplerYcbcrConversionInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionInfo.html

"""
struct _SamplerYcbcrConversionInfo <: VulkanStruct{true}
    vks::VkSamplerYcbcrConversionInfo
    deps::Vector{Any}
    conversion::SamplerYcbcrConversion
end

"""

"""
mutable struct DescriptorUpdateTemplate <: Handle
    vks::VkDescriptorUpdateTemplate
    device::Device
    refcount::RefCounter
    destructor
    DescriptorUpdateTemplate(vks::VkDescriptorUpdateTemplate, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct IndirectCommandsLayoutNV <: Handle
    vks::VkIndirectCommandsLayoutNV
    device::Device
    refcount::RefCounter
    destructor
    IndirectCommandsLayoutNV(vks::VkIndirectCommandsLayoutNV, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct PipelineCache <: Handle
    vks::VkPipelineCache
    device::Device
    refcount::RefCounter
    destructor
    PipelineCache(vks::VkPipelineCache, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct RenderPass <: Handle
    vks::VkRenderPass
    device::Device
    refcount::RefCounter
    destructor
    RenderPass(vks::VkRenderPass, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkFramebufferCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferCreateInfo.html

"""
struct _FramebufferCreateInfo <: VulkanStruct{true}
    vks::VkFramebufferCreateInfo
    deps::Vector{Any}
    render_pass::RenderPass
end

"""

"""
mutable struct Framebuffer <: Handle
    vks::VkFramebuffer
    device::Device
    refcount::RefCounter
    destructor
    Framebuffer(vks::VkFramebuffer, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkRenderPassBeginInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassBeginInfo.html

"""
struct _RenderPassBeginInfo <: VulkanStruct{true}
    vks::VkRenderPassBeginInfo
    deps::Vector{Any}
    render_pass::RenderPass
    framebuffer::Framebuffer
end

"""
Minimalistic wrapper for VkCommandBufferInheritanceInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceInfo.html

"""
struct _CommandBufferInheritanceInfo <: VulkanStruct{true}
    vks::VkCommandBufferInheritanceInfo
    deps::Vector{Any}
    render_pass::OptionalPtr{RenderPass}
    framebuffer::OptionalPtr{Framebuffer}
end

"""

"""
mutable struct QueryPool <: Handle
    vks::VkQueryPool
    device::Device
    refcount::RefCounter
    destructor
    QueryPool(vks::VkQueryPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct Event <: Handle
    vks::VkEvent
    device::Device
    refcount::RefCounter
    destructor
    Event(vks::VkEvent, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct Semaphore <: Handle
    vks::VkSemaphore
    device::Device
    refcount::RefCounter
    destructor
    Semaphore(vks::VkSemaphore, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkSemaphoreSubmitInfoKHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSubmitInfoKHR.html)

"""
@auto_hash_equals struct SemaphoreSubmitInfoKHR <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        value::UInt64
        stage_mask::UInt64
        device_index::UInt32
    end

"""
High-level wrapper for VkSemaphoreSignalInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSignalInfo.html)

"""
@auto_hash_equals struct SemaphoreSignalInfo <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        value::UInt64
    end

"""
Minimalistic wrapper for VkSemaphoreSubmitInfoKHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSubmitInfoKHR.html

"""
struct _SemaphoreSubmitInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreSubmitInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

"""
Minimalistic wrapper for VkSemaphoreSignalInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreSignalInfo.html

"""
struct _SemaphoreSignalInfo <: VulkanStruct{true}
    vks::VkSemaphoreSignalInfo
    deps::Vector{Any}
    semaphore::Semaphore
end

"""
Minimalistic wrapper for VkSemaphoreGetFdInfoKHR.

Extension: VK_KHR_external_semaphore_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreGetFdInfoKHR.html

"""
struct _SemaphoreGetFdInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreGetFdInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

"""
Minimalistic wrapper for VkImportSemaphoreFdInfoKHR.

Extension: VK_KHR_external_semaphore_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportSemaphoreFdInfoKHR.html

"""
struct _ImportSemaphoreFdInfoKHR <: VulkanStruct{true}
    vks::VkImportSemaphoreFdInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

"""
Minimalistic wrapper for VkSemaphoreGetWin32HandleInfoKHR.

Extension: VK_KHR_external_semaphore_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreGetWin32HandleInfoKHR.html

"""
struct _SemaphoreGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkSemaphoreGetWin32HandleInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

"""
Minimalistic wrapper for VkImportSemaphoreWin32HandleInfoKHR.

Extension: VK_KHR_external_semaphore_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportSemaphoreWin32HandleInfoKHR.html

"""
struct _ImportSemaphoreWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportSemaphoreWin32HandleInfoKHR
    deps::Vector{Any}
    semaphore::Semaphore
end

"""

"""
mutable struct Fence <: Handle
    vks::VkFence
    device::Device
    refcount::RefCounter
    destructor
    Fence(vks::VkFence, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkAcquireNextImageInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAcquireNextImageInfoKHR.html)

"""
@auto_hash_equals struct AcquireNextImageInfoKHR <: HighLevelStruct
        next::Any
        swapchain::SwapchainKHR
        timeout::UInt64
        semaphore::OptionalPtr{Semaphore}
        fence::OptionalPtr{Fence}
        device_mask::UInt32
    end

"""
Minimalistic wrapper for VkAcquireNextImageInfoKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAcquireNextImageInfoKHR.html

"""
struct _AcquireNextImageInfoKHR <: VulkanStruct{true}
    vks::VkAcquireNextImageInfoKHR
    deps::Vector{Any}
    swapchain::SwapchainKHR
    semaphore::OptionalPtr{Semaphore}
    fence::OptionalPtr{Fence}
end

"""
Minimalistic wrapper for VkFenceGetFdInfoKHR.

Extension: VK_KHR_external_fence_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceGetFdInfoKHR.html

"""
struct _FenceGetFdInfoKHR <: VulkanStruct{true}
    vks::VkFenceGetFdInfoKHR
    deps::Vector{Any}
    fence::Fence
end

"""
Minimalistic wrapper for VkImportFenceFdInfoKHR.

Extension: VK_KHR_external_fence_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportFenceFdInfoKHR.html

"""
struct _ImportFenceFdInfoKHR <: VulkanStruct{true}
    vks::VkImportFenceFdInfoKHR
    deps::Vector{Any}
    fence::Fence
end

"""
Minimalistic wrapper for VkFenceGetWin32HandleInfoKHR.

Extension: VK_KHR_external_fence_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceGetWin32HandleInfoKHR.html

"""
struct _FenceGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkFenceGetWin32HandleInfoKHR
    deps::Vector{Any}
    fence::Fence
end

"""
Minimalistic wrapper for VkImportFenceWin32HandleInfoKHR.

Extension: VK_KHR_external_fence_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportFenceWin32HandleInfoKHR.html

"""
struct _ImportFenceWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkImportFenceWin32HandleInfoKHR
    deps::Vector{Any}
    fence::Fence
end

"""

"""
mutable struct DescriptorPool <: Handle
    vks::VkDescriptorPool
    device::Device
    refcount::RefCounter
    destructor
    DescriptorPool(vks::VkDescriptorPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkDescriptorSetAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetAllocateInfo.html

"""
struct _DescriptorSetAllocateInfo <: VulkanStruct{true}
    vks::VkDescriptorSetAllocateInfo
    deps::Vector{Any}
    descriptor_pool::DescriptorPool
end

"""

"""
mutable struct DescriptorSet <: Handle
    vks::VkDescriptorSet
    descriptor_pool::DescriptorPool
    refcount::RefCounter
    destructor
    DescriptorSet(vks::VkDescriptorSet, descriptor_pool::DescriptorPool, refcount::RefCounter) = new(vks, descriptor_pool, refcount, undef)
end

"""
High-level wrapper for VkCopyDescriptorSet.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyDescriptorSet.html)

"""
@auto_hash_equals struct CopyDescriptorSet <: HighLevelStruct
        next::Any
        src_set::DescriptorSet
        src_binding::UInt32
        src_array_element::UInt32
        dst_set::DescriptorSet
        dst_binding::UInt32
        dst_array_element::UInt32
        descriptor_count::UInt32
    end

"""
Minimalistic wrapper for VkCopyDescriptorSet.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyDescriptorSet.html

"""
struct _CopyDescriptorSet <: VulkanStruct{true}
    vks::VkCopyDescriptorSet
    deps::Vector{Any}
    src_set::DescriptorSet
    dst_set::DescriptorSet
end

"""
Minimalistic wrapper for VkWriteDescriptorSet.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSet.html

"""
struct _WriteDescriptorSet <: VulkanStruct{true}
    vks::VkWriteDescriptorSet
    deps::Vector{Any}
    dst_set::DescriptorSet
end

"""

"""
mutable struct DescriptorSetLayout <: Handle
    vks::VkDescriptorSetLayout
    device::Device
    refcount::RefCounter
    destructor
    DescriptorSetLayout(vks::VkDescriptorSetLayout, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkDescriptorSetAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetAllocateInfo.html)

"""
@auto_hash_equals struct DescriptorSetAllocateInfo <: HighLevelStruct
        next::Any
        descriptor_pool::DescriptorPool
        set_layouts::Vector{DescriptorSetLayout}
    end

"""

"""
mutable struct Sampler <: Handle
    vks::VkSampler
    device::Device
    refcount::RefCounter
    destructor
    Sampler(vks::VkSampler, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct PipelineLayout <: Handle
    vks::VkPipelineLayout
    device::Device
    refcount::RefCounter
    destructor
    PipelineLayout(vks::VkPipelineLayout, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkDescriptorUpdateTemplateCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateCreateInfo.html

"""
struct _DescriptorUpdateTemplateCreateInfo <: VulkanStruct{true}
    vks::VkDescriptorUpdateTemplateCreateInfo
    deps::Vector{Any}
    descriptor_set_layout::DescriptorSetLayout
    pipeline_layout::PipelineLayout
end

"""
Minimalistic wrapper for VkIndirectCommandsLayoutTokenNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsLayoutTokenNV.html

"""
struct _IndirectCommandsLayoutTokenNV <: VulkanStruct{true}
    vks::VkIndirectCommandsLayoutTokenNV
    deps::Vector{Any}
    pushconstant_pipeline_layout::OptionalPtr{PipelineLayout}
end

"""

"""
mutable struct Pipeline <: Handle
    vks::VkPipeline
    device::Device
    refcount::RefCounter
    destructor
    Pipeline(vks::VkPipeline, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkPipelineLibraryCreateInfoKHR.

Extension: VK\\_KHR\\_pipeline\\_library

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineLibraryCreateInfoKHR.html)

"""
@auto_hash_equals struct PipelineLibraryCreateInfoKHR <: HighLevelStruct
        next::Any
        libraries::Vector{Pipeline}
    end

"""
High-level wrapper for VkPipelineExecutableInfoKHR.

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableInfoKHR.html)

"""
@auto_hash_equals struct PipelineExecutableInfoKHR <: HighLevelStruct
        next::Any
        pipeline::Pipeline
        executable_index::UInt32
    end

"""
High-level wrapper for VkPipelineInfoKHR.

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineInfoKHR.html)

"""
@auto_hash_equals struct PipelineInfoKHR <: HighLevelStruct
        next::Any
        pipeline::Pipeline
    end

"""
Minimalistic wrapper for VkPipelineExecutableInfoKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableInfoKHR.html

"""
struct _PipelineExecutableInfoKHR <: VulkanStruct{true}
    vks::VkPipelineExecutableInfoKHR
    deps::Vector{Any}
    pipeline::Pipeline
end

"""
Minimalistic wrapper for VkPipelineInfoKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineInfoKHR.html

"""
struct _PipelineInfoKHR <: VulkanStruct{true}
    vks::VkPipelineInfoKHR
    deps::Vector{Any}
    pipeline::Pipeline
end

"""
Minimalistic wrapper for VkRayTracingPipelineCreateInfoKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineCreateInfoKHR.html

"""
struct _RayTracingPipelineCreateInfoKHR <: VulkanStruct{true}
    vks::VkRayTracingPipelineCreateInfoKHR
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

"""
Minimalistic wrapper for VkRayTracingPipelineCreateInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineCreateInfoNV.html

"""
struct _RayTracingPipelineCreateInfoNV <: VulkanStruct{true}
    vks::VkRayTracingPipelineCreateInfoNV
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

"""
Minimalistic wrapper for VkGeneratedCommandsMemoryRequirementsInfoNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeneratedCommandsMemoryRequirementsInfoNV.html

"""
struct _GeneratedCommandsMemoryRequirementsInfoNV <: VulkanStruct{true}
    vks::VkGeneratedCommandsMemoryRequirementsInfoNV
    deps::Vector{Any}
    pipeline::Pipeline
    indirect_commands_layout::IndirectCommandsLayoutNV
end

"""
Minimalistic wrapper for VkGraphicsPipelineCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineCreateInfo.html

"""
struct _GraphicsPipelineCreateInfo <: VulkanStruct{true}
    vks::VkGraphicsPipelineCreateInfo
    deps::Vector{Any}
    layout::PipelineLayout
    render_pass::RenderPass
    base_pipeline_handle::OptionalPtr{Pipeline}
end

"""
Minimalistic wrapper for VkComputePipelineCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComputePipelineCreateInfo.html

"""
struct _ComputePipelineCreateInfo <: VulkanStruct{true}
    vks::VkComputePipelineCreateInfo
    deps::Vector{Any}
    layout::PipelineLayout
    base_pipeline_handle::OptionalPtr{Pipeline}
end

"""

"""
mutable struct ShaderModule <: Handle
    vks::VkShaderModule
    device::Device
    refcount::RefCounter
    destructor
    ShaderModule(vks::VkShaderModule, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkPipelineShaderStageCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineShaderStageCreateInfo.html

"""
struct _PipelineShaderStageCreateInfo <: VulkanStruct{true}
    vks::VkPipelineShaderStageCreateInfo
    deps::Vector{Any}
    _module::ShaderModule
end

"""

"""
mutable struct ImageView <: Handle
    vks::VkImageView
    device::Device
    refcount::RefCounter
    destructor
    ImageView(vks::VkImageView, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkRenderPassAttachmentBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassAttachmentBeginInfo.html)

"""
@auto_hash_equals struct RenderPassAttachmentBeginInfo <: HighLevelStruct
        next::Any
        attachments::Vector{ImageView}
    end

"""
Minimalistic wrapper for VkImageViewHandleInfoNVX.

Extension: VK_NVX_image_view_handle

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewHandleInfoNVX.html

"""
struct _ImageViewHandleInfoNVX <: VulkanStruct{true}
    vks::VkImageViewHandleInfoNVX
    deps::Vector{Any}
    image_view::ImageView
    sampler::OptionalPtr{Sampler}
end

"""
Minimalistic wrapper for VkDescriptorImageInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorImageInfo.html

"""
struct _DescriptorImageInfo <: VulkanStruct{false}
    vks::VkDescriptorImageInfo
    sampler::Sampler
    image_view::ImageView
end

"""

"""
mutable struct Image <: Handle
    vks::VkImage
    device::Device
    refcount::RefCounter
    destructor
    Image(vks::VkImage, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkImageSparseMemoryRequirementsInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSparseMemoryRequirementsInfo2.html)

"""
@auto_hash_equals struct ImageSparseMemoryRequirementsInfo2 <: HighLevelStruct
        next::Any
        image::Image
    end

"""
High-level wrapper for VkImageMemoryRequirementsInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryRequirementsInfo2.html)

"""
@auto_hash_equals struct ImageMemoryRequirementsInfo2 <: HighLevelStruct
        next::Any
        image::Image
    end

"""
Minimalistic wrapper for VkImageMemoryBarrier2KHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryBarrier2KHR.html

"""
struct _ImageMemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkImageMemoryBarrier2KHR
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkResolveImageInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkResolveImageInfo2KHR.html

"""
struct _ResolveImageInfo2KHR <: VulkanStruct{true}
    vks::VkResolveImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

"""
Minimalistic wrapper for VkBlitImageInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBlitImageInfo2KHR.html

"""
struct _BlitImageInfo2KHR <: VulkanStruct{true}
    vks::VkBlitImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

"""
Minimalistic wrapper for VkCopyImageInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyImageInfo2KHR.html

"""
struct _CopyImageInfo2KHR <: VulkanStruct{true}
    vks::VkCopyImageInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_image::Image
end

"""
Minimalistic wrapper for VkImageSparseMemoryRequirementsInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSparseMemoryRequirementsInfo2.html

"""
struct _ImageSparseMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkImageSparseMemoryRequirementsInfo2
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkImageMemoryRequirementsInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryRequirementsInfo2.html

"""
struct _ImageMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkImageMemoryRequirementsInfo2
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkSparseImageMemoryBindInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBindInfo.html

"""
struct _SparseImageMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseImageMemoryBindInfo
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkSparseImageOpaqueMemoryBindInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html

"""
struct _SparseImageOpaqueMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseImageOpaqueMemoryBindInfo
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkImageViewCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewCreateInfo.html

"""
struct _ImageViewCreateInfo <: VulkanStruct{true}
    vks::VkImageViewCreateInfo
    deps::Vector{Any}
    image::Image
end

"""
Minimalistic wrapper for VkImageMemoryBarrier.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryBarrier.html

"""
struct _ImageMemoryBarrier <: VulkanStruct{true}
    vks::VkImageMemoryBarrier
    deps::Vector{Any}
    image::Image
end

"""

"""
mutable struct BufferView <: Handle
    vks::VkBufferView
    device::Device
    refcount::RefCounter
    destructor
    BufferView(vks::VkBufferView, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""

"""
mutable struct Buffer <: Handle
    vks::VkBuffer
    device::Device
    refcount::RefCounter
    destructor
    Buffer(vks::VkBuffer, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkBufferMemoryBarrier2KHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryBarrier2KHR.html)

"""
@auto_hash_equals struct BufferMemoryBarrier2KHR <: HighLevelStruct
        next::Any
        src_stage_mask::UInt64
        src_access_mask::UInt64
        dst_stage_mask::UInt64
        dst_access_mask::UInt64
        src_queue_family_index::UInt32
        dst_queue_family_index::UInt32
        buffer::Buffer
        offset::UInt64
        size::UInt64
    end

"""
High-level wrapper for VkCopyBufferInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyBufferInfo2KHR.html)

"""
@auto_hash_equals struct CopyBufferInfo2KHR <: HighLevelStruct
        next::Any
        src_buffer::Buffer
        dst_buffer::Buffer
        regions::Vector{BufferCopy2KHR}
    end

"""
High-level wrapper for VkBufferDeviceAddressInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferDeviceAddressInfo.html)

"""
@auto_hash_equals struct BufferDeviceAddressInfo <: HighLevelStruct
        next::Any
        buffer::Buffer
    end

"""
High-level wrapper for VkGeometryAABBNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryAABBNV.html)

"""
@auto_hash_equals struct GeometryAABBNV <: HighLevelStruct
        next::Any
        aabb_data::OptionalPtr{Buffer}
        num_aab_bs::UInt32
        stride::UInt32
        offset::UInt64
    end

"""
High-level wrapper for VkMemoryDedicatedAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryDedicatedAllocateInfo.html)

"""
@auto_hash_equals struct MemoryDedicatedAllocateInfo <: HighLevelStruct
        next::Any
        image::OptionalPtr{Image}
        buffer::OptionalPtr{Buffer}
    end

"""
High-level wrapper for VkBufferMemoryRequirementsInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryRequirementsInfo2.html)

"""
@auto_hash_equals struct BufferMemoryRequirementsInfo2 <: HighLevelStruct
        next::Any
        buffer::Buffer
    end

"""
High-level wrapper for VkIndirectCommandsStreamNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsStreamNV.html)

"""
@auto_hash_equals struct IndirectCommandsStreamNV <: HighLevelStruct
        buffer::Buffer
        offset::UInt64
    end

"""
High-level wrapper for VkDedicatedAllocationMemoryAllocateInfoNV.

Extension: VK\\_NV\\_dedicated\\_allocation

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationMemoryAllocateInfoNV.html)

"""
@auto_hash_equals struct DedicatedAllocationMemoryAllocateInfoNV <: HighLevelStruct
        next::Any
        image::OptionalPtr{Image}
        buffer::OptionalPtr{Buffer}
    end

"""
High-level wrapper for VkDescriptorBufferInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorBufferInfo.html)

"""
@auto_hash_equals struct DescriptorBufferInfo <: HighLevelStruct
        buffer::OptionalPtr{Buffer}
        offset::UInt64
        range::UInt64
    end

"""
Minimalistic wrapper for VkBufferMemoryBarrier2KHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryBarrier2KHR.html

"""
struct _BufferMemoryBarrier2KHR <: VulkanStruct{true}
    vks::VkBufferMemoryBarrier2KHR
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkCopyImageToBufferInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyImageToBufferInfo2KHR.html

"""
struct _CopyImageToBufferInfo2KHR <: VulkanStruct{true}
    vks::VkCopyImageToBufferInfo2KHR
    deps::Vector{Any}
    src_image::Image
    dst_buffer::Buffer
end

"""
Minimalistic wrapper for VkCopyBufferToImageInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyBufferToImageInfo2KHR.html

"""
struct _CopyBufferToImageInfo2KHR <: VulkanStruct{true}
    vks::VkCopyBufferToImageInfo2KHR
    deps::Vector{Any}
    src_buffer::Buffer
    dst_image::Image
end

"""
Minimalistic wrapper for VkCopyBufferInfo2KHR.

Extension: VK_KHR_copy_commands2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyBufferInfo2KHR.html

"""
struct _CopyBufferInfo2KHR <: VulkanStruct{true}
    vks::VkCopyBufferInfo2KHR
    deps::Vector{Any}
    src_buffer::Buffer
    dst_buffer::Buffer
end

"""
Minimalistic wrapper for VkAccelerationStructureCreateInfoKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureCreateInfoKHR.html

"""
struct _AccelerationStructureCreateInfoKHR <: VulkanStruct{true}
    vks::VkAccelerationStructureCreateInfoKHR
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkBufferDeviceAddressInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferDeviceAddressInfo.html

"""
struct _BufferDeviceAddressInfo <: VulkanStruct{true}
    vks::VkBufferDeviceAddressInfo
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkGeometryAABBNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryAABBNV.html

"""
struct _GeometryAABBNV <: VulkanStruct{true}
    vks::VkGeometryAABBNV
    deps::Vector{Any}
    aabb_data::OptionalPtr{Buffer}
end

"""
Minimalistic wrapper for VkGeometryTrianglesNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryTrianglesNV.html

"""
struct _GeometryTrianglesNV <: VulkanStruct{true}
    vks::VkGeometryTrianglesNV
    deps::Vector{Any}
    vertex_data::OptionalPtr{Buffer}
    index_data::OptionalPtr{Buffer}
    transform_data::OptionalPtr{Buffer}
end

"""
Minimalistic wrapper for VkConditionalRenderingBeginInfoEXT.

Extension: VK_EXT_conditional_rendering

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkConditionalRenderingBeginInfoEXT.html

"""
struct _ConditionalRenderingBeginInfoEXT <: VulkanStruct{true}
    vks::VkConditionalRenderingBeginInfoEXT
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkMemoryDedicatedAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryDedicatedAllocateInfo.html

"""
struct _MemoryDedicatedAllocateInfo <: VulkanStruct{true}
    vks::VkMemoryDedicatedAllocateInfo
    deps::Vector{Any}
    image::OptionalPtr{Image}
    buffer::OptionalPtr{Buffer}
end

"""
Minimalistic wrapper for VkBufferMemoryRequirementsInfo2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryRequirementsInfo2.html

"""
struct _BufferMemoryRequirementsInfo2 <: VulkanStruct{true}
    vks::VkBufferMemoryRequirementsInfo2
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkGeneratedCommandsInfoNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeneratedCommandsInfoNV.html

"""
struct _GeneratedCommandsInfoNV <: VulkanStruct{true}
    vks::VkGeneratedCommandsInfoNV
    deps::Vector{Any}
    pipeline::Pipeline
    indirect_commands_layout::IndirectCommandsLayoutNV
    preprocess_buffer::Buffer
    sequences_count_buffer::OptionalPtr{Buffer}
    sequences_index_buffer::OptionalPtr{Buffer}
end

"""
Minimalistic wrapper for VkIndirectCommandsStreamNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsStreamNV.html

"""
struct _IndirectCommandsStreamNV <: VulkanStruct{false}
    vks::VkIndirectCommandsStreamNV
    buffer::Buffer
end

"""
Minimalistic wrapper for VkDedicatedAllocationMemoryAllocateInfoNV.

Extension: VK_NV_dedicated_allocation

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDedicatedAllocationMemoryAllocateInfoNV.html

"""
struct _DedicatedAllocationMemoryAllocateInfoNV <: VulkanStruct{true}
    vks::VkDedicatedAllocationMemoryAllocateInfoNV
    deps::Vector{Any}
    image::OptionalPtr{Image}
    buffer::OptionalPtr{Buffer}
end

"""
Minimalistic wrapper for VkSparseBufferMemoryBindInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseBufferMemoryBindInfo.html

"""
struct _SparseBufferMemoryBindInfo <: VulkanStruct{true}
    vks::VkSparseBufferMemoryBindInfo
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkBufferMemoryBarrier.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryBarrier.html

"""
struct _BufferMemoryBarrier <: VulkanStruct{true}
    vks::VkBufferMemoryBarrier
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkBufferViewCreateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferViewCreateInfo.html

"""
struct _BufferViewCreateInfo <: VulkanStruct{true}
    vks::VkBufferViewCreateInfo
    deps::Vector{Any}
    buffer::Buffer
end

"""
Minimalistic wrapper for VkDescriptorBufferInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorBufferInfo.html

"""
struct _DescriptorBufferInfo <: VulkanStruct{false}
    vks::VkDescriptorBufferInfo
    buffer::OptionalPtr{Buffer}
end

"""

"""
mutable struct CommandPool <: Handle
    vks::VkCommandPool
    device::Device
    refcount::RefCounter
    destructor
    CommandPool(vks::VkCommandPool, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
Minimalistic wrapper for VkCommandBufferAllocateInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferAllocateInfo.html

"""
struct _CommandBufferAllocateInfo <: VulkanStruct{true}
    vks::VkCommandBufferAllocateInfo
    deps::Vector{Any}
    command_pool::CommandPool
end

"""

"""
mutable struct CommandBuffer <: Handle
    vks::VkCommandBuffer
    command_pool::CommandPool
    refcount::RefCounter
    destructor
    CommandBuffer(vks::VkCommandBuffer, command_pool::CommandPool, refcount::RefCounter) = new(vks, command_pool, refcount, undef)
end

"""
High-level wrapper for VkCommandBufferSubmitInfoKHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferSubmitInfoKHR.html)

"""
@auto_hash_equals struct CommandBufferSubmitInfoKHR <: HighLevelStruct
        next::Any
        command_buffer::CommandBuffer
        device_mask::UInt32
    end

"""
Minimalistic wrapper for VkCommandBufferSubmitInfoKHR.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferSubmitInfoKHR.html

"""
struct _CommandBufferSubmitInfoKHR <: VulkanStruct{true}
    vks::VkCommandBufferSubmitInfoKHR
    deps::Vector{Any}
    command_buffer::CommandBuffer
end

"""

"""
mutable struct DeviceMemory <: Handle
    vks::VkDeviceMemory
    device::Device
    refcount::RefCounter
    destructor
    DeviceMemory(vks::VkDeviceMemory, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkDeviceMemoryOpaqueCaptureAddressInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryOpaqueCaptureAddressInfo.html)

"""
@auto_hash_equals struct DeviceMemoryOpaqueCaptureAddressInfo <: HighLevelStruct
        next::Any
        memory::DeviceMemory
    end

"""
High-level wrapper for VkBindAccelerationStructureMemoryInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindAccelerationStructureMemoryInfoNV.html)

"""
@auto_hash_equals struct BindAccelerationStructureMemoryInfoNV <: HighLevelStruct
        next::Any
        acceleration_structure::AccelerationStructureNV
        memory::DeviceMemory
        memory_offset::UInt64
        device_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkBindImageMemoryInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryInfo.html)

"""
@auto_hash_equals struct BindImageMemoryInfo <: HighLevelStruct
        next::Any
        image::Image
        memory::DeviceMemory
        memory_offset::UInt64
    end

"""
High-level wrapper for VkBindBufferMemoryInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryInfo.html)

"""
@auto_hash_equals struct BindBufferMemoryInfo <: HighLevelStruct
        next::Any
        buffer::Buffer
        memory::DeviceMemory
        memory_offset::UInt64
    end

"""
High-level wrapper for VkWin32KeyedMutexAcquireReleaseInfoKHR.

Extension: VK\\_KHR\\_win32\\_keyed\\_mutex

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoKHR.html)

"""
@auto_hash_equals struct Win32KeyedMutexAcquireReleaseInfoKHR <: HighLevelStruct
        next::Any
        acquire_syncs::Vector{DeviceMemory}
        acquire_keys::Vector{UInt64}
        acquire_timeouts::Vector{UInt32}
        release_syncs::Vector{DeviceMemory}
        release_keys::Vector{UInt64}
    end

"""
High-level wrapper for VkWin32KeyedMutexAcquireReleaseInfoNV.

Extension: VK\\_NV\\_win32\\_keyed\\_mutex

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoNV.html)

"""
@auto_hash_equals struct Win32KeyedMutexAcquireReleaseInfoNV <: HighLevelStruct
        next::Any
        acquire_syncs::Vector{DeviceMemory}
        acquire_keys::Vector{UInt64}
        acquire_timeout_milliseconds::Vector{UInt32}
        release_syncs::Vector{DeviceMemory}
        release_keys::Vector{UInt64}
    end

"""
High-level wrapper for VkMappedMemoryRange.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMappedMemoryRange.html)

"""
@auto_hash_equals struct MappedMemoryRange <: HighLevelStruct
        next::Any
        memory::DeviceMemory
        offset::UInt64
        size::UInt64
    end

"""
Minimalistic wrapper for VkDeviceMemoryOpaqueCaptureAddressInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryOpaqueCaptureAddressInfo.html

"""
struct _DeviceMemoryOpaqueCaptureAddressInfo <: VulkanStruct{true}
    vks::VkDeviceMemoryOpaqueCaptureAddressInfo
    deps::Vector{Any}
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkBindAccelerationStructureMemoryInfoNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindAccelerationStructureMemoryInfoNV.html

"""
struct _BindAccelerationStructureMemoryInfoNV <: VulkanStruct{true}
    vks::VkBindAccelerationStructureMemoryInfoNV
    deps::Vector{Any}
    acceleration_structure::AccelerationStructureNV
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkBindImageMemoryInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImageMemoryInfo.html

"""
struct _BindImageMemoryInfo <: VulkanStruct{true}
    vks::VkBindImageMemoryInfo
    deps::Vector{Any}
    image::Image
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkBindBufferMemoryInfo.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindBufferMemoryInfo.html

"""
struct _BindBufferMemoryInfo <: VulkanStruct{true}
    vks::VkBindBufferMemoryInfo
    deps::Vector{Any}
    buffer::Buffer
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkMemoryGetFdInfoKHR.

Extension: VK_KHR_external_memory_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryGetFdInfoKHR.html

"""
struct _MemoryGetFdInfoKHR <: VulkanStruct{true}
    vks::VkMemoryGetFdInfoKHR
    deps::Vector{Any}
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkMemoryGetWin32HandleInfoKHR.

Extension: VK_KHR_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryGetWin32HandleInfoKHR.html

"""
struct _MemoryGetWin32HandleInfoKHR <: VulkanStruct{true}
    vks::VkMemoryGetWin32HandleInfoKHR
    deps::Vector{Any}
    memory::DeviceMemory
end

"""
Minimalistic wrapper for VkSparseImageMemoryBind.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBind.html

"""
struct _SparseImageMemoryBind <: VulkanStruct{false}
    vks::VkSparseImageMemoryBind
    memory::OptionalPtr{DeviceMemory}
end

"""
Minimalistic wrapper for VkSparseMemoryBind.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseMemoryBind.html

"""
struct _SparseMemoryBind <: VulkanStruct{false}
    vks::VkSparseMemoryBind
    memory::OptionalPtr{DeviceMemory}
end

"""
Minimalistic wrapper for VkMappedMemoryRange.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMappedMemoryRange.html

"""
struct _MappedMemoryRange <: VulkanStruct{true}
    vks::VkMappedMemoryRange
    deps::Vector{Any}
    memory::DeviceMemory
end

"""

"""
mutable struct Queue <: Handle
    vks::VkQueue
    device::Device
    refcount::RefCounter
    destructor
    Queue(vks::VkQueue, device::Device, refcount::RefCounter) = new(vks, device, refcount, undef)
end

"""
High-level wrapper for VkAccelerationStructureGeometryInstancesDataKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryInstancesDataKHR.html)

"""
@auto_hash_equals struct AccelerationStructureGeometryInstancesDataKHR <: HighLevelStruct
        next::Any
        array_of_pointers::Bool
        data::DeviceOrHostAddressConstKHR
    end

"""
High-level wrapper for VkAccelerationStructureGeometryAabbsDataKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryAabbsDataKHR.html)

"""
@auto_hash_equals struct AccelerationStructureGeometryAabbsDataKHR <: HighLevelStruct
        next::Any
        data::DeviceOrHostAddressConstKHR
        stride::UInt64
    end

"""
High-level wrapper for VkRenderPassBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassBeginInfo.html)

"""
@auto_hash_equals struct RenderPassBeginInfo <: HighLevelStruct
        next::Any
        render_pass::RenderPass
        framebuffer::Framebuffer
        render_area::Rect2D
        clear_values::Vector{ClearValue}
    end

"""
High-level wrapper for VkEventCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkEventCreateInfo.html)

"""
@auto_hash_equals struct EventCreateInfo <: HighLevelStruct
        next::Any
        flags::EventCreateFlag
    end

"""
High-level wrapper for VkSubmitInfo2KHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubmitInfo2KHR.html)

"""
@auto_hash_equals struct SubmitInfo2KHR <: HighLevelStruct
        next::Any
        flags::SubmitFlagKHR
        wait_semaphore_infos::Vector{SemaphoreSubmitInfoKHR}
        command_buffer_infos::Vector{CommandBufferSubmitInfoKHR}
        signal_semaphore_infos::Vector{SemaphoreSubmitInfoKHR}
    end

"""
High-level wrapper for VkPipelineCompilerControlCreateInfoAMD.

Extension: VK\\_AMD\\_pipeline\\_compiler\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCompilerControlCreateInfoAMD.html)

"""
@auto_hash_equals struct PipelineCompilerControlCreateInfoAMD <: HighLevelStruct
        next::Any
        compiler_control_flags::PipelineCompilerControlFlagAMD
    end

"""
High-level wrapper for VkShaderModuleCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderModuleCreateInfo.html)

"""
@auto_hash_equals struct ShaderModuleCreateInfo <: HighLevelStruct
        next::Any
        flags::ShaderModuleCreateFlag
        code_size::UInt
        code::Vector{UInt32}
    end

"""
High-level wrapper for VkAcquireProfilingLockInfoKHR.

Extension: VK\\_KHR\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAcquireProfilingLockInfoKHR.html)

"""
@auto_hash_equals struct AcquireProfilingLockInfoKHR <: HighLevelStruct
        next::Any
        flags::AcquireProfilingLockFlagKHR
        timeout::UInt64
    end

"""
Minimalistic wrapper for VkPipelineCreationFeedbackEXT.

Extension: VK_EXT_pipeline_creation_feedback

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCreationFeedbackEXT.html

"""
struct PipelineCreationFeedbackEXT <: ReturnedOnly
    flags::PipelineCreationFeedbackFlagEXT
    duration::UInt64
end

"""
High-level wrapper for VkPipelineCreationFeedbackCreateInfoEXT.

Extension: VK\\_EXT\\_pipeline\\_creation\\_feedback

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCreationFeedbackCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineCreationFeedbackCreateInfoEXT <: HighLevelStruct
        next::Any
        pipeline_creation_feedback::PipelineCreationFeedbackEXT
        pipeline_stage_creation_feedbacks::Vector{PipelineCreationFeedbackEXT}
    end

"""
High-level wrapper for VkDeviceDiagnosticsConfigCreateInfoNV.

Extension: VK\\_NV\\_device\\_diagnostics\\_config

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceDiagnosticsConfigCreateInfoNV.html)

"""
@auto_hash_equals struct DeviceDiagnosticsConfigCreateInfoNV <: HighLevelStruct
        next::Any
        flags::DeviceDiagnosticsConfigFlagNV
    end

"""
High-level wrapper for VkFramebufferCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferCreateInfo.html)

"""
@auto_hash_equals struct FramebufferCreateInfo <: HighLevelStruct
        next::Any
        flags::FramebufferCreateFlag
        render_pass::RenderPass
        attachments::Vector{ImageView}
        width::UInt32
        height::UInt32
        layers::UInt32
    end

"""
High-level wrapper for VkAccelerationStructureInstanceKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureInstanceKHR.html)

"""
@auto_hash_equals struct AccelerationStructureInstanceKHR <: HighLevelStruct
        transform::TransformMatrixKHR
        instance_custom_index::UInt32
        mask::UInt32
        instance_shader_binding_table_record_offset::UInt32
        flags::GeometryInstanceFlagKHR
        acceleration_structure_reference::UInt64
    end

"""
High-level wrapper for VkConditionalRenderingBeginInfoEXT.

Extension: VK\\_EXT\\_conditional\\_rendering

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkConditionalRenderingBeginInfoEXT.html)

"""
@auto_hash_equals struct ConditionalRenderingBeginInfoEXT <: HighLevelStruct
        next::Any
        buffer::Buffer
        offset::UInt64
        flags::ConditionalRenderingFlagEXT
    end

"""
High-level wrapper for VkDescriptorSetLayoutBindingFlagsCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfo.html)

"""
@auto_hash_equals struct DescriptorSetLayoutBindingFlagsCreateInfo <: HighLevelStruct
        next::Any
        binding_flags::Vector{DescriptorBindingFlag}
    end

"""
High-level wrapper for VkDebugUtilsMessengerCreateInfoEXT.

Extension: VK\\_EXT\\_debug\\_utils

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsMessengerCreateInfoEXT.html)

"""
@auto_hash_equals struct DebugUtilsMessengerCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        message_severity::DebugUtilsMessageSeverityFlagEXT
        message_type::DebugUtilsMessageTypeFlagEXT
        pfn_user_callback::FunctionPtr
        user_data::OptionalPtr{Ptr{Cvoid}}
    end

"""
High-level wrapper for VkDeviceGroupSwapchainCreateInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupSwapchainCreateInfoKHR.html)

"""
@auto_hash_equals struct DeviceGroupSwapchainCreateInfoKHR <: HighLevelStruct
        next::Any
        modes::DeviceGroupPresentModeFlagKHR
    end

"""
High-level wrapper for VkDeviceGroupPresentInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupPresentInfoKHR.html)

"""
@auto_hash_equals struct DeviceGroupPresentInfoKHR <: HighLevelStruct
        next::Any
        device_masks::Vector{UInt32}
        mode::DeviceGroupPresentModeFlagKHR
    end

"""
High-level wrapper for VkMemoryAllocateFlagsInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryAllocateFlagsInfo.html)

"""
@auto_hash_equals struct MemoryAllocateFlagsInfo <: HighLevelStruct
        next::Any
        flags::MemoryAllocateFlag
        device_mask::UInt32
    end

"""
High-level wrapper for VkSwapchainCounterCreateInfoEXT.

Extension: VK\\_EXT\\_display\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainCounterCreateInfoEXT.html)

"""
@auto_hash_equals struct SwapchainCounterCreateInfoEXT <: HighLevelStruct
        next::Any
        surface_counters::SurfaceCounterFlagEXT
    end

"""
High-level wrapper for VkFenceGetFdInfoKHR.

Extension: VK\\_KHR\\_external\\_fence\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceGetFdInfoKHR.html)

"""
@auto_hash_equals struct FenceGetFdInfoKHR <: HighLevelStruct
        next::Any
        fence::Fence
        handle_type::ExternalFenceHandleTypeFlag
    end

"""
High-level wrapper for VkImportFenceFdInfoKHR.

Extension: VK\\_KHR\\_external\\_fence\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportFenceFdInfoKHR.html)

"""
@auto_hash_equals struct ImportFenceFdInfoKHR <: HighLevelStruct
        next::Any
        fence::Fence
        flags::FenceImportFlag
        handle_type::ExternalFenceHandleTypeFlag
        fd::Int
    end

"""
High-level wrapper for VkFenceGetWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_fence\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceGetWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct FenceGetWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        fence::Fence
        handle_type::ExternalFenceHandleTypeFlag
    end

"""
High-level wrapper for VkImportFenceWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_fence\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportFenceWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ImportFenceWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        fence::Fence
        flags::FenceImportFlag
        handle_type::ExternalFenceHandleTypeFlag
        handle::OptionalPtr{vk.HANDLE}
        name::OptionalPtr{vk.LPCWSTR}
    end

"""
High-level wrapper for VkExportFenceCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportFenceCreateInfo.html)

"""
@auto_hash_equals struct ExportFenceCreateInfo <: HighLevelStruct
        next::Any
        handle_types::ExternalFenceHandleTypeFlag
    end

"""
High-level wrapper for VkPhysicalDeviceExternalFenceInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalFenceInfo.html)

"""
@auto_hash_equals struct PhysicalDeviceExternalFenceInfo <: HighLevelStruct
        next::Any
        handle_type::ExternalFenceHandleTypeFlag
    end

"""
High-level wrapper for VkSemaphoreGetFdInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreGetFdInfoKHR.html)

"""
@auto_hash_equals struct SemaphoreGetFdInfoKHR <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        handle_type::ExternalSemaphoreHandleTypeFlag
    end

"""
High-level wrapper for VkImportSemaphoreFdInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportSemaphoreFdInfoKHR.html)

"""
@auto_hash_equals struct ImportSemaphoreFdInfoKHR <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        flags::SemaphoreImportFlag
        handle_type::ExternalSemaphoreHandleTypeFlag
        fd::Int
    end

"""
High-level wrapper for VkSemaphoreGetWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreGetWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct SemaphoreGetWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        handle_type::ExternalSemaphoreHandleTypeFlag
    end

"""
High-level wrapper for VkImportSemaphoreWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportSemaphoreWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ImportSemaphoreWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        semaphore::Semaphore
        flags::SemaphoreImportFlag
        handle_type::ExternalSemaphoreHandleTypeFlag
        handle::OptionalPtr{vk.HANDLE}
        name::OptionalPtr{vk.LPCWSTR}
    end

"""
High-level wrapper for VkExportSemaphoreCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportSemaphoreCreateInfo.html)

"""
@auto_hash_equals struct ExportSemaphoreCreateInfo <: HighLevelStruct
        next::Any
        handle_types::ExternalSemaphoreHandleTypeFlag
    end

"""
High-level wrapper for VkPhysicalDeviceExternalSemaphoreInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfo.html)

"""
@auto_hash_equals struct PhysicalDeviceExternalSemaphoreInfo <: HighLevelStruct
        next::Any
        handle_type::ExternalSemaphoreHandleTypeFlag
    end

"""
High-level wrapper for VkImportMemoryHostPointerInfoEXT.

Extension: VK\\_EXT\\_external\\_memory\\_host

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryHostPointerInfoEXT.html)

"""
@auto_hash_equals struct ImportMemoryHostPointerInfoEXT <: HighLevelStruct
        next::Any
        handle_type::ExternalMemoryHandleTypeFlag
        host_pointer::Ptr{Cvoid}
    end

"""
High-level wrapper for VkMemoryGetFdInfoKHR.

Extension: VK\\_KHR\\_external\\_memory\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryGetFdInfoKHR.html)

"""
@auto_hash_equals struct MemoryGetFdInfoKHR <: HighLevelStruct
        next::Any
        memory::DeviceMemory
        handle_type::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkImportMemoryFdInfoKHR.

Extension: VK\\_KHR\\_external\\_memory\\_fd

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryFdInfoKHR.html)

"""
@auto_hash_equals struct ImportMemoryFdInfoKHR <: HighLevelStruct
        next::Any
        handle_type::ExternalMemoryHandleTypeFlag
        fd::Int
    end

"""
High-level wrapper for VkMemoryGetWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_memory\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryGetWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct MemoryGetWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        memory::DeviceMemory
        handle_type::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkImportMemoryWin32HandleInfoKHR.

Extension: VK\\_KHR\\_external\\_memory\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryWin32HandleInfoKHR.html)

"""
@auto_hash_equals struct ImportMemoryWin32HandleInfoKHR <: HighLevelStruct
        next::Any
        handle_type::ExternalMemoryHandleTypeFlag
        handle::OptionalPtr{vk.HANDLE}
        name::OptionalPtr{vk.LPCWSTR}
    end

"""
High-level wrapper for VkExportMemoryAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryAllocateInfo.html)

"""
@auto_hash_equals struct ExportMemoryAllocateInfo <: HighLevelStruct
        next::Any
        handle_types::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkExternalMemoryBufferCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryBufferCreateInfo.html)

"""
@auto_hash_equals struct ExternalMemoryBufferCreateInfo <: HighLevelStruct
        next::Any
        handle_types::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkExternalMemoryImageCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryImageCreateInfo.html)

"""
@auto_hash_equals struct ExternalMemoryImageCreateInfo <: HighLevelStruct
        next::Any
        handle_types::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkPhysicalDeviceExternalImageFormatInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfo.html)

"""
@auto_hash_equals struct PhysicalDeviceExternalImageFormatInfo <: HighLevelStruct
        next::Any
        handle_type::ExternalMemoryHandleTypeFlag
    end

"""
Minimalistic wrapper for VkExternalMemoryProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryProperties.html

"""
struct ExternalMemoryProperties <: ReturnedOnly
    external_memory_features::ExternalMemoryFeatureFlag
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlag
    compatible_handle_types::ExternalMemoryHandleTypeFlag
end

"""
High-level wrapper for VkPrivateDataSlotCreateInfoEXT.

Extension: VK\\_EXT\\_private\\_data

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPrivateDataSlotCreateInfoEXT.html)

"""
@auto_hash_equals struct PrivateDataSlotCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::PrivateDataSlotCreateFlagEXT
    end

"""
High-level wrapper for VkImportMemoryWin32HandleInfoNV.

Extension: VK\\_NV\\_external\\_memory\\_win32

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImportMemoryWin32HandleInfoNV.html)

"""
@auto_hash_equals struct ImportMemoryWin32HandleInfoNV <: HighLevelStruct
        next::Any
        handle_type::ExternalMemoryHandleTypeFlagNV
        handle::OptionalPtr{vk.HANDLE}
    end

"""
High-level wrapper for VkExportMemoryAllocateInfoNV.

Extension: VK\\_NV\\_external\\_memory

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExportMemoryAllocateInfoNV.html)

"""
@auto_hash_equals struct ExportMemoryAllocateInfoNV <: HighLevelStruct
        next::Any
        handle_types::ExternalMemoryHandleTypeFlagNV
    end

"""
High-level wrapper for VkExternalMemoryImageCreateInfoNV.

Extension: VK\\_NV\\_external\\_memory

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalMemoryImageCreateInfoNV.html)

"""
@auto_hash_equals struct ExternalMemoryImageCreateInfoNV <: HighLevelStruct
        next::Any
        handle_types::ExternalMemoryHandleTypeFlagNV
    end

"""
High-level wrapper for VkDebugReportCallbackCreateInfoEXT.

Extension: VK\\_EXT\\_debug\\_report

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugReportCallbackCreateInfoEXT.html)

"""
@auto_hash_equals struct DebugReportCallbackCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::DebugReportFlagEXT
        pfn_callback::FunctionPtr
        user_data::OptionalPtr{Ptr{Cvoid}}
    end

"""
High-level wrapper for VkCommandBufferInheritanceRenderPassTransformInfoQCOM.

Extension: VK\\_QCOM\\_render\\_pass\\_transform

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceRenderPassTransformInfoQCOM.html)

"""
@auto_hash_equals struct CommandBufferInheritanceRenderPassTransformInfoQCOM <: HighLevelStruct
        next::Any
        transform::SurfaceTransformFlagKHR
        render_area::Rect2D
    end

"""
High-level wrapper for VkCopyCommandTransformInfoQCOM.

Extension: VK\\_QCOM\\_rotated\\_copy\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyCommandTransformInfoQCOM.html)

"""
@auto_hash_equals struct CopyCommandTransformInfoQCOM <: HighLevelStruct
        next::Any
        transform::SurfaceTransformFlagKHR
    end

"""
High-level wrapper for VkRenderPassTransformBeginInfoQCOM.

Extension: VK\\_QCOM\\_render\\_pass\\_transform

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassTransformBeginInfoQCOM.html)

"""
@auto_hash_equals struct RenderPassTransformBeginInfoQCOM <: HighLevelStruct
        next::Any
        transform::SurfaceTransformFlagKHR
    end

"""
Minimalistic wrapper for VkDisplayPropertiesKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPropertiesKHR.html

"""
struct DisplayPropertiesKHR <: ReturnedOnly
    display::DisplayKHR
    display_name::String
    physical_dimensions::_Extent2D
    physical_resolution::_Extent2D
    supported_transforms::SurfaceTransformFlagKHR
    plane_reorder_possible::Bool
    persistent_content::Bool
end

"""
High-level wrapper for VkDisplaySurfaceCreateInfoKHR.

Extension: VK\\_KHR\\_display

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplaySurfaceCreateInfoKHR.html)

"""
@auto_hash_equals struct DisplaySurfaceCreateInfoKHR <: HighLevelStruct
        next::Any
        flags::UInt32
        display_mode::DisplayModeKHR
        plane_index::UInt32
        plane_stack_index::UInt32
        transform::SurfaceTransformFlagKHR
        global_alpha::Float32
        alpha_mode::DisplayPlaneAlphaFlagKHR
        image_extent::Extent2D
    end

"""
Minimalistic wrapper for VkDisplayPlaneCapabilitiesKHR.

Extension: VK_KHR_display

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneCapabilitiesKHR.html

"""
struct DisplayPlaneCapabilitiesKHR <: ReturnedOnly
    supported_alpha::DisplayPlaneAlphaFlagKHR
    min_src_position::_Offset2D
    max_src_position::_Offset2D
    min_src_extent::_Extent2D
    max_src_extent::_Extent2D
    min_dst_position::_Offset2D
    max_dst_position::_Offset2D
    min_dst_extent::_Extent2D
    max_dst_extent::_Extent2D
end

"""
High-level wrapper for VkSemaphoreWaitInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreWaitInfo.html)

"""
@auto_hash_equals struct SemaphoreWaitInfo <: HighLevelStruct
        next::Any
        flags::SemaphoreWaitFlag
        semaphores::Vector{Semaphore}
        values::Vector{UInt64}
    end

"""
High-level wrapper for VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.

Extension: VK\\_NV\\_fragment\\_shading\\_rate\\_enums

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.html)

"""
@auto_hash_equals struct PhysicalDeviceFragmentShadingRateEnumsPropertiesNV <: HighLevelStruct
        next::Any
        max_fragment_shading_rate_invocation_count::SampleCountFlag
    end

"""
High-level wrapper for VkSampleLocationsInfoEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSampleLocationsInfoEXT.html)

"""
@auto_hash_equals struct SampleLocationsInfoEXT <: HighLevelStruct
        next::Any
        sample_locations_per_pixel::SampleCountFlag
        sample_location_grid_size::Extent2D
        sample_locations::Vector{SampleLocationEXT}
    end

"""
High-level wrapper for VkPipelineSampleLocationsStateCreateInfoEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineSampleLocationsStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineSampleLocationsStateCreateInfoEXT <: HighLevelStruct
        next::Any
        sample_locations_enable::Bool
        sample_locations_info::SampleLocationsInfoEXT
    end

"""
High-level wrapper for VkSubpassSampleLocationsEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassSampleLocationsEXT.html)

"""
@auto_hash_equals struct SubpassSampleLocationsEXT <: HighLevelStruct
        subpass_index::UInt32
        sample_locations_info::SampleLocationsInfoEXT
    end

"""
High-level wrapper for VkAttachmentSampleLocationsEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentSampleLocationsEXT.html)

"""
@auto_hash_equals struct AttachmentSampleLocationsEXT <: HighLevelStruct
        attachment_index::UInt32
        sample_locations_info::SampleLocationsInfoEXT
    end

"""
High-level wrapper for VkRenderPassSampleLocationsBeginInfoEXT.

Extension: VK\\_EXT\\_sample\\_locations

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassSampleLocationsBeginInfoEXT.html)

"""
@auto_hash_equals struct RenderPassSampleLocationsBeginInfoEXT <: HighLevelStruct
        next::Any
        attachment_initial_sample_locations::Vector{AttachmentSampleLocationsEXT}
        post_subpass_sample_locations::Vector{SubpassSampleLocationsEXT}
    end

"""
High-level wrapper for VkPipelineMultisampleStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineMultisampleStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        rasterization_samples::SampleCountFlag
        sample_shading_enable::Bool
        min_sample_shading::Float32
        sample_mask::OptionalPtr{Vector{UInt32}}
        alpha_to_coverage_enable::Bool
        alpha_to_one_enable::Bool
    end

"""
Minimalistic wrapper for VkPhysicalDeviceLimits.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceLimits.html

"""
struct PhysicalDeviceLimits <: ReturnedOnly
    max_image_dimension_1_d::UInt32
    max_image_dimension_2_d::UInt32
    max_image_dimension_3_d::UInt32
    max_image_dimension_cube::UInt32
    max_image_array_layers::UInt32
    max_texel_buffer_elements::UInt32
    max_uniform_buffer_range::UInt32
    max_storage_buffer_range::UInt32
    max_push_constants_size::UInt32
    max_memory_allocation_count::UInt32
    max_sampler_allocation_count::UInt32
    buffer_image_granularity::UInt64
    sparse_address_space_size::UInt64
    max_bound_descriptor_sets::UInt32
    max_per_stage_descriptor_samplers::UInt32
    max_per_stage_descriptor_uniform_buffers::UInt32
    max_per_stage_descriptor_storage_buffers::UInt32
    max_per_stage_descriptor_sampled_images::UInt32
    max_per_stage_descriptor_storage_images::UInt32
    max_per_stage_descriptor_input_attachments::UInt32
    max_per_stage_resources::UInt32
    max_descriptor_set_samplers::UInt32
    max_descriptor_set_uniform_buffers::UInt32
    max_descriptor_set_uniform_buffers_dynamic::UInt32
    max_descriptor_set_storage_buffers::UInt32
    max_descriptor_set_storage_buffers_dynamic::UInt32
    max_descriptor_set_sampled_images::UInt32
    max_descriptor_set_storage_images::UInt32
    max_descriptor_set_input_attachments::UInt32
    max_vertex_input_attributes::UInt32
    max_vertex_input_bindings::UInt32
    max_vertex_input_attribute_offset::UInt32
    max_vertex_input_binding_stride::UInt32
    max_vertex_output_components::UInt32
    max_tessellation_generation_level::UInt32
    max_tessellation_patch_size::UInt32
    max_tessellation_control_per_vertex_input_components::UInt32
    max_tessellation_control_per_vertex_output_components::UInt32
    max_tessellation_control_per_patch_output_components::UInt32
    max_tessellation_control_total_output_components::UInt32
    max_tessellation_evaluation_input_components::UInt32
    max_tessellation_evaluation_output_components::UInt32
    max_geometry_shader_invocations::UInt32
    max_geometry_input_components::UInt32
    max_geometry_output_components::UInt32
    max_geometry_output_vertices::UInt32
    max_geometry_total_output_components::UInt32
    max_fragment_input_components::UInt32
    max_fragment_output_attachments::UInt32
    max_fragment_dual_src_attachments::UInt32
    max_fragment_combined_output_resources::UInt32
    max_compute_shared_memory_size::UInt32
    max_compute_work_group_count::NTuple{3, UInt32}
    max_compute_work_group_invocations::UInt32
    max_compute_work_group_size::NTuple{3, UInt32}
    sub_pixel_precision_bits::UInt32
    sub_texel_precision_bits::UInt32
    mipmap_precision_bits::UInt32
    max_draw_indexed_index_value::UInt32
    max_draw_indirect_count::UInt32
    max_sampler_lod_bias::Float32
    max_sampler_anisotropy::Float32
    max_viewports::UInt32
    max_viewport_dimensions::NTuple{2, UInt32}
    viewport_bounds_range::NTuple{2, Float32}
    viewport_sub_pixel_bits::UInt32
    min_memory_map_alignment::UInt
    min_texel_buffer_offset_alignment::UInt64
    min_uniform_buffer_offset_alignment::UInt64
    min_storage_buffer_offset_alignment::UInt64
    min_texel_offset::Int32
    max_texel_offset::UInt32
    min_texel_gather_offset::Int32
    max_texel_gather_offset::UInt32
    min_interpolation_offset::Float32
    max_interpolation_offset::Float32
    sub_pixel_interpolation_offset_bits::UInt32
    max_framebuffer_width::UInt32
    max_framebuffer_height::UInt32
    max_framebuffer_layers::UInt32
    framebuffer_color_sample_counts::SampleCountFlag
    framebuffer_depth_sample_counts::SampleCountFlag
    framebuffer_stencil_sample_counts::SampleCountFlag
    framebuffer_no_attachments_sample_counts::SampleCountFlag
    max_color_attachments::UInt32
    sampled_image_color_sample_counts::SampleCountFlag
    sampled_image_integer_sample_counts::SampleCountFlag
    sampled_image_depth_sample_counts::SampleCountFlag
    sampled_image_stencil_sample_counts::SampleCountFlag
    storage_image_sample_counts::SampleCountFlag
    max_sample_mask_words::UInt32
    timestamp_compute_and_graphics::Bool
    timestamp_period::Float32
    max_clip_distances::UInt32
    max_cull_distances::UInt32
    max_combined_clip_and_cull_distances::UInt32
    discrete_queue_priorities::UInt32
    point_size_range::NTuple{2, Float32}
    line_width_range::NTuple{2, Float32}
    point_size_granularity::Float32
    line_width_granularity::Float32
    strict_lines::Bool
    standard_sample_locations::Bool
    optimal_buffer_copy_offset_alignment::UInt64
    optimal_buffer_copy_row_pitch_alignment::UInt64
    non_coherent_atom_size::UInt64
end

"""
Minimalistic wrapper for VkImageFormatProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatProperties.html

"""
struct ImageFormatProperties <: ReturnedOnly
    max_extent::_Extent3D
    max_mip_levels::UInt32
    max_array_layers::UInt32
    sample_counts::SampleCountFlag
    max_resource_size::UInt64
end

"""
Minimalistic wrapper for VkExternalImageFormatPropertiesNV.

Extension: VK_NV_external_memory_capabilities

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalImageFormatPropertiesNV.html

"""
struct ExternalImageFormatPropertiesNV <: ReturnedOnly
    image_format_properties::ImageFormatProperties
    external_memory_features::ExternalMemoryFeatureFlagNV
    export_from_imported_handle_types::ExternalMemoryHandleTypeFlagNV
    compatible_handle_types::ExternalMemoryHandleTypeFlagNV
end

"""
High-level wrapper for VkCommandPoolCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandPoolCreateInfo.html)

"""
@auto_hash_equals struct CommandPoolCreateInfo <: HighLevelStruct
        next::Any
        flags::CommandPoolCreateFlag
        queue_family_index::UInt32
    end

"""
High-level wrapper for VkSubmitInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubmitInfo.html)

"""
@auto_hash_equals struct SubmitInfo <: HighLevelStruct
        next::Any
        wait_semaphores::Vector{Semaphore}
        wait_dst_stage_mask::Vector{PipelineStageFlag}
        command_buffers::Vector{CommandBuffer}
        signal_semaphores::Vector{Semaphore}
    end

"""
High-level wrapper for VkSparseMemoryBind.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseMemoryBind.html)

"""
@auto_hash_equals struct SparseMemoryBind <: HighLevelStruct
        resource_offset::UInt64
        size::UInt64
        memory::OptionalPtr{DeviceMemory}
        memory_offset::UInt64
        flags::SparseMemoryBindFlag
    end

"""
High-level wrapper for VkSparseImageOpaqueMemoryBindInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html)

"""
@auto_hash_equals struct SparseImageOpaqueMemoryBindInfo <: HighLevelStruct
        image::Image
        binds::Vector{SparseMemoryBind}
    end

"""
High-level wrapper for VkSparseBufferMemoryBindInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseBufferMemoryBindInfo.html)

"""
@auto_hash_equals struct SparseBufferMemoryBindInfo <: HighLevelStruct
        buffer::Buffer
        binds::Vector{SparseMemoryBind}
    end

"""
High-level wrapper for VkImagePlaneMemoryRequirementsInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImagePlaneMemoryRequirementsInfo.html)

"""
@auto_hash_equals struct ImagePlaneMemoryRequirementsInfo <: HighLevelStruct
        next::Any
        plane_aspect::ImageAspectFlag
    end

"""
High-level wrapper for VkBindImagePlaneMemoryInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindImagePlaneMemoryInfo.html)

"""
@auto_hash_equals struct BindImagePlaneMemoryInfo <: HighLevelStruct
        next::Any
        plane_aspect::ImageAspectFlag
    end

"""
High-level wrapper for VkInputAttachmentAspectReference.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkInputAttachmentAspectReference.html)

"""
@auto_hash_equals struct InputAttachmentAspectReference <: HighLevelStruct
        subpass::UInt32
        input_attachment_index::UInt32
        aspect_mask::ImageAspectFlag
    end

"""
High-level wrapper for VkRenderPassInputAttachmentAspectCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html)

"""
@auto_hash_equals struct RenderPassInputAttachmentAspectCreateInfo <: HighLevelStruct
        next::Any
        aspect_references::Vector{InputAttachmentAspectReference}
    end

"""
High-level wrapper for VkClearAttachment.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkClearAttachment.html)

"""
@auto_hash_equals struct ClearAttachment <: HighLevelStruct
        aspect_mask::ImageAspectFlag
        color_attachment::UInt32
        clear_value::ClearValue
    end

"""
High-level wrapper for VkImageSubresourceRange.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceRange.html)

"""
@auto_hash_equals struct ImageSubresourceRange <: HighLevelStruct
        aspect_mask::ImageAspectFlag
        base_mip_level::UInt32
        level_count::UInt32
        base_array_layer::UInt32
        layer_count::UInt32
    end

"""
High-level wrapper for VkImageSubresourceLayers.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresourceLayers.html)

"""
@auto_hash_equals struct ImageSubresourceLayers <: HighLevelStruct
        aspect_mask::ImageAspectFlag
        mip_level::UInt32
        base_array_layer::UInt32
        layer_count::UInt32
    end

"""
High-level wrapper for VkImageResolve2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageResolve2KHR.html)

"""
@auto_hash_equals struct ImageResolve2KHR <: HighLevelStruct
        next::Any
        src_subresource::ImageSubresourceLayers
        src_offset::Offset3D
        dst_subresource::ImageSubresourceLayers
        dst_offset::Offset3D
        extent::Extent3D
    end

"""
High-level wrapper for VkBufferImageCopy2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferImageCopy2KHR.html)

"""
@auto_hash_equals struct BufferImageCopy2KHR <: HighLevelStruct
        next::Any
        buffer_offset::UInt64
        buffer_row_length::UInt32
        buffer_image_height::UInt32
        image_subresource::ImageSubresourceLayers
        image_offset::Offset3D
        image_extent::Extent3D
    end

"""
High-level wrapper for VkImageBlit2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageBlit2KHR.html)

"""
@auto_hash_equals struct ImageBlit2KHR <: HighLevelStruct
        next::Any
        src_subresource::ImageSubresourceLayers
        src_offsets::NTuple{2, Offset3D}
        dst_subresource::ImageSubresourceLayers
        dst_offsets::NTuple{2, Offset3D}
    end

"""
High-level wrapper for VkImageCopy2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCopy2KHR.html)

"""
@auto_hash_equals struct ImageCopy2KHR <: HighLevelStruct
        next::Any
        src_subresource::ImageSubresourceLayers
        src_offset::Offset3D
        dst_subresource::ImageSubresourceLayers
        dst_offset::Offset3D
        extent::Extent3D
    end

"""
High-level wrapper for VkImageResolve.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageResolve.html)

"""
@auto_hash_equals struct ImageResolve <: HighLevelStruct
        src_subresource::ImageSubresourceLayers
        src_offset::Offset3D
        dst_subresource::ImageSubresourceLayers
        dst_offset::Offset3D
        extent::Extent3D
    end

"""
High-level wrapper for VkBufferImageCopy.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferImageCopy.html)

"""
@auto_hash_equals struct BufferImageCopy <: HighLevelStruct
        buffer_offset::UInt64
        buffer_row_length::UInt32
        buffer_image_height::UInt32
        image_subresource::ImageSubresourceLayers
        image_offset::Offset3D
        image_extent::Extent3D
    end

"""
High-level wrapper for VkImageBlit.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageBlit.html)

"""
@auto_hash_equals struct ImageBlit <: HighLevelStruct
        src_subresource::ImageSubresourceLayers
        src_offsets::NTuple{2, Offset3D}
        dst_subresource::ImageSubresourceLayers
        dst_offsets::NTuple{2, Offset3D}
    end

"""
High-level wrapper for VkImageCopy.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCopy.html)

"""
@auto_hash_equals struct ImageCopy <: HighLevelStruct
        src_subresource::ImageSubresourceLayers
        src_offset::Offset3D
        dst_subresource::ImageSubresourceLayers
        dst_offset::Offset3D
        extent::Extent3D
    end

"""
High-level wrapper for VkImageSubresource.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageSubresource.html)

"""
@auto_hash_equals struct ImageSubresource <: HighLevelStruct
        aspect_mask::ImageAspectFlag
        mip_level::UInt32
        array_layer::UInt32
    end

"""
High-level wrapper for VkSparseImageMemoryBind.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBind.html)

"""
@auto_hash_equals struct SparseImageMemoryBind <: HighLevelStruct
        subresource::ImageSubresource
        offset::Offset3D
        extent::Extent3D
        memory::OptionalPtr{DeviceMemory}
        memory_offset::UInt64
        flags::SparseMemoryBindFlag
    end

"""
High-level wrapper for VkSparseImageMemoryBindInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryBindInfo.html)

"""
@auto_hash_equals struct SparseImageMemoryBindInfo <: HighLevelStruct
        image::Image
        binds::Vector{SparseImageMemoryBind}
    end

"""
High-level wrapper for VkBindSparseInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindSparseInfo.html)

"""
@auto_hash_equals struct BindSparseInfo <: HighLevelStruct
        next::Any
        wait_semaphores::Vector{Semaphore}
        buffer_binds::Vector{SparseBufferMemoryBindInfo}
        image_opaque_binds::Vector{SparseImageOpaqueMemoryBindInfo}
        image_binds::Vector{SparseImageMemoryBindInfo}
        signal_semaphores::Vector{Semaphore}
    end

"""
Minimalistic wrapper for VkSparseImageFormatProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageFormatProperties.html

"""
struct SparseImageFormatProperties <: ReturnedOnly
    aspect_mask::ImageAspectFlag
    image_granularity::_Extent3D
    flags::SparseImageFormatFlag
end

"""
Minimalistic wrapper for VkSparseImageMemoryRequirements.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryRequirements.html

"""
struct SparseImageMemoryRequirements <: ReturnedOnly
    format_properties::SparseImageFormatProperties
    image_mip_tail_first_lod::UInt32
    image_mip_tail_size::UInt64
    image_mip_tail_offset::UInt64
    image_mip_tail_stride::UInt64
end

"""
High-level wrapper for VkCommandBufferInheritanceInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferInheritanceInfo.html)

"""
@auto_hash_equals struct CommandBufferInheritanceInfo <: HighLevelStruct
        next::Any
        render_pass::OptionalPtr{RenderPass}
        subpass::UInt32
        framebuffer::OptionalPtr{Framebuffer}
        occlusion_query_enable::Bool
        query_flags::QueryControlFlag
        pipeline_statistics::QueryPipelineStatisticFlag
    end

"""
High-level wrapper for VkCommandBufferBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferBeginInfo.html)

"""
@auto_hash_equals struct CommandBufferBeginInfo <: HighLevelStruct
        next::Any
        flags::CommandBufferUsageFlag
        inheritance_info::OptionalPtr{CommandBufferInheritanceInfo}
    end

"""
Minimalistic wrapper for VkDrmFormatModifierPropertiesEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrmFormatModifierPropertiesEXT.html

"""
struct DrmFormatModifierPropertiesEXT <: ReturnedOnly
    drm_format_modifier::UInt64
    drm_format_modifier_plane_count::UInt32
    drm_format_modifier_tiling_features::FormatFeatureFlag
end

"""
Minimalistic wrapper for VkFormatProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormatProperties.html

"""
struct FormatProperties <: ReturnedOnly
    linear_tiling_features::FormatFeatureFlag
    optimal_tiling_features::FormatFeatureFlag
    buffer_features::FormatFeatureFlag
end

"""
High-level wrapper for VkFenceCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFenceCreateInfo.html)

"""
@auto_hash_equals struct FenceCreateInfo <: HighLevelStruct
        next::Any
        flags::FenceCreateFlag
    end

"""
High-level wrapper for VkImageStencilUsageCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageStencilUsageCreateInfo.html)

"""
@auto_hash_equals struct ImageStencilUsageCreateInfo <: HighLevelStruct
        next::Any
        stencil_usage::ImageUsageFlag
    end

"""
High-level wrapper for VkImageViewUsageCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewUsageCreateInfo.html)

"""
@auto_hash_equals struct ImageViewUsageCreateInfo <: HighLevelStruct
        next::Any
        usage::ImageUsageFlag
    end

"""
Minimalistic wrapper for VkSurfaceCapabilitiesKHR.

Extension: VK_KHR_surface

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilitiesKHR.html

"""
struct SurfaceCapabilitiesKHR <: ReturnedOnly
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::_Extent2D
    min_image_extent::_Extent2D
    max_image_extent::_Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagKHR
    current_transform::SurfaceTransformFlagKHR
    supported_composite_alpha::CompositeAlphaFlagKHR
    supported_usage_flags::ImageUsageFlag
end

"""
High-level wrapper for VkPushConstantRange.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPushConstantRange.html)

"""
@auto_hash_equals struct PushConstantRange <: HighLevelStruct
        stage_flags::ShaderStageFlag
        offset::UInt32
        size::UInt32
    end

"""
High-level wrapper for VkPipelineLayoutCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineLayoutCreateInfo.html)

"""
@auto_hash_equals struct PipelineLayoutCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        set_layouts::Vector{DescriptorSetLayout}
        push_constant_ranges::Vector{PushConstantRange}
    end

"""
High-level wrapper for VkPipelineShaderStageCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineShaderStageCreateInfo.html)

"""
@auto_hash_equals struct PipelineShaderStageCreateInfo <: HighLevelStruct
        next::Any
        flags::PipelineShaderStageCreateFlag
        stage::ShaderStageFlag
        _module::ShaderModule
        name::String
        specialization_info::OptionalPtr{SpecializationInfo}
    end

"""
High-level wrapper for VkComputePipelineCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComputePipelineCreateInfo.html)

"""
@auto_hash_equals struct ComputePipelineCreateInfo <: HighLevelStruct
        next::Any
        flags::PipelineCreateFlag
        stage::PipelineShaderStageCreateInfo
        layout::PipelineLayout
        base_pipeline_handle::OptionalPtr{Pipeline}
        base_pipeline_index::Int32
    end

"""
Minimalistic wrapper for VkShaderStatisticsInfoAMD.

Extension: VK_AMD_shader_info

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShaderStatisticsInfoAMD.html

"""
struct ShaderStatisticsInfoAMD <: ReturnedOnly
    shader_stage_mask::ShaderStageFlag
    resource_usage::ShaderResourceUsageAMD
    num_physical_vgprs::UInt32
    num_physical_sgprs::UInt32
    num_available_vgprs::UInt32
    num_available_sgprs::UInt32
    compute_work_group_size::NTuple{3, UInt32}
end

"""
High-level wrapper for VkPhysicalDeviceExternalBufferInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html)

"""
@auto_hash_equals struct PhysicalDeviceExternalBufferInfo <: HighLevelStruct
        next::Any
        flags::BufferCreateFlag
        usage::BufferUsageFlag
        handle_type::ExternalMemoryHandleTypeFlag
    end

"""
High-level wrapper for VkSubpassDependency2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency2.html)

"""
@auto_hash_equals struct SubpassDependency2 <: HighLevelStruct
        next::Any
        src_subpass::UInt32
        dst_subpass::UInt32
        src_stage_mask::PipelineStageFlag
        dst_stage_mask::PipelineStageFlag
        src_access_mask::AccessFlag
        dst_access_mask::AccessFlag
        dependency_flags::DependencyFlag
        view_offset::Int32
    end

"""
High-level wrapper for VkSubpassDependency.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDependency.html)

"""
@auto_hash_equals struct SubpassDependency <: HighLevelStruct
        src_subpass::UInt32
        dst_subpass::UInt32
        src_stage_mask::PipelineStageFlag
        dst_stage_mask::PipelineStageFlag
        src_access_mask::AccessFlag
        dst_access_mask::AccessFlag
        dependency_flags::DependencyFlag
    end

"""
High-level wrapper for VkBufferMemoryBarrier.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferMemoryBarrier.html)

"""
@auto_hash_equals struct BufferMemoryBarrier <: HighLevelStruct
        next::Any
        src_access_mask::AccessFlag
        dst_access_mask::AccessFlag
        src_queue_family_index::UInt32
        dst_queue_family_index::UInt32
        buffer::Buffer
        offset::UInt64
        size::UInt64
    end

"""
High-level wrapper for VkMemoryBarrier.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryBarrier.html)

"""
@auto_hash_equals struct MemoryBarrier <: HighLevelStruct
        next::Any
        src_access_mask::AccessFlag
        dst_access_mask::AccessFlag
    end

"""
Minimalistic wrapper for VkMemoryHeap.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryHeap.html

"""
struct MemoryHeap <: ReturnedOnly
    size::UInt64
    flags::MemoryHeapFlag
end

"""
Minimalistic wrapper for VkMemoryType.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryType.html

"""
struct MemoryType <: ReturnedOnly
    property_flags::MemoryPropertyFlag
    heap_index::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceMemoryProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryProperties.html

"""
struct PhysicalDeviceMemoryProperties <: ReturnedOnly
    memory_type_count::UInt32
    memory_types::NTuple{Int(VK_MAX_MEMORY_TYPES), MemoryType}
    memory_heap_count::UInt32
    memory_heaps::NTuple{Int(VK_MAX_MEMORY_HEAPS), MemoryHeap}
end

"""
High-level wrapper for VkDeviceQueueInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueInfo2.html)

"""
@auto_hash_equals struct DeviceQueueInfo2 <: HighLevelStruct
        next::Any
        flags::DeviceQueueCreateFlag
        queue_family_index::UInt32
        queue_index::UInt32
    end

"""
High-level wrapper for VkDeviceQueueCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueCreateInfo.html)

"""
@auto_hash_equals struct DeviceQueueCreateInfo <: HighLevelStruct
        next::Any
        flags::DeviceQueueCreateFlag
        queue_family_index::UInt32
        queue_priorities::Vector{Float32}
    end

"""
High-level wrapper for VkDeviceCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceCreateInfo.html)

"""
@auto_hash_equals struct DeviceCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        queue_create_infos::Vector{DeviceQueueCreateInfo}
        enabled_layer_names::Vector{String}
        enabled_extension_names::Vector{String}
        enabled_features::OptionalPtr{PhysicalDeviceFeatures}
    end

"""
Minimalistic wrapper for VkQueueFamilyProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyProperties.html

"""
struct QueueFamilyProperties <: ReturnedOnly
    queue_flags::QueueFlag
    queue_count::UInt32
    timestamp_valid_bits::UInt32
    min_image_transfer_granularity::_Extent3D
end

"""
High-level wrapper for VkPipelineCacheCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCacheCreateInfo.html)

"""
@auto_hash_equals struct PipelineCacheCreateInfo <: HighLevelStruct
        next::Any
        flags::PipelineCacheCreateFlag
        initial_data_size::OptionalPtr{UInt}
        initial_data::Ptr{Cvoid}
    end

"""
High-level wrapper for VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.

Extension: VK\\_EXT\\_provoking\\_vertex

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineRasterizationProvokingVertexStateCreateInfoEXT <: HighLevelStruct
        next::Any
        provoking_vertex_mode::ProvokingVertexModeEXT
    end

"""
High-level wrapper for VkPipelineFragmentShadingRateEnumStateCreateInfoNV.

Extension: VK\\_NV\\_fragment\\_shading\\_rate\\_enums

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineFragmentShadingRateEnumStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineFragmentShadingRateEnumStateCreateInfoNV <: HighLevelStruct
        next::Any
        shading_rate_type::FragmentShadingRateTypeNV
        shading_rate::FragmentShadingRateNV
        combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}
    end

"""
High-level wrapper for VkPipelineFragmentShadingRateStateCreateInfoKHR.

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineFragmentShadingRateStateCreateInfoKHR.html)

"""
@auto_hash_equals struct PipelineFragmentShadingRateStateCreateInfoKHR <: HighLevelStruct
        next::Any
        fragment_size::Extent2D
        combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}
    end

"""
High-level wrapper for VkPipelineRasterizationLineStateCreateInfoEXT.

Extension: VK\\_EXT\\_line\\_rasterization

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationLineStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineRasterizationLineStateCreateInfoEXT <: HighLevelStruct
        next::Any
        line_rasterization_mode::LineRasterizationModeEXT
        stippled_line_enable::Bool
        line_stipple_factor::UInt32
        line_stipple_pattern::UInt16
    end

"""
High-level wrapper for VkPerformanceValueINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceValueINTEL.html)

"""
@auto_hash_equals struct PerformanceValueINTEL <: HighLevelStruct
        type::PerformanceValueTypeINTEL
        data::PerformanceValueDataINTEL
    end

"""
High-level wrapper for VkPerformanceOverrideInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceOverrideInfoINTEL.html)

"""
@auto_hash_equals struct PerformanceOverrideInfoINTEL <: HighLevelStruct
        next::Any
        type::PerformanceOverrideTypeINTEL
        enable::Bool
        parameter::UInt64
    end

"""
High-level wrapper for VkQueryPoolPerformanceQueryCreateInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolPerformanceQueryCreateInfoINTEL.html)

"""
@auto_hash_equals struct QueryPoolPerformanceQueryCreateInfoINTEL <: HighLevelStruct
        next::Any
        performance_counters_sampling::QueryPoolSamplingModeINTEL
    end

"""
High-level wrapper for VkPerformanceConfigurationAcquireInfoINTEL.

Extension: VK\\_INTEL\\_performance\\_query

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceConfigurationAcquireInfoINTEL.html)

"""
@auto_hash_equals struct PerformanceConfigurationAcquireInfoINTEL <: HighLevelStruct
        next::Any
        type::PerformanceConfigurationTypeINTEL
    end

"""
High-level wrapper for VkSurfaceFullScreenExclusiveInfoEXT.

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFullScreenExclusiveInfoEXT.html)

"""
@auto_hash_equals struct SurfaceFullScreenExclusiveInfoEXT <: HighLevelStruct
        next::Any
        full_screen_exclusive::FullScreenExclusiveEXT
    end

"""
High-level wrapper for VkCooperativeMatrixPropertiesNV.

Extension: VK\\_NV\\_cooperative\\_matrix

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCooperativeMatrixPropertiesNV.html)

"""
@auto_hash_equals struct CooperativeMatrixPropertiesNV <: HighLevelStruct
        next::Any
        m_size::UInt32
        n_size::UInt32
        k_size::UInt32
        a_type::ComponentTypeNV
        b_type::ComponentTypeNV
        c_type::ComponentTypeNV
        d_type::ComponentTypeNV
        scope::ScopeNV
    end

"""
High-level wrapper for VkDeviceMemoryOverallocationCreateInfoAMD.

Extension: VK\\_AMD\\_memory\\_overallocation\\_behavior

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryOverallocationCreateInfoAMD.html)

"""
@auto_hash_equals struct DeviceMemoryOverallocationCreateInfoAMD <: HighLevelStruct
        next::Any
        overallocation_behavior::MemoryOverallocationBehaviorAMD
    end

"""
High-level wrapper for VkRayTracingShaderGroupCreateInfoKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingShaderGroupCreateInfoKHR.html)

"""
@auto_hash_equals struct RayTracingShaderGroupCreateInfoKHR <: HighLevelStruct
        next::Any
        type::RayTracingShaderGroupTypeKHR
        general_shader::UInt32
        closest_hit_shader::UInt32
        any_hit_shader::UInt32
        intersection_shader::UInt32
        shader_group_capture_replay_handle::OptionalPtr{Ptr{Cvoid}}
    end

"""
High-level wrapper for VkRayTracingShaderGroupCreateInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingShaderGroupCreateInfoNV.html)

"""
@auto_hash_equals struct RayTracingShaderGroupCreateInfoNV <: HighLevelStruct
        next::Any
        type::RayTracingShaderGroupTypeKHR
        general_shader::UInt32
        closest_hit_shader::UInt32
        any_hit_shader::UInt32
        intersection_shader::UInt32
    end

"""
High-level wrapper for VkRayTracingPipelineCreateInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineCreateInfoNV.html)

"""
@auto_hash_equals struct RayTracingPipelineCreateInfoNV <: HighLevelStruct
        next::Any
        flags::PipelineCreateFlag
        stages::Vector{PipelineShaderStageCreateInfo}
        groups::Vector{RayTracingShaderGroupCreateInfoNV}
        max_recursion_depth::UInt32
        layout::PipelineLayout
        base_pipeline_handle::OptionalPtr{Pipeline}
        base_pipeline_index::Int32
    end

"""
High-level wrapper for VkAccelerationStructureMemoryRequirementsInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureMemoryRequirementsInfoNV.html)

"""
@auto_hash_equals struct AccelerationStructureMemoryRequirementsInfoNV <: HighLevelStruct
        next::Any
        type::AccelerationStructureMemoryRequirementsTypeNV
        acceleration_structure::AccelerationStructureNV
    end

"""
High-level wrapper for VkAccelerationStructureGeometryKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryKHR.html)

"""
@auto_hash_equals struct AccelerationStructureGeometryKHR <: HighLevelStruct
        next::Any
        geometry_type::GeometryTypeKHR
        geometry::AccelerationStructureGeometryDataKHR
        flags::GeometryFlagKHR
    end

"""
High-level wrapper for VkAccelerationStructureCreateInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureCreateInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureCreateInfoKHR <: HighLevelStruct
        next::Any
        create_flags::AccelerationStructureCreateFlagKHR
        buffer::Buffer
        offset::UInt64
        size::UInt64
        type::AccelerationStructureTypeKHR
        device_address::UInt64
    end

"""
High-level wrapper for VkAccelerationStructureBuildGeometryInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureBuildGeometryInfoKHR.html)

"""
@auto_hash_equals struct AccelerationStructureBuildGeometryInfoKHR <: HighLevelStruct
        next::Any
        type::AccelerationStructureTypeKHR
        flags::BuildAccelerationStructureFlagKHR
        mode::BuildAccelerationStructureModeKHR
        src_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
        dst_acceleration_structure::OptionalPtr{AccelerationStructureKHR}
        geometries::OptionalPtr{Vector{AccelerationStructureGeometryKHR}}
        geometries_2::OptionalPtr{Vector{AccelerationStructureGeometryKHR}}
        scratch_data::DeviceOrHostAddressKHR
    end

"""
High-level wrapper for VkCopyMemoryToAccelerationStructureInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyMemoryToAccelerationStructureInfoKHR.html)

"""
@auto_hash_equals struct CopyMemoryToAccelerationStructureInfoKHR <: HighLevelStruct
        next::Any
        src::DeviceOrHostAddressConstKHR
        dst::AccelerationStructureKHR
        mode::CopyAccelerationStructureModeKHR
    end

"""
High-level wrapper for VkCopyAccelerationStructureToMemoryInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyAccelerationStructureToMemoryInfoKHR.html)

"""
@auto_hash_equals struct CopyAccelerationStructureToMemoryInfoKHR <: HighLevelStruct
        next::Any
        src::AccelerationStructureKHR
        dst::DeviceOrHostAddressKHR
        mode::CopyAccelerationStructureModeKHR
    end

"""
High-level wrapper for VkCopyAccelerationStructureInfoKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyAccelerationStructureInfoKHR.html)

"""
@auto_hash_equals struct CopyAccelerationStructureInfoKHR <: HighLevelStruct
        next::Any
        src::AccelerationStructureKHR
        dst::AccelerationStructureKHR
        mode::CopyAccelerationStructureModeKHR
    end

"""
High-level wrapper for VkCoarseSampleOrderCustomNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCoarseSampleOrderCustomNV.html)

"""
@auto_hash_equals struct CoarseSampleOrderCustomNV <: HighLevelStruct
        shading_rate::ShadingRatePaletteEntryNV
        sample_count::UInt32
        sample_locations::Vector{CoarseSampleLocationNV}
    end

"""
High-level wrapper for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineViewportCoarseSampleOrderStateCreateInfoNV <: HighLevelStruct
        next::Any
        sample_order_type::CoarseSampleOrderTypeNV
        custom_sample_orders::Vector{CoarseSampleOrderCustomNV}
    end

"""
High-level wrapper for VkShadingRatePaletteNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkShadingRatePaletteNV.html)

"""
@auto_hash_equals struct ShadingRatePaletteNV <: HighLevelStruct
        shading_rate_palette_entries::Vector{ShadingRatePaletteEntryNV}
    end

"""
High-level wrapper for VkPipelineViewportShadingRateImageStateCreateInfoNV.

Extension: VK\\_NV\\_shading\\_rate\\_image

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportShadingRateImageStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineViewportShadingRateImageStateCreateInfoNV <: HighLevelStruct
        next::Any
        shading_rate_image_enable::Bool
        shading_rate_palettes::Vector{ShadingRatePaletteNV}
    end

"""
High-level wrapper for VkPipelineRasterizationConservativeStateCreateInfoEXT.

Extension: VK\\_EXT\\_conservative\\_rasterization

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationConservativeStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineRasterizationConservativeStateCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        conservative_rasterization_mode::ConservativeRasterizationModeEXT
        extra_primitive_overestimation_size::Float32
    end

"""
High-level wrapper for VkDeviceQueueGlobalPriorityCreateInfoEXT.

Extension: VK\\_EXT\\_global\\_priority

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceQueueGlobalPriorityCreateInfoEXT.html)

"""
@auto_hash_equals struct DeviceQueueGlobalPriorityCreateInfoEXT <: HighLevelStruct
        next::Any
        global_priority::QueueGlobalPriorityEXT
    end

"""
High-level wrapper for VkPipelineCoverageReductionStateCreateInfoNV.

Extension: VK\\_NV\\_coverage\\_reduction\\_mode

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageReductionStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineCoverageReductionStateCreateInfoNV <: HighLevelStruct
        next::Any
        flags::UInt32
        coverage_reduction_mode::CoverageReductionModeNV
    end

"""
High-level wrapper for VkPipelineCoverageModulationStateCreateInfoNV.

Extension: VK\\_NV\\_framebuffer\\_mixed\\_samples

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineCoverageModulationStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineCoverageModulationStateCreateInfoNV <: HighLevelStruct
        next::Any
        flags::UInt32
        coverage_modulation_mode::CoverageModulationModeNV
        coverage_modulation_table_enable::Bool
        coverage_modulation_table::OptionalPtr{Vector{Float32}}
    end

"""
High-level wrapper for VkPipelineColorBlendAdvancedStateCreateInfoEXT.

Extension: VK\\_EXT\\_blend\\_operation\\_advanced

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendAdvancedStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineColorBlendAdvancedStateCreateInfoEXT <: HighLevelStruct
        next::Any
        src_premultiplied::Bool
        dst_premultiplied::Bool
        blend_overlap::BlendOverlapEXT
    end

"""
High-level wrapper for VkPipelineTessellationDomainOriginStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineTessellationDomainOriginStateCreateInfo <: HighLevelStruct
        next::Any
        domain_origin::TessellationDomainOrigin
    end

"""
High-level wrapper for VkSamplerReductionModeCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerReductionModeCreateInfo.html)

"""
@auto_hash_equals struct SamplerReductionModeCreateInfo <: HighLevelStruct
        next::Any
        reduction_mode::SamplerReductionMode
    end

"""
High-level wrapper for VkPipelineDiscardRectangleStateCreateInfoEXT.

Extension: VK\\_EXT\\_discard\\_rectangles

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDiscardRectangleStateCreateInfoEXT.html)

"""
@auto_hash_equals struct PipelineDiscardRectangleStateCreateInfoEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        discard_rectangle_mode::DiscardRectangleModeEXT
        discard_rectangles::Vector{Rect2D}
    end

"""
High-level wrapper for VkViewportSwizzleNV.

Extension: VK\\_NV\\_viewport\\_swizzle

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkViewportSwizzleNV.html)

"""
@auto_hash_equals struct ViewportSwizzleNV <: HighLevelStruct
        x::ViewportCoordinateSwizzleNV
        y::ViewportCoordinateSwizzleNV
        z::ViewportCoordinateSwizzleNV
        w::ViewportCoordinateSwizzleNV
    end

"""
High-level wrapper for VkPipelineViewportSwizzleStateCreateInfoNV.

Extension: VK\\_NV\\_viewport\\_swizzle

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineViewportSwizzleStateCreateInfoNV.html)

"""
@auto_hash_equals struct PipelineViewportSwizzleStateCreateInfoNV <: HighLevelStruct
        next::Any
        flags::UInt32
        viewport_swizzles::Vector{ViewportSwizzleNV}
    end

"""
High-level wrapper for VkDisplayEventInfoEXT.

Extension: VK\\_EXT\\_display\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayEventInfoEXT.html)

"""
@auto_hash_equals struct DisplayEventInfoEXT <: HighLevelStruct
        next::Any
        display_event::DisplayEventTypeEXT
    end

"""
High-level wrapper for VkDeviceEventInfoEXT.

Extension: VK\\_EXT\\_display\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceEventInfoEXT.html)

"""
@auto_hash_equals struct DeviceEventInfoEXT <: HighLevelStruct
        next::Any
        device_event::DeviceEventTypeEXT
    end

"""
High-level wrapper for VkDisplayPowerInfoEXT.

Extension: VK\\_EXT\\_display\\_control

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPowerInfoEXT.html)

"""
@auto_hash_equals struct DisplayPowerInfoEXT <: HighLevelStruct
        next::Any
        power_state::DisplayPowerStateEXT
    end

"""
High-level wrapper for VkValidationFeaturesEXT.

Extension: VK\\_EXT\\_validation\\_features

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationFeaturesEXT.html)

"""
@auto_hash_equals struct ValidationFeaturesEXT <: HighLevelStruct
        next::Any
        enabled_validation_features::Vector{ValidationFeatureEnableEXT}
        disabled_validation_features::Vector{ValidationFeatureDisableEXT}
    end

"""
High-level wrapper for VkValidationFlagsEXT.

Extension: VK\\_EXT\\_validation\\_flags

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkValidationFlagsEXT.html)

"""
@auto_hash_equals struct ValidationFlagsEXT <: HighLevelStruct
        next::Any
        disabled_validation_checks::Vector{ValidationCheckEXT}
    end

"""
High-level wrapper for VkPipelineRasterizationStateRasterizationOrderAMD.

Extension: VK\\_AMD\\_rasterization\\_order

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateRasterizationOrderAMD.html)

"""
@auto_hash_equals struct PipelineRasterizationStateRasterizationOrderAMD <: HighLevelStruct
        next::Any
        rasterization_order::RasterizationOrderAMD
    end

"""
High-level wrapper for VkDebugMarkerObjectTagInfoEXT.

Extension: VK\\_EXT\\_debug\\_marker

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerObjectTagInfoEXT.html)

"""
@auto_hash_equals struct DebugMarkerObjectTagInfoEXT <: HighLevelStruct
        next::Any
        object_type::DebugReportObjectTypeEXT
        object::UInt64
        tag_name::UInt64
        tag_size::UInt
        tag::Ptr{Cvoid}
    end

"""
High-level wrapper for VkDebugMarkerObjectNameInfoEXT.

Extension: VK\\_EXT\\_debug\\_marker

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugMarkerObjectNameInfoEXT.html)

"""
@auto_hash_equals struct DebugMarkerObjectNameInfoEXT <: HighLevelStruct
        next::Any
        object_type::DebugReportObjectTypeEXT
        object::UInt64
        object_name::String
    end

"""
High-level wrapper for VkCalibratedTimestampInfoEXT.

Extension: VK\\_EXT\\_calibrated\\_timestamps

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCalibratedTimestampInfoEXT.html)

"""
@auto_hash_equals struct CalibratedTimestampInfoEXT <: HighLevelStruct
        next::Any
        time_domain::TimeDomainEXT
    end

"""
High-level wrapper for VkSemaphoreTypeCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSemaphoreTypeCreateInfo.html)

"""
@auto_hash_equals struct SemaphoreTypeCreateInfo <: HighLevelStruct
        next::Any
        semaphore_type::SemaphoreType
        initial_value::UInt64
    end

"""
High-level wrapper for VkDebugUtilsObjectTagInfoEXT.

Extension: VK\\_EXT\\_debug\\_utils

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsObjectTagInfoEXT.html)

"""
@auto_hash_equals struct DebugUtilsObjectTagInfoEXT <: HighLevelStruct
        next::Any
        object_type::ObjectType
        object_handle::UInt64
        tag_name::UInt64
        tag_size::UInt
        tag::Ptr{Cvoid}
    end

"""
High-level wrapper for VkDebugUtilsObjectNameInfoEXT.

Extension: VK\\_EXT\\_debug\\_utils

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsObjectNameInfoEXT.html)

"""
@auto_hash_equals struct DebugUtilsObjectNameInfoEXT <: HighLevelStruct
        next::Any
        object_type::ObjectType
        object_handle::UInt64
        object_name::String
    end

"""
High-level wrapper for VkDebugUtilsMessengerCallbackDataEXT.

Extension: VK\\_EXT\\_debug\\_utils

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDebugUtilsMessengerCallbackDataEXT.html)

"""
@auto_hash_equals struct DebugUtilsMessengerCallbackDataEXT <: HighLevelStruct
        next::Any
        flags::UInt32
        message_id_name::String
        message_id_number::Int32
        message::String
        queue_labels::Vector{DebugUtilsLabelEXT}
        cmd_buf_labels::Vector{DebugUtilsLabelEXT}
        objects::Vector{DebugUtilsObjectNameInfoEXT}
    end

"""
High-level wrapper for VkPipelineDynamicStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDynamicStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineDynamicStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        dynamic_states::Vector{DynamicState}
    end

"""
High-level wrapper for VkRayTracingPipelineCreateInfoKHR.

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRayTracingPipelineCreateInfoKHR.html)

"""
@auto_hash_equals struct RayTracingPipelineCreateInfoKHR <: HighLevelStruct
        next::Any
        flags::PipelineCreateFlag
        stages::Vector{PipelineShaderStageCreateInfo}
        groups::Vector{RayTracingShaderGroupCreateInfoKHR}
        max_pipeline_ray_recursion_depth::UInt32
        library_info::OptionalPtr{PipelineLibraryCreateInfoKHR}
        library_interface::OptionalPtr{RayTracingPipelineInterfaceCreateInfoKHR}
        dynamic_state::OptionalPtr{PipelineDynamicStateCreateInfo}
        layout::PipelineLayout
        base_pipeline_handle::OptionalPtr{Pipeline}
        base_pipeline_index::Int32
    end

"""
High-level wrapper for VkPresentInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPresentInfoKHR.html)

"""
@auto_hash_equals struct PresentInfoKHR <: HighLevelStruct
        next::Any
        wait_semaphores::Vector{Semaphore}
        swapchains::Vector{SwapchainKHR}
        image_indices::Vector{UInt32}
        results::OptionalPtr{Vector{Result}}
    end

"""
High-level wrapper for VkSubpassBeginInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassBeginInfo.html)

"""
@auto_hash_equals struct SubpassBeginInfo <: HighLevelStruct
        next::Any
        contents::SubpassContents
    end

"""
Minimalistic wrapper for VkPhysicalDeviceProvokingVertexPropertiesEXT.

Extension: VK_EXT_provoking_vertex

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProvokingVertexPropertiesEXT.html

"""
struct PhysicalDeviceProvokingVertexPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    provoking_vertex_mode_per_pipeline::Bool
    transform_feedback_preserves_triangle_fan_provoking_vertex::Bool
end

"""
Minimalistic wrapper for VkCheckpointData2NV.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCheckpointData2NV.html

"""
struct CheckpointData2NV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stage::UInt64
    checkpoint_marker::Ptr{Cvoid}
end

"""
Minimalistic wrapper for VkQueueFamilyCheckpointProperties2NV.

Extension: VK_KHR_synchronization2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyCheckpointProperties2NV.html

"""
struct QueueFamilyCheckpointProperties2NV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    checkpoint_execution_stage_mask::UInt64
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShadingRateKHR.

Extension: VK_KHR_fragment_shading_rate

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRateKHR.html

"""
struct PhysicalDeviceFragmentShadingRateKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    sample_counts::SampleCountFlag
    fragment_size::_Extent2D
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentShadingRatePropertiesKHR.

Extension: VK_KHR_fragment_shading_rate

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html

"""
struct PhysicalDeviceFragmentShadingRatePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_fragment_shading_rate_attachment_texel_size::_Extent2D
    max_fragment_shading_rate_attachment_texel_size::_Extent2D
    max_fragment_shading_rate_attachment_texel_size_aspect_ratio::UInt32
    primitive_fragment_shading_rate_with_multiple_viewports::Bool
    layered_shading_rate_attachments::Bool
    fragment_shading_rate_non_trivial_combiner_ops::Bool
    max_fragment_size::_Extent2D
    max_fragment_size_aspect_ratio::UInt32
    max_fragment_shading_rate_coverage_samples::UInt32
    max_fragment_shading_rate_rasterization_samples::SampleCountFlag
    fragment_shading_rate_with_shader_depth_stencil_writes::Bool
    fragment_shading_rate_with_sample_mask::Bool
    fragment_shading_rate_with_shader_sample_mask::Bool
    fragment_shading_rate_with_conservative_rasterization::Bool
    fragment_shading_rate_with_fragment_shader_interlock::Bool
    fragment_shading_rate_with_custom_sample_locations::Bool
    fragment_shading_rate_strict_multiply_combiner::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceRobustness2PropertiesEXT.

Extension: VK_EXT_robustness2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRobustness2PropertiesEXT.html

"""
struct PhysicalDeviceRobustness2PropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    robust_storage_buffer_access_size_alignment::UInt64
    robust_uniform_buffer_access_size_alignment::UInt64
end

"""
Minimalistic wrapper for VkPhysicalDeviceCustomBorderColorPropertiesEXT.

Extension: VK_EXT_custom_border_color

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCustomBorderColorPropertiesEXT.html

"""
struct PhysicalDeviceCustomBorderColorPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_custom_border_color_samplers::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceToolPropertiesEXT.

Extension: VK_EXT_tooling_info

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceToolPropertiesEXT.html

"""
struct PhysicalDeviceToolPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    version::String
    purposes::ToolPurposeFlagEXT
    description::String
    layer::String
end

"""
Minimalistic wrapper for VkPhysicalDeviceVulkan12Properties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html

"""
struct PhysicalDeviceVulkan12Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::_ConformanceVersion
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
    supported_depth_resolve_modes::ResolveModeFlag
    supported_stencil_resolve_modes::ResolveModeFlag
    independent_resolve_none::Bool
    independent_resolve::Bool
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
    max_timeline_semaphore_value_difference::UInt64
    framebuffer_integer_color_sample_counts::SampleCountFlag
end

"""
Minimalistic wrapper for VkPhysicalDeviceVulkan11Properties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html

"""
struct PhysicalDeviceVulkan11Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
    subgroup_size::UInt32
    subgroup_supported_stages::ShaderStageFlag
    subgroup_supported_operations::SubgroupFeatureFlag
    subgroup_quad_operations_in_all_stages::Bool
    point_clipping_behavior::PointClippingBehavior
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
    protected_no_fault::Bool
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::UInt64
end

"""
Minimalistic wrapper for VkPhysicalDeviceLineRasterizationPropertiesEXT.

Extension: VK_EXT_line_rasterization

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceLineRasterizationPropertiesEXT.html

"""
struct PhysicalDeviceLineRasterizationPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    line_sub_pixel_precision_bits::UInt32
end

"""
Minimalistic wrapper for VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.

Extension: VK_EXT_subgroup_size_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.html

"""
struct PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    required_subgroup_size::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.

Extension: VK_EXT_subgroup_size_control

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.html

"""
struct PhysicalDeviceSubgroupSizeControlPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_subgroup_size::UInt32
    max_subgroup_size::UInt32
    max_compute_workgroup_subgroups::UInt32
    required_subgroup_size_stages::ShaderStageFlag
end

"""
Minimalistic wrapper for VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.

Extension: VK_EXT_texel_buffer_alignment

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.html

"""
struct PhysicalDeviceTexelBufferAlignmentPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    storage_texel_buffer_offset_alignment_bytes::UInt64
    storage_texel_buffer_offset_single_texel_alignment::Bool
    uniform_texel_buffer_offset_alignment_bytes::UInt64
    uniform_texel_buffer_offset_single_texel_alignment::Bool
end

"""
Minimalistic wrapper for VkPipelineExecutableInternalRepresentationKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableInternalRepresentationKHR.html

"""
struct PipelineExecutableInternalRepresentationKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    description::String
    is_text::Bool
    data_size::UInt
    data::Ptr{Cvoid}
end

"""
Minimalistic wrapper for VkPipelineExecutableStatisticKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutableStatisticKHR.html

"""
struct PipelineExecutableStatisticKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    name::String
    description::String
    format::PipelineExecutableStatisticFormatKHR
    value::PipelineExecutableStatisticValueKHR
end

"""
Minimalistic wrapper for VkPipelineExecutablePropertiesKHR.

Extension: VK_KHR_pipeline_executable_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineExecutablePropertiesKHR.html

"""
struct PipelineExecutablePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stages::ShaderStageFlag
    name::String
    description::String
    subgroup_size::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.

Extension: VK_NV_shader_sm_builtins

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.html

"""
struct PhysicalDeviceShaderSMBuiltinsPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_sm_count::UInt32
    shader_warps_per_sm::UInt32
end

"""
Minimalistic wrapper for VkFramebufferMixedSamplesCombinationNV.

Extension: VK_NV_coverage_reduction_mode

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferMixedSamplesCombinationNV.html

"""
struct FramebufferMixedSamplesCombinationNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    coverage_reduction_mode::CoverageReductionModeNV
    rasterization_samples::SampleCountFlag
    depth_stencil_samples::SampleCountFlag
    color_samples::SampleCountFlag
end

"""
Minimalistic wrapper for VkPerformanceCounterDescriptionKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceCounterDescriptionKHR.html

"""
struct PerformanceCounterDescriptionKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    flags::PerformanceCounterDescriptionFlagKHR
    name::String
    category::String
    description::String
end

"""
Minimalistic wrapper for VkPerformanceCounterKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPerformanceCounterKHR.html

"""
struct PerformanceCounterKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    unit::PerformanceCounterUnitKHR
    scope::PerformanceCounterScopeKHR
    storage::PerformanceCounterStorageKHR
    uuid::String
end

"""
Minimalistic wrapper for VkPhysicalDevicePerformanceQueryPropertiesKHR.

Extension: VK_KHR_performance_query

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePerformanceQueryPropertiesKHR.html

"""
struct PhysicalDevicePerformanceQueryPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    allow_command_buffer_query_copies::Bool
end

"""
Minimalistic wrapper for VkImageViewAddressPropertiesNVX.

Extension: VK_NVX_image_view_handle

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewAddressPropertiesNVX.html

"""
struct ImageViewAddressPropertiesNVX <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_address::UInt64
    size::UInt64
end

"""
Minimalistic wrapper for VkPhysicalDeviceCooperativeMatrixPropertiesNV.

Extension: VK_NV_cooperative_matrix

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceCooperativeMatrixPropertiesNV.html

"""
struct PhysicalDeviceCooperativeMatrixPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    cooperative_matrix_supported_stages::ShaderStageFlag
end

"""
Minimalistic wrapper for VkFilterCubicImageViewImageFormatPropertiesEXT.

Extension: VK_EXT_filter_cubic

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFilterCubicImageViewImageFormatPropertiesEXT.html

"""
struct FilterCubicImageViewImageFormatPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    filter_cubic::Bool
    filter_cubic_minmax::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceMemoryBudgetPropertiesEXT.

Extension: VK_EXT_memory_budget

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryBudgetPropertiesEXT.html

"""
struct PhysicalDeviceMemoryBudgetPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    heap_budget::NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}
    heap_usage::NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.

Extension: VK_EXT_fragment_density_map2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html

"""
struct PhysicalDeviceFragmentDensityMap2PropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    subsampled_loads::Bool
    subsampled_coarse_reconstruction_early_access::Bool
    max_subsampled_array_layers::UInt32
    max_descriptor_set_subsampled_samplers::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceFragmentDensityMapPropertiesEXT.

Extension: VK_EXT_fragment_density_map

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html

"""
struct PhysicalDeviceFragmentDensityMapPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_fragment_density_texel_size::_Extent2D
    max_fragment_density_texel_size::_Extent2D
    fragment_density_invocations::Bool
end

"""
Minimalistic wrapper for VkImageDrmFormatModifierPropertiesEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageDrmFormatModifierPropertiesEXT.html

"""
struct ImageDrmFormatModifierPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    drm_format_modifier::UInt64
end

"""
Minimalistic wrapper for VkDrmFormatModifierPropertiesListEXT.

Extension: VK_EXT_image_drm_format_modifier

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDrmFormatModifierPropertiesListEXT.html

"""
struct DrmFormatModifierPropertiesListEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    drm_format_modifier_count::UInt32
    drm_format_modifier_properties::Vector{DrmFormatModifierPropertiesEXT}
end

"""
Minimalistic wrapper for VkPhysicalDeviceRayTracingPropertiesNV.

Extension: VK_NV_ray_tracing

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayTracingPropertiesNV.html

"""
struct PhysicalDeviceRayTracingPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_triangle_count::UInt64
    max_descriptor_set_acceleration_structures::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceRayTracingPipelinePropertiesKHR.

Extension: VK_KHR_ray_tracing_pipeline

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html

"""
struct PhysicalDeviceRayTracingPipelinePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_group_handle_size::UInt32
    max_ray_recursion_depth::UInt32
    max_shader_group_stride::UInt32
    shader_group_base_alignment::UInt32
    shader_group_handle_capture_replay_size::UInt32
    max_ray_dispatch_invocation_count::UInt32
    shader_group_handle_alignment::UInt32
    max_ray_hit_attribute_size::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceAccelerationStructurePropertiesKHR.

Extension: VK_KHR_acceleration_structure

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html

"""
struct PhysicalDeviceAccelerationStructurePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_geometry_count::UInt64
    max_instance_count::UInt64
    max_primitive_count::UInt64
    max_per_stage_descriptor_acceleration_structures::UInt32
    max_per_stage_descriptor_update_after_bind_acceleration_structures::UInt32
    max_descriptor_set_acceleration_structures::UInt32
    max_descriptor_set_update_after_bind_acceleration_structures::UInt32
    min_acceleration_structure_scratch_offset_alignment::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceMeshShaderPropertiesNV.

Extension: VK_NV_mesh_shader

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html

"""
struct PhysicalDeviceMeshShaderPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_draw_mesh_tasks_count::UInt32
    max_task_work_group_invocations::UInt32
    max_task_work_group_size::NTuple{3, UInt32}
    max_task_total_memory_size::UInt32
    max_task_output_count::UInt32
    max_mesh_work_group_invocations::UInt32
    max_mesh_work_group_size::NTuple{3, UInt32}
    max_mesh_total_memory_size::UInt32
    max_mesh_output_vertices::UInt32
    max_mesh_output_primitives::UInt32
    max_mesh_multiview_view_count::UInt32
    mesh_output_per_vertex_granularity::UInt32
    mesh_output_per_primitive_granularity::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceShadingRateImagePropertiesNV.

Extension: VK_NV_shading_rate_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShadingRateImagePropertiesNV.html

"""
struct PhysicalDeviceShadingRateImagePropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shading_rate_texel_size::_Extent2D
    shading_rate_palette_size::UInt32
    shading_rate_max_coarse_samples::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceTransformFeedbackPropertiesEXT.

Extension: VK_EXT_transform_feedback

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html

"""
struct PhysicalDeviceTransformFeedbackPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_transform_feedback_streams::UInt32
    max_transform_feedback_buffers::UInt32
    max_transform_feedback_buffer_size::UInt64
    max_transform_feedback_stream_data_size::UInt32
    max_transform_feedback_buffer_data_size::UInt32
    max_transform_feedback_buffer_data_stride::UInt32
    transform_feedback_queries::Bool
    transform_feedback_streams_lines_triangles::Bool
    transform_feedback_rasterization_stream_select::Bool
    transform_feedback_draw::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceDepthStencilResolveProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDepthStencilResolveProperties.html

"""
struct PhysicalDeviceDepthStencilResolveProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supported_depth_resolve_modes::ResolveModeFlag
    supported_stencil_resolve_modes::ResolveModeFlag
    independent_resolve_none::Bool
    independent_resolve::Bool
end

"""
Minimalistic wrapper for VkCheckpointDataNV.

Extension: VK_NV_device_diagnostic_checkpoints

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCheckpointDataNV.html

"""
struct CheckpointDataNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    stage::PipelineStageFlag
    checkpoint_marker::Ptr{Cvoid}
end

"""
Minimalistic wrapper for VkQueueFamilyCheckpointPropertiesNV.

Extension: VK_NV_device_diagnostic_checkpoints

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyCheckpointPropertiesNV.html

"""
struct QueueFamilyCheckpointPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    checkpoint_execution_stage_mask::PipelineStageFlag
end

"""
Minimalistic wrapper for VkPhysicalDevicePCIBusInfoPropertiesEXT.

Extension: VK_EXT_pci_bus_info

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html

"""
struct PhysicalDevicePCIBusInfoPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    pci_domain::UInt32
    pci_bus::UInt32
    pci_device::UInt32
    pci_function::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.

Extension: VK_EXT_vertex_attribute_divisor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.html

"""
struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_vertex_attrib_divisor::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceTimelineSemaphoreProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreProperties.html

"""
struct PhysicalDeviceTimelineSemaphoreProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_timeline_semaphore_value_difference::UInt64
end

"""
Minimalistic wrapper for VkDescriptorSetVariableDescriptorCountLayoutSupport.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetVariableDescriptorCountLayoutSupport.html

"""
struct DescriptorSetVariableDescriptorCountLayoutSupport <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_variable_descriptor_count::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceDescriptorIndexingProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDescriptorIndexingProperties.html

"""
struct PhysicalDeviceDescriptorIndexingProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_update_after_bind_descriptors_in_all_pools::UInt32
    shader_uniform_buffer_array_non_uniform_indexing_native::Bool
    shader_sampled_image_array_non_uniform_indexing_native::Bool
    shader_storage_buffer_array_non_uniform_indexing_native::Bool
    shader_storage_image_array_non_uniform_indexing_native::Bool
    shader_input_attachment_array_non_uniform_indexing_native::Bool
    robust_buffer_access_update_after_bind::Bool
    quad_divergent_implicit_lod::Bool
    max_per_stage_descriptor_update_after_bind_samplers::UInt32
    max_per_stage_descriptor_update_after_bind_uniform_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_storage_buffers::UInt32
    max_per_stage_descriptor_update_after_bind_sampled_images::UInt32
    max_per_stage_descriptor_update_after_bind_storage_images::UInt32
    max_per_stage_descriptor_update_after_bind_input_attachments::UInt32
    max_per_stage_update_after_bind_resources::UInt32
    max_descriptor_set_update_after_bind_samplers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers::UInt32
    max_descriptor_set_update_after_bind_uniform_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_storage_buffers::UInt32
    max_descriptor_set_update_after_bind_storage_buffers_dynamic::UInt32
    max_descriptor_set_update_after_bind_sampled_images::UInt32
    max_descriptor_set_update_after_bind_storage_images::UInt32
    max_descriptor_set_update_after_bind_input_attachments::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderCoreProperties2AMD.

Extension: VK_AMD_shader_core_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderCoreProperties2AMD.html

"""
struct PhysicalDeviceShaderCoreProperties2AMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_core_features::ShaderCorePropertiesFlagAMD
    active_compute_unit_count::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceShaderCorePropertiesAMD.

Extension: VK_AMD_shader_core_properties

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html

"""
struct PhysicalDeviceShaderCorePropertiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shader_engine_count::UInt32
    shader_arrays_per_engine_count::UInt32
    compute_units_per_shader_array::UInt32
    simd_per_compute_unit::UInt32
    wavefronts_per_simd::UInt32
    wavefront_size::UInt32
    sgprs_per_simd::UInt32
    min_sgpr_allocation::UInt32
    max_sgpr_allocation::UInt32
    sgpr_allocation_granularity::UInt32
    vgprs_per_simd::UInt32
    min_vgpr_allocation::UInt32
    max_vgpr_allocation::UInt32
    vgpr_allocation_granularity::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceConservativeRasterizationPropertiesEXT.

Extension: VK_EXT_conservative_rasterization

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html

"""
struct PhysicalDeviceConservativeRasterizationPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    primitive_overestimation_size::Float32
    max_extra_primitive_overestimation_size::Float32
    extra_primitive_overestimation_size_granularity::Float32
    primitive_underestimation::Bool
    conservative_point_and_line_rasterization::Bool
    degenerate_triangles_rasterized::Bool
    degenerate_lines_rasterized::Bool
    fully_covered_fragment_shader_input_variable::Bool
    conservative_rasterization_post_depth_coverage::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceExternalMemoryHostPropertiesEXT.

Extension: VK_EXT_external_memory_host

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceExternalMemoryHostPropertiesEXT.html

"""
struct PhysicalDeviceExternalMemoryHostPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_imported_host_pointer_alignment::UInt64
end

"""
Minimalistic wrapper for VkMemoryHostPointerPropertiesEXT.

Extension: VK_EXT_external_memory_host

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryHostPointerPropertiesEXT.html

"""
struct MemoryHostPointerPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

"""
Minimalistic wrapper for VkDeviceMemoryReportCallbackDataEXT.

Extension: VK_EXT_device_memory_report

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceMemoryReportCallbackDataEXT.html

"""
struct DeviceMemoryReportCallbackDataEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    flags::UInt32
    type::DeviceMemoryReportEventTypeEXT
    memory_object_id::UInt64
    size::UInt64
    object_type::ObjectType
    object_handle::UInt64
    heap_index::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceFloatControlsProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceFloatControlsProperties.html

"""
struct PhysicalDeviceFloatControlsProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    denorm_behavior_independence::ShaderFloatControlsIndependence
    rounding_mode_independence::ShaderFloatControlsIndependence
    shader_signed_zero_inf_nan_preserve_float_16::Bool
    shader_signed_zero_inf_nan_preserve_float_32::Bool
    shader_signed_zero_inf_nan_preserve_float_64::Bool
    shader_denorm_preserve_float_16::Bool
    shader_denorm_preserve_float_32::Bool
    shader_denorm_preserve_float_64::Bool
    shader_denorm_flush_to_zero_float_16::Bool
    shader_denorm_flush_to_zero_float_32::Bool
    shader_denorm_flush_to_zero_float_64::Bool
    shader_rounding_mode_rte_float_16::Bool
    shader_rounding_mode_rte_float_32::Bool
    shader_rounding_mode_rte_float_64::Bool
    shader_rounding_mode_rtz_float_16::Bool
    shader_rounding_mode_rtz_float_32::Bool
    shader_rounding_mode_rtz_float_64::Bool
end

"""
Minimalistic wrapper for VkDescriptorSetLayoutSupport.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutSupport.html

"""
struct DescriptorSetLayoutSupport <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supported::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceMaintenance3Properties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMaintenance3Properties.html

"""
struct PhysicalDeviceMaintenance3Properties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_per_set_descriptors::UInt32
    max_memory_allocation_size::UInt64
end

"""
Minimalistic wrapper for VkPhysicalDeviceInlineUniformBlockPropertiesEXT.

Extension: VK_EXT_inline_uniform_block

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceInlineUniformBlockPropertiesEXT.html

"""
struct PhysicalDeviceInlineUniformBlockPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_inline_uniform_block_size::UInt32
    max_per_stage_descriptor_inline_uniform_blocks::UInt32
    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks::UInt32
    max_descriptor_set_inline_uniform_blocks::UInt32
    max_descriptor_set_update_after_bind_inline_uniform_blocks::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.

Extension: VK_EXT_blend_operation_advanced

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html

"""
struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    advanced_blend_max_color_attachments::UInt32
    advanced_blend_independent_blend::Bool
    advanced_blend_non_premultiplied_src_color::Bool
    advanced_blend_non_premultiplied_dst_color::Bool
    advanced_blend_correlated_overlap::Bool
    advanced_blend_all_operations::Bool
end

"""
Minimalistic wrapper for VkMultisamplePropertiesEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMultisamplePropertiesEXT.html

"""
struct MultisamplePropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_sample_location_grid_size::_Extent2D
end

"""
Minimalistic wrapper for VkPhysicalDeviceSampleLocationsPropertiesEXT.

Extension: VK_EXT_sample_locations

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html

"""
struct PhysicalDeviceSampleLocationsPropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    sample_location_sample_counts::SampleCountFlag
    max_sample_location_grid_size::_Extent2D
    sample_location_coordinate_range::NTuple{2, Float32}
    sample_location_sub_pixel_bits::UInt32
    variable_sample_locations::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceSamplerFilterMinmaxProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSamplerFilterMinmaxProperties.html

"""
struct PhysicalDeviceSamplerFilterMinmaxProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    filter_minmax_single_component_formats::Bool
    filter_minmax_image_component_mapping::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceProtectedMemoryProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProtectedMemoryProperties.html

"""
struct PhysicalDeviceProtectedMemoryProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    protected_no_fault::Bool
end

"""
Minimalistic wrapper for VkTextureLODGatherFormatPropertiesAMD.

Extension: VK_AMD_texture_gather_bias_lod

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkTextureLODGatherFormatPropertiesAMD.html

"""
struct TextureLODGatherFormatPropertiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    supports_texture_gather_lod_bias_amd::Bool
end

"""
Minimalistic wrapper for VkSamplerYcbcrConversionImageFormatProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionImageFormatProperties.html

"""
struct SamplerYcbcrConversionImageFormatProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    combined_image_sampler_descriptor_count::UInt32
end

"""
Minimalistic wrapper for VkMemoryDedicatedRequirements.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryDedicatedRequirements.html

"""
struct MemoryDedicatedRequirements <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    prefers_dedicated_allocation::Bool
    requires_dedicated_allocation::Bool
end

"""
Minimalistic wrapper for VkPhysicalDevicePointClippingProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePointClippingProperties.html

"""
struct PhysicalDevicePointClippingProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    point_clipping_behavior::PointClippingBehavior
end

"""
Minimalistic wrapper for VkSparseImageMemoryRequirements2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageMemoryRequirements2.html

"""
struct SparseImageMemoryRequirements2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_requirements::SparseImageMemoryRequirements
end

"""
Minimalistic wrapper for VkMemoryRequirements2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryRequirements2.html

"""
struct MemoryRequirements2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_requirements::MemoryRequirements
end

"""
Minimalistic wrapper for VkPhysicalDeviceSubgroupProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html

"""
struct PhysicalDeviceSubgroupProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    subgroup_size::UInt32
    supported_stages::ShaderStageFlag
    supported_operations::SubgroupFeatureFlag
    quad_operations_in_all_stages::Bool
end

"""
Minimalistic wrapper for VkSharedPresentSurfaceCapabilitiesKHR.

Extension: VK_KHR_shared_presentable_image

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSharedPresentSurfaceCapabilitiesKHR.html

"""
struct SharedPresentSurfaceCapabilitiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    shared_present_supported_usage_flags::ImageUsageFlag
end

"""
Minimalistic wrapper for VkDisplayPlaneCapabilities2KHR.

Extension: VK_KHR_get_display_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneCapabilities2KHR.html

"""
struct DisplayPlaneCapabilities2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    capabilities::DisplayPlaneCapabilitiesKHR
end

"""
Minimalistic wrapper for VkDisplayModeProperties2KHR.

Extension: VK_KHR_get_display_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayModeProperties2KHR.html

"""
struct DisplayModeProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_mode_properties::DisplayModePropertiesKHR
end

"""
Minimalistic wrapper for VkDisplayPlaneProperties2KHR.

Extension: VK_KHR_get_display_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayPlaneProperties2KHR.html

"""
struct DisplayPlaneProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_plane_properties::DisplayPlanePropertiesKHR
end

"""
Minimalistic wrapper for VkDisplayProperties2KHR.

Extension: VK_KHR_get_display_properties2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayProperties2KHR.html

"""
struct DisplayProperties2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    display_properties::DisplayPropertiesKHR
end

"""
Minimalistic wrapper for VkSurfaceCapabilities2KHR.

Extension: VK_KHR_get_surface_capabilities2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilities2KHR.html

"""
struct SurfaceCapabilities2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    surface_capabilities::SurfaceCapabilitiesKHR
end

"""
Minimalistic wrapper for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.

Extension: VK_NVX_multiview_per_view_attributes

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.html

"""
struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    per_view_position_all_components::Bool
end

"""
Minimalistic wrapper for VkPhysicalDeviceDiscardRectanglePropertiesEXT.

Extension: VK_EXT_discard_rectangles

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDiscardRectanglePropertiesEXT.html

"""
struct PhysicalDeviceDiscardRectanglePropertiesEXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_discard_rectangles::UInt32
end

"""
Minimalistic wrapper for VkDisplayNativeHdrSurfaceCapabilitiesAMD.

Extension: VK_AMD_display_native_hdr

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDisplayNativeHdrSurfaceCapabilitiesAMD.html

"""
struct DisplayNativeHdrSurfaceCapabilitiesAMD <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    local_dimming_support::Bool
end

"""
Minimalistic wrapper for VkDeviceGroupPresentCapabilitiesKHR.

Extension: VK_KHR_swapchain

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDeviceGroupPresentCapabilitiesKHR.html

"""
struct DeviceGroupPresentCapabilitiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    present_mask::NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), UInt32}
    modes::DeviceGroupPresentModeFlagKHR
end

"""
Minimalistic wrapper for VkPhysicalDeviceGroupProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceGroupProperties.html

"""
struct PhysicalDeviceGroupProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    physical_device_count::UInt32
    physical_devices::NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), PhysicalDevice}
    subset_allocation::Bool
end

"""
Minimalistic wrapper for VkSurfaceCapabilities2EXT.

Extension: VK_EXT_display_surface_counter

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceCapabilities2EXT.html

"""
struct SurfaceCapabilities2EXT <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    min_image_count::UInt32
    max_image_count::UInt32
    current_extent::_Extent2D
    min_image_extent::_Extent2D
    max_image_extent::_Extent2D
    max_image_array_layers::UInt32
    supported_transforms::SurfaceTransformFlagKHR
    current_transform::SurfaceTransformFlagKHR
    supported_composite_alpha::CompositeAlphaFlagKHR
    supported_usage_flags::ImageUsageFlag
    supported_surface_counters::SurfaceCounterFlagEXT
end

"""
Minimalistic wrapper for VkPhysicalDeviceMultiviewProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMultiviewProperties.html

"""
struct PhysicalDeviceMultiviewProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_multiview_view_count::UInt32
    max_multiview_instance_index::UInt32
end

"""
Minimalistic wrapper for VkExternalFenceProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalFenceProperties.html

"""
struct ExternalFenceProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalFenceHandleTypeFlag
    compatible_handle_types::ExternalFenceHandleTypeFlag
    external_fence_features::ExternalFenceFeatureFlag
end

"""
Minimalistic wrapper for VkExternalSemaphoreProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalSemaphoreProperties.html

"""
struct ExternalSemaphoreProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    export_from_imported_handle_types::ExternalSemaphoreHandleTypeFlag
    compatible_handle_types::ExternalSemaphoreHandleTypeFlag
    external_semaphore_features::ExternalSemaphoreFeatureFlag
end

"""
Minimalistic wrapper for VkMemoryFdPropertiesKHR.

Extension: VK_KHR_external_memory_fd

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryFdPropertiesKHR.html

"""
struct MemoryFdPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

"""
Minimalistic wrapper for VkMemoryWin32HandlePropertiesKHR.

Extension: VK_KHR_external_memory_win32

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMemoryWin32HandlePropertiesKHR.html

"""
struct MemoryWin32HandlePropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_type_bits::UInt32
end

"""
Minimalistic wrapper for VkPhysicalDeviceIDProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceIDProperties.html

"""
struct PhysicalDeviceIDProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    device_uuid::String
    driver_uuid::String
    device_luid::String
    device_node_mask::UInt32
    device_luid_valid::Bool
end

"""
Minimalistic wrapper for VkExternalBufferProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalBufferProperties.html

"""
struct ExternalBufferProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

"""
Minimalistic wrapper for VkExternalImageFormatProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkExternalImageFormatProperties.html

"""
struct ExternalImageFormatProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    external_memory_properties::ExternalMemoryProperties
end

"""
Minimalistic wrapper for VkPhysicalDeviceDriverProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDriverProperties.html

"""
struct PhysicalDeviceDriverProperties <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    driver_id::DriverId
    driver_name::String
    driver_info::String
    conformance_version::_ConformanceVersion
end

"""
Minimalistic wrapper for VkPhysicalDevicePushDescriptorPropertiesKHR.

Extension: VK_KHR_push_descriptor

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDevicePushDescriptorPropertiesKHR.html

"""
struct PhysicalDevicePushDescriptorPropertiesKHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_push_descriptors::UInt32
end

"""
Minimalistic wrapper for VkSparseImageFormatProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSparseImageFormatProperties2.html

"""
struct SparseImageFormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    properties::SparseImageFormatProperties
end

"""
Minimalistic wrapper for VkPhysicalDeviceMemoryProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceMemoryProperties2.html

"""
struct PhysicalDeviceMemoryProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    memory_properties::PhysicalDeviceMemoryProperties
end

"""
Minimalistic wrapper for VkQueueFamilyProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueueFamilyProperties2.html

"""
struct QueueFamilyProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    queue_family_properties::QueueFamilyProperties
end

"""
Minimalistic wrapper for VkImageFormatProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatProperties2.html

"""
struct ImageFormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    image_format_properties::ImageFormatProperties
end

"""
Minimalistic wrapper for VkFormatProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormatProperties2.html

"""
struct FormatProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    format_properties::FormatProperties
end

"""
Minimalistic wrapper for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.

Extension: VK_NV_device_generated_commands

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html

"""
struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    max_graphics_shader_group_count::UInt32
    max_indirect_sequence_count::UInt32
    max_indirect_commands_token_count::UInt32
    max_indirect_commands_stream_count::UInt32
    max_indirect_commands_token_offset::UInt32
    max_indirect_commands_stream_stride::UInt32
    min_sequences_count_buffer_offset_alignment::UInt32
    min_sequences_index_buffer_offset_alignment::UInt32
    min_indirect_commands_buffer_offset_alignment::UInt32
end

"""
High-level wrapper for VkVertexInputAttributeDescription2EXT.

Extension: VK\\_EXT\\_vertex\\_input\\_dynamic\\_state

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputAttributeDescription2EXT.html)

"""
@auto_hash_equals struct VertexInputAttributeDescription2EXT <: HighLevelStruct
        next::Any
        location::UInt32
        binding::UInt32
        format::Format
        offset::UInt32
    end

"""
High-level wrapper for VkSamplerCustomBorderColorCreateInfoEXT.

Extension: VK\\_EXT\\_custom\\_border\\_color

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerCustomBorderColorCreateInfoEXT.html)

"""
@auto_hash_equals struct SamplerCustomBorderColorCreateInfoEXT <: HighLevelStruct
        next::Any
        custom_border_color::ClearColorValue
        format::Format
    end

"""
High-level wrapper for VkFramebufferAttachmentImageInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentImageInfo.html)

"""
@auto_hash_equals struct FramebufferAttachmentImageInfo <: HighLevelStruct
        next::Any
        flags::ImageCreateFlag
        usage::ImageUsageFlag
        width::UInt32
        height::UInt32
        layer_count::UInt32
        view_formats::Vector{Format}
    end

"""
High-level wrapper for VkFramebufferAttachmentsCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFramebufferAttachmentsCreateInfo.html)

"""
@auto_hash_equals struct FramebufferAttachmentsCreateInfo <: HighLevelStruct
        next::Any
        attachment_image_infos::Vector{FramebufferAttachmentImageInfo}
    end

"""
High-level wrapper for VkImageViewASTCDecodeModeEXT.

Extension: VK\\_EXT\\_astc\\_decode\\_mode

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewASTCDecodeModeEXT.html)

"""
@auto_hash_equals struct ImageViewASTCDecodeModeEXT <: HighLevelStruct
        next::Any
        decode_mode::Format
    end

"""
High-level wrapper for VkImageFormatListCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageFormatListCreateInfo.html)

"""
@auto_hash_equals struct ImageFormatListCreateInfo <: HighLevelStruct
        next::Any
        view_formats::Vector{Format}
    end

"""
High-level wrapper for VkVertexInputAttributeDescription.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputAttributeDescription.html)

"""
@auto_hash_equals struct VertexInputAttributeDescription <: HighLevelStruct
        location::UInt32
        binding::UInt32
        format::Format
        offset::UInt32
    end

"""
High-level wrapper for VkBufferViewCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferViewCreateInfo.html)

"""
@auto_hash_equals struct BufferViewCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        buffer::Buffer
        format::Format
        offset::UInt64
        range::UInt64
    end

"""
Minimalistic wrapper for VkSurfaceFormatKHR.

Extension: VK_KHR_surface

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFormatKHR.html

"""
struct SurfaceFormatKHR <: ReturnedOnly
    format::Format
    color_space::ColorSpaceKHR
end

"""
Minimalistic wrapper for VkSurfaceFormat2KHR.

Extension: VK_KHR_get_surface_capabilities2

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSurfaceFormat2KHR.html

"""
struct SurfaceFormat2KHR <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    surface_format::SurfaceFormatKHR
end

"""
High-level wrapper for VkVertexInputBindingDescription2EXT.

Extension: VK\\_EXT\\_vertex\\_input\\_dynamic\\_state

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDescription2EXT.html)

"""
@auto_hash_equals struct VertexInputBindingDescription2EXT <: HighLevelStruct
        next::Any
        binding::UInt32
        stride::UInt32
        input_rate::VertexInputRate
        divisor::UInt32
    end

"""
High-level wrapper for VkVertexInputBindingDescription.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVertexInputBindingDescription.html)

"""
@auto_hash_equals struct VertexInputBindingDescription <: HighLevelStruct
        binding::UInt32
        stride::UInt32
        input_rate::VertexInputRate
    end

"""
High-level wrapper for VkPipelineVertexInputStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineVertexInputStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        vertex_binding_descriptions::Vector{VertexInputBindingDescription}
        vertex_attribute_descriptions::Vector{VertexInputAttributeDescription}
    end

"""
High-level wrapper for VkGraphicsShaderGroupCreateInfoNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsShaderGroupCreateInfoNV.html)

"""
@auto_hash_equals struct GraphicsShaderGroupCreateInfoNV <: HighLevelStruct
        next::Any
        stages::Vector{PipelineShaderStageCreateInfo}
        vertex_input_state::OptionalPtr{PipelineVertexInputStateCreateInfo}
        tessellation_state::OptionalPtr{PipelineTessellationStateCreateInfo}
    end

"""
High-level wrapper for VkGraphicsPipelineShaderGroupsCreateInfoNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineShaderGroupsCreateInfoNV.html)

"""
@auto_hash_equals struct GraphicsPipelineShaderGroupsCreateInfoNV <: HighLevelStruct
        next::Any
        groups::Vector{GraphicsShaderGroupCreateInfoNV}
        pipelines::Vector{Pipeline}
    end

"""
Minimalistic wrapper for VkPhysicalDeviceProperties.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProperties.html

"""
struct PhysicalDeviceProperties <: ReturnedOnly
    api_version::VersionNumber
    driver_version::VersionNumber
    vendor_id::UInt32
    device_id::UInt32
    device_type::PhysicalDeviceType
    device_name::String
    pipeline_cache_uuid::String
    limits::PhysicalDeviceLimits
    sparse_properties::PhysicalDeviceSparseProperties
end

"""
Minimalistic wrapper for VkPhysicalDeviceProperties2.

API documentation: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceProperties2.html

"""
struct PhysicalDeviceProperties2 <: ReturnedOnly
    s_type::StructureType
    next::Ptr{Cvoid}
    properties::PhysicalDeviceProperties
end

"""
High-level wrapper for VkPipelineColorBlendAttachmentState.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendAttachmentState.html)

"""
@auto_hash_equals struct PipelineColorBlendAttachmentState <: HighLevelStruct
        blend_enable::Bool
        src_color_blend_factor::BlendFactor
        dst_color_blend_factor::BlendFactor
        color_blend_op::BlendOp
        src_alpha_blend_factor::BlendFactor
        dst_alpha_blend_factor::BlendFactor
        alpha_blend_op::BlendOp
        color_write_mask::ColorComponentFlag
    end

"""
High-level wrapper for VkPipelineColorBlendStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineColorBlendStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        logic_op_enable::Bool
        logic_op::LogicOp
        attachments::Vector{PipelineColorBlendAttachmentState}
        blend_constants::NTuple{4, Float32}
    end

"""
High-level wrapper for VkPipelineRasterizationStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineRasterizationStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        depth_clamp_enable::Bool
        rasterizer_discard_enable::Bool
        polygon_mode::PolygonMode
        cull_mode::CullModeFlag
        front_face::FrontFace
        depth_bias_enable::Bool
        depth_bias_constant_factor::Float32
        depth_bias_clamp::Float32
        depth_bias_slope_factor::Float32
        line_width::Float32
    end

"""
High-level wrapper for VkStencilOpState.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkStencilOpState.html)

"""
@auto_hash_equals struct StencilOpState <: HighLevelStruct
        fail_op::StencilOp
        pass_op::StencilOp
        depth_fail_op::StencilOp
        compare_op::CompareOp
        compare_mask::UInt32
        write_mask::UInt32
        reference::UInt32
    end

"""
High-level wrapper for VkPipelineDepthStencilStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineDepthStencilStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        depth_test_enable::Bool
        depth_write_enable::Bool
        depth_compare_op::CompareOp
        depth_bounds_test_enable::Bool
        stencil_test_enable::Bool
        front::StencilOpState
        back::StencilOpState
        min_depth_bounds::Float32
        max_depth_bounds::Float32
    end

"""
High-level wrapper for VkAccelerationStructureGeometryTrianglesDataKHR.

Extension: VK\\_KHR\\_acceleration\\_structure

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureGeometryTrianglesDataKHR.html)

"""
@auto_hash_equals struct AccelerationStructureGeometryTrianglesDataKHR <: HighLevelStruct
        next::Any
        vertex_format::Format
        vertex_data::DeviceOrHostAddressConstKHR
        vertex_stride::UInt64
        max_vertex::UInt32
        index_type::IndexType
        index_data::DeviceOrHostAddressConstKHR
        transform_data::DeviceOrHostAddressConstKHR
    end

"""
High-level wrapper for VkGeometryTrianglesNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryTrianglesNV.html)

"""
@auto_hash_equals struct GeometryTrianglesNV <: HighLevelStruct
        next::Any
        vertex_data::OptionalPtr{Buffer}
        vertex_offset::UInt64
        vertex_count::UInt32
        vertex_stride::UInt64
        vertex_format::Format
        index_data::OptionalPtr{Buffer}
        index_offset::UInt64
        index_count::UInt32
        index_type::IndexType
        transform_data::OptionalPtr{Buffer}
        transform_offset::UInt64
    end

"""
High-level wrapper for VkGeometryDataNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryDataNV.html)

"""
@auto_hash_equals struct GeometryDataNV <: HighLevelStruct
        triangles::GeometryTrianglesNV
        aabbs::GeometryAABBNV
    end

"""
High-level wrapper for VkGeometryNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeometryNV.html)

"""
@auto_hash_equals struct GeometryNV <: HighLevelStruct
        next::Any
        geometry_type::GeometryTypeKHR
        geometry::GeometryDataNV
        flags::GeometryFlagKHR
    end

"""
High-level wrapper for VkAccelerationStructureInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureInfoNV.html)

"""
@auto_hash_equals struct AccelerationStructureInfoNV <: HighLevelStruct
        next::Any
        type::VkAccelerationStructureTypeNV
        flags::OptionalPtr{VkBuildAccelerationStructureFlagsNV}
        instance_count::UInt32
        geometries::Vector{GeometryNV}
    end

"""
High-level wrapper for VkAccelerationStructureCreateInfoNV.

Extension: VK\\_NV\\_ray\\_tracing

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAccelerationStructureCreateInfoNV.html)

"""
@auto_hash_equals struct AccelerationStructureCreateInfoNV <: HighLevelStruct
        next::Any
        compacted_size::UInt64
        info::AccelerationStructureInfoNV
    end

"""
High-level wrapper for VkIndirectCommandsLayoutTokenNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsLayoutTokenNV.html)

"""
@auto_hash_equals struct IndirectCommandsLayoutTokenNV <: HighLevelStruct
        next::Any
        token_type::IndirectCommandsTokenTypeNV
        stream::UInt32
        offset::UInt32
        vertex_binding_unit::UInt32
        vertex_dynamic_stride::Bool
        pushconstant_pipeline_layout::OptionalPtr{PipelineLayout}
        pushconstant_shader_stage_flags::ShaderStageFlag
        pushconstant_offset::UInt32
        pushconstant_size::UInt32
        indirect_state_flags::IndirectStateFlagNV
        index_types::Vector{IndexType}
        index_type_values::Vector{UInt32}
    end

"""
High-level wrapper for VkBindIndexBufferIndirectCommandNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBindIndexBufferIndirectCommandNV.html)

"""
@auto_hash_equals struct BindIndexBufferIndirectCommandNV <: HighLevelStruct
        buffer_address::UInt64
        size::UInt32
        index_type::IndexType
    end

"""
High-level wrapper for VkPhysicalDeviceImageDrmFormatModifierInfoEXT.

Extension: VK\\_EXT\\_image\\_drm\\_format\\_modifier

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageDrmFormatModifierInfoEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceImageDrmFormatModifierInfoEXT <: HighLevelStruct
        next::Any
        drm_format_modifier::UInt64
        sharing_mode::SharingMode
        queue_family_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkSwapchainCreateInfoKHR.

Extension: VK\\_KHR\\_swapchain

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSwapchainCreateInfoKHR.html)

"""
@auto_hash_equals struct SwapchainCreateInfoKHR <: HighLevelStruct
        next::Any
        flags::SwapchainCreateFlagKHR
        surface::SurfaceKHR
        min_image_count::UInt32
        image_format::Format
        image_color_space::ColorSpaceKHR
        image_extent::Extent2D
        image_array_layers::UInt32
        image_usage::ImageUsageFlag
        image_sharing_mode::SharingMode
        queue_family_indices::Vector{UInt32}
        pre_transform::SurfaceTransformFlagKHR
        composite_alpha::CompositeAlphaFlagKHR
        present_mode::PresentModeKHR
        clipped::Bool
        old_swapchain::OptionalPtr{SwapchainKHR}
    end

"""
High-level wrapper for VkBufferCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBufferCreateInfo.html)

"""
@auto_hash_equals struct BufferCreateInfo <: HighLevelStruct
        next::Any
        flags::BufferCreateFlag
        size::UInt64
        usage::BufferUsageFlag
        sharing_mode::SharingMode
        queue_family_indices::Vector{UInt32}
    end

"""
High-level wrapper for VkPipelineInputAssemblyStateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html)

"""
@auto_hash_equals struct PipelineInputAssemblyStateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        topology::PrimitiveTopology
        primitive_restart_enable::Bool
    end

"""
High-level wrapper for VkGraphicsPipelineCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGraphicsPipelineCreateInfo.html)

"""
@auto_hash_equals struct GraphicsPipelineCreateInfo <: HighLevelStruct
        next::Any
        flags::PipelineCreateFlag
        stages::Vector{PipelineShaderStageCreateInfo}
        vertex_input_state::OptionalPtr{PipelineVertexInputStateCreateInfo}
        input_assembly_state::OptionalPtr{PipelineInputAssemblyStateCreateInfo}
        tessellation_state::OptionalPtr{PipelineTessellationStateCreateInfo}
        viewport_state::OptionalPtr{PipelineViewportStateCreateInfo}
        rasterization_state::PipelineRasterizationStateCreateInfo
        multisample_state::OptionalPtr{PipelineMultisampleStateCreateInfo}
        depth_stencil_state::OptionalPtr{PipelineDepthStencilStateCreateInfo}
        color_blend_state::OptionalPtr{PipelineColorBlendStateCreateInfo}
        dynamic_state::OptionalPtr{PipelineDynamicStateCreateInfo}
        layout::PipelineLayout
        render_pass::RenderPass
        subpass::UInt32
        base_pipeline_handle::OptionalPtr{Pipeline}
        base_pipeline_index::Int32
    end

"""
High-level wrapper for VkGeneratedCommandsMemoryRequirementsInfoNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeneratedCommandsMemoryRequirementsInfoNV.html)

"""
@auto_hash_equals struct GeneratedCommandsMemoryRequirementsInfoNV <: HighLevelStruct
        next::Any
        pipeline_bind_point::PipelineBindPoint
        pipeline::Pipeline
        indirect_commands_layout::IndirectCommandsLayoutNV
        max_sequences_count::UInt32
    end

"""
High-level wrapper for VkGeneratedCommandsInfoNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkGeneratedCommandsInfoNV.html)

"""
@auto_hash_equals struct GeneratedCommandsInfoNV <: HighLevelStruct
        next::Any
        pipeline_bind_point::PipelineBindPoint
        pipeline::Pipeline
        indirect_commands_layout::IndirectCommandsLayoutNV
        streams::Vector{IndirectCommandsStreamNV}
        sequences_count::UInt32
        preprocess_buffer::Buffer
        preprocess_offset::UInt64
        preprocess_size::UInt64
        sequences_count_buffer::OptionalPtr{Buffer}
        sequences_count_offset::UInt64
        sequences_index_buffer::OptionalPtr{Buffer}
        sequences_index_offset::UInt64
    end

"""
High-level wrapper for VkIndirectCommandsLayoutCreateInfoNV.

Extension: VK\\_NV\\_device\\_generated\\_commands

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkIndirectCommandsLayoutCreateInfoNV.html)

"""
@auto_hash_equals struct IndirectCommandsLayoutCreateInfoNV <: HighLevelStruct
        next::Any
        flags::IndirectCommandsLayoutUsageFlagNV
        pipeline_bind_point::PipelineBindPoint
        tokens::Vector{IndirectCommandsLayoutTokenNV}
        stream_strides::Vector{UInt32}
    end

"""
High-level wrapper for VkSamplerCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerCreateInfo.html)

"""
@auto_hash_equals struct SamplerCreateInfo <: HighLevelStruct
        next::Any
        flags::SamplerCreateFlag
        mag_filter::Filter
        min_filter::Filter
        mipmap_mode::SamplerMipmapMode
        address_mode_u::SamplerAddressMode
        address_mode_v::SamplerAddressMode
        address_mode_w::SamplerAddressMode
        mip_lod_bias::Float32
        anisotropy_enable::Bool
        max_anisotropy::Float32
        compare_enable::Bool
        compare_op::CompareOp
        min_lod::Float32
        max_lod::Float32
        border_color::BorderColor
        unnormalized_coordinates::Bool
    end

"""
High-level wrapper for VkQueryPoolCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkQueryPoolCreateInfo.html)

"""
@auto_hash_equals struct QueryPoolCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        query_type::QueryType
        query_count::UInt32
        pipeline_statistics::QueryPipelineStatisticFlag
    end

"""
High-level wrapper for VkMutableDescriptorTypeListVALVE.

Extension: VK\\_VALVE\\_mutable\\_descriptor\\_type

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMutableDescriptorTypeListVALVE.html)

"""
@auto_hash_equals struct MutableDescriptorTypeListVALVE <: HighLevelStruct
        descriptor_types::Vector{DescriptorType}
    end

"""
High-level wrapper for VkMutableDescriptorTypeCreateInfoVALVE.

Extension: VK\\_VALVE\\_mutable\\_descriptor\\_type

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkMutableDescriptorTypeCreateInfoVALVE.html)

"""
@auto_hash_equals struct MutableDescriptorTypeCreateInfoVALVE <: HighLevelStruct
        next::Any
        mutable_descriptor_type_lists::Vector{MutableDescriptorTypeListVALVE}
    end

"""
High-level wrapper for VkImageViewHandleInfoNVX.

Extension: VK\\_NVX\\_image\\_view\\_handle

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewHandleInfoNVX.html)

"""
@auto_hash_equals struct ImageViewHandleInfoNVX <: HighLevelStruct
        next::Any
        image_view::ImageView
        descriptor_type::DescriptorType
        sampler::OptionalPtr{Sampler}
    end

"""
High-level wrapper for VkDescriptorUpdateTemplateEntry.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateEntry.html)

"""
@auto_hash_equals struct DescriptorUpdateTemplateEntry <: HighLevelStruct
        dst_binding::UInt32
        dst_array_element::UInt32
        descriptor_count::UInt32
        descriptor_type::DescriptorType
        offset::UInt
        stride::UInt
    end

"""
High-level wrapper for VkDescriptorUpdateTemplateCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorUpdateTemplateCreateInfo.html)

"""
@auto_hash_equals struct DescriptorUpdateTemplateCreateInfo <: HighLevelStruct
        next::Any
        flags::UInt32
        descriptor_update_entries::Vector{DescriptorUpdateTemplateEntry}
        template_type::DescriptorUpdateTemplateType
        descriptor_set_layout::DescriptorSetLayout
        pipeline_bind_point::PipelineBindPoint
        pipeline_layout::PipelineLayout
        set::UInt32
    end

"""
High-level wrapper for VkDescriptorPoolSize.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolSize.html)

"""
@auto_hash_equals struct DescriptorPoolSize <: HighLevelStruct
        type::DescriptorType
        descriptor_count::UInt32
    end

"""
High-level wrapper for VkDescriptorPoolCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorPoolCreateInfo.html)

"""
@auto_hash_equals struct DescriptorPoolCreateInfo <: HighLevelStruct
        next::Any
        flags::DescriptorPoolCreateFlag
        max_sets::UInt32
        pool_sizes::Vector{DescriptorPoolSize}
    end

"""
High-level wrapper for VkDescriptorSetLayoutBinding.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutBinding.html)

"""
@auto_hash_equals struct DescriptorSetLayoutBinding <: HighLevelStruct
        binding::UInt32
        descriptor_type::DescriptorType
        descriptor_count::UInt32
        stage_flags::ShaderStageFlag
        immutable_samplers::OptionalPtr{Vector{Sampler}}
    end

"""
High-level wrapper for VkDescriptorSetLayoutCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html)

"""
@auto_hash_equals struct DescriptorSetLayoutCreateInfo <: HighLevelStruct
        next::Any
        flags::DescriptorSetLayoutCreateFlag
        bindings::Vector{DescriptorSetLayoutBinding}
    end

"""
High-level wrapper for VkComponentMapping.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkComponentMapping.html)

"""
@auto_hash_equals struct ComponentMapping <: HighLevelStruct
        r::ComponentSwizzle
        g::ComponentSwizzle
        b::ComponentSwizzle
        a::ComponentSwizzle
    end

"""
High-level wrapper for VkSamplerYcbcrConversionCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSamplerYcbcrConversionCreateInfo.html)

"""
@auto_hash_equals struct SamplerYcbcrConversionCreateInfo <: HighLevelStruct
        next::Any
        format::Format
        ycbcr_model::SamplerYcbcrModelConversion
        ycbcr_range::SamplerYcbcrRange
        components::ComponentMapping
        x_chroma_offset::ChromaLocation
        y_chroma_offset::ChromaLocation
        chroma_filter::Filter
        force_explicit_reconstruction::Bool
    end

"""
High-level wrapper for VkCommandBufferAllocateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCommandBufferAllocateInfo.html)

"""
@auto_hash_equals struct CommandBufferAllocateInfo <: HighLevelStruct
        next::Any
        command_pool::CommandPool
        level::CommandBufferLevel
        command_buffer_count::UInt32
    end

"""
High-level wrapper for VkPhysicalDeviceImageViewImageFormatInfoEXT.

Extension: VK\\_EXT\\_filter\\_cubic

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageViewImageFormatInfoEXT.html)

"""
@auto_hash_equals struct PhysicalDeviceImageViewImageFormatInfoEXT <: HighLevelStruct
        next::Any
        image_view_type::ImageViewType
    end

"""
High-level wrapper for VkImageViewCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageViewCreateInfo.html)

"""
@auto_hash_equals struct ImageViewCreateInfo <: HighLevelStruct
        next::Any
        flags::ImageViewCreateFlag
        image::Image
        view_type::ImageViewType
        format::Format
        components::ComponentMapping
        subresource_range::ImageSubresourceRange
    end

"""
High-level wrapper for VkPhysicalDeviceSparseImageFormatInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2.html)

"""
@auto_hash_equals struct PhysicalDeviceSparseImageFormatInfo2 <: HighLevelStruct
        next::Any
        format::Format
        type::ImageType
        samples::SampleCountFlag
        usage::ImageUsageFlag
        tiling::ImageTiling
    end

"""
High-level wrapper for VkPhysicalDeviceImageFormatInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkPhysicalDeviceImageFormatInfo2.html)

"""
@auto_hash_equals struct PhysicalDeviceImageFormatInfo2 <: HighLevelStruct
        next::Any
        format::Format
        type::ImageType
        tiling::ImageTiling
        usage::ImageUsageFlag
        flags::ImageCreateFlag
    end

"""
High-level wrapper for VkImageMemoryBarrier2KHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryBarrier2KHR.html)

"""
@auto_hash_equals struct ImageMemoryBarrier2KHR <: HighLevelStruct
        next::Any
        src_stage_mask::UInt64
        src_access_mask::UInt64
        dst_stage_mask::UInt64
        dst_access_mask::UInt64
        old_layout::ImageLayout
        new_layout::ImageLayout
        src_queue_family_index::UInt32
        dst_queue_family_index::UInt32
        image::Image
        subresource_range::ImageSubresourceRange
    end

"""
High-level wrapper for VkDependencyInfoKHR.

Extension: VK\\_KHR\\_synchronization2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDependencyInfoKHR.html)

"""
@auto_hash_equals struct DependencyInfoKHR <: HighLevelStruct
        next::Any
        dependency_flags::DependencyFlag
        memory_barriers::Vector{MemoryBarrier2KHR}
        buffer_memory_barriers::Vector{BufferMemoryBarrier2KHR}
        image_memory_barriers::Vector{ImageMemoryBarrier2KHR}
    end

"""
High-level wrapper for VkResolveImageInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkResolveImageInfo2KHR.html)

"""
@auto_hash_equals struct ResolveImageInfo2KHR <: HighLevelStruct
        next::Any
        src_image::Image
        src_image_layout::ImageLayout
        dst_image::Image
        dst_image_layout::ImageLayout
        regions::Vector{ImageResolve2KHR}
    end

"""
High-level wrapper for VkCopyImageToBufferInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyImageToBufferInfo2KHR.html)

"""
@auto_hash_equals struct CopyImageToBufferInfo2KHR <: HighLevelStruct
        next::Any
        src_image::Image
        src_image_layout::ImageLayout
        dst_buffer::Buffer
        regions::Vector{BufferImageCopy2KHR}
    end

"""
High-level wrapper for VkCopyBufferToImageInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyBufferToImageInfo2KHR.html)

"""
@auto_hash_equals struct CopyBufferToImageInfo2KHR <: HighLevelStruct
        next::Any
        src_buffer::Buffer
        dst_image::Image
        dst_image_layout::ImageLayout
        regions::Vector{BufferImageCopy2KHR}
    end

"""
High-level wrapper for VkBlitImageInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkBlitImageInfo2KHR.html)

"""
@auto_hash_equals struct BlitImageInfo2KHR <: HighLevelStruct
        next::Any
        src_image::Image
        src_image_layout::ImageLayout
        dst_image::Image
        dst_image_layout::ImageLayout
        regions::Vector{ImageBlit2KHR}
        filter::Filter
    end

"""
High-level wrapper for VkCopyImageInfo2KHR.

Extension: VK\\_KHR\\_copy\\_commands2

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkCopyImageInfo2KHR.html)

"""
@auto_hash_equals struct CopyImageInfo2KHR <: HighLevelStruct
        next::Any
        src_image::Image
        src_image_layout::ImageLayout
        dst_image::Image
        dst_image_layout::ImageLayout
        regions::Vector{ImageCopy2KHR}
    end

"""
High-level wrapper for VkAttachmentDescriptionStencilLayout.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescriptionStencilLayout.html)

"""
@auto_hash_equals struct AttachmentDescriptionStencilLayout <: HighLevelStruct
        next::Any
        stencil_initial_layout::ImageLayout
        stencil_final_layout::ImageLayout
    end

"""
High-level wrapper for VkAttachmentReferenceStencilLayout.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReferenceStencilLayout.html)

"""
@auto_hash_equals struct AttachmentReferenceStencilLayout <: HighLevelStruct
        next::Any
        stencil_layout::ImageLayout
    end

"""
High-level wrapper for VkAttachmentReference2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference2.html)

"""
@auto_hash_equals struct AttachmentReference2 <: HighLevelStruct
        next::Any
        attachment::UInt32
        layout::ImageLayout
        aspect_mask::ImageAspectFlag
    end

"""
High-level wrapper for VkFragmentShadingRateAttachmentInfoKHR.

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFragmentShadingRateAttachmentInfoKHR.html)

"""
@auto_hash_equals struct FragmentShadingRateAttachmentInfoKHR <: HighLevelStruct
        next::Any
        fragment_shading_rate_attachment::AttachmentReference2
        shading_rate_attachment_texel_size::Extent2D
    end

"""
High-level wrapper for VkSubpassDescriptionDepthStencilResolve.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescriptionDepthStencilResolve.html)

"""
@auto_hash_equals struct SubpassDescriptionDepthStencilResolve <: HighLevelStruct
        next::Any
        depth_resolve_mode::ResolveModeFlag
        stencil_resolve_mode::ResolveModeFlag
        depth_stencil_resolve_attachment::OptionalPtr{AttachmentReference2}
    end

"""
High-level wrapper for VkSubpassDescription2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription2.html)

"""
@auto_hash_equals struct SubpassDescription2 <: HighLevelStruct
        next::Any
        flags::SubpassDescriptionFlag
        pipeline_bind_point::PipelineBindPoint
        view_mask::UInt32
        input_attachments::Vector{AttachmentReference2}
        color_attachments::Vector{AttachmentReference2}
        resolve_attachments::OptionalPtr{Vector{AttachmentReference2}}
        depth_stencil_attachment::OptionalPtr{AttachmentReference2}
        preserve_attachments::Vector{UInt32}
    end

"""
High-level wrapper for VkAttachmentDescription2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription2.html)

"""
@auto_hash_equals struct AttachmentDescription2 <: HighLevelStruct
        next::Any
        flags::AttachmentDescriptionFlag
        format::Format
        samples::SampleCountFlag
        load_op::AttachmentLoadOp
        store_op::AttachmentStoreOp
        stencil_load_op::AttachmentLoadOp
        stencil_store_op::AttachmentStoreOp
        initial_layout::ImageLayout
        final_layout::ImageLayout
    end

"""
High-level wrapper for VkRenderPassCreateInfo2.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo2.html)

"""
@auto_hash_equals struct RenderPassCreateInfo2 <: HighLevelStruct
        next::Any
        flags::RenderPassCreateFlag
        attachments::Vector{AttachmentDescription2}
        subpasses::Vector{SubpassDescription2}
        dependencies::Vector{SubpassDependency2}
        correlated_view_masks::Vector{UInt32}
    end

"""
High-level wrapper for VkAttachmentReference.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentReference.html)

"""
@auto_hash_equals struct AttachmentReference <: HighLevelStruct
        attachment::UInt32
        layout::ImageLayout
    end

"""
High-level wrapper for VkRenderPassFragmentDensityMapCreateInfoEXT.

Extension: VK\\_EXT\\_fragment\\_density\\_map

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassFragmentDensityMapCreateInfoEXT.html)

"""
@auto_hash_equals struct RenderPassFragmentDensityMapCreateInfoEXT <: HighLevelStruct
        next::Any
        fragment_density_map_attachment::AttachmentReference
    end

"""
High-level wrapper for VkSubpassDescription.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkSubpassDescription.html)

"""
@auto_hash_equals struct SubpassDescription <: HighLevelStruct
        flags::SubpassDescriptionFlag
        pipeline_bind_point::PipelineBindPoint
        input_attachments::Vector{AttachmentReference}
        color_attachments::Vector{AttachmentReference}
        resolve_attachments::OptionalPtr{Vector{AttachmentReference}}
        depth_stencil_attachment::OptionalPtr{AttachmentReference}
        preserve_attachments::Vector{UInt32}
    end

"""
High-level wrapper for VkAttachmentDescription.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkAttachmentDescription.html)

"""
@auto_hash_equals struct AttachmentDescription <: HighLevelStruct
        flags::AttachmentDescriptionFlag
        format::Format
        samples::SampleCountFlag
        load_op::AttachmentLoadOp
        store_op::AttachmentStoreOp
        stencil_load_op::AttachmentLoadOp
        stencil_store_op::AttachmentStoreOp
        initial_layout::ImageLayout
        final_layout::ImageLayout
    end

"""
High-level wrapper for VkRenderPassCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkRenderPassCreateInfo.html)

"""
@auto_hash_equals struct RenderPassCreateInfo <: HighLevelStruct
        next::Any
        flags::RenderPassCreateFlag
        attachments::Vector{AttachmentDescription}
        subpasses::Vector{SubpassDescription}
        dependencies::Vector{SubpassDependency}
    end

"""
High-level wrapper for VkImageCreateInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageCreateInfo.html)

"""
@auto_hash_equals struct ImageCreateInfo <: HighLevelStruct
        next::Any
        flags::ImageCreateFlag
        image_type::ImageType
        format::Format
        extent::Extent3D
        mip_levels::UInt32
        array_layers::UInt32
        samples::SampleCountFlag
        tiling::ImageTiling
        usage::ImageUsageFlag
        sharing_mode::SharingMode
        queue_family_indices::Vector{UInt32}
        initial_layout::ImageLayout
    end

"""
High-level wrapper for VkImageMemoryBarrier.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkImageMemoryBarrier.html)

"""
@auto_hash_equals struct ImageMemoryBarrier <: HighLevelStruct
        next::Any
        src_access_mask::AccessFlag
        dst_access_mask::AccessFlag
        old_layout::ImageLayout
        new_layout::ImageLayout
        src_queue_family_index::UInt32
        dst_queue_family_index::UInt32
        image::Image
        subresource_range::ImageSubresourceRange
    end

"""
High-level wrapper for VkDescriptorImageInfo.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorImageInfo.html)

"""
@auto_hash_equals struct DescriptorImageInfo <: HighLevelStruct
        sampler::Sampler
        image_view::ImageView
        image_layout::ImageLayout
    end

"""
High-level wrapper for VkWriteDescriptorSet.

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkWriteDescriptorSet.html)

"""
@auto_hash_equals struct WriteDescriptorSet <: HighLevelStruct
        next::Any
        dst_set::DescriptorSet
        dst_binding::UInt32
        dst_array_element::UInt32
        descriptor_count::UInt32
        descriptor_type::DescriptorType
        image_info::Vector{DescriptorImageInfo}
        buffer_info::Vector{DescriptorBufferInfo}
        texel_buffer_view::Vector{BufferView}
    end


"""

"""
parent(physical_device::PhysicalDevice) = physical_device.instance

"""

"""
parent(device::Device) = device.physical_device

"""

"""
parent(queue::Queue) = queue.device

"""

"""
parent(command_buffer::CommandBuffer) = command_buffer.command_pool

"""

"""
parent(memory::DeviceMemory) = memory.device

"""

"""
parent(command_pool::CommandPool) = command_pool.device

"""

"""
parent(buffer::Buffer) = buffer.device

"""

"""
parent(buffer_view::BufferView) = buffer_view.device

"""

"""
parent(image::Image) = image.device

"""

"""
parent(image_view::ImageView) = image_view.device

"""

"""
parent(shader_module::ShaderModule) = shader_module.device

"""

"""
parent(pipeline::Pipeline) = pipeline.device

"""

"""
parent(pipeline_layout::PipelineLayout) = pipeline_layout.device

"""

"""
parent(sampler::Sampler) = sampler.device

"""

"""
parent(descriptor_set::DescriptorSet) = descriptor_set.descriptor_pool

"""

"""
parent(descriptor_set_layout::DescriptorSetLayout) = descriptor_set_layout.device

"""

"""
parent(descriptor_pool::DescriptorPool) = descriptor_pool.device

"""

"""
parent(fence::Fence) = fence.device

"""

"""
parent(semaphore::Semaphore) = semaphore.device

"""

"""
parent(event::Event) = event.device

"""

"""
parent(query_pool::QueryPool) = query_pool.device

"""

"""
parent(framebuffer::Framebuffer) = framebuffer.device

"""

"""
parent(render_pass::RenderPass) = render_pass.device

"""

"""
parent(pipeline_cache::PipelineCache) = pipeline_cache.device

"""

"""
parent(indirect_commands_layout::IndirectCommandsLayoutNV) = indirect_commands_layout.device

"""

"""
parent(descriptor_update_template::DescriptorUpdateTemplate) = descriptor_update_template.device

"""

"""
parent(ycbcr_conversion::SamplerYcbcrConversion) = ycbcr_conversion.device

"""

"""
parent(validation_cache::ValidationCacheEXT) = validation_cache.device

"""

"""
parent(acceleration_structure::AccelerationStructureKHR) = acceleration_structure.device

"""

"""
parent(acceleration_structure::AccelerationStructureNV) = acceleration_structure.device

"""

"""
parent(configuration::PerformanceConfigurationINTEL) = configuration.device

"""

"""
parent(operation::DeferredOperationKHR) = operation.device

"""

"""
parent(private_data_slot::PrivateDataSlotEXT) = private_data_slot.device

"""

"""
parent(display::DisplayKHR) = display.physical_device

"""

"""
parent(mode::DisplayModeKHR) = mode.display

"""

"""
parent(surface::SurfaceKHR) = surface.instance

"""

"""
parent(swapchain::SwapchainKHR) = swapchain.surface

"""

"""
parent(callback::DebugReportCallbackEXT) = callback.instance

"""

"""
parent(messenger::DebugUtilsMessengerEXT) = messenger.instance

"""

"""
_ClearColorValue(float32::NTuple{4, Float32}) = _ClearColorValue(VkClearColorValue(float32))

"""

"""
_ClearColorValue(int32::NTuple{4, Int32}) = _ClearColorValue(VkClearColorValue(int32))

"""

"""
_ClearColorValue(uint32::NTuple{4, UInt32}) = _ClearColorValue(VkClearColorValue(uint32))

"""

"""
_ClearValue(color::_ClearColorValue) = _ClearValue(VkClearValue(color.data))

"""

"""
_ClearValue(depth_stencil::_ClearDepthStencilValue) = _ClearValue(VkClearValue(depth_stencil))

"""

"""
_PerformanceCounterResultKHR(int32::Int32) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(int32))

"""

"""
_PerformanceCounterResultKHR(int64::Int64) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(int64))

"""

"""
_PerformanceCounterResultKHR(uint32::UInt32) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(uint32))

"""

"""
_PerformanceCounterResultKHR(uint64::UInt64) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(uint64))

"""

"""
_PerformanceCounterResultKHR(float32::Float32) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(float32))

"""

"""
_PerformanceCounterResultKHR(float64::Float64) = _PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(float64))

"""

"""
_PerformanceValueDataINTEL(value32::UInt32) = _PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value32))

"""

"""
_PerformanceValueDataINTEL(value64::UInt64) = _PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value64))

"""

"""
_PerformanceValueDataINTEL(value_float::AbstractFloat) = _PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_float))

"""

"""
_PerformanceValueDataINTEL(value_bool::Bool) = _PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_bool))

"""

"""
_PerformanceValueDataINTEL(value_string::String) = _PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_string))

"""

"""
PipelineExecutableStatisticValueKHR(b32::Bool) = PipelineExecutableStatisticValueKHR(VkPipelineExecutableStatisticValueKHR(b32))

"""

"""
PipelineExecutableStatisticValueKHR(i64::Signed) = PipelineExecutableStatisticValueKHR(VkPipelineExecutableStatisticValueKHR(i64))

"""

"""
PipelineExecutableStatisticValueKHR(u64::Unsigned) = PipelineExecutableStatisticValueKHR(VkPipelineExecutableStatisticValueKHR(u64))

"""

"""
PipelineExecutableStatisticValueKHR(f64::AbstractFloat) = PipelineExecutableStatisticValueKHR(VkPipelineExecutableStatisticValueKHR(f64))

"""

"""
_DeviceOrHostAddressKHR(device_address::UInt64) = _DeviceOrHostAddressKHR(VkDeviceOrHostAddressKHR(device_address))

"""

"""
_DeviceOrHostAddressKHR(host_address::Ptr{Cvoid}) = _DeviceOrHostAddressKHR(VkDeviceOrHostAddressKHR(host_address))

"""

"""
_DeviceOrHostAddressConstKHR(device_address::UInt64) = _DeviceOrHostAddressConstKHR(VkDeviceOrHostAddressConstKHR(device_address))

"""

"""
_DeviceOrHostAddressConstKHR(host_address::Ptr{Cvoid}) = _DeviceOrHostAddressConstKHR(VkDeviceOrHostAddressConstKHR(host_address))

"""

"""
_AccelerationStructureGeometryDataKHR(triangles::_AccelerationStructureGeometryTrianglesDataKHR) = _AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(triangles))

"""

"""
_AccelerationStructureGeometryDataKHR(aabbs::_AccelerationStructureGeometryAabbsDataKHR) = _AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(aabbs))

"""

"""
_AccelerationStructureGeometryDataKHR(instances::_AccelerationStructureGeometryInstancesDataKHR) = _AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(instances))

"""

"""
ClearColorValue(float32::NTuple{4, Float32}) = ClearColorValue(VkClearColorValue(float32))

"""

"""
ClearColorValue(int32::NTuple{4, Int32}) = ClearColorValue(VkClearColorValue(int32))

"""

"""
ClearColorValue(uint32::NTuple{4, UInt32}) = ClearColorValue(VkClearColorValue(uint32))

"""

"""
ClearValue(color::ClearColorValue) = ClearValue(VkClearValue(color.data))

"""

"""
ClearValue(depth_stencil::ClearDepthStencilValue) = ClearValue(VkClearValue(depth_stencil))

"""

"""
PerformanceCounterResultKHR(int32::Int32) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(int32))

"""

"""
PerformanceCounterResultKHR(int64::Int64) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(int64))

"""

"""
PerformanceCounterResultKHR(uint32::UInt32) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(uint32))

"""

"""
PerformanceCounterResultKHR(uint64::UInt64) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(uint64))

"""

"""
PerformanceCounterResultKHR(float32::Float32) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(float32))

"""

"""
PerformanceCounterResultKHR(float64::Float64) = PerformanceCounterResultKHR(VkPerformanceCounterResultKHR(float64))

"""

"""
PerformanceValueDataINTEL(value32::UInt32) = PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value32))

"""

"""
PerformanceValueDataINTEL(value64::UInt64) = PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value64))

"""

"""
PerformanceValueDataINTEL(value_float::AbstractFloat) = PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_float))

"""

"""
PerformanceValueDataINTEL(value_bool::Bool) = PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_bool))

"""

"""
PerformanceValueDataINTEL(value_string::String) = PerformanceValueDataINTEL(VkPerformanceValueDataINTEL(value_string))

"""

"""
DeviceOrHostAddressKHR(device_address::UInt64) = DeviceOrHostAddressKHR(VkDeviceOrHostAddressKHR(device_address))

"""

"""
DeviceOrHostAddressKHR(host_address::Ptr{Cvoid}) = DeviceOrHostAddressKHR(VkDeviceOrHostAddressKHR(host_address))

"""

"""
DeviceOrHostAddressConstKHR(device_address::UInt64) = DeviceOrHostAddressConstKHR(VkDeviceOrHostAddressConstKHR(device_address))

"""

"""
DeviceOrHostAddressConstKHR(host_address::Ptr{Cvoid}) = DeviceOrHostAddressConstKHR(VkDeviceOrHostAddressConstKHR(host_address))

"""

"""
AccelerationStructureGeometryDataKHR(triangles::AccelerationStructureGeometryTrianglesDataKHR) = AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(triangles))

"""

"""
AccelerationStructureGeometryDataKHR(aabbs::AccelerationStructureGeometryAabbsDataKHR) = AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(aabbs))

"""

"""
AccelerationStructureGeometryDataKHR(instances::AccelerationStructureGeometryInstancesDataKHR) = AccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryDataKHR(instances))

"""

"""
_ClearColorValue(x::ClearColorValue) = _ClearColorValue(getfield(x, :data))

"""

"""
_ClearValue(x::ClearValue) = _ClearValue(getfield(x, :data))

"""

"""
_PerformanceCounterResultKHR(x::PerformanceCounterResultKHR) = _PerformanceCounterResultKHR(getfield(x, :data))

"""

"""
_PerformanceValueDataINTEL(x::PerformanceValueDataINTEL) = _PerformanceValueDataINTEL(getfield(x, :data))

"""

"""
_DeviceOrHostAddressKHR(x::DeviceOrHostAddressKHR) = _DeviceOrHostAddressKHR(getfield(x, :data))

"""

"""
_DeviceOrHostAddressConstKHR(x::DeviceOrHostAddressConstKHR) = _DeviceOrHostAddressConstKHR(getfield(x, :data))

"""

"""
_AccelerationStructureGeometryDataKHR(x::AccelerationStructureGeometryDataKHR) = _AccelerationStructureGeometryDataKHR(getfield(x, :data))

"""

"""
convert(T::Type{_ClearColorValue}, x::ClearColorValue) = T(x)

"""

"""
convert(T::Type{_ClearValue}, x::ClearValue) = T(x)

"""

"""
convert(T::Type{_PerformanceCounterResultKHR}, x::PerformanceCounterResultKHR) = T(x)

"""

"""
convert(T::Type{_PerformanceValueDataINTEL}, x::PerformanceValueDataINTEL) = T(x)

"""

"""
convert(T::Type{_DeviceOrHostAddressKHR}, x::DeviceOrHostAddressKHR) = T(x)

"""

"""
convert(T::Type{_DeviceOrHostAddressConstKHR}, x::DeviceOrHostAddressConstKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureGeometryDataKHR}, x::AccelerationStructureGeometryDataKHR) = T(x)

"""

"""
function Base.getproperty(x::ClearColorValue, sym::Symbol)
    if sym === :float32
        x.data.float32
    elseif sym === :int32
        x.data.int32
    elseif sym === :uint32
        x.data.uint32
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::ClearValue, sym::Symbol)
    if sym === :color
        x.data.color
    elseif sym === :depth_stencil
        x.data.depthStencil
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::PerformanceCounterResultKHR, sym::Symbol)
    if sym === :int32
        x.data.int32
    elseif sym === :int64
        x.data.int64
    elseif sym === :uint32
        x.data.uint32
    elseif sym === :uint64
        x.data.uint64
    elseif sym === :float32
        x.data.float32
    elseif sym === :float64
        x.data.float64
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::PerformanceValueDataINTEL, sym::Symbol)
    if sym === :value32
        x.data.value32
    elseif sym === :value64
        x.data.value64
    elseif sym === :value_float
        x.data.valueFloat
    elseif sym === :value_bool
        x.data.valueBool
    elseif sym === :value_string
        x.data.valueString
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::DeviceOrHostAddressKHR, sym::Symbol)
    if sym === :device_address
        x.data.deviceAddress
    elseif sym === :host_address
        x.data.hostAddress
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::DeviceOrHostAddressConstKHR, sym::Symbol)
    if sym === :device_address
        x.data.deviceAddress
    elseif sym === :host_address
        x.data.hostAddress
    else
        getfield(x, sym)
    end
end

"""

"""
function Base.getproperty(x::AccelerationStructureGeometryDataKHR, sym::Symbol)
    if sym === :triangles
        x.data.triangles
    elseif sym === :aabbs
        x.data.aabbs
    elseif sym === :instances
        x.data.instances
    else
        getfield(x, sym)
    end
end

"""

"""
function _BaseOutStructure(; next = C_NULL)
    next = cconvert(Ptr{VkBaseOutStructure}, next)
    deps = [next]
    vks = VkBaseOutStructure(s_type, unsafe_convert(Ptr{VkBaseOutStructure}, next))
    _BaseOutStructure(vks, deps)
end

"""

"""
function _BaseInStructure(; next = C_NULL)
    next = cconvert(Ptr{VkBaseInStructure}, next)
    deps = [next]
    vks = VkBaseInStructure(s_type, unsafe_convert(Ptr{VkBaseInStructure}, next))
    _BaseInStructure(vks, deps)
end

"""

"""
function _Offset2D(x::Integer, y::Integer)
    _Offset2D(VkOffset2D(x, y))
end

"""

"""
function _Offset3D(x::Integer, y::Integer, z::Integer)
    _Offset3D(VkOffset3D(x, y, z))
end

"""

"""
function _Extent2D(width::Integer, height::Integer)
    _Extent2D(VkExtent2D(width, height))
end

"""

"""
function _Extent3D(width::Integer, height::Integer, depth::Integer)
    _Extent3D(VkExtent3D(width, height, depth))
end

"""

"""
function _Viewport(x::Real, y::Real, width::Real, height::Real, min_depth::Real, max_depth::Real)
    _Viewport(VkViewport(x, y, width, height, min_depth, max_depth))
end

"""

"""
function _Rect2D(offset::_Offset2D, extent::_Extent2D)
    _Rect2D(VkRect2D(offset.vks, extent.vks))
end

"""

"""
function _ClearRect(rect::_Rect2D, base_array_layer::Integer, layer_count::Integer)
    _ClearRect(VkClearRect(rect.vks, base_array_layer, layer_count))
end

"""

"""
function _ComponentMapping(r::ComponentSwizzle, g::ComponentSwizzle, b::ComponentSwizzle, a::ComponentSwizzle)
    _ComponentMapping(VkComponentMapping(r, g, b, a))
end

"""

"""
function _ApplicationInfo(application_version::VersionNumber, engine_version::VersionNumber, api_version::VersionNumber; next = C_NULL, application_name = C_NULL, engine_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    application_name = cconvert(Cstring, application_name)
    engine_name = cconvert(Cstring, engine_name)
    deps = [next, application_name, engine_name]
    vks = VkApplicationInfo(VK_STRUCTURE_TYPE_APPLICATION_INFO, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, application_name), to_vk(UInt32, application_version), unsafe_convert(Cstring, engine_name), to_vk(UInt32, engine_version), to_vk(UInt32, api_version))
    _ApplicationInfo(vks, deps)
end

"""

"""
function _AllocationCallbacks(pfn_allocation::FunctionPtr, pfn_reallocation::FunctionPtr, pfn_free::FunctionPtr; user_data = C_NULL, pfn_internal_allocation = 0, pfn_internal_free = 0)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [user_data]
    vks = VkAllocationCallbacks(unsafe_convert(Ptr{Cvoid}, user_data), pfn_allocation, pfn_reallocation, pfn_free, pfn_internal_allocation, pfn_internal_free)
    _AllocationCallbacks(vks, deps)
end

"""

"""
function _DeviceQueueCreateInfo(queue_family_index::Integer, queue_priorities::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_priorities = cconvert(Ptr{Float32}, queue_priorities)
    deps = [next, queue_priorities]
    vks = VkDeviceQueueCreateInfo(VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index, pointer_length(queue_priorities), unsafe_convert(Ptr{Float32}, queue_priorities))
    _DeviceQueueCreateInfo(vks, deps)
end

"""

"""
function _DeviceCreateInfo(queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, enabled_features = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_create_infos = cconvert(Ptr{VkDeviceQueueCreateInfo}, queue_create_infos)
    enabled_layer_names = cconvert(Ptr{Cstring}, enabled_layer_names)
    enabled_extension_names = cconvert(Ptr{Cstring}, enabled_extension_names)
    enabled_features = cconvert(Ptr{VkPhysicalDeviceFeatures}, enabled_features)
    deps = [next, queue_create_infos, enabled_layer_names, enabled_extension_names, enabled_features]
    vks = VkDeviceCreateInfo(VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(queue_create_infos), unsafe_convert(Ptr{VkDeviceQueueCreateInfo}, queue_create_infos), pointer_length(enabled_layer_names), unsafe_convert(Ptr{Cstring}, enabled_layer_names), pointer_length(enabled_extension_names), unsafe_convert(Ptr{Cstring}, enabled_extension_names), unsafe_convert(Ptr{VkPhysicalDeviceFeatures}, enabled_features))
    _DeviceCreateInfo(vks, deps)
end

"""

"""
function _InstanceCreateInfo(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, application_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    application_info = cconvert(Ptr{VkApplicationInfo}, application_info)
    enabled_layer_names = cconvert(Ptr{Cstring}, enabled_layer_names)
    enabled_extension_names = cconvert(Ptr{Cstring}, enabled_extension_names)
    deps = [next, application_info, enabled_layer_names, enabled_extension_names]
    vks = VkInstanceCreateInfo(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkApplicationInfo}, application_info), pointer_length(enabled_layer_names), unsafe_convert(Ptr{Cstring}, enabled_layer_names), pointer_length(enabled_extension_names), unsafe_convert(Ptr{Cstring}, enabled_extension_names))
    _InstanceCreateInfo(vks, deps)
end

"""

"""
function _MemoryAllocateInfo(allocation_size::Integer, memory_type_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), allocation_size, memory_type_index)
    _MemoryAllocateInfo(vks, deps)
end

"""

"""
function _MappedMemoryRange(memory, offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMappedMemoryRange(VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, unsafe_convert(Ptr{Cvoid}, next), memory, offset, size)
    _MappedMemoryRange(vks, deps, memory)
end

"""

"""
function _DescriptorBufferInfo(offset::Integer, range::Integer; buffer = C_NULL)
    _DescriptorBufferInfo(VkDescriptorBufferInfo(buffer, offset, range), buffer)
end

"""

"""
function _DescriptorImageInfo(sampler, image_view, image_layout::ImageLayout)
    _DescriptorImageInfo(VkDescriptorImageInfo(sampler, image_view, image_layout), sampler, image_view)
end

"""

"""
function _WriteDescriptorSet(dst_set, dst_binding::Integer, dst_array_element::Integer, descriptor_type::DescriptorType, image_info::AbstractArray, buffer_info::AbstractArray, texel_buffer_view::AbstractArray; next = C_NULL, descriptor_count = max(pointer_length(image_info), pointer_length(buffer_info), pointer_length(texel_buffer_view)))
    next = cconvert(Ptr{Cvoid}, next)
    image_info = cconvert(Ptr{VkDescriptorImageInfo}, image_info)
    buffer_info = cconvert(Ptr{VkDescriptorBufferInfo}, buffer_info)
    texel_buffer_view = cconvert(Ptr{VkBufferView}, texel_buffer_view)
    deps = [next, image_info, buffer_info, texel_buffer_view]
    vks = VkWriteDescriptorSet(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, unsafe_convert(Ptr{Cvoid}, next), dst_set, dst_binding, dst_array_element, descriptor_count, descriptor_type, unsafe_convert(Ptr{VkDescriptorImageInfo}, image_info), unsafe_convert(Ptr{VkDescriptorBufferInfo}, buffer_info), unsafe_convert(Ptr{VkBufferView}, texel_buffer_view))
    _WriteDescriptorSet(vks, deps, dst_set)
end

"""

"""
function _CopyDescriptorSet(src_set, src_binding::Integer, src_array_element::Integer, dst_set, dst_binding::Integer, dst_array_element::Integer, descriptor_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyDescriptorSet(VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, unsafe_convert(Ptr{Cvoid}, next), src_set, src_binding, src_array_element, dst_set, dst_binding, dst_array_element, descriptor_count)
    _CopyDescriptorSet(vks, deps, src_set, dst_set)
end

"""

"""
function _BufferCreateInfo(size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkBufferCreateInfo(VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, size, usage, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices))
    _BufferCreateInfo(vks, deps)
end

"""

"""
function _BufferViewCreateInfo(buffer, format::Format, offset::Integer, range::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferViewCreateInfo(VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, buffer, format, offset, range)
    _BufferViewCreateInfo(vks, deps, buffer)
end

"""

"""
function _ImageSubresource(aspect_mask::ImageAspectFlag, mip_level::Integer, array_layer::Integer)
    _ImageSubresource(VkImageSubresource(aspect_mask, mip_level, array_layer))
end

"""

"""
function _ImageSubresourceLayers(aspect_mask::ImageAspectFlag, mip_level::Integer, base_array_layer::Integer, layer_count::Integer)
    _ImageSubresourceLayers(VkImageSubresourceLayers(aspect_mask, mip_level, base_array_layer, layer_count))
end

"""

"""
function _ImageSubresourceRange(aspect_mask::ImageAspectFlag, base_mip_level::Integer, level_count::Integer, base_array_layer::Integer, layer_count::Integer)
    _ImageSubresourceRange(VkImageSubresourceRange(aspect_mask, base_mip_level, level_count, base_array_layer, layer_count))
end

"""

"""
function _MemoryBarrier(; next = C_NULL, src_access_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryBarrier(VK_STRUCTURE_TYPE_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask)
    _MemoryBarrier(vks, deps)
end

"""

"""
function _BufferMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer, offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryBarrier(VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)
    _BufferMemoryBarrier(vks, deps, buffer)
end

"""

"""
function _ImageMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image, subresource_range::_ImageSubresourceRange; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryBarrier(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, unsafe_convert(Ptr{Cvoid}, next), src_access_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range.vks)
    _ImageMemoryBarrier(vks, deps, image)
end

"""

"""
function _ImageCreateInfo(image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkImageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, image_type, format, extent.vks, mip_levels, array_layers, VkSampleCountFlagBits(samples.val), tiling, usage, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices), initial_layout)
    _ImageCreateInfo(vks, deps)
end

"""

"""
function _ImageViewCreateInfo(image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewCreateInfo(VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, image, view_type, format, components.vks, subresource_range.vks)
    _ImageViewCreateInfo(vks, deps, image)
end

"""

"""
function _BufferCopy(src_offset::Integer, dst_offset::Integer, size::Integer)
    _BufferCopy(VkBufferCopy(src_offset, dst_offset, size))
end

"""

"""
function _SparseMemoryBind(resource_offset::Integer, size::Integer, memory_offset::Integer; memory = C_NULL, flags = 0)
    _SparseMemoryBind(VkSparseMemoryBind(resource_offset, size, memory, memory_offset, flags), memory)
end

"""

"""
function _SparseImageMemoryBind(subresource::_ImageSubresource, offset::_Offset3D, extent::_Extent3D, memory_offset::Integer; memory = C_NULL, flags = 0)
    _SparseImageMemoryBind(VkSparseImageMemoryBind(subresource.vks, offset.vks, extent.vks, memory, memory_offset, flags), memory)
end

"""

"""
function _SparseBufferMemoryBindInfo(buffer, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseBufferMemoryBindInfo(buffer, pointer_length(binds), unsafe_convert(Ptr{VkSparseMemoryBind}, binds))
    _SparseBufferMemoryBindInfo(vks, deps, buffer)
end

"""

"""
function _SparseImageOpaqueMemoryBindInfo(image, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseImageOpaqueMemoryBindInfo(image, pointer_length(binds), unsafe_convert(Ptr{VkSparseMemoryBind}, binds))
    _SparseImageOpaqueMemoryBindInfo(vks, deps, image)
end

"""

"""
function _SparseImageMemoryBindInfo(image, binds::AbstractArray)
    binds = cconvert(Ptr{VkSparseImageMemoryBind}, binds)
    deps = [binds]
    vks = VkSparseImageMemoryBindInfo(image, pointer_length(binds), unsafe_convert(Ptr{VkSparseImageMemoryBind}, binds))
    _SparseImageMemoryBindInfo(vks, deps, image)
end

"""

"""
function _BindSparseInfo(wait_semaphores::AbstractArray, buffer_binds::AbstractArray, image_opaque_binds::AbstractArray, image_binds::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    buffer_binds = cconvert(Ptr{VkSparseBufferMemoryBindInfo}, buffer_binds)
    image_opaque_binds = cconvert(Ptr{VkSparseImageOpaqueMemoryBindInfo}, image_opaque_binds)
    image_binds = cconvert(Ptr{VkSparseImageMemoryBindInfo}, image_binds)
    signal_semaphores = cconvert(Ptr{VkSemaphore}, signal_semaphores)
    deps = [next, wait_semaphores, buffer_binds, image_opaque_binds, image_binds, signal_semaphores]
    vks = VkBindSparseInfo(VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), pointer_length(buffer_binds), unsafe_convert(Ptr{VkSparseBufferMemoryBindInfo}, buffer_binds), pointer_length(image_opaque_binds), unsafe_convert(Ptr{VkSparseImageOpaqueMemoryBindInfo}, image_opaque_binds), pointer_length(image_binds), unsafe_convert(Ptr{VkSparseImageMemoryBindInfo}, image_binds), pointer_length(signal_semaphores), unsafe_convert(Ptr{VkSemaphore}, signal_semaphores))
    _BindSparseInfo(vks, deps)
end

"""

"""
function _ImageCopy(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D)
    _ImageCopy(VkImageCopy(src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks))
end

"""

"""
function _ImageBlit(src_subresource::_ImageSubresourceLayers, src_offsets::NTuple{2, _Offset3D}, dst_subresource::_ImageSubresourceLayers, dst_offsets::NTuple{2, _Offset3D})
    _ImageBlit(VkImageBlit(src_subresource.vks, to_vk(NTuple{2, VkOffset3D}, src_offsets), dst_subresource.vks, to_vk(NTuple{2, VkOffset3D}, dst_offsets)))
end

"""

"""
function _BufferImageCopy(buffer_offset::Integer, buffer_row_length::Integer, buffer_image_height::Integer, image_subresource::_ImageSubresourceLayers, image_offset::_Offset3D, image_extent::_Extent3D)
    _BufferImageCopy(VkBufferImageCopy(buffer_offset, buffer_row_length, buffer_image_height, image_subresource.vks, image_offset.vks, image_extent.vks))
end

"""

"""
function _ImageResolve(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D)
    _ImageResolve(VkImageResolve(src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks))
end

"""

"""
function _ShaderModuleCreateInfo(code_size::Integer, code::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    code = cconvert(Ptr{UInt32}, code)
    deps = [next, code]
    vks = VkShaderModuleCreateInfo(VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, code_size, unsafe_convert(Ptr{UInt32}, code))
    _ShaderModuleCreateInfo(vks, deps)
end

"""

"""
function _DescriptorSetLayoutBinding(binding::Integer, descriptor_type::DescriptorType, stage_flags::ShaderStageFlag; descriptor_count = 0, immutable_samplers = C_NULL)
    immutable_samplers = cconvert(Ptr{VkSampler}, immutable_samplers)
    deps = [immutable_samplers]
    vks = VkDescriptorSetLayoutBinding(binding, descriptor_type, descriptor_count, stage_flags, unsafe_convert(Ptr{VkSampler}, immutable_samplers))
    _DescriptorSetLayoutBinding(vks, deps)
end

"""

"""
function _DescriptorSetLayoutCreateInfo(bindings::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    bindings = cconvert(Ptr{VkDescriptorSetLayoutBinding}, bindings)
    deps = [next, bindings]
    vks = VkDescriptorSetLayoutCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(bindings), unsafe_convert(Ptr{VkDescriptorSetLayoutBinding}, bindings))
    _DescriptorSetLayoutCreateInfo(vks, deps)
end

"""

"""
function _DescriptorPoolSize(type::DescriptorType, descriptor_count::Integer)
    _DescriptorPoolSize(VkDescriptorPoolSize(type, descriptor_count))
end

"""

"""
function _DescriptorPoolCreateInfo(max_sets::Integer, pool_sizes::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    pool_sizes = cconvert(Ptr{VkDescriptorPoolSize}, pool_sizes)
    deps = [next, pool_sizes]
    vks = VkDescriptorPoolCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, max_sets, pointer_length(pool_sizes), unsafe_convert(Ptr{VkDescriptorPoolSize}, pool_sizes))
    _DescriptorPoolCreateInfo(vks, deps)
end

"""

"""
function _DescriptorSetAllocateInfo(descriptor_pool, set_layouts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    set_layouts = cconvert(Ptr{VkDescriptorSetLayout}, set_layouts)
    deps = [next, set_layouts]
    vks = VkDescriptorSetAllocateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), descriptor_pool, pointer_length(set_layouts), unsafe_convert(Ptr{VkDescriptorSetLayout}, set_layouts))
    _DescriptorSetAllocateInfo(vks, deps, descriptor_pool)
end

"""

"""
function _SpecializationMapEntry(constant_id::Integer, offset::Integer, size::Integer)
    _SpecializationMapEntry(VkSpecializationMapEntry(constant_id, offset, size))
end

"""

"""
function _SpecializationInfo(map_entries::AbstractArray, data::Ptr{Cvoid}; data_size = 0)
    map_entries = cconvert(Ptr{VkSpecializationMapEntry}, map_entries)
    data = cconvert(Ptr{Cvoid}, data)
    deps = [map_entries, data]
    vks = VkSpecializationInfo(pointer_length(map_entries), unsafe_convert(Ptr{VkSpecializationMapEntry}, map_entries), data_size, unsafe_convert(Ptr{Cvoid}, data))
    _SpecializationInfo(vks, deps)
end

"""

"""
function _PipelineShaderStageCreateInfo(stage::ShaderStageFlag, _module, name::AbstractString; next = C_NULL, flags = 0, specialization_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    name = cconvert(Cstring, name)
    specialization_info = cconvert(Ptr{VkSpecializationInfo}, specialization_info)
    deps = [next, name, specialization_info]
    vks = VkPipelineShaderStageCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, VkShaderStageFlagBits(stage.val), _module, unsafe_convert(Cstring, name), unsafe_convert(Ptr{VkSpecializationInfo}, specialization_info))
    _PipelineShaderStageCreateInfo(vks, deps, _module)
end

"""

"""
function _ComputePipelineCreateInfo(stage::_PipelineShaderStageCreateInfo, layout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkComputePipelineCreateInfo(VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, stage.vks, layout, base_pipeline_handle, base_pipeline_index)
    _ComputePipelineCreateInfo(vks, deps, layout, base_pipeline_handle)
end

"""

"""
function _VertexInputBindingDescription(binding::Integer, stride::Integer, input_rate::VertexInputRate)
    _VertexInputBindingDescription(VkVertexInputBindingDescription(binding, stride, input_rate))
end

"""

"""
function _VertexInputAttributeDescription(location::Integer, binding::Integer, format::Format, offset::Integer)
    _VertexInputAttributeDescription(VkVertexInputAttributeDescription(location, binding, format, offset))
end

"""

"""
function _PipelineVertexInputStateCreateInfo(vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    vertex_binding_descriptions = cconvert(Ptr{VkVertexInputBindingDescription}, vertex_binding_descriptions)
    vertex_attribute_descriptions = cconvert(Ptr{VkVertexInputAttributeDescription}, vertex_attribute_descriptions)
    deps = [next, vertex_binding_descriptions, vertex_attribute_descriptions]
    vks = VkPipelineVertexInputStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(vertex_binding_descriptions), unsafe_convert(Ptr{VkVertexInputBindingDescription}, vertex_binding_descriptions), pointer_length(vertex_attribute_descriptions), unsafe_convert(Ptr{VkVertexInputAttributeDescription}, vertex_attribute_descriptions))
    _PipelineVertexInputStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineInputAssemblyStateCreateInfo(topology::PrimitiveTopology, primitive_restart_enable::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineInputAssemblyStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, topology, primitive_restart_enable)
    _PipelineInputAssemblyStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineTessellationStateCreateInfo(patch_control_points::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineTessellationStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, patch_control_points)
    _PipelineTessellationStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineViewportStateCreateInfo(; next = C_NULL, flags = 0, viewports = C_NULL, scissors = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewports = cconvert(Ptr{VkViewport}, viewports)
    scissors = cconvert(Ptr{VkRect2D}, scissors)
    deps = [next, viewports, scissors]
    vks = VkPipelineViewportStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(viewports), unsafe_convert(Ptr{VkViewport}, viewports), pointer_length(scissors), unsafe_convert(Ptr{VkRect2D}, scissors))
    _PipelineViewportStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineRasterizationStateCreateInfo(depth_clamp_enable::Bool, rasterizer_discard_enable::Bool, polygon_mode::PolygonMode, front_face::FrontFace, depth_bias_enable::Bool, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, line_width::Real; next = C_NULL, flags = 0, cull_mode = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, depth_clamp_enable, rasterizer_discard_enable, polygon_mode, cull_mode, front_face, depth_bias_enable, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor, line_width)
    _PipelineRasterizationStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineMultisampleStateCreateInfo(rasterization_samples::SampleCountFlag, sample_shading_enable::Bool, min_sample_shading::Real, alpha_to_coverage_enable::Bool, alpha_to_one_enable::Bool; next = C_NULL, flags = 0, sample_mask = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sample_mask = cconvert(Ptr{VkSampleMask}, sample_mask)
    deps = [next, sample_mask]
    vks = VkPipelineMultisampleStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, VkSampleCountFlagBits(rasterization_samples.val), sample_shading_enable, min_sample_shading, unsafe_convert(Ptr{VkSampleMask}, sample_mask), alpha_to_coverage_enable, alpha_to_one_enable)
    _PipelineMultisampleStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineColorBlendAttachmentState(blend_enable::Bool, src_color_blend_factor::BlendFactor, dst_color_blend_factor::BlendFactor, color_blend_op::BlendOp, src_alpha_blend_factor::BlendFactor, dst_alpha_blend_factor::BlendFactor, alpha_blend_op::BlendOp; color_write_mask = 0)
    _PipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState(blend_enable, src_color_blend_factor, dst_color_blend_factor, color_blend_op, src_alpha_blend_factor, dst_alpha_blend_factor, alpha_blend_op, color_write_mask))
end

"""

"""
function _PipelineColorBlendStateCreateInfo(logic_op_enable::Bool, logic_op::LogicOp, attachments::AbstractArray, blend_constants::NTuple{4, Float32}; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkPipelineColorBlendAttachmentState}, attachments)
    deps = [next, attachments]
    vks = VkPipelineColorBlendStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, logic_op_enable, logic_op, pointer_length(attachments), unsafe_convert(Ptr{VkPipelineColorBlendAttachmentState}, attachments), blend_constants)
    _PipelineColorBlendStateCreateInfo(vks, deps)
end

"""

"""
function _PipelineDynamicStateCreateInfo(dynamic_states::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    dynamic_states = cconvert(Ptr{VkDynamicState}, dynamic_states)
    deps = [next, dynamic_states]
    vks = VkPipelineDynamicStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(dynamic_states), unsafe_convert(Ptr{VkDynamicState}, dynamic_states))
    _PipelineDynamicStateCreateInfo(vks, deps)
end

"""

"""
function _StencilOpState(fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp, compare_mask::Integer, write_mask::Integer, reference::Integer)
    _StencilOpState(VkStencilOpState(fail_op, pass_op, depth_fail_op, compare_op, compare_mask, write_mask, reference))
end

"""

"""
function _PipelineDepthStencilStateCreateInfo(depth_test_enable::Bool, depth_write_enable::Bool, depth_compare_op::CompareOp, depth_bounds_test_enable::Bool, stencil_test_enable::Bool, front::_StencilOpState, back::_StencilOpState, min_depth_bounds::Real, max_depth_bounds::Real; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineDepthStencilStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, depth_test_enable, depth_write_enable, depth_compare_op, depth_bounds_test_enable, stencil_test_enable, front.vks, back.vks, min_depth_bounds, max_depth_bounds)
    _PipelineDepthStencilStateCreateInfo(vks, deps)
end

"""

"""
function _GraphicsPipelineCreateInfo(stages::AbstractArray, rasterization_state::_PipelineRasterizationStateCreateInfo, layout, render_pass, subpass::Integer, base_pipeline_index::Integer; next = C_NULL, flags = 0, vertex_input_state = C_NULL, input_assembly_state = C_NULL, tessellation_state = C_NULL, viewport_state = C_NULL, multisample_state = C_NULL, depth_stencil_state = C_NULL, color_blend_state = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    vertex_input_state = cconvert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state)
    input_assembly_state = cconvert(Ptr{VkPipelineInputAssemblyStateCreateInfo}, input_assembly_state)
    tessellation_state = cconvert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state)
    viewport_state = cconvert(Ptr{VkPipelineViewportStateCreateInfo}, viewport_state)
    rasterization_state = cconvert(Ptr{VkPipelineRasterizationStateCreateInfo}, rasterization_state)
    multisample_state = cconvert(Ptr{VkPipelineMultisampleStateCreateInfo}, multisample_state)
    depth_stencil_state = cconvert(Ptr{VkPipelineDepthStencilStateCreateInfo}, depth_stencil_state)
    color_blend_state = cconvert(Ptr{VkPipelineColorBlendStateCreateInfo}, color_blend_state)
    dynamic_state = cconvert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state)
    deps = [next, stages, vertex_input_state, input_assembly_state, tessellation_state, viewport_state, rasterization_state, multisample_state, depth_stencil_state, color_blend_state, dynamic_state]
    vks = VkGraphicsPipelineCreateInfo(VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), unsafe_convert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state), unsafe_convert(Ptr{VkPipelineInputAssemblyStateCreateInfo}, input_assembly_state), unsafe_convert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state), unsafe_convert(Ptr{VkPipelineViewportStateCreateInfo}, viewport_state), unsafe_convert(Ptr{VkPipelineRasterizationStateCreateInfo}, rasterization_state), unsafe_convert(Ptr{VkPipelineMultisampleStateCreateInfo}, multisample_state), unsafe_convert(Ptr{VkPipelineDepthStencilStateCreateInfo}, depth_stencil_state), unsafe_convert(Ptr{VkPipelineColorBlendStateCreateInfo}, color_blend_state), unsafe_convert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state), layout, render_pass, subpass, base_pipeline_handle, base_pipeline_index)
    _GraphicsPipelineCreateInfo(vks, deps, layout, render_pass, base_pipeline_handle)
end

"""

"""
function _PipelineCacheCreateInfo(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = 0)
    next = cconvert(Ptr{Cvoid}, next)
    initial_data = cconvert(Ptr{Cvoid}, initial_data)
    deps = [next, initial_data]
    vks = VkPipelineCacheCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, initial_data_size, unsafe_convert(Ptr{Cvoid}, initial_data))
    _PipelineCacheCreateInfo(vks, deps)
end

"""

"""
function _PushConstantRange(stage_flags::ShaderStageFlag, offset::Integer, size::Integer)
    _PushConstantRange(VkPushConstantRange(stage_flags, offset, size))
end

"""

"""
function _PipelineLayoutCreateInfo(set_layouts::AbstractArray, push_constant_ranges::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    set_layouts = cconvert(Ptr{VkDescriptorSetLayout}, set_layouts)
    push_constant_ranges = cconvert(Ptr{VkPushConstantRange}, push_constant_ranges)
    deps = [next, set_layouts, push_constant_ranges]
    vks = VkPipelineLayoutCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(set_layouts), unsafe_convert(Ptr{VkDescriptorSetLayout}, set_layouts), pointer_length(push_constant_ranges), unsafe_convert(Ptr{VkPushConstantRange}, push_constant_ranges))
    _PipelineLayoutCreateInfo(vks, deps)
end

"""

"""
function _SamplerCreateInfo(mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates)
    _SamplerCreateInfo(vks, deps)
end

"""

"""
function _CommandPoolCreateInfo(queue_family_index::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandPoolCreateInfo(VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index)
    _CommandPoolCreateInfo(vks, deps)
end

"""

"""
function _CommandBufferAllocateInfo(command_pool, level::CommandBufferLevel, command_buffer_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferAllocateInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), command_pool, level, command_buffer_count)
    _CommandBufferAllocateInfo(vks, deps, command_pool)
end

"""

"""
function _CommandBufferInheritanceInfo(subpass::Integer, occlusion_query_enable::Bool; next = C_NULL, render_pass = C_NULL, framebuffer = C_NULL, query_flags = 0, pipeline_statistics = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, unsafe_convert(Ptr{Cvoid}, next), render_pass, subpass, framebuffer, occlusion_query_enable, query_flags, pipeline_statistics)
    _CommandBufferInheritanceInfo(vks, deps, render_pass, framebuffer)
end

"""

"""
function _CommandBufferBeginInfo(; next = C_NULL, flags = 0, inheritance_info = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    inheritance_info = cconvert(Ptr{VkCommandBufferInheritanceInfo}, inheritance_info)
    deps = [next, inheritance_info]
    vks = VkCommandBufferBeginInfo(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Ptr{VkCommandBufferInheritanceInfo}, inheritance_info))
    _CommandBufferBeginInfo(vks, deps)
end

"""

"""
function _RenderPassBeginInfo(render_pass, framebuffer, render_area::_Rect2D, clear_values::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    clear_values = cconvert(Ptr{VkClearValue}, clear_values)
    deps = [next, clear_values]
    vks = VkRenderPassBeginInfo(VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), render_pass, framebuffer, render_area.vks, pointer_length(clear_values), unsafe_convert(Ptr{VkClearValue}, clear_values))
    _RenderPassBeginInfo(vks, deps, render_pass, framebuffer)
end

"""

"""
function _ClearDepthStencilValue(depth::Real, stencil::Integer)
    _ClearDepthStencilValue(VkClearDepthStencilValue(depth, stencil))
end

"""

"""
function _ClearAttachment(aspect_mask::ImageAspectFlag, color_attachment::Integer, clear_value::_ClearValue)
    _ClearAttachment(VkClearAttachment(aspect_mask, color_attachment, clear_value.vks))
end

"""

"""
function _AttachmentDescription(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; flags = 0)
    _AttachmentDescription(VkAttachmentDescription(flags, format, VkSampleCountFlagBits(samples.val), load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout))
end

"""

"""
function _AttachmentReference(attachment::Integer, layout::ImageLayout)
    _AttachmentReference(VkAttachmentReference(attachment, layout))
end

"""

"""
function _SubpassDescription(pipeline_bind_point::PipelineBindPoint, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL)
    input_attachments = cconvert(Ptr{VkAttachmentReference}, input_attachments)
    color_attachments = cconvert(Ptr{VkAttachmentReference}, color_attachments)
    resolve_attachments = cconvert(Ptr{VkAttachmentReference}, resolve_attachments)
    depth_stencil_attachment = cconvert(Ptr{VkAttachmentReference}, depth_stencil_attachment)
    preserve_attachments = cconvert(Ptr{UInt32}, preserve_attachments)
    deps = [input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments]
    vks = VkSubpassDescription(flags, pipeline_bind_point, pointer_length(input_attachments), unsafe_convert(Ptr{VkAttachmentReference}, input_attachments), pointer_length(color_attachments), unsafe_convert(Ptr{VkAttachmentReference}, color_attachments), unsafe_convert(Ptr{VkAttachmentReference}, resolve_attachments), unsafe_convert(Ptr{VkAttachmentReference}, depth_stencil_attachment), pointer_length(preserve_attachments), unsafe_convert(Ptr{UInt32}, preserve_attachments))
    _SubpassDescription(vks, deps)
end

"""

"""
function _SubpassDependency(src_subpass::Integer, dst_subpass::Integer; src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0)
    _SubpassDependency(VkSubpassDependency(src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags))
end

"""

"""
function _RenderPassCreateInfo(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkAttachmentDescription}, attachments)
    subpasses = cconvert(Ptr{VkSubpassDescription}, subpasses)
    dependencies = cconvert(Ptr{VkSubpassDependency}, dependencies)
    deps = [next, attachments, subpasses, dependencies]
    vks = VkRenderPassCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(attachments), unsafe_convert(Ptr{VkAttachmentDescription}, attachments), pointer_length(subpasses), unsafe_convert(Ptr{VkSubpassDescription}, subpasses), pointer_length(dependencies), unsafe_convert(Ptr{VkSubpassDependency}, dependencies))
    _RenderPassCreateInfo(vks, deps)
end

"""

"""
function _EventCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkEventCreateInfo(VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _EventCreateInfo(vks, deps)
end

"""

"""
function _FenceCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceCreateInfo(VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _FenceCreateInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceFeatures(robust_buffer_access::Bool, full_draw_index_uint_32::Bool, image_cube_array::Bool, independent_blend::Bool, geometry_shader::Bool, tessellation_shader::Bool, sample_rate_shading::Bool, dual_src_blend::Bool, logic_op::Bool, multi_draw_indirect::Bool, draw_indirect_first_instance::Bool, depth_clamp::Bool, depth_bias_clamp::Bool, fill_mode_non_solid::Bool, depth_bounds::Bool, wide_lines::Bool, large_points::Bool, alpha_to_one::Bool, multi_viewport::Bool, sampler_anisotropy::Bool, texture_compression_etc_2::Bool, texture_compression_astc_ldr::Bool, texture_compression_bc::Bool, occlusion_query_precise::Bool, pipeline_statistics_query::Bool, vertex_pipeline_stores_and_atomics::Bool, fragment_stores_and_atomics::Bool, shader_tessellation_and_geometry_point_size::Bool, shader_image_gather_extended::Bool, shader_storage_image_extended_formats::Bool, shader_storage_image_multisample::Bool, shader_storage_image_read_without_format::Bool, shader_storage_image_write_without_format::Bool, shader_uniform_buffer_array_dynamic_indexing::Bool, shader_sampled_image_array_dynamic_indexing::Bool, shader_storage_buffer_array_dynamic_indexing::Bool, shader_storage_image_array_dynamic_indexing::Bool, shader_clip_distance::Bool, shader_cull_distance::Bool, shader_float_64::Bool, shader_int_64::Bool, shader_int_16::Bool, shader_resource_residency::Bool, shader_resource_min_lod::Bool, sparse_binding::Bool, sparse_residency_buffer::Bool, sparse_residency_image_2_d::Bool, sparse_residency_image_3_d::Bool, sparse_residency_2_samples::Bool, sparse_residency_4_samples::Bool, sparse_residency_8_samples::Bool, sparse_residency_16_samples::Bool, sparse_residency_aliased::Bool, variable_multisample_rate::Bool, inherited_queries::Bool)
    _PhysicalDeviceFeatures(VkPhysicalDeviceFeatures(robust_buffer_access, full_draw_index_uint_32, image_cube_array, independent_blend, geometry_shader, tessellation_shader, sample_rate_shading, dual_src_blend, logic_op, multi_draw_indirect, draw_indirect_first_instance, depth_clamp, depth_bias_clamp, fill_mode_non_solid, depth_bounds, wide_lines, large_points, alpha_to_one, multi_viewport, sampler_anisotropy, texture_compression_etc_2, texture_compression_astc_ldr, texture_compression_bc, occlusion_query_precise, pipeline_statistics_query, vertex_pipeline_stores_and_atomics, fragment_stores_and_atomics, shader_tessellation_and_geometry_point_size, shader_image_gather_extended, shader_storage_image_extended_formats, shader_storage_image_multisample, shader_storage_image_read_without_format, shader_storage_image_write_without_format, shader_uniform_buffer_array_dynamic_indexing, shader_sampled_image_array_dynamic_indexing, shader_storage_buffer_array_dynamic_indexing, shader_storage_image_array_dynamic_indexing, shader_clip_distance, shader_cull_distance, shader_float_64, shader_int_64, shader_int_16, shader_resource_residency, shader_resource_min_lod, sparse_binding, sparse_residency_buffer, sparse_residency_image_2_d, sparse_residency_image_3_d, sparse_residency_2_samples, sparse_residency_4_samples, sparse_residency_8_samples, sparse_residency_16_samples, sparse_residency_aliased, variable_multisample_rate, inherited_queries))
end

"""

"""
function _SemaphoreCreateInfo(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreCreateInfo(VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags)
    _SemaphoreCreateInfo(vks, deps)
end

"""

"""
function _QueryPoolCreateInfo(query_type::QueryType, query_count::Integer; next = C_NULL, flags = 0, pipeline_statistics = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkQueryPoolCreateInfo(VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, query_type, query_count, pipeline_statistics)
    _QueryPoolCreateInfo(vks, deps)
end

"""

"""
function _FramebufferCreateInfo(render_pass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkImageView}, attachments)
    deps = [next, attachments]
    vks = VkFramebufferCreateInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, render_pass, pointer_length(attachments), unsafe_convert(Ptr{VkImageView}, attachments), width, height, layers)
    _FramebufferCreateInfo(vks, deps, render_pass)
end

"""

"""
function _DrawIndirectCommand(vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer)
    _DrawIndirectCommand(VkDrawIndirectCommand(vertex_count, instance_count, first_vertex, first_instance))
end

"""

"""
function _DrawIndexedIndirectCommand(index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer)
    _DrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand(index_count, instance_count, first_index, vertex_offset, first_instance))
end

"""

"""
function _DispatchIndirectCommand(x::Integer, y::Integer, z::Integer)
    _DispatchIndirectCommand(VkDispatchIndirectCommand(x, y, z))
end

"""

"""
function _SubmitInfo(wait_semaphores::AbstractArray, wait_dst_stage_mask::AbstractArray, command_buffers::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    wait_dst_stage_mask = cconvert(Ptr{VkPipelineStageFlags}, wait_dst_stage_mask)
    command_buffers = cconvert(Ptr{VkCommandBuffer}, command_buffers)
    signal_semaphores = cconvert(Ptr{VkSemaphore}, signal_semaphores)
    deps = [next, wait_semaphores, wait_dst_stage_mask, command_buffers, signal_semaphores]
    vks = VkSubmitInfo(VK_STRUCTURE_TYPE_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), unsafe_convert(Ptr{VkPipelineStageFlags}, wait_dst_stage_mask), pointer_length(command_buffers), unsafe_convert(Ptr{VkCommandBuffer}, command_buffers), pointer_length(signal_semaphores), unsafe_convert(Ptr{VkSemaphore}, signal_semaphores))
    _SubmitInfo(vks, deps)
end

"""

"""
function _DisplayModeParametersKHR(visible_region::_Extent2D, refresh_rate::Integer)
    _DisplayModeParametersKHR(VkDisplayModeParametersKHR(visible_region.vks, refresh_rate))
end

"""

"""
function _DisplayModeCreateInfoKHR(parameters::_DisplayModeParametersKHR; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayModeCreateInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, parameters.vks)
    _DisplayModeCreateInfoKHR(vks, deps)
end

"""

"""
function _DisplaySurfaceCreateInfoKHR(display_mode, plane_index::Integer, plane_stack_index::Integer, transform::SurfaceTransformFlagKHR, global_alpha::Real, alpha_mode::DisplayPlaneAlphaFlagKHR, image_extent::_Extent2D; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplaySurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, display_mode, plane_index, plane_stack_index, VkSurfaceTransformFlagBitsKHR(transform.val), global_alpha, VkDisplayPlaneAlphaFlagBitsKHR(alpha_mode.val), image_extent.vks)
    _DisplaySurfaceCreateInfoKHR(vks, deps, display_mode)
end

"""

"""
function _DisplayPresentInfoKHR(src_rect::_Rect2D, dst_rect::_Rect2D, persistent::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPresentInfoKHR(VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src_rect.vks, dst_rect.vks, persistent)
    _DisplayPresentInfoKHR(vks, deps)
end

"""

"""
function _Win32SurfaceCreateInfoKHR(hinstance::vk.HINSTANCE, hwnd::vk.HWND; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkWin32SurfaceCreateInfoKHR(VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, hinstance, hwnd)
    _Win32SurfaceCreateInfoKHR(vks, deps)
end

"""

"""
function _SwapchainCreateInfoKHR(surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; next = C_NULL, flags = 0, old_swapchain = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, surface, min_image_count, image_format, image_color_space, image_extent.vks, image_array_layers, image_usage, image_sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices), VkSurfaceTransformFlagBitsKHR(pre_transform.val), VkCompositeAlphaFlagBitsKHR(composite_alpha.val), present_mode, clipped, old_swapchain)
    _SwapchainCreateInfoKHR(vks, deps, surface, old_swapchain)
end

"""

"""
function _PresentInfoKHR(wait_semaphores::AbstractArray, swapchains::AbstractArray, image_indices::AbstractArray; next = C_NULL, results = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphores = cconvert(Ptr{VkSemaphore}, wait_semaphores)
    swapchains = cconvert(Ptr{VkSwapchainKHR}, swapchains)
    image_indices = cconvert(Ptr{UInt32}, image_indices)
    results = cconvert(Ptr{VkResult}, results)
    deps = [next, wait_semaphores, swapchains, image_indices, results]
    vks = VkPresentInfoKHR(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphores), unsafe_convert(Ptr{VkSemaphore}, wait_semaphores), pointer_length(swapchains), unsafe_convert(Ptr{VkSwapchainKHR}, swapchains), unsafe_convert(Ptr{UInt32}, image_indices), unsafe_convert(Ptr{VkResult}, results))
    _PresentInfoKHR(vks, deps)
end

"""

"""
function _DebugReportCallbackCreateInfoEXT(pfn_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDebugReportCallbackCreateInfoEXT(VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, pfn_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DebugReportCallbackCreateInfoEXT(vks, deps)
end

"""

"""
function _ValidationFlagsEXT(disabled_validation_checks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    disabled_validation_checks = cconvert(Ptr{VkValidationCheckEXT}, disabled_validation_checks)
    deps = [next, disabled_validation_checks]
    vks = VkValidationFlagsEXT(VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(disabled_validation_checks), unsafe_convert(Ptr{VkValidationCheckEXT}, disabled_validation_checks))
    _ValidationFlagsEXT(vks, deps)
end

"""

"""
function _ValidationFeaturesEXT(enabled_validation_features::AbstractArray, disabled_validation_features::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    enabled_validation_features = cconvert(Ptr{VkValidationFeatureEnableEXT}, enabled_validation_features)
    disabled_validation_features = cconvert(Ptr{VkValidationFeatureDisableEXT}, disabled_validation_features)
    deps = [next, enabled_validation_features, disabled_validation_features]
    vks = VkValidationFeaturesEXT(VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(enabled_validation_features), unsafe_convert(Ptr{VkValidationFeatureEnableEXT}, enabled_validation_features), pointer_length(disabled_validation_features), unsafe_convert(Ptr{VkValidationFeatureDisableEXT}, disabled_validation_features))
    _ValidationFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationStateRasterizationOrderAMD(rasterization_order::RasterizationOrderAMD; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateRasterizationOrderAMD(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, unsafe_convert(Ptr{Cvoid}, next), rasterization_order)
    _PipelineRasterizationStateRasterizationOrderAMD(vks, deps)
end

"""

"""
function _DebugMarkerObjectNameInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, object_name::AbstractString; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    object_name = cconvert(Cstring, object_name)
    deps = [next, object_name]
    vks = VkDebugMarkerObjectNameInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object, unsafe_convert(Cstring, object_name))
    _DebugMarkerObjectNameInfoEXT(vks, deps)
end

"""

"""
function _DebugMarkerObjectTagInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    tag = cconvert(Ptr{Cvoid}, tag)
    deps = [next, tag]
    vks = VkDebugMarkerObjectTagInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object, tag_name, tag_size, unsafe_convert(Ptr{Cvoid}, tag))
    _DebugMarkerObjectTagInfoEXT(vks, deps)
end

"""

"""
function _DebugMarkerMarkerInfoEXT(marker_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    marker_name = cconvert(Cstring, marker_name)
    deps = [next, marker_name]
    vks = VkDebugMarkerMarkerInfoEXT(VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, marker_name), color)
    _DebugMarkerMarkerInfoEXT(vks, deps)
end

"""

"""
function _DedicatedAllocationImageCreateInfoNV(dedicated_allocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationImageCreateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation)
    _DedicatedAllocationImageCreateInfoNV(vks, deps)
end

"""

"""
function _DedicatedAllocationBufferCreateInfoNV(dedicated_allocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationBufferCreateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation)
    _DedicatedAllocationBufferCreateInfoNV(vks, deps)
end

"""

"""
function _DedicatedAllocationMemoryAllocateInfoNV(; next = C_NULL, image = C_NULL, buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDedicatedAllocationMemoryAllocateInfoNV(VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), image, buffer)
    _DedicatedAllocationMemoryAllocateInfoNV(vks, deps, image, buffer)
end

"""

"""
function _ExternalMemoryImageCreateInfoNV(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryImageCreateInfoNV(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryImageCreateInfoNV(vks, deps)
end

"""

"""
function _ExportMemoryAllocateInfoNV(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportMemoryAllocateInfoNV(VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportMemoryAllocateInfoNV(vks, deps)
end

"""

"""
function _ImportMemoryWin32HandleInfoNV(; next = C_NULL, handle_type = 0, handle = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryWin32HandleInfoNV(VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), handle_type, handle)
    _ImportMemoryWin32HandleInfoNV(vks, deps)
end

"""

"""
function _ExportMemoryWin32HandleInfoNV(; next = C_NULL, attributes = C_NULL, dw_access = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportMemoryWin32HandleInfoNV(VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes), dw_access)
    _ExportMemoryWin32HandleInfoNV(vks, deps)
end

"""

"""
function _Win32KeyedMutexAcquireReleaseInfoNV(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeout_milliseconds::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acquire_syncs = cconvert(Ptr{VkDeviceMemory}, acquire_syncs)
    acquire_keys = cconvert(Ptr{UInt64}, acquire_keys)
    acquire_timeout_milliseconds = cconvert(Ptr{UInt32}, acquire_timeout_milliseconds)
    release_syncs = cconvert(Ptr{VkDeviceMemory}, release_syncs)
    release_keys = cconvert(Ptr{UInt64}, release_keys)
    deps = [next, acquire_syncs, acquire_keys, acquire_timeout_milliseconds, release_syncs, release_keys]
    vks = VkWin32KeyedMutexAcquireReleaseInfoNV(VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acquire_syncs), unsafe_convert(Ptr{VkDeviceMemory}, acquire_syncs), unsafe_convert(Ptr{UInt64}, acquire_keys), unsafe_convert(Ptr{UInt32}, acquire_timeout_milliseconds), pointer_length(release_syncs), unsafe_convert(Ptr{VkDeviceMemory}, release_syncs), unsafe_convert(Ptr{UInt64}, release_keys))
    _Win32KeyedMutexAcquireReleaseInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(device_generated_commands::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), device_generated_commands)
    _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(vks, deps)
end

"""

"""
function _DevicePrivateDataCreateInfoEXT(private_data_slot_request_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDevicePrivateDataCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), private_data_slot_request_count)
    _DevicePrivateDataCreateInfoEXT(vks, deps)
end

"""

"""
function _PrivateDataSlotCreateInfoEXT(flags::PrivateDataSlotCreateFlagEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPrivateDataSlotCreateInfoEXT(VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags)
    _PrivateDataSlotCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDevicePrivateDataFeaturesEXT(private_data::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePrivateDataFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), private_data)
    _PhysicalDevicePrivateDataFeaturesEXT(vks, deps)
end

"""

"""
function _GraphicsShaderGroupCreateInfoNV(stages::AbstractArray; next = C_NULL, vertex_input_state = C_NULL, tessellation_state = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    vertex_input_state = cconvert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state)
    tessellation_state = cconvert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state)
    deps = [next, stages, vertex_input_state, tessellation_state]
    vks = VkGraphicsShaderGroupCreateInfoNV(VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), unsafe_convert(Ptr{VkPipelineVertexInputStateCreateInfo}, vertex_input_state), unsafe_convert(Ptr{VkPipelineTessellationStateCreateInfo}, tessellation_state))
    _GraphicsShaderGroupCreateInfoNV(vks, deps)
end

"""

"""
function _GraphicsPipelineShaderGroupsCreateInfoNV(groups::AbstractArray, pipelines::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    groups = cconvert(Ptr{VkGraphicsShaderGroupCreateInfoNV}, groups)
    pipelines = cconvert(Ptr{VkPipeline}, pipelines)
    deps = [next, groups, pipelines]
    vks = VkGraphicsPipelineShaderGroupsCreateInfoNV(VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(groups), unsafe_convert(Ptr{VkGraphicsShaderGroupCreateInfoNV}, groups), pointer_length(pipelines), unsafe_convert(Ptr{VkPipeline}, pipelines))
    _GraphicsPipelineShaderGroupsCreateInfoNV(vks, deps)
end

"""

"""
function _BindShaderGroupIndirectCommandNV(group_index::Integer)
    _BindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV(group_index))
end

"""

"""
function _BindIndexBufferIndirectCommandNV(buffer_address::Integer, size::Integer, index_type::IndexType)
    _BindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV(buffer_address, size, index_type))
end

"""

"""
function _BindVertexBufferIndirectCommandNV(buffer_address::Integer, size::Integer, stride::Integer)
    _BindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV(buffer_address, size, stride))
end

"""

"""
function _SetStateFlagsIndirectCommandNV(data::Integer)
    _SetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV(data))
end

"""

"""
function _IndirectCommandsStreamNV(buffer, offset::Integer)
    _IndirectCommandsStreamNV(VkIndirectCommandsStreamNV(buffer, offset), buffer)
end

"""

"""
function _IndirectCommandsLayoutTokenNV(token_type::IndirectCommandsTokenTypeNV, stream::Integer, offset::Integer, vertex_binding_unit::Integer, vertex_dynamic_stride::Bool, pushconstant_offset::Integer, pushconstant_size::Integer, index_types::AbstractArray, index_type_values::AbstractArray; next = C_NULL, pushconstant_pipeline_layout = C_NULL, pushconstant_shader_stage_flags = 0, indirect_state_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    index_types = cconvert(Ptr{VkIndexType}, index_types)
    index_type_values = cconvert(Ptr{UInt32}, index_type_values)
    deps = [next, index_types, index_type_values]
    vks = VkIndirectCommandsLayoutTokenNV(VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, unsafe_convert(Ptr{Cvoid}, next), token_type, stream, offset, vertex_binding_unit, vertex_dynamic_stride, pushconstant_pipeline_layout, pushconstant_shader_stage_flags, pushconstant_offset, pushconstant_size, indirect_state_flags, pointer_length(index_types), unsafe_convert(Ptr{VkIndexType}, index_types), unsafe_convert(Ptr{UInt32}, index_type_values))
    _IndirectCommandsLayoutTokenNV(vks, deps, pushconstant_pipeline_layout)
end

"""

"""
function _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    tokens = cconvert(Ptr{VkIndirectCommandsLayoutTokenNV}, tokens)
    stream_strides = cconvert(Ptr{UInt32}, stream_strides)
    deps = [next, tokens, stream_strides]
    vks = VkIndirectCommandsLayoutCreateInfoNV(VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pipeline_bind_point, pointer_length(tokens), unsafe_convert(Ptr{VkIndirectCommandsLayoutTokenNV}, tokens), pointer_length(stream_strides), unsafe_convert(Ptr{UInt32}, stream_strides))
    _IndirectCommandsLayoutCreateInfoNV(vks, deps)
end

"""

"""
function _GeneratedCommandsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline, indirect_commands_layout, streams::AbstractArray, sequences_count::Integer, preprocess_buffer, preprocess_offset::Integer, preprocess_size::Integer, sequences_count_offset::Integer, sequences_index_offset::Integer; next = C_NULL, sequences_count_buffer = C_NULL, sequences_index_buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    streams = cconvert(Ptr{VkIndirectCommandsStreamNV}, streams)
    deps = [next, streams]
    vks = VkGeneratedCommandsInfoNV(VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pipeline_bind_point, pipeline, indirect_commands_layout, pointer_length(streams), unsafe_convert(Ptr{VkIndirectCommandsStreamNV}, streams), sequences_count, preprocess_buffer, preprocess_offset, preprocess_size, sequences_count_buffer, sequences_count_offset, sequences_index_buffer, sequences_index_offset)
    _GeneratedCommandsInfoNV(vks, deps, pipeline, indirect_commands_layout, preprocess_buffer, sequences_count_buffer, sequences_index_buffer)
end

"""

"""
function _GeneratedCommandsMemoryRequirementsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline, indirect_commands_layout, max_sequences_count::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeneratedCommandsMemoryRequirementsInfoNV(VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pipeline_bind_point, pipeline, indirect_commands_layout, max_sequences_count)
    _GeneratedCommandsMemoryRequirementsInfoNV(vks, deps, pipeline, indirect_commands_layout)
end

"""

"""
function _PhysicalDeviceFeatures2(features::_PhysicalDeviceFeatures; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFeatures2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, unsafe_convert(Ptr{Cvoid}, next), features.vks)
    _PhysicalDeviceFeatures2(vks, deps)
end

"""

"""
function _PhysicalDeviceImageFormatInfo2(format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageFormatInfo2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, unsafe_convert(Ptr{Cvoid}, next), format, type, tiling, usage, flags)
    _PhysicalDeviceImageFormatInfo2(vks, deps)
end

"""

"""
function _PhysicalDeviceSparseImageFormatInfo2(format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSparseImageFormatInfo2(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, unsafe_convert(Ptr{Cvoid}, next), format, type, VkSampleCountFlagBits(samples.val), usage, tiling)
    _PhysicalDeviceSparseImageFormatInfo2(vks, deps)
end

"""

"""
function _ConformanceVersion(major::Integer, minor::Integer, subminor::Integer, patch::Integer)
    _ConformanceVersion(VkConformanceVersion(major, minor, subminor, patch))
end

"""

"""
function _PresentRegionsKHR(; next = C_NULL, regions = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkPresentRegionKHR}, regions)
    deps = [next, regions]
    vks = VkPresentRegionsKHR(VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(regions), unsafe_convert(Ptr{VkPresentRegionKHR}, regions))
    _PresentRegionsKHR(vks, deps)
end

"""

"""
function _PresentRegionKHR(; rectangles = C_NULL)
    rectangles = cconvert(Ptr{VkRectLayerKHR}, rectangles)
    deps = [rectangles]
    vks = VkPresentRegionKHR(pointer_length(rectangles), unsafe_convert(Ptr{VkRectLayerKHR}, rectangles))
    _PresentRegionKHR(vks, deps)
end

"""

"""
function _RectLayerKHR(offset::_Offset2D, extent::_Extent2D, layer::Integer)
    _RectLayerKHR(VkRectLayerKHR(offset.vks, extent.vks, layer))
end

"""

"""
function _PhysicalDeviceVariablePointersFeatures(variable_pointers_storage_buffer::Bool, variable_pointers::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVariablePointersFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), variable_pointers_storage_buffer, variable_pointers)
    _PhysicalDeviceVariablePointersFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceExternalImageFormatInfo(; next = C_NULL, handle_type = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalImageFormatInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalImageFormatInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceExternalBufferInfo(usage::BufferUsageFlag, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalBufferInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, usage, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalBufferInfo(vks, deps)
end

"""

"""
function _ExternalMemoryImageCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryImageCreateInfo(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryImageCreateInfo(vks, deps)
end

"""

"""
function _ExternalMemoryBufferCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExternalMemoryBufferCreateInfo(VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExternalMemoryBufferCreateInfo(vks, deps)
end

"""

"""
function _ExportMemoryAllocateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportMemoryAllocateInfo(VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportMemoryAllocateInfo(vks, deps)
end

"""

"""
function _ImportMemoryWin32HandleInfoKHR(; next = C_NULL, handle_type = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportMemoryWin32HandleInfoKHR(vks, deps)
end

"""

"""
function _ExportMemoryWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportMemoryWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportMemoryWin32HandleInfoKHR(vks, deps)
end

"""

"""
function _MemoryGetWin32HandleInfoKHR(memory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), memory, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _MemoryGetWin32HandleInfoKHR(vks, deps, memory)
end

"""

"""
function _ImportMemoryFdInfoKHR(fd::Integer; next = C_NULL, handle_type = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportMemoryFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd)
    _ImportMemoryFdInfoKHR(vks, deps)
end

"""

"""
function _MemoryGetFdInfoKHR(memory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryGetFdInfoKHR(VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), memory, VkExternalMemoryHandleTypeFlagBits(handle_type.val))
    _MemoryGetFdInfoKHR(vks, deps, memory)
end

"""

"""
function _Win32KeyedMutexAcquireReleaseInfoKHR(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeouts::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acquire_syncs = cconvert(Ptr{VkDeviceMemory}, acquire_syncs)
    acquire_keys = cconvert(Ptr{UInt64}, acquire_keys)
    acquire_timeouts = cconvert(Ptr{UInt32}, acquire_timeouts)
    release_syncs = cconvert(Ptr{VkDeviceMemory}, release_syncs)
    release_keys = cconvert(Ptr{UInt64}, release_keys)
    deps = [next, acquire_syncs, acquire_keys, acquire_timeouts, release_syncs, release_keys]
    vks = VkWin32KeyedMutexAcquireReleaseInfoKHR(VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acquire_syncs), unsafe_convert(Ptr{VkDeviceMemory}, acquire_syncs), unsafe_convert(Ptr{UInt64}, acquire_keys), unsafe_convert(Ptr{UInt32}, acquire_timeouts), pointer_length(release_syncs), unsafe_convert(Ptr{VkDeviceMemory}, release_syncs), unsafe_convert(Ptr{UInt64}, release_keys))
    _Win32KeyedMutexAcquireReleaseInfoKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceExternalSemaphoreInfo(handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalSemaphoreInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalSemaphoreInfo(vks, deps)
end

"""

"""
function _ExportSemaphoreCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportSemaphoreCreateInfo(VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportSemaphoreCreateInfo(vks, deps)
end

"""

"""
function _ImportSemaphoreWin32HandleInfoKHR(semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL, flags = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportSemaphoreWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, flags, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportSemaphoreWin32HandleInfoKHR(vks, deps, semaphore)
end

"""

"""
function _ExportSemaphoreWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportSemaphoreWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportSemaphoreWin32HandleInfoKHR(vks, deps)
end

"""

"""
function _D3D12FenceSubmitInfoKHR(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_values = cconvert(Ptr{UInt64}, wait_semaphore_values)
    signal_semaphore_values = cconvert(Ptr{UInt64}, signal_semaphore_values)
    deps = [next, wait_semaphore_values, signal_semaphore_values]
    vks = VkD3D12FenceSubmitInfoKHR(VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_values), unsafe_convert(Ptr{UInt64}, wait_semaphore_values), pointer_length(signal_semaphore_values), unsafe_convert(Ptr{UInt64}, signal_semaphore_values))
    _D3D12FenceSubmitInfoKHR(vks, deps)
end

"""

"""
function _SemaphoreGetWin32HandleInfoKHR(semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _SemaphoreGetWin32HandleInfoKHR(vks, deps, semaphore)
end

"""

"""
function _ImportSemaphoreFdInfoKHR(semaphore, handle_type::ExternalSemaphoreHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportSemaphoreFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, flags, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val), fd)
    _ImportSemaphoreFdInfoKHR(vks, deps, semaphore)
end

"""

"""
function _SemaphoreGetFdInfoKHR(semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreGetFdInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, VkExternalSemaphoreHandleTypeFlagBits(handle_type.val))
    _SemaphoreGetFdInfoKHR(vks, deps, semaphore)
end

"""

"""
function _PhysicalDeviceExternalFenceInfo(handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExternalFenceInfo(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, unsafe_convert(Ptr{Cvoid}, next), VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _PhysicalDeviceExternalFenceInfo(vks, deps)
end

"""

"""
function _ExportFenceCreateInfo(; next = C_NULL, handle_types = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkExportFenceCreateInfo(VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), handle_types)
    _ExportFenceCreateInfo(vks, deps)
end

"""

"""
function _ImportFenceWin32HandleInfoKHR(fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL, flags = 0, handle = 0, name = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportFenceWin32HandleInfoKHR(VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, flags, VkExternalFenceHandleTypeFlagBits(handle_type.val), handle, name)
    _ImportFenceWin32HandleInfoKHR(vks, deps, fence)
end

"""

"""
function _ExportFenceWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attributes = cconvert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes)
    deps = [next, attributes]
    vks = VkExportFenceWin32HandleInfoKHR(VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{vk.SECURITY_ATTRIBUTES}, attributes), dw_access, name)
    _ExportFenceWin32HandleInfoKHR(vks, deps)
end

"""

"""
function _FenceGetWin32HandleInfoKHR(fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceGetWin32HandleInfoKHR(VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _FenceGetWin32HandleInfoKHR(vks, deps, fence)
end

"""

"""
function _ImportFenceFdInfoKHR(fence, handle_type::ExternalFenceHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImportFenceFdInfoKHR(VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, flags, VkExternalFenceHandleTypeFlagBits(handle_type.val), fd)
    _ImportFenceFdInfoKHR(vks, deps, fence)
end

"""

"""
function _FenceGetFdInfoKHR(fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkFenceGetFdInfoKHR(VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fence, VkExternalFenceHandleTypeFlagBits(handle_type.val))
    _FenceGetFdInfoKHR(vks, deps, fence)
end

"""

"""
function _PhysicalDeviceMultiviewFeatures(multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMultiviewFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, unsafe_convert(Ptr{Cvoid}, next), multiview, multiview_geometry_shader, multiview_tessellation_shader)
    _PhysicalDeviceMultiviewFeatures(vks, deps)
end

"""

"""
function _RenderPassMultiviewCreateInfo(view_masks::AbstractArray, view_offsets::AbstractArray, correlation_masks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    view_masks = cconvert(Ptr{UInt32}, view_masks)
    view_offsets = cconvert(Ptr{Int32}, view_offsets)
    correlation_masks = cconvert(Ptr{UInt32}, correlation_masks)
    deps = [next, view_masks, view_offsets, correlation_masks]
    vks = VkRenderPassMultiviewCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(view_masks), unsafe_convert(Ptr{UInt32}, view_masks), pointer_length(view_offsets), unsafe_convert(Ptr{Int32}, view_offsets), pointer_length(correlation_masks), unsafe_convert(Ptr{UInt32}, correlation_masks))
    _RenderPassMultiviewCreateInfo(vks, deps)
end

"""

"""
function _DisplayPowerInfoEXT(power_state::DisplayPowerStateEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPowerInfoEXT(VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), power_state)
    _DisplayPowerInfoEXT(vks, deps)
end

"""

"""
function _DeviceEventInfoEXT(device_event::DeviceEventTypeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceEventInfoEXT(VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), device_event)
    _DeviceEventInfoEXT(vks, deps)
end

"""

"""
function _DisplayEventInfoEXT(display_event::DisplayEventTypeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayEventInfoEXT(VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), display_event)
    _DisplayEventInfoEXT(vks, deps)
end

"""

"""
function _SwapchainCounterCreateInfoEXT(; next = C_NULL, surface_counters = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSwapchainCounterCreateInfoEXT(VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), surface_counters)
    _SwapchainCounterCreateInfoEXT(vks, deps)
end

"""

"""
function _MemoryAllocateFlagsInfo(device_mask::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryAllocateFlagsInfo(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, device_mask)
    _MemoryAllocateFlagsInfo(vks, deps)
end

"""

"""
function _BindBufferMemoryInfo(buffer, memory, memory_offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindBufferMemoryInfo(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), buffer, memory, memory_offset)
    _BindBufferMemoryInfo(vks, deps, buffer, memory)
end

"""

"""
function _BindBufferMemoryDeviceGroupInfo(device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    deps = [next, device_indices]
    vks = VkBindBufferMemoryDeviceGroupInfo(VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices))
    _BindBufferMemoryDeviceGroupInfo(vks, deps)
end

"""

"""
function _BindImageMemoryInfo(image, memory, memory_offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImageMemoryInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), image, memory, memory_offset)
    _BindImageMemoryInfo(vks, deps, image, memory)
end

"""

"""
function _BindImageMemoryDeviceGroupInfo(device_indices::AbstractArray, split_instance_bind_regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    split_instance_bind_regions = cconvert(Ptr{VkRect2D}, split_instance_bind_regions)
    deps = [next, device_indices, split_instance_bind_regions]
    vks = VkBindImageMemoryDeviceGroupInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices), pointer_length(split_instance_bind_regions), unsafe_convert(Ptr{VkRect2D}, split_instance_bind_regions))
    _BindImageMemoryDeviceGroupInfo(vks, deps)
end

"""

"""
function _DeviceGroupRenderPassBeginInfo(device_mask::Integer, device_render_areas::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_render_areas = cconvert(Ptr{VkRect2D}, device_render_areas)
    deps = [next, device_render_areas]
    vks = VkDeviceGroupRenderPassBeginInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), device_mask, pointer_length(device_render_areas), unsafe_convert(Ptr{VkRect2D}, device_render_areas))
    _DeviceGroupRenderPassBeginInfo(vks, deps)
end

"""

"""
function _DeviceGroupCommandBufferBeginInfo(device_mask::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupCommandBufferBeginInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), device_mask)
    _DeviceGroupCommandBufferBeginInfo(vks, deps)
end

"""

"""
function _DeviceGroupSubmitInfo(wait_semaphore_device_indices::AbstractArray, command_buffer_device_masks::AbstractArray, signal_semaphore_device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_device_indices = cconvert(Ptr{UInt32}, wait_semaphore_device_indices)
    command_buffer_device_masks = cconvert(Ptr{UInt32}, command_buffer_device_masks)
    signal_semaphore_device_indices = cconvert(Ptr{UInt32}, signal_semaphore_device_indices)
    deps = [next, wait_semaphore_device_indices, command_buffer_device_masks, signal_semaphore_device_indices]
    vks = VkDeviceGroupSubmitInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_device_indices), unsafe_convert(Ptr{UInt32}, wait_semaphore_device_indices), pointer_length(command_buffer_device_masks), unsafe_convert(Ptr{UInt32}, command_buffer_device_masks), pointer_length(signal_semaphore_device_indices), unsafe_convert(Ptr{UInt32}, signal_semaphore_device_indices))
    _DeviceGroupSubmitInfo(vks, deps)
end

"""

"""
function _DeviceGroupBindSparseInfo(resource_device_index::Integer, memory_device_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupBindSparseInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, unsafe_convert(Ptr{Cvoid}, next), resource_device_index, memory_device_index)
    _DeviceGroupBindSparseInfo(vks, deps)
end

"""

"""
function _ImageSwapchainCreateInfoKHR(; next = C_NULL, swapchain = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain)
    _ImageSwapchainCreateInfoKHR(vks, deps, swapchain)
end

"""

"""
function _BindImageMemorySwapchainInfoKHR(swapchain, image_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImageMemorySwapchainInfoKHR(VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain, image_index)
    _BindImageMemorySwapchainInfoKHR(vks, deps, swapchain)
end

"""

"""
function _AcquireNextImageInfoKHR(swapchain, timeout::Integer, device_mask::Integer; next = C_NULL, semaphore = C_NULL, fence = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAcquireNextImageInfoKHR(VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), swapchain, timeout, semaphore, fence, device_mask)
    _AcquireNextImageInfoKHR(vks, deps, swapchain, semaphore, fence)
end

"""

"""
function _DeviceGroupPresentInfoKHR(device_masks::AbstractArray, mode::DeviceGroupPresentModeFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_masks = cconvert(Ptr{UInt32}, device_masks)
    deps = [next, device_masks]
    vks = VkDeviceGroupPresentInfoKHR(VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(device_masks), unsafe_convert(Ptr{UInt32}, device_masks), VkDeviceGroupPresentModeFlagBitsKHR(mode.val))
    _DeviceGroupPresentInfoKHR(vks, deps)
end

"""

"""
function _DeviceGroupDeviceCreateInfo(physical_devices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    physical_devices = cconvert(Ptr{VkPhysicalDevice}, physical_devices)
    deps = [next, physical_devices]
    vks = VkDeviceGroupDeviceCreateInfo(VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(physical_devices), unsafe_convert(Ptr{VkPhysicalDevice}, physical_devices))
    _DeviceGroupDeviceCreateInfo(vks, deps)
end

"""

"""
function _DeviceGroupSwapchainCreateInfoKHR(modes::DeviceGroupPresentModeFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceGroupSwapchainCreateInfoKHR(VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), modes)
    _DeviceGroupSwapchainCreateInfoKHR(vks, deps)
end

"""

"""
function _DescriptorUpdateTemplateEntry(dst_binding::Integer, dst_array_element::Integer, descriptor_count::Integer, descriptor_type::DescriptorType, offset::Integer, stride::Integer)
    _DescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry(dst_binding, dst_array_element, descriptor_count, descriptor_type, offset, stride))
end

"""

"""
function _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    descriptor_update_entries = cconvert(Ptr{VkDescriptorUpdateTemplateEntry}, descriptor_update_entries)
    deps = [next, descriptor_update_entries]
    vks = VkDescriptorUpdateTemplateCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(descriptor_update_entries), unsafe_convert(Ptr{VkDescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set)
    _DescriptorUpdateTemplateCreateInfo(vks, deps, descriptor_set_layout, pipeline_layout)
end

"""

"""
function _XYColorEXT(x::Real, y::Real)
    _XYColorEXT(VkXYColorEXT(x, y))
end

"""

"""
function _HdrMetadataEXT(display_primary_red::_XYColorEXT, display_primary_green::_XYColorEXT, display_primary_blue::_XYColorEXT, white_point::_XYColorEXT, max_luminance::Real, min_luminance::Real, max_content_light_level::Real, max_frame_average_light_level::Real; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkHdrMetadataEXT(VK_STRUCTURE_TYPE_HDR_METADATA_EXT, unsafe_convert(Ptr{Cvoid}, next), display_primary_red.vks, display_primary_green.vks, display_primary_blue.vks, white_point.vks, max_luminance, min_luminance, max_content_light_level, max_frame_average_light_level)
    _HdrMetadataEXT(vks, deps)
end

"""

"""
function _SwapchainDisplayNativeHdrCreateInfoAMD(local_dimming_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSwapchainDisplayNativeHdrCreateInfoAMD(VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), local_dimming_enable)
    _SwapchainDisplayNativeHdrCreateInfoAMD(vks, deps)
end

"""

"""
function _PresentTimesInfoGOOGLE(; next = C_NULL, times = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    times = cconvert(Ptr{VkPresentTimeGOOGLE}, times)
    deps = [next, times]
    vks = VkPresentTimesInfoGOOGLE(VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, unsafe_convert(Ptr{Cvoid}, next), pointer_length(times), unsafe_convert(Ptr{VkPresentTimeGOOGLE}, times))
    _PresentTimesInfoGOOGLE(vks, deps)
end

"""

"""
function _PresentTimeGOOGLE(present_id::Integer, desired_present_time::Integer)
    _PresentTimeGOOGLE(VkPresentTimeGOOGLE(present_id, desired_present_time))
end

"""

"""
function _ViewportWScalingNV(xcoeff::Real, ycoeff::Real)
    _ViewportWScalingNV(VkViewportWScalingNV(xcoeff, ycoeff))
end

"""

"""
function _PipelineViewportWScalingStateCreateInfoNV(viewport_w_scaling_enable::Bool; next = C_NULL, viewport_w_scalings = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_w_scalings = cconvert(Ptr{VkViewportWScalingNV}, viewport_w_scalings)
    deps = [next, viewport_w_scalings]
    vks = VkPipelineViewportWScalingStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), viewport_w_scaling_enable, pointer_length(viewport_w_scalings), unsafe_convert(Ptr{VkViewportWScalingNV}, viewport_w_scalings))
    _PipelineViewportWScalingStateCreateInfoNV(vks, deps)
end

"""

"""
function _ViewportSwizzleNV(x::ViewportCoordinateSwizzleNV, y::ViewportCoordinateSwizzleNV, z::ViewportCoordinateSwizzleNV, w::ViewportCoordinateSwizzleNV)
    _ViewportSwizzleNV(VkViewportSwizzleNV(x, y, z, w))
end

"""

"""
function _PipelineViewportSwizzleStateCreateInfoNV(viewport_swizzles::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_swizzles = cconvert(Ptr{VkViewportSwizzleNV}, viewport_swizzles)
    deps = [next, viewport_swizzles]
    vks = VkPipelineViewportSwizzleStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(viewport_swizzles), unsafe_convert(Ptr{VkViewportSwizzleNV}, viewport_swizzles))
    _PipelineViewportSwizzleStateCreateInfoNV(vks, deps)
end

"""

"""
function _PipelineDiscardRectangleStateCreateInfoEXT(discard_rectangle_mode::DiscardRectangleModeEXT, discard_rectangles::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    discard_rectangles = cconvert(Ptr{VkRect2D}, discard_rectangles)
    deps = [next, discard_rectangles]
    vks = VkPipelineDiscardRectangleStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, discard_rectangle_mode, pointer_length(discard_rectangles), unsafe_convert(Ptr{VkRect2D}, discard_rectangles))
    _PipelineDiscardRectangleStateCreateInfoEXT(vks, deps)
end

"""

"""
function _InputAttachmentAspectReference(subpass::Integer, input_attachment_index::Integer, aspect_mask::ImageAspectFlag)
    _InputAttachmentAspectReference(VkInputAttachmentAspectReference(subpass, input_attachment_index, aspect_mask))
end

"""

"""
function _RenderPassInputAttachmentAspectCreateInfo(aspect_references::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    aspect_references = cconvert(Ptr{VkInputAttachmentAspectReference}, aspect_references)
    deps = [next, aspect_references]
    vks = VkRenderPassInputAttachmentAspectCreateInfo(VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(aspect_references), unsafe_convert(Ptr{VkInputAttachmentAspectReference}, aspect_references))
    _RenderPassInputAttachmentAspectCreateInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceSurfaceInfo2KHR(surface; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSurfaceInfo2KHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), surface)
    _PhysicalDeviceSurfaceInfo2KHR(vks, deps, surface)
end

"""

"""
function _DisplayPlaneInfo2KHR(mode, plane_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDisplayPlaneInfo2KHR(VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), mode, plane_index)
    _DisplayPlaneInfo2KHR(vks, deps, mode)
end

"""

"""
function _PhysicalDevice16BitStorageFeatures(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice16BitStorageFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16)
    _PhysicalDevice16BitStorageFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderSubgroupExtendedTypesFeatures(shader_subgroup_extended_types::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_subgroup_extended_types)
    _PhysicalDeviceShaderSubgroupExtendedTypesFeatures(vks, deps)
end

"""

"""
function _BufferMemoryRequirementsInfo2(buffer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), buffer)
    _BufferMemoryRequirementsInfo2(vks, deps, buffer)
end

"""

"""
function _ImageMemoryRequirementsInfo2(image; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), image)
    _ImageMemoryRequirementsInfo2(vks, deps, image)
end

"""

"""
function _ImageSparseMemoryRequirementsInfo2(image; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageSparseMemoryRequirementsInfo2(VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, unsafe_convert(Ptr{Cvoid}, next), image)
    _ImageSparseMemoryRequirementsInfo2(vks, deps, image)
end

"""

"""
function _MemoryDedicatedAllocateInfo(; next = C_NULL, image = C_NULL, buffer = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryDedicatedAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), image, buffer)
    _MemoryDedicatedAllocateInfo(vks, deps, image, buffer)
end

"""

"""
function _ImageViewUsageCreateInfo(usage::ImageUsageFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewUsageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), usage)
    _ImageViewUsageCreateInfo(vks, deps)
end

"""

"""
function _PipelineTessellationDomainOriginStateCreateInfo(domain_origin::TessellationDomainOrigin; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineTessellationDomainOriginStateCreateInfo(VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), domain_origin)
    _PipelineTessellationDomainOriginStateCreateInfo(vks, deps)
end

"""

"""
function _SamplerYcbcrConversionInfo(conversion; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerYcbcrConversionInfo(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, unsafe_convert(Ptr{Cvoid}, next), conversion)
    _SamplerYcbcrConversionInfo(vks, deps, conversion)
end

"""

"""
function _SamplerYcbcrConversionCreateInfo(format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerYcbcrConversionCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), format, ycbcr_model, ycbcr_range, components.vks, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction)
    _SamplerYcbcrConversionCreateInfo(vks, deps)
end

"""

"""
function _BindImagePlaneMemoryInfo(plane_aspect::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBindImagePlaneMemoryInfo(VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, unsafe_convert(Ptr{Cvoid}, next), VkImageAspectFlagBits(plane_aspect.val))
    _BindImagePlaneMemoryInfo(vks, deps)
end

"""

"""
function _ImagePlaneMemoryRequirementsInfo(plane_aspect::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImagePlaneMemoryRequirementsInfo(VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, unsafe_convert(Ptr{Cvoid}, next), VkImageAspectFlagBits(plane_aspect.val))
    _ImagePlaneMemoryRequirementsInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceSamplerYcbcrConversionFeatures(sampler_ycbcr_conversion::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSamplerYcbcrConversionFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, unsafe_convert(Ptr{Cvoid}, next), sampler_ycbcr_conversion)
    _PhysicalDeviceSamplerYcbcrConversionFeatures(vks, deps)
end

"""

"""
function _ConditionalRenderingBeginInfoEXT(buffer, offset::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkConditionalRenderingBeginInfoEXT(VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), buffer, offset, flags)
    _ConditionalRenderingBeginInfoEXT(vks, deps, buffer)
end

"""

"""
function _ProtectedSubmitInfo(protected_submit::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkProtectedSubmitInfo(VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), protected_submit)
    _ProtectedSubmitInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceProtectedMemoryFeatures(protected_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceProtectedMemoryFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, unsafe_convert(Ptr{Cvoid}, next), protected_memory)
    _PhysicalDeviceProtectedMemoryFeatures(vks, deps)
end

"""

"""
function _DeviceQueueInfo2(queue_family_index::Integer, queue_index::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceQueueInfo2(VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, unsafe_convert(Ptr{Cvoid}, next), flags, queue_family_index, queue_index)
    _DeviceQueueInfo2(vks, deps)
end

"""

"""
function _PipelineCoverageToColorStateCreateInfoNV(coverage_to_color_enable::Bool; next = C_NULL, flags = 0, coverage_to_color_location = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCoverageToColorStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_to_color_enable, coverage_to_color_location)
    _PipelineCoverageToColorStateCreateInfoNV(vks, deps)
end

"""

"""
function _SampleLocationEXT(x::Real, y::Real)
    _SampleLocationEXT(VkSampleLocationEXT(x, y))
end

"""

"""
function _SampleLocationsInfoEXT(sample_locations_per_pixel::SampleCountFlag, sample_location_grid_size::_Extent2D, sample_locations::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    sample_locations = cconvert(Ptr{VkSampleLocationEXT}, sample_locations)
    deps = [next, sample_locations]
    vks = VkSampleLocationsInfoEXT(VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), VkSampleCountFlagBits(sample_locations_per_pixel.val), sample_location_grid_size.vks, pointer_length(sample_locations), unsafe_convert(Ptr{VkSampleLocationEXT}, sample_locations))
    _SampleLocationsInfoEXT(vks, deps)
end

"""

"""
function _AttachmentSampleLocationsEXT(attachment_index::Integer, sample_locations_info::_SampleLocationsInfoEXT)
    _AttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT(attachment_index, sample_locations_info.vks))
end

"""

"""
function _SubpassSampleLocationsEXT(subpass_index::Integer, sample_locations_info::_SampleLocationsInfoEXT)
    _SubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT(subpass_index, sample_locations_info.vks))
end

"""

"""
function _RenderPassSampleLocationsBeginInfoEXT(attachment_initial_sample_locations::AbstractArray, post_subpass_sample_locations::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachment_initial_sample_locations = cconvert(Ptr{VkAttachmentSampleLocationsEXT}, attachment_initial_sample_locations)
    post_subpass_sample_locations = cconvert(Ptr{VkSubpassSampleLocationsEXT}, post_subpass_sample_locations)
    deps = [next, attachment_initial_sample_locations, post_subpass_sample_locations]
    vks = VkRenderPassSampleLocationsBeginInfoEXT(VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachment_initial_sample_locations), unsafe_convert(Ptr{VkAttachmentSampleLocationsEXT}, attachment_initial_sample_locations), pointer_length(post_subpass_sample_locations), unsafe_convert(Ptr{VkSubpassSampleLocationsEXT}, post_subpass_sample_locations))
    _RenderPassSampleLocationsBeginInfoEXT(vks, deps)
end

"""

"""
function _PipelineSampleLocationsStateCreateInfoEXT(sample_locations_enable::Bool, sample_locations_info::_SampleLocationsInfoEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineSampleLocationsStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), sample_locations_enable, sample_locations_info.vks)
    _PipelineSampleLocationsStateCreateInfoEXT(vks, deps)
end

"""

"""
function _SamplerReductionModeCreateInfo(reduction_mode::SamplerReductionMode; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerReductionModeCreateInfo(VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), reduction_mode)
    _SamplerReductionModeCreateInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceBlendOperationAdvancedFeaturesEXT(advanced_blend_coherent_operations::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), advanced_blend_coherent_operations)
    _PhysicalDeviceBlendOperationAdvancedFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineColorBlendAdvancedStateCreateInfoEXT(src_premultiplied::Bool, dst_premultiplied::Bool, blend_overlap::BlendOverlapEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineColorBlendAdvancedStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), src_premultiplied, dst_premultiplied, blend_overlap)
    _PipelineColorBlendAdvancedStateCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceInlineUniformBlockFeaturesEXT(inline_uniform_block::Bool, descriptor_binding_inline_uniform_block_update_after_bind::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceInlineUniformBlockFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), inline_uniform_block, descriptor_binding_inline_uniform_block_update_after_bind)
    _PhysicalDeviceInlineUniformBlockFeaturesEXT(vks, deps)
end

"""

"""
function _WriteDescriptorSetInlineUniformBlockEXT(data_size::Integer, data::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    data = cconvert(Ptr{Cvoid}, data)
    deps = [next, data]
    vks = VkWriteDescriptorSetInlineUniformBlockEXT(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, unsafe_convert(Ptr{Cvoid}, next), data_size, unsafe_convert(Ptr{Cvoid}, data))
    _WriteDescriptorSetInlineUniformBlockEXT(vks, deps)
end

"""

"""
function _DescriptorPoolInlineUniformBlockCreateInfoEXT(max_inline_uniform_block_bindings::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDescriptorPoolInlineUniformBlockCreateInfoEXT(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), max_inline_uniform_block_bindings)
    _DescriptorPoolInlineUniformBlockCreateInfoEXT(vks, deps)
end

"""

"""
function _PipelineCoverageModulationStateCreateInfoNV(coverage_modulation_mode::CoverageModulationModeNV, coverage_modulation_table_enable::Bool; next = C_NULL, flags = 0, coverage_modulation_table = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    coverage_modulation_table = cconvert(Ptr{Float32}, coverage_modulation_table)
    deps = [next, coverage_modulation_table]
    vks = VkPipelineCoverageModulationStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_modulation_mode, coverage_modulation_table_enable, pointer_length(coverage_modulation_table), unsafe_convert(Ptr{Float32}, coverage_modulation_table))
    _PipelineCoverageModulationStateCreateInfoNV(vks, deps)
end

"""

"""
function _ImageFormatListCreateInfo(view_formats::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    view_formats = cconvert(Ptr{VkFormat}, view_formats)
    deps = [next, view_formats]
    vks = VkImageFormatListCreateInfo(VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(view_formats), unsafe_convert(Ptr{VkFormat}, view_formats))
    _ImageFormatListCreateInfo(vks, deps)
end

"""

"""
function _ValidationCacheCreateInfoEXT(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = 0)
    next = cconvert(Ptr{Cvoid}, next)
    initial_data = cconvert(Ptr{Cvoid}, initial_data)
    deps = [next, initial_data]
    vks = VkValidationCacheCreateInfoEXT(VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, initial_data_size, unsafe_convert(Ptr{Cvoid}, initial_data))
    _ValidationCacheCreateInfoEXT(vks, deps)
end

"""

"""
function _ShaderModuleValidationCacheCreateInfoEXT(validation_cache; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkShaderModuleValidationCacheCreateInfoEXT(VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), validation_cache)
    _ShaderModuleValidationCacheCreateInfoEXT(vks, deps, validation_cache)
end

"""

"""
function _PhysicalDeviceShaderDrawParametersFeatures(shader_draw_parameters::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderDrawParametersFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_draw_parameters)
    _PhysicalDeviceShaderDrawParametersFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderFloat16Int8Features(shader_float_16::Bool, shader_int_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderFloat16Int8Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_float_16, shader_int_8)
    _PhysicalDeviceShaderFloat16Int8Features(vks, deps)
end

"""

"""
function _PhysicalDeviceHostQueryResetFeatures(host_query_reset::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceHostQueryResetFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, unsafe_convert(Ptr{Cvoid}, next), host_query_reset)
    _PhysicalDeviceHostQueryResetFeatures(vks, deps)
end

"""

"""
function _DeviceQueueGlobalPriorityCreateInfoEXT(global_priority::QueueGlobalPriorityEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceQueueGlobalPriorityCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), global_priority)
    _DeviceQueueGlobalPriorityCreateInfoEXT(vks, deps)
end

"""

"""
function _DebugUtilsObjectNameInfoEXT(object_type::ObjectType, object_handle::Integer; next = C_NULL, object_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    object_name = cconvert(Cstring, object_name)
    deps = [next, object_name]
    vks = VkDebugUtilsObjectNameInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object_handle, unsafe_convert(Cstring, object_name))
    _DebugUtilsObjectNameInfoEXT(vks, deps)
end

"""

"""
function _DebugUtilsObjectTagInfoEXT(object_type::ObjectType, object_handle::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    tag = cconvert(Ptr{Cvoid}, tag)
    deps = [next, tag]
    vks = VkDebugUtilsObjectTagInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), object_type, object_handle, tag_name, tag_size, unsafe_convert(Ptr{Cvoid}, tag))
    _DebugUtilsObjectTagInfoEXT(vks, deps)
end

"""

"""
function _DebugUtilsLabelEXT(label_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    label_name = cconvert(Cstring, label_name)
    deps = [next, label_name]
    vks = VkDebugUtilsLabelEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Cstring, label_name), color)
    _DebugUtilsLabelEXT(vks, deps)
end

"""

"""
function _DebugUtilsMessengerCreateInfoEXT(message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDebugUtilsMessengerCreateInfoEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, message_severity, message_type, pfn_user_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DebugUtilsMessengerCreateInfoEXT(vks, deps)
end

"""

"""
function _DebugUtilsMessengerCallbackDataEXT(message_id_number::Integer, message::AbstractString, queue_labels::AbstractArray, cmd_buf_labels::AbstractArray, objects::AbstractArray; next = C_NULL, flags = 0, message_id_name = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    message_id_name = cconvert(Cstring, message_id_name)
    message = cconvert(Cstring, message)
    queue_labels = cconvert(Ptr{VkDebugUtilsLabelEXT}, queue_labels)
    cmd_buf_labels = cconvert(Ptr{VkDebugUtilsLabelEXT}, cmd_buf_labels)
    objects = cconvert(Ptr{VkDebugUtilsObjectNameInfoEXT}, objects)
    deps = [next, message_id_name, message, queue_labels, cmd_buf_labels, objects]
    vks = VkDebugUtilsMessengerCallbackDataEXT(VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, unsafe_convert(Cstring, message_id_name), message_id_number, unsafe_convert(Cstring, message), pointer_length(queue_labels), unsafe_convert(Ptr{VkDebugUtilsLabelEXT}, queue_labels), pointer_length(cmd_buf_labels), unsafe_convert(Ptr{VkDebugUtilsLabelEXT}, cmd_buf_labels), pointer_length(objects), unsafe_convert(Ptr{VkDebugUtilsObjectNameInfoEXT}, objects))
    _DebugUtilsMessengerCallbackDataEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceDeviceMemoryReportFeaturesEXT(device_memory_report::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), device_memory_report)
    _PhysicalDeviceDeviceMemoryReportFeaturesEXT(vks, deps)
end

"""

"""
function _DeviceDeviceMemoryReportCreateInfoEXT(flags::Integer, pfn_user_callback::FunctionPtr, user_data::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkDeviceDeviceMemoryReportCreateInfoEXT(VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, pfn_user_callback, unsafe_convert(Ptr{Cvoid}, user_data))
    _DeviceDeviceMemoryReportCreateInfoEXT(vks, deps)
end

"""

"""
function _ImportMemoryHostPointerInfoEXT(handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    host_pointer = cconvert(Ptr{Cvoid}, host_pointer)
    deps = [next, host_pointer]
    vks = VkImportMemoryHostPointerInfoEXT(VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), VkExternalMemoryHandleTypeFlagBits(handle_type.val), unsafe_convert(Ptr{Cvoid}, host_pointer))
    _ImportMemoryHostPointerInfoEXT(vks, deps)
end

"""

"""
function _CalibratedTimestampInfoEXT(time_domain::TimeDomainEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCalibratedTimestampInfoEXT(VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), time_domain)
    _CalibratedTimestampInfoEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationConservativeStateCreateInfoEXT(conservative_rasterization_mode::ConservativeRasterizationModeEXT, extra_primitive_overestimation_size::Real; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationConservativeStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, conservative_rasterization_mode, extra_primitive_overestimation_size)
    _PipelineRasterizationConservativeStateCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceDescriptorIndexingFeatures(shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDescriptorIndexingFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array)
    _PhysicalDeviceDescriptorIndexingFeatures(vks, deps)
end

"""

"""
function _DescriptorSetLayoutBindingFlagsCreateInfo(binding_flags::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    binding_flags = cconvert(Ptr{VkDescriptorBindingFlags}, binding_flags)
    deps = [next, binding_flags]
    vks = VkDescriptorSetLayoutBindingFlagsCreateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(binding_flags), unsafe_convert(Ptr{VkDescriptorBindingFlags}, binding_flags))
    _DescriptorSetLayoutBindingFlagsCreateInfo(vks, deps)
end

"""

"""
function _DescriptorSetVariableDescriptorCountAllocateInfo(descriptor_counts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    descriptor_counts = cconvert(Ptr{UInt32}, descriptor_counts)
    deps = [next, descriptor_counts]
    vks = VkDescriptorSetVariableDescriptorCountAllocateInfo(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(descriptor_counts), unsafe_convert(Ptr{UInt32}, descriptor_counts))
    _DescriptorSetVariableDescriptorCountAllocateInfo(vks, deps)
end

"""

"""
function _AttachmentDescription2(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentDescription2(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, unsafe_convert(Ptr{Cvoid}, next), flags, format, VkSampleCountFlagBits(samples.val), load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout)
    _AttachmentDescription2(vks, deps)
end

"""

"""
function _AttachmentReference2(attachment::Integer, layout::ImageLayout, aspect_mask::ImageAspectFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentReference2(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, unsafe_convert(Ptr{Cvoid}, next), attachment, layout, aspect_mask)
    _AttachmentReference2(vks, deps)
end

"""

"""
function _SubpassDescription2(pipeline_bind_point::PipelineBindPoint, view_mask::Integer, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; next = C_NULL, flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    input_attachments = cconvert(Ptr{VkAttachmentReference2}, input_attachments)
    color_attachments = cconvert(Ptr{VkAttachmentReference2}, color_attachments)
    resolve_attachments = cconvert(Ptr{VkAttachmentReference2}, resolve_attachments)
    depth_stencil_attachment = cconvert(Ptr{VkAttachmentReference2}, depth_stencil_attachment)
    preserve_attachments = cconvert(Ptr{UInt32}, preserve_attachments)
    deps = [next, input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments]
    vks = VkSubpassDescription2(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, unsafe_convert(Ptr{Cvoid}, next), flags, pipeline_bind_point, view_mask, pointer_length(input_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, input_attachments), pointer_length(color_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, color_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, resolve_attachments), unsafe_convert(Ptr{VkAttachmentReference2}, depth_stencil_attachment), pointer_length(preserve_attachments), unsafe_convert(Ptr{UInt32}, preserve_attachments))
    _SubpassDescription2(vks, deps)
end

"""

"""
function _SubpassDependency2(src_subpass::Integer, dst_subpass::Integer, view_offset::Integer; next = C_NULL, src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassDependency2(VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, unsafe_convert(Ptr{Cvoid}, next), src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags, view_offset)
    _SubpassDependency2(vks, deps)
end

"""

"""
function _RenderPassCreateInfo2(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkAttachmentDescription2}, attachments)
    subpasses = cconvert(Ptr{VkSubpassDescription2}, subpasses)
    dependencies = cconvert(Ptr{VkSubpassDependency2}, dependencies)
    correlated_view_masks = cconvert(Ptr{UInt32}, correlated_view_masks)
    deps = [next, attachments, subpasses, dependencies, correlated_view_masks]
    vks = VkRenderPassCreateInfo2(VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(attachments), unsafe_convert(Ptr{VkAttachmentDescription2}, attachments), pointer_length(subpasses), unsafe_convert(Ptr{VkSubpassDescription2}, subpasses), pointer_length(dependencies), unsafe_convert(Ptr{VkSubpassDependency2}, dependencies), pointer_length(correlated_view_masks), unsafe_convert(Ptr{UInt32}, correlated_view_masks))
    _RenderPassCreateInfo2(vks, deps)
end

"""

"""
function _SubpassBeginInfo(contents::SubpassContents; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassBeginInfo(VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), contents)
    _SubpassBeginInfo(vks, deps)
end

"""

"""
function _SubpassEndInfo(; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSubpassEndInfo(VK_STRUCTURE_TYPE_SUBPASS_END_INFO, unsafe_convert(Ptr{Cvoid}, next))
    _SubpassEndInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceTimelineSemaphoreFeatures(timeline_semaphore::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTimelineSemaphoreFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), timeline_semaphore)
    _PhysicalDeviceTimelineSemaphoreFeatures(vks, deps)
end

"""

"""
function _SemaphoreTypeCreateInfo(semaphore_type::SemaphoreType, initial_value::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreTypeCreateInfo(VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), semaphore_type, initial_value)
    _SemaphoreTypeCreateInfo(vks, deps)
end

"""

"""
function _TimelineSemaphoreSubmitInfo(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_values = cconvert(Ptr{UInt64}, wait_semaphore_values)
    signal_semaphore_values = cconvert(Ptr{UInt64}, signal_semaphore_values)
    deps = [next, wait_semaphore_values, signal_semaphore_values]
    vks = VkTimelineSemaphoreSubmitInfo(VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(wait_semaphore_values), unsafe_convert(Ptr{UInt64}, wait_semaphore_values), pointer_length(signal_semaphore_values), unsafe_convert(Ptr{UInt64}, signal_semaphore_values))
    _TimelineSemaphoreSubmitInfo(vks, deps)
end

"""

"""
function _SemaphoreWaitInfo(semaphores::AbstractArray, values::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    semaphores = cconvert(Ptr{VkSemaphore}, semaphores)
    values = cconvert(Ptr{UInt64}, values)
    deps = [next, semaphores, values]
    vks = VkSemaphoreWaitInfo(VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(semaphores), unsafe_convert(Ptr{VkSemaphore}, semaphores), unsafe_convert(Ptr{UInt64}, values))
    _SemaphoreWaitInfo(vks, deps)
end

"""

"""
function _SemaphoreSignalInfo(semaphore, value::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreSignalInfo(VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, unsafe_convert(Ptr{Cvoid}, next), semaphore, value)
    _SemaphoreSignalInfo(vks, deps, semaphore)
end

"""

"""
function _VertexInputBindingDivisorDescriptionEXT(binding::Integer, divisor::Integer)
    _VertexInputBindingDivisorDescriptionEXT(VkVertexInputBindingDivisorDescriptionEXT(binding, divisor))
end

"""

"""
function _PipelineVertexInputDivisorStateCreateInfoEXT(vertex_binding_divisors::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    vertex_binding_divisors = cconvert(Ptr{VkVertexInputBindingDivisorDescriptionEXT}, vertex_binding_divisors)
    deps = [next, vertex_binding_divisors]
    vks = VkPipelineVertexInputDivisorStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(vertex_binding_divisors), unsafe_convert(Ptr{VkVertexInputBindingDivisorDescriptionEXT}, vertex_binding_divisors))
    _PipelineVertexInputDivisorStateCreateInfoEXT(vks, deps)
end

"""

"""
function _CommandBufferInheritanceConditionalRenderingInfoEXT(conditional_rendering_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceConditionalRenderingInfoEXT(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), conditional_rendering_enable)
    _CommandBufferInheritanceConditionalRenderingInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDevice8BitStorageFeatures(storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice8BitStorageFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8)
    _PhysicalDevice8BitStorageFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceConditionalRenderingFeaturesEXT(conditional_rendering::Bool, inherited_conditional_rendering::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceConditionalRenderingFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), conditional_rendering, inherited_conditional_rendering)
    _PhysicalDeviceConditionalRenderingFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceVulkanMemoryModelFeatures(vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkanMemoryModelFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, unsafe_convert(Ptr{Cvoid}, next), vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains)
    _PhysicalDeviceVulkanMemoryModelFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderAtomicInt64Features(shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderAtomicInt64Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, unsafe_convert(Ptr{Cvoid}, next), shader_buffer_int_64_atomics, shader_shared_int_64_atomics)
    _PhysicalDeviceShaderAtomicInt64Features(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderAtomicFloatFeaturesEXT(shader_buffer_float_32_atomics::Bool, shader_buffer_float_32_atomic_add::Bool, shader_buffer_float_64_atomics::Bool, shader_buffer_float_64_atomic_add::Bool, shader_shared_float_32_atomics::Bool, shader_shared_float_32_atomic_add::Bool, shader_shared_float_64_atomics::Bool, shader_shared_float_64_atomic_add::Bool, shader_image_float_32_atomics::Bool, shader_image_float_32_atomic_add::Bool, sparse_image_float_32_atomics::Bool, sparse_image_float_32_atomic_add::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_buffer_float_32_atomics, shader_buffer_float_32_atomic_add, shader_buffer_float_64_atomics, shader_buffer_float_64_atomic_add, shader_shared_float_32_atomics, shader_shared_float_32_atomic_add, shader_shared_float_64_atomics, shader_shared_float_64_atomic_add, shader_image_float_32_atomics, shader_image_float_32_atomic_add, sparse_image_float_32_atomics, sparse_image_float_32_atomic_add)
    _PhysicalDeviceShaderAtomicFloatFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceVertexAttributeDivisorFeaturesEXT(vertex_attribute_instance_rate_divisor::Bool, vertex_attribute_instance_rate_zero_divisor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), vertex_attribute_instance_rate_divisor, vertex_attribute_instance_rate_zero_divisor)
    _PhysicalDeviceVertexAttributeDivisorFeaturesEXT(vks, deps)
end

"""

"""
function _SubpassDescriptionDepthStencilResolve(depth_resolve_mode::ResolveModeFlag, stencil_resolve_mode::ResolveModeFlag; next = C_NULL, depth_stencil_resolve_attachment = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    depth_stencil_resolve_attachment = cconvert(Ptr{VkAttachmentReference2}, depth_stencil_resolve_attachment)
    deps = [next, depth_stencil_resolve_attachment]
    vks = VkSubpassDescriptionDepthStencilResolve(VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, unsafe_convert(Ptr{Cvoid}, next), VkResolveModeFlagBits(depth_resolve_mode.val), VkResolveModeFlagBits(stencil_resolve_mode.val), unsafe_convert(Ptr{VkAttachmentReference2}, depth_stencil_resolve_attachment))
    _SubpassDescriptionDepthStencilResolve(vks, deps)
end

"""

"""
function _ImageViewASTCDecodeModeEXT(decode_mode::Format; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewASTCDecodeModeEXT(VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, unsafe_convert(Ptr{Cvoid}, next), decode_mode)
    _ImageViewASTCDecodeModeEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceASTCDecodeFeaturesEXT(decode_mode_shared_exponent::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceASTCDecodeFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), decode_mode_shared_exponent)
    _PhysicalDeviceASTCDecodeFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceTransformFeedbackFeaturesEXT(transform_feedback::Bool, geometry_streams::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTransformFeedbackFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), transform_feedback, geometry_streams)
    _PhysicalDeviceTransformFeedbackFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationStateStreamCreateInfoEXT(rasterization_stream::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationStateStreamCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, rasterization_stream)
    _PipelineRasterizationStateStreamCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceRepresentativeFragmentTestFeaturesNV(representative_fragment_test::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), representative_fragment_test)
    _PhysicalDeviceRepresentativeFragmentTestFeaturesNV(vks, deps)
end

"""

"""
function _PipelineRepresentativeFragmentTestStateCreateInfoNV(representative_fragment_test_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRepresentativeFragmentTestStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), representative_fragment_test_enable)
    _PipelineRepresentativeFragmentTestStateCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceExclusiveScissorFeaturesNV(exclusive_scissor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExclusiveScissorFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), exclusive_scissor)
    _PhysicalDeviceExclusiveScissorFeaturesNV(vks, deps)
end

"""

"""
function _PipelineViewportExclusiveScissorStateCreateInfoNV(exclusive_scissors::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    exclusive_scissors = cconvert(Ptr{VkRect2D}, exclusive_scissors)
    deps = [next, exclusive_scissors]
    vks = VkPipelineViewportExclusiveScissorStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(exclusive_scissors), unsafe_convert(Ptr{VkRect2D}, exclusive_scissors))
    _PipelineViewportExclusiveScissorStateCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceCornerSampledImageFeaturesNV(corner_sampled_image::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCornerSampledImageFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), corner_sampled_image)
    _PhysicalDeviceCornerSampledImageFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceComputeShaderDerivativesFeaturesNV(compute_derivative_group_quads::Bool, compute_derivative_group_linear::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), compute_derivative_group_quads, compute_derivative_group_linear)
    _PhysicalDeviceComputeShaderDerivativesFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentShaderBarycentricFeaturesNV(fragment_shader_barycentric::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), fragment_shader_barycentric)
    _PhysicalDeviceFragmentShaderBarycentricFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderImageFootprintFeaturesNV(image_footprint::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderImageFootprintFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), image_footprint)
    _PhysicalDeviceShaderImageFootprintFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(dedicated_allocation_image_aliasing::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), dedicated_allocation_image_aliasing)
    _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(vks, deps)
end

"""

"""
function _ShadingRatePaletteNV(shading_rate_palette_entries::AbstractArray)
    shading_rate_palette_entries = cconvert(Ptr{VkShadingRatePaletteEntryNV}, shading_rate_palette_entries)
    deps = [shading_rate_palette_entries]
    vks = VkShadingRatePaletteNV(pointer_length(shading_rate_palette_entries), unsafe_convert(Ptr{VkShadingRatePaletteEntryNV}, shading_rate_palette_entries))
    _ShadingRatePaletteNV(vks, deps)
end

"""

"""
function _PipelineViewportShadingRateImageStateCreateInfoNV(shading_rate_image_enable::Bool, shading_rate_palettes::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    shading_rate_palettes = cconvert(Ptr{VkShadingRatePaletteNV}, shading_rate_palettes)
    deps = [next, shading_rate_palettes]
    vks = VkPipelineViewportShadingRateImageStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_image_enable, pointer_length(shading_rate_palettes), unsafe_convert(Ptr{VkShadingRatePaletteNV}, shading_rate_palettes))
    _PipelineViewportShadingRateImageStateCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceShadingRateImageFeaturesNV(shading_rate_image::Bool, shading_rate_coarse_sample_order::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShadingRateImageFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_image, shading_rate_coarse_sample_order)
    _PhysicalDeviceShadingRateImageFeaturesNV(vks, deps)
end

"""

"""
function _CoarseSampleLocationNV(pixel_x::Integer, pixel_y::Integer, sample::Integer)
    _CoarseSampleLocationNV(VkCoarseSampleLocationNV(pixel_x, pixel_y, sample))
end

"""

"""
function _CoarseSampleOrderCustomNV(shading_rate::ShadingRatePaletteEntryNV, sample_count::Integer, sample_locations::AbstractArray)
    sample_locations = cconvert(Ptr{VkCoarseSampleLocationNV}, sample_locations)
    deps = [sample_locations]
    vks = VkCoarseSampleOrderCustomNV(shading_rate, sample_count, pointer_length(sample_locations), unsafe_convert(Ptr{VkCoarseSampleLocationNV}, sample_locations))
    _CoarseSampleOrderCustomNV(vks, deps)
end

"""

"""
function _PipelineViewportCoarseSampleOrderStateCreateInfoNV(sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    custom_sample_orders = cconvert(Ptr{VkCoarseSampleOrderCustomNV}, custom_sample_orders)
    deps = [next, custom_sample_orders]
    vks = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), sample_order_type, pointer_length(custom_sample_orders), unsafe_convert(Ptr{VkCoarseSampleOrderCustomNV}, custom_sample_orders))
    _PipelineViewportCoarseSampleOrderStateCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceMeshShaderFeaturesNV(task_shader::Bool, mesh_shader::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMeshShaderFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), task_shader, mesh_shader)
    _PhysicalDeviceMeshShaderFeaturesNV(vks, deps)
end

"""

"""
function _DrawMeshTasksIndirectCommandNV(task_count::Integer, first_task::Integer)
    _DrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV(task_count, first_task))
end

"""

"""
function _RayTracingShaderGroupCreateInfoNV(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRayTracingShaderGroupCreateInfoNV(VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader)
    _RayTracingShaderGroupCreateInfoNV(vks, deps)
end

"""

"""
function _RayTracingShaderGroupCreateInfoKHR(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL, shader_group_capture_replay_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    shader_group_capture_replay_handle = cconvert(Ptr{Cvoid}, shader_group_capture_replay_handle)
    deps = [next, shader_group_capture_replay_handle]
    vks = VkRayTracingShaderGroupCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader, unsafe_convert(Ptr{Cvoid}, shader_group_capture_replay_handle))
    _RayTracingShaderGroupCreateInfoKHR(vks, deps)
end

"""

"""
function _RayTracingPipelineCreateInfoNV(stages::AbstractArray, groups::AbstractArray, max_recursion_depth::Integer, layout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    groups = cconvert(Ptr{VkRayTracingShaderGroupCreateInfoNV}, groups)
    deps = [next, stages, groups]
    vks = VkRayTracingPipelineCreateInfoNV(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), pointer_length(groups), unsafe_convert(Ptr{VkRayTracingShaderGroupCreateInfoNV}, groups), max_recursion_depth, layout, base_pipeline_handle, base_pipeline_index)
    _RayTracingPipelineCreateInfoNV(vks, deps, layout, base_pipeline_handle)
end

"""

"""
function _RayTracingPipelineCreateInfoKHR(stages::AbstractArray, groups::AbstractArray, max_pipeline_ray_recursion_depth::Integer, layout, base_pipeline_index::Integer; next = C_NULL, flags = 0, library_info = C_NULL, library_interface = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    stages = cconvert(Ptr{VkPipelineShaderStageCreateInfo}, stages)
    groups = cconvert(Ptr{VkRayTracingShaderGroupCreateInfoKHR}, groups)
    library_info = cconvert(Ptr{VkPipelineLibraryCreateInfoKHR}, library_info)
    library_interface = cconvert(Ptr{VkRayTracingPipelineInterfaceCreateInfoKHR}, library_interface)
    dynamic_state = cconvert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state)
    deps = [next, stages, groups, library_info, library_interface, dynamic_state]
    vks = VkRayTracingPipelineCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(stages), unsafe_convert(Ptr{VkPipelineShaderStageCreateInfo}, stages), pointer_length(groups), unsafe_convert(Ptr{VkRayTracingShaderGroupCreateInfoKHR}, groups), max_pipeline_ray_recursion_depth, unsafe_convert(Ptr{VkPipelineLibraryCreateInfoKHR}, library_info), unsafe_convert(Ptr{VkRayTracingPipelineInterfaceCreateInfoKHR}, library_interface), unsafe_convert(Ptr{VkPipelineDynamicStateCreateInfo}, dynamic_state), layout, base_pipeline_handle, base_pipeline_index)
    _RayTracingPipelineCreateInfoKHR(vks, deps, layout, base_pipeline_handle)
end

"""

"""
function _GeometryTrianglesNV(vertex_offset::Integer, vertex_count::Integer, vertex_stride::Integer, vertex_format::Format, index_offset::Integer, index_count::Integer, index_type::IndexType, transform_offset::Integer; next = C_NULL, vertex_data = C_NULL, index_data = C_NULL, transform_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryTrianglesNV(VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, unsafe_convert(Ptr{Cvoid}, next), vertex_data, vertex_offset, vertex_count, vertex_stride, vertex_format, index_data, index_offset, index_count, index_type, transform_data, transform_offset)
    _GeometryTrianglesNV(vks, deps, vertex_data, index_data, transform_data)
end

"""

"""
function _GeometryAABBNV(num_aab_bs::Integer, stride::Integer, offset::Integer; next = C_NULL, aabb_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryAABBNV(VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, unsafe_convert(Ptr{Cvoid}, next), aabb_data, num_aab_bs, stride, offset)
    _GeometryAABBNV(vks, deps, aabb_data)
end

"""

"""
function _GeometryDataNV(triangles::_GeometryTrianglesNV, aabbs::_GeometryAABBNV)
    _GeometryDataNV(VkGeometryDataNV(triangles.vks, aabbs.vks))
end

"""

"""
function _GeometryNV(geometry_type::GeometryTypeKHR, geometry::_GeometryDataNV; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkGeometryNV(VK_STRUCTURE_TYPE_GEOMETRY_NV, unsafe_convert(Ptr{Cvoid}, next), geometry_type, geometry.vks, flags)
    _GeometryNV(vks, deps)
end

"""

"""
function _AccelerationStructureInfoNV(type::VkAccelerationStructureTypeNV, geometries::AbstractArray; next = C_NULL, flags = 0, instance_count = 0)
    next = cconvert(Ptr{Cvoid}, next)
    geometries = cconvert(Ptr{VkGeometryNV}, geometries)
    deps = [next, geometries]
    vks = VkAccelerationStructureInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, flags, instance_count, pointer_length(geometries), unsafe_convert(Ptr{VkGeometryNV}, geometries))
    _AccelerationStructureInfoNV(vks, deps)
end

"""

"""
function _AccelerationStructureCreateInfoNV(compacted_size::Integer, info::_AccelerationStructureInfoNV; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureCreateInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), compacted_size, info.vks)
    _AccelerationStructureCreateInfoNV(vks, deps)
end

"""

"""
function _BindAccelerationStructureMemoryInfoNV(acceleration_structure, memory, memory_offset::Integer, device_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    device_indices = cconvert(Ptr{UInt32}, device_indices)
    deps = [next, device_indices]
    vks = VkBindAccelerationStructureMemoryInfoNV(VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure, memory, memory_offset, pointer_length(device_indices), unsafe_convert(Ptr{UInt32}, device_indices))
    _BindAccelerationStructureMemoryInfoNV(vks, deps, acceleration_structure, memory)
end

"""

"""
function _WriteDescriptorSetAccelerationStructureKHR(acceleration_structures::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acceleration_structures = cconvert(Ptr{VkAccelerationStructureKHR}, acceleration_structures)
    deps = [next, acceleration_structures]
    vks = VkWriteDescriptorSetAccelerationStructureKHR(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acceleration_structures), unsafe_convert(Ptr{VkAccelerationStructureKHR}, acceleration_structures))
    _WriteDescriptorSetAccelerationStructureKHR(vks, deps)
end

"""

"""
function _WriteDescriptorSetAccelerationStructureNV(acceleration_structures::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    acceleration_structures = cconvert(Ptr{VkAccelerationStructureNV}, acceleration_structures)
    deps = [next, acceleration_structures]
    vks = VkWriteDescriptorSetAccelerationStructureNV(VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, unsafe_convert(Ptr{Cvoid}, next), pointer_length(acceleration_structures), unsafe_convert(Ptr{VkAccelerationStructureNV}, acceleration_structures))
    _WriteDescriptorSetAccelerationStructureNV(vks, deps)
end

"""

"""
function _AccelerationStructureMemoryRequirementsInfoNV(type::AccelerationStructureMemoryRequirementsTypeNV, acceleration_structure; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureMemoryRequirementsInfoNV(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), type, acceleration_structure)
    _AccelerationStructureMemoryRequirementsInfoNV(vks, deps, acceleration_structure)
end

"""

"""
function _PhysicalDeviceAccelerationStructureFeaturesKHR(acceleration_structure::Bool, acceleration_structure_capture_replay::Bool, acceleration_structure_indirect_build::Bool, acceleration_structure_host_commands::Bool, descriptor_binding_acceleration_structure_update_after_bind::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceAccelerationStructureFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure, acceleration_structure_capture_replay, acceleration_structure_indirect_build, acceleration_structure_host_commands, descriptor_binding_acceleration_structure_update_after_bind)
    _PhysicalDeviceAccelerationStructureFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceRayTracingPipelineFeaturesKHR(ray_tracing_pipeline::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed::Bool, ray_tracing_pipeline_trace_rays_indirect::Bool, ray_traversal_primitive_culling::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRayTracingPipelineFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), ray_tracing_pipeline, ray_tracing_pipeline_shader_group_handle_capture_replay, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed, ray_tracing_pipeline_trace_rays_indirect, ray_traversal_primitive_culling)
    _PhysicalDeviceRayTracingPipelineFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceRayQueryFeaturesKHR(ray_query::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRayQueryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), ray_query)
    _PhysicalDeviceRayQueryFeaturesKHR(vks, deps)
end

"""

"""
function _StridedDeviceAddressRegionKHR(stride::Integer, size::Integer; device_address = 0)
    _StridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR(device_address, stride, size))
end

"""

"""
function _TraceRaysIndirectCommandKHR(width::Integer, height::Integer, depth::Integer)
    _TraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR(width, height, depth))
end

"""

"""
function _PhysicalDeviceImageDrmFormatModifierInfoEXT(drm_format_modifier::Integer, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    queue_family_indices = cconvert(Ptr{UInt32}, queue_family_indices)
    deps = [next, queue_family_indices]
    vks = VkPhysicalDeviceImageDrmFormatModifierInfoEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), drm_format_modifier, sharing_mode, pointer_length(queue_family_indices), unsafe_convert(Ptr{UInt32}, queue_family_indices))
    _PhysicalDeviceImageDrmFormatModifierInfoEXT(vks, deps)
end

"""

"""
function _ImageDrmFormatModifierListCreateInfoEXT(drm_format_modifiers::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    drm_format_modifiers = cconvert(Ptr{UInt64}, drm_format_modifiers)
    deps = [next, drm_format_modifiers]
    vks = VkImageDrmFormatModifierListCreateInfoEXT(VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(drm_format_modifiers), unsafe_convert(Ptr{UInt64}, drm_format_modifiers))
    _ImageDrmFormatModifierListCreateInfoEXT(vks, deps)
end

"""

"""
function _ImageDrmFormatModifierExplicitCreateInfoEXT(drm_format_modifier::Integer, plane_layouts::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    plane_layouts = cconvert(Ptr{VkSubresourceLayout}, plane_layouts)
    deps = [next, plane_layouts]
    vks = VkImageDrmFormatModifierExplicitCreateInfoEXT(VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), drm_format_modifier, pointer_length(plane_layouts), unsafe_convert(Ptr{VkSubresourceLayout}, plane_layouts))
    _ImageDrmFormatModifierExplicitCreateInfoEXT(vks, deps)
end

"""

"""
function _ImageStencilUsageCreateInfo(stencil_usage::ImageUsageFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageStencilUsageCreateInfo(VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), stencil_usage)
    _ImageStencilUsageCreateInfo(vks, deps)
end

"""

"""
function _DeviceMemoryOverallocationCreateInfoAMD(overallocation_behavior::MemoryOverallocationBehaviorAMD; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceMemoryOverallocationCreateInfoAMD(VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), overallocation_behavior)
    _DeviceMemoryOverallocationCreateInfoAMD(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentDensityMapFeaturesEXT(fragment_density_map::Bool, fragment_density_map_dynamic::Bool, fragment_density_map_non_subsampled_images::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentDensityMapFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map, fragment_density_map_dynamic, fragment_density_map_non_subsampled_images)
    _PhysicalDeviceFragmentDensityMapFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentDensityMap2FeaturesEXT(fragment_density_map_deferred::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map_deferred)
    _PhysicalDeviceFragmentDensityMap2FeaturesEXT(vks, deps)
end

"""

"""
function _RenderPassFragmentDensityMapCreateInfoEXT(fragment_density_map_attachment::_AttachmentReference; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRenderPassFragmentDensityMapCreateInfoEXT(VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_density_map_attachment.vks)
    _RenderPassFragmentDensityMapCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceScalarBlockLayoutFeatures(scalar_block_layout::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceScalarBlockLayoutFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, unsafe_convert(Ptr{Cvoid}, next), scalar_block_layout)
    _PhysicalDeviceScalarBlockLayoutFeatures(vks, deps)
end

"""

"""
function _SurfaceProtectedCapabilitiesKHR(supports_protected::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceProtectedCapabilitiesKHR(VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, unsafe_convert(Ptr{Cvoid}, next), supports_protected)
    _SurfaceProtectedCapabilitiesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceUniformBufferStandardLayoutFeatures(uniform_buffer_standard_layout::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceUniformBufferStandardLayoutFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, unsafe_convert(Ptr{Cvoid}, next), uniform_buffer_standard_layout)
    _PhysicalDeviceUniformBufferStandardLayoutFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceDepthClipEnableFeaturesEXT(depth_clip_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDepthClipEnableFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), depth_clip_enable)
    _PhysicalDeviceDepthClipEnableFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationDepthClipStateCreateInfoEXT(depth_clip_enable::Bool; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationDepthClipStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags, depth_clip_enable)
    _PipelineRasterizationDepthClipStateCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceMemoryPriorityFeaturesEXT(memory_priority::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMemoryPriorityFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), memory_priority)
    _PhysicalDeviceMemoryPriorityFeaturesEXT(vks, deps)
end

"""

"""
function _MemoryPriorityAllocateInfoEXT(priority::Real; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryPriorityAllocateInfoEXT(VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), priority)
    _MemoryPriorityAllocateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceBufferDeviceAddressFeatures(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBufferDeviceAddressFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)
    _PhysicalDeviceBufferDeviceAddressFeatures(vks, deps)
end

"""

"""
function _PhysicalDeviceBufferDeviceAddressFeaturesEXT(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)
    _PhysicalDeviceBufferDeviceAddressFeaturesEXT(vks, deps)
end

"""

"""
function _BufferDeviceAddressInfo(buffer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferDeviceAddressInfo(VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, unsafe_convert(Ptr{Cvoid}, next), buffer)
    _BufferDeviceAddressInfo(vks, deps, buffer)
end

"""

"""
function _BufferOpaqueCaptureAddressCreateInfo(opaque_capture_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferOpaqueCaptureAddressCreateInfo(VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), opaque_capture_address)
    _BufferOpaqueCaptureAddressCreateInfo(vks, deps)
end

"""

"""
function _BufferDeviceAddressCreateInfoEXT(device_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferDeviceAddressCreateInfoEXT(VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), device_address)
    _BufferDeviceAddressCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceImageViewImageFormatInfoEXT(image_view_type::ImageViewType; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageViewImageFormatInfoEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), image_view_type)
    _PhysicalDeviceImageViewImageFormatInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceImagelessFramebufferFeatures(imageless_framebuffer::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImagelessFramebufferFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, unsafe_convert(Ptr{Cvoid}, next), imageless_framebuffer)
    _PhysicalDeviceImagelessFramebufferFeatures(vks, deps)
end

"""

"""
function _FramebufferAttachmentsCreateInfo(attachment_image_infos::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachment_image_infos = cconvert(Ptr{VkFramebufferAttachmentImageInfo}, attachment_image_infos)
    deps = [next, attachment_image_infos]
    vks = VkFramebufferAttachmentsCreateInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachment_image_infos), unsafe_convert(Ptr{VkFramebufferAttachmentImageInfo}, attachment_image_infos))
    _FramebufferAttachmentsCreateInfo(vks, deps)
end

"""

"""
function _FramebufferAttachmentImageInfo(usage::ImageUsageFlag, width::Integer, height::Integer, layer_count::Integer, view_formats::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    view_formats = cconvert(Ptr{VkFormat}, view_formats)
    deps = [next, view_formats]
    vks = VkFramebufferAttachmentImageInfo(VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, unsafe_convert(Ptr{Cvoid}, next), flags, usage, width, height, layer_count, pointer_length(view_formats), unsafe_convert(Ptr{VkFormat}, view_formats))
    _FramebufferAttachmentImageInfo(vks, deps)
end

"""

"""
function _RenderPassAttachmentBeginInfo(attachments::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    attachments = cconvert(Ptr{VkImageView}, attachments)
    deps = [next, attachments]
    vks = VkRenderPassAttachmentBeginInfo(VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, unsafe_convert(Ptr{Cvoid}, next), pointer_length(attachments), unsafe_convert(Ptr{VkImageView}, attachments))
    _RenderPassAttachmentBeginInfo(vks, deps)
end

"""

"""
function _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(texture_compression_astc_hdr::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), texture_compression_astc_hdr)
    _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceCooperativeMatrixFeaturesNV(cooperative_matrix::Bool, cooperative_matrix_robust_buffer_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCooperativeMatrixFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), cooperative_matrix, cooperative_matrix_robust_buffer_access)
    _PhysicalDeviceCooperativeMatrixFeaturesNV(vks, deps)
end

"""

"""
function _CooperativeMatrixPropertiesNV(m_size::Integer, n_size::Integer, k_size::Integer, a_type::ComponentTypeNV, b_type::ComponentTypeNV, c_type::ComponentTypeNV, d_type::ComponentTypeNV, scope::ScopeNV; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCooperativeMatrixPropertiesNV(VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, unsafe_convert(Ptr{Cvoid}, next), m_size, n_size, k_size, a_type, b_type, c_type, d_type, scope)
    _CooperativeMatrixPropertiesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceYcbcrImageArraysFeaturesEXT(ycbcr_image_arrays::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), ycbcr_image_arrays)
    _PhysicalDeviceYcbcrImageArraysFeaturesEXT(vks, deps)
end

"""

"""
function _ImageViewHandleInfoNVX(image_view, descriptor_type::DescriptorType; next = C_NULL, sampler = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageViewHandleInfoNVX(VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, unsafe_convert(Ptr{Cvoid}, next), image_view, descriptor_type, sampler)
    _ImageViewHandleInfoNVX(vks, deps, image_view, sampler)
end

"""

"""
function _PipelineCreationFeedbackCreateInfoEXT(pipeline_creation_feedback::PipelineCreationFeedbackEXT, pipeline_stage_creation_feedbacks::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    pipeline_creation_feedback = cconvert(Ptr{VkPipelineCreationFeedbackEXT}, pipeline_creation_feedback)
    pipeline_stage_creation_feedbacks = cconvert(Ptr{Ptr{VkPipelineCreationFeedbackEXT}}, pipeline_stage_creation_feedbacks)
    deps = [next, pipeline_creation_feedback, pipeline_stage_creation_feedbacks]
    vks = VkPipelineCreationFeedbackCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{VkPipelineCreationFeedbackEXT}, pipeline_creation_feedback), pointer_length(pipeline_stage_creation_feedbacks), unsafe_convert(Ptr{Ptr{VkPipelineCreationFeedbackEXT}}, pipeline_stage_creation_feedbacks))
    _PipelineCreationFeedbackCreateInfoEXT(vks, deps)
end

"""

"""
function _SurfaceFullScreenExclusiveInfoEXT(full_screen_exclusive::FullScreenExclusiveEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceFullScreenExclusiveInfoEXT(VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), full_screen_exclusive)
    _SurfaceFullScreenExclusiveInfoEXT(vks, deps)
end

"""

"""
function _SurfaceFullScreenExclusiveWin32InfoEXT(hmonitor::vk.HMONITOR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceFullScreenExclusiveWin32InfoEXT(VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), hmonitor)
    _SurfaceFullScreenExclusiveWin32InfoEXT(vks, deps)
end

"""

"""
function _SurfaceCapabilitiesFullScreenExclusiveEXT(full_screen_exclusive_supported::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSurfaceCapabilitiesFullScreenExclusiveEXT(VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, unsafe_convert(Ptr{Cvoid}, next), full_screen_exclusive_supported)
    _SurfaceCapabilitiesFullScreenExclusiveEXT(vks, deps)
end

"""

"""
function _PhysicalDevicePerformanceQueryFeaturesKHR(performance_counter_query_pools::Bool, performance_counter_multiple_query_pools::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePerformanceQueryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), performance_counter_query_pools, performance_counter_multiple_query_pools)
    _PhysicalDevicePerformanceQueryFeaturesKHR(vks, deps)
end

"""

"""
function _QueryPoolPerformanceCreateInfoKHR(queue_family_index::Integer, counter_indices::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    counter_indices = cconvert(Ptr{UInt32}, counter_indices)
    deps = [next, counter_indices]
    vks = VkQueryPoolPerformanceCreateInfoKHR(VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), queue_family_index, pointer_length(counter_indices), unsafe_convert(Ptr{UInt32}, counter_indices))
    _QueryPoolPerformanceCreateInfoKHR(vks, deps)
end

"""

"""
function _AcquireProfilingLockInfoKHR(timeout::Integer; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAcquireProfilingLockInfoKHR(VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, timeout)
    _AcquireProfilingLockInfoKHR(vks, deps)
end

"""

"""
function _PerformanceQuerySubmitInfoKHR(counter_pass_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceQuerySubmitInfoKHR(VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), counter_pass_index)
    _PerformanceQuerySubmitInfoKHR(vks, deps)
end

"""

"""
function _HeadlessSurfaceCreateInfoEXT(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkHeadlessSurfaceCreateInfoEXT(VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), flags)
    _HeadlessSurfaceCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceCoverageReductionModeFeaturesNV(coverage_reduction_mode::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCoverageReductionModeFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), coverage_reduction_mode)
    _PhysicalDeviceCoverageReductionModeFeaturesNV(vks, deps)
end

"""

"""
function _PipelineCoverageReductionStateCreateInfoNV(coverage_reduction_mode::CoverageReductionModeNV; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCoverageReductionStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags, coverage_reduction_mode)
    _PipelineCoverageReductionStateCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(shader_integer_functions_2::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, unsafe_convert(Ptr{Cvoid}, next), shader_integer_functions_2)
    _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(vks, deps)
end

"""

"""
function _PerformanceValueINTEL(type::PerformanceValueTypeINTEL, data::_PerformanceValueDataINTEL)
    _PerformanceValueINTEL(VkPerformanceValueINTEL(type, data.vks))
end

"""

"""
function _InitializePerformanceApiInfoINTEL(; next = C_NULL, user_data = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    user_data = cconvert(Ptr{Cvoid}, user_data)
    deps = [next, user_data]
    vks = VkInitializePerformanceApiInfoINTEL(VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{Cvoid}, user_data))
    _InitializePerformanceApiInfoINTEL(vks, deps)
end

"""

"""
function _QueryPoolPerformanceQueryCreateInfoINTEL(performance_counters_sampling::QueryPoolSamplingModeINTEL; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkQueryPoolPerformanceQueryCreateInfoINTEL(VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), performance_counters_sampling)
    _QueryPoolPerformanceQueryCreateInfoINTEL(vks, deps)
end

"""

"""
function _PerformanceMarkerInfoINTEL(marker::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceMarkerInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), marker)
    _PerformanceMarkerInfoINTEL(vks, deps)
end

"""

"""
function _PerformanceStreamMarkerInfoINTEL(marker::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceStreamMarkerInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), marker)
    _PerformanceStreamMarkerInfoINTEL(vks, deps)
end

"""

"""
function _PerformanceOverrideInfoINTEL(type::PerformanceOverrideTypeINTEL, enable::Bool, parameter::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceOverrideInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), type, enable, parameter)
    _PerformanceOverrideInfoINTEL(vks, deps)
end

"""

"""
function _PerformanceConfigurationAcquireInfoINTEL(type::PerformanceConfigurationTypeINTEL; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPerformanceConfigurationAcquireInfoINTEL(VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, unsafe_convert(Ptr{Cvoid}, next), type)
    _PerformanceConfigurationAcquireInfoINTEL(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderClockFeaturesKHR(shader_subgroup_clock::Bool, shader_device_clock::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderClockFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_subgroup_clock, shader_device_clock)
    _PhysicalDeviceShaderClockFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceIndexTypeUint8FeaturesEXT(index_type_uint_8::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceIndexTypeUint8FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), index_type_uint_8)
    _PhysicalDeviceIndexTypeUint8FeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderSMBuiltinsFeaturesNV(shader_sm_builtins::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), shader_sm_builtins)
    _PhysicalDeviceShaderSMBuiltinsFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentShaderInterlockFeaturesEXT(fragment_shader_sample_interlock::Bool, fragment_shader_pixel_interlock::Bool, fragment_shader_shading_rate_interlock::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), fragment_shader_sample_interlock, fragment_shader_pixel_interlock, fragment_shader_shading_rate_interlock)
    _PhysicalDeviceFragmentShaderInterlockFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceSeparateDepthStencilLayoutsFeatures(separate_depth_stencil_layouts::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, unsafe_convert(Ptr{Cvoid}, next), separate_depth_stencil_layouts)
    _PhysicalDeviceSeparateDepthStencilLayoutsFeatures(vks, deps)
end

"""

"""
function _AttachmentReferenceStencilLayout(stencil_layout::ImageLayout; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentReferenceStencilLayout(VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, unsafe_convert(Ptr{Cvoid}, next), stencil_layout)
    _AttachmentReferenceStencilLayout(vks, deps)
end

"""

"""
function _AttachmentDescriptionStencilLayout(stencil_initial_layout::ImageLayout, stencil_final_layout::ImageLayout; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAttachmentDescriptionStencilLayout(VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, unsafe_convert(Ptr{Cvoid}, next), stencil_initial_layout, stencil_final_layout)
    _AttachmentDescriptionStencilLayout(vks, deps)
end

"""

"""
function _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(pipeline_executable_info::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline_executable_info)
    _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(vks, deps)
end

"""

"""
function _PipelineInfoKHR(pipeline; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline)
    _PipelineInfoKHR(vks, deps, pipeline)
end

"""

"""
function _PipelineExecutableInfoKHR(pipeline, executable_index::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineExecutableInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline, executable_index)
    _PipelineExecutableInfoKHR(vks, deps, pipeline)
end

"""

"""
function _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(shader_demote_to_helper_invocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_demote_to_helper_invocation)
    _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceTexelBufferAlignmentFeaturesEXT(texel_buffer_alignment::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), texel_buffer_alignment)
    _PhysicalDeviceTexelBufferAlignmentFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceSubgroupSizeControlFeaturesEXT(subgroup_size_control::Bool, compute_full_subgroups::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), subgroup_size_control, compute_full_subgroups)
    _PhysicalDeviceSubgroupSizeControlFeaturesEXT(vks, deps)
end

"""

"""
function _MemoryOpaqueCaptureAddressAllocateInfo(opaque_capture_address::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryOpaqueCaptureAddressAllocateInfo(VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, unsafe_convert(Ptr{Cvoid}, next), opaque_capture_address)
    _MemoryOpaqueCaptureAddressAllocateInfo(vks, deps)
end

"""

"""
function _DeviceMemoryOpaqueCaptureAddressInfo(memory; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceMemoryOpaqueCaptureAddressInfo(VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, unsafe_convert(Ptr{Cvoid}, next), memory)
    _DeviceMemoryOpaqueCaptureAddressInfo(vks, deps, memory)
end

"""

"""
function _PhysicalDeviceLineRasterizationFeaturesEXT(rectangular_lines::Bool, bresenham_lines::Bool, smooth_lines::Bool, stippled_rectangular_lines::Bool, stippled_bresenham_lines::Bool, stippled_smooth_lines::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceLineRasterizationFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), rectangular_lines, bresenham_lines, smooth_lines, stippled_rectangular_lines, stippled_bresenham_lines, stippled_smooth_lines)
    _PhysicalDeviceLineRasterizationFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationLineStateCreateInfoEXT(line_rasterization_mode::LineRasterizationModeEXT, stippled_line_enable::Bool, line_stipple_factor::Integer, line_stipple_pattern::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationLineStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), line_rasterization_mode, stippled_line_enable, line_stipple_factor, line_stipple_pattern)
    _PipelineRasterizationLineStateCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDevicePipelineCreationCacheControlFeaturesEXT(pipeline_creation_cache_control::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), pipeline_creation_cache_control)
    _PhysicalDevicePipelineCreationCacheControlFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceVulkan11Features(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool, multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool, variable_pointers_storage_buffer::Bool, variable_pointers::Bool, protected_memory::Bool, sampler_ycbcr_conversion::Bool, shader_draw_parameters::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkan11Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, unsafe_convert(Ptr{Cvoid}, next), storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16, multiview, multiview_geometry_shader, multiview_tessellation_shader, variable_pointers_storage_buffer, variable_pointers, protected_memory, sampler_ycbcr_conversion, shader_draw_parameters)
    _PhysicalDeviceVulkan11Features(vks, deps)
end

"""

"""
function _PhysicalDeviceVulkan12Features(sampler_mirror_clamp_to_edge::Bool, draw_indirect_count::Bool, storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool, shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool, shader_float_16::Bool, shader_int_8::Bool, descriptor_indexing::Bool, shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool, sampler_filter_minmax::Bool, scalar_block_layout::Bool, imageless_framebuffer::Bool, uniform_buffer_standard_layout::Bool, shader_subgroup_extended_types::Bool, separate_depth_stencil_layouts::Bool, host_query_reset::Bool, timeline_semaphore::Bool, buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool, vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool, shader_output_viewport_index::Bool, shader_output_layer::Bool, subgroup_broadcast_dynamic_id::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVulkan12Features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, unsafe_convert(Ptr{Cvoid}, next), sampler_mirror_clamp_to_edge, draw_indirect_count, storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8, shader_buffer_int_64_atomics, shader_shared_int_64_atomics, shader_float_16, shader_int_8, descriptor_indexing, shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array, sampler_filter_minmax, scalar_block_layout, imageless_framebuffer, uniform_buffer_standard_layout, shader_subgroup_extended_types, separate_depth_stencil_layouts, host_query_reset, timeline_semaphore, buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device, vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains, shader_output_viewport_index, shader_output_layer, subgroup_broadcast_dynamic_id)
    _PhysicalDeviceVulkan12Features(vks, deps)
end

"""

"""
function _PipelineCompilerControlCreateInfoAMD(; next = C_NULL, compiler_control_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineCompilerControlCreateInfoAMD(VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, unsafe_convert(Ptr{Cvoid}, next), compiler_control_flags)
    _PipelineCompilerControlCreateInfoAMD(vks, deps)
end

"""

"""
function _PhysicalDeviceCoherentMemoryFeaturesAMD(device_coherent_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCoherentMemoryFeaturesAMD(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, unsafe_convert(Ptr{Cvoid}, next), device_coherent_memory)
    _PhysicalDeviceCoherentMemoryFeaturesAMD(vks, deps)
end

"""

"""
function _SamplerCustomBorderColorCreateInfoEXT(custom_border_color::_ClearColorValue, format::Format; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSamplerCustomBorderColorCreateInfoEXT(VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), custom_border_color.vks, format)
    _SamplerCustomBorderColorCreateInfoEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceCustomBorderColorFeaturesEXT(custom_border_colors::Bool, custom_border_color_without_format::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceCustomBorderColorFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), custom_border_colors, custom_border_color_without_format)
    _PhysicalDeviceCustomBorderColorFeaturesEXT(vks, deps)
end

"""

"""
function _AccelerationStructureGeometryTrianglesDataKHR(vertex_format::Format, vertex_data::_DeviceOrHostAddressConstKHR, vertex_stride::Integer, max_vertex::Integer, index_type::IndexType, index_data::_DeviceOrHostAddressConstKHR, transform_data::_DeviceOrHostAddressConstKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryTrianglesDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), vertex_format, vertex_data.vks, vertex_stride, max_vertex, index_type, index_data.vks, transform_data.vks)
    _AccelerationStructureGeometryTrianglesDataKHR(vks, deps)
end

"""

"""
function _AccelerationStructureGeometryAabbsDataKHR(data::_DeviceOrHostAddressConstKHR, stride::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryAabbsDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), data.vks, stride)
    _AccelerationStructureGeometryAabbsDataKHR(vks, deps)
end

"""

"""
function _AccelerationStructureGeometryInstancesDataKHR(array_of_pointers::Bool, data::_DeviceOrHostAddressConstKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryInstancesDataKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, unsafe_convert(Ptr{Cvoid}, next), array_of_pointers, data.vks)
    _AccelerationStructureGeometryInstancesDataKHR(vks, deps)
end

"""

"""
function _AccelerationStructureGeometryKHR(geometry_type::GeometryTypeKHR, geometry::_AccelerationStructureGeometryDataKHR; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureGeometryKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, unsafe_convert(Ptr{Cvoid}, next), geometry_type, geometry.vks, flags)
    _AccelerationStructureGeometryKHR(vks, deps)
end

"""

"""
function _AccelerationStructureBuildGeometryInfoKHR(type::AccelerationStructureTypeKHR, mode::BuildAccelerationStructureModeKHR, scratch_data::_DeviceOrHostAddressKHR; next = C_NULL, flags = 0, src_acceleration_structure = C_NULL, dst_acceleration_structure = C_NULL, geometries = C_NULL, geometries_2 = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    geometries = cconvert(Ptr{VkAccelerationStructureGeometryKHR}, geometries)
    geometries_2 = cconvert(Ptr{Ptr{VkAccelerationStructureGeometryKHR}}, geometries_2)
    deps = [next, geometries, geometries_2]
    vks = VkAccelerationStructureBuildGeometryInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), type, flags, mode, src_acceleration_structure, dst_acceleration_structure, pointer_length(geometries), unsafe_convert(Ptr{VkAccelerationStructureGeometryKHR}, geometries), unsafe_convert(Ptr{Ptr{VkAccelerationStructureGeometryKHR}}, geometries), scratch_data.vks)
    _AccelerationStructureBuildGeometryInfoKHR(vks, deps, src_acceleration_structure, dst_acceleration_structure)
end

"""

"""
function _AccelerationStructureBuildRangeInfoKHR(primitive_count::Integer, primitive_offset::Integer, first_vertex::Integer, transform_offset::Integer)
    _AccelerationStructureBuildRangeInfoKHR(VkAccelerationStructureBuildRangeInfoKHR(primitive_count, primitive_offset, first_vertex, transform_offset))
end

"""

"""
function _AccelerationStructureCreateInfoKHR(buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; next = C_NULL, create_flags = 0, device_address = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureCreateInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), create_flags, buffer, offset, size, type, device_address)
    _AccelerationStructureCreateInfoKHR(vks, deps, buffer)
end

"""

"""
function _AabbPositionsKHR(min_x::Real, min_y::Real, min_z::Real, max_x::Real, max_y::Real, max_z::Real)
    _AabbPositionsKHR(VkAabbPositionsKHR(min_x, min_y, min_z, max_x, max_y, max_z))
end

"""

"""
function _TransformMatrixKHR(matrix::NTuple{3, NTuple{4, Float32}})
    _TransformMatrixKHR(VkTransformMatrixKHR(matrix))
end

"""

"""
function _AccelerationStructureInstanceKHR(transform::_TransformMatrixKHR, instance_custom_index::Integer, mask::Integer, instance_shader_binding_table_record_offset::Integer, acceleration_structure_reference::Integer; flags = 0)
    _AccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR(transform.vks, instance_custom_index, mask, instance_shader_binding_table_record_offset, flags, acceleration_structure_reference))
end

"""

"""
function _AccelerationStructureDeviceAddressInfoKHR(acceleration_structure; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureDeviceAddressInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure)
    _AccelerationStructureDeviceAddressInfoKHR(vks, deps, acceleration_structure)
end

"""

"""
function _AccelerationStructureVersionInfoKHR(version_data::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    version_data = cconvert(Ptr{UInt8}, version_data)
    deps = [next, version_data]
    vks = VkAccelerationStructureVersionInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{UInt8}, version_data))
    _AccelerationStructureVersionInfoKHR(vks, deps)
end

"""

"""
function _CopyAccelerationStructureInfoKHR(src, dst, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyAccelerationStructureInfoKHR(VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src, dst, mode)
    _CopyAccelerationStructureInfoKHR(vks, deps, src, dst)
end

"""

"""
function _CopyAccelerationStructureToMemoryInfoKHR(src, dst::_DeviceOrHostAddressKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyAccelerationStructureToMemoryInfoKHR(VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src, dst.vks, mode)
    _CopyAccelerationStructureToMemoryInfoKHR(vks, deps, src)
end

"""

"""
function _CopyMemoryToAccelerationStructureInfoKHR(src::_DeviceOrHostAddressConstKHR, dst, mode::CopyAccelerationStructureModeKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyMemoryToAccelerationStructureInfoKHR(VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), src.vks, dst, mode)
    _CopyMemoryToAccelerationStructureInfoKHR(vks, deps, dst)
end

"""

"""
function _RayTracingPipelineInterfaceCreateInfoKHR(max_pipeline_ray_payload_size::Integer, max_pipeline_ray_hit_attribute_size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRayTracingPipelineInterfaceCreateInfoKHR(VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), max_pipeline_ray_payload_size, max_pipeline_ray_hit_attribute_size)
    _RayTracingPipelineInterfaceCreateInfoKHR(vks, deps)
end

"""

"""
function _PipelineLibraryCreateInfoKHR(libraries::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    libraries = cconvert(Ptr{VkPipeline}, libraries)
    deps = [next, libraries]
    vks = VkPipelineLibraryCreateInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), pointer_length(libraries), unsafe_convert(Ptr{VkPipeline}, libraries))
    _PipelineLibraryCreateInfoKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceExtendedDynamicStateFeaturesEXT(extended_dynamic_state::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), extended_dynamic_state)
    _PhysicalDeviceExtendedDynamicStateFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceExtendedDynamicState2FeaturesEXT(extended_dynamic_state_2::Bool, extended_dynamic_state_2_logic_op::Bool, extended_dynamic_state_2_patch_control_points::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), extended_dynamic_state_2, extended_dynamic_state_2_logic_op, extended_dynamic_state_2_patch_control_points)
    _PhysicalDeviceExtendedDynamicState2FeaturesEXT(vks, deps)
end

"""

"""
function _RenderPassTransformBeginInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkRenderPassTransformBeginInfoQCOM(VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val))
    _RenderPassTransformBeginInfoQCOM(vks, deps)
end

"""

"""
function _CopyCommandTransformInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCopyCommandTransformInfoQCOM(VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val))
    _CopyCommandTransformInfoQCOM(vks, deps)
end

"""

"""
function _CommandBufferInheritanceRenderPassTransformInfoQCOM(transform::SurfaceTransformFlagKHR, render_area::_Rect2D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferInheritanceRenderPassTransformInfoQCOM(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, unsafe_convert(Ptr{Cvoid}, next), VkSurfaceTransformFlagBitsKHR(transform.val), render_area.vks)
    _CommandBufferInheritanceRenderPassTransformInfoQCOM(vks, deps)
end

"""

"""
function _PhysicalDeviceDiagnosticsConfigFeaturesNV(diagnostics_config::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceDiagnosticsConfigFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), diagnostics_config)
    _PhysicalDeviceDiagnosticsConfigFeaturesNV(vks, deps)
end

"""

"""
function _DeviceDiagnosticsConfigCreateInfoNV(; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkDeviceDiagnosticsConfigCreateInfoNV(VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), flags)
    _DeviceDiagnosticsConfigCreateInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(shader_zero_initialize_workgroup_memory::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_zero_initialize_workgroup_memory)
    _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceRobustness2FeaturesEXT(robust_buffer_access_2::Bool, robust_image_access_2::Bool, null_descriptor::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceRobustness2FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), robust_buffer_access_2, robust_image_access_2, null_descriptor)
    _PhysicalDeviceRobustness2FeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceImageRobustnessFeaturesEXT(robust_image_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceImageRobustnessFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), robust_image_access)
    _PhysicalDeviceImageRobustnessFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(workgroup_memory_explicit_layout::Bool, workgroup_memory_explicit_layout_scalar_block_layout::Bool, workgroup_memory_explicit_layout_8_bit_access::Bool, workgroup_memory_explicit_layout_16_bit_access::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), workgroup_memory_explicit_layout, workgroup_memory_explicit_layout_scalar_block_layout, workgroup_memory_explicit_layout_8_bit_access, workgroup_memory_explicit_layout_16_bit_access)
    _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDevice4444FormatsFeaturesEXT(format_a4r4g4b4::Bool, format_a4b4g4r4::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDevice4444FormatsFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), format_a4r4g4b4, format_a4b4g4r4)
    _PhysicalDevice4444FormatsFeaturesEXT(vks, deps)
end

"""

"""
function _BufferCopy2KHR(src_offset::Integer, dst_offset::Integer, size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferCopy2KHR(VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_offset, dst_offset, size)
    _BufferCopy2KHR(vks, deps)
end

"""

"""
function _ImageCopy2KHR(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageCopy2KHR(VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks)
    _ImageCopy2KHR(vks, deps)
end

"""

"""
function _ImageBlit2KHR(src_subresource::_ImageSubresourceLayers, src_offsets::NTuple{2, _Offset3D}, dst_subresource::_ImageSubresourceLayers, dst_offsets::NTuple{2, _Offset3D}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageBlit2KHR(VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, to_vk(NTuple{2, VkOffset3D}, src_offsets), dst_subresource.vks, to_vk(NTuple{2, VkOffset3D}, dst_offsets))
    _ImageBlit2KHR(vks, deps)
end

"""

"""
function _BufferImageCopy2KHR(buffer_offset::Integer, buffer_row_length::Integer, buffer_image_height::Integer, image_subresource::_ImageSubresourceLayers, image_offset::_Offset3D, image_extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferImageCopy2KHR(VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, unsafe_convert(Ptr{Cvoid}, next), buffer_offset, buffer_row_length, buffer_image_height, image_subresource.vks, image_offset.vks, image_extent.vks)
    _BufferImageCopy2KHR(vks, deps)
end

"""

"""
function _ImageResolve2KHR(src_subresource::_ImageSubresourceLayers, src_offset::_Offset3D, dst_subresource::_ImageSubresourceLayers, dst_offset::_Offset3D, extent::_Extent3D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageResolve2KHR(VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_subresource.vks, src_offset.vks, dst_subresource.vks, dst_offset.vks, extent.vks)
    _ImageResolve2KHR(vks, deps)
end

"""

"""
function _CopyBufferInfo2KHR(src_buffer, dst_buffer, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyBufferInfo2KHR(VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_buffer, dst_buffer, pointer_length(regions), unsafe_convert(Ptr{VkBufferCopy2KHR}, regions))
    _CopyBufferInfo2KHR(vks, deps, src_buffer, dst_buffer)
end

"""

"""
function _CopyImageInfo2KHR(src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyImageInfo2KHR(VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageCopy2KHR}, regions))
    _CopyImageInfo2KHR(vks, deps, src_image, dst_image)
end

"""

"""
function _BlitImageInfo2KHR(src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageBlit2KHR}, regions)
    deps = [next, regions]
    vks = VkBlitImageInfo2KHR(VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageBlit2KHR}, regions), filter)
    _BlitImageInfo2KHR(vks, deps, src_image, dst_image)
end

"""

"""
function _CopyBufferToImageInfo2KHR(src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyBufferToImageInfo2KHR(VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_buffer, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkBufferImageCopy2KHR}, regions))
    _CopyBufferToImageInfo2KHR(vks, deps, src_buffer, dst_image)
end

"""

"""
function _CopyImageToBufferInfo2KHR(src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkBufferImageCopy2KHR}, regions)
    deps = [next, regions]
    vks = VkCopyImageToBufferInfo2KHR(VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_buffer, pointer_length(regions), unsafe_convert(Ptr{VkBufferImageCopy2KHR}, regions))
    _CopyImageToBufferInfo2KHR(vks, deps, src_image, dst_buffer)
end

"""

"""
function _ResolveImageInfo2KHR(src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    regions = cconvert(Ptr{VkImageResolve2KHR}, regions)
    deps = [next, regions]
    vks = VkResolveImageInfo2KHR(VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), unsafe_convert(Ptr{VkImageResolve2KHR}, regions))
    _ResolveImageInfo2KHR(vks, deps, src_image, dst_image)
end

"""

"""
function _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(shader_image_int_64_atomics::Bool, sparse_image_int_64_atomics::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), shader_image_int_64_atomics, sparse_image_int_64_atomics)
    _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(vks, deps)
end

"""

"""
function _FragmentShadingRateAttachmentInfoKHR(fragment_shading_rate_attachment::_AttachmentReference2, shading_rate_attachment_texel_size::_Extent2D; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    fragment_shading_rate_attachment = cconvert(Ptr{VkAttachmentReference2}, fragment_shading_rate_attachment)
    deps = [next, fragment_shading_rate_attachment]
    vks = VkFragmentShadingRateAttachmentInfoKHR(VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), unsafe_convert(Ptr{VkAttachmentReference2}, fragment_shading_rate_attachment), shading_rate_attachment_texel_size.vks)
    _FragmentShadingRateAttachmentInfoKHR(vks, deps)
end

"""

"""
function _PipelineFragmentShadingRateStateCreateInfoKHR(fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineFragmentShadingRateStateCreateInfoKHR(VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), fragment_size.vks, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))
    _PipelineFragmentShadingRateStateCreateInfoKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentShadingRateFeaturesKHR(pipeline_fragment_shading_rate::Bool, primitive_fragment_shading_rate::Bool, attachment_fragment_shading_rate::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), pipeline_fragment_shading_rate, primitive_fragment_shading_rate, attachment_fragment_shading_rate)
    _PhysicalDeviceFragmentShadingRateFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceShaderTerminateInvocationFeaturesKHR(shader_terminate_invocation::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), shader_terminate_invocation)
    _PhysicalDeviceShaderTerminateInvocationFeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(fragment_shading_rate_enums::Bool, supersample_fragment_shading_rates::Bool, no_invocation_fragment_shading_rates::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), fragment_shading_rate_enums, supersample_fragment_shading_rates, no_invocation_fragment_shading_rates)
    _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(vks, deps)
end

"""

"""
function _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(max_fragment_shading_rate_invocation_count::SampleCountFlag; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, unsafe_convert(Ptr{Cvoid}, next), VkSampleCountFlagBits(max_fragment_shading_rate_invocation_count.val))
    _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(vks, deps)
end

"""

"""
function _PipelineFragmentShadingRateEnumStateCreateInfoNV(shading_rate_type::FragmentShadingRateTypeNV, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineFragmentShadingRateEnumStateCreateInfoNV(VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), shading_rate_type, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops))
    _PipelineFragmentShadingRateEnumStateCreateInfoNV(vks, deps)
end

"""

"""
function _AccelerationStructureBuildSizesInfoKHR(acceleration_structure_size::Integer, update_scratch_size::Integer, build_scratch_size::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkAccelerationStructureBuildSizesInfoKHR(VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), acceleration_structure_size, update_scratch_size, build_scratch_size)
    _AccelerationStructureBuildSizesInfoKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(mutable_descriptor_type::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, unsafe_convert(Ptr{Cvoid}, next), mutable_descriptor_type)
    _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(vks, deps)
end

"""

"""
function _MutableDescriptorTypeListVALVE(descriptor_types::AbstractArray)
    descriptor_types = cconvert(Ptr{VkDescriptorType}, descriptor_types)
    deps = [descriptor_types]
    vks = VkMutableDescriptorTypeListVALVE(pointer_length(descriptor_types), unsafe_convert(Ptr{VkDescriptorType}, descriptor_types))
    _MutableDescriptorTypeListVALVE(vks, deps)
end

"""

"""
function _MutableDescriptorTypeCreateInfoVALVE(mutable_descriptor_type_lists::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    mutable_descriptor_type_lists = cconvert(Ptr{VkMutableDescriptorTypeListVALVE}, mutable_descriptor_type_lists)
    deps = [next, mutable_descriptor_type_lists]
    vks = VkMutableDescriptorTypeCreateInfoVALVE(VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, unsafe_convert(Ptr{Cvoid}, next), pointer_length(mutable_descriptor_type_lists), unsafe_convert(Ptr{VkMutableDescriptorTypeListVALVE}, mutable_descriptor_type_lists))
    _MutableDescriptorTypeCreateInfoVALVE(vks, deps)
end

"""

"""
function _PhysicalDeviceVertexInputDynamicStateFeaturesEXT(vertex_input_dynamic_state::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), vertex_input_dynamic_state)
    _PhysicalDeviceVertexInputDynamicStateFeaturesEXT(vks, deps)
end

"""

"""
function _VertexInputBindingDescription2EXT(binding::Integer, stride::Integer, input_rate::VertexInputRate, divisor::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVertexInputBindingDescription2EXT(VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, unsafe_convert(Ptr{Cvoid}, next), binding, stride, input_rate, divisor)
    _VertexInputBindingDescription2EXT(vks, deps)
end

"""

"""
function _VertexInputAttributeDescription2EXT(location::Integer, binding::Integer, format::Format, offset::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkVertexInputAttributeDescription2EXT(VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, unsafe_convert(Ptr{Cvoid}, next), location, binding, format, offset)
    _VertexInputAttributeDescription2EXT(vks, deps)
end

"""

"""
function _PhysicalDeviceColorWriteEnableFeaturesEXT(color_write_enable::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceColorWriteEnableFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), color_write_enable)
    _PhysicalDeviceColorWriteEnableFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineColorWriteCreateInfoEXT(color_write_enables::AbstractArray; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    color_write_enables = cconvert(Ptr{VkBool32}, color_write_enables)
    deps = [next, color_write_enables]
    vks = VkPipelineColorWriteCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), pointer_length(color_write_enables), unsafe_convert(Ptr{VkBool32}, color_write_enables))
    _PipelineColorWriteCreateInfoEXT(vks, deps)
end

"""

"""
function _MemoryBarrier2KHR(; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkMemoryBarrier2KHR(VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask)
    _MemoryBarrier2KHR(vks, deps)
end

"""

"""
function _ImageMemoryBarrier2KHR(old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image, subresource_range::_ImageSubresourceRange; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkImageMemoryBarrier2KHR(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range.vks)
    _ImageMemoryBarrier2KHR(vks, deps, image)
end

"""

"""
function _BufferMemoryBarrier2KHR(src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer, offset::Integer, size::Integer; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkBufferMemoryBarrier2KHR(VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, unsafe_convert(Ptr{Cvoid}, next), src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)
    _BufferMemoryBarrier2KHR(vks, deps, buffer)
end

"""

"""
function _DependencyInfoKHR(memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; next = C_NULL, dependency_flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    memory_barriers = cconvert(Ptr{VkMemoryBarrier2KHR}, memory_barriers)
    buffer_memory_barriers = cconvert(Ptr{VkBufferMemoryBarrier2KHR}, buffer_memory_barriers)
    image_memory_barriers = cconvert(Ptr{VkImageMemoryBarrier2KHR}, image_memory_barriers)
    deps = [next, memory_barriers, buffer_memory_barriers, image_memory_barriers]
    vks = VkDependencyInfoKHR(VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), dependency_flags, pointer_length(memory_barriers), unsafe_convert(Ptr{VkMemoryBarrier2KHR}, memory_barriers), pointer_length(buffer_memory_barriers), unsafe_convert(Ptr{VkBufferMemoryBarrier2KHR}, buffer_memory_barriers), pointer_length(image_memory_barriers), unsafe_convert(Ptr{VkImageMemoryBarrier2KHR}, image_memory_barriers))
    _DependencyInfoKHR(vks, deps)
end

"""

"""
function _SemaphoreSubmitInfoKHR(semaphore, value::Integer, device_index::Integer; next = C_NULL, stage_mask = 0)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkSemaphoreSubmitInfoKHR(VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), semaphore, value, stage_mask, device_index)
    _SemaphoreSubmitInfoKHR(vks, deps, semaphore)
end

"""

"""
function _CommandBufferSubmitInfoKHR(command_buffer, device_mask::Integer; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkCommandBufferSubmitInfoKHR(VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, unsafe_convert(Ptr{Cvoid}, next), command_buffer, device_mask)
    _CommandBufferSubmitInfoKHR(vks, deps, command_buffer)
end

"""

"""
function _SubmitInfo2KHR(wait_semaphore_infos::AbstractArray, command_buffer_infos::AbstractArray, signal_semaphore_infos::AbstractArray; next = C_NULL, flags = 0)
    next = cconvert(Ptr{Cvoid}, next)
    wait_semaphore_infos = cconvert(Ptr{VkSemaphoreSubmitInfoKHR}, wait_semaphore_infos)
    command_buffer_infos = cconvert(Ptr{VkCommandBufferSubmitInfoKHR}, command_buffer_infos)
    signal_semaphore_infos = cconvert(Ptr{VkSemaphoreSubmitInfoKHR}, signal_semaphore_infos)
    deps = [next, wait_semaphore_infos, command_buffer_infos, signal_semaphore_infos]
    vks = VkSubmitInfo2KHR(VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, unsafe_convert(Ptr{Cvoid}, next), flags, pointer_length(wait_semaphore_infos), unsafe_convert(Ptr{VkSemaphoreSubmitInfoKHR}, wait_semaphore_infos), pointer_length(command_buffer_infos), unsafe_convert(Ptr{VkCommandBufferSubmitInfoKHR}, command_buffer_infos), pointer_length(signal_semaphore_infos), unsafe_convert(Ptr{VkSemaphoreSubmitInfoKHR}, signal_semaphore_infos))
    _SubmitInfo2KHR(vks, deps)
end

"""

"""
function _PhysicalDeviceSynchronization2FeaturesKHR(synchronization2::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceSynchronization2FeaturesKHR(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, unsafe_convert(Ptr{Cvoid}, next), synchronization2)
    _PhysicalDeviceSynchronization2FeaturesKHR(vks, deps)
end

"""

"""
function _PhysicalDeviceInheritedViewportScissorFeaturesNV(inherited_viewport_scissor_2_d::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceInheritedViewportScissorFeaturesNV(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, unsafe_convert(Ptr{Cvoid}, next), inherited_viewport_scissor_2_d)
    _PhysicalDeviceInheritedViewportScissorFeaturesNV(vks, deps)
end

"""

"""
function _CommandBufferInheritanceViewportScissorInfoNV(viewport_scissor_2_d::Bool, viewport_depth_count::Integer, viewport_depths::_Viewport; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    viewport_depths = cconvert(Ptr{VkViewport}, viewport_depths)
    deps = [next, viewport_depths]
    vks = VkCommandBufferInheritanceViewportScissorInfoNV(VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, unsafe_convert(Ptr{Cvoid}, next), viewport_scissor_2_d, viewport_depth_count, unsafe_convert(Ptr{VkViewport}, viewport_depths))
    _CommandBufferInheritanceViewportScissorInfoNV(vks, deps)
end

"""

"""
function _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(ycbcr_444_formats::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), ycbcr_444_formats)
    _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(vks, deps)
end

"""

"""
function _PhysicalDeviceProvokingVertexFeaturesEXT(provoking_vertex_last::Bool, transform_feedback_preserves_provoking_vertex::Bool; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPhysicalDeviceProvokingVertexFeaturesEXT(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, unsafe_convert(Ptr{Cvoid}, next), provoking_vertex_last, transform_feedback_preserves_provoking_vertex)
    _PhysicalDeviceProvokingVertexFeaturesEXT(vks, deps)
end

"""

"""
function _PipelineRasterizationProvokingVertexStateCreateInfoEXT(provoking_vertex_mode::ProvokingVertexModeEXT; next = C_NULL)
    next = cconvert(Ptr{Cvoid}, next)
    deps = [next]
    vks = VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, unsafe_convert(Ptr{Cvoid}, next), provoking_vertex_mode)
    _PipelineRasterizationProvokingVertexStateCreateInfoEXT(vks, deps)
end

"""

"""
BaseOutStructure(; next = C_NULL) = BaseOutStructure(next)

"""

"""
BaseInStructure(; next = C_NULL) = BaseInStructure(next)

"""

"""
ApplicationInfo(application_version::VersionNumber, engine_version::VersionNumber, api_version::VersionNumber; next = C_NULL, application_name = "", engine_name = "") = ApplicationInfo(next, application_name, application_version, engine_name, engine_version, api_version)

"""

"""
AllocationCallbacks(pfn_allocation::FunctionPtr, pfn_reallocation::FunctionPtr, pfn_free::FunctionPtr; user_data = C_NULL, pfn_internal_allocation = C_NULL, pfn_internal_free = C_NULL) = AllocationCallbacks(user_data, pfn_allocation, pfn_reallocation, pfn_free, pfn_internal_allocation, pfn_internal_free)

"""

"""
DeviceQueueCreateInfo(queue_family_index::Integer, queue_priorities::AbstractArray; next = C_NULL, flags = 0) = DeviceQueueCreateInfo(next, flags, queue_family_index, queue_priorities)

"""

"""
DeviceCreateInfo(queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, enabled_features = C_NULL) = DeviceCreateInfo(next, flags, queue_create_infos, enabled_layer_names, enabled_extension_names, enabled_features)

"""

"""
InstanceCreateInfo(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; next = C_NULL, flags = 0, application_info = C_NULL) = InstanceCreateInfo(next, flags, application_info, enabled_layer_names, enabled_extension_names)

"""

"""
MemoryAllocateInfo(allocation_size::Integer, memory_type_index::Integer; next = C_NULL) = MemoryAllocateInfo(next, allocation_size, memory_type_index)

"""

"""
MappedMemoryRange(memory::DeviceMemory, offset::Integer, size::Integer; next = C_NULL) = MappedMemoryRange(next, memory, offset, size)

"""

"""
DescriptorBufferInfo(offset::Integer, range::Integer; buffer = C_NULL) = DescriptorBufferInfo(buffer, offset, range)

"""

"""
WriteDescriptorSet(dst_set::DescriptorSet, dst_binding::Integer, dst_array_element::Integer, descriptor_type::DescriptorType, image_info::AbstractArray, buffer_info::AbstractArray, texel_buffer_view::AbstractArray; next = C_NULL, descriptor_count = max(pointer_length(image_info), pointer_length(buffer_info), pointer_length(texel_buffer_view))) = WriteDescriptorSet(next, dst_set, dst_binding, dst_array_element, descriptor_count, descriptor_type, image_info, buffer_info, texel_buffer_view)

"""

"""
CopyDescriptorSet(src_set::DescriptorSet, src_binding::Integer, src_array_element::Integer, dst_set::DescriptorSet, dst_binding::Integer, dst_array_element::Integer, descriptor_count::Integer; next = C_NULL) = CopyDescriptorSet(next, src_set, src_binding, src_array_element, dst_set, dst_binding, dst_array_element, descriptor_count)

"""

"""
BufferCreateInfo(size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL, flags = 0) = BufferCreateInfo(next, flags, size, usage, sharing_mode, queue_family_indices)

"""

"""
BufferViewCreateInfo(buffer::Buffer, format::Format, offset::Integer, range::Integer; next = C_NULL, flags = 0) = BufferViewCreateInfo(next, flags, buffer, format, offset, range)

"""

"""
MemoryBarrier(; next = C_NULL, src_access_mask = 0, dst_access_mask = 0) = MemoryBarrier(next, src_access_mask, dst_access_mask)

"""

"""
BufferMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer::Buffer, offset::Integer, size::Integer; next = C_NULL) = BufferMemoryBarrier(next, src_access_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)

"""

"""
ImageMemoryBarrier(src_access_mask::AccessFlag, dst_access_mask::AccessFlag, old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image::Image, subresource_range::ImageSubresourceRange; next = C_NULL) = ImageMemoryBarrier(next, src_access_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range)

"""

"""
ImageCreateInfo(image_type::ImageType, format::Format, extent::Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; next = C_NULL, flags = 0) = ImageCreateInfo(next, flags, image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout)

"""

"""
ImageViewCreateInfo(image::Image, view_type::ImageViewType, format::Format, components::ComponentMapping, subresource_range::ImageSubresourceRange; next = C_NULL, flags = 0) = ImageViewCreateInfo(next, flags, image, view_type, format, components, subresource_range)

"""

"""
SparseMemoryBind(resource_offset::Integer, size::Integer, memory_offset::Integer; memory = C_NULL, flags = 0) = SparseMemoryBind(resource_offset, size, memory, memory_offset, flags)

"""

"""
SparseImageMemoryBind(subresource::ImageSubresource, offset::Offset3D, extent::Extent3D, memory_offset::Integer; memory = C_NULL, flags = 0) = SparseImageMemoryBind(subresource, offset, extent, memory, memory_offset, flags)

"""

"""
BindSparseInfo(wait_semaphores::AbstractArray, buffer_binds::AbstractArray, image_opaque_binds::AbstractArray, image_binds::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL) = BindSparseInfo(next, wait_semaphores, buffer_binds, image_opaque_binds, image_binds, signal_semaphores)

"""

"""
ShaderModuleCreateInfo(code_size::Integer, code::AbstractArray; next = C_NULL, flags = 0) = ShaderModuleCreateInfo(next, flags, code_size, code)

"""

"""
DescriptorSetLayoutBinding(binding::Integer, descriptor_type::DescriptorType, stage_flags::ShaderStageFlag; descriptor_count = 0, immutable_samplers = C_NULL) = DescriptorSetLayoutBinding(binding, descriptor_type, descriptor_count, stage_flags, immutable_samplers)

"""

"""
DescriptorSetLayoutCreateInfo(bindings::AbstractArray; next = C_NULL, flags = 0) = DescriptorSetLayoutCreateInfo(next, flags, bindings)

"""

"""
DescriptorPoolCreateInfo(max_sets::Integer, pool_sizes::AbstractArray; next = C_NULL, flags = 0) = DescriptorPoolCreateInfo(next, flags, max_sets, pool_sizes)

"""

"""
DescriptorSetAllocateInfo(descriptor_pool::DescriptorPool, set_layouts::AbstractArray; next = C_NULL) = DescriptorSetAllocateInfo(next, descriptor_pool, set_layouts)

"""

"""
SpecializationInfo(map_entries::AbstractArray, data::Ptr{Cvoid}; data_size = C_NULL) = SpecializationInfo(map_entries, data_size, data)

"""

"""
PipelineShaderStageCreateInfo(stage::ShaderStageFlag, _module::ShaderModule, name::AbstractString; next = C_NULL, flags = 0, specialization_info = C_NULL) = PipelineShaderStageCreateInfo(next, flags, stage, _module, name, specialization_info)

"""

"""
ComputePipelineCreateInfo(stage::PipelineShaderStageCreateInfo, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL) = ComputePipelineCreateInfo(next, flags, stage, layout, base_pipeline_handle, base_pipeline_index)

"""

"""
PipelineVertexInputStateCreateInfo(vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray; next = C_NULL, flags = 0) = PipelineVertexInputStateCreateInfo(next, flags, vertex_binding_descriptions, vertex_attribute_descriptions)

"""

"""
PipelineInputAssemblyStateCreateInfo(topology::PrimitiveTopology, primitive_restart_enable::Bool; next = C_NULL, flags = 0) = PipelineInputAssemblyStateCreateInfo(next, flags, topology, primitive_restart_enable)

"""

"""
PipelineTessellationStateCreateInfo(patch_control_points::Integer; next = C_NULL, flags = 0) = PipelineTessellationStateCreateInfo(next, flags, patch_control_points)

"""

"""
PipelineViewportStateCreateInfo(; next = C_NULL, flags = 0, viewports = C_NULL, scissors = C_NULL) = PipelineViewportStateCreateInfo(next, flags, viewports, scissors)

"""

"""
PipelineRasterizationStateCreateInfo(depth_clamp_enable::Bool, rasterizer_discard_enable::Bool, polygon_mode::PolygonMode, front_face::FrontFace, depth_bias_enable::Bool, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, line_width::Real; next = C_NULL, flags = 0, cull_mode = 0) = PipelineRasterizationStateCreateInfo(next, flags, depth_clamp_enable, rasterizer_discard_enable, polygon_mode, cull_mode, front_face, depth_bias_enable, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor, line_width)

"""

"""
PipelineMultisampleStateCreateInfo(rasterization_samples::SampleCountFlag, sample_shading_enable::Bool, min_sample_shading::Real, alpha_to_coverage_enable::Bool, alpha_to_one_enable::Bool; next = C_NULL, flags = 0, sample_mask = C_NULL) = PipelineMultisampleStateCreateInfo(next, flags, rasterization_samples, sample_shading_enable, min_sample_shading, sample_mask, alpha_to_coverage_enable, alpha_to_one_enable)

"""

"""
PipelineColorBlendAttachmentState(blend_enable::Bool, src_color_blend_factor::BlendFactor, dst_color_blend_factor::BlendFactor, color_blend_op::BlendOp, src_alpha_blend_factor::BlendFactor, dst_alpha_blend_factor::BlendFactor, alpha_blend_op::BlendOp; color_write_mask = 0) = PipelineColorBlendAttachmentState(blend_enable, src_color_blend_factor, dst_color_blend_factor, color_blend_op, src_alpha_blend_factor, dst_alpha_blend_factor, alpha_blend_op, color_write_mask)

"""

"""
PipelineColorBlendStateCreateInfo(logic_op_enable::Bool, logic_op::LogicOp, attachments::AbstractArray, blend_constants::NTuple{4, Float32}; next = C_NULL, flags = 0) = PipelineColorBlendStateCreateInfo(next, flags, logic_op_enable, logic_op, attachments, blend_constants)

"""

"""
PipelineDynamicStateCreateInfo(dynamic_states::AbstractArray; next = C_NULL, flags = 0) = PipelineDynamicStateCreateInfo(next, flags, dynamic_states)

"""

"""
PipelineDepthStencilStateCreateInfo(depth_test_enable::Bool, depth_write_enable::Bool, depth_compare_op::CompareOp, depth_bounds_test_enable::Bool, stencil_test_enable::Bool, front::StencilOpState, back::StencilOpState, min_depth_bounds::Real, max_depth_bounds::Real; next = C_NULL, flags = 0) = PipelineDepthStencilStateCreateInfo(next, flags, depth_test_enable, depth_write_enable, depth_compare_op, depth_bounds_test_enable, stencil_test_enable, front, back, min_depth_bounds, max_depth_bounds)

"""

"""
GraphicsPipelineCreateInfo(stages::AbstractArray, rasterization_state::PipelineRasterizationStateCreateInfo, layout::PipelineLayout, render_pass::RenderPass, subpass::Integer, base_pipeline_index::Integer; next = C_NULL, flags = 0, vertex_input_state = C_NULL, input_assembly_state = C_NULL, tessellation_state = C_NULL, viewport_state = C_NULL, multisample_state = C_NULL, depth_stencil_state = C_NULL, color_blend_state = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL) = GraphicsPipelineCreateInfo(next, flags, stages, vertex_input_state, input_assembly_state, tessellation_state, viewport_state, rasterization_state, multisample_state, depth_stencil_state, color_blend_state, dynamic_state, layout, render_pass, subpass, base_pipeline_handle, base_pipeline_index)

"""

"""
PipelineCacheCreateInfo(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = C_NULL) = PipelineCacheCreateInfo(next, flags, initial_data_size, initial_data)

"""

"""
PipelineLayoutCreateInfo(set_layouts::AbstractArray, push_constant_ranges::AbstractArray; next = C_NULL, flags = 0) = PipelineLayoutCreateInfo(next, flags, set_layouts, push_constant_ranges)

"""

"""
SamplerCreateInfo(mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; next = C_NULL, flags = 0) = SamplerCreateInfo(next, flags, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates)

"""

"""
CommandPoolCreateInfo(queue_family_index::Integer; next = C_NULL, flags = 0) = CommandPoolCreateInfo(next, flags, queue_family_index)

"""

"""
CommandBufferAllocateInfo(command_pool::CommandPool, level::CommandBufferLevel, command_buffer_count::Integer; next = C_NULL) = CommandBufferAllocateInfo(next, command_pool, level, command_buffer_count)

"""

"""
CommandBufferInheritanceInfo(subpass::Integer, occlusion_query_enable::Bool; next = C_NULL, render_pass = C_NULL, framebuffer = C_NULL, query_flags = 0, pipeline_statistics = 0) = CommandBufferInheritanceInfo(next, render_pass, subpass, framebuffer, occlusion_query_enable, query_flags, pipeline_statistics)

"""

"""
CommandBufferBeginInfo(; next = C_NULL, flags = 0, inheritance_info = C_NULL) = CommandBufferBeginInfo(next, flags, inheritance_info)

"""

"""
RenderPassBeginInfo(render_pass::RenderPass, framebuffer::Framebuffer, render_area::Rect2D, clear_values::AbstractArray; next = C_NULL) = RenderPassBeginInfo(next, render_pass, framebuffer, render_area, clear_values)

"""

"""
AttachmentDescription(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; flags = 0) = AttachmentDescription(flags, format, samples, load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout)

"""

"""
SubpassDescription(pipeline_bind_point::PipelineBindPoint, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL) = SubpassDescription(flags, pipeline_bind_point, input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments)

"""

"""
SubpassDependency(src_subpass::Integer, dst_subpass::Integer; src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0) = SubpassDependency(src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags)

"""

"""
RenderPassCreateInfo(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; next = C_NULL, flags = 0) = RenderPassCreateInfo(next, flags, attachments, subpasses, dependencies)

"""

"""
EventCreateInfo(; next = C_NULL, flags = 0) = EventCreateInfo(next, flags)

"""

"""
FenceCreateInfo(; next = C_NULL, flags = 0) = FenceCreateInfo(next, flags)

"""

"""
SemaphoreCreateInfo(; next = C_NULL, flags = 0) = SemaphoreCreateInfo(next, flags)

"""

"""
QueryPoolCreateInfo(query_type::QueryType, query_count::Integer; next = C_NULL, flags = 0, pipeline_statistics = 0) = QueryPoolCreateInfo(next, flags, query_type, query_count, pipeline_statistics)

"""

"""
FramebufferCreateInfo(render_pass::RenderPass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; next = C_NULL, flags = 0) = FramebufferCreateInfo(next, flags, render_pass, attachments, width, height, layers)

"""

"""
SubmitInfo(wait_semaphores::AbstractArray, wait_dst_stage_mask::AbstractArray, command_buffers::AbstractArray, signal_semaphores::AbstractArray; next = C_NULL) = SubmitInfo(next, wait_semaphores, wait_dst_stage_mask, command_buffers, signal_semaphores)

"""

"""
DisplayModeCreateInfoKHR(parameters::DisplayModeParametersKHR; next = C_NULL, flags = 0) = DisplayModeCreateInfoKHR(next, flags, parameters)

"""

"""
DisplaySurfaceCreateInfoKHR(display_mode::DisplayModeKHR, plane_index::Integer, plane_stack_index::Integer, transform::SurfaceTransformFlagKHR, global_alpha::Real, alpha_mode::DisplayPlaneAlphaFlagKHR, image_extent::Extent2D; next = C_NULL, flags = 0) = DisplaySurfaceCreateInfoKHR(next, flags, display_mode, plane_index, plane_stack_index, transform, global_alpha, alpha_mode, image_extent)

"""

"""
DisplayPresentInfoKHR(src_rect::Rect2D, dst_rect::Rect2D, persistent::Bool; next = C_NULL) = DisplayPresentInfoKHR(next, src_rect, dst_rect, persistent)

"""

"""
Win32SurfaceCreateInfoKHR(hinstance::vk.HINSTANCE, hwnd::vk.HWND; next = C_NULL, flags = 0) = Win32SurfaceCreateInfoKHR(next, flags, hinstance, hwnd)

"""

"""
SwapchainCreateInfoKHR(surface::SurfaceKHR, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; next = C_NULL, flags = 0, old_swapchain = C_NULL) = SwapchainCreateInfoKHR(next, flags, surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped, old_swapchain)

"""

"""
PresentInfoKHR(wait_semaphores::AbstractArray, swapchains::AbstractArray, image_indices::AbstractArray; next = C_NULL, results = C_NULL) = PresentInfoKHR(next, wait_semaphores, swapchains, image_indices, results)

"""

"""
DebugReportCallbackCreateInfoEXT(pfn_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL) = DebugReportCallbackCreateInfoEXT(next, flags, pfn_callback, user_data)

"""

"""
ValidationFlagsEXT(disabled_validation_checks::AbstractArray; next = C_NULL) = ValidationFlagsEXT(next, disabled_validation_checks)

"""

"""
ValidationFeaturesEXT(enabled_validation_features::AbstractArray, disabled_validation_features::AbstractArray; next = C_NULL) = ValidationFeaturesEXT(next, enabled_validation_features, disabled_validation_features)

"""

"""
PipelineRasterizationStateRasterizationOrderAMD(rasterization_order::RasterizationOrderAMD; next = C_NULL) = PipelineRasterizationStateRasterizationOrderAMD(next, rasterization_order)

"""

"""
DebugMarkerObjectNameInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, object_name::AbstractString; next = C_NULL) = DebugMarkerObjectNameInfoEXT(next, object_type, object, object_name)

"""

"""
DebugMarkerObjectTagInfoEXT(object_type::DebugReportObjectTypeEXT, object::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL) = DebugMarkerObjectTagInfoEXT(next, object_type, object, tag_name, tag_size, tag)

"""

"""
DebugMarkerMarkerInfoEXT(marker_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL) = DebugMarkerMarkerInfoEXT(next, marker_name, color)

"""

"""
DedicatedAllocationImageCreateInfoNV(dedicated_allocation::Bool; next = C_NULL) = DedicatedAllocationImageCreateInfoNV(next, dedicated_allocation)

"""

"""
DedicatedAllocationBufferCreateInfoNV(dedicated_allocation::Bool; next = C_NULL) = DedicatedAllocationBufferCreateInfoNV(next, dedicated_allocation)

"""

"""
DedicatedAllocationMemoryAllocateInfoNV(; next = C_NULL, image = C_NULL, buffer = C_NULL) = DedicatedAllocationMemoryAllocateInfoNV(next, image, buffer)

"""

"""
ExternalMemoryImageCreateInfoNV(; next = C_NULL, handle_types = 0) = ExternalMemoryImageCreateInfoNV(next, handle_types)

"""

"""
ExportMemoryAllocateInfoNV(; next = C_NULL, handle_types = 0) = ExportMemoryAllocateInfoNV(next, handle_types)

"""

"""
ImportMemoryWin32HandleInfoNV(; next = C_NULL, handle_type = 0, handle = C_NULL) = ImportMemoryWin32HandleInfoNV(next, handle_type, handle)

"""

"""
ExportMemoryWin32HandleInfoNV(; next = C_NULL, attributes = C_NULL, dw_access = C_NULL) = ExportMemoryWin32HandleInfoNV(next, attributes, dw_access)

"""

"""
Win32KeyedMutexAcquireReleaseInfoNV(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeout_milliseconds::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL) = Win32KeyedMutexAcquireReleaseInfoNV(next, acquire_syncs, acquire_keys, acquire_timeout_milliseconds, release_syncs, release_keys)

"""

"""
PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(device_generated_commands::Bool; next = C_NULL) = PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(next, device_generated_commands)

"""

"""
DevicePrivateDataCreateInfoEXT(private_data_slot_request_count::Integer; next = C_NULL) = DevicePrivateDataCreateInfoEXT(next, private_data_slot_request_count)

"""

"""
PrivateDataSlotCreateInfoEXT(flags::PrivateDataSlotCreateFlagEXT; next = C_NULL) = PrivateDataSlotCreateInfoEXT(next, flags)

"""

"""
PhysicalDevicePrivateDataFeaturesEXT(private_data::Bool; next = C_NULL) = PhysicalDevicePrivateDataFeaturesEXT(next, private_data)

"""

"""
GraphicsShaderGroupCreateInfoNV(stages::AbstractArray; next = C_NULL, vertex_input_state = C_NULL, tessellation_state = C_NULL) = GraphicsShaderGroupCreateInfoNV(next, stages, vertex_input_state, tessellation_state)

"""

"""
GraphicsPipelineShaderGroupsCreateInfoNV(groups::AbstractArray, pipelines::AbstractArray; next = C_NULL) = GraphicsPipelineShaderGroupsCreateInfoNV(next, groups, pipelines)

"""

"""
IndirectCommandsLayoutTokenNV(token_type::IndirectCommandsTokenTypeNV, stream::Integer, offset::Integer, vertex_binding_unit::Integer, vertex_dynamic_stride::Bool, pushconstant_offset::Integer, pushconstant_size::Integer, index_types::AbstractArray, index_type_values::AbstractArray; next = C_NULL, pushconstant_pipeline_layout = C_NULL, pushconstant_shader_stage_flags = 0, indirect_state_flags = 0) = IndirectCommandsLayoutTokenNV(next, token_type, stream, offset, vertex_binding_unit, vertex_dynamic_stride, pushconstant_pipeline_layout, pushconstant_shader_stage_flags, pushconstant_offset, pushconstant_size, indirect_state_flags, index_types, index_type_values)

"""

"""
IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; next = C_NULL, flags = 0) = IndirectCommandsLayoutCreateInfoNV(next, flags, pipeline_bind_point, tokens, stream_strides)

"""

"""
GeneratedCommandsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, indirect_commands_layout::IndirectCommandsLayoutNV, streams::AbstractArray, sequences_count::Integer, preprocess_buffer::Buffer, preprocess_offset::Integer, preprocess_size::Integer, sequences_count_offset::Integer, sequences_index_offset::Integer; next = C_NULL, sequences_count_buffer = C_NULL, sequences_index_buffer = C_NULL) = GeneratedCommandsInfoNV(next, pipeline_bind_point, pipeline, indirect_commands_layout, streams, sequences_count, preprocess_buffer, preprocess_offset, preprocess_size, sequences_count_buffer, sequences_count_offset, sequences_index_buffer, sequences_index_offset)

"""

"""
GeneratedCommandsMemoryRequirementsInfoNV(pipeline_bind_point::PipelineBindPoint, pipeline::Pipeline, indirect_commands_layout::IndirectCommandsLayoutNV, max_sequences_count::Integer; next = C_NULL) = GeneratedCommandsMemoryRequirementsInfoNV(next, pipeline_bind_point, pipeline, indirect_commands_layout, max_sequences_count)

"""

"""
PhysicalDeviceFeatures2(features::PhysicalDeviceFeatures; next = C_NULL) = PhysicalDeviceFeatures2(next, features)

"""

"""
PhysicalDeviceImageFormatInfo2(format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; next = C_NULL, flags = 0) = PhysicalDeviceImageFormatInfo2(next, format, type, tiling, usage, flags)

"""

"""
PhysicalDeviceSparseImageFormatInfo2(format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling; next = C_NULL) = PhysicalDeviceSparseImageFormatInfo2(next, format, type, samples, usage, tiling)

"""

"""
PresentRegionsKHR(; next = C_NULL, regions = C_NULL) = PresentRegionsKHR(next, regions)

"""

"""
PresentRegionKHR(; rectangles = C_NULL) = PresentRegionKHR(rectangles)

"""

"""
PhysicalDeviceVariablePointersFeatures(variable_pointers_storage_buffer::Bool, variable_pointers::Bool; next = C_NULL) = PhysicalDeviceVariablePointersFeatures(next, variable_pointers_storage_buffer, variable_pointers)

"""

"""
PhysicalDeviceExternalImageFormatInfo(; next = C_NULL, handle_type = 0) = PhysicalDeviceExternalImageFormatInfo(next, handle_type)

"""

"""
PhysicalDeviceExternalBufferInfo(usage::BufferUsageFlag, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL, flags = 0) = PhysicalDeviceExternalBufferInfo(next, flags, usage, handle_type)

"""

"""
ExternalMemoryImageCreateInfo(; next = C_NULL, handle_types = 0) = ExternalMemoryImageCreateInfo(next, handle_types)

"""

"""
ExternalMemoryBufferCreateInfo(; next = C_NULL, handle_types = 0) = ExternalMemoryBufferCreateInfo(next, handle_types)

"""

"""
ExportMemoryAllocateInfo(; next = C_NULL, handle_types = 0) = ExportMemoryAllocateInfo(next, handle_types)

"""

"""
ImportMemoryWin32HandleInfoKHR(; next = C_NULL, handle_type = 0, handle = C_NULL, name = C_NULL) = ImportMemoryWin32HandleInfoKHR(next, handle_type, handle, name)

"""

"""
ExportMemoryWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL) = ExportMemoryWin32HandleInfoKHR(next, attributes, dw_access, name)

"""

"""
MemoryGetWin32HandleInfoKHR(memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL) = MemoryGetWin32HandleInfoKHR(next, memory, handle_type)

"""

"""
ImportMemoryFdInfoKHR(fd::Integer; next = C_NULL, handle_type = 0) = ImportMemoryFdInfoKHR(next, handle_type, fd)

"""

"""
MemoryGetFdInfoKHR(memory::DeviceMemory, handle_type::ExternalMemoryHandleTypeFlag; next = C_NULL) = MemoryGetFdInfoKHR(next, memory, handle_type)

"""

"""
Win32KeyedMutexAcquireReleaseInfoKHR(acquire_syncs::AbstractArray, acquire_keys::AbstractArray, acquire_timeouts::AbstractArray, release_syncs::AbstractArray, release_keys::AbstractArray; next = C_NULL) = Win32KeyedMutexAcquireReleaseInfoKHR(next, acquire_syncs, acquire_keys, acquire_timeouts, release_syncs, release_keys)

"""

"""
PhysicalDeviceExternalSemaphoreInfo(handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL) = PhysicalDeviceExternalSemaphoreInfo(next, handle_type)

"""

"""
ExportSemaphoreCreateInfo(; next = C_NULL, handle_types = 0) = ExportSemaphoreCreateInfo(next, handle_types)

"""

"""
ImportSemaphoreWin32HandleInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL, flags = 0, handle = C_NULL, name = C_NULL) = ImportSemaphoreWin32HandleInfoKHR(next, semaphore, flags, handle_type, handle, name)

"""

"""
ExportSemaphoreWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL) = ExportSemaphoreWin32HandleInfoKHR(next, attributes, dw_access, name)

"""

"""
D3D12FenceSubmitInfoKHR(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL) = D3D12FenceSubmitInfoKHR(next, wait_semaphore_values, signal_semaphore_values)

"""

"""
SemaphoreGetWin32HandleInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL) = SemaphoreGetWin32HandleInfoKHR(next, semaphore, handle_type)

"""

"""
ImportSemaphoreFdInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0) = ImportSemaphoreFdInfoKHR(next, semaphore, flags, handle_type, fd)

"""

"""
SemaphoreGetFdInfoKHR(semaphore::Semaphore, handle_type::ExternalSemaphoreHandleTypeFlag; next = C_NULL) = SemaphoreGetFdInfoKHR(next, semaphore, handle_type)

"""

"""
PhysicalDeviceExternalFenceInfo(handle_type::ExternalFenceHandleTypeFlag; next = C_NULL) = PhysicalDeviceExternalFenceInfo(next, handle_type)

"""

"""
ExportFenceCreateInfo(; next = C_NULL, handle_types = 0) = ExportFenceCreateInfo(next, handle_types)

"""

"""
ImportFenceWin32HandleInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL, flags = 0, handle = C_NULL, name = C_NULL) = ImportFenceWin32HandleInfoKHR(next, fence, flags, handle_type, handle, name)

"""

"""
ExportFenceWin32HandleInfoKHR(dw_access::vk.DWORD, name::vk.LPCWSTR; next = C_NULL, attributes = C_NULL) = ExportFenceWin32HandleInfoKHR(next, attributes, dw_access, name)

"""

"""
FenceGetWin32HandleInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL) = FenceGetWin32HandleInfoKHR(next, fence, handle_type)

"""

"""
ImportFenceFdInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag, fd::Integer; next = C_NULL, flags = 0) = ImportFenceFdInfoKHR(next, fence, flags, handle_type, fd)

"""

"""
FenceGetFdInfoKHR(fence::Fence, handle_type::ExternalFenceHandleTypeFlag; next = C_NULL) = FenceGetFdInfoKHR(next, fence, handle_type)

"""

"""
PhysicalDeviceMultiviewFeatures(multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool; next = C_NULL) = PhysicalDeviceMultiviewFeatures(next, multiview, multiview_geometry_shader, multiview_tessellation_shader)

"""

"""
RenderPassMultiviewCreateInfo(view_masks::AbstractArray, view_offsets::AbstractArray, correlation_masks::AbstractArray; next = C_NULL) = RenderPassMultiviewCreateInfo(next, view_masks, view_offsets, correlation_masks)

"""

"""
DisplayPowerInfoEXT(power_state::DisplayPowerStateEXT; next = C_NULL) = DisplayPowerInfoEXT(next, power_state)

"""

"""
DeviceEventInfoEXT(device_event::DeviceEventTypeEXT; next = C_NULL) = DeviceEventInfoEXT(next, device_event)

"""

"""
DisplayEventInfoEXT(display_event::DisplayEventTypeEXT; next = C_NULL) = DisplayEventInfoEXT(next, display_event)

"""

"""
SwapchainCounterCreateInfoEXT(; next = C_NULL, surface_counters = 0) = SwapchainCounterCreateInfoEXT(next, surface_counters)

"""

"""
MemoryAllocateFlagsInfo(device_mask::Integer; next = C_NULL, flags = 0) = MemoryAllocateFlagsInfo(next, flags, device_mask)

"""

"""
BindBufferMemoryInfo(buffer::Buffer, memory::DeviceMemory, memory_offset::Integer; next = C_NULL) = BindBufferMemoryInfo(next, buffer, memory, memory_offset)

"""

"""
BindBufferMemoryDeviceGroupInfo(device_indices::AbstractArray; next = C_NULL) = BindBufferMemoryDeviceGroupInfo(next, device_indices)

"""

"""
BindImageMemoryInfo(image::Image, memory::DeviceMemory, memory_offset::Integer; next = C_NULL) = BindImageMemoryInfo(next, image, memory, memory_offset)

"""

"""
BindImageMemoryDeviceGroupInfo(device_indices::AbstractArray, split_instance_bind_regions::AbstractArray; next = C_NULL) = BindImageMemoryDeviceGroupInfo(next, device_indices, split_instance_bind_regions)

"""

"""
DeviceGroupRenderPassBeginInfo(device_mask::Integer, device_render_areas::AbstractArray; next = C_NULL) = DeviceGroupRenderPassBeginInfo(next, device_mask, device_render_areas)

"""

"""
DeviceGroupCommandBufferBeginInfo(device_mask::Integer; next = C_NULL) = DeviceGroupCommandBufferBeginInfo(next, device_mask)

"""

"""
DeviceGroupSubmitInfo(wait_semaphore_device_indices::AbstractArray, command_buffer_device_masks::AbstractArray, signal_semaphore_device_indices::AbstractArray; next = C_NULL) = DeviceGroupSubmitInfo(next, wait_semaphore_device_indices, command_buffer_device_masks, signal_semaphore_device_indices)

"""

"""
DeviceGroupBindSparseInfo(resource_device_index::Integer, memory_device_index::Integer; next = C_NULL) = DeviceGroupBindSparseInfo(next, resource_device_index, memory_device_index)

"""

"""
ImageSwapchainCreateInfoKHR(; next = C_NULL, swapchain = C_NULL) = ImageSwapchainCreateInfoKHR(next, swapchain)

"""

"""
BindImageMemorySwapchainInfoKHR(swapchain::SwapchainKHR, image_index::Integer; next = C_NULL) = BindImageMemorySwapchainInfoKHR(next, swapchain, image_index)

"""

"""
AcquireNextImageInfoKHR(swapchain::SwapchainKHR, timeout::Integer, device_mask::Integer; next = C_NULL, semaphore = C_NULL, fence = C_NULL) = AcquireNextImageInfoKHR(next, swapchain, timeout, semaphore, fence, device_mask)

"""

"""
DeviceGroupPresentInfoKHR(device_masks::AbstractArray, mode::DeviceGroupPresentModeFlagKHR; next = C_NULL) = DeviceGroupPresentInfoKHR(next, device_masks, mode)

"""

"""
DeviceGroupDeviceCreateInfo(physical_devices::AbstractArray; next = C_NULL) = DeviceGroupDeviceCreateInfo(next, physical_devices)

"""

"""
DeviceGroupSwapchainCreateInfoKHR(modes::DeviceGroupPresentModeFlagKHR; next = C_NULL) = DeviceGroupSwapchainCreateInfoKHR(next, modes)

"""

"""
DescriptorUpdateTemplateCreateInfo(descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout::DescriptorSetLayout, pipeline_bind_point::PipelineBindPoint, pipeline_layout::PipelineLayout, set::Integer; next = C_NULL, flags = 0) = DescriptorUpdateTemplateCreateInfo(next, flags, descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set)

"""

"""
HdrMetadataEXT(display_primary_red::XYColorEXT, display_primary_green::XYColorEXT, display_primary_blue::XYColorEXT, white_point::XYColorEXT, max_luminance::Real, min_luminance::Real, max_content_light_level::Real, max_frame_average_light_level::Real; next = C_NULL) = HdrMetadataEXT(next, display_primary_red, display_primary_green, display_primary_blue, white_point, max_luminance, min_luminance, max_content_light_level, max_frame_average_light_level)

"""

"""
SwapchainDisplayNativeHdrCreateInfoAMD(local_dimming_enable::Bool; next = C_NULL) = SwapchainDisplayNativeHdrCreateInfoAMD(next, local_dimming_enable)

"""

"""
PresentTimesInfoGOOGLE(; next = C_NULL, times = C_NULL) = PresentTimesInfoGOOGLE(next, times)

"""

"""
PipelineViewportWScalingStateCreateInfoNV(viewport_w_scaling_enable::Bool; next = C_NULL, viewport_w_scalings = C_NULL) = PipelineViewportWScalingStateCreateInfoNV(next, viewport_w_scaling_enable, viewport_w_scalings)

"""

"""
PipelineViewportSwizzleStateCreateInfoNV(viewport_swizzles::AbstractArray; next = C_NULL, flags = 0) = PipelineViewportSwizzleStateCreateInfoNV(next, flags, viewport_swizzles)

"""

"""
PipelineDiscardRectangleStateCreateInfoEXT(discard_rectangle_mode::DiscardRectangleModeEXT, discard_rectangles::AbstractArray; next = C_NULL, flags = 0) = PipelineDiscardRectangleStateCreateInfoEXT(next, flags, discard_rectangle_mode, discard_rectangles)

"""

"""
RenderPassInputAttachmentAspectCreateInfo(aspect_references::AbstractArray; next = C_NULL) = RenderPassInputAttachmentAspectCreateInfo(next, aspect_references)

"""

"""
PhysicalDeviceSurfaceInfo2KHR(surface::SurfaceKHR; next = C_NULL) = PhysicalDeviceSurfaceInfo2KHR(next, surface)

"""

"""
DisplayPlaneInfo2KHR(mode::DisplayModeKHR, plane_index::Integer; next = C_NULL) = DisplayPlaneInfo2KHR(next, mode, plane_index)

"""

"""
PhysicalDevice16BitStorageFeatures(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool; next = C_NULL) = PhysicalDevice16BitStorageFeatures(next, storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16)

"""

"""
PhysicalDeviceShaderSubgroupExtendedTypesFeatures(shader_subgroup_extended_types::Bool; next = C_NULL) = PhysicalDeviceShaderSubgroupExtendedTypesFeatures(next, shader_subgroup_extended_types)

"""

"""
BufferMemoryRequirementsInfo2(buffer::Buffer; next = C_NULL) = BufferMemoryRequirementsInfo2(next, buffer)

"""

"""
ImageMemoryRequirementsInfo2(image::Image; next = C_NULL) = ImageMemoryRequirementsInfo2(next, image)

"""

"""
ImageSparseMemoryRequirementsInfo2(image::Image; next = C_NULL) = ImageSparseMemoryRequirementsInfo2(next, image)

"""

"""
MemoryDedicatedAllocateInfo(; next = C_NULL, image = C_NULL, buffer = C_NULL) = MemoryDedicatedAllocateInfo(next, image, buffer)

"""

"""
ImageViewUsageCreateInfo(usage::ImageUsageFlag; next = C_NULL) = ImageViewUsageCreateInfo(next, usage)

"""

"""
PipelineTessellationDomainOriginStateCreateInfo(domain_origin::TessellationDomainOrigin; next = C_NULL) = PipelineTessellationDomainOriginStateCreateInfo(next, domain_origin)

"""

"""
SamplerYcbcrConversionInfo(conversion::SamplerYcbcrConversion; next = C_NULL) = SamplerYcbcrConversionInfo(next, conversion)

"""

"""
SamplerYcbcrConversionCreateInfo(format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; next = C_NULL) = SamplerYcbcrConversionCreateInfo(next, format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction)

"""

"""
BindImagePlaneMemoryInfo(plane_aspect::ImageAspectFlag; next = C_NULL) = BindImagePlaneMemoryInfo(next, plane_aspect)

"""

"""
ImagePlaneMemoryRequirementsInfo(plane_aspect::ImageAspectFlag; next = C_NULL) = ImagePlaneMemoryRequirementsInfo(next, plane_aspect)

"""

"""
PhysicalDeviceSamplerYcbcrConversionFeatures(sampler_ycbcr_conversion::Bool; next = C_NULL) = PhysicalDeviceSamplerYcbcrConversionFeatures(next, sampler_ycbcr_conversion)

"""

"""
ConditionalRenderingBeginInfoEXT(buffer::Buffer, offset::Integer; next = C_NULL, flags = 0) = ConditionalRenderingBeginInfoEXT(next, buffer, offset, flags)

"""

"""
ProtectedSubmitInfo(protected_submit::Bool; next = C_NULL) = ProtectedSubmitInfo(next, protected_submit)

"""

"""
PhysicalDeviceProtectedMemoryFeatures(protected_memory::Bool; next = C_NULL) = PhysicalDeviceProtectedMemoryFeatures(next, protected_memory)

"""

"""
DeviceQueueInfo2(queue_family_index::Integer, queue_index::Integer; next = C_NULL, flags = 0) = DeviceQueueInfo2(next, flags, queue_family_index, queue_index)

"""

"""
PipelineCoverageToColorStateCreateInfoNV(coverage_to_color_enable::Bool; next = C_NULL, flags = 0, coverage_to_color_location = 0) = PipelineCoverageToColorStateCreateInfoNV(next, flags, coverage_to_color_enable, coverage_to_color_location)

"""

"""
SampleLocationsInfoEXT(sample_locations_per_pixel::SampleCountFlag, sample_location_grid_size::Extent2D, sample_locations::AbstractArray; next = C_NULL) = SampleLocationsInfoEXT(next, sample_locations_per_pixel, sample_location_grid_size, sample_locations)

"""

"""
RenderPassSampleLocationsBeginInfoEXT(attachment_initial_sample_locations::AbstractArray, post_subpass_sample_locations::AbstractArray; next = C_NULL) = RenderPassSampleLocationsBeginInfoEXT(next, attachment_initial_sample_locations, post_subpass_sample_locations)

"""

"""
PipelineSampleLocationsStateCreateInfoEXT(sample_locations_enable::Bool, sample_locations_info::SampleLocationsInfoEXT; next = C_NULL) = PipelineSampleLocationsStateCreateInfoEXT(next, sample_locations_enable, sample_locations_info)

"""

"""
SamplerReductionModeCreateInfo(reduction_mode::SamplerReductionMode; next = C_NULL) = SamplerReductionModeCreateInfo(next, reduction_mode)

"""

"""
PhysicalDeviceBlendOperationAdvancedFeaturesEXT(advanced_blend_coherent_operations::Bool; next = C_NULL) = PhysicalDeviceBlendOperationAdvancedFeaturesEXT(next, advanced_blend_coherent_operations)

"""

"""
PipelineColorBlendAdvancedStateCreateInfoEXT(src_premultiplied::Bool, dst_premultiplied::Bool, blend_overlap::BlendOverlapEXT; next = C_NULL) = PipelineColorBlendAdvancedStateCreateInfoEXT(next, src_premultiplied, dst_premultiplied, blend_overlap)

"""

"""
PhysicalDeviceInlineUniformBlockFeaturesEXT(inline_uniform_block::Bool, descriptor_binding_inline_uniform_block_update_after_bind::Bool; next = C_NULL) = PhysicalDeviceInlineUniformBlockFeaturesEXT(next, inline_uniform_block, descriptor_binding_inline_uniform_block_update_after_bind)

"""

"""
WriteDescriptorSetInlineUniformBlockEXT(data_size::Integer, data::Ptr{Cvoid}; next = C_NULL) = WriteDescriptorSetInlineUniformBlockEXT(next, data_size, data)

"""

"""
DescriptorPoolInlineUniformBlockCreateInfoEXT(max_inline_uniform_block_bindings::Integer; next = C_NULL) = DescriptorPoolInlineUniformBlockCreateInfoEXT(next, max_inline_uniform_block_bindings)

"""

"""
PipelineCoverageModulationStateCreateInfoNV(coverage_modulation_mode::CoverageModulationModeNV, coverage_modulation_table_enable::Bool; next = C_NULL, flags = 0, coverage_modulation_table = C_NULL) = PipelineCoverageModulationStateCreateInfoNV(next, flags, coverage_modulation_mode, coverage_modulation_table_enable, coverage_modulation_table)

"""

"""
ImageFormatListCreateInfo(view_formats::AbstractArray; next = C_NULL) = ImageFormatListCreateInfo(next, view_formats)

"""

"""
ValidationCacheCreateInfoEXT(initial_data::Ptr{Cvoid}; next = C_NULL, flags = 0, initial_data_size = C_NULL) = ValidationCacheCreateInfoEXT(next, flags, initial_data_size, initial_data)

"""

"""
ShaderModuleValidationCacheCreateInfoEXT(validation_cache::ValidationCacheEXT; next = C_NULL) = ShaderModuleValidationCacheCreateInfoEXT(next, validation_cache)

"""

"""
PhysicalDeviceShaderDrawParametersFeatures(shader_draw_parameters::Bool; next = C_NULL) = PhysicalDeviceShaderDrawParametersFeatures(next, shader_draw_parameters)

"""

"""
PhysicalDeviceShaderFloat16Int8Features(shader_float_16::Bool, shader_int_8::Bool; next = C_NULL) = PhysicalDeviceShaderFloat16Int8Features(next, shader_float_16, shader_int_8)

"""

"""
PhysicalDeviceHostQueryResetFeatures(host_query_reset::Bool; next = C_NULL) = PhysicalDeviceHostQueryResetFeatures(next, host_query_reset)

"""

"""
DeviceQueueGlobalPriorityCreateInfoEXT(global_priority::QueueGlobalPriorityEXT; next = C_NULL) = DeviceQueueGlobalPriorityCreateInfoEXT(next, global_priority)

"""

"""
DebugUtilsObjectNameInfoEXT(object_type::ObjectType, object_handle::Integer; next = C_NULL, object_name = "") = DebugUtilsObjectNameInfoEXT(next, object_type, object_handle, object_name)

"""

"""
DebugUtilsObjectTagInfoEXT(object_type::ObjectType, object_handle::Integer, tag_name::Integer, tag_size::Integer, tag::Ptr{Cvoid}; next = C_NULL) = DebugUtilsObjectTagInfoEXT(next, object_type, object_handle, tag_name, tag_size, tag)

"""

"""
DebugUtilsLabelEXT(label_name::AbstractString, color::NTuple{4, Float32}; next = C_NULL) = DebugUtilsLabelEXT(next, label_name, color)

"""

"""
DebugUtilsMessengerCreateInfoEXT(message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; next = C_NULL, flags = 0, user_data = C_NULL) = DebugUtilsMessengerCreateInfoEXT(next, flags, message_severity, message_type, pfn_user_callback, user_data)

"""

"""
DebugUtilsMessengerCallbackDataEXT(message_id_number::Integer, message::AbstractString, queue_labels::AbstractArray, cmd_buf_labels::AbstractArray, objects::AbstractArray; next = C_NULL, flags = 0, message_id_name = "") = DebugUtilsMessengerCallbackDataEXT(next, flags, message_id_name, message_id_number, message, queue_labels, cmd_buf_labels, objects)

"""

"""
PhysicalDeviceDeviceMemoryReportFeaturesEXT(device_memory_report::Bool; next = C_NULL) = PhysicalDeviceDeviceMemoryReportFeaturesEXT(next, device_memory_report)

"""

"""
DeviceDeviceMemoryReportCreateInfoEXT(flags::Integer, pfn_user_callback::FunctionPtr, user_data::Ptr{Cvoid}; next = C_NULL) = DeviceDeviceMemoryReportCreateInfoEXT(next, flags, pfn_user_callback, user_data)

"""

"""
ImportMemoryHostPointerInfoEXT(handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}; next = C_NULL) = ImportMemoryHostPointerInfoEXT(next, handle_type, host_pointer)

"""

"""
CalibratedTimestampInfoEXT(time_domain::TimeDomainEXT; next = C_NULL) = CalibratedTimestampInfoEXT(next, time_domain)

"""

"""
PipelineRasterizationConservativeStateCreateInfoEXT(conservative_rasterization_mode::ConservativeRasterizationModeEXT, extra_primitive_overestimation_size::Real; next = C_NULL, flags = 0) = PipelineRasterizationConservativeStateCreateInfoEXT(next, flags, conservative_rasterization_mode, extra_primitive_overestimation_size)

"""

"""
PhysicalDeviceDescriptorIndexingFeatures(shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool; next = C_NULL) = PhysicalDeviceDescriptorIndexingFeatures(next, shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array)

"""

"""
DescriptorSetLayoutBindingFlagsCreateInfo(binding_flags::AbstractArray; next = C_NULL) = DescriptorSetLayoutBindingFlagsCreateInfo(next, binding_flags)

"""

"""
DescriptorSetVariableDescriptorCountAllocateInfo(descriptor_counts::AbstractArray; next = C_NULL) = DescriptorSetVariableDescriptorCountAllocateInfo(next, descriptor_counts)

"""

"""
AttachmentDescription2(format::Format, samples::SampleCountFlag, load_op::AttachmentLoadOp, store_op::AttachmentStoreOp, stencil_load_op::AttachmentLoadOp, stencil_store_op::AttachmentStoreOp, initial_layout::ImageLayout, final_layout::ImageLayout; next = C_NULL, flags = 0) = AttachmentDescription2(next, flags, format, samples, load_op, store_op, stencil_load_op, stencil_store_op, initial_layout, final_layout)

"""

"""
AttachmentReference2(attachment::Integer, layout::ImageLayout, aspect_mask::ImageAspectFlag; next = C_NULL) = AttachmentReference2(next, attachment, layout, aspect_mask)

"""

"""
SubpassDescription2(pipeline_bind_point::PipelineBindPoint, view_mask::Integer, input_attachments::AbstractArray, color_attachments::AbstractArray, preserve_attachments::AbstractArray; next = C_NULL, flags = 0, resolve_attachments = C_NULL, depth_stencil_attachment = C_NULL) = SubpassDescription2(next, flags, pipeline_bind_point, view_mask, input_attachments, color_attachments, resolve_attachments, depth_stencil_attachment, preserve_attachments)

"""

"""
SubpassDependency2(src_subpass::Integer, dst_subpass::Integer, view_offset::Integer; next = C_NULL, src_stage_mask = 0, dst_stage_mask = 0, src_access_mask = 0, dst_access_mask = 0, dependency_flags = 0) = SubpassDependency2(next, src_subpass, dst_subpass, src_stage_mask, dst_stage_mask, src_access_mask, dst_access_mask, dependency_flags, view_offset)

"""

"""
RenderPassCreateInfo2(attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; next = C_NULL, flags = 0) = RenderPassCreateInfo2(next, flags, attachments, subpasses, dependencies, correlated_view_masks)

"""

"""
SubpassBeginInfo(contents::SubpassContents; next = C_NULL) = SubpassBeginInfo(next, contents)

"""

"""
SubpassEndInfo(; next = C_NULL) = SubpassEndInfo(next)

"""

"""
PhysicalDeviceTimelineSemaphoreFeatures(timeline_semaphore::Bool; next = C_NULL) = PhysicalDeviceTimelineSemaphoreFeatures(next, timeline_semaphore)

"""

"""
SemaphoreTypeCreateInfo(semaphore_type::SemaphoreType, initial_value::Integer; next = C_NULL) = SemaphoreTypeCreateInfo(next, semaphore_type, initial_value)

"""

"""
TimelineSemaphoreSubmitInfo(; next = C_NULL, wait_semaphore_values = C_NULL, signal_semaphore_values = C_NULL) = TimelineSemaphoreSubmitInfo(next, wait_semaphore_values, signal_semaphore_values)

"""

"""
SemaphoreWaitInfo(semaphores::AbstractArray, values::AbstractArray; next = C_NULL, flags = 0) = SemaphoreWaitInfo(next, flags, semaphores, values)

"""

"""
SemaphoreSignalInfo(semaphore::Semaphore, value::Integer; next = C_NULL) = SemaphoreSignalInfo(next, semaphore, value)

"""

"""
PipelineVertexInputDivisorStateCreateInfoEXT(vertex_binding_divisors::AbstractArray; next = C_NULL) = PipelineVertexInputDivisorStateCreateInfoEXT(next, vertex_binding_divisors)

"""

"""
CommandBufferInheritanceConditionalRenderingInfoEXT(conditional_rendering_enable::Bool; next = C_NULL) = CommandBufferInheritanceConditionalRenderingInfoEXT(next, conditional_rendering_enable)

"""

"""
PhysicalDevice8BitStorageFeatures(storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool; next = C_NULL) = PhysicalDevice8BitStorageFeatures(next, storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8)

"""

"""
PhysicalDeviceConditionalRenderingFeaturesEXT(conditional_rendering::Bool, inherited_conditional_rendering::Bool; next = C_NULL) = PhysicalDeviceConditionalRenderingFeaturesEXT(next, conditional_rendering, inherited_conditional_rendering)

"""

"""
PhysicalDeviceVulkanMemoryModelFeatures(vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool; next = C_NULL) = PhysicalDeviceVulkanMemoryModelFeatures(next, vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains)

"""

"""
PhysicalDeviceShaderAtomicInt64Features(shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool; next = C_NULL) = PhysicalDeviceShaderAtomicInt64Features(next, shader_buffer_int_64_atomics, shader_shared_int_64_atomics)

"""

"""
PhysicalDeviceShaderAtomicFloatFeaturesEXT(shader_buffer_float_32_atomics::Bool, shader_buffer_float_32_atomic_add::Bool, shader_buffer_float_64_atomics::Bool, shader_buffer_float_64_atomic_add::Bool, shader_shared_float_32_atomics::Bool, shader_shared_float_32_atomic_add::Bool, shader_shared_float_64_atomics::Bool, shader_shared_float_64_atomic_add::Bool, shader_image_float_32_atomics::Bool, shader_image_float_32_atomic_add::Bool, sparse_image_float_32_atomics::Bool, sparse_image_float_32_atomic_add::Bool; next = C_NULL) = PhysicalDeviceShaderAtomicFloatFeaturesEXT(next, shader_buffer_float_32_atomics, shader_buffer_float_32_atomic_add, shader_buffer_float_64_atomics, shader_buffer_float_64_atomic_add, shader_shared_float_32_atomics, shader_shared_float_32_atomic_add, shader_shared_float_64_atomics, shader_shared_float_64_atomic_add, shader_image_float_32_atomics, shader_image_float_32_atomic_add, sparse_image_float_32_atomics, sparse_image_float_32_atomic_add)

"""

"""
PhysicalDeviceVertexAttributeDivisorFeaturesEXT(vertex_attribute_instance_rate_divisor::Bool, vertex_attribute_instance_rate_zero_divisor::Bool; next = C_NULL) = PhysicalDeviceVertexAttributeDivisorFeaturesEXT(next, vertex_attribute_instance_rate_divisor, vertex_attribute_instance_rate_zero_divisor)

"""

"""
SubpassDescriptionDepthStencilResolve(depth_resolve_mode::ResolveModeFlag, stencil_resolve_mode::ResolveModeFlag; next = C_NULL, depth_stencil_resolve_attachment = C_NULL) = SubpassDescriptionDepthStencilResolve(next, depth_resolve_mode, stencil_resolve_mode, depth_stencil_resolve_attachment)

"""

"""
ImageViewASTCDecodeModeEXT(decode_mode::Format; next = C_NULL) = ImageViewASTCDecodeModeEXT(next, decode_mode)

"""

"""
PhysicalDeviceASTCDecodeFeaturesEXT(decode_mode_shared_exponent::Bool; next = C_NULL) = PhysicalDeviceASTCDecodeFeaturesEXT(next, decode_mode_shared_exponent)

"""

"""
PhysicalDeviceTransformFeedbackFeaturesEXT(transform_feedback::Bool, geometry_streams::Bool; next = C_NULL) = PhysicalDeviceTransformFeedbackFeaturesEXT(next, transform_feedback, geometry_streams)

"""

"""
PipelineRasterizationStateStreamCreateInfoEXT(rasterization_stream::Integer; next = C_NULL, flags = 0) = PipelineRasterizationStateStreamCreateInfoEXT(next, flags, rasterization_stream)

"""

"""
PhysicalDeviceRepresentativeFragmentTestFeaturesNV(representative_fragment_test::Bool; next = C_NULL) = PhysicalDeviceRepresentativeFragmentTestFeaturesNV(next, representative_fragment_test)

"""

"""
PipelineRepresentativeFragmentTestStateCreateInfoNV(representative_fragment_test_enable::Bool; next = C_NULL) = PipelineRepresentativeFragmentTestStateCreateInfoNV(next, representative_fragment_test_enable)

"""

"""
PhysicalDeviceExclusiveScissorFeaturesNV(exclusive_scissor::Bool; next = C_NULL) = PhysicalDeviceExclusiveScissorFeaturesNV(next, exclusive_scissor)

"""

"""
PipelineViewportExclusiveScissorStateCreateInfoNV(exclusive_scissors::AbstractArray; next = C_NULL) = PipelineViewportExclusiveScissorStateCreateInfoNV(next, exclusive_scissors)

"""

"""
PhysicalDeviceCornerSampledImageFeaturesNV(corner_sampled_image::Bool; next = C_NULL) = PhysicalDeviceCornerSampledImageFeaturesNV(next, corner_sampled_image)

"""

"""
PhysicalDeviceComputeShaderDerivativesFeaturesNV(compute_derivative_group_quads::Bool, compute_derivative_group_linear::Bool; next = C_NULL) = PhysicalDeviceComputeShaderDerivativesFeaturesNV(next, compute_derivative_group_quads, compute_derivative_group_linear)

"""

"""
PhysicalDeviceFragmentShaderBarycentricFeaturesNV(fragment_shader_barycentric::Bool; next = C_NULL) = PhysicalDeviceFragmentShaderBarycentricFeaturesNV(next, fragment_shader_barycentric)

"""

"""
PhysicalDeviceShaderImageFootprintFeaturesNV(image_footprint::Bool; next = C_NULL) = PhysicalDeviceShaderImageFootprintFeaturesNV(next, image_footprint)

"""

"""
PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(dedicated_allocation_image_aliasing::Bool; next = C_NULL) = PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(next, dedicated_allocation_image_aliasing)

"""

"""
PipelineViewportShadingRateImageStateCreateInfoNV(shading_rate_image_enable::Bool, shading_rate_palettes::AbstractArray; next = C_NULL) = PipelineViewportShadingRateImageStateCreateInfoNV(next, shading_rate_image_enable, shading_rate_palettes)

"""

"""
PhysicalDeviceShadingRateImageFeaturesNV(shading_rate_image::Bool, shading_rate_coarse_sample_order::Bool; next = C_NULL) = PhysicalDeviceShadingRateImageFeaturesNV(next, shading_rate_image, shading_rate_coarse_sample_order)

"""

"""
PipelineViewportCoarseSampleOrderStateCreateInfoNV(sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray; next = C_NULL) = PipelineViewportCoarseSampleOrderStateCreateInfoNV(next, sample_order_type, custom_sample_orders)

"""

"""
PhysicalDeviceMeshShaderFeaturesNV(task_shader::Bool, mesh_shader::Bool; next = C_NULL) = PhysicalDeviceMeshShaderFeaturesNV(next, task_shader, mesh_shader)

"""

"""
RayTracingShaderGroupCreateInfoNV(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL) = RayTracingShaderGroupCreateInfoNV(next, type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader)

"""

"""
RayTracingShaderGroupCreateInfoKHR(type::RayTracingShaderGroupTypeKHR, general_shader::Integer, closest_hit_shader::Integer, any_hit_shader::Integer, intersection_shader::Integer; next = C_NULL, shader_group_capture_replay_handle = C_NULL) = RayTracingShaderGroupCreateInfoKHR(next, type, general_shader, closest_hit_shader, any_hit_shader, intersection_shader, shader_group_capture_replay_handle)

"""

"""
RayTracingPipelineCreateInfoNV(stages::AbstractArray, groups::AbstractArray, max_recursion_depth::Integer, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, base_pipeline_handle = C_NULL) = RayTracingPipelineCreateInfoNV(next, flags, stages, groups, max_recursion_depth, layout, base_pipeline_handle, base_pipeline_index)

"""

"""
RayTracingPipelineCreateInfoKHR(stages::AbstractArray, groups::AbstractArray, max_pipeline_ray_recursion_depth::Integer, layout::PipelineLayout, base_pipeline_index::Integer; next = C_NULL, flags = 0, library_info = C_NULL, library_interface = C_NULL, dynamic_state = C_NULL, base_pipeline_handle = C_NULL) = RayTracingPipelineCreateInfoKHR(next, flags, stages, groups, max_pipeline_ray_recursion_depth, library_info, library_interface, dynamic_state, layout, base_pipeline_handle, base_pipeline_index)

"""

"""
GeometryTrianglesNV(vertex_offset::Integer, vertex_count::Integer, vertex_stride::Integer, vertex_format::Format, index_offset::Integer, index_count::Integer, index_type::IndexType, transform_offset::Integer; next = C_NULL, vertex_data = C_NULL, index_data = C_NULL, transform_data = C_NULL) = GeometryTrianglesNV(next, vertex_data, vertex_offset, vertex_count, vertex_stride, vertex_format, index_data, index_offset, index_count, index_type, transform_data, transform_offset)

"""

"""
GeometryAABBNV(num_aab_bs::Integer, stride::Integer, offset::Integer; next = C_NULL, aabb_data = C_NULL) = GeometryAABBNV(next, aabb_data, num_aab_bs, stride, offset)

"""

"""
GeometryNV(geometry_type::GeometryTypeKHR, geometry::GeometryDataNV; next = C_NULL, flags = 0) = GeometryNV(next, geometry_type, geometry, flags)

"""

"""
AccelerationStructureInfoNV(type::VkAccelerationStructureTypeNV, geometries::AbstractArray; next = C_NULL, flags = C_NULL, instance_count = 0) = AccelerationStructureInfoNV(next, type, flags, instance_count, geometries)

"""

"""
AccelerationStructureCreateInfoNV(compacted_size::Integer, info::AccelerationStructureInfoNV; next = C_NULL) = AccelerationStructureCreateInfoNV(next, compacted_size, info)

"""

"""
BindAccelerationStructureMemoryInfoNV(acceleration_structure::AccelerationStructureNV, memory::DeviceMemory, memory_offset::Integer, device_indices::AbstractArray; next = C_NULL) = BindAccelerationStructureMemoryInfoNV(next, acceleration_structure, memory, memory_offset, device_indices)

"""

"""
WriteDescriptorSetAccelerationStructureKHR(acceleration_structures::AbstractArray; next = C_NULL) = WriteDescriptorSetAccelerationStructureKHR(next, acceleration_structures)

"""

"""
WriteDescriptorSetAccelerationStructureNV(acceleration_structures::AbstractArray; next = C_NULL) = WriteDescriptorSetAccelerationStructureNV(next, acceleration_structures)

"""

"""
AccelerationStructureMemoryRequirementsInfoNV(type::AccelerationStructureMemoryRequirementsTypeNV, acceleration_structure::AccelerationStructureNV; next = C_NULL) = AccelerationStructureMemoryRequirementsInfoNV(next, type, acceleration_structure)

"""

"""
PhysicalDeviceAccelerationStructureFeaturesKHR(acceleration_structure::Bool, acceleration_structure_capture_replay::Bool, acceleration_structure_indirect_build::Bool, acceleration_structure_host_commands::Bool, descriptor_binding_acceleration_structure_update_after_bind::Bool; next = C_NULL) = PhysicalDeviceAccelerationStructureFeaturesKHR(next, acceleration_structure, acceleration_structure_capture_replay, acceleration_structure_indirect_build, acceleration_structure_host_commands, descriptor_binding_acceleration_structure_update_after_bind)

"""

"""
PhysicalDeviceRayTracingPipelineFeaturesKHR(ray_tracing_pipeline::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay::Bool, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed::Bool, ray_tracing_pipeline_trace_rays_indirect::Bool, ray_traversal_primitive_culling::Bool; next = C_NULL) = PhysicalDeviceRayTracingPipelineFeaturesKHR(next, ray_tracing_pipeline, ray_tracing_pipeline_shader_group_handle_capture_replay, ray_tracing_pipeline_shader_group_handle_capture_replay_mixed, ray_tracing_pipeline_trace_rays_indirect, ray_traversal_primitive_culling)

"""

"""
PhysicalDeviceRayQueryFeaturesKHR(ray_query::Bool; next = C_NULL) = PhysicalDeviceRayQueryFeaturesKHR(next, ray_query)

"""

"""
StridedDeviceAddressRegionKHR(stride::Integer, size::Integer; device_address = 0) = StridedDeviceAddressRegionKHR(device_address, stride, size)

"""

"""
PhysicalDeviceImageDrmFormatModifierInfoEXT(drm_format_modifier::Integer, sharing_mode::SharingMode, queue_family_indices::AbstractArray; next = C_NULL) = PhysicalDeviceImageDrmFormatModifierInfoEXT(next, drm_format_modifier, sharing_mode, queue_family_indices)

"""

"""
ImageDrmFormatModifierListCreateInfoEXT(drm_format_modifiers::AbstractArray; next = C_NULL) = ImageDrmFormatModifierListCreateInfoEXT(next, drm_format_modifiers)

"""

"""
ImageDrmFormatModifierExplicitCreateInfoEXT(drm_format_modifier::Integer, plane_layouts::AbstractArray; next = C_NULL) = ImageDrmFormatModifierExplicitCreateInfoEXT(next, drm_format_modifier, plane_layouts)

"""

"""
ImageStencilUsageCreateInfo(stencil_usage::ImageUsageFlag; next = C_NULL) = ImageStencilUsageCreateInfo(next, stencil_usage)

"""

"""
DeviceMemoryOverallocationCreateInfoAMD(overallocation_behavior::MemoryOverallocationBehaviorAMD; next = C_NULL) = DeviceMemoryOverallocationCreateInfoAMD(next, overallocation_behavior)

"""

"""
PhysicalDeviceFragmentDensityMapFeaturesEXT(fragment_density_map::Bool, fragment_density_map_dynamic::Bool, fragment_density_map_non_subsampled_images::Bool; next = C_NULL) = PhysicalDeviceFragmentDensityMapFeaturesEXT(next, fragment_density_map, fragment_density_map_dynamic, fragment_density_map_non_subsampled_images)

"""

"""
PhysicalDeviceFragmentDensityMap2FeaturesEXT(fragment_density_map_deferred::Bool; next = C_NULL) = PhysicalDeviceFragmentDensityMap2FeaturesEXT(next, fragment_density_map_deferred)

"""

"""
RenderPassFragmentDensityMapCreateInfoEXT(fragment_density_map_attachment::AttachmentReference; next = C_NULL) = RenderPassFragmentDensityMapCreateInfoEXT(next, fragment_density_map_attachment)

"""

"""
PhysicalDeviceScalarBlockLayoutFeatures(scalar_block_layout::Bool; next = C_NULL) = PhysicalDeviceScalarBlockLayoutFeatures(next, scalar_block_layout)

"""

"""
SurfaceProtectedCapabilitiesKHR(supports_protected::Bool; next = C_NULL) = SurfaceProtectedCapabilitiesKHR(next, supports_protected)

"""

"""
PhysicalDeviceUniformBufferStandardLayoutFeatures(uniform_buffer_standard_layout::Bool; next = C_NULL) = PhysicalDeviceUniformBufferStandardLayoutFeatures(next, uniform_buffer_standard_layout)

"""

"""
PhysicalDeviceDepthClipEnableFeaturesEXT(depth_clip_enable::Bool; next = C_NULL) = PhysicalDeviceDepthClipEnableFeaturesEXT(next, depth_clip_enable)

"""

"""
PipelineRasterizationDepthClipStateCreateInfoEXT(depth_clip_enable::Bool; next = C_NULL, flags = 0) = PipelineRasterizationDepthClipStateCreateInfoEXT(next, flags, depth_clip_enable)

"""

"""
PhysicalDeviceMemoryPriorityFeaturesEXT(memory_priority::Bool; next = C_NULL) = PhysicalDeviceMemoryPriorityFeaturesEXT(next, memory_priority)

"""

"""
MemoryPriorityAllocateInfoEXT(priority::Real; next = C_NULL) = MemoryPriorityAllocateInfoEXT(next, priority)

"""

"""
PhysicalDeviceBufferDeviceAddressFeatures(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL) = PhysicalDeviceBufferDeviceAddressFeatures(next, buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)

"""

"""
PhysicalDeviceBufferDeviceAddressFeaturesEXT(buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool; next = C_NULL) = PhysicalDeviceBufferDeviceAddressFeaturesEXT(next, buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device)

"""

"""
BufferDeviceAddressInfo(buffer::Buffer; next = C_NULL) = BufferDeviceAddressInfo(next, buffer)

"""

"""
BufferOpaqueCaptureAddressCreateInfo(opaque_capture_address::Integer; next = C_NULL) = BufferOpaqueCaptureAddressCreateInfo(next, opaque_capture_address)

"""

"""
BufferDeviceAddressCreateInfoEXT(device_address::Integer; next = C_NULL) = BufferDeviceAddressCreateInfoEXT(next, device_address)

"""

"""
PhysicalDeviceImageViewImageFormatInfoEXT(image_view_type::ImageViewType; next = C_NULL) = PhysicalDeviceImageViewImageFormatInfoEXT(next, image_view_type)

"""

"""
PhysicalDeviceImagelessFramebufferFeatures(imageless_framebuffer::Bool; next = C_NULL) = PhysicalDeviceImagelessFramebufferFeatures(next, imageless_framebuffer)

"""

"""
FramebufferAttachmentsCreateInfo(attachment_image_infos::AbstractArray; next = C_NULL) = FramebufferAttachmentsCreateInfo(next, attachment_image_infos)

"""

"""
FramebufferAttachmentImageInfo(usage::ImageUsageFlag, width::Integer, height::Integer, layer_count::Integer, view_formats::AbstractArray; next = C_NULL, flags = 0) = FramebufferAttachmentImageInfo(next, flags, usage, width, height, layer_count, view_formats)

"""

"""
RenderPassAttachmentBeginInfo(attachments::AbstractArray; next = C_NULL) = RenderPassAttachmentBeginInfo(next, attachments)

"""

"""
PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(texture_compression_astc_hdr::Bool; next = C_NULL) = PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(next, texture_compression_astc_hdr)

"""

"""
PhysicalDeviceCooperativeMatrixFeaturesNV(cooperative_matrix::Bool, cooperative_matrix_robust_buffer_access::Bool; next = C_NULL) = PhysicalDeviceCooperativeMatrixFeaturesNV(next, cooperative_matrix, cooperative_matrix_robust_buffer_access)

"""

"""
CooperativeMatrixPropertiesNV(m_size::Integer, n_size::Integer, k_size::Integer, a_type::ComponentTypeNV, b_type::ComponentTypeNV, c_type::ComponentTypeNV, d_type::ComponentTypeNV, scope::ScopeNV; next = C_NULL) = CooperativeMatrixPropertiesNV(next, m_size, n_size, k_size, a_type, b_type, c_type, d_type, scope)

"""

"""
PhysicalDeviceYcbcrImageArraysFeaturesEXT(ycbcr_image_arrays::Bool; next = C_NULL) = PhysicalDeviceYcbcrImageArraysFeaturesEXT(next, ycbcr_image_arrays)

"""

"""
ImageViewHandleInfoNVX(image_view::ImageView, descriptor_type::DescriptorType; next = C_NULL, sampler = C_NULL) = ImageViewHandleInfoNVX(next, image_view, descriptor_type, sampler)

"""

"""
PipelineCreationFeedbackCreateInfoEXT(pipeline_creation_feedback::PipelineCreationFeedbackEXT, pipeline_stage_creation_feedbacks::AbstractArray; next = C_NULL) = PipelineCreationFeedbackCreateInfoEXT(next, pipeline_creation_feedback, pipeline_stage_creation_feedbacks)

"""

"""
SurfaceFullScreenExclusiveInfoEXT(full_screen_exclusive::FullScreenExclusiveEXT; next = C_NULL) = SurfaceFullScreenExclusiveInfoEXT(next, full_screen_exclusive)

"""

"""
SurfaceFullScreenExclusiveWin32InfoEXT(hmonitor::vk.HMONITOR; next = C_NULL) = SurfaceFullScreenExclusiveWin32InfoEXT(next, hmonitor)

"""

"""
SurfaceCapabilitiesFullScreenExclusiveEXT(full_screen_exclusive_supported::Bool; next = C_NULL) = SurfaceCapabilitiesFullScreenExclusiveEXT(next, full_screen_exclusive_supported)

"""

"""
PhysicalDevicePerformanceQueryFeaturesKHR(performance_counter_query_pools::Bool, performance_counter_multiple_query_pools::Bool; next = C_NULL) = PhysicalDevicePerformanceQueryFeaturesKHR(next, performance_counter_query_pools, performance_counter_multiple_query_pools)

"""

"""
QueryPoolPerformanceCreateInfoKHR(queue_family_index::Integer, counter_indices::AbstractArray; next = C_NULL) = QueryPoolPerformanceCreateInfoKHR(next, queue_family_index, counter_indices)

"""

"""
AcquireProfilingLockInfoKHR(timeout::Integer; next = C_NULL, flags = 0) = AcquireProfilingLockInfoKHR(next, flags, timeout)

"""

"""
PerformanceQuerySubmitInfoKHR(counter_pass_index::Integer; next = C_NULL) = PerformanceQuerySubmitInfoKHR(next, counter_pass_index)

"""

"""
HeadlessSurfaceCreateInfoEXT(; next = C_NULL, flags = 0) = HeadlessSurfaceCreateInfoEXT(next, flags)

"""

"""
PhysicalDeviceCoverageReductionModeFeaturesNV(coverage_reduction_mode::Bool; next = C_NULL) = PhysicalDeviceCoverageReductionModeFeaturesNV(next, coverage_reduction_mode)

"""

"""
PipelineCoverageReductionStateCreateInfoNV(coverage_reduction_mode::CoverageReductionModeNV; next = C_NULL, flags = 0) = PipelineCoverageReductionStateCreateInfoNV(next, flags, coverage_reduction_mode)

"""

"""
PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(shader_integer_functions_2::Bool; next = C_NULL) = PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(next, shader_integer_functions_2)

"""

"""
InitializePerformanceApiInfoINTEL(; next = C_NULL, user_data = C_NULL) = InitializePerformanceApiInfoINTEL(next, user_data)

"""

"""
QueryPoolPerformanceQueryCreateInfoINTEL(performance_counters_sampling::QueryPoolSamplingModeINTEL; next = C_NULL) = QueryPoolPerformanceQueryCreateInfoINTEL(next, performance_counters_sampling)

"""

"""
PerformanceMarkerInfoINTEL(marker::Integer; next = C_NULL) = PerformanceMarkerInfoINTEL(next, marker)

"""

"""
PerformanceStreamMarkerInfoINTEL(marker::Integer; next = C_NULL) = PerformanceStreamMarkerInfoINTEL(next, marker)

"""

"""
PerformanceOverrideInfoINTEL(type::PerformanceOverrideTypeINTEL, enable::Bool, parameter::Integer; next = C_NULL) = PerformanceOverrideInfoINTEL(next, type, enable, parameter)

"""

"""
PerformanceConfigurationAcquireInfoINTEL(type::PerformanceConfigurationTypeINTEL; next = C_NULL) = PerformanceConfigurationAcquireInfoINTEL(next, type)

"""

"""
PhysicalDeviceShaderClockFeaturesKHR(shader_subgroup_clock::Bool, shader_device_clock::Bool; next = C_NULL) = PhysicalDeviceShaderClockFeaturesKHR(next, shader_subgroup_clock, shader_device_clock)

"""

"""
PhysicalDeviceIndexTypeUint8FeaturesEXT(index_type_uint_8::Bool; next = C_NULL) = PhysicalDeviceIndexTypeUint8FeaturesEXT(next, index_type_uint_8)

"""

"""
PhysicalDeviceShaderSMBuiltinsFeaturesNV(shader_sm_builtins::Bool; next = C_NULL) = PhysicalDeviceShaderSMBuiltinsFeaturesNV(next, shader_sm_builtins)

"""

"""
PhysicalDeviceFragmentShaderInterlockFeaturesEXT(fragment_shader_sample_interlock::Bool, fragment_shader_pixel_interlock::Bool, fragment_shader_shading_rate_interlock::Bool; next = C_NULL) = PhysicalDeviceFragmentShaderInterlockFeaturesEXT(next, fragment_shader_sample_interlock, fragment_shader_pixel_interlock, fragment_shader_shading_rate_interlock)

"""

"""
PhysicalDeviceSeparateDepthStencilLayoutsFeatures(separate_depth_stencil_layouts::Bool; next = C_NULL) = PhysicalDeviceSeparateDepthStencilLayoutsFeatures(next, separate_depth_stencil_layouts)

"""

"""
AttachmentReferenceStencilLayout(stencil_layout::ImageLayout; next = C_NULL) = AttachmentReferenceStencilLayout(next, stencil_layout)

"""

"""
AttachmentDescriptionStencilLayout(stencil_initial_layout::ImageLayout, stencil_final_layout::ImageLayout; next = C_NULL) = AttachmentDescriptionStencilLayout(next, stencil_initial_layout, stencil_final_layout)

"""

"""
PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(pipeline_executable_info::Bool; next = C_NULL) = PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(next, pipeline_executable_info)

"""

"""
PipelineInfoKHR(pipeline::Pipeline; next = C_NULL) = PipelineInfoKHR(next, pipeline)

"""

"""
PipelineExecutableInfoKHR(pipeline::Pipeline, executable_index::Integer; next = C_NULL) = PipelineExecutableInfoKHR(next, pipeline, executable_index)

"""

"""
PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(shader_demote_to_helper_invocation::Bool; next = C_NULL) = PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(next, shader_demote_to_helper_invocation)

"""

"""
PhysicalDeviceTexelBufferAlignmentFeaturesEXT(texel_buffer_alignment::Bool; next = C_NULL) = PhysicalDeviceTexelBufferAlignmentFeaturesEXT(next, texel_buffer_alignment)

"""

"""
PhysicalDeviceSubgroupSizeControlFeaturesEXT(subgroup_size_control::Bool, compute_full_subgroups::Bool; next = C_NULL) = PhysicalDeviceSubgroupSizeControlFeaturesEXT(next, subgroup_size_control, compute_full_subgroups)

"""

"""
MemoryOpaqueCaptureAddressAllocateInfo(opaque_capture_address::Integer; next = C_NULL) = MemoryOpaqueCaptureAddressAllocateInfo(next, opaque_capture_address)

"""

"""
DeviceMemoryOpaqueCaptureAddressInfo(memory::DeviceMemory; next = C_NULL) = DeviceMemoryOpaqueCaptureAddressInfo(next, memory)

"""

"""
PhysicalDeviceLineRasterizationFeaturesEXT(rectangular_lines::Bool, bresenham_lines::Bool, smooth_lines::Bool, stippled_rectangular_lines::Bool, stippled_bresenham_lines::Bool, stippled_smooth_lines::Bool; next = C_NULL) = PhysicalDeviceLineRasterizationFeaturesEXT(next, rectangular_lines, bresenham_lines, smooth_lines, stippled_rectangular_lines, stippled_bresenham_lines, stippled_smooth_lines)

"""

"""
PipelineRasterizationLineStateCreateInfoEXT(line_rasterization_mode::LineRasterizationModeEXT, stippled_line_enable::Bool, line_stipple_factor::Integer, line_stipple_pattern::Integer; next = C_NULL) = PipelineRasterizationLineStateCreateInfoEXT(next, line_rasterization_mode, stippled_line_enable, line_stipple_factor, line_stipple_pattern)

"""

"""
PhysicalDevicePipelineCreationCacheControlFeaturesEXT(pipeline_creation_cache_control::Bool; next = C_NULL) = PhysicalDevicePipelineCreationCacheControlFeaturesEXT(next, pipeline_creation_cache_control)

"""

"""
PhysicalDeviceVulkan11Features(storage_buffer_16_bit_access::Bool, uniform_and_storage_buffer_16_bit_access::Bool, storage_push_constant_16::Bool, storage_input_output_16::Bool, multiview::Bool, multiview_geometry_shader::Bool, multiview_tessellation_shader::Bool, variable_pointers_storage_buffer::Bool, variable_pointers::Bool, protected_memory::Bool, sampler_ycbcr_conversion::Bool, shader_draw_parameters::Bool; next = C_NULL) = PhysicalDeviceVulkan11Features(next, storage_buffer_16_bit_access, uniform_and_storage_buffer_16_bit_access, storage_push_constant_16, storage_input_output_16, multiview, multiview_geometry_shader, multiview_tessellation_shader, variable_pointers_storage_buffer, variable_pointers, protected_memory, sampler_ycbcr_conversion, shader_draw_parameters)

"""

"""
PhysicalDeviceVulkan12Features(sampler_mirror_clamp_to_edge::Bool, draw_indirect_count::Bool, storage_buffer_8_bit_access::Bool, uniform_and_storage_buffer_8_bit_access::Bool, storage_push_constant_8::Bool, shader_buffer_int_64_atomics::Bool, shader_shared_int_64_atomics::Bool, shader_float_16::Bool, shader_int_8::Bool, descriptor_indexing::Bool, shader_input_attachment_array_dynamic_indexing::Bool, shader_uniform_texel_buffer_array_dynamic_indexing::Bool, shader_storage_texel_buffer_array_dynamic_indexing::Bool, shader_uniform_buffer_array_non_uniform_indexing::Bool, shader_sampled_image_array_non_uniform_indexing::Bool, shader_storage_buffer_array_non_uniform_indexing::Bool, shader_storage_image_array_non_uniform_indexing::Bool, shader_input_attachment_array_non_uniform_indexing::Bool, shader_uniform_texel_buffer_array_non_uniform_indexing::Bool, shader_storage_texel_buffer_array_non_uniform_indexing::Bool, descriptor_binding_uniform_buffer_update_after_bind::Bool, descriptor_binding_sampled_image_update_after_bind::Bool, descriptor_binding_storage_image_update_after_bind::Bool, descriptor_binding_storage_buffer_update_after_bind::Bool, descriptor_binding_uniform_texel_buffer_update_after_bind::Bool, descriptor_binding_storage_texel_buffer_update_after_bind::Bool, descriptor_binding_update_unused_while_pending::Bool, descriptor_binding_partially_bound::Bool, descriptor_binding_variable_descriptor_count::Bool, runtime_descriptor_array::Bool, sampler_filter_minmax::Bool, scalar_block_layout::Bool, imageless_framebuffer::Bool, uniform_buffer_standard_layout::Bool, shader_subgroup_extended_types::Bool, separate_depth_stencil_layouts::Bool, host_query_reset::Bool, timeline_semaphore::Bool, buffer_device_address::Bool, buffer_device_address_capture_replay::Bool, buffer_device_address_multi_device::Bool, vulkan_memory_model::Bool, vulkan_memory_model_device_scope::Bool, vulkan_memory_model_availability_visibility_chains::Bool, shader_output_viewport_index::Bool, shader_output_layer::Bool, subgroup_broadcast_dynamic_id::Bool; next = C_NULL) = PhysicalDeviceVulkan12Features(next, sampler_mirror_clamp_to_edge, draw_indirect_count, storage_buffer_8_bit_access, uniform_and_storage_buffer_8_bit_access, storage_push_constant_8, shader_buffer_int_64_atomics, shader_shared_int_64_atomics, shader_float_16, shader_int_8, descriptor_indexing, shader_input_attachment_array_dynamic_indexing, shader_uniform_texel_buffer_array_dynamic_indexing, shader_storage_texel_buffer_array_dynamic_indexing, shader_uniform_buffer_array_non_uniform_indexing, shader_sampled_image_array_non_uniform_indexing, shader_storage_buffer_array_non_uniform_indexing, shader_storage_image_array_non_uniform_indexing, shader_input_attachment_array_non_uniform_indexing, shader_uniform_texel_buffer_array_non_uniform_indexing, shader_storage_texel_buffer_array_non_uniform_indexing, descriptor_binding_uniform_buffer_update_after_bind, descriptor_binding_sampled_image_update_after_bind, descriptor_binding_storage_image_update_after_bind, descriptor_binding_storage_buffer_update_after_bind, descriptor_binding_uniform_texel_buffer_update_after_bind, descriptor_binding_storage_texel_buffer_update_after_bind, descriptor_binding_update_unused_while_pending, descriptor_binding_partially_bound, descriptor_binding_variable_descriptor_count, runtime_descriptor_array, sampler_filter_minmax, scalar_block_layout, imageless_framebuffer, uniform_buffer_standard_layout, shader_subgroup_extended_types, separate_depth_stencil_layouts, host_query_reset, timeline_semaphore, buffer_device_address, buffer_device_address_capture_replay, buffer_device_address_multi_device, vulkan_memory_model, vulkan_memory_model_device_scope, vulkan_memory_model_availability_visibility_chains, shader_output_viewport_index, shader_output_layer, subgroup_broadcast_dynamic_id)

"""

"""
PipelineCompilerControlCreateInfoAMD(; next = C_NULL, compiler_control_flags = 0) = PipelineCompilerControlCreateInfoAMD(next, compiler_control_flags)

"""

"""
PhysicalDeviceCoherentMemoryFeaturesAMD(device_coherent_memory::Bool; next = C_NULL) = PhysicalDeviceCoherentMemoryFeaturesAMD(next, device_coherent_memory)

"""

"""
SamplerCustomBorderColorCreateInfoEXT(custom_border_color::ClearColorValue, format::Format; next = C_NULL) = SamplerCustomBorderColorCreateInfoEXT(next, custom_border_color, format)

"""

"""
PhysicalDeviceCustomBorderColorFeaturesEXT(custom_border_colors::Bool, custom_border_color_without_format::Bool; next = C_NULL) = PhysicalDeviceCustomBorderColorFeaturesEXT(next, custom_border_colors, custom_border_color_without_format)

"""

"""
AccelerationStructureGeometryTrianglesDataKHR(vertex_format::Format, vertex_data::DeviceOrHostAddressConstKHR, vertex_stride::Integer, max_vertex::Integer, index_type::IndexType, index_data::DeviceOrHostAddressConstKHR, transform_data::DeviceOrHostAddressConstKHR; next = C_NULL) = AccelerationStructureGeometryTrianglesDataKHR(next, vertex_format, vertex_data, vertex_stride, max_vertex, index_type, index_data, transform_data)

"""

"""
AccelerationStructureGeometryAabbsDataKHR(data::DeviceOrHostAddressConstKHR, stride::Integer; next = C_NULL) = AccelerationStructureGeometryAabbsDataKHR(next, data, stride)

"""

"""
AccelerationStructureGeometryInstancesDataKHR(array_of_pointers::Bool, data::DeviceOrHostAddressConstKHR; next = C_NULL) = AccelerationStructureGeometryInstancesDataKHR(next, array_of_pointers, data)

"""

"""
AccelerationStructureGeometryKHR(geometry_type::GeometryTypeKHR, geometry::AccelerationStructureGeometryDataKHR; next = C_NULL, flags = 0) = AccelerationStructureGeometryKHR(next, geometry_type, geometry, flags)

"""

"""
AccelerationStructureBuildGeometryInfoKHR(type::AccelerationStructureTypeKHR, mode::BuildAccelerationStructureModeKHR, scratch_data::DeviceOrHostAddressKHR; next = C_NULL, flags = 0, src_acceleration_structure = C_NULL, dst_acceleration_structure = C_NULL, geometries = C_NULL, geometries_2 = C_NULL) = AccelerationStructureBuildGeometryInfoKHR(next, type, flags, mode, src_acceleration_structure, dst_acceleration_structure, geometries, geometries_2, scratch_data)

"""

"""
AccelerationStructureCreateInfoKHR(buffer::Buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; next = C_NULL, create_flags = 0, device_address = 0) = AccelerationStructureCreateInfoKHR(next, create_flags, buffer, offset, size, type, device_address)

"""

"""
AccelerationStructureInstanceKHR(transform::TransformMatrixKHR, instance_custom_index::Integer, mask::Integer, instance_shader_binding_table_record_offset::Integer, acceleration_structure_reference::Integer; flags = 0) = AccelerationStructureInstanceKHR(transform, instance_custom_index, mask, instance_shader_binding_table_record_offset, flags, acceleration_structure_reference)

"""

"""
AccelerationStructureDeviceAddressInfoKHR(acceleration_structure::AccelerationStructureKHR; next = C_NULL) = AccelerationStructureDeviceAddressInfoKHR(next, acceleration_structure)

"""

"""
AccelerationStructureVersionInfoKHR(version_data::AbstractArray; next = C_NULL) = AccelerationStructureVersionInfoKHR(next, version_data)

"""

"""
CopyAccelerationStructureInfoKHR(src::AccelerationStructureKHR, dst::AccelerationStructureKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL) = CopyAccelerationStructureInfoKHR(next, src, dst, mode)

"""

"""
CopyAccelerationStructureToMemoryInfoKHR(src::AccelerationStructureKHR, dst::DeviceOrHostAddressKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL) = CopyAccelerationStructureToMemoryInfoKHR(next, src, dst, mode)

"""

"""
CopyMemoryToAccelerationStructureInfoKHR(src::DeviceOrHostAddressConstKHR, dst::AccelerationStructureKHR, mode::CopyAccelerationStructureModeKHR; next = C_NULL) = CopyMemoryToAccelerationStructureInfoKHR(next, src, dst, mode)

"""

"""
RayTracingPipelineInterfaceCreateInfoKHR(max_pipeline_ray_payload_size::Integer, max_pipeline_ray_hit_attribute_size::Integer; next = C_NULL) = RayTracingPipelineInterfaceCreateInfoKHR(next, max_pipeline_ray_payload_size, max_pipeline_ray_hit_attribute_size)

"""

"""
PipelineLibraryCreateInfoKHR(libraries::AbstractArray; next = C_NULL) = PipelineLibraryCreateInfoKHR(next, libraries)

"""

"""
PhysicalDeviceExtendedDynamicStateFeaturesEXT(extended_dynamic_state::Bool; next = C_NULL) = PhysicalDeviceExtendedDynamicStateFeaturesEXT(next, extended_dynamic_state)

"""

"""
PhysicalDeviceExtendedDynamicState2FeaturesEXT(extended_dynamic_state_2::Bool, extended_dynamic_state_2_logic_op::Bool, extended_dynamic_state_2_patch_control_points::Bool; next = C_NULL) = PhysicalDeviceExtendedDynamicState2FeaturesEXT(next, extended_dynamic_state_2, extended_dynamic_state_2_logic_op, extended_dynamic_state_2_patch_control_points)

"""

"""
RenderPassTransformBeginInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL) = RenderPassTransformBeginInfoQCOM(next, transform)

"""

"""
CopyCommandTransformInfoQCOM(transform::SurfaceTransformFlagKHR; next = C_NULL) = CopyCommandTransformInfoQCOM(next, transform)

"""

"""
CommandBufferInheritanceRenderPassTransformInfoQCOM(transform::SurfaceTransformFlagKHR, render_area::Rect2D; next = C_NULL) = CommandBufferInheritanceRenderPassTransformInfoQCOM(next, transform, render_area)

"""

"""
PhysicalDeviceDiagnosticsConfigFeaturesNV(diagnostics_config::Bool; next = C_NULL) = PhysicalDeviceDiagnosticsConfigFeaturesNV(next, diagnostics_config)

"""

"""
DeviceDiagnosticsConfigCreateInfoNV(; next = C_NULL, flags = 0) = DeviceDiagnosticsConfigCreateInfoNV(next, flags)

"""

"""
PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(shader_zero_initialize_workgroup_memory::Bool; next = C_NULL) = PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(next, shader_zero_initialize_workgroup_memory)

"""

"""
PhysicalDeviceRobustness2FeaturesEXT(robust_buffer_access_2::Bool, robust_image_access_2::Bool, null_descriptor::Bool; next = C_NULL) = PhysicalDeviceRobustness2FeaturesEXT(next, robust_buffer_access_2, robust_image_access_2, null_descriptor)

"""

"""
PhysicalDeviceImageRobustnessFeaturesEXT(robust_image_access::Bool; next = C_NULL) = PhysicalDeviceImageRobustnessFeaturesEXT(next, robust_image_access)

"""

"""
PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(workgroup_memory_explicit_layout::Bool, workgroup_memory_explicit_layout_scalar_block_layout::Bool, workgroup_memory_explicit_layout_8_bit_access::Bool, workgroup_memory_explicit_layout_16_bit_access::Bool; next = C_NULL) = PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(next, workgroup_memory_explicit_layout, workgroup_memory_explicit_layout_scalar_block_layout, workgroup_memory_explicit_layout_8_bit_access, workgroup_memory_explicit_layout_16_bit_access)

"""

"""
PhysicalDevice4444FormatsFeaturesEXT(format_a4r4g4b4::Bool, format_a4b4g4r4::Bool; next = C_NULL) = PhysicalDevice4444FormatsFeaturesEXT(next, format_a4r4g4b4, format_a4b4g4r4)

"""

"""
BufferCopy2KHR(src_offset::Integer, dst_offset::Integer, size::Integer; next = C_NULL) = BufferCopy2KHR(next, src_offset, dst_offset, size)

"""

"""
ImageCopy2KHR(src_subresource::ImageSubresourceLayers, src_offset::Offset3D, dst_subresource::ImageSubresourceLayers, dst_offset::Offset3D, extent::Extent3D; next = C_NULL) = ImageCopy2KHR(next, src_subresource, src_offset, dst_subresource, dst_offset, extent)

"""

"""
ImageBlit2KHR(src_subresource::ImageSubresourceLayers, src_offsets::NTuple{2, Offset3D}, dst_subresource::ImageSubresourceLayers, dst_offsets::NTuple{2, Offset3D}; next = C_NULL) = ImageBlit2KHR(next, src_subresource, src_offsets, dst_subresource, dst_offsets)

"""

"""
BufferImageCopy2KHR(buffer_offset::Integer, buffer_row_length::Integer, buffer_image_height::Integer, image_subresource::ImageSubresourceLayers, image_offset::Offset3D, image_extent::Extent3D; next = C_NULL) = BufferImageCopy2KHR(next, buffer_offset, buffer_row_length, buffer_image_height, image_subresource, image_offset, image_extent)

"""

"""
ImageResolve2KHR(src_subresource::ImageSubresourceLayers, src_offset::Offset3D, dst_subresource::ImageSubresourceLayers, dst_offset::Offset3D, extent::Extent3D; next = C_NULL) = ImageResolve2KHR(next, src_subresource, src_offset, dst_subresource, dst_offset, extent)

"""

"""
CopyBufferInfo2KHR(src_buffer::Buffer, dst_buffer::Buffer, regions::AbstractArray; next = C_NULL) = CopyBufferInfo2KHR(next, src_buffer, dst_buffer, regions)

"""

"""
CopyImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL) = CopyImageInfo2KHR(next, src_image, src_image_layout, dst_image, dst_image_layout, regions)

"""

"""
BlitImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter; next = C_NULL) = BlitImageInfo2KHR(next, src_image, src_image_layout, dst_image, dst_image_layout, regions, filter)

"""

"""
CopyBufferToImageInfo2KHR(src_buffer::Buffer, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL) = CopyBufferToImageInfo2KHR(next, src_buffer, dst_image, dst_image_layout, regions)

"""

"""
CopyImageToBufferInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_buffer::Buffer, regions::AbstractArray; next = C_NULL) = CopyImageToBufferInfo2KHR(next, src_image, src_image_layout, dst_buffer, regions)

"""

"""
ResolveImageInfo2KHR(src_image::Image, src_image_layout::ImageLayout, dst_image::Image, dst_image_layout::ImageLayout, regions::AbstractArray; next = C_NULL) = ResolveImageInfo2KHR(next, src_image, src_image_layout, dst_image, dst_image_layout, regions)

"""

"""
PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(shader_image_int_64_atomics::Bool, sparse_image_int_64_atomics::Bool; next = C_NULL) = PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(next, shader_image_int_64_atomics, sparse_image_int_64_atomics)

"""

"""
FragmentShadingRateAttachmentInfoKHR(fragment_shading_rate_attachment::AttachmentReference2, shading_rate_attachment_texel_size::Extent2D; next = C_NULL) = FragmentShadingRateAttachmentInfoKHR(next, fragment_shading_rate_attachment, shading_rate_attachment_texel_size)

"""

"""
PipelineFragmentShadingRateStateCreateInfoKHR(fragment_size::Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL) = PipelineFragmentShadingRateStateCreateInfoKHR(next, fragment_size, combiner_ops)

"""

"""
PhysicalDeviceFragmentShadingRateFeaturesKHR(pipeline_fragment_shading_rate::Bool, primitive_fragment_shading_rate::Bool, attachment_fragment_shading_rate::Bool; next = C_NULL) = PhysicalDeviceFragmentShadingRateFeaturesKHR(next, pipeline_fragment_shading_rate, primitive_fragment_shading_rate, attachment_fragment_shading_rate)

"""

"""
PhysicalDeviceShaderTerminateInvocationFeaturesKHR(shader_terminate_invocation::Bool; next = C_NULL) = PhysicalDeviceShaderTerminateInvocationFeaturesKHR(next, shader_terminate_invocation)

"""

"""
PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(fragment_shading_rate_enums::Bool, supersample_fragment_shading_rates::Bool, no_invocation_fragment_shading_rates::Bool; next = C_NULL) = PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(next, fragment_shading_rate_enums, supersample_fragment_shading_rates, no_invocation_fragment_shading_rates)

"""

"""
PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(max_fragment_shading_rate_invocation_count::SampleCountFlag; next = C_NULL) = PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(next, max_fragment_shading_rate_invocation_count)

"""

"""
PipelineFragmentShadingRateEnumStateCreateInfoNV(shading_rate_type::FragmentShadingRateTypeNV, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}; next = C_NULL) = PipelineFragmentShadingRateEnumStateCreateInfoNV(next, shading_rate_type, shading_rate, combiner_ops)

"""

"""
AccelerationStructureBuildSizesInfoKHR(acceleration_structure_size::Integer, update_scratch_size::Integer, build_scratch_size::Integer; next = C_NULL) = AccelerationStructureBuildSizesInfoKHR(next, acceleration_structure_size, update_scratch_size, build_scratch_size)

"""

"""
PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(mutable_descriptor_type::Bool; next = C_NULL) = PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(next, mutable_descriptor_type)

"""

"""
MutableDescriptorTypeCreateInfoVALVE(mutable_descriptor_type_lists::AbstractArray; next = C_NULL) = MutableDescriptorTypeCreateInfoVALVE(next, mutable_descriptor_type_lists)

"""

"""
PhysicalDeviceVertexInputDynamicStateFeaturesEXT(vertex_input_dynamic_state::Bool; next = C_NULL) = PhysicalDeviceVertexInputDynamicStateFeaturesEXT(next, vertex_input_dynamic_state)

"""

"""
VertexInputBindingDescription2EXT(binding::Integer, stride::Integer, input_rate::VertexInputRate, divisor::Integer; next = C_NULL) = VertexInputBindingDescription2EXT(next, binding, stride, input_rate, divisor)

"""

"""
VertexInputAttributeDescription2EXT(location::Integer, binding::Integer, format::Format, offset::Integer; next = C_NULL) = VertexInputAttributeDescription2EXT(next, location, binding, format, offset)

"""

"""
PhysicalDeviceColorWriteEnableFeaturesEXT(color_write_enable::Bool; next = C_NULL) = PhysicalDeviceColorWriteEnableFeaturesEXT(next, color_write_enable)

"""

"""
PipelineColorWriteCreateInfoEXT(color_write_enables::AbstractArray; next = C_NULL) = PipelineColorWriteCreateInfoEXT(next, color_write_enables)

"""

"""
MemoryBarrier2KHR(; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0) = MemoryBarrier2KHR(next, src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask)

"""

"""
ImageMemoryBarrier2KHR(old_layout::ImageLayout, new_layout::ImageLayout, src_queue_family_index::Integer, dst_queue_family_index::Integer, image::Image, subresource_range::ImageSubresourceRange; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0) = ImageMemoryBarrier2KHR(next, src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, old_layout, new_layout, src_queue_family_index, dst_queue_family_index, image, subresource_range)

"""

"""
BufferMemoryBarrier2KHR(src_queue_family_index::Integer, dst_queue_family_index::Integer, buffer::Buffer, offset::Integer, size::Integer; next = C_NULL, src_stage_mask = 0, src_access_mask = 0, dst_stage_mask = 0, dst_access_mask = 0) = BufferMemoryBarrier2KHR(next, src_stage_mask, src_access_mask, dst_stage_mask, dst_access_mask, src_queue_family_index, dst_queue_family_index, buffer, offset, size)

"""

"""
DependencyInfoKHR(memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; next = C_NULL, dependency_flags = 0) = DependencyInfoKHR(next, dependency_flags, memory_barriers, buffer_memory_barriers, image_memory_barriers)

"""

"""
SemaphoreSubmitInfoKHR(semaphore::Semaphore, value::Integer, device_index::Integer; next = C_NULL, stage_mask = 0) = SemaphoreSubmitInfoKHR(next, semaphore, value, stage_mask, device_index)

"""

"""
CommandBufferSubmitInfoKHR(command_buffer::CommandBuffer, device_mask::Integer; next = C_NULL) = CommandBufferSubmitInfoKHR(next, command_buffer, device_mask)

"""

"""
SubmitInfo2KHR(wait_semaphore_infos::AbstractArray, command_buffer_infos::AbstractArray, signal_semaphore_infos::AbstractArray; next = C_NULL, flags = 0) = SubmitInfo2KHR(next, flags, wait_semaphore_infos, command_buffer_infos, signal_semaphore_infos)

"""

"""
PhysicalDeviceSynchronization2FeaturesKHR(synchronization2::Bool; next = C_NULL) = PhysicalDeviceSynchronization2FeaturesKHR(next, synchronization2)

"""

"""
PhysicalDeviceInheritedViewportScissorFeaturesNV(inherited_viewport_scissor_2_d::Bool; next = C_NULL) = PhysicalDeviceInheritedViewportScissorFeaturesNV(next, inherited_viewport_scissor_2_d)

"""

"""
CommandBufferInheritanceViewportScissorInfoNV(viewport_scissor_2_d::Bool, viewport_depth_count::Integer, viewport_depths::Viewport; next = C_NULL) = CommandBufferInheritanceViewportScissorInfoNV(next, viewport_scissor_2_d, viewport_depth_count, viewport_depths)

"""

"""
PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(ycbcr_444_formats::Bool; next = C_NULL) = PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(next, ycbcr_444_formats)

"""

"""
PhysicalDeviceProvokingVertexFeaturesEXT(provoking_vertex_last::Bool, transform_feedback_preserves_provoking_vertex::Bool; next = C_NULL) = PhysicalDeviceProvokingVertexFeaturesEXT(next, provoking_vertex_last, transform_feedback_preserves_provoking_vertex)

"""

"""
PipelineRasterizationProvokingVertexStateCreateInfoEXT(provoking_vertex_mode::ProvokingVertexModeEXT; next = C_NULL) = PipelineRasterizationProvokingVertexStateCreateInfoEXT(next, provoking_vertex_mode)

"""

"""
_BaseOutStructure(x::BaseOutStructure) = _BaseOutStructure(; x.next)

"""

"""
_BaseInStructure(x::BaseInStructure) = _BaseInStructure(; x.next)

"""

"""
_Offset2D(x::Offset2D) = _Offset2D(x.x, x.y)

"""

"""
_Offset3D(x::Offset3D) = _Offset3D(x.x, x.y, x.z)

"""

"""
_Extent2D(x::Extent2D) = _Extent2D(x.width, x.height)

"""

"""
_Extent3D(x::Extent3D) = _Extent3D(x.width, x.height, x.depth)

"""

"""
_Viewport(x::Viewport) = _Viewport(x.x, x.y, x.width, x.height, x.min_depth, x.max_depth)

"""

"""
_Rect2D(x::Rect2D) = _Rect2D(convert_nonnull(_Offset2D, x.offset), convert_nonnull(_Extent2D, x.extent))

"""

"""
_ClearRect(x::ClearRect) = _ClearRect(convert_nonnull(_Rect2D, x.rect), x.base_array_layer, x.layer_count)

"""

"""
_ComponentMapping(x::ComponentMapping) = _ComponentMapping(x.r, x.g, x.b, x.a)

"""

"""
_ApplicationInfo(x::ApplicationInfo) = _ApplicationInfo(x.application_version, x.engine_version, x.api_version; x.next, x.application_name, x.engine_name)

"""

"""
_AllocationCallbacks(x::AllocationCallbacks) = _AllocationCallbacks(x.pfn_allocation, x.pfn_reallocation, x.pfn_free; x.user_data, x.pfn_internal_allocation, x.pfn_internal_free)

"""

"""
_DeviceQueueCreateInfo(x::DeviceQueueCreateInfo) = _DeviceQueueCreateInfo(x.queue_family_index, x.queue_priorities; x.next, x.flags)

"""

"""
_DeviceCreateInfo(x::DeviceCreateInfo) = _DeviceCreateInfo(convert_nonnull(Vector{_DeviceQueueCreateInfo}, x.queue_create_infos), x.enabled_layer_names, x.enabled_extension_names; x.next, x.flags, enabled_features = convert_nonnull(_PhysicalDeviceFeatures, x.enabled_features))

"""

"""
_InstanceCreateInfo(x::InstanceCreateInfo) = _InstanceCreateInfo(x.enabled_layer_names, x.enabled_extension_names; x.next, x.flags, application_info = convert_nonnull(_ApplicationInfo, x.application_info))

"""

"""
_MemoryAllocateInfo(x::MemoryAllocateInfo) = _MemoryAllocateInfo(x.allocation_size, x.memory_type_index; x.next)

"""

"""
_MappedMemoryRange(x::MappedMemoryRange) = _MappedMemoryRange(x.memory, x.offset, x.size; x.next)

"""

"""
_DescriptorBufferInfo(x::DescriptorBufferInfo) = _DescriptorBufferInfo(x.offset, x.range; x.buffer)

"""

"""
_DescriptorImageInfo(x::DescriptorImageInfo) = _DescriptorImageInfo(x.sampler, x.image_view, x.image_layout)

"""

"""
_WriteDescriptorSet(x::WriteDescriptorSet) = _WriteDescriptorSet(x.dst_set, x.dst_binding, x.dst_array_element, x.descriptor_type, convert_nonnull(Vector{_DescriptorImageInfo}, x.image_info), convert_nonnull(Vector{_DescriptorBufferInfo}, x.buffer_info), x.texel_buffer_view; x.next, x.descriptor_count)

"""

"""
_CopyDescriptorSet(x::CopyDescriptorSet) = _CopyDescriptorSet(x.src_set, x.src_binding, x.src_array_element, x.dst_set, x.dst_binding, x.dst_array_element, x.descriptor_count; x.next)

"""

"""
_BufferCreateInfo(x::BufferCreateInfo) = _BufferCreateInfo(x.size, x.usage, x.sharing_mode, x.queue_family_indices; x.next, x.flags)

"""

"""
_BufferViewCreateInfo(x::BufferViewCreateInfo) = _BufferViewCreateInfo(x.buffer, x.format, x.offset, x.range; x.next, x.flags)

"""

"""
_ImageSubresource(x::ImageSubresource) = _ImageSubresource(x.aspect_mask, x.mip_level, x.array_layer)

"""

"""
_ImageSubresourceLayers(x::ImageSubresourceLayers) = _ImageSubresourceLayers(x.aspect_mask, x.mip_level, x.base_array_layer, x.layer_count)

"""

"""
_ImageSubresourceRange(x::ImageSubresourceRange) = _ImageSubresourceRange(x.aspect_mask, x.base_mip_level, x.level_count, x.base_array_layer, x.layer_count)

"""

"""
_MemoryBarrier(x::MemoryBarrier) = _MemoryBarrier(; x.next, x.src_access_mask, x.dst_access_mask)

"""

"""
_BufferMemoryBarrier(x::BufferMemoryBarrier) = _BufferMemoryBarrier(x.src_access_mask, x.dst_access_mask, x.src_queue_family_index, x.dst_queue_family_index, x.buffer, x.offset, x.size; x.next)

"""

"""
_ImageMemoryBarrier(x::ImageMemoryBarrier) = _ImageMemoryBarrier(x.src_access_mask, x.dst_access_mask, x.old_layout, x.new_layout, x.src_queue_family_index, x.dst_queue_family_index, x.image, convert_nonnull(_ImageSubresourceRange, x.subresource_range); x.next)

"""

"""
_ImageCreateInfo(x::ImageCreateInfo) = _ImageCreateInfo(x.image_type, x.format, convert_nonnull(_Extent3D, x.extent), x.mip_levels, x.array_layers, x.samples, x.tiling, x.usage, x.sharing_mode, x.queue_family_indices, x.initial_layout; x.next, x.flags)

"""

"""
_ImageViewCreateInfo(x::ImageViewCreateInfo) = _ImageViewCreateInfo(x.image, x.view_type, x.format, convert_nonnull(_ComponentMapping, x.components), convert_nonnull(_ImageSubresourceRange, x.subresource_range); x.next, x.flags)

"""

"""
_BufferCopy(x::BufferCopy) = _BufferCopy(x.src_offset, x.dst_offset, x.size)

"""

"""
_SparseMemoryBind(x::SparseMemoryBind) = _SparseMemoryBind(x.resource_offset, x.size, x.memory_offset; x.memory, x.flags)

"""

"""
_SparseImageMemoryBind(x::SparseImageMemoryBind) = _SparseImageMemoryBind(convert_nonnull(_ImageSubresource, x.subresource), convert_nonnull(_Offset3D, x.offset), convert_nonnull(_Extent3D, x.extent), x.memory_offset; x.memory, x.flags)

"""

"""
_SparseBufferMemoryBindInfo(x::SparseBufferMemoryBindInfo) = _SparseBufferMemoryBindInfo(x.buffer, convert_nonnull(Vector{_SparseMemoryBind}, x.binds))

"""

"""
_SparseImageOpaqueMemoryBindInfo(x::SparseImageOpaqueMemoryBindInfo) = _SparseImageOpaqueMemoryBindInfo(x.image, convert_nonnull(Vector{_SparseMemoryBind}, x.binds))

"""

"""
_SparseImageMemoryBindInfo(x::SparseImageMemoryBindInfo) = _SparseImageMemoryBindInfo(x.image, convert_nonnull(Vector{_SparseImageMemoryBind}, x.binds))

"""

"""
_BindSparseInfo(x::BindSparseInfo) = _BindSparseInfo(x.wait_semaphores, convert_nonnull(Vector{_SparseBufferMemoryBindInfo}, x.buffer_binds), convert_nonnull(Vector{_SparseImageOpaqueMemoryBindInfo}, x.image_opaque_binds), convert_nonnull(Vector{_SparseImageMemoryBindInfo}, x.image_binds), x.signal_semaphores; x.next)

"""

"""
_ImageCopy(x::ImageCopy) = _ImageCopy(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(_Offset3D, x.src_offset), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(_Offset3D, x.dst_offset), convert_nonnull(_Extent3D, x.extent))

"""

"""
_ImageBlit(x::ImageBlit) = _ImageBlit(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(NTuple{2, _Offset3D}, x.src_offsets), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(NTuple{2, _Offset3D}, x.dst_offsets))

"""

"""
_BufferImageCopy(x::BufferImageCopy) = _BufferImageCopy(x.buffer_offset, x.buffer_row_length, x.buffer_image_height, convert_nonnull(_ImageSubresourceLayers, x.image_subresource), convert_nonnull(_Offset3D, x.image_offset), convert_nonnull(_Extent3D, x.image_extent))

"""

"""
_ImageResolve(x::ImageResolve) = _ImageResolve(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(_Offset3D, x.src_offset), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(_Offset3D, x.dst_offset), convert_nonnull(_Extent3D, x.extent))

"""

"""
_ShaderModuleCreateInfo(x::ShaderModuleCreateInfo) = _ShaderModuleCreateInfo(x.code_size, x.code; x.next, x.flags)

"""

"""
_DescriptorSetLayoutBinding(x::DescriptorSetLayoutBinding) = _DescriptorSetLayoutBinding(x.binding, x.descriptor_type, x.stage_flags; x.descriptor_count, x.immutable_samplers)

"""

"""
_DescriptorSetLayoutCreateInfo(x::DescriptorSetLayoutCreateInfo) = _DescriptorSetLayoutCreateInfo(convert_nonnull(Vector{_DescriptorSetLayoutBinding}, x.bindings); x.next, x.flags)

"""

"""
_DescriptorPoolSize(x::DescriptorPoolSize) = _DescriptorPoolSize(x.type, x.descriptor_count)

"""

"""
_DescriptorPoolCreateInfo(x::DescriptorPoolCreateInfo) = _DescriptorPoolCreateInfo(x.max_sets, convert_nonnull(Vector{_DescriptorPoolSize}, x.pool_sizes); x.next, x.flags)

"""

"""
_DescriptorSetAllocateInfo(x::DescriptorSetAllocateInfo) = _DescriptorSetAllocateInfo(x.descriptor_pool, x.set_layouts; x.next)

"""

"""
_SpecializationMapEntry(x::SpecializationMapEntry) = _SpecializationMapEntry(x.constant_id, x.offset, x.size)

"""

"""
_SpecializationInfo(x::SpecializationInfo) = _SpecializationInfo(convert_nonnull(Vector{_SpecializationMapEntry}, x.map_entries), x.data; x.data_size)

"""

"""
_PipelineShaderStageCreateInfo(x::PipelineShaderStageCreateInfo) = _PipelineShaderStageCreateInfo(x.stage, x._module, x.name; x.next, x.flags, specialization_info = convert_nonnull(_SpecializationInfo, x.specialization_info))

"""

"""
_ComputePipelineCreateInfo(x::ComputePipelineCreateInfo) = _ComputePipelineCreateInfo(convert_nonnull(_PipelineShaderStageCreateInfo, x.stage), x.layout, x.base_pipeline_index; x.next, x.flags, x.base_pipeline_handle)

"""

"""
_VertexInputBindingDescription(x::VertexInputBindingDescription) = _VertexInputBindingDescription(x.binding, x.stride, x.input_rate)

"""

"""
_VertexInputAttributeDescription(x::VertexInputAttributeDescription) = _VertexInputAttributeDescription(x.location, x.binding, x.format, x.offset)

"""

"""
_PipelineVertexInputStateCreateInfo(x::PipelineVertexInputStateCreateInfo) = _PipelineVertexInputStateCreateInfo(convert_nonnull(Vector{_VertexInputBindingDescription}, x.vertex_binding_descriptions), convert_nonnull(Vector{_VertexInputAttributeDescription}, x.vertex_attribute_descriptions); x.next, x.flags)

"""

"""
_PipelineInputAssemblyStateCreateInfo(x::PipelineInputAssemblyStateCreateInfo) = _PipelineInputAssemblyStateCreateInfo(x.topology, x.primitive_restart_enable; x.next, x.flags)

"""

"""
_PipelineTessellationStateCreateInfo(x::PipelineTessellationStateCreateInfo) = _PipelineTessellationStateCreateInfo(x.patch_control_points; x.next, x.flags)

"""

"""
_PipelineViewportStateCreateInfo(x::PipelineViewportStateCreateInfo) = _PipelineViewportStateCreateInfo(; x.next, x.flags, viewports = convert_nonnull(Vector{_Viewport}, x.viewports), scissors = convert_nonnull(Vector{_Rect2D}, x.scissors))

"""

"""
_PipelineRasterizationStateCreateInfo(x::PipelineRasterizationStateCreateInfo) = _PipelineRasterizationStateCreateInfo(x.depth_clamp_enable, x.rasterizer_discard_enable, x.polygon_mode, x.front_face, x.depth_bias_enable, x.depth_bias_constant_factor, x.depth_bias_clamp, x.depth_bias_slope_factor, x.line_width; x.next, x.flags, x.cull_mode)

"""

"""
_PipelineMultisampleStateCreateInfo(x::PipelineMultisampleStateCreateInfo) = _PipelineMultisampleStateCreateInfo(x.rasterization_samples, x.sample_shading_enable, x.min_sample_shading, x.alpha_to_coverage_enable, x.alpha_to_one_enable; x.next, x.flags, x.sample_mask)

"""

"""
_PipelineColorBlendAttachmentState(x::PipelineColorBlendAttachmentState) = _PipelineColorBlendAttachmentState(x.blend_enable, x.src_color_blend_factor, x.dst_color_blend_factor, x.color_blend_op, x.src_alpha_blend_factor, x.dst_alpha_blend_factor, x.alpha_blend_op; x.color_write_mask)

"""

"""
_PipelineColorBlendStateCreateInfo(x::PipelineColorBlendStateCreateInfo) = _PipelineColorBlendStateCreateInfo(x.logic_op_enable, x.logic_op, convert_nonnull(Vector{_PipelineColorBlendAttachmentState}, x.attachments), x.blend_constants; x.next, x.flags)

"""

"""
_PipelineDynamicStateCreateInfo(x::PipelineDynamicStateCreateInfo) = _PipelineDynamicStateCreateInfo(x.dynamic_states; x.next, x.flags)

"""

"""
_StencilOpState(x::StencilOpState) = _StencilOpState(x.fail_op, x.pass_op, x.depth_fail_op, x.compare_op, x.compare_mask, x.write_mask, x.reference)

"""

"""
_PipelineDepthStencilStateCreateInfo(x::PipelineDepthStencilStateCreateInfo) = _PipelineDepthStencilStateCreateInfo(x.depth_test_enable, x.depth_write_enable, x.depth_compare_op, x.depth_bounds_test_enable, x.stencil_test_enable, convert_nonnull(_StencilOpState, x.front), convert_nonnull(_StencilOpState, x.back), x.min_depth_bounds, x.max_depth_bounds; x.next, x.flags)

"""

"""
_GraphicsPipelineCreateInfo(x::GraphicsPipelineCreateInfo) = _GraphicsPipelineCreateInfo(convert_nonnull(Vector{_PipelineShaderStageCreateInfo}, x.stages), convert_nonnull(_PipelineRasterizationStateCreateInfo, x.rasterization_state), x.layout, x.render_pass, x.subpass, x.base_pipeline_index; x.next, x.flags, vertex_input_state = convert_nonnull(_PipelineVertexInputStateCreateInfo, x.vertex_input_state), input_assembly_state = convert_nonnull(_PipelineInputAssemblyStateCreateInfo, x.input_assembly_state), tessellation_state = convert_nonnull(_PipelineTessellationStateCreateInfo, x.tessellation_state), viewport_state = convert_nonnull(_PipelineViewportStateCreateInfo, x.viewport_state), multisample_state = convert_nonnull(_PipelineMultisampleStateCreateInfo, x.multisample_state), depth_stencil_state = convert_nonnull(_PipelineDepthStencilStateCreateInfo, x.depth_stencil_state), color_blend_state = convert_nonnull(_PipelineColorBlendStateCreateInfo, x.color_blend_state), dynamic_state = convert_nonnull(_PipelineDynamicStateCreateInfo, x.dynamic_state), x.base_pipeline_handle)

"""

"""
_PipelineCacheCreateInfo(x::PipelineCacheCreateInfo) = _PipelineCacheCreateInfo(x.initial_data; x.next, x.flags, x.initial_data_size)

"""

"""
_PushConstantRange(x::PushConstantRange) = _PushConstantRange(x.stage_flags, x.offset, x.size)

"""

"""
_PipelineLayoutCreateInfo(x::PipelineLayoutCreateInfo) = _PipelineLayoutCreateInfo(x.set_layouts, convert_nonnull(Vector{_PushConstantRange}, x.push_constant_ranges); x.next, x.flags)

"""

"""
_SamplerCreateInfo(x::SamplerCreateInfo) = _SamplerCreateInfo(x.mag_filter, x.min_filter, x.mipmap_mode, x.address_mode_u, x.address_mode_v, x.address_mode_w, x.mip_lod_bias, x.anisotropy_enable, x.max_anisotropy, x.compare_enable, x.compare_op, x.min_lod, x.max_lod, x.border_color, x.unnormalized_coordinates; x.next, x.flags)

"""

"""
_CommandPoolCreateInfo(x::CommandPoolCreateInfo) = _CommandPoolCreateInfo(x.queue_family_index; x.next, x.flags)

"""

"""
_CommandBufferAllocateInfo(x::CommandBufferAllocateInfo) = _CommandBufferAllocateInfo(x.command_pool, x.level, x.command_buffer_count; x.next)

"""

"""
_CommandBufferInheritanceInfo(x::CommandBufferInheritanceInfo) = _CommandBufferInheritanceInfo(x.subpass, x.occlusion_query_enable; x.next, x.render_pass, x.framebuffer, x.query_flags, x.pipeline_statistics)

"""

"""
_CommandBufferBeginInfo(x::CommandBufferBeginInfo) = _CommandBufferBeginInfo(; x.next, x.flags, inheritance_info = convert_nonnull(_CommandBufferInheritanceInfo, x.inheritance_info))

"""

"""
_RenderPassBeginInfo(x::RenderPassBeginInfo) = _RenderPassBeginInfo(x.render_pass, x.framebuffer, convert_nonnull(_Rect2D, x.render_area), x.clear_values; x.next)

"""

"""
_ClearDepthStencilValue(x::ClearDepthStencilValue) = _ClearDepthStencilValue(x.depth, x.stencil)

"""

"""
_ClearAttachment(x::ClearAttachment) = _ClearAttachment(x.aspect_mask, x.color_attachment, x.clear_value)

"""

"""
_AttachmentDescription(x::AttachmentDescription) = _AttachmentDescription(x.format, x.samples, x.load_op, x.store_op, x.stencil_load_op, x.stencil_store_op, x.initial_layout, x.final_layout; x.flags)

"""

"""
_AttachmentReference(x::AttachmentReference) = _AttachmentReference(x.attachment, x.layout)

"""

"""
_SubpassDescription(x::SubpassDescription) = _SubpassDescription(x.pipeline_bind_point, convert_nonnull(Vector{_AttachmentReference}, x.input_attachments), convert_nonnull(Vector{_AttachmentReference}, x.color_attachments), x.preserve_attachments; x.flags, resolve_attachments = convert_nonnull(Vector{_AttachmentReference}, x.resolve_attachments), depth_stencil_attachment = convert_nonnull(_AttachmentReference, x.depth_stencil_attachment))

"""

"""
_SubpassDependency(x::SubpassDependency) = _SubpassDependency(x.src_subpass, x.dst_subpass; x.src_stage_mask, x.dst_stage_mask, x.src_access_mask, x.dst_access_mask, x.dependency_flags)

"""

"""
_RenderPassCreateInfo(x::RenderPassCreateInfo) = _RenderPassCreateInfo(convert_nonnull(Vector{_AttachmentDescription}, x.attachments), convert_nonnull(Vector{_SubpassDescription}, x.subpasses), convert_nonnull(Vector{_SubpassDependency}, x.dependencies); x.next, x.flags)

"""

"""
_EventCreateInfo(x::EventCreateInfo) = _EventCreateInfo(; x.next, x.flags)

"""

"""
_FenceCreateInfo(x::FenceCreateInfo) = _FenceCreateInfo(; x.next, x.flags)

"""

"""
_PhysicalDeviceFeatures(x::PhysicalDeviceFeatures) = _PhysicalDeviceFeatures(x.robust_buffer_access, x.full_draw_index_uint_32, x.image_cube_array, x.independent_blend, x.geometry_shader, x.tessellation_shader, x.sample_rate_shading, x.dual_src_blend, x.logic_op, x.multi_draw_indirect, x.draw_indirect_first_instance, x.depth_clamp, x.depth_bias_clamp, x.fill_mode_non_solid, x.depth_bounds, x.wide_lines, x.large_points, x.alpha_to_one, x.multi_viewport, x.sampler_anisotropy, x.texture_compression_etc_2, x.texture_compression_astc_ldr, x.texture_compression_bc, x.occlusion_query_precise, x.pipeline_statistics_query, x.vertex_pipeline_stores_and_atomics, x.fragment_stores_and_atomics, x.shader_tessellation_and_geometry_point_size, x.shader_image_gather_extended, x.shader_storage_image_extended_formats, x.shader_storage_image_multisample, x.shader_storage_image_read_without_format, x.shader_storage_image_write_without_format, x.shader_uniform_buffer_array_dynamic_indexing, x.shader_sampled_image_array_dynamic_indexing, x.shader_storage_buffer_array_dynamic_indexing, x.shader_storage_image_array_dynamic_indexing, x.shader_clip_distance, x.shader_cull_distance, x.shader_float_64, x.shader_int_64, x.shader_int_16, x.shader_resource_residency, x.shader_resource_min_lod, x.sparse_binding, x.sparse_residency_buffer, x.sparse_residency_image_2_d, x.sparse_residency_image_3_d, x.sparse_residency_2_samples, x.sparse_residency_4_samples, x.sparse_residency_8_samples, x.sparse_residency_16_samples, x.sparse_residency_aliased, x.variable_multisample_rate, x.inherited_queries)

"""

"""
_SemaphoreCreateInfo(x::SemaphoreCreateInfo) = _SemaphoreCreateInfo(; x.next, x.flags)

"""

"""
_QueryPoolCreateInfo(x::QueryPoolCreateInfo) = _QueryPoolCreateInfo(x.query_type, x.query_count; x.next, x.flags, x.pipeline_statistics)

"""

"""
_FramebufferCreateInfo(x::FramebufferCreateInfo) = _FramebufferCreateInfo(x.render_pass, x.attachments, x.width, x.height, x.layers; x.next, x.flags)

"""

"""
_DrawIndirectCommand(x::DrawIndirectCommand) = _DrawIndirectCommand(x.vertex_count, x.instance_count, x.first_vertex, x.first_instance)

"""

"""
_DrawIndexedIndirectCommand(x::DrawIndexedIndirectCommand) = _DrawIndexedIndirectCommand(x.index_count, x.instance_count, x.first_index, x.vertex_offset, x.first_instance)

"""

"""
_DispatchIndirectCommand(x::DispatchIndirectCommand) = _DispatchIndirectCommand(x.x, x.y, x.z)

"""

"""
_SubmitInfo(x::SubmitInfo) = _SubmitInfo(x.wait_semaphores, x.wait_dst_stage_mask, x.command_buffers, x.signal_semaphores; x.next)

"""

"""
_DisplayModeParametersKHR(x::DisplayModeParametersKHR) = _DisplayModeParametersKHR(convert_nonnull(_Extent2D, x.visible_region), x.refresh_rate)

"""

"""
_DisplayModeCreateInfoKHR(x::DisplayModeCreateInfoKHR) = _DisplayModeCreateInfoKHR(convert_nonnull(_DisplayModeParametersKHR, x.parameters); x.next, x.flags)

"""

"""
_DisplaySurfaceCreateInfoKHR(x::DisplaySurfaceCreateInfoKHR) = _DisplaySurfaceCreateInfoKHR(x.display_mode, x.plane_index, x.plane_stack_index, x.transform, x.global_alpha, x.alpha_mode, convert_nonnull(_Extent2D, x.image_extent); x.next, x.flags)

"""

"""
_DisplayPresentInfoKHR(x::DisplayPresentInfoKHR) = _DisplayPresentInfoKHR(convert_nonnull(_Rect2D, x.src_rect), convert_nonnull(_Rect2D, x.dst_rect), x.persistent; x.next)

"""

"""
_Win32SurfaceCreateInfoKHR(x::Win32SurfaceCreateInfoKHR) = _Win32SurfaceCreateInfoKHR(x.hinstance, x.hwnd; x.next, x.flags)

"""

"""
_SwapchainCreateInfoKHR(x::SwapchainCreateInfoKHR) = _SwapchainCreateInfoKHR(x.surface, x.min_image_count, x.image_format, x.image_color_space, convert_nonnull(_Extent2D, x.image_extent), x.image_array_layers, x.image_usage, x.image_sharing_mode, x.queue_family_indices, x.pre_transform, x.composite_alpha, x.present_mode, x.clipped; x.next, x.flags, x.old_swapchain)

"""

"""
_PresentInfoKHR(x::PresentInfoKHR) = _PresentInfoKHR(x.wait_semaphores, x.swapchains, x.image_indices; x.next, x.results)

"""

"""
_DebugReportCallbackCreateInfoEXT(x::DebugReportCallbackCreateInfoEXT) = _DebugReportCallbackCreateInfoEXT(x.pfn_callback; x.next, x.flags, x.user_data)

"""

"""
_ValidationFlagsEXT(x::ValidationFlagsEXT) = _ValidationFlagsEXT(x.disabled_validation_checks; x.next)

"""

"""
_ValidationFeaturesEXT(x::ValidationFeaturesEXT) = _ValidationFeaturesEXT(x.enabled_validation_features, x.disabled_validation_features; x.next)

"""

"""
_PipelineRasterizationStateRasterizationOrderAMD(x::PipelineRasterizationStateRasterizationOrderAMD) = _PipelineRasterizationStateRasterizationOrderAMD(x.rasterization_order; x.next)

"""

"""
_DebugMarkerObjectNameInfoEXT(x::DebugMarkerObjectNameInfoEXT) = _DebugMarkerObjectNameInfoEXT(x.object_type, x.object, x.object_name; x.next)

"""

"""
_DebugMarkerObjectTagInfoEXT(x::DebugMarkerObjectTagInfoEXT) = _DebugMarkerObjectTagInfoEXT(x.object_type, x.object, x.tag_name, x.tag_size, x.tag; x.next)

"""

"""
_DebugMarkerMarkerInfoEXT(x::DebugMarkerMarkerInfoEXT) = _DebugMarkerMarkerInfoEXT(x.marker_name, x.color; x.next)

"""

"""
_DedicatedAllocationImageCreateInfoNV(x::DedicatedAllocationImageCreateInfoNV) = _DedicatedAllocationImageCreateInfoNV(x.dedicated_allocation; x.next)

"""

"""
_DedicatedAllocationBufferCreateInfoNV(x::DedicatedAllocationBufferCreateInfoNV) = _DedicatedAllocationBufferCreateInfoNV(x.dedicated_allocation; x.next)

"""

"""
_DedicatedAllocationMemoryAllocateInfoNV(x::DedicatedAllocationMemoryAllocateInfoNV) = _DedicatedAllocationMemoryAllocateInfoNV(; x.next, x.image, x.buffer)

"""

"""
_ExternalMemoryImageCreateInfoNV(x::ExternalMemoryImageCreateInfoNV) = _ExternalMemoryImageCreateInfoNV(; x.next, x.handle_types)

"""

"""
_ExportMemoryAllocateInfoNV(x::ExportMemoryAllocateInfoNV) = _ExportMemoryAllocateInfoNV(; x.next, x.handle_types)

"""

"""
_ImportMemoryWin32HandleInfoNV(x::ImportMemoryWin32HandleInfoNV) = _ImportMemoryWin32HandleInfoNV(; x.next, x.handle_type, x.handle)

"""

"""
_ExportMemoryWin32HandleInfoNV(x::ExportMemoryWin32HandleInfoNV) = _ExportMemoryWin32HandleInfoNV(; x.next, x.attributes, x.dw_access)

"""

"""
_Win32KeyedMutexAcquireReleaseInfoNV(x::Win32KeyedMutexAcquireReleaseInfoNV) = _Win32KeyedMutexAcquireReleaseInfoNV(x.acquire_syncs, x.acquire_keys, x.acquire_timeout_milliseconds, x.release_syncs, x.release_keys; x.next)

"""

"""
_PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(x::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV) = _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(x.device_generated_commands; x.next)

"""

"""
_DevicePrivateDataCreateInfoEXT(x::DevicePrivateDataCreateInfoEXT) = _DevicePrivateDataCreateInfoEXT(x.private_data_slot_request_count; x.next)

"""

"""
_PrivateDataSlotCreateInfoEXT(x::PrivateDataSlotCreateInfoEXT) = _PrivateDataSlotCreateInfoEXT(x.flags; x.next)

"""

"""
_PhysicalDevicePrivateDataFeaturesEXT(x::PhysicalDevicePrivateDataFeaturesEXT) = _PhysicalDevicePrivateDataFeaturesEXT(x.private_data; x.next)

"""

"""
_GraphicsShaderGroupCreateInfoNV(x::GraphicsShaderGroupCreateInfoNV) = _GraphicsShaderGroupCreateInfoNV(convert_nonnull(Vector{_PipelineShaderStageCreateInfo}, x.stages); x.next, vertex_input_state = convert_nonnull(_PipelineVertexInputStateCreateInfo, x.vertex_input_state), tessellation_state = convert_nonnull(_PipelineTessellationStateCreateInfo, x.tessellation_state))

"""

"""
_GraphicsPipelineShaderGroupsCreateInfoNV(x::GraphicsPipelineShaderGroupsCreateInfoNV) = _GraphicsPipelineShaderGroupsCreateInfoNV(convert_nonnull(Vector{_GraphicsShaderGroupCreateInfoNV}, x.groups), x.pipelines; x.next)

"""

"""
_BindShaderGroupIndirectCommandNV(x::BindShaderGroupIndirectCommandNV) = _BindShaderGroupIndirectCommandNV(x.group_index)

"""

"""
_BindIndexBufferIndirectCommandNV(x::BindIndexBufferIndirectCommandNV) = _BindIndexBufferIndirectCommandNV(x.buffer_address, x.size, x.index_type)

"""

"""
_BindVertexBufferIndirectCommandNV(x::BindVertexBufferIndirectCommandNV) = _BindVertexBufferIndirectCommandNV(x.buffer_address, x.size, x.stride)

"""

"""
_SetStateFlagsIndirectCommandNV(x::SetStateFlagsIndirectCommandNV) = _SetStateFlagsIndirectCommandNV(x.data)

"""

"""
_IndirectCommandsStreamNV(x::IndirectCommandsStreamNV) = _IndirectCommandsStreamNV(x.buffer, x.offset)

"""

"""
_IndirectCommandsLayoutTokenNV(x::IndirectCommandsLayoutTokenNV) = _IndirectCommandsLayoutTokenNV(x.token_type, x.stream, x.offset, x.vertex_binding_unit, x.vertex_dynamic_stride, x.pushconstant_offset, x.pushconstant_size, x.index_types, x.index_type_values; x.next, x.pushconstant_pipeline_layout, x.pushconstant_shader_stage_flags, x.indirect_state_flags)

"""

"""
_IndirectCommandsLayoutCreateInfoNV(x::IndirectCommandsLayoutCreateInfoNV) = _IndirectCommandsLayoutCreateInfoNV(x.pipeline_bind_point, convert_nonnull(Vector{_IndirectCommandsLayoutTokenNV}, x.tokens), x.stream_strides; x.next, x.flags)

"""

"""
_GeneratedCommandsInfoNV(x::GeneratedCommandsInfoNV) = _GeneratedCommandsInfoNV(x.pipeline_bind_point, x.pipeline, x.indirect_commands_layout, convert_nonnull(Vector{_IndirectCommandsStreamNV}, x.streams), x.sequences_count, x.preprocess_buffer, x.preprocess_offset, x.preprocess_size, x.sequences_count_offset, x.sequences_index_offset; x.next, x.sequences_count_buffer, x.sequences_index_buffer)

"""

"""
_GeneratedCommandsMemoryRequirementsInfoNV(x::GeneratedCommandsMemoryRequirementsInfoNV) = _GeneratedCommandsMemoryRequirementsInfoNV(x.pipeline_bind_point, x.pipeline, x.indirect_commands_layout, x.max_sequences_count; x.next)

"""

"""
_PhysicalDeviceFeatures2(x::PhysicalDeviceFeatures2) = _PhysicalDeviceFeatures2(convert_nonnull(_PhysicalDeviceFeatures, x.features); x.next)

"""

"""
_PhysicalDeviceImageFormatInfo2(x::PhysicalDeviceImageFormatInfo2) = _PhysicalDeviceImageFormatInfo2(x.format, x.type, x.tiling, x.usage; x.next, x.flags)

"""

"""
_PhysicalDeviceSparseImageFormatInfo2(x::PhysicalDeviceSparseImageFormatInfo2) = _PhysicalDeviceSparseImageFormatInfo2(x.format, x.type, x.samples, x.usage, x.tiling; x.next)

"""

"""
_ConformanceVersion(x::ConformanceVersion) = _ConformanceVersion(x.major, x.minor, x.subminor, x.patch)

"""

"""
_PresentRegionsKHR(x::PresentRegionsKHR) = _PresentRegionsKHR(; x.next, regions = convert_nonnull(Vector{_PresentRegionKHR}, x.regions))

"""

"""
_PresentRegionKHR(x::PresentRegionKHR) = _PresentRegionKHR(; rectangles = convert_nonnull(Vector{_RectLayerKHR}, x.rectangles))

"""

"""
_RectLayerKHR(x::RectLayerKHR) = _RectLayerKHR(convert_nonnull(_Offset2D, x.offset), convert_nonnull(_Extent2D, x.extent), x.layer)

"""

"""
_PhysicalDeviceVariablePointersFeatures(x::PhysicalDeviceVariablePointersFeatures) = _PhysicalDeviceVariablePointersFeatures(x.variable_pointers_storage_buffer, x.variable_pointers; x.next)

"""

"""
_PhysicalDeviceExternalImageFormatInfo(x::PhysicalDeviceExternalImageFormatInfo) = _PhysicalDeviceExternalImageFormatInfo(; x.next, x.handle_type)

"""

"""
_PhysicalDeviceExternalBufferInfo(x::PhysicalDeviceExternalBufferInfo) = _PhysicalDeviceExternalBufferInfo(x.usage, x.handle_type; x.next, x.flags)

"""

"""
_ExternalMemoryImageCreateInfo(x::ExternalMemoryImageCreateInfo) = _ExternalMemoryImageCreateInfo(; x.next, x.handle_types)

"""

"""
_ExternalMemoryBufferCreateInfo(x::ExternalMemoryBufferCreateInfo) = _ExternalMemoryBufferCreateInfo(; x.next, x.handle_types)

"""

"""
_ExportMemoryAllocateInfo(x::ExportMemoryAllocateInfo) = _ExportMemoryAllocateInfo(; x.next, x.handle_types)

"""

"""
_ImportMemoryWin32HandleInfoKHR(x::ImportMemoryWin32HandleInfoKHR) = _ImportMemoryWin32HandleInfoKHR(; x.next, x.handle_type, x.handle, x.name)

"""

"""
_ExportMemoryWin32HandleInfoKHR(x::ExportMemoryWin32HandleInfoKHR) = _ExportMemoryWin32HandleInfoKHR(x.dw_access, x.name; x.next, x.attributes)

"""

"""
_MemoryGetWin32HandleInfoKHR(x::MemoryGetWin32HandleInfoKHR) = _MemoryGetWin32HandleInfoKHR(x.memory, x.handle_type; x.next)

"""

"""
_ImportMemoryFdInfoKHR(x::ImportMemoryFdInfoKHR) = _ImportMemoryFdInfoKHR(x.fd; x.next, x.handle_type)

"""

"""
_MemoryGetFdInfoKHR(x::MemoryGetFdInfoKHR) = _MemoryGetFdInfoKHR(x.memory, x.handle_type; x.next)

"""

"""
_Win32KeyedMutexAcquireReleaseInfoKHR(x::Win32KeyedMutexAcquireReleaseInfoKHR) = _Win32KeyedMutexAcquireReleaseInfoKHR(x.acquire_syncs, x.acquire_keys, x.acquire_timeouts, x.release_syncs, x.release_keys; x.next)

"""

"""
_PhysicalDeviceExternalSemaphoreInfo(x::PhysicalDeviceExternalSemaphoreInfo) = _PhysicalDeviceExternalSemaphoreInfo(x.handle_type; x.next)

"""

"""
_ExportSemaphoreCreateInfo(x::ExportSemaphoreCreateInfo) = _ExportSemaphoreCreateInfo(; x.next, x.handle_types)

"""

"""
_ImportSemaphoreWin32HandleInfoKHR(x::ImportSemaphoreWin32HandleInfoKHR) = _ImportSemaphoreWin32HandleInfoKHR(x.semaphore, x.handle_type; x.next, x.flags, x.handle, x.name)

"""

"""
_ExportSemaphoreWin32HandleInfoKHR(x::ExportSemaphoreWin32HandleInfoKHR) = _ExportSemaphoreWin32HandleInfoKHR(x.dw_access, x.name; x.next, x.attributes)

"""

"""
_D3D12FenceSubmitInfoKHR(x::D3D12FenceSubmitInfoKHR) = _D3D12FenceSubmitInfoKHR(; x.next, x.wait_semaphore_values, x.signal_semaphore_values)

"""

"""
_SemaphoreGetWin32HandleInfoKHR(x::SemaphoreGetWin32HandleInfoKHR) = _SemaphoreGetWin32HandleInfoKHR(x.semaphore, x.handle_type; x.next)

"""

"""
_ImportSemaphoreFdInfoKHR(x::ImportSemaphoreFdInfoKHR) = _ImportSemaphoreFdInfoKHR(x.semaphore, x.handle_type, x.fd; x.next, x.flags)

"""

"""
_SemaphoreGetFdInfoKHR(x::SemaphoreGetFdInfoKHR) = _SemaphoreGetFdInfoKHR(x.semaphore, x.handle_type; x.next)

"""

"""
_PhysicalDeviceExternalFenceInfo(x::PhysicalDeviceExternalFenceInfo) = _PhysicalDeviceExternalFenceInfo(x.handle_type; x.next)

"""

"""
_ExportFenceCreateInfo(x::ExportFenceCreateInfo) = _ExportFenceCreateInfo(; x.next, x.handle_types)

"""

"""
_ImportFenceWin32HandleInfoKHR(x::ImportFenceWin32HandleInfoKHR) = _ImportFenceWin32HandleInfoKHR(x.fence, x.handle_type; x.next, x.flags, x.handle, x.name)

"""

"""
_ExportFenceWin32HandleInfoKHR(x::ExportFenceWin32HandleInfoKHR) = _ExportFenceWin32HandleInfoKHR(x.dw_access, x.name; x.next, x.attributes)

"""

"""
_FenceGetWin32HandleInfoKHR(x::FenceGetWin32HandleInfoKHR) = _FenceGetWin32HandleInfoKHR(x.fence, x.handle_type; x.next)

"""

"""
_ImportFenceFdInfoKHR(x::ImportFenceFdInfoKHR) = _ImportFenceFdInfoKHR(x.fence, x.handle_type, x.fd; x.next, x.flags)

"""

"""
_FenceGetFdInfoKHR(x::FenceGetFdInfoKHR) = _FenceGetFdInfoKHR(x.fence, x.handle_type; x.next)

"""

"""
_PhysicalDeviceMultiviewFeatures(x::PhysicalDeviceMultiviewFeatures) = _PhysicalDeviceMultiviewFeatures(x.multiview, x.multiview_geometry_shader, x.multiview_tessellation_shader; x.next)

"""

"""
_RenderPassMultiviewCreateInfo(x::RenderPassMultiviewCreateInfo) = _RenderPassMultiviewCreateInfo(x.view_masks, x.view_offsets, x.correlation_masks; x.next)

"""

"""
_DisplayPowerInfoEXT(x::DisplayPowerInfoEXT) = _DisplayPowerInfoEXT(x.power_state; x.next)

"""

"""
_DeviceEventInfoEXT(x::DeviceEventInfoEXT) = _DeviceEventInfoEXT(x.device_event; x.next)

"""

"""
_DisplayEventInfoEXT(x::DisplayEventInfoEXT) = _DisplayEventInfoEXT(x.display_event; x.next)

"""

"""
_SwapchainCounterCreateInfoEXT(x::SwapchainCounterCreateInfoEXT) = _SwapchainCounterCreateInfoEXT(; x.next, x.surface_counters)

"""

"""
_MemoryAllocateFlagsInfo(x::MemoryAllocateFlagsInfo) = _MemoryAllocateFlagsInfo(x.device_mask; x.next, x.flags)

"""

"""
_BindBufferMemoryInfo(x::BindBufferMemoryInfo) = _BindBufferMemoryInfo(x.buffer, x.memory, x.memory_offset; x.next)

"""

"""
_BindBufferMemoryDeviceGroupInfo(x::BindBufferMemoryDeviceGroupInfo) = _BindBufferMemoryDeviceGroupInfo(x.device_indices; x.next)

"""

"""
_BindImageMemoryInfo(x::BindImageMemoryInfo) = _BindImageMemoryInfo(x.image, x.memory, x.memory_offset; x.next)

"""

"""
_BindImageMemoryDeviceGroupInfo(x::BindImageMemoryDeviceGroupInfo) = _BindImageMemoryDeviceGroupInfo(x.device_indices, convert_nonnull(Vector{_Rect2D}, x.split_instance_bind_regions); x.next)

"""

"""
_DeviceGroupRenderPassBeginInfo(x::DeviceGroupRenderPassBeginInfo) = _DeviceGroupRenderPassBeginInfo(x.device_mask, convert_nonnull(Vector{_Rect2D}, x.device_render_areas); x.next)

"""

"""
_DeviceGroupCommandBufferBeginInfo(x::DeviceGroupCommandBufferBeginInfo) = _DeviceGroupCommandBufferBeginInfo(x.device_mask; x.next)

"""

"""
_DeviceGroupSubmitInfo(x::DeviceGroupSubmitInfo) = _DeviceGroupSubmitInfo(x.wait_semaphore_device_indices, x.command_buffer_device_masks, x.signal_semaphore_device_indices; x.next)

"""

"""
_DeviceGroupBindSparseInfo(x::DeviceGroupBindSparseInfo) = _DeviceGroupBindSparseInfo(x.resource_device_index, x.memory_device_index; x.next)

"""

"""
_ImageSwapchainCreateInfoKHR(x::ImageSwapchainCreateInfoKHR) = _ImageSwapchainCreateInfoKHR(; x.next, x.swapchain)

"""

"""
_BindImageMemorySwapchainInfoKHR(x::BindImageMemorySwapchainInfoKHR) = _BindImageMemorySwapchainInfoKHR(x.swapchain, x.image_index; x.next)

"""

"""
_AcquireNextImageInfoKHR(x::AcquireNextImageInfoKHR) = _AcquireNextImageInfoKHR(x.swapchain, x.timeout, x.device_mask; x.next, x.semaphore, x.fence)

"""

"""
_DeviceGroupPresentInfoKHR(x::DeviceGroupPresentInfoKHR) = _DeviceGroupPresentInfoKHR(x.device_masks, x.mode; x.next)

"""

"""
_DeviceGroupDeviceCreateInfo(x::DeviceGroupDeviceCreateInfo) = _DeviceGroupDeviceCreateInfo(x.physical_devices; x.next)

"""

"""
_DeviceGroupSwapchainCreateInfoKHR(x::DeviceGroupSwapchainCreateInfoKHR) = _DeviceGroupSwapchainCreateInfoKHR(x.modes; x.next)

"""

"""
_DescriptorUpdateTemplateEntry(x::DescriptorUpdateTemplateEntry) = _DescriptorUpdateTemplateEntry(x.dst_binding, x.dst_array_element, x.descriptor_count, x.descriptor_type, x.offset, x.stride)

"""

"""
_DescriptorUpdateTemplateCreateInfo(x::DescriptorUpdateTemplateCreateInfo) = _DescriptorUpdateTemplateCreateInfo(convert_nonnull(Vector{_DescriptorUpdateTemplateEntry}, x.descriptor_update_entries), x.template_type, x.descriptor_set_layout, x.pipeline_bind_point, x.pipeline_layout, x.set; x.next, x.flags)

"""

"""
_XYColorEXT(x::XYColorEXT) = _XYColorEXT(x.x, x.y)

"""

"""
_HdrMetadataEXT(x::HdrMetadataEXT) = _HdrMetadataEXT(convert_nonnull(_XYColorEXT, x.display_primary_red), convert_nonnull(_XYColorEXT, x.display_primary_green), convert_nonnull(_XYColorEXT, x.display_primary_blue), convert_nonnull(_XYColorEXT, x.white_point), x.max_luminance, x.min_luminance, x.max_content_light_level, x.max_frame_average_light_level; x.next)

"""

"""
_SwapchainDisplayNativeHdrCreateInfoAMD(x::SwapchainDisplayNativeHdrCreateInfoAMD) = _SwapchainDisplayNativeHdrCreateInfoAMD(x.local_dimming_enable; x.next)

"""

"""
_PresentTimesInfoGOOGLE(x::PresentTimesInfoGOOGLE) = _PresentTimesInfoGOOGLE(; x.next, times = convert_nonnull(Vector{_PresentTimeGOOGLE}, x.times))

"""

"""
_PresentTimeGOOGLE(x::PresentTimeGOOGLE) = _PresentTimeGOOGLE(x.present_id, x.desired_present_time)

"""

"""
_ViewportWScalingNV(x::ViewportWScalingNV) = _ViewportWScalingNV(x.xcoeff, x.ycoeff)

"""

"""
_PipelineViewportWScalingStateCreateInfoNV(x::PipelineViewportWScalingStateCreateInfoNV) = _PipelineViewportWScalingStateCreateInfoNV(x.viewport_w_scaling_enable; x.next, viewport_w_scalings = convert_nonnull(Vector{_ViewportWScalingNV}, x.viewport_w_scalings))

"""

"""
_ViewportSwizzleNV(x::ViewportSwizzleNV) = _ViewportSwizzleNV(x.x, x.y, x.z, x.w)

"""

"""
_PipelineViewportSwizzleStateCreateInfoNV(x::PipelineViewportSwizzleStateCreateInfoNV) = _PipelineViewportSwizzleStateCreateInfoNV(convert_nonnull(Vector{_ViewportSwizzleNV}, x.viewport_swizzles); x.next, x.flags)

"""

"""
_PipelineDiscardRectangleStateCreateInfoEXT(x::PipelineDiscardRectangleStateCreateInfoEXT) = _PipelineDiscardRectangleStateCreateInfoEXT(x.discard_rectangle_mode, convert_nonnull(Vector{_Rect2D}, x.discard_rectangles); x.next, x.flags)

"""

"""
_InputAttachmentAspectReference(x::InputAttachmentAspectReference) = _InputAttachmentAspectReference(x.subpass, x.input_attachment_index, x.aspect_mask)

"""

"""
_RenderPassInputAttachmentAspectCreateInfo(x::RenderPassInputAttachmentAspectCreateInfo) = _RenderPassInputAttachmentAspectCreateInfo(convert_nonnull(Vector{_InputAttachmentAspectReference}, x.aspect_references); x.next)

"""

"""
_PhysicalDeviceSurfaceInfo2KHR(x::PhysicalDeviceSurfaceInfo2KHR) = _PhysicalDeviceSurfaceInfo2KHR(x.surface; x.next)

"""

"""
_DisplayPlaneInfo2KHR(x::DisplayPlaneInfo2KHR) = _DisplayPlaneInfo2KHR(x.mode, x.plane_index; x.next)

"""

"""
_PhysicalDevice16BitStorageFeatures(x::PhysicalDevice16BitStorageFeatures) = _PhysicalDevice16BitStorageFeatures(x.storage_buffer_16_bit_access, x.uniform_and_storage_buffer_16_bit_access, x.storage_push_constant_16, x.storage_input_output_16; x.next)

"""

"""
_PhysicalDeviceShaderSubgroupExtendedTypesFeatures(x::PhysicalDeviceShaderSubgroupExtendedTypesFeatures) = _PhysicalDeviceShaderSubgroupExtendedTypesFeatures(x.shader_subgroup_extended_types; x.next)

"""

"""
_BufferMemoryRequirementsInfo2(x::BufferMemoryRequirementsInfo2) = _BufferMemoryRequirementsInfo2(x.buffer; x.next)

"""

"""
_ImageMemoryRequirementsInfo2(x::ImageMemoryRequirementsInfo2) = _ImageMemoryRequirementsInfo2(x.image; x.next)

"""

"""
_ImageSparseMemoryRequirementsInfo2(x::ImageSparseMemoryRequirementsInfo2) = _ImageSparseMemoryRequirementsInfo2(x.image; x.next)

"""

"""
_MemoryDedicatedAllocateInfo(x::MemoryDedicatedAllocateInfo) = _MemoryDedicatedAllocateInfo(; x.next, x.image, x.buffer)

"""

"""
_ImageViewUsageCreateInfo(x::ImageViewUsageCreateInfo) = _ImageViewUsageCreateInfo(x.usage; x.next)

"""

"""
_PipelineTessellationDomainOriginStateCreateInfo(x::PipelineTessellationDomainOriginStateCreateInfo) = _PipelineTessellationDomainOriginStateCreateInfo(x.domain_origin; x.next)

"""

"""
_SamplerYcbcrConversionInfo(x::SamplerYcbcrConversionInfo) = _SamplerYcbcrConversionInfo(x.conversion; x.next)

"""

"""
_SamplerYcbcrConversionCreateInfo(x::SamplerYcbcrConversionCreateInfo) = _SamplerYcbcrConversionCreateInfo(x.format, x.ycbcr_model, x.ycbcr_range, convert_nonnull(_ComponentMapping, x.components), x.x_chroma_offset, x.y_chroma_offset, x.chroma_filter, x.force_explicit_reconstruction; x.next)

"""

"""
_BindImagePlaneMemoryInfo(x::BindImagePlaneMemoryInfo) = _BindImagePlaneMemoryInfo(x.plane_aspect; x.next)

"""

"""
_ImagePlaneMemoryRequirementsInfo(x::ImagePlaneMemoryRequirementsInfo) = _ImagePlaneMemoryRequirementsInfo(x.plane_aspect; x.next)

"""

"""
_PhysicalDeviceSamplerYcbcrConversionFeatures(x::PhysicalDeviceSamplerYcbcrConversionFeatures) = _PhysicalDeviceSamplerYcbcrConversionFeatures(x.sampler_ycbcr_conversion; x.next)

"""

"""
_ConditionalRenderingBeginInfoEXT(x::ConditionalRenderingBeginInfoEXT) = _ConditionalRenderingBeginInfoEXT(x.buffer, x.offset; x.next, x.flags)

"""

"""
_ProtectedSubmitInfo(x::ProtectedSubmitInfo) = _ProtectedSubmitInfo(x.protected_submit; x.next)

"""

"""
_PhysicalDeviceProtectedMemoryFeatures(x::PhysicalDeviceProtectedMemoryFeatures) = _PhysicalDeviceProtectedMemoryFeatures(x.protected_memory; x.next)

"""

"""
_DeviceQueueInfo2(x::DeviceQueueInfo2) = _DeviceQueueInfo2(x.queue_family_index, x.queue_index; x.next, x.flags)

"""

"""
_PipelineCoverageToColorStateCreateInfoNV(x::PipelineCoverageToColorStateCreateInfoNV) = _PipelineCoverageToColorStateCreateInfoNV(x.coverage_to_color_enable; x.next, x.flags, x.coverage_to_color_location)

"""

"""
_SampleLocationEXT(x::SampleLocationEXT) = _SampleLocationEXT(x.x, x.y)

"""

"""
_SampleLocationsInfoEXT(x::SampleLocationsInfoEXT) = _SampleLocationsInfoEXT(x.sample_locations_per_pixel, convert_nonnull(_Extent2D, x.sample_location_grid_size), convert_nonnull(Vector{_SampleLocationEXT}, x.sample_locations); x.next)

"""

"""
_AttachmentSampleLocationsEXT(x::AttachmentSampleLocationsEXT) = _AttachmentSampleLocationsEXT(x.attachment_index, convert_nonnull(_SampleLocationsInfoEXT, x.sample_locations_info))

"""

"""
_SubpassSampleLocationsEXT(x::SubpassSampleLocationsEXT) = _SubpassSampleLocationsEXT(x.subpass_index, convert_nonnull(_SampleLocationsInfoEXT, x.sample_locations_info))

"""

"""
_RenderPassSampleLocationsBeginInfoEXT(x::RenderPassSampleLocationsBeginInfoEXT) = _RenderPassSampleLocationsBeginInfoEXT(convert_nonnull(Vector{_AttachmentSampleLocationsEXT}, x.attachment_initial_sample_locations), convert_nonnull(Vector{_SubpassSampleLocationsEXT}, x.post_subpass_sample_locations); x.next)

"""

"""
_PipelineSampleLocationsStateCreateInfoEXT(x::PipelineSampleLocationsStateCreateInfoEXT) = _PipelineSampleLocationsStateCreateInfoEXT(x.sample_locations_enable, convert_nonnull(_SampleLocationsInfoEXT, x.sample_locations_info); x.next)

"""

"""
_SamplerReductionModeCreateInfo(x::SamplerReductionModeCreateInfo) = _SamplerReductionModeCreateInfo(x.reduction_mode; x.next)

"""

"""
_PhysicalDeviceBlendOperationAdvancedFeaturesEXT(x::PhysicalDeviceBlendOperationAdvancedFeaturesEXT) = _PhysicalDeviceBlendOperationAdvancedFeaturesEXT(x.advanced_blend_coherent_operations; x.next)

"""

"""
_PipelineColorBlendAdvancedStateCreateInfoEXT(x::PipelineColorBlendAdvancedStateCreateInfoEXT) = _PipelineColorBlendAdvancedStateCreateInfoEXT(x.src_premultiplied, x.dst_premultiplied, x.blend_overlap; x.next)

"""

"""
_PhysicalDeviceInlineUniformBlockFeaturesEXT(x::PhysicalDeviceInlineUniformBlockFeaturesEXT) = _PhysicalDeviceInlineUniformBlockFeaturesEXT(x.inline_uniform_block, x.descriptor_binding_inline_uniform_block_update_after_bind; x.next)

"""

"""
_WriteDescriptorSetInlineUniformBlockEXT(x::WriteDescriptorSetInlineUniformBlockEXT) = _WriteDescriptorSetInlineUniformBlockEXT(x.data_size, x.data; x.next)

"""

"""
_DescriptorPoolInlineUniformBlockCreateInfoEXT(x::DescriptorPoolInlineUniformBlockCreateInfoEXT) = _DescriptorPoolInlineUniformBlockCreateInfoEXT(x.max_inline_uniform_block_bindings; x.next)

"""

"""
_PipelineCoverageModulationStateCreateInfoNV(x::PipelineCoverageModulationStateCreateInfoNV) = _PipelineCoverageModulationStateCreateInfoNV(x.coverage_modulation_mode, x.coverage_modulation_table_enable; x.next, x.flags, x.coverage_modulation_table)

"""

"""
_ImageFormatListCreateInfo(x::ImageFormatListCreateInfo) = _ImageFormatListCreateInfo(x.view_formats; x.next)

"""

"""
_ValidationCacheCreateInfoEXT(x::ValidationCacheCreateInfoEXT) = _ValidationCacheCreateInfoEXT(x.initial_data; x.next, x.flags, x.initial_data_size)

"""

"""
_ShaderModuleValidationCacheCreateInfoEXT(x::ShaderModuleValidationCacheCreateInfoEXT) = _ShaderModuleValidationCacheCreateInfoEXT(x.validation_cache; x.next)

"""

"""
_PhysicalDeviceShaderDrawParametersFeatures(x::PhysicalDeviceShaderDrawParametersFeatures) = _PhysicalDeviceShaderDrawParametersFeatures(x.shader_draw_parameters; x.next)

"""

"""
_PhysicalDeviceShaderFloat16Int8Features(x::PhysicalDeviceShaderFloat16Int8Features) = _PhysicalDeviceShaderFloat16Int8Features(x.shader_float_16, x.shader_int_8; x.next)

"""

"""
_PhysicalDeviceHostQueryResetFeatures(x::PhysicalDeviceHostQueryResetFeatures) = _PhysicalDeviceHostQueryResetFeatures(x.host_query_reset; x.next)

"""

"""
_DeviceQueueGlobalPriorityCreateInfoEXT(x::DeviceQueueGlobalPriorityCreateInfoEXT) = _DeviceQueueGlobalPriorityCreateInfoEXT(x.global_priority; x.next)

"""

"""
_DebugUtilsObjectNameInfoEXT(x::DebugUtilsObjectNameInfoEXT) = _DebugUtilsObjectNameInfoEXT(x.object_type, x.object_handle; x.next, x.object_name)

"""

"""
_DebugUtilsObjectTagInfoEXT(x::DebugUtilsObjectTagInfoEXT) = _DebugUtilsObjectTagInfoEXT(x.object_type, x.object_handle, x.tag_name, x.tag_size, x.tag; x.next)

"""

"""
_DebugUtilsLabelEXT(x::DebugUtilsLabelEXT) = _DebugUtilsLabelEXT(x.label_name, x.color; x.next)

"""

"""
_DebugUtilsMessengerCreateInfoEXT(x::DebugUtilsMessengerCreateInfoEXT) = _DebugUtilsMessengerCreateInfoEXT(x.message_severity, x.message_type, x.pfn_user_callback; x.next, x.flags, x.user_data)

"""

"""
_DebugUtilsMessengerCallbackDataEXT(x::DebugUtilsMessengerCallbackDataEXT) = _DebugUtilsMessengerCallbackDataEXT(x.message_id_number, x.message, convert_nonnull(Vector{_DebugUtilsLabelEXT}, x.queue_labels), convert_nonnull(Vector{_DebugUtilsLabelEXT}, x.cmd_buf_labels), convert_nonnull(Vector{_DebugUtilsObjectNameInfoEXT}, x.objects); x.next, x.flags, x.message_id_name)

"""

"""
_PhysicalDeviceDeviceMemoryReportFeaturesEXT(x::PhysicalDeviceDeviceMemoryReportFeaturesEXT) = _PhysicalDeviceDeviceMemoryReportFeaturesEXT(x.device_memory_report; x.next)

"""

"""
_DeviceDeviceMemoryReportCreateInfoEXT(x::DeviceDeviceMemoryReportCreateInfoEXT) = _DeviceDeviceMemoryReportCreateInfoEXT(x.flags, x.pfn_user_callback, x.user_data; x.next)

"""

"""
_ImportMemoryHostPointerInfoEXT(x::ImportMemoryHostPointerInfoEXT) = _ImportMemoryHostPointerInfoEXT(x.handle_type, x.host_pointer; x.next)

"""

"""
_CalibratedTimestampInfoEXT(x::CalibratedTimestampInfoEXT) = _CalibratedTimestampInfoEXT(x.time_domain; x.next)

"""

"""
_PipelineRasterizationConservativeStateCreateInfoEXT(x::PipelineRasterizationConservativeStateCreateInfoEXT) = _PipelineRasterizationConservativeStateCreateInfoEXT(x.conservative_rasterization_mode, x.extra_primitive_overestimation_size; x.next, x.flags)

"""

"""
_PhysicalDeviceDescriptorIndexingFeatures(x::PhysicalDeviceDescriptorIndexingFeatures) = _PhysicalDeviceDescriptorIndexingFeatures(x.shader_input_attachment_array_dynamic_indexing, x.shader_uniform_texel_buffer_array_dynamic_indexing, x.shader_storage_texel_buffer_array_dynamic_indexing, x.shader_uniform_buffer_array_non_uniform_indexing, x.shader_sampled_image_array_non_uniform_indexing, x.shader_storage_buffer_array_non_uniform_indexing, x.shader_storage_image_array_non_uniform_indexing, x.shader_input_attachment_array_non_uniform_indexing, x.shader_uniform_texel_buffer_array_non_uniform_indexing, x.shader_storage_texel_buffer_array_non_uniform_indexing, x.descriptor_binding_uniform_buffer_update_after_bind, x.descriptor_binding_sampled_image_update_after_bind, x.descriptor_binding_storage_image_update_after_bind, x.descriptor_binding_storage_buffer_update_after_bind, x.descriptor_binding_uniform_texel_buffer_update_after_bind, x.descriptor_binding_storage_texel_buffer_update_after_bind, x.descriptor_binding_update_unused_while_pending, x.descriptor_binding_partially_bound, x.descriptor_binding_variable_descriptor_count, x.runtime_descriptor_array; x.next)

"""

"""
_DescriptorSetLayoutBindingFlagsCreateInfo(x::DescriptorSetLayoutBindingFlagsCreateInfo) = _DescriptorSetLayoutBindingFlagsCreateInfo(x.binding_flags; x.next)

"""

"""
_DescriptorSetVariableDescriptorCountAllocateInfo(x::DescriptorSetVariableDescriptorCountAllocateInfo) = _DescriptorSetVariableDescriptorCountAllocateInfo(x.descriptor_counts; x.next)

"""

"""
_AttachmentDescription2(x::AttachmentDescription2) = _AttachmentDescription2(x.format, x.samples, x.load_op, x.store_op, x.stencil_load_op, x.stencil_store_op, x.initial_layout, x.final_layout; x.next, x.flags)

"""

"""
_AttachmentReference2(x::AttachmentReference2) = _AttachmentReference2(x.attachment, x.layout, x.aspect_mask; x.next)

"""

"""
_SubpassDescription2(x::SubpassDescription2) = _SubpassDescription2(x.pipeline_bind_point, x.view_mask, convert_nonnull(Vector{_AttachmentReference2}, x.input_attachments), convert_nonnull(Vector{_AttachmentReference2}, x.color_attachments), x.preserve_attachments; x.next, x.flags, resolve_attachments = convert_nonnull(Vector{_AttachmentReference2}, x.resolve_attachments), depth_stencil_attachment = convert_nonnull(_AttachmentReference2, x.depth_stencil_attachment))

"""

"""
_SubpassDependency2(x::SubpassDependency2) = _SubpassDependency2(x.src_subpass, x.dst_subpass, x.view_offset; x.next, x.src_stage_mask, x.dst_stage_mask, x.src_access_mask, x.dst_access_mask, x.dependency_flags)

"""

"""
_RenderPassCreateInfo2(x::RenderPassCreateInfo2) = _RenderPassCreateInfo2(convert_nonnull(Vector{_AttachmentDescription2}, x.attachments), convert_nonnull(Vector{_SubpassDescription2}, x.subpasses), convert_nonnull(Vector{_SubpassDependency2}, x.dependencies), x.correlated_view_masks; x.next, x.flags)

"""

"""
_SubpassBeginInfo(x::SubpassBeginInfo) = _SubpassBeginInfo(x.contents; x.next)

"""

"""
_SubpassEndInfo(x::SubpassEndInfo) = _SubpassEndInfo(; x.next)

"""

"""
_PhysicalDeviceTimelineSemaphoreFeatures(x::PhysicalDeviceTimelineSemaphoreFeatures) = _PhysicalDeviceTimelineSemaphoreFeatures(x.timeline_semaphore; x.next)

"""

"""
_SemaphoreTypeCreateInfo(x::SemaphoreTypeCreateInfo) = _SemaphoreTypeCreateInfo(x.semaphore_type, x.initial_value; x.next)

"""

"""
_TimelineSemaphoreSubmitInfo(x::TimelineSemaphoreSubmitInfo) = _TimelineSemaphoreSubmitInfo(; x.next, x.wait_semaphore_values, x.signal_semaphore_values)

"""

"""
_SemaphoreWaitInfo(x::SemaphoreWaitInfo) = _SemaphoreWaitInfo(x.semaphores, x.values; x.next, x.flags)

"""

"""
_SemaphoreSignalInfo(x::SemaphoreSignalInfo) = _SemaphoreSignalInfo(x.semaphore, x.value; x.next)

"""

"""
_VertexInputBindingDivisorDescriptionEXT(x::VertexInputBindingDivisorDescriptionEXT) = _VertexInputBindingDivisorDescriptionEXT(x.binding, x.divisor)

"""

"""
_PipelineVertexInputDivisorStateCreateInfoEXT(x::PipelineVertexInputDivisorStateCreateInfoEXT) = _PipelineVertexInputDivisorStateCreateInfoEXT(convert_nonnull(Vector{_VertexInputBindingDivisorDescriptionEXT}, x.vertex_binding_divisors); x.next)

"""

"""
_CommandBufferInheritanceConditionalRenderingInfoEXT(x::CommandBufferInheritanceConditionalRenderingInfoEXT) = _CommandBufferInheritanceConditionalRenderingInfoEXT(x.conditional_rendering_enable; x.next)

"""

"""
_PhysicalDevice8BitStorageFeatures(x::PhysicalDevice8BitStorageFeatures) = _PhysicalDevice8BitStorageFeatures(x.storage_buffer_8_bit_access, x.uniform_and_storage_buffer_8_bit_access, x.storage_push_constant_8; x.next)

"""

"""
_PhysicalDeviceConditionalRenderingFeaturesEXT(x::PhysicalDeviceConditionalRenderingFeaturesEXT) = _PhysicalDeviceConditionalRenderingFeaturesEXT(x.conditional_rendering, x.inherited_conditional_rendering; x.next)

"""

"""
_PhysicalDeviceVulkanMemoryModelFeatures(x::PhysicalDeviceVulkanMemoryModelFeatures) = _PhysicalDeviceVulkanMemoryModelFeatures(x.vulkan_memory_model, x.vulkan_memory_model_device_scope, x.vulkan_memory_model_availability_visibility_chains; x.next)

"""

"""
_PhysicalDeviceShaderAtomicInt64Features(x::PhysicalDeviceShaderAtomicInt64Features) = _PhysicalDeviceShaderAtomicInt64Features(x.shader_buffer_int_64_atomics, x.shader_shared_int_64_atomics; x.next)

"""

"""
_PhysicalDeviceShaderAtomicFloatFeaturesEXT(x::PhysicalDeviceShaderAtomicFloatFeaturesEXT) = _PhysicalDeviceShaderAtomicFloatFeaturesEXT(x.shader_buffer_float_32_atomics, x.shader_buffer_float_32_atomic_add, x.shader_buffer_float_64_atomics, x.shader_buffer_float_64_atomic_add, x.shader_shared_float_32_atomics, x.shader_shared_float_32_atomic_add, x.shader_shared_float_64_atomics, x.shader_shared_float_64_atomic_add, x.shader_image_float_32_atomics, x.shader_image_float_32_atomic_add, x.sparse_image_float_32_atomics, x.sparse_image_float_32_atomic_add; x.next)

"""

"""
_PhysicalDeviceVertexAttributeDivisorFeaturesEXT(x::PhysicalDeviceVertexAttributeDivisorFeaturesEXT) = _PhysicalDeviceVertexAttributeDivisorFeaturesEXT(x.vertex_attribute_instance_rate_divisor, x.vertex_attribute_instance_rate_zero_divisor; x.next)

"""

"""
_SubpassDescriptionDepthStencilResolve(x::SubpassDescriptionDepthStencilResolve) = _SubpassDescriptionDepthStencilResolve(x.depth_resolve_mode, x.stencil_resolve_mode; x.next, depth_stencil_resolve_attachment = convert_nonnull(_AttachmentReference2, x.depth_stencil_resolve_attachment))

"""

"""
_ImageViewASTCDecodeModeEXT(x::ImageViewASTCDecodeModeEXT) = _ImageViewASTCDecodeModeEXT(x.decode_mode; x.next)

"""

"""
_PhysicalDeviceASTCDecodeFeaturesEXT(x::PhysicalDeviceASTCDecodeFeaturesEXT) = _PhysicalDeviceASTCDecodeFeaturesEXT(x.decode_mode_shared_exponent; x.next)

"""

"""
_PhysicalDeviceTransformFeedbackFeaturesEXT(x::PhysicalDeviceTransformFeedbackFeaturesEXT) = _PhysicalDeviceTransformFeedbackFeaturesEXT(x.transform_feedback, x.geometry_streams; x.next)

"""

"""
_PipelineRasterizationStateStreamCreateInfoEXT(x::PipelineRasterizationStateStreamCreateInfoEXT) = _PipelineRasterizationStateStreamCreateInfoEXT(x.rasterization_stream; x.next, x.flags)

"""

"""
_PhysicalDeviceRepresentativeFragmentTestFeaturesNV(x::PhysicalDeviceRepresentativeFragmentTestFeaturesNV) = _PhysicalDeviceRepresentativeFragmentTestFeaturesNV(x.representative_fragment_test; x.next)

"""

"""
_PipelineRepresentativeFragmentTestStateCreateInfoNV(x::PipelineRepresentativeFragmentTestStateCreateInfoNV) = _PipelineRepresentativeFragmentTestStateCreateInfoNV(x.representative_fragment_test_enable; x.next)

"""

"""
_PhysicalDeviceExclusiveScissorFeaturesNV(x::PhysicalDeviceExclusiveScissorFeaturesNV) = _PhysicalDeviceExclusiveScissorFeaturesNV(x.exclusive_scissor; x.next)

"""

"""
_PipelineViewportExclusiveScissorStateCreateInfoNV(x::PipelineViewportExclusiveScissorStateCreateInfoNV) = _PipelineViewportExclusiveScissorStateCreateInfoNV(convert_nonnull(Vector{_Rect2D}, x.exclusive_scissors); x.next)

"""

"""
_PhysicalDeviceCornerSampledImageFeaturesNV(x::PhysicalDeviceCornerSampledImageFeaturesNV) = _PhysicalDeviceCornerSampledImageFeaturesNV(x.corner_sampled_image; x.next)

"""

"""
_PhysicalDeviceComputeShaderDerivativesFeaturesNV(x::PhysicalDeviceComputeShaderDerivativesFeaturesNV) = _PhysicalDeviceComputeShaderDerivativesFeaturesNV(x.compute_derivative_group_quads, x.compute_derivative_group_linear; x.next)

"""

"""
_PhysicalDeviceFragmentShaderBarycentricFeaturesNV(x::PhysicalDeviceFragmentShaderBarycentricFeaturesNV) = _PhysicalDeviceFragmentShaderBarycentricFeaturesNV(x.fragment_shader_barycentric; x.next)

"""

"""
_PhysicalDeviceShaderImageFootprintFeaturesNV(x::PhysicalDeviceShaderImageFootprintFeaturesNV) = _PhysicalDeviceShaderImageFootprintFeaturesNV(x.image_footprint; x.next)

"""

"""
_PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(x::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) = _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(x.dedicated_allocation_image_aliasing; x.next)

"""

"""
_ShadingRatePaletteNV(x::ShadingRatePaletteNV) = _ShadingRatePaletteNV(x.shading_rate_palette_entries)

"""

"""
_PipelineViewportShadingRateImageStateCreateInfoNV(x::PipelineViewportShadingRateImageStateCreateInfoNV) = _PipelineViewportShadingRateImageStateCreateInfoNV(x.shading_rate_image_enable, convert_nonnull(Vector{_ShadingRatePaletteNV}, x.shading_rate_palettes); x.next)

"""

"""
_PhysicalDeviceShadingRateImageFeaturesNV(x::PhysicalDeviceShadingRateImageFeaturesNV) = _PhysicalDeviceShadingRateImageFeaturesNV(x.shading_rate_image, x.shading_rate_coarse_sample_order; x.next)

"""

"""
_CoarseSampleLocationNV(x::CoarseSampleLocationNV) = _CoarseSampleLocationNV(x.pixel_x, x.pixel_y, x.sample)

"""

"""
_CoarseSampleOrderCustomNV(x::CoarseSampleOrderCustomNV) = _CoarseSampleOrderCustomNV(x.shading_rate, x.sample_count, convert_nonnull(Vector{_CoarseSampleLocationNV}, x.sample_locations))

"""

"""
_PipelineViewportCoarseSampleOrderStateCreateInfoNV(x::PipelineViewportCoarseSampleOrderStateCreateInfoNV) = _PipelineViewportCoarseSampleOrderStateCreateInfoNV(x.sample_order_type, convert_nonnull(Vector{_CoarseSampleOrderCustomNV}, x.custom_sample_orders); x.next)

"""

"""
_PhysicalDeviceMeshShaderFeaturesNV(x::PhysicalDeviceMeshShaderFeaturesNV) = _PhysicalDeviceMeshShaderFeaturesNV(x.task_shader, x.mesh_shader; x.next)

"""

"""
_DrawMeshTasksIndirectCommandNV(x::DrawMeshTasksIndirectCommandNV) = _DrawMeshTasksIndirectCommandNV(x.task_count, x.first_task)

"""

"""
_RayTracingShaderGroupCreateInfoNV(x::RayTracingShaderGroupCreateInfoNV) = _RayTracingShaderGroupCreateInfoNV(x.type, x.general_shader, x.closest_hit_shader, x.any_hit_shader, x.intersection_shader; x.next)

"""

"""
_RayTracingShaderGroupCreateInfoKHR(x::RayTracingShaderGroupCreateInfoKHR) = _RayTracingShaderGroupCreateInfoKHR(x.type, x.general_shader, x.closest_hit_shader, x.any_hit_shader, x.intersection_shader; x.next, x.shader_group_capture_replay_handle)

"""

"""
_RayTracingPipelineCreateInfoNV(x::RayTracingPipelineCreateInfoNV) = _RayTracingPipelineCreateInfoNV(convert_nonnull(Vector{_PipelineShaderStageCreateInfo}, x.stages), convert_nonnull(Vector{_RayTracingShaderGroupCreateInfoNV}, x.groups), x.max_recursion_depth, x.layout, x.base_pipeline_index; x.next, x.flags, x.base_pipeline_handle)

"""

"""
_RayTracingPipelineCreateInfoKHR(x::RayTracingPipelineCreateInfoKHR) = _RayTracingPipelineCreateInfoKHR(convert_nonnull(Vector{_PipelineShaderStageCreateInfo}, x.stages), convert_nonnull(Vector{_RayTracingShaderGroupCreateInfoKHR}, x.groups), x.max_pipeline_ray_recursion_depth, x.layout, x.base_pipeline_index; x.next, x.flags, library_info = convert_nonnull(_PipelineLibraryCreateInfoKHR, x.library_info), library_interface = convert_nonnull(_RayTracingPipelineInterfaceCreateInfoKHR, x.library_interface), dynamic_state = convert_nonnull(_PipelineDynamicStateCreateInfo, x.dynamic_state), x.base_pipeline_handle)

"""

"""
_GeometryTrianglesNV(x::GeometryTrianglesNV) = _GeometryTrianglesNV(x.vertex_offset, x.vertex_count, x.vertex_stride, x.vertex_format, x.index_offset, x.index_count, x.index_type, x.transform_offset; x.next, x.vertex_data, x.index_data, x.transform_data)

"""

"""
_GeometryAABBNV(x::GeometryAABBNV) = _GeometryAABBNV(x.num_aab_bs, x.stride, x.offset; x.next, x.aabb_data)

"""

"""
_GeometryDataNV(x::GeometryDataNV) = _GeometryDataNV(convert_nonnull(_GeometryTrianglesNV, x.triangles), convert_nonnull(_GeometryAABBNV, x.aabbs))

"""

"""
_GeometryNV(x::GeometryNV) = _GeometryNV(x.geometry_type, convert_nonnull(_GeometryDataNV, x.geometry); x.next, x.flags)

"""

"""
_AccelerationStructureInfoNV(x::AccelerationStructureInfoNV) = _AccelerationStructureInfoNV(x.type, convert_nonnull(Vector{_GeometryNV}, x.geometries); x.next, x.flags, x.instance_count)

"""

"""
_AccelerationStructureCreateInfoNV(x::AccelerationStructureCreateInfoNV) = _AccelerationStructureCreateInfoNV(x.compacted_size, convert_nonnull(_AccelerationStructureInfoNV, x.info); x.next)

"""

"""
_BindAccelerationStructureMemoryInfoNV(x::BindAccelerationStructureMemoryInfoNV) = _BindAccelerationStructureMemoryInfoNV(x.acceleration_structure, x.memory, x.memory_offset, x.device_indices; x.next)

"""

"""
_WriteDescriptorSetAccelerationStructureKHR(x::WriteDescriptorSetAccelerationStructureKHR) = _WriteDescriptorSetAccelerationStructureKHR(x.acceleration_structures; x.next)

"""

"""
_WriteDescriptorSetAccelerationStructureNV(x::WriteDescriptorSetAccelerationStructureNV) = _WriteDescriptorSetAccelerationStructureNV(x.acceleration_structures; x.next)

"""

"""
_AccelerationStructureMemoryRequirementsInfoNV(x::AccelerationStructureMemoryRequirementsInfoNV) = _AccelerationStructureMemoryRequirementsInfoNV(x.type, x.acceleration_structure; x.next)

"""

"""
_PhysicalDeviceAccelerationStructureFeaturesKHR(x::PhysicalDeviceAccelerationStructureFeaturesKHR) = _PhysicalDeviceAccelerationStructureFeaturesKHR(x.acceleration_structure, x.acceleration_structure_capture_replay, x.acceleration_structure_indirect_build, x.acceleration_structure_host_commands, x.descriptor_binding_acceleration_structure_update_after_bind; x.next)

"""

"""
_PhysicalDeviceRayTracingPipelineFeaturesKHR(x::PhysicalDeviceRayTracingPipelineFeaturesKHR) = _PhysicalDeviceRayTracingPipelineFeaturesKHR(x.ray_tracing_pipeline, x.ray_tracing_pipeline_shader_group_handle_capture_replay, x.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed, x.ray_tracing_pipeline_trace_rays_indirect, x.ray_traversal_primitive_culling; x.next)

"""

"""
_PhysicalDeviceRayQueryFeaturesKHR(x::PhysicalDeviceRayQueryFeaturesKHR) = _PhysicalDeviceRayQueryFeaturesKHR(x.ray_query; x.next)

"""

"""
_StridedDeviceAddressRegionKHR(x::StridedDeviceAddressRegionKHR) = _StridedDeviceAddressRegionKHR(x.stride, x.size; x.device_address)

"""

"""
_TraceRaysIndirectCommandKHR(x::TraceRaysIndirectCommandKHR) = _TraceRaysIndirectCommandKHR(x.width, x.height, x.depth)

"""

"""
_PhysicalDeviceImageDrmFormatModifierInfoEXT(x::PhysicalDeviceImageDrmFormatModifierInfoEXT) = _PhysicalDeviceImageDrmFormatModifierInfoEXT(x.drm_format_modifier, x.sharing_mode, x.queue_family_indices; x.next)

"""

"""
_ImageDrmFormatModifierListCreateInfoEXT(x::ImageDrmFormatModifierListCreateInfoEXT) = _ImageDrmFormatModifierListCreateInfoEXT(x.drm_format_modifiers; x.next)

"""

"""
_ImageDrmFormatModifierExplicitCreateInfoEXT(x::ImageDrmFormatModifierExplicitCreateInfoEXT) = _ImageDrmFormatModifierExplicitCreateInfoEXT(x.drm_format_modifier, x.plane_layouts; x.next)

"""

"""
_ImageStencilUsageCreateInfo(x::ImageStencilUsageCreateInfo) = _ImageStencilUsageCreateInfo(x.stencil_usage; x.next)

"""

"""
_DeviceMemoryOverallocationCreateInfoAMD(x::DeviceMemoryOverallocationCreateInfoAMD) = _DeviceMemoryOverallocationCreateInfoAMD(x.overallocation_behavior; x.next)

"""

"""
_PhysicalDeviceFragmentDensityMapFeaturesEXT(x::PhysicalDeviceFragmentDensityMapFeaturesEXT) = _PhysicalDeviceFragmentDensityMapFeaturesEXT(x.fragment_density_map, x.fragment_density_map_dynamic, x.fragment_density_map_non_subsampled_images; x.next)

"""

"""
_PhysicalDeviceFragmentDensityMap2FeaturesEXT(x::PhysicalDeviceFragmentDensityMap2FeaturesEXT) = _PhysicalDeviceFragmentDensityMap2FeaturesEXT(x.fragment_density_map_deferred; x.next)

"""

"""
_RenderPassFragmentDensityMapCreateInfoEXT(x::RenderPassFragmentDensityMapCreateInfoEXT) = _RenderPassFragmentDensityMapCreateInfoEXT(convert_nonnull(_AttachmentReference, x.fragment_density_map_attachment); x.next)

"""

"""
_PhysicalDeviceScalarBlockLayoutFeatures(x::PhysicalDeviceScalarBlockLayoutFeatures) = _PhysicalDeviceScalarBlockLayoutFeatures(x.scalar_block_layout; x.next)

"""

"""
_SurfaceProtectedCapabilitiesKHR(x::SurfaceProtectedCapabilitiesKHR) = _SurfaceProtectedCapabilitiesKHR(x.supports_protected; x.next)

"""

"""
_PhysicalDeviceUniformBufferStandardLayoutFeatures(x::PhysicalDeviceUniformBufferStandardLayoutFeatures) = _PhysicalDeviceUniformBufferStandardLayoutFeatures(x.uniform_buffer_standard_layout; x.next)

"""

"""
_PhysicalDeviceDepthClipEnableFeaturesEXT(x::PhysicalDeviceDepthClipEnableFeaturesEXT) = _PhysicalDeviceDepthClipEnableFeaturesEXT(x.depth_clip_enable; x.next)

"""

"""
_PipelineRasterizationDepthClipStateCreateInfoEXT(x::PipelineRasterizationDepthClipStateCreateInfoEXT) = _PipelineRasterizationDepthClipStateCreateInfoEXT(x.depth_clip_enable; x.next, x.flags)

"""

"""
_PhysicalDeviceMemoryPriorityFeaturesEXT(x::PhysicalDeviceMemoryPriorityFeaturesEXT) = _PhysicalDeviceMemoryPriorityFeaturesEXT(x.memory_priority; x.next)

"""

"""
_MemoryPriorityAllocateInfoEXT(x::MemoryPriorityAllocateInfoEXT) = _MemoryPriorityAllocateInfoEXT(x.priority; x.next)

"""

"""
_PhysicalDeviceBufferDeviceAddressFeatures(x::PhysicalDeviceBufferDeviceAddressFeatures) = _PhysicalDeviceBufferDeviceAddressFeatures(x.buffer_device_address, x.buffer_device_address_capture_replay, x.buffer_device_address_multi_device; x.next)

"""

"""
_PhysicalDeviceBufferDeviceAddressFeaturesEXT(x::PhysicalDeviceBufferDeviceAddressFeaturesEXT) = _PhysicalDeviceBufferDeviceAddressFeaturesEXT(x.buffer_device_address, x.buffer_device_address_capture_replay, x.buffer_device_address_multi_device; x.next)

"""

"""
_BufferDeviceAddressInfo(x::BufferDeviceAddressInfo) = _BufferDeviceAddressInfo(x.buffer; x.next)

"""

"""
_BufferOpaqueCaptureAddressCreateInfo(x::BufferOpaqueCaptureAddressCreateInfo) = _BufferOpaqueCaptureAddressCreateInfo(x.opaque_capture_address; x.next)

"""

"""
_BufferDeviceAddressCreateInfoEXT(x::BufferDeviceAddressCreateInfoEXT) = _BufferDeviceAddressCreateInfoEXT(x.device_address; x.next)

"""

"""
_PhysicalDeviceImageViewImageFormatInfoEXT(x::PhysicalDeviceImageViewImageFormatInfoEXT) = _PhysicalDeviceImageViewImageFormatInfoEXT(x.image_view_type; x.next)

"""

"""
_PhysicalDeviceImagelessFramebufferFeatures(x::PhysicalDeviceImagelessFramebufferFeatures) = _PhysicalDeviceImagelessFramebufferFeatures(x.imageless_framebuffer; x.next)

"""

"""
_FramebufferAttachmentsCreateInfo(x::FramebufferAttachmentsCreateInfo) = _FramebufferAttachmentsCreateInfo(convert_nonnull(Vector{_FramebufferAttachmentImageInfo}, x.attachment_image_infos); x.next)

"""

"""
_FramebufferAttachmentImageInfo(x::FramebufferAttachmentImageInfo) = _FramebufferAttachmentImageInfo(x.usage, x.width, x.height, x.layer_count, x.view_formats; x.next, x.flags)

"""

"""
_RenderPassAttachmentBeginInfo(x::RenderPassAttachmentBeginInfo) = _RenderPassAttachmentBeginInfo(x.attachments; x.next)

"""

"""
_PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(x::PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT) = _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(x.texture_compression_astc_hdr; x.next)

"""

"""
_PhysicalDeviceCooperativeMatrixFeaturesNV(x::PhysicalDeviceCooperativeMatrixFeaturesNV) = _PhysicalDeviceCooperativeMatrixFeaturesNV(x.cooperative_matrix, x.cooperative_matrix_robust_buffer_access; x.next)

"""

"""
_CooperativeMatrixPropertiesNV(x::CooperativeMatrixPropertiesNV) = _CooperativeMatrixPropertiesNV(x.m_size, x.n_size, x.k_size, x.a_type, x.b_type, x.c_type, x.d_type, x.scope; x.next)

"""

"""
_PhysicalDeviceYcbcrImageArraysFeaturesEXT(x::PhysicalDeviceYcbcrImageArraysFeaturesEXT) = _PhysicalDeviceYcbcrImageArraysFeaturesEXT(x.ycbcr_image_arrays; x.next)

"""

"""
_ImageViewHandleInfoNVX(x::ImageViewHandleInfoNVX) = _ImageViewHandleInfoNVX(x.image_view, x.descriptor_type; x.next, x.sampler)

"""

"""
_PipelineCreationFeedbackCreateInfoEXT(x::PipelineCreationFeedbackCreateInfoEXT) = _PipelineCreationFeedbackCreateInfoEXT(x.pipeline_creation_feedback, x.pipeline_stage_creation_feedbacks; x.next)

"""

"""
_SurfaceFullScreenExclusiveInfoEXT(x::SurfaceFullScreenExclusiveInfoEXT) = _SurfaceFullScreenExclusiveInfoEXT(x.full_screen_exclusive; x.next)

"""

"""
_SurfaceFullScreenExclusiveWin32InfoEXT(x::SurfaceFullScreenExclusiveWin32InfoEXT) = _SurfaceFullScreenExclusiveWin32InfoEXT(x.hmonitor; x.next)

"""

"""
_SurfaceCapabilitiesFullScreenExclusiveEXT(x::SurfaceCapabilitiesFullScreenExclusiveEXT) = _SurfaceCapabilitiesFullScreenExclusiveEXT(x.full_screen_exclusive_supported; x.next)

"""

"""
_PhysicalDevicePerformanceQueryFeaturesKHR(x::PhysicalDevicePerformanceQueryFeaturesKHR) = _PhysicalDevicePerformanceQueryFeaturesKHR(x.performance_counter_query_pools, x.performance_counter_multiple_query_pools; x.next)

"""

"""
_QueryPoolPerformanceCreateInfoKHR(x::QueryPoolPerformanceCreateInfoKHR) = _QueryPoolPerformanceCreateInfoKHR(x.queue_family_index, x.counter_indices; x.next)

"""

"""
_AcquireProfilingLockInfoKHR(x::AcquireProfilingLockInfoKHR) = _AcquireProfilingLockInfoKHR(x.timeout; x.next, x.flags)

"""

"""
_PerformanceQuerySubmitInfoKHR(x::PerformanceQuerySubmitInfoKHR) = _PerformanceQuerySubmitInfoKHR(x.counter_pass_index; x.next)

"""

"""
_HeadlessSurfaceCreateInfoEXT(x::HeadlessSurfaceCreateInfoEXT) = _HeadlessSurfaceCreateInfoEXT(; x.next, x.flags)

"""

"""
_PhysicalDeviceCoverageReductionModeFeaturesNV(x::PhysicalDeviceCoverageReductionModeFeaturesNV) = _PhysicalDeviceCoverageReductionModeFeaturesNV(x.coverage_reduction_mode; x.next)

"""

"""
_PipelineCoverageReductionStateCreateInfoNV(x::PipelineCoverageReductionStateCreateInfoNV) = _PipelineCoverageReductionStateCreateInfoNV(x.coverage_reduction_mode; x.next, x.flags)

"""

"""
_PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(x::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) = _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(x.shader_integer_functions_2; x.next)

"""

"""
_PerformanceValueINTEL(x::PerformanceValueINTEL) = _PerformanceValueINTEL(x.type, x.data)

"""

"""
_InitializePerformanceApiInfoINTEL(x::InitializePerformanceApiInfoINTEL) = _InitializePerformanceApiInfoINTEL(; x.next, x.user_data)

"""

"""
_QueryPoolPerformanceQueryCreateInfoINTEL(x::QueryPoolPerformanceQueryCreateInfoINTEL) = _QueryPoolPerformanceQueryCreateInfoINTEL(x.performance_counters_sampling; x.next)

"""

"""
_PerformanceMarkerInfoINTEL(x::PerformanceMarkerInfoINTEL) = _PerformanceMarkerInfoINTEL(x.marker; x.next)

"""

"""
_PerformanceStreamMarkerInfoINTEL(x::PerformanceStreamMarkerInfoINTEL) = _PerformanceStreamMarkerInfoINTEL(x.marker; x.next)

"""

"""
_PerformanceOverrideInfoINTEL(x::PerformanceOverrideInfoINTEL) = _PerformanceOverrideInfoINTEL(x.type, x.enable, x.parameter; x.next)

"""

"""
_PerformanceConfigurationAcquireInfoINTEL(x::PerformanceConfigurationAcquireInfoINTEL) = _PerformanceConfigurationAcquireInfoINTEL(x.type; x.next)

"""

"""
_PhysicalDeviceShaderClockFeaturesKHR(x::PhysicalDeviceShaderClockFeaturesKHR) = _PhysicalDeviceShaderClockFeaturesKHR(x.shader_subgroup_clock, x.shader_device_clock; x.next)

"""

"""
_PhysicalDeviceIndexTypeUint8FeaturesEXT(x::PhysicalDeviceIndexTypeUint8FeaturesEXT) = _PhysicalDeviceIndexTypeUint8FeaturesEXT(x.index_type_uint_8; x.next)

"""

"""
_PhysicalDeviceShaderSMBuiltinsFeaturesNV(x::PhysicalDeviceShaderSMBuiltinsFeaturesNV) = _PhysicalDeviceShaderSMBuiltinsFeaturesNV(x.shader_sm_builtins; x.next)

"""

"""
_PhysicalDeviceFragmentShaderInterlockFeaturesEXT(x::PhysicalDeviceFragmentShaderInterlockFeaturesEXT) = _PhysicalDeviceFragmentShaderInterlockFeaturesEXT(x.fragment_shader_sample_interlock, x.fragment_shader_pixel_interlock, x.fragment_shader_shading_rate_interlock; x.next)

"""

"""
_PhysicalDeviceSeparateDepthStencilLayoutsFeatures(x::PhysicalDeviceSeparateDepthStencilLayoutsFeatures) = _PhysicalDeviceSeparateDepthStencilLayoutsFeatures(x.separate_depth_stencil_layouts; x.next)

"""

"""
_AttachmentReferenceStencilLayout(x::AttachmentReferenceStencilLayout) = _AttachmentReferenceStencilLayout(x.stencil_layout; x.next)

"""

"""
_AttachmentDescriptionStencilLayout(x::AttachmentDescriptionStencilLayout) = _AttachmentDescriptionStencilLayout(x.stencil_initial_layout, x.stencil_final_layout; x.next)

"""

"""
_PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(x::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR) = _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(x.pipeline_executable_info; x.next)

"""

"""
_PipelineInfoKHR(x::PipelineInfoKHR) = _PipelineInfoKHR(x.pipeline; x.next)

"""

"""
_PipelineExecutableInfoKHR(x::PipelineExecutableInfoKHR) = _PipelineExecutableInfoKHR(x.pipeline, x.executable_index; x.next)

"""

"""
_PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(x::PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT) = _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(x.shader_demote_to_helper_invocation; x.next)

"""

"""
_PhysicalDeviceTexelBufferAlignmentFeaturesEXT(x::PhysicalDeviceTexelBufferAlignmentFeaturesEXT) = _PhysicalDeviceTexelBufferAlignmentFeaturesEXT(x.texel_buffer_alignment; x.next)

"""

"""
_PhysicalDeviceSubgroupSizeControlFeaturesEXT(x::PhysicalDeviceSubgroupSizeControlFeaturesEXT) = _PhysicalDeviceSubgroupSizeControlFeaturesEXT(x.subgroup_size_control, x.compute_full_subgroups; x.next)

"""

"""
_MemoryOpaqueCaptureAddressAllocateInfo(x::MemoryOpaqueCaptureAddressAllocateInfo) = _MemoryOpaqueCaptureAddressAllocateInfo(x.opaque_capture_address; x.next)

"""

"""
_DeviceMemoryOpaqueCaptureAddressInfo(x::DeviceMemoryOpaqueCaptureAddressInfo) = _DeviceMemoryOpaqueCaptureAddressInfo(x.memory; x.next)

"""

"""
_PhysicalDeviceLineRasterizationFeaturesEXT(x::PhysicalDeviceLineRasterizationFeaturesEXT) = _PhysicalDeviceLineRasterizationFeaturesEXT(x.rectangular_lines, x.bresenham_lines, x.smooth_lines, x.stippled_rectangular_lines, x.stippled_bresenham_lines, x.stippled_smooth_lines; x.next)

"""

"""
_PipelineRasterizationLineStateCreateInfoEXT(x::PipelineRasterizationLineStateCreateInfoEXT) = _PipelineRasterizationLineStateCreateInfoEXT(x.line_rasterization_mode, x.stippled_line_enable, x.line_stipple_factor, x.line_stipple_pattern; x.next)

"""

"""
_PhysicalDevicePipelineCreationCacheControlFeaturesEXT(x::PhysicalDevicePipelineCreationCacheControlFeaturesEXT) = _PhysicalDevicePipelineCreationCacheControlFeaturesEXT(x.pipeline_creation_cache_control; x.next)

"""

"""
_PhysicalDeviceVulkan11Features(x::PhysicalDeviceVulkan11Features) = _PhysicalDeviceVulkan11Features(x.storage_buffer_16_bit_access, x.uniform_and_storage_buffer_16_bit_access, x.storage_push_constant_16, x.storage_input_output_16, x.multiview, x.multiview_geometry_shader, x.multiview_tessellation_shader, x.variable_pointers_storage_buffer, x.variable_pointers, x.protected_memory, x.sampler_ycbcr_conversion, x.shader_draw_parameters; x.next)

"""

"""
_PhysicalDeviceVulkan12Features(x::PhysicalDeviceVulkan12Features) = _PhysicalDeviceVulkan12Features(x.sampler_mirror_clamp_to_edge, x.draw_indirect_count, x.storage_buffer_8_bit_access, x.uniform_and_storage_buffer_8_bit_access, x.storage_push_constant_8, x.shader_buffer_int_64_atomics, x.shader_shared_int_64_atomics, x.shader_float_16, x.shader_int_8, x.descriptor_indexing, x.shader_input_attachment_array_dynamic_indexing, x.shader_uniform_texel_buffer_array_dynamic_indexing, x.shader_storage_texel_buffer_array_dynamic_indexing, x.shader_uniform_buffer_array_non_uniform_indexing, x.shader_sampled_image_array_non_uniform_indexing, x.shader_storage_buffer_array_non_uniform_indexing, x.shader_storage_image_array_non_uniform_indexing, x.shader_input_attachment_array_non_uniform_indexing, x.shader_uniform_texel_buffer_array_non_uniform_indexing, x.shader_storage_texel_buffer_array_non_uniform_indexing, x.descriptor_binding_uniform_buffer_update_after_bind, x.descriptor_binding_sampled_image_update_after_bind, x.descriptor_binding_storage_image_update_after_bind, x.descriptor_binding_storage_buffer_update_after_bind, x.descriptor_binding_uniform_texel_buffer_update_after_bind, x.descriptor_binding_storage_texel_buffer_update_after_bind, x.descriptor_binding_update_unused_while_pending, x.descriptor_binding_partially_bound, x.descriptor_binding_variable_descriptor_count, x.runtime_descriptor_array, x.sampler_filter_minmax, x.scalar_block_layout, x.imageless_framebuffer, x.uniform_buffer_standard_layout, x.shader_subgroup_extended_types, x.separate_depth_stencil_layouts, x.host_query_reset, x.timeline_semaphore, x.buffer_device_address, x.buffer_device_address_capture_replay, x.buffer_device_address_multi_device, x.vulkan_memory_model, x.vulkan_memory_model_device_scope, x.vulkan_memory_model_availability_visibility_chains, x.shader_output_viewport_index, x.shader_output_layer, x.subgroup_broadcast_dynamic_id; x.next)

"""

"""
_PipelineCompilerControlCreateInfoAMD(x::PipelineCompilerControlCreateInfoAMD) = _PipelineCompilerControlCreateInfoAMD(; x.next, x.compiler_control_flags)

"""

"""
_PhysicalDeviceCoherentMemoryFeaturesAMD(x::PhysicalDeviceCoherentMemoryFeaturesAMD) = _PhysicalDeviceCoherentMemoryFeaturesAMD(x.device_coherent_memory; x.next)

"""

"""
_SamplerCustomBorderColorCreateInfoEXT(x::SamplerCustomBorderColorCreateInfoEXT) = _SamplerCustomBorderColorCreateInfoEXT(x.custom_border_color, x.format; x.next)

"""

"""
_PhysicalDeviceCustomBorderColorFeaturesEXT(x::PhysicalDeviceCustomBorderColorFeaturesEXT) = _PhysicalDeviceCustomBorderColorFeaturesEXT(x.custom_border_colors, x.custom_border_color_without_format; x.next)

"""

"""
_AccelerationStructureGeometryTrianglesDataKHR(x::AccelerationStructureGeometryTrianglesDataKHR) = _AccelerationStructureGeometryTrianglesDataKHR(x.vertex_format, x.vertex_data, x.vertex_stride, x.max_vertex, x.index_type, x.index_data, x.transform_data; x.next)

"""

"""
_AccelerationStructureGeometryAabbsDataKHR(x::AccelerationStructureGeometryAabbsDataKHR) = _AccelerationStructureGeometryAabbsDataKHR(x.data, x.stride; x.next)

"""

"""
_AccelerationStructureGeometryInstancesDataKHR(x::AccelerationStructureGeometryInstancesDataKHR) = _AccelerationStructureGeometryInstancesDataKHR(x.array_of_pointers, x.data; x.next)

"""

"""
_AccelerationStructureGeometryKHR(x::AccelerationStructureGeometryKHR) = _AccelerationStructureGeometryKHR(x.geometry_type, x.geometry; x.next, x.flags)

"""

"""
_AccelerationStructureBuildGeometryInfoKHR(x::AccelerationStructureBuildGeometryInfoKHR) = _AccelerationStructureBuildGeometryInfoKHR(x.type, x.mode, x.scratch_data; x.next, x.flags, x.src_acceleration_structure, x.dst_acceleration_structure, geometries = convert_nonnull(Vector{_AccelerationStructureGeometryKHR}, x.geometries), geometries_2 = convert_nonnull(Vector{_AccelerationStructureGeometryKHR}, x.geometries_2))

"""

"""
_AccelerationStructureBuildRangeInfoKHR(x::AccelerationStructureBuildRangeInfoKHR) = _AccelerationStructureBuildRangeInfoKHR(x.primitive_count, x.primitive_offset, x.first_vertex, x.transform_offset)

"""

"""
_AccelerationStructureCreateInfoKHR(x::AccelerationStructureCreateInfoKHR) = _AccelerationStructureCreateInfoKHR(x.buffer, x.offset, x.size, x.type; x.next, x.create_flags, x.device_address)

"""

"""
_AabbPositionsKHR(x::AabbPositionsKHR) = _AabbPositionsKHR(x.min_x, x.min_y, x.min_z, x.max_x, x.max_y, x.max_z)

"""

"""
_TransformMatrixKHR(x::TransformMatrixKHR) = _TransformMatrixKHR(x.matrix)

"""

"""
_AccelerationStructureInstanceKHR(x::AccelerationStructureInstanceKHR) = _AccelerationStructureInstanceKHR(convert_nonnull(_TransformMatrixKHR, x.transform), x.instance_custom_index, x.mask, x.instance_shader_binding_table_record_offset, x.acceleration_structure_reference; x.flags)

"""

"""
_AccelerationStructureDeviceAddressInfoKHR(x::AccelerationStructureDeviceAddressInfoKHR) = _AccelerationStructureDeviceAddressInfoKHR(x.acceleration_structure; x.next)

"""

"""
_AccelerationStructureVersionInfoKHR(x::AccelerationStructureVersionInfoKHR) = _AccelerationStructureVersionInfoKHR(x.version_data; x.next)

"""

"""
_CopyAccelerationStructureInfoKHR(x::CopyAccelerationStructureInfoKHR) = _CopyAccelerationStructureInfoKHR(x.src, x.dst, x.mode; x.next)

"""

"""
_CopyAccelerationStructureToMemoryInfoKHR(x::CopyAccelerationStructureToMemoryInfoKHR) = _CopyAccelerationStructureToMemoryInfoKHR(x.src, x.dst, x.mode; x.next)

"""

"""
_CopyMemoryToAccelerationStructureInfoKHR(x::CopyMemoryToAccelerationStructureInfoKHR) = _CopyMemoryToAccelerationStructureInfoKHR(x.src, x.dst, x.mode; x.next)

"""

"""
_RayTracingPipelineInterfaceCreateInfoKHR(x::RayTracingPipelineInterfaceCreateInfoKHR) = _RayTracingPipelineInterfaceCreateInfoKHR(x.max_pipeline_ray_payload_size, x.max_pipeline_ray_hit_attribute_size; x.next)

"""

"""
_PipelineLibraryCreateInfoKHR(x::PipelineLibraryCreateInfoKHR) = _PipelineLibraryCreateInfoKHR(x.libraries; x.next)

"""

"""
_PhysicalDeviceExtendedDynamicStateFeaturesEXT(x::PhysicalDeviceExtendedDynamicStateFeaturesEXT) = _PhysicalDeviceExtendedDynamicStateFeaturesEXT(x.extended_dynamic_state; x.next)

"""

"""
_PhysicalDeviceExtendedDynamicState2FeaturesEXT(x::PhysicalDeviceExtendedDynamicState2FeaturesEXT) = _PhysicalDeviceExtendedDynamicState2FeaturesEXT(x.extended_dynamic_state_2, x.extended_dynamic_state_2_logic_op, x.extended_dynamic_state_2_patch_control_points; x.next)

"""

"""
_RenderPassTransformBeginInfoQCOM(x::RenderPassTransformBeginInfoQCOM) = _RenderPassTransformBeginInfoQCOM(x.transform; x.next)

"""

"""
_CopyCommandTransformInfoQCOM(x::CopyCommandTransformInfoQCOM) = _CopyCommandTransformInfoQCOM(x.transform; x.next)

"""

"""
_CommandBufferInheritanceRenderPassTransformInfoQCOM(x::CommandBufferInheritanceRenderPassTransformInfoQCOM) = _CommandBufferInheritanceRenderPassTransformInfoQCOM(x.transform, convert_nonnull(_Rect2D, x.render_area); x.next)

"""

"""
_PhysicalDeviceDiagnosticsConfigFeaturesNV(x::PhysicalDeviceDiagnosticsConfigFeaturesNV) = _PhysicalDeviceDiagnosticsConfigFeaturesNV(x.diagnostics_config; x.next)

"""

"""
_DeviceDiagnosticsConfigCreateInfoNV(x::DeviceDiagnosticsConfigCreateInfoNV) = _DeviceDiagnosticsConfigCreateInfoNV(; x.next, x.flags)

"""

"""
_PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(x::PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR) = _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(x.shader_zero_initialize_workgroup_memory; x.next)

"""

"""
_PhysicalDeviceRobustness2FeaturesEXT(x::PhysicalDeviceRobustness2FeaturesEXT) = _PhysicalDeviceRobustness2FeaturesEXT(x.robust_buffer_access_2, x.robust_image_access_2, x.null_descriptor; x.next)

"""

"""
_PhysicalDeviceImageRobustnessFeaturesEXT(x::PhysicalDeviceImageRobustnessFeaturesEXT) = _PhysicalDeviceImageRobustnessFeaturesEXT(x.robust_image_access; x.next)

"""

"""
_PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(x::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) = _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(x.workgroup_memory_explicit_layout, x.workgroup_memory_explicit_layout_scalar_block_layout, x.workgroup_memory_explicit_layout_8_bit_access, x.workgroup_memory_explicit_layout_16_bit_access; x.next)

"""

"""
_PhysicalDevice4444FormatsFeaturesEXT(x::PhysicalDevice4444FormatsFeaturesEXT) = _PhysicalDevice4444FormatsFeaturesEXT(x.format_a4r4g4b4, x.format_a4b4g4r4; x.next)

"""

"""
_BufferCopy2KHR(x::BufferCopy2KHR) = _BufferCopy2KHR(x.src_offset, x.dst_offset, x.size; x.next)

"""

"""
_ImageCopy2KHR(x::ImageCopy2KHR) = _ImageCopy2KHR(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(_Offset3D, x.src_offset), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(_Offset3D, x.dst_offset), convert_nonnull(_Extent3D, x.extent); x.next)

"""

"""
_ImageBlit2KHR(x::ImageBlit2KHR) = _ImageBlit2KHR(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(NTuple{2, _Offset3D}, x.src_offsets), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(NTuple{2, _Offset3D}, x.dst_offsets); x.next)

"""

"""
_BufferImageCopy2KHR(x::BufferImageCopy2KHR) = _BufferImageCopy2KHR(x.buffer_offset, x.buffer_row_length, x.buffer_image_height, convert_nonnull(_ImageSubresourceLayers, x.image_subresource), convert_nonnull(_Offset3D, x.image_offset), convert_nonnull(_Extent3D, x.image_extent); x.next)

"""

"""
_ImageResolve2KHR(x::ImageResolve2KHR) = _ImageResolve2KHR(convert_nonnull(_ImageSubresourceLayers, x.src_subresource), convert_nonnull(_Offset3D, x.src_offset), convert_nonnull(_ImageSubresourceLayers, x.dst_subresource), convert_nonnull(_Offset3D, x.dst_offset), convert_nonnull(_Extent3D, x.extent); x.next)

"""

"""
_CopyBufferInfo2KHR(x::CopyBufferInfo2KHR) = _CopyBufferInfo2KHR(x.src_buffer, x.dst_buffer, convert_nonnull(Vector{_BufferCopy2KHR}, x.regions); x.next)

"""

"""
_CopyImageInfo2KHR(x::CopyImageInfo2KHR) = _CopyImageInfo2KHR(x.src_image, x.src_image_layout, x.dst_image, x.dst_image_layout, convert_nonnull(Vector{_ImageCopy2KHR}, x.regions); x.next)

"""

"""
_BlitImageInfo2KHR(x::BlitImageInfo2KHR) = _BlitImageInfo2KHR(x.src_image, x.src_image_layout, x.dst_image, x.dst_image_layout, convert_nonnull(Vector{_ImageBlit2KHR}, x.regions), x.filter; x.next)

"""

"""
_CopyBufferToImageInfo2KHR(x::CopyBufferToImageInfo2KHR) = _CopyBufferToImageInfo2KHR(x.src_buffer, x.dst_image, x.dst_image_layout, convert_nonnull(Vector{_BufferImageCopy2KHR}, x.regions); x.next)

"""

"""
_CopyImageToBufferInfo2KHR(x::CopyImageToBufferInfo2KHR) = _CopyImageToBufferInfo2KHR(x.src_image, x.src_image_layout, x.dst_buffer, convert_nonnull(Vector{_BufferImageCopy2KHR}, x.regions); x.next)

"""

"""
_ResolveImageInfo2KHR(x::ResolveImageInfo2KHR) = _ResolveImageInfo2KHR(x.src_image, x.src_image_layout, x.dst_image, x.dst_image_layout, convert_nonnull(Vector{_ImageResolve2KHR}, x.regions); x.next)

"""

"""
_PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(x::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT) = _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(x.shader_image_int_64_atomics, x.sparse_image_int_64_atomics; x.next)

"""

"""
_FragmentShadingRateAttachmentInfoKHR(x::FragmentShadingRateAttachmentInfoKHR) = _FragmentShadingRateAttachmentInfoKHR(convert_nonnull(_AttachmentReference2, x.fragment_shading_rate_attachment), convert_nonnull(_Extent2D, x.shading_rate_attachment_texel_size); x.next)

"""

"""
_PipelineFragmentShadingRateStateCreateInfoKHR(x::PipelineFragmentShadingRateStateCreateInfoKHR) = _PipelineFragmentShadingRateStateCreateInfoKHR(convert_nonnull(_Extent2D, x.fragment_size), x.combiner_ops; x.next)

"""

"""
_PhysicalDeviceFragmentShadingRateFeaturesKHR(x::PhysicalDeviceFragmentShadingRateFeaturesKHR) = _PhysicalDeviceFragmentShadingRateFeaturesKHR(x.pipeline_fragment_shading_rate, x.primitive_fragment_shading_rate, x.attachment_fragment_shading_rate; x.next)

"""

"""
_PhysicalDeviceShaderTerminateInvocationFeaturesKHR(x::PhysicalDeviceShaderTerminateInvocationFeaturesKHR) = _PhysicalDeviceShaderTerminateInvocationFeaturesKHR(x.shader_terminate_invocation; x.next)

"""

"""
_PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(x::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV) = _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(x.fragment_shading_rate_enums, x.supersample_fragment_shading_rates, x.no_invocation_fragment_shading_rates; x.next)

"""

"""
_PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(x::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV) = _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(x.max_fragment_shading_rate_invocation_count; x.next)

"""

"""
_PipelineFragmentShadingRateEnumStateCreateInfoNV(x::PipelineFragmentShadingRateEnumStateCreateInfoNV) = _PipelineFragmentShadingRateEnumStateCreateInfoNV(x.shading_rate_type, x.shading_rate, x.combiner_ops; x.next)

"""

"""
_AccelerationStructureBuildSizesInfoKHR(x::AccelerationStructureBuildSizesInfoKHR) = _AccelerationStructureBuildSizesInfoKHR(x.acceleration_structure_size, x.update_scratch_size, x.build_scratch_size; x.next)

"""

"""
_PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(x::PhysicalDeviceMutableDescriptorTypeFeaturesVALVE) = _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(x.mutable_descriptor_type; x.next)

"""

"""
_MutableDescriptorTypeListVALVE(x::MutableDescriptorTypeListVALVE) = _MutableDescriptorTypeListVALVE(x.descriptor_types)

"""

"""
_MutableDescriptorTypeCreateInfoVALVE(x::MutableDescriptorTypeCreateInfoVALVE) = _MutableDescriptorTypeCreateInfoVALVE(convert_nonnull(Vector{_MutableDescriptorTypeListVALVE}, x.mutable_descriptor_type_lists); x.next)

"""

"""
_PhysicalDeviceVertexInputDynamicStateFeaturesEXT(x::PhysicalDeviceVertexInputDynamicStateFeaturesEXT) = _PhysicalDeviceVertexInputDynamicStateFeaturesEXT(x.vertex_input_dynamic_state; x.next)

"""

"""
_VertexInputBindingDescription2EXT(x::VertexInputBindingDescription2EXT) = _VertexInputBindingDescription2EXT(x.binding, x.stride, x.input_rate, x.divisor; x.next)

"""

"""
_VertexInputAttributeDescription2EXT(x::VertexInputAttributeDescription2EXT) = _VertexInputAttributeDescription2EXT(x.location, x.binding, x.format, x.offset; x.next)

"""

"""
_PhysicalDeviceColorWriteEnableFeaturesEXT(x::PhysicalDeviceColorWriteEnableFeaturesEXT) = _PhysicalDeviceColorWriteEnableFeaturesEXT(x.color_write_enable; x.next)

"""

"""
_PipelineColorWriteCreateInfoEXT(x::PipelineColorWriteCreateInfoEXT) = _PipelineColorWriteCreateInfoEXT(x.color_write_enables; x.next)

"""

"""
_MemoryBarrier2KHR(x::MemoryBarrier2KHR) = _MemoryBarrier2KHR(; x.next, x.src_stage_mask, x.src_access_mask, x.dst_stage_mask, x.dst_access_mask)

"""

"""
_ImageMemoryBarrier2KHR(x::ImageMemoryBarrier2KHR) = _ImageMemoryBarrier2KHR(x.old_layout, x.new_layout, x.src_queue_family_index, x.dst_queue_family_index, x.image, convert_nonnull(_ImageSubresourceRange, x.subresource_range); x.next, x.src_stage_mask, x.src_access_mask, x.dst_stage_mask, x.dst_access_mask)

"""

"""
_BufferMemoryBarrier2KHR(x::BufferMemoryBarrier2KHR) = _BufferMemoryBarrier2KHR(x.src_queue_family_index, x.dst_queue_family_index, x.buffer, x.offset, x.size; x.next, x.src_stage_mask, x.src_access_mask, x.dst_stage_mask, x.dst_access_mask)

"""

"""
_DependencyInfoKHR(x::DependencyInfoKHR) = _DependencyInfoKHR(convert_nonnull(Vector{_MemoryBarrier2KHR}, x.memory_barriers), convert_nonnull(Vector{_BufferMemoryBarrier2KHR}, x.buffer_memory_barriers), convert_nonnull(Vector{_ImageMemoryBarrier2KHR}, x.image_memory_barriers); x.next, x.dependency_flags)

"""

"""
_SemaphoreSubmitInfoKHR(x::SemaphoreSubmitInfoKHR) = _SemaphoreSubmitInfoKHR(x.semaphore, x.value, x.device_index; x.next, x.stage_mask)

"""

"""
_CommandBufferSubmitInfoKHR(x::CommandBufferSubmitInfoKHR) = _CommandBufferSubmitInfoKHR(x.command_buffer, x.device_mask; x.next)

"""

"""
_SubmitInfo2KHR(x::SubmitInfo2KHR) = _SubmitInfo2KHR(convert_nonnull(Vector{_SemaphoreSubmitInfoKHR}, x.wait_semaphore_infos), convert_nonnull(Vector{_CommandBufferSubmitInfoKHR}, x.command_buffer_infos), convert_nonnull(Vector{_SemaphoreSubmitInfoKHR}, x.signal_semaphore_infos); x.next, x.flags)

"""

"""
_PhysicalDeviceSynchronization2FeaturesKHR(x::PhysicalDeviceSynchronization2FeaturesKHR) = _PhysicalDeviceSynchronization2FeaturesKHR(x.synchronization2; x.next)

"""

"""
_PhysicalDeviceInheritedViewportScissorFeaturesNV(x::PhysicalDeviceInheritedViewportScissorFeaturesNV) = _PhysicalDeviceInheritedViewportScissorFeaturesNV(x.inherited_viewport_scissor_2_d; x.next)

"""

"""
_CommandBufferInheritanceViewportScissorInfoNV(x::CommandBufferInheritanceViewportScissorInfoNV) = _CommandBufferInheritanceViewportScissorInfoNV(x.viewport_scissor_2_d, x.viewport_depth_count, convert_nonnull(_Viewport, x.viewport_depths); x.next)

"""

"""
_PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(x::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT) = _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(x.ycbcr_444_formats; x.next)

"""

"""
_PhysicalDeviceProvokingVertexFeaturesEXT(x::PhysicalDeviceProvokingVertexFeaturesEXT) = _PhysicalDeviceProvokingVertexFeaturesEXT(x.provoking_vertex_last, x.transform_feedback_preserves_provoking_vertex; x.next)

"""

"""
_PipelineRasterizationProvokingVertexStateCreateInfoEXT(x::PipelineRasterizationProvokingVertexStateCreateInfoEXT) = _PipelineRasterizationProvokingVertexStateCreateInfoEXT(x.provoking_vertex_mode; x.next)

"""

"""
convert(T::Type{_BaseOutStructure}, x::BaseOutStructure) = T(x)

"""

"""
convert(T::Type{_BaseInStructure}, x::BaseInStructure) = T(x)

"""

"""
convert(T::Type{_Offset2D}, x::Offset2D) = T(x)

"""

"""
convert(T::Type{_Offset3D}, x::Offset3D) = T(x)

"""

"""
convert(T::Type{_Extent2D}, x::Extent2D) = T(x)

"""

"""
convert(T::Type{_Extent3D}, x::Extent3D) = T(x)

"""

"""
convert(T::Type{_Viewport}, x::Viewport) = T(x)

"""

"""
convert(T::Type{_Rect2D}, x::Rect2D) = T(x)

"""

"""
convert(T::Type{_ClearRect}, x::ClearRect) = T(x)

"""

"""
convert(T::Type{_ComponentMapping}, x::ComponentMapping) = T(x)

"""

"""
convert(T::Type{_ApplicationInfo}, x::ApplicationInfo) = T(x)

"""

"""
convert(T::Type{_AllocationCallbacks}, x::AllocationCallbacks) = T(x)

"""

"""
convert(T::Type{_DeviceQueueCreateInfo}, x::DeviceQueueCreateInfo) = T(x)

"""

"""
convert(T::Type{_DeviceCreateInfo}, x::DeviceCreateInfo) = T(x)

"""

"""
convert(T::Type{_InstanceCreateInfo}, x::InstanceCreateInfo) = T(x)

"""

"""
convert(T::Type{_MemoryAllocateInfo}, x::MemoryAllocateInfo) = T(x)

"""

"""
convert(T::Type{_MappedMemoryRange}, x::MappedMemoryRange) = T(x)

"""

"""
convert(T::Type{_DescriptorBufferInfo}, x::DescriptorBufferInfo) = T(x)

"""

"""
convert(T::Type{_DescriptorImageInfo}, x::DescriptorImageInfo) = T(x)

"""

"""
convert(T::Type{_WriteDescriptorSet}, x::WriteDescriptorSet) = T(x)

"""

"""
convert(T::Type{_CopyDescriptorSet}, x::CopyDescriptorSet) = T(x)

"""

"""
convert(T::Type{_BufferCreateInfo}, x::BufferCreateInfo) = T(x)

"""

"""
convert(T::Type{_BufferViewCreateInfo}, x::BufferViewCreateInfo) = T(x)

"""

"""
convert(T::Type{_ImageSubresource}, x::ImageSubresource) = T(x)

"""

"""
convert(T::Type{_ImageSubresourceLayers}, x::ImageSubresourceLayers) = T(x)

"""

"""
convert(T::Type{_ImageSubresourceRange}, x::ImageSubresourceRange) = T(x)

"""

"""
convert(T::Type{_MemoryBarrier}, x::MemoryBarrier) = T(x)

"""

"""
convert(T::Type{_BufferMemoryBarrier}, x::BufferMemoryBarrier) = T(x)

"""

"""
convert(T::Type{_ImageMemoryBarrier}, x::ImageMemoryBarrier) = T(x)

"""

"""
convert(T::Type{_ImageCreateInfo}, x::ImageCreateInfo) = T(x)

"""

"""
convert(T::Type{_ImageViewCreateInfo}, x::ImageViewCreateInfo) = T(x)

"""

"""
convert(T::Type{_BufferCopy}, x::BufferCopy) = T(x)

"""

"""
convert(T::Type{_SparseMemoryBind}, x::SparseMemoryBind) = T(x)

"""

"""
convert(T::Type{_SparseImageMemoryBind}, x::SparseImageMemoryBind) = T(x)

"""

"""
convert(T::Type{_SparseBufferMemoryBindInfo}, x::SparseBufferMemoryBindInfo) = T(x)

"""

"""
convert(T::Type{_SparseImageOpaqueMemoryBindInfo}, x::SparseImageOpaqueMemoryBindInfo) = T(x)

"""

"""
convert(T::Type{_SparseImageMemoryBindInfo}, x::SparseImageMemoryBindInfo) = T(x)

"""

"""
convert(T::Type{_BindSparseInfo}, x::BindSparseInfo) = T(x)

"""

"""
convert(T::Type{_ImageCopy}, x::ImageCopy) = T(x)

"""

"""
convert(T::Type{_ImageBlit}, x::ImageBlit) = T(x)

"""

"""
convert(T::Type{_BufferImageCopy}, x::BufferImageCopy) = T(x)

"""

"""
convert(T::Type{_ImageResolve}, x::ImageResolve) = T(x)

"""

"""
convert(T::Type{_ShaderModuleCreateInfo}, x::ShaderModuleCreateInfo) = T(x)

"""

"""
convert(T::Type{_DescriptorSetLayoutBinding}, x::DescriptorSetLayoutBinding) = T(x)

"""

"""
convert(T::Type{_DescriptorSetLayoutCreateInfo}, x::DescriptorSetLayoutCreateInfo) = T(x)

"""

"""
convert(T::Type{_DescriptorPoolSize}, x::DescriptorPoolSize) = T(x)

"""

"""
convert(T::Type{_DescriptorPoolCreateInfo}, x::DescriptorPoolCreateInfo) = T(x)

"""

"""
convert(T::Type{_DescriptorSetAllocateInfo}, x::DescriptorSetAllocateInfo) = T(x)

"""

"""
convert(T::Type{_SpecializationMapEntry}, x::SpecializationMapEntry) = T(x)

"""

"""
convert(T::Type{_SpecializationInfo}, x::SpecializationInfo) = T(x)

"""

"""
convert(T::Type{_PipelineShaderStageCreateInfo}, x::PipelineShaderStageCreateInfo) = T(x)

"""

"""
convert(T::Type{_ComputePipelineCreateInfo}, x::ComputePipelineCreateInfo) = T(x)

"""

"""
convert(T::Type{_VertexInputBindingDescription}, x::VertexInputBindingDescription) = T(x)

"""

"""
convert(T::Type{_VertexInputAttributeDescription}, x::VertexInputAttributeDescription) = T(x)

"""

"""
convert(T::Type{_PipelineVertexInputStateCreateInfo}, x::PipelineVertexInputStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineInputAssemblyStateCreateInfo}, x::PipelineInputAssemblyStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineTessellationStateCreateInfo}, x::PipelineTessellationStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineViewportStateCreateInfo}, x::PipelineViewportStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationStateCreateInfo}, x::PipelineRasterizationStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineMultisampleStateCreateInfo}, x::PipelineMultisampleStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineColorBlendAttachmentState}, x::PipelineColorBlendAttachmentState) = T(x)

"""

"""
convert(T::Type{_PipelineColorBlendStateCreateInfo}, x::PipelineColorBlendStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineDynamicStateCreateInfo}, x::PipelineDynamicStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_StencilOpState}, x::StencilOpState) = T(x)

"""

"""
convert(T::Type{_PipelineDepthStencilStateCreateInfo}, x::PipelineDepthStencilStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_GraphicsPipelineCreateInfo}, x::GraphicsPipelineCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineCacheCreateInfo}, x::PipelineCacheCreateInfo) = T(x)

"""

"""
convert(T::Type{_PushConstantRange}, x::PushConstantRange) = T(x)

"""

"""
convert(T::Type{_PipelineLayoutCreateInfo}, x::PipelineLayoutCreateInfo) = T(x)

"""

"""
convert(T::Type{_SamplerCreateInfo}, x::SamplerCreateInfo) = T(x)

"""

"""
convert(T::Type{_CommandPoolCreateInfo}, x::CommandPoolCreateInfo) = T(x)

"""

"""
convert(T::Type{_CommandBufferAllocateInfo}, x::CommandBufferAllocateInfo) = T(x)

"""

"""
convert(T::Type{_CommandBufferInheritanceInfo}, x::CommandBufferInheritanceInfo) = T(x)

"""

"""
convert(T::Type{_CommandBufferBeginInfo}, x::CommandBufferBeginInfo) = T(x)

"""

"""
convert(T::Type{_RenderPassBeginInfo}, x::RenderPassBeginInfo) = T(x)

"""

"""
convert(T::Type{_ClearDepthStencilValue}, x::ClearDepthStencilValue) = T(x)

"""

"""
convert(T::Type{_ClearAttachment}, x::ClearAttachment) = T(x)

"""

"""
convert(T::Type{_AttachmentDescription}, x::AttachmentDescription) = T(x)

"""

"""
convert(T::Type{_AttachmentReference}, x::AttachmentReference) = T(x)

"""

"""
convert(T::Type{_SubpassDescription}, x::SubpassDescription) = T(x)

"""

"""
convert(T::Type{_SubpassDependency}, x::SubpassDependency) = T(x)

"""

"""
convert(T::Type{_RenderPassCreateInfo}, x::RenderPassCreateInfo) = T(x)

"""

"""
convert(T::Type{_EventCreateInfo}, x::EventCreateInfo) = T(x)

"""

"""
convert(T::Type{_FenceCreateInfo}, x::FenceCreateInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFeatures}, x::PhysicalDeviceFeatures) = T(x)

"""

"""
convert(T::Type{_SemaphoreCreateInfo}, x::SemaphoreCreateInfo) = T(x)

"""

"""
convert(T::Type{_QueryPoolCreateInfo}, x::QueryPoolCreateInfo) = T(x)

"""

"""
convert(T::Type{_FramebufferCreateInfo}, x::FramebufferCreateInfo) = T(x)

"""

"""
convert(T::Type{_DrawIndirectCommand}, x::DrawIndirectCommand) = T(x)

"""

"""
convert(T::Type{_DrawIndexedIndirectCommand}, x::DrawIndexedIndirectCommand) = T(x)

"""

"""
convert(T::Type{_DispatchIndirectCommand}, x::DispatchIndirectCommand) = T(x)

"""

"""
convert(T::Type{_SubmitInfo}, x::SubmitInfo) = T(x)

"""

"""
convert(T::Type{_DisplayModeParametersKHR}, x::DisplayModeParametersKHR) = T(x)

"""

"""
convert(T::Type{_DisplayModeCreateInfoKHR}, x::DisplayModeCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_DisplaySurfaceCreateInfoKHR}, x::DisplaySurfaceCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_DisplayPresentInfoKHR}, x::DisplayPresentInfoKHR) = T(x)

"""

"""
convert(T::Type{_Win32SurfaceCreateInfoKHR}, x::Win32SurfaceCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_SwapchainCreateInfoKHR}, x::SwapchainCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_PresentInfoKHR}, x::PresentInfoKHR) = T(x)

"""

"""
convert(T::Type{_DebugReportCallbackCreateInfoEXT}, x::DebugReportCallbackCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_ValidationFlagsEXT}, x::ValidationFlagsEXT) = T(x)

"""

"""
convert(T::Type{_ValidationFeaturesEXT}, x::ValidationFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationStateRasterizationOrderAMD}, x::PipelineRasterizationStateRasterizationOrderAMD) = T(x)

"""

"""
convert(T::Type{_DebugMarkerObjectNameInfoEXT}, x::DebugMarkerObjectNameInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugMarkerObjectTagInfoEXT}, x::DebugMarkerObjectTagInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugMarkerMarkerInfoEXT}, x::DebugMarkerMarkerInfoEXT) = T(x)

"""

"""
convert(T::Type{_DedicatedAllocationImageCreateInfoNV}, x::DedicatedAllocationImageCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_DedicatedAllocationBufferCreateInfoNV}, x::DedicatedAllocationBufferCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_DedicatedAllocationMemoryAllocateInfoNV}, x::DedicatedAllocationMemoryAllocateInfoNV) = T(x)

"""

"""
convert(T::Type{_ExternalMemoryImageCreateInfoNV}, x::ExternalMemoryImageCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_ExportMemoryAllocateInfoNV}, x::ExportMemoryAllocateInfoNV) = T(x)

"""

"""
convert(T::Type{_ImportMemoryWin32HandleInfoNV}, x::ImportMemoryWin32HandleInfoNV) = T(x)

"""

"""
convert(T::Type{_ExportMemoryWin32HandleInfoNV}, x::ExportMemoryWin32HandleInfoNV) = T(x)

"""

"""
convert(T::Type{_Win32KeyedMutexAcquireReleaseInfoNV}, x::Win32KeyedMutexAcquireReleaseInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDeviceGeneratedCommandsFeaturesNV}, x::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV) = T(x)

"""

"""
convert(T::Type{_DevicePrivateDataCreateInfoEXT}, x::DevicePrivateDataCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PrivateDataSlotCreateInfoEXT}, x::PrivateDataSlotCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDevicePrivateDataFeaturesEXT}, x::PhysicalDevicePrivateDataFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_GraphicsShaderGroupCreateInfoNV}, x::GraphicsShaderGroupCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_GraphicsPipelineShaderGroupsCreateInfoNV}, x::GraphicsPipelineShaderGroupsCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_BindShaderGroupIndirectCommandNV}, x::BindShaderGroupIndirectCommandNV) = T(x)

"""

"""
convert(T::Type{_BindIndexBufferIndirectCommandNV}, x::BindIndexBufferIndirectCommandNV) = T(x)

"""

"""
convert(T::Type{_BindVertexBufferIndirectCommandNV}, x::BindVertexBufferIndirectCommandNV) = T(x)

"""

"""
convert(T::Type{_SetStateFlagsIndirectCommandNV}, x::SetStateFlagsIndirectCommandNV) = T(x)

"""

"""
convert(T::Type{_IndirectCommandsStreamNV}, x::IndirectCommandsStreamNV) = T(x)

"""

"""
convert(T::Type{_IndirectCommandsLayoutTokenNV}, x::IndirectCommandsLayoutTokenNV) = T(x)

"""

"""
convert(T::Type{_IndirectCommandsLayoutCreateInfoNV}, x::IndirectCommandsLayoutCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_GeneratedCommandsInfoNV}, x::GeneratedCommandsInfoNV) = T(x)

"""

"""
convert(T::Type{_GeneratedCommandsMemoryRequirementsInfoNV}, x::GeneratedCommandsMemoryRequirementsInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFeatures2}, x::PhysicalDeviceFeatures2) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceImageFormatInfo2}, x::PhysicalDeviceImageFormatInfo2) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSparseImageFormatInfo2}, x::PhysicalDeviceSparseImageFormatInfo2) = T(x)

"""

"""
convert(T::Type{_ConformanceVersion}, x::ConformanceVersion) = T(x)

"""

"""
convert(T::Type{_PresentRegionsKHR}, x::PresentRegionsKHR) = T(x)

"""

"""
convert(T::Type{_PresentRegionKHR}, x::PresentRegionKHR) = T(x)

"""

"""
convert(T::Type{_RectLayerKHR}, x::RectLayerKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVariablePointersFeatures}, x::PhysicalDeviceVariablePointersFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExternalImageFormatInfo}, x::PhysicalDeviceExternalImageFormatInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExternalBufferInfo}, x::PhysicalDeviceExternalBufferInfo) = T(x)

"""

"""
convert(T::Type{_ExternalMemoryImageCreateInfo}, x::ExternalMemoryImageCreateInfo) = T(x)

"""

"""
convert(T::Type{_ExternalMemoryBufferCreateInfo}, x::ExternalMemoryBufferCreateInfo) = T(x)

"""

"""
convert(T::Type{_ExportMemoryAllocateInfo}, x::ExportMemoryAllocateInfo) = T(x)

"""

"""
convert(T::Type{_ImportMemoryWin32HandleInfoKHR}, x::ImportMemoryWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ExportMemoryWin32HandleInfoKHR}, x::ExportMemoryWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_MemoryGetWin32HandleInfoKHR}, x::MemoryGetWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ImportMemoryFdInfoKHR}, x::ImportMemoryFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_MemoryGetFdInfoKHR}, x::MemoryGetFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_Win32KeyedMutexAcquireReleaseInfoKHR}, x::Win32KeyedMutexAcquireReleaseInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExternalSemaphoreInfo}, x::PhysicalDeviceExternalSemaphoreInfo) = T(x)

"""

"""
convert(T::Type{_ExportSemaphoreCreateInfo}, x::ExportSemaphoreCreateInfo) = T(x)

"""

"""
convert(T::Type{_ImportSemaphoreWin32HandleInfoKHR}, x::ImportSemaphoreWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ExportSemaphoreWin32HandleInfoKHR}, x::ExportSemaphoreWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_D3D12FenceSubmitInfoKHR}, x::D3D12FenceSubmitInfoKHR) = T(x)

"""

"""
convert(T::Type{_SemaphoreGetWin32HandleInfoKHR}, x::SemaphoreGetWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ImportSemaphoreFdInfoKHR}, x::ImportSemaphoreFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_SemaphoreGetFdInfoKHR}, x::SemaphoreGetFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExternalFenceInfo}, x::PhysicalDeviceExternalFenceInfo) = T(x)

"""

"""
convert(T::Type{_ExportFenceCreateInfo}, x::ExportFenceCreateInfo) = T(x)

"""

"""
convert(T::Type{_ImportFenceWin32HandleInfoKHR}, x::ImportFenceWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ExportFenceWin32HandleInfoKHR}, x::ExportFenceWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_FenceGetWin32HandleInfoKHR}, x::FenceGetWin32HandleInfoKHR) = T(x)

"""

"""
convert(T::Type{_ImportFenceFdInfoKHR}, x::ImportFenceFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_FenceGetFdInfoKHR}, x::FenceGetFdInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceMultiviewFeatures}, x::PhysicalDeviceMultiviewFeatures) = T(x)

"""

"""
convert(T::Type{_RenderPassMultiviewCreateInfo}, x::RenderPassMultiviewCreateInfo) = T(x)

"""

"""
convert(T::Type{_DisplayPowerInfoEXT}, x::DisplayPowerInfoEXT) = T(x)

"""

"""
convert(T::Type{_DeviceEventInfoEXT}, x::DeviceEventInfoEXT) = T(x)

"""

"""
convert(T::Type{_DisplayEventInfoEXT}, x::DisplayEventInfoEXT) = T(x)

"""

"""
convert(T::Type{_SwapchainCounterCreateInfoEXT}, x::SwapchainCounterCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_MemoryAllocateFlagsInfo}, x::MemoryAllocateFlagsInfo) = T(x)

"""

"""
convert(T::Type{_BindBufferMemoryInfo}, x::BindBufferMemoryInfo) = T(x)

"""

"""
convert(T::Type{_BindBufferMemoryDeviceGroupInfo}, x::BindBufferMemoryDeviceGroupInfo) = T(x)

"""

"""
convert(T::Type{_BindImageMemoryInfo}, x::BindImageMemoryInfo) = T(x)

"""

"""
convert(T::Type{_BindImageMemoryDeviceGroupInfo}, x::BindImageMemoryDeviceGroupInfo) = T(x)

"""

"""
convert(T::Type{_DeviceGroupRenderPassBeginInfo}, x::DeviceGroupRenderPassBeginInfo) = T(x)

"""

"""
convert(T::Type{_DeviceGroupCommandBufferBeginInfo}, x::DeviceGroupCommandBufferBeginInfo) = T(x)

"""

"""
convert(T::Type{_DeviceGroupSubmitInfo}, x::DeviceGroupSubmitInfo) = T(x)

"""

"""
convert(T::Type{_DeviceGroupBindSparseInfo}, x::DeviceGroupBindSparseInfo) = T(x)

"""

"""
convert(T::Type{_ImageSwapchainCreateInfoKHR}, x::ImageSwapchainCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_BindImageMemorySwapchainInfoKHR}, x::BindImageMemorySwapchainInfoKHR) = T(x)

"""

"""
convert(T::Type{_AcquireNextImageInfoKHR}, x::AcquireNextImageInfoKHR) = T(x)

"""

"""
convert(T::Type{_DeviceGroupPresentInfoKHR}, x::DeviceGroupPresentInfoKHR) = T(x)

"""

"""
convert(T::Type{_DeviceGroupDeviceCreateInfo}, x::DeviceGroupDeviceCreateInfo) = T(x)

"""

"""
convert(T::Type{_DeviceGroupSwapchainCreateInfoKHR}, x::DeviceGroupSwapchainCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_DescriptorUpdateTemplateEntry}, x::DescriptorUpdateTemplateEntry) = T(x)

"""

"""
convert(T::Type{_DescriptorUpdateTemplateCreateInfo}, x::DescriptorUpdateTemplateCreateInfo) = T(x)

"""

"""
convert(T::Type{_XYColorEXT}, x::XYColorEXT) = T(x)

"""

"""
convert(T::Type{_HdrMetadataEXT}, x::HdrMetadataEXT) = T(x)

"""

"""
convert(T::Type{_SwapchainDisplayNativeHdrCreateInfoAMD}, x::SwapchainDisplayNativeHdrCreateInfoAMD) = T(x)

"""

"""
convert(T::Type{_PresentTimesInfoGOOGLE}, x::PresentTimesInfoGOOGLE) = T(x)

"""

"""
convert(T::Type{_PresentTimeGOOGLE}, x::PresentTimeGOOGLE) = T(x)

"""

"""
convert(T::Type{_ViewportWScalingNV}, x::ViewportWScalingNV) = T(x)

"""

"""
convert(T::Type{_PipelineViewportWScalingStateCreateInfoNV}, x::PipelineViewportWScalingStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_ViewportSwizzleNV}, x::ViewportSwizzleNV) = T(x)

"""

"""
convert(T::Type{_PipelineViewportSwizzleStateCreateInfoNV}, x::PipelineViewportSwizzleStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PipelineDiscardRectangleStateCreateInfoEXT}, x::PipelineDiscardRectangleStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_InputAttachmentAspectReference}, x::InputAttachmentAspectReference) = T(x)

"""

"""
convert(T::Type{_RenderPassInputAttachmentAspectCreateInfo}, x::RenderPassInputAttachmentAspectCreateInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSurfaceInfo2KHR}, x::PhysicalDeviceSurfaceInfo2KHR) = T(x)

"""

"""
convert(T::Type{_DisplayPlaneInfo2KHR}, x::DisplayPlaneInfo2KHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDevice16BitStorageFeatures}, x::PhysicalDevice16BitStorageFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderSubgroupExtendedTypesFeatures}, x::PhysicalDeviceShaderSubgroupExtendedTypesFeatures) = T(x)

"""

"""
convert(T::Type{_BufferMemoryRequirementsInfo2}, x::BufferMemoryRequirementsInfo2) = T(x)

"""

"""
convert(T::Type{_ImageMemoryRequirementsInfo2}, x::ImageMemoryRequirementsInfo2) = T(x)

"""

"""
convert(T::Type{_ImageSparseMemoryRequirementsInfo2}, x::ImageSparseMemoryRequirementsInfo2) = T(x)

"""

"""
convert(T::Type{_MemoryDedicatedAllocateInfo}, x::MemoryDedicatedAllocateInfo) = T(x)

"""

"""
convert(T::Type{_ImageViewUsageCreateInfo}, x::ImageViewUsageCreateInfo) = T(x)

"""

"""
convert(T::Type{_PipelineTessellationDomainOriginStateCreateInfo}, x::PipelineTessellationDomainOriginStateCreateInfo) = T(x)

"""

"""
convert(T::Type{_SamplerYcbcrConversionInfo}, x::SamplerYcbcrConversionInfo) = T(x)

"""

"""
convert(T::Type{_SamplerYcbcrConversionCreateInfo}, x::SamplerYcbcrConversionCreateInfo) = T(x)

"""

"""
convert(T::Type{_BindImagePlaneMemoryInfo}, x::BindImagePlaneMemoryInfo) = T(x)

"""

"""
convert(T::Type{_ImagePlaneMemoryRequirementsInfo}, x::ImagePlaneMemoryRequirementsInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSamplerYcbcrConversionFeatures}, x::PhysicalDeviceSamplerYcbcrConversionFeatures) = T(x)

"""

"""
convert(T::Type{_ConditionalRenderingBeginInfoEXT}, x::ConditionalRenderingBeginInfoEXT) = T(x)

"""

"""
convert(T::Type{_ProtectedSubmitInfo}, x::ProtectedSubmitInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceProtectedMemoryFeatures}, x::PhysicalDeviceProtectedMemoryFeatures) = T(x)

"""

"""
convert(T::Type{_DeviceQueueInfo2}, x::DeviceQueueInfo2) = T(x)

"""

"""
convert(T::Type{_PipelineCoverageToColorStateCreateInfoNV}, x::PipelineCoverageToColorStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_SampleLocationEXT}, x::SampleLocationEXT) = T(x)

"""

"""
convert(T::Type{_SampleLocationsInfoEXT}, x::SampleLocationsInfoEXT) = T(x)

"""

"""
convert(T::Type{_AttachmentSampleLocationsEXT}, x::AttachmentSampleLocationsEXT) = T(x)

"""

"""
convert(T::Type{_SubpassSampleLocationsEXT}, x::SubpassSampleLocationsEXT) = T(x)

"""

"""
convert(T::Type{_RenderPassSampleLocationsBeginInfoEXT}, x::RenderPassSampleLocationsBeginInfoEXT) = T(x)

"""

"""
convert(T::Type{_PipelineSampleLocationsStateCreateInfoEXT}, x::PipelineSampleLocationsStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_SamplerReductionModeCreateInfo}, x::SamplerReductionModeCreateInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceBlendOperationAdvancedFeaturesEXT}, x::PhysicalDeviceBlendOperationAdvancedFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineColorBlendAdvancedStateCreateInfoEXT}, x::PipelineColorBlendAdvancedStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceInlineUniformBlockFeaturesEXT}, x::PhysicalDeviceInlineUniformBlockFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_WriteDescriptorSetInlineUniformBlockEXT}, x::WriteDescriptorSetInlineUniformBlockEXT) = T(x)

"""

"""
convert(T::Type{_DescriptorPoolInlineUniformBlockCreateInfoEXT}, x::DescriptorPoolInlineUniformBlockCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PipelineCoverageModulationStateCreateInfoNV}, x::PipelineCoverageModulationStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_ImageFormatListCreateInfo}, x::ImageFormatListCreateInfo) = T(x)

"""

"""
convert(T::Type{_ValidationCacheCreateInfoEXT}, x::ValidationCacheCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_ShaderModuleValidationCacheCreateInfoEXT}, x::ShaderModuleValidationCacheCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderDrawParametersFeatures}, x::PhysicalDeviceShaderDrawParametersFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderFloat16Int8Features}, x::PhysicalDeviceShaderFloat16Int8Features) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceHostQueryResetFeatures}, x::PhysicalDeviceHostQueryResetFeatures) = T(x)

"""

"""
convert(T::Type{_DeviceQueueGlobalPriorityCreateInfoEXT}, x::DeviceQueueGlobalPriorityCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugUtilsObjectNameInfoEXT}, x::DebugUtilsObjectNameInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugUtilsObjectTagInfoEXT}, x::DebugUtilsObjectTagInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugUtilsLabelEXT}, x::DebugUtilsLabelEXT) = T(x)

"""

"""
convert(T::Type{_DebugUtilsMessengerCreateInfoEXT}, x::DebugUtilsMessengerCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_DebugUtilsMessengerCallbackDataEXT}, x::DebugUtilsMessengerCallbackDataEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDeviceMemoryReportFeaturesEXT}, x::PhysicalDeviceDeviceMemoryReportFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_DeviceDeviceMemoryReportCreateInfoEXT}, x::DeviceDeviceMemoryReportCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_ImportMemoryHostPointerInfoEXT}, x::ImportMemoryHostPointerInfoEXT) = T(x)

"""

"""
convert(T::Type{_CalibratedTimestampInfoEXT}, x::CalibratedTimestampInfoEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationConservativeStateCreateInfoEXT}, x::PipelineRasterizationConservativeStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDescriptorIndexingFeatures}, x::PhysicalDeviceDescriptorIndexingFeatures) = T(x)

"""

"""
convert(T::Type{_DescriptorSetLayoutBindingFlagsCreateInfo}, x::DescriptorSetLayoutBindingFlagsCreateInfo) = T(x)

"""

"""
convert(T::Type{_DescriptorSetVariableDescriptorCountAllocateInfo}, x::DescriptorSetVariableDescriptorCountAllocateInfo) = T(x)

"""

"""
convert(T::Type{_AttachmentDescription2}, x::AttachmentDescription2) = T(x)

"""

"""
convert(T::Type{_AttachmentReference2}, x::AttachmentReference2) = T(x)

"""

"""
convert(T::Type{_SubpassDescription2}, x::SubpassDescription2) = T(x)

"""

"""
convert(T::Type{_SubpassDependency2}, x::SubpassDependency2) = T(x)

"""

"""
convert(T::Type{_RenderPassCreateInfo2}, x::RenderPassCreateInfo2) = T(x)

"""

"""
convert(T::Type{_SubpassBeginInfo}, x::SubpassBeginInfo) = T(x)

"""

"""
convert(T::Type{_SubpassEndInfo}, x::SubpassEndInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceTimelineSemaphoreFeatures}, x::PhysicalDeviceTimelineSemaphoreFeatures) = T(x)

"""

"""
convert(T::Type{_SemaphoreTypeCreateInfo}, x::SemaphoreTypeCreateInfo) = T(x)

"""

"""
convert(T::Type{_TimelineSemaphoreSubmitInfo}, x::TimelineSemaphoreSubmitInfo) = T(x)

"""

"""
convert(T::Type{_SemaphoreWaitInfo}, x::SemaphoreWaitInfo) = T(x)

"""

"""
convert(T::Type{_SemaphoreSignalInfo}, x::SemaphoreSignalInfo) = T(x)

"""

"""
convert(T::Type{_VertexInputBindingDivisorDescriptionEXT}, x::VertexInputBindingDivisorDescriptionEXT) = T(x)

"""

"""
convert(T::Type{_PipelineVertexInputDivisorStateCreateInfoEXT}, x::PipelineVertexInputDivisorStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_CommandBufferInheritanceConditionalRenderingInfoEXT}, x::CommandBufferInheritanceConditionalRenderingInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDevice8BitStorageFeatures}, x::PhysicalDevice8BitStorageFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceConditionalRenderingFeaturesEXT}, x::PhysicalDeviceConditionalRenderingFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVulkanMemoryModelFeatures}, x::PhysicalDeviceVulkanMemoryModelFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderAtomicInt64Features}, x::PhysicalDeviceShaderAtomicInt64Features) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderAtomicFloatFeaturesEXT}, x::PhysicalDeviceShaderAtomicFloatFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVertexAttributeDivisorFeaturesEXT}, x::PhysicalDeviceVertexAttributeDivisorFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_SubpassDescriptionDepthStencilResolve}, x::SubpassDescriptionDepthStencilResolve) = T(x)

"""

"""
convert(T::Type{_ImageViewASTCDecodeModeEXT}, x::ImageViewASTCDecodeModeEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceASTCDecodeFeaturesEXT}, x::PhysicalDeviceASTCDecodeFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceTransformFeedbackFeaturesEXT}, x::PhysicalDeviceTransformFeedbackFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationStateStreamCreateInfoEXT}, x::PipelineRasterizationStateStreamCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceRepresentativeFragmentTestFeaturesNV}, x::PhysicalDeviceRepresentativeFragmentTestFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PipelineRepresentativeFragmentTestStateCreateInfoNV}, x::PipelineRepresentativeFragmentTestStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExclusiveScissorFeaturesNV}, x::PhysicalDeviceExclusiveScissorFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PipelineViewportExclusiveScissorStateCreateInfoNV}, x::PipelineViewportExclusiveScissorStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceCornerSampledImageFeaturesNV}, x::PhysicalDeviceCornerSampledImageFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceComputeShaderDerivativesFeaturesNV}, x::PhysicalDeviceComputeShaderDerivativesFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentShaderBarycentricFeaturesNV}, x::PhysicalDeviceFragmentShaderBarycentricFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderImageFootprintFeaturesNV}, x::PhysicalDeviceShaderImageFootprintFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV}, x::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) = T(x)

"""

"""
convert(T::Type{_ShadingRatePaletteNV}, x::ShadingRatePaletteNV) = T(x)

"""

"""
convert(T::Type{_PipelineViewportShadingRateImageStateCreateInfoNV}, x::PipelineViewportShadingRateImageStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShadingRateImageFeaturesNV}, x::PhysicalDeviceShadingRateImageFeaturesNV) = T(x)

"""

"""
convert(T::Type{_CoarseSampleLocationNV}, x::CoarseSampleLocationNV) = T(x)

"""

"""
convert(T::Type{_CoarseSampleOrderCustomNV}, x::CoarseSampleOrderCustomNV) = T(x)

"""

"""
convert(T::Type{_PipelineViewportCoarseSampleOrderStateCreateInfoNV}, x::PipelineViewportCoarseSampleOrderStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceMeshShaderFeaturesNV}, x::PhysicalDeviceMeshShaderFeaturesNV) = T(x)

"""

"""
convert(T::Type{_DrawMeshTasksIndirectCommandNV}, x::DrawMeshTasksIndirectCommandNV) = T(x)

"""

"""
convert(T::Type{_RayTracingShaderGroupCreateInfoNV}, x::RayTracingShaderGroupCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_RayTracingShaderGroupCreateInfoKHR}, x::RayTracingShaderGroupCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_RayTracingPipelineCreateInfoNV}, x::RayTracingPipelineCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_RayTracingPipelineCreateInfoKHR}, x::RayTracingPipelineCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_GeometryTrianglesNV}, x::GeometryTrianglesNV) = T(x)

"""

"""
convert(T::Type{_GeometryAABBNV}, x::GeometryAABBNV) = T(x)

"""

"""
convert(T::Type{_GeometryDataNV}, x::GeometryDataNV) = T(x)

"""

"""
convert(T::Type{_GeometryNV}, x::GeometryNV) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureInfoNV}, x::AccelerationStructureInfoNV) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureCreateInfoNV}, x::AccelerationStructureCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_BindAccelerationStructureMemoryInfoNV}, x::BindAccelerationStructureMemoryInfoNV) = T(x)

"""

"""
convert(T::Type{_WriteDescriptorSetAccelerationStructureKHR}, x::WriteDescriptorSetAccelerationStructureKHR) = T(x)

"""

"""
convert(T::Type{_WriteDescriptorSetAccelerationStructureNV}, x::WriteDescriptorSetAccelerationStructureNV) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureMemoryRequirementsInfoNV}, x::AccelerationStructureMemoryRequirementsInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceAccelerationStructureFeaturesKHR}, x::PhysicalDeviceAccelerationStructureFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceRayTracingPipelineFeaturesKHR}, x::PhysicalDeviceRayTracingPipelineFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceRayQueryFeaturesKHR}, x::PhysicalDeviceRayQueryFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_StridedDeviceAddressRegionKHR}, x::StridedDeviceAddressRegionKHR) = T(x)

"""

"""
convert(T::Type{_TraceRaysIndirectCommandKHR}, x::TraceRaysIndirectCommandKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceImageDrmFormatModifierInfoEXT}, x::PhysicalDeviceImageDrmFormatModifierInfoEXT) = T(x)

"""

"""
convert(T::Type{_ImageDrmFormatModifierListCreateInfoEXT}, x::ImageDrmFormatModifierListCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_ImageDrmFormatModifierExplicitCreateInfoEXT}, x::ImageDrmFormatModifierExplicitCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_ImageStencilUsageCreateInfo}, x::ImageStencilUsageCreateInfo) = T(x)

"""

"""
convert(T::Type{_DeviceMemoryOverallocationCreateInfoAMD}, x::DeviceMemoryOverallocationCreateInfoAMD) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentDensityMapFeaturesEXT}, x::PhysicalDeviceFragmentDensityMapFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentDensityMap2FeaturesEXT}, x::PhysicalDeviceFragmentDensityMap2FeaturesEXT) = T(x)

"""

"""
convert(T::Type{_RenderPassFragmentDensityMapCreateInfoEXT}, x::RenderPassFragmentDensityMapCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceScalarBlockLayoutFeatures}, x::PhysicalDeviceScalarBlockLayoutFeatures) = T(x)

"""

"""
convert(T::Type{_SurfaceProtectedCapabilitiesKHR}, x::SurfaceProtectedCapabilitiesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceUniformBufferStandardLayoutFeatures}, x::PhysicalDeviceUniformBufferStandardLayoutFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDepthClipEnableFeaturesEXT}, x::PhysicalDeviceDepthClipEnableFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationDepthClipStateCreateInfoEXT}, x::PipelineRasterizationDepthClipStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceMemoryPriorityFeaturesEXT}, x::PhysicalDeviceMemoryPriorityFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_MemoryPriorityAllocateInfoEXT}, x::MemoryPriorityAllocateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceBufferDeviceAddressFeatures}, x::PhysicalDeviceBufferDeviceAddressFeatures) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceBufferDeviceAddressFeaturesEXT}, x::PhysicalDeviceBufferDeviceAddressFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_BufferDeviceAddressInfo}, x::BufferDeviceAddressInfo) = T(x)

"""

"""
convert(T::Type{_BufferOpaqueCaptureAddressCreateInfo}, x::BufferOpaqueCaptureAddressCreateInfo) = T(x)

"""

"""
convert(T::Type{_BufferDeviceAddressCreateInfoEXT}, x::BufferDeviceAddressCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceImageViewImageFormatInfoEXT}, x::PhysicalDeviceImageViewImageFormatInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceImagelessFramebufferFeatures}, x::PhysicalDeviceImagelessFramebufferFeatures) = T(x)

"""

"""
convert(T::Type{_FramebufferAttachmentsCreateInfo}, x::FramebufferAttachmentsCreateInfo) = T(x)

"""

"""
convert(T::Type{_FramebufferAttachmentImageInfo}, x::FramebufferAttachmentImageInfo) = T(x)

"""

"""
convert(T::Type{_RenderPassAttachmentBeginInfo}, x::RenderPassAttachmentBeginInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT}, x::PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceCooperativeMatrixFeaturesNV}, x::PhysicalDeviceCooperativeMatrixFeaturesNV) = T(x)

"""

"""
convert(T::Type{_CooperativeMatrixPropertiesNV}, x::CooperativeMatrixPropertiesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceYcbcrImageArraysFeaturesEXT}, x::PhysicalDeviceYcbcrImageArraysFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_ImageViewHandleInfoNVX}, x::ImageViewHandleInfoNVX) = T(x)

"""

"""
convert(T::Type{_PipelineCreationFeedbackCreateInfoEXT}, x::PipelineCreationFeedbackCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_SurfaceFullScreenExclusiveInfoEXT}, x::SurfaceFullScreenExclusiveInfoEXT) = T(x)

"""

"""
convert(T::Type{_SurfaceFullScreenExclusiveWin32InfoEXT}, x::SurfaceFullScreenExclusiveWin32InfoEXT) = T(x)

"""

"""
convert(T::Type{_SurfaceCapabilitiesFullScreenExclusiveEXT}, x::SurfaceCapabilitiesFullScreenExclusiveEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDevicePerformanceQueryFeaturesKHR}, x::PhysicalDevicePerformanceQueryFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_QueryPoolPerformanceCreateInfoKHR}, x::QueryPoolPerformanceCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_AcquireProfilingLockInfoKHR}, x::AcquireProfilingLockInfoKHR) = T(x)

"""

"""
convert(T::Type{_PerformanceQuerySubmitInfoKHR}, x::PerformanceQuerySubmitInfoKHR) = T(x)

"""

"""
convert(T::Type{_HeadlessSurfaceCreateInfoEXT}, x::HeadlessSurfaceCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceCoverageReductionModeFeaturesNV}, x::PhysicalDeviceCoverageReductionModeFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PipelineCoverageReductionStateCreateInfoNV}, x::PipelineCoverageReductionStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL}, x::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) = T(x)

"""

"""
convert(T::Type{_PerformanceValueINTEL}, x::PerformanceValueINTEL) = T(x)

"""

"""
convert(T::Type{_InitializePerformanceApiInfoINTEL}, x::InitializePerformanceApiInfoINTEL) = T(x)

"""

"""
convert(T::Type{_QueryPoolPerformanceQueryCreateInfoINTEL}, x::QueryPoolPerformanceQueryCreateInfoINTEL) = T(x)

"""

"""
convert(T::Type{_PerformanceMarkerInfoINTEL}, x::PerformanceMarkerInfoINTEL) = T(x)

"""

"""
convert(T::Type{_PerformanceStreamMarkerInfoINTEL}, x::PerformanceStreamMarkerInfoINTEL) = T(x)

"""

"""
convert(T::Type{_PerformanceOverrideInfoINTEL}, x::PerformanceOverrideInfoINTEL) = T(x)

"""

"""
convert(T::Type{_PerformanceConfigurationAcquireInfoINTEL}, x::PerformanceConfigurationAcquireInfoINTEL) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderClockFeaturesKHR}, x::PhysicalDeviceShaderClockFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceIndexTypeUint8FeaturesEXT}, x::PhysicalDeviceIndexTypeUint8FeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderSMBuiltinsFeaturesNV}, x::PhysicalDeviceShaderSMBuiltinsFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentShaderInterlockFeaturesEXT}, x::PhysicalDeviceFragmentShaderInterlockFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSeparateDepthStencilLayoutsFeatures}, x::PhysicalDeviceSeparateDepthStencilLayoutsFeatures) = T(x)

"""

"""
convert(T::Type{_AttachmentReferenceStencilLayout}, x::AttachmentReferenceStencilLayout) = T(x)

"""

"""
convert(T::Type{_AttachmentDescriptionStencilLayout}, x::AttachmentDescriptionStencilLayout) = T(x)

"""

"""
convert(T::Type{_PhysicalDevicePipelineExecutablePropertiesFeaturesKHR}, x::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PipelineInfoKHR}, x::PipelineInfoKHR) = T(x)

"""

"""
convert(T::Type{_PipelineExecutableInfoKHR}, x::PipelineExecutableInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT}, x::PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceTexelBufferAlignmentFeaturesEXT}, x::PhysicalDeviceTexelBufferAlignmentFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSubgroupSizeControlFeaturesEXT}, x::PhysicalDeviceSubgroupSizeControlFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_MemoryOpaqueCaptureAddressAllocateInfo}, x::MemoryOpaqueCaptureAddressAllocateInfo) = T(x)

"""

"""
convert(T::Type{_DeviceMemoryOpaqueCaptureAddressInfo}, x::DeviceMemoryOpaqueCaptureAddressInfo) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceLineRasterizationFeaturesEXT}, x::PhysicalDeviceLineRasterizationFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationLineStateCreateInfoEXT}, x::PipelineRasterizationLineStateCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDevicePipelineCreationCacheControlFeaturesEXT}, x::PhysicalDevicePipelineCreationCacheControlFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVulkan11Features}, x::PhysicalDeviceVulkan11Features) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVulkan12Features}, x::PhysicalDeviceVulkan12Features) = T(x)

"""

"""
convert(T::Type{_PipelineCompilerControlCreateInfoAMD}, x::PipelineCompilerControlCreateInfoAMD) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceCoherentMemoryFeaturesAMD}, x::PhysicalDeviceCoherentMemoryFeaturesAMD) = T(x)

"""

"""
convert(T::Type{_SamplerCustomBorderColorCreateInfoEXT}, x::SamplerCustomBorderColorCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceCustomBorderColorFeaturesEXT}, x::PhysicalDeviceCustomBorderColorFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureGeometryTrianglesDataKHR}, x::AccelerationStructureGeometryTrianglesDataKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureGeometryAabbsDataKHR}, x::AccelerationStructureGeometryAabbsDataKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureGeometryInstancesDataKHR}, x::AccelerationStructureGeometryInstancesDataKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureGeometryKHR}, x::AccelerationStructureGeometryKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureBuildGeometryInfoKHR}, x::AccelerationStructureBuildGeometryInfoKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureBuildRangeInfoKHR}, x::AccelerationStructureBuildRangeInfoKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureCreateInfoKHR}, x::AccelerationStructureCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_AabbPositionsKHR}, x::AabbPositionsKHR) = T(x)

"""

"""
convert(T::Type{_TransformMatrixKHR}, x::TransformMatrixKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureInstanceKHR}, x::AccelerationStructureInstanceKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureDeviceAddressInfoKHR}, x::AccelerationStructureDeviceAddressInfoKHR) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureVersionInfoKHR}, x::AccelerationStructureVersionInfoKHR) = T(x)

"""

"""
convert(T::Type{_CopyAccelerationStructureInfoKHR}, x::CopyAccelerationStructureInfoKHR) = T(x)

"""

"""
convert(T::Type{_CopyAccelerationStructureToMemoryInfoKHR}, x::CopyAccelerationStructureToMemoryInfoKHR) = T(x)

"""

"""
convert(T::Type{_CopyMemoryToAccelerationStructureInfoKHR}, x::CopyMemoryToAccelerationStructureInfoKHR) = T(x)

"""

"""
convert(T::Type{_RayTracingPipelineInterfaceCreateInfoKHR}, x::RayTracingPipelineInterfaceCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_PipelineLibraryCreateInfoKHR}, x::PipelineLibraryCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExtendedDynamicStateFeaturesEXT}, x::PhysicalDeviceExtendedDynamicStateFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceExtendedDynamicState2FeaturesEXT}, x::PhysicalDeviceExtendedDynamicState2FeaturesEXT) = T(x)

"""

"""
convert(T::Type{_RenderPassTransformBeginInfoQCOM}, x::RenderPassTransformBeginInfoQCOM) = T(x)

"""

"""
convert(T::Type{_CopyCommandTransformInfoQCOM}, x::CopyCommandTransformInfoQCOM) = T(x)

"""

"""
convert(T::Type{_CommandBufferInheritanceRenderPassTransformInfoQCOM}, x::CommandBufferInheritanceRenderPassTransformInfoQCOM) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceDiagnosticsConfigFeaturesNV}, x::PhysicalDeviceDiagnosticsConfigFeaturesNV) = T(x)

"""

"""
convert(T::Type{_DeviceDiagnosticsConfigCreateInfoNV}, x::DeviceDiagnosticsConfigCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR}, x::PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceRobustness2FeaturesEXT}, x::PhysicalDeviceRobustness2FeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceImageRobustnessFeaturesEXT}, x::PhysicalDeviceImageRobustnessFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR}, x::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDevice4444FormatsFeaturesEXT}, x::PhysicalDevice4444FormatsFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_BufferCopy2KHR}, x::BufferCopy2KHR) = T(x)

"""

"""
convert(T::Type{_ImageCopy2KHR}, x::ImageCopy2KHR) = T(x)

"""

"""
convert(T::Type{_ImageBlit2KHR}, x::ImageBlit2KHR) = T(x)

"""

"""
convert(T::Type{_BufferImageCopy2KHR}, x::BufferImageCopy2KHR) = T(x)

"""

"""
convert(T::Type{_ImageResolve2KHR}, x::ImageResolve2KHR) = T(x)

"""

"""
convert(T::Type{_CopyBufferInfo2KHR}, x::CopyBufferInfo2KHR) = T(x)

"""

"""
convert(T::Type{_CopyImageInfo2KHR}, x::CopyImageInfo2KHR) = T(x)

"""

"""
convert(T::Type{_BlitImageInfo2KHR}, x::BlitImageInfo2KHR) = T(x)

"""

"""
convert(T::Type{_CopyBufferToImageInfo2KHR}, x::CopyBufferToImageInfo2KHR) = T(x)

"""

"""
convert(T::Type{_CopyImageToBufferInfo2KHR}, x::CopyImageToBufferInfo2KHR) = T(x)

"""

"""
convert(T::Type{_ResolveImageInfo2KHR}, x::ResolveImageInfo2KHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderImageAtomicInt64FeaturesEXT}, x::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT) = T(x)

"""

"""
convert(T::Type{_FragmentShadingRateAttachmentInfoKHR}, x::FragmentShadingRateAttachmentInfoKHR) = T(x)

"""

"""
convert(T::Type{_PipelineFragmentShadingRateStateCreateInfoKHR}, x::PipelineFragmentShadingRateStateCreateInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentShadingRateFeaturesKHR}, x::PhysicalDeviceFragmentShadingRateFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceShaderTerminateInvocationFeaturesKHR}, x::PhysicalDeviceShaderTerminateInvocationFeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentShadingRateEnumsFeaturesNV}, x::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceFragmentShadingRateEnumsPropertiesNV}, x::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV) = T(x)

"""

"""
convert(T::Type{_PipelineFragmentShadingRateEnumStateCreateInfoNV}, x::PipelineFragmentShadingRateEnumStateCreateInfoNV) = T(x)

"""

"""
convert(T::Type{_AccelerationStructureBuildSizesInfoKHR}, x::AccelerationStructureBuildSizesInfoKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceMutableDescriptorTypeFeaturesVALVE}, x::PhysicalDeviceMutableDescriptorTypeFeaturesVALVE) = T(x)

"""

"""
convert(T::Type{_MutableDescriptorTypeListVALVE}, x::MutableDescriptorTypeListVALVE) = T(x)

"""

"""
convert(T::Type{_MutableDescriptorTypeCreateInfoVALVE}, x::MutableDescriptorTypeCreateInfoVALVE) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceVertexInputDynamicStateFeaturesEXT}, x::PhysicalDeviceVertexInputDynamicStateFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_VertexInputBindingDescription2EXT}, x::VertexInputBindingDescription2EXT) = T(x)

"""

"""
convert(T::Type{_VertexInputAttributeDescription2EXT}, x::VertexInputAttributeDescription2EXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceColorWriteEnableFeaturesEXT}, x::PhysicalDeviceColorWriteEnableFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineColorWriteCreateInfoEXT}, x::PipelineColorWriteCreateInfoEXT) = T(x)

"""

"""
convert(T::Type{_MemoryBarrier2KHR}, x::MemoryBarrier2KHR) = T(x)

"""

"""
convert(T::Type{_ImageMemoryBarrier2KHR}, x::ImageMemoryBarrier2KHR) = T(x)

"""

"""
convert(T::Type{_BufferMemoryBarrier2KHR}, x::BufferMemoryBarrier2KHR) = T(x)

"""

"""
convert(T::Type{_DependencyInfoKHR}, x::DependencyInfoKHR) = T(x)

"""

"""
convert(T::Type{_SemaphoreSubmitInfoKHR}, x::SemaphoreSubmitInfoKHR) = T(x)

"""

"""
convert(T::Type{_CommandBufferSubmitInfoKHR}, x::CommandBufferSubmitInfoKHR) = T(x)

"""

"""
convert(T::Type{_SubmitInfo2KHR}, x::SubmitInfo2KHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceSynchronization2FeaturesKHR}, x::PhysicalDeviceSynchronization2FeaturesKHR) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceInheritedViewportScissorFeaturesNV}, x::PhysicalDeviceInheritedViewportScissorFeaturesNV) = T(x)

"""

"""
convert(T::Type{_CommandBufferInheritanceViewportScissorInfoNV}, x::CommandBufferInheritanceViewportScissorInfoNV) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT}, x::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PhysicalDeviceProvokingVertexFeaturesEXT}, x::PhysicalDeviceProvokingVertexFeaturesEXT) = T(x)

"""

"""
convert(T::Type{_PipelineRasterizationProvokingVertexStateCreateInfoEXT}, x::PipelineRasterizationProvokingVertexStateCreateInfoEXT) = T(x)

"""
    create_instance(create_info::_InstanceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_LAYER_NOT_PRESENT`
  - `ERROR_EXTENSION_NOT_PRESENT`
  - `ERROR_INCOMPATIBLE_DRIVER`

Arguments:
- `create_info::_InstanceCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateInstance.html)

"""
function create_instance(create_info::_InstanceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}
    pInstance = Ref{VkInstance}()
    @check @dispatch(nothing, vkCreateInstance(create_info, allocator, pInstance))
    Instance(pInstance[], (x->destroy_instance(x; allocator)))
end

"""
    destroy_instance(instance; allocator = C_NULL)::Cvoid

Arguments:
- `instance` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyInstance.html)

"""
destroy_instance(instance; allocator = C_NULL)::Cvoid = @dispatch(instance, vkDestroyInstance(instance, allocator))

"""
    enumerate_physical_devices(instance)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `instance`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDevices.html)

"""
function enumerate_physical_devices(instance)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}
    pPhysicalDeviceCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance, vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, C_NULL))
            pPhysicalDevices = Vector{VkPhysicalDevice}(undef, pPhysicalDeviceCount[])
            @check @dispatch(instance, vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices))
        end
    PhysicalDevice.(pPhysicalDevices, identity, instance)
end

"""
    get_device_proc_addr(device, name::AbstractString)::FunctionPtr

Arguments:
- `device`
- `name::AbstractString`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceProcAddr.html)

"""
get_device_proc_addr(device, name::AbstractString)::FunctionPtr = vkGetDeviceProcAddr(device, name)

"""
    get_instance_proc_addr(name::AbstractString; instance = C_NULL)::FunctionPtr

Arguments:
- `name::AbstractString`
- `instance`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetInstanceProcAddr.html)

"""
get_instance_proc_addr(name::AbstractString; instance = C_NULL)::FunctionPtr = vkGetInstanceProcAddr(instance, name)

"""
    get_physical_device_properties(physical_device)::PhysicalDeviceProperties

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceProperties.html)

"""
function get_physical_device_properties(physical_device)::PhysicalDeviceProperties
    pProperties = Ref{VkPhysicalDeviceProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceProperties(physical_device, pProperties)
    from_vk(PhysicalDeviceProperties, pProperties[])
end

"""
    get_physical_device_queue_family_properties(physical_device)::Vector{QueueFamilyProperties}

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html)

"""
function get_physical_device_queue_family_properties(physical_device)::Vector{QueueFamilyProperties}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, C_NULL)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties}(undef, pQueueFamilyPropertyCount[])
    @dispatch instance(physical_device) vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    from_vk.(QueueFamilyProperties, pQueueFamilyProperties)
end

"""
    get_physical_device_memory_properties(physical_device)::PhysicalDeviceMemoryProperties

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMemoryProperties.html)

"""
function get_physical_device_memory_properties(physical_device)::PhysicalDeviceMemoryProperties
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceMemoryProperties(physical_device, pMemoryProperties)
    from_vk(PhysicalDeviceMemoryProperties, pMemoryProperties[])
end

"""
    get_physical_device_features(physical_device)::_PhysicalDeviceFeatures

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFeatures.html)

"""
function get_physical_device_features(physical_device)::_PhysicalDeviceFeatures
    pFeatures = Ref{VkPhysicalDeviceFeatures}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceFeatures(physical_device, pFeatures)
    from_vk(_PhysicalDeviceFeatures, pFeatures[])
end

"""
    get_physical_device_format_properties(physical_device, format::Format)::FormatProperties

Arguments:
- `physical_device`
- `format::Format`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFormatProperties.html)

"""
function get_physical_device_format_properties(physical_device, format::Format)::FormatProperties
    pFormatProperties = Ref{VkFormatProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceFormatProperties(physical_device, format, pFormatProperties)
    from_vk(FormatProperties, pFormatProperties[])
end

"""
    get_physical_device_image_format_properties(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `tiling::ImageTiling`
- `usage::ImageUsageFlag`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html)

"""
function get_physical_device_image_format_properties(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceImageFormatProperties(physical_device, format, type, tiling, usage, flags, pImageFormatProperties))
    from_vk(ImageFormatProperties, pImageFormatProperties[])
end

"""
    create_device(physical_device, create_info::_DeviceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_EXTENSION_NOT_PRESENT`
  - `ERROR_FEATURE_NOT_PRESENT`
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_DEVICE_LOST`

Arguments:
- `physical_device`
- `create_info::_DeviceCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDevice.html)

"""
function create_device(physical_device, create_info::_DeviceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}
    pDevice = Ref{VkDevice}()
    @check @dispatch(instance(physical_device), vkCreateDevice(physical_device, create_info, allocator, pDevice))
    Device(pDevice[], (x->destroy_device(x; allocator)), physical_device)
end

"""
    destroy_device(device; allocator = C_NULL)::Cvoid

Arguments:
- `device` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDevice.html)

"""
destroy_device(device; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyDevice(device, allocator))

"""
    enumerate_instance_version()::ResultTypes.Result{VersionNumber, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceVersion.html)

"""
function enumerate_instance_version()::ResultTypes.Result{VersionNumber, VulkanError}
    pApiVersion = Ref{UInt32}()
    @check @dispatch(nothing, vkEnumerateInstanceVersion(pApiVersion))
    from_vk(VersionNumber, pApiVersion[])
end

"""
    enumerate_instance_layer_properties()::ResultTypes.Result{Vector{LayerProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceLayerProperties.html)

"""
function enumerate_instance_layer_properties()::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(nothing, vkEnumerateInstanceLayerProperties(pPropertyCount, C_NULL))
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check @dispatch(nothing, vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties))
        end
    from_vk.(LayerProperties, pProperties)
end

"""
    enumerate_instance_extension_properties(; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_LAYER_NOT_PRESENT`

Arguments:
- `layer_name`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceExtensionProperties.html)

"""
function enumerate_instance_extension_properties(; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(nothing, vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, C_NULL))
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check @dispatch(nothing, vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, pProperties))
        end
    from_vk.(ExtensionProperties, pProperties)
end

"""
    enumerate_device_layer_properties(physical_device)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateDeviceLayerProperties.html)

"""
function enumerate_device_layer_properties(physical_device)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(LayerProperties, pProperties)
end

"""
    enumerate_device_extension_properties(physical_device; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_LAYER_NOT_PRESENT`

Arguments:
- `physical_device`
- `layer_name`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateDeviceExtensionProperties.html)

"""
function enumerate_device_extension_properties(physical_device; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, C_NULL))
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, pProperties))
        end
    from_vk.(ExtensionProperties, pProperties)
end

"""
    get_device_queue(device, queue_family_index::Integer, queue_index::Integer)::Queue

Arguments:
- `device`
- `queue_family_index::Integer`
- `queue_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceQueue.html)

"""
function get_device_queue(device, queue_family_index::Integer, queue_index::Integer)::Queue
    pQueue = Ref{VkQueue}()
    @dispatch device vkGetDeviceQueue(device, queue_family_index, queue_index, pQueue)
    Queue(pQueue[], identity, device)
end

"""
    queue_submit(queue, submits::AbstractArray{_SubmitInfo}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `submits::AbstractArray{_SubmitInfo}`
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSubmit.html)

"""
queue_submit(queue, submits::AbstractArray{_SubmitInfo}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueueSubmit(queue, pointer_length(submits), submits, fence)))

"""
    queue_wait_idle(queue)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueWaitIdle.html)

"""
queue_wait_idle(queue)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueueWaitIdle(queue)))

"""
    device_wait_idle(device)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDeviceWaitIdle.html)

"""
device_wait_idle(device)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkDeviceWaitIdle(device)))

"""
    allocate_memory(device, allocate_info::_MemoryAllocateInfo; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `allocate_info::_MemoryAllocateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateMemory.html)

"""
function allocate_memory(device, allocate_info::_MemoryAllocateInfo; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}
    pMemory = Ref{VkDeviceMemory}()
    @check @dispatch(device, vkAllocateMemory(device, allocate_info, allocator, pMemory))
    DeviceMemory(pMemory[], (x->free_memory(device, x; allocator)), device)
end

"""
    free_memory(device, memory; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `memory` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeMemory.html)

"""
free_memory(device, memory; allocator = C_NULL)::Cvoid = @dispatch(device, vkFreeMemory(device, memory, allocator))

"""
    map_memory(device, memory, offset::Integer, size::Integer; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_MEMORY_MAP_FAILED`

Arguments:
- `device`
- `memory` (externsync)
- `offset::Integer`
- `size::Integer`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMapMemory.html)

"""
function map_memory(device, memory, offset::Integer, size::Integer; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}
    ppData = Ref{Ptr{Cvoid}}()
    @check @dispatch(device, vkMapMemory(device, memory, offset, size, flags, ppData))
    ppData[]
end

"""
    unmap_memory(device, memory)::Cvoid

Arguments:
- `device`
- `memory` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUnmapMemory.html)

"""
unmap_memory(device, memory)::Cvoid = @dispatch(device, vkUnmapMemory(device, memory))

"""
    flush_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `memory_ranges::AbstractArray{_MappedMemoryRange}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFlushMappedMemoryRanges.html)

"""
flush_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkFlushMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges)))

"""
    invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `memory_ranges::AbstractArray{_MappedMemoryRange}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkInvalidateMappedMemoryRanges.html)

"""
invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkInvalidateMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges)))

"""
    get_device_memory_commitment(device, memory)::UInt64

Arguments:
- `device`
- `memory`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceMemoryCommitment.html)

"""
function get_device_memory_commitment(device, memory)::UInt64
    pCommittedMemoryInBytes = Ref{VkDeviceSize}()
    @dispatch device vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes)
    pCommittedMemoryInBytes[]
end

"""
    get_buffer_memory_requirements(device, buffer)::MemoryRequirements

Arguments:
- `device`
- `buffer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferMemoryRequirements.html)

"""
function get_buffer_memory_requirements(device, buffer)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    @dispatch device vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

"""
    bind_buffer_memory(device, buffer, memory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `buffer` (externsync)
- `memory`
- `memory_offset::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindBufferMemory.html)

"""
bind_buffer_memory(device, buffer, memory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBindBufferMemory(device, buffer, memory, memory_offset)))

"""
    get_image_memory_requirements(device, image)::MemoryRequirements

Arguments:
- `device`
- `image`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageMemoryRequirements.html)

"""
function get_image_memory_requirements(device, image)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    @dispatch device vkGetImageMemoryRequirements(device, image, pMemoryRequirements)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

"""
    bind_image_memory(device, image, memory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `image` (externsync)
- `memory`
- `memory_offset::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindImageMemory.html)

"""
bind_image_memory(device, image, memory, memory_offset::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBindImageMemory(device, image, memory, memory_offset)))

"""
    get_image_sparse_memory_requirements(device, image)::Vector{SparseImageMemoryRequirements}

Arguments:
- `device`
- `image`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSparseMemoryRequirements.html)

"""
function get_image_sparse_memory_requirements(device, image)::Vector{SparseImageMemoryRequirements}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    @dispatch device vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, C_NULL)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements}(undef, pSparseMemoryRequirementCount[])
    @dispatch device vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    from_vk.(SparseImageMemoryRequirements, pSparseMemoryRequirements)
end

"""
    get_physical_device_sparse_image_format_properties(physical_device, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling)::Vector{SparseImageFormatProperties}

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `samples::SampleCountFlag`
- `usage::ImageUsageFlag`
- `tiling::ImageTiling`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html)

"""
function get_physical_device_sparse_image_format_properties(physical_device, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling)::Vector{SparseImageFormatProperties}
    pPropertyCount = Ref{UInt32}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, C_NULL)
    pProperties = Vector{VkSparseImageFormatProperties}(undef, pPropertyCount[])
    @dispatch instance(physical_device) vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, pProperties)
    from_vk.(SparseImageFormatProperties, pProperties)
end

"""
    queue_bind_sparse(queue, bind_info::AbstractArray{_BindSparseInfo}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `bind_info::AbstractArray{_BindSparseInfo}` (externsync)
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueBindSparse.html)

"""
queue_bind_sparse(queue, bind_info::AbstractArray{_BindSparseInfo}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueueBindSparse(queue, pointer_length(bind_info), bind_info, fence)))

"""
    create_fence(device, create_info::_FenceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_FenceCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateFence.html)

"""
function create_fence(device, create_info::_FenceCreateInfo; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check @dispatch(device, vkCreateFence(device, create_info, allocator, pFence))
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

"""
    destroy_fence(device, fence; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `fence` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyFence.html)

"""
destroy_fence(device, fence; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyFence(device, fence, allocator))

"""
    reset_fences(device, fences::AbstractArray{Fence})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `fences::AbstractArray{Fence}` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetFences.html)

"""
reset_fences(device, fences::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkResetFences(device, pointer_length(fences), fences)))

"""
    get_fence_status(device, fence)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `fence`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceStatus.html)

"""
get_fence_status(device, fence)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetFenceStatus(device, fence)))

"""
    wait_for_fences(device, fences::AbstractArray{Fence}, wait_all::Bool, timeout::Integer)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `fences::AbstractArray{Fence}`
- `wait_all::Bool`
- `timeout::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWaitForFences.html)

"""
wait_for_fences(device, fences::AbstractArray, wait_all::Bool, timeout::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkWaitForFences(device, pointer_length(fences), fences, wait_all, timeout)))

"""
    create_semaphore(device, create_info::_SemaphoreCreateInfo; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SemaphoreCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSemaphore.html)

"""
function create_semaphore(device, create_info::_SemaphoreCreateInfo; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}
    pSemaphore = Ref{VkSemaphore}()
    @check @dispatch(device, vkCreateSemaphore(device, create_info, allocator, pSemaphore))
    Semaphore(pSemaphore[], (x->destroy_semaphore(device, x; allocator)), device)
end

"""
    destroy_semaphore(device, semaphore; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `semaphore` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySemaphore.html)

"""
destroy_semaphore(device, semaphore; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroySemaphore(device, semaphore, allocator))

"""
    create_event(device, create_info::_EventCreateInfo; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_EventCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateEvent.html)

"""
function create_event(device, create_info::_EventCreateInfo; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}
    pEvent = Ref{VkEvent}()
    @check @dispatch(device, vkCreateEvent(device, create_info, allocator, pEvent))
    Event(pEvent[], (x->destroy_event(device, x; allocator)), device)
end

"""
    destroy_event(device, event; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `event` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyEvent.html)

"""
destroy_event(device, event; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyEvent(device, event, allocator))

"""
    get_event_status(device, event)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `EVENT_SET`
  - `EVENT_RESET`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `event`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetEventStatus.html)

"""
get_event_status(device, event)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetEventStatus(device, event)))

"""
    set_event(device, event)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `event` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetEvent.html)

"""
set_event(device, event)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkSetEvent(device, event)))

"""
    reset_event(device, event)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `event` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetEvent.html)

"""
reset_event(device, event)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkResetEvent(device, event)))

"""
    create_query_pool(device, create_info::_QueryPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_QueryPoolCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateQueryPool.html)

"""
function create_query_pool(device, create_info::_QueryPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}
    pQueryPool = Ref{VkQueryPool}()
    @check @dispatch(device, vkCreateQueryPool(device, create_info, allocator, pQueryPool))
    QueryPool(pQueryPool[], (x->destroy_query_pool(device, x; allocator)), device)
end

"""
    destroy_query_pool(device, query_pool; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `query_pool` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyQueryPool.html)

"""
destroy_query_pool(device, query_pool; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyQueryPool(device, query_pool, allocator))

"""
    get_query_pool_results(device, query_pool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `stride::Integer`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueryPoolResults.html)

"""
get_query_pool_results(device, query_pool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetQueryPoolResults(device, query_pool, first_query, query_count, data_size, data, stride, flags)))

"""
    reset_query_pool(device, query_pool, first_query::Integer, query_count::Integer)::Cvoid

Arguments:
- `device`
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetQueryPool.html)

"""
reset_query_pool(device, query_pool, first_query::Integer, query_count::Integer)::Cvoid = @dispatch(device, vkResetQueryPool(device, query_pool, first_query, query_count))

"""
    create_buffer(device, create_info::_BufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `create_info::_BufferCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateBuffer.html)

"""
function create_buffer(device, create_info::_BufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}
    pBuffer = Ref{VkBuffer}()
    @check @dispatch(device, vkCreateBuffer(device, create_info, allocator, pBuffer))
    Buffer(pBuffer[], (x->destroy_buffer(device, x; allocator)), device)
end

"""
    destroy_buffer(device, buffer; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `buffer` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyBuffer.html)

"""
destroy_buffer(device, buffer; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyBuffer(device, buffer, allocator))

"""
    create_buffer_view(device, create_info::_BufferViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_BufferViewCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateBufferView.html)

"""
function create_buffer_view(device, create_info::_BufferViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}
    pView = Ref{VkBufferView}()
    @check @dispatch(device, vkCreateBufferView(device, create_info, allocator, pView))
    BufferView(pView[], (x->destroy_buffer_view(device, x; allocator)), device)
end

"""
    destroy_buffer_view(device, buffer_view; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `buffer_view` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyBufferView.html)

"""
destroy_buffer_view(device, buffer_view; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyBufferView(device, buffer_view, allocator))

"""
    create_image(device, create_info::_ImageCreateInfo; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_ImageCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateImage.html)

"""
function create_image(device, create_info::_ImageCreateInfo; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}
    pImage = Ref{VkImage}()
    @check @dispatch(device, vkCreateImage(device, create_info, allocator, pImage))
    Image(pImage[], (x->destroy_image(device, x; allocator)), device)
end

"""
    destroy_image(device, image; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `image` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyImage.html)

"""
destroy_image(device, image; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyImage(device, image, allocator))

"""
    get_image_subresource_layout(device, image, subresource::_ImageSubresource)::SubresourceLayout

Arguments:
- `device`
- `image`
- `subresource::_ImageSubresource`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSubresourceLayout.html)

"""
function get_image_subresource_layout(device, image, subresource::_ImageSubresource)::SubresourceLayout
    pLayout = Ref{VkSubresourceLayout}()
    @dispatch device vkGetImageSubresourceLayout(device, image, subresource, pLayout)
    from_vk(SubresourceLayout, pLayout[])
end

"""
    create_image_view(device, create_info::_ImageViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_ImageViewCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateImageView.html)

"""
function create_image_view(device, create_info::_ImageViewCreateInfo; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}
    pView = Ref{VkImageView}()
    @check @dispatch(device, vkCreateImageView(device, create_info, allocator, pView))
    ImageView(pView[], (x->destroy_image_view(device, x; allocator)), device)
end

"""
    destroy_image_view(device, image_view; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `image_view` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyImageView.html)

"""
destroy_image_view(device, image_view; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyImageView(device, image_view, allocator))

"""
    create_shader_module(device, create_info::_ShaderModuleCreateInfo; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_info::_ShaderModuleCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateShaderModule.html)

"""
function create_shader_module(device, create_info::_ShaderModuleCreateInfo; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}
    pShaderModule = Ref{VkShaderModule}()
    @check @dispatch(device, vkCreateShaderModule(device, create_info, allocator, pShaderModule))
    ShaderModule(pShaderModule[], (x->destroy_shader_module(device, x; allocator)), device)
end

"""
    destroy_shader_module(device, shader_module; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `shader_module` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyShaderModule.html)

"""
destroy_shader_module(device, shader_module; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyShaderModule(device, shader_module, allocator))

"""
    create_pipeline_cache(device, create_info::_PipelineCacheCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_PipelineCacheCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePipelineCache.html)

"""
function create_pipeline_cache(device, create_info::_PipelineCacheCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}
    pPipelineCache = Ref{VkPipelineCache}()
    @check @dispatch(device, vkCreatePipelineCache(device, create_info, allocator, pPipelineCache))
    PipelineCache(pPipelineCache[], (x->destroy_pipeline_cache(device, x; allocator)), device)
end

"""
    destroy_pipeline_cache(device, pipeline_cache; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline_cache` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipelineCache.html)

"""
destroy_pipeline_cache(device, pipeline_cache; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyPipelineCache(device, pipeline_cache, allocator))

"""
    get_pipeline_cache_data(device, pipeline_cache)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline_cache`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineCacheData.html)

"""
function get_pipeline_cache_data(device, pipeline_cache)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetPipelineCacheData(device, pipeline_cache, pDataSize, C_NULL))
            pData = Libc.malloc(pDataSize[])
            @check @dispatch(device, vkGetPipelineCacheData(device, pipeline_cache, pDataSize, pData))
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

"""
    merge_pipeline_caches(device, dst_cache, src_caches::AbstractArray{PipelineCache})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `dst_cache` (externsync)
- `src_caches::AbstractArray{PipelineCache}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMergePipelineCaches.html)

"""
merge_pipeline_caches(device, dst_cache, src_caches::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkMergePipelineCaches(device, dst_cache, pointer_length(src_caches), src_caches)))

"""
    create_graphics_pipelines(device, create_infos::AbstractArray{_GraphicsPipelineCreateInfo}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_GraphicsPipelineCreateInfo}`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateGraphicsPipelines.html)

"""
function create_graphics_pipelines(device, create_infos::AbstractArray{_GraphicsPipelineCreateInfo}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check @dispatch(device, vkCreateGraphicsPipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines))
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

"""
    create_compute_pipelines(device, create_infos::AbstractArray{_ComputePipelineCreateInfo}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_ComputePipelineCreateInfo}`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateComputePipelines.html)

"""
function create_compute_pipelines(device, create_infos::AbstractArray{_ComputePipelineCreateInfo}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check @dispatch(device, vkCreateComputePipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines))
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

"""
    destroy_pipeline(device, pipeline; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipeline.html)

"""
destroy_pipeline(device, pipeline; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyPipeline(device, pipeline, allocator))

"""
    create_pipeline_layout(device, create_info::_PipelineLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_PipelineLayoutCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePipelineLayout.html)

"""
function create_pipeline_layout(device, create_info::_PipelineLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}
    pPipelineLayout = Ref{VkPipelineLayout}()
    @check @dispatch(device, vkCreatePipelineLayout(device, create_info, allocator, pPipelineLayout))
    PipelineLayout(pPipelineLayout[], (x->destroy_pipeline_layout(device, x; allocator)), device)
end

"""
    destroy_pipeline_layout(device, pipeline_layout; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline_layout` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipelineLayout.html)

"""
destroy_pipeline_layout(device, pipeline_layout; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyPipelineLayout(device, pipeline_layout, allocator))

"""
    create_sampler(device, create_info::_SamplerCreateInfo; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SamplerCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSampler.html)

"""
function create_sampler(device, create_info::_SamplerCreateInfo; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}
    pSampler = Ref{VkSampler}()
    @check @dispatch(device, vkCreateSampler(device, create_info, allocator, pSampler))
    Sampler(pSampler[], (x->destroy_sampler(device, x; allocator)), device)
end

"""
    destroy_sampler(device, sampler; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `sampler` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySampler.html)

"""
destroy_sampler(device, sampler; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroySampler(device, sampler, allocator))

"""
    create_descriptor_set_layout(device, create_info::_DescriptorSetLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_DescriptorSetLayoutCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorSetLayout.html)

"""
function create_descriptor_set_layout(device, create_info::_DescriptorSetLayoutCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}
    pSetLayout = Ref{VkDescriptorSetLayout}()
    @check @dispatch(device, vkCreateDescriptorSetLayout(device, create_info, allocator, pSetLayout))
    DescriptorSetLayout(pSetLayout[], (x->destroy_descriptor_set_layout(device, x; allocator)), device)
end

"""
    destroy_descriptor_set_layout(device, descriptor_set_layout; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_set_layout` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorSetLayout.html)

"""
destroy_descriptor_set_layout(device, descriptor_set_layout; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyDescriptorSetLayout(device, descriptor_set_layout, allocator))

"""
    create_descriptor_pool(device, create_info::_DescriptorPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FRAGMENTATION_EXT`

Arguments:
- `device`
- `create_info::_DescriptorPoolCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorPool.html)

"""
function create_descriptor_pool(device, create_info::_DescriptorPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}
    pDescriptorPool = Ref{VkDescriptorPool}()
    @check @dispatch(device, vkCreateDescriptorPool(device, create_info, allocator, pDescriptorPool))
    DescriptorPool(pDescriptorPool[], (x->destroy_descriptor_pool(device, x; allocator)), device)
end

"""
    destroy_descriptor_pool(device, descriptor_pool; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorPool.html)

"""
destroy_descriptor_pool(device, descriptor_pool; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyDescriptorPool(device, descriptor_pool, allocator))

"""
    reset_descriptor_pool(device, descriptor_pool; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetDescriptorPool.html)

"""
reset_descriptor_pool(device, descriptor_pool; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkResetDescriptorPool(device, descriptor_pool, flags)))

"""
    allocate_descriptor_sets(device, allocate_info::_DescriptorSetAllocateInfo)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FRAGMENTED_POOL`
  - `ERROR_OUT_OF_POOL_MEMORY`

Arguments:
- `device`
- `allocate_info::_DescriptorSetAllocateInfo` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateDescriptorSets.html)

"""
function allocate_descriptor_sets(device, allocate_info::_DescriptorSetAllocateInfo)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}
    pDescriptorSets = Vector{VkDescriptorSet}(undef, allocate_info.vks.descriptorSetCount)
    @check @dispatch(device, vkAllocateDescriptorSets(device, allocate_info, pDescriptorSets))
    DescriptorSet.(pDescriptorSets, identity, getproperty(allocate_info, :descriptor_pool))
end

"""
    free_descriptor_sets(device, descriptor_pool, descriptor_sets::AbstractArray{DescriptorSet})::ResultTypes.Result{Result, VulkanError}

Return codes:

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `descriptor_sets::AbstractArray{DescriptorSet}` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeDescriptorSets.html)

"""
free_descriptor_sets(device, descriptor_pool, descriptor_sets::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkFreeDescriptorSets(device, descriptor_pool, pointer_length(descriptor_sets), descriptor_sets)))

"""
    update_descriptor_sets(device, descriptor_writes::AbstractArray{_WriteDescriptorSet}, descriptor_copies::AbstractArray{_CopyDescriptorSet})::Cvoid

Arguments:
- `device`
- `descriptor_writes::AbstractArray{_WriteDescriptorSet}` (externsync)
- `descriptor_copies::AbstractArray{_CopyDescriptorSet}` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUpdateDescriptorSets.html)

"""
update_descriptor_sets(device, descriptor_writes::AbstractArray{_WriteDescriptorSet}, descriptor_copies::AbstractArray{_CopyDescriptorSet})::Cvoid = @dispatch(device, vkUpdateDescriptorSets(device, pointer_length(descriptor_writes), descriptor_writes, pointer_length(descriptor_copies), descriptor_copies))

"""
    create_framebuffer(device, create_info::_FramebufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_FramebufferCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateFramebuffer.html)

"""
function create_framebuffer(device, create_info::_FramebufferCreateInfo; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}
    pFramebuffer = Ref{VkFramebuffer}()
    @check @dispatch(device, vkCreateFramebuffer(device, create_info, allocator, pFramebuffer))
    Framebuffer(pFramebuffer[], (x->destroy_framebuffer(device, x; allocator)), device)
end

"""
    destroy_framebuffer(device, framebuffer; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `framebuffer` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyFramebuffer.html)

"""
destroy_framebuffer(device, framebuffer; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyFramebuffer(device, framebuffer, allocator))

"""
    create_render_pass(device, create_info::_RenderPassCreateInfo; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_RenderPassCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRenderPass.html)

"""
function create_render_pass(device, create_info::_RenderPassCreateInfo; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check @dispatch(device, vkCreateRenderPass(device, create_info, allocator, pRenderPass))
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x; allocator)), device)
end

"""
    destroy_render_pass(device, render_pass; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `render_pass` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyRenderPass.html)

"""
destroy_render_pass(device, render_pass; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyRenderPass(device, render_pass, allocator))

"""
    get_render_area_granularity(device, render_pass)::_Extent2D

Arguments:
- `device`
- `render_pass`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRenderAreaGranularity.html)

"""
function get_render_area_granularity(device, render_pass)::_Extent2D
    pGranularity = Ref{VkExtent2D}()
    @dispatch device vkGetRenderAreaGranularity(device, render_pass, pGranularity)
    from_vk(_Extent2D, pGranularity[])
end

"""
    create_command_pool(device, create_info::_CommandPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_CommandPoolCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateCommandPool.html)

"""
function create_command_pool(device, create_info::_CommandPoolCreateInfo; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}
    pCommandPool = Ref{VkCommandPool}()
    @check @dispatch(device, vkCreateCommandPool(device, create_info, allocator, pCommandPool))
    CommandPool(pCommandPool[], (x->destroy_command_pool(device, x; allocator)), device)
end

"""
    destroy_command_pool(device, command_pool; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyCommandPool.html)

"""
destroy_command_pool(device, command_pool; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyCommandPool(device, command_pool, allocator))

"""
    reset_command_pool(device, command_pool; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `command_pool` (externsync)
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetCommandPool.html)

"""
reset_command_pool(device, command_pool; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkResetCommandPool(device, command_pool, flags)))

"""
    allocate_command_buffers(device, allocate_info::_CommandBufferAllocateInfo)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `allocate_info::_CommandBufferAllocateInfo` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateCommandBuffers.html)

"""
function allocate_command_buffers(device, allocate_info::_CommandBufferAllocateInfo)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}
    pCommandBuffers = Vector{VkCommandBuffer}(undef, allocate_info.vks.commandBufferCount)
    @check @dispatch(device, vkAllocateCommandBuffers(device, allocate_info, pCommandBuffers))
    CommandBuffer.(pCommandBuffers, identity, getproperty(allocate_info, :command_pool))
end

"""
    free_command_buffers(device, command_pool, command_buffers::AbstractArray{CommandBuffer})::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `command_buffers::AbstractArray{CommandBuffer}` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeCommandBuffers.html)

"""
free_command_buffers(device, command_pool, command_buffers::AbstractArray)::Cvoid = @dispatch(device, vkFreeCommandBuffers(device, command_pool, pointer_length(command_buffers), command_buffers))

"""
    begin_command_buffer(command_buffer, begin_info::_CommandBufferBeginInfo)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `begin_info::_CommandBufferBeginInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBeginCommandBuffer.html)

"""
begin_command_buffer(command_buffer, begin_info::_CommandBufferBeginInfo)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkBeginCommandBuffer(command_buffer, begin_info)))

"""
    end_command_buffer(command_buffer)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEndCommandBuffer.html)

"""
end_command_buffer(command_buffer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkEndCommandBuffer(command_buffer)))

"""
    reset_command_buffer(command_buffer; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetCommandBuffer.html)

"""
reset_command_buffer(command_buffer; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkResetCommandBuffer(command_buffer, flags)))

"""
    cmd_bind_pipeline(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `pipeline`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindPipeline.html)

"""
cmd_bind_pipeline(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline)::Cvoid = @dispatch(device(command_buffer), vkCmdBindPipeline(command_buffer, pipeline_bind_point, pipeline))

"""
    cmd_set_viewport(command_buffer, viewports::AbstractArray{_Viewport})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `viewports::AbstractArray{_Viewport}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewport.html)

"""
cmd_set_viewport(command_buffer, viewports::AbstractArray{_Viewport})::Cvoid = @dispatch(device(command_buffer), vkCmdSetViewport(command_buffer, 0, pointer_length(viewports), viewports))

"""
    cmd_set_scissor(command_buffer, scissors::AbstractArray{_Rect2D})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `scissors::AbstractArray{_Rect2D}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetScissor.html)

"""
cmd_set_scissor(command_buffer, scissors::AbstractArray{_Rect2D})::Cvoid = @dispatch(device(command_buffer), vkCmdSetScissor(command_buffer, 0, pointer_length(scissors), scissors))

"""
    cmd_set_line_width(command_buffer, line_width::Real)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `line_width::Real`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLineWidth.html)

"""
cmd_set_line_width(command_buffer, line_width::Real)::Cvoid = @dispatch(device(command_buffer), vkCmdSetLineWidth(command_buffer, line_width))

"""
    cmd_set_depth_bias(command_buffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `depth_bias_constant_factor::Real`
- `depth_bias_clamp::Real`
- `depth_bias_slope_factor::Real`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBias.html)

"""
cmd_set_depth_bias(command_buffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthBias(command_buffer, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor))

"""
    cmd_set_blend_constants(command_buffer, blend_constants::NTuple{4, Float32})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `blend_constants::NTuple{4, Float32}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetBlendConstants.html)

"""
cmd_set_blend_constants(command_buffer, blend_constants::NTuple{4, Float32})::Cvoid = @dispatch(device(command_buffer), vkCmdSetBlendConstants(command_buffer, blend_constants))

"""
    cmd_set_depth_bounds(command_buffer, min_depth_bounds::Real, max_depth_bounds::Real)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `min_depth_bounds::Real`
- `max_depth_bounds::Real`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBounds.html)

"""
cmd_set_depth_bounds(command_buffer, min_depth_bounds::Real, max_depth_bounds::Real)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthBounds(command_buffer, min_depth_bounds, max_depth_bounds))

"""
    cmd_set_stencil_compare_mask(command_buffer, face_mask::StencilFaceFlag, compare_mask::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `compare_mask::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilCompareMask.html)

"""
cmd_set_stencil_compare_mask(command_buffer, face_mask::StencilFaceFlag, compare_mask::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetStencilCompareMask(command_buffer, face_mask, compare_mask))

"""
    cmd_set_stencil_write_mask(command_buffer, face_mask::StencilFaceFlag, write_mask::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `write_mask::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilWriteMask.html)

"""
cmd_set_stencil_write_mask(command_buffer, face_mask::StencilFaceFlag, write_mask::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetStencilWriteMask(command_buffer, face_mask, write_mask))

"""
    cmd_set_stencil_reference(command_buffer, face_mask::StencilFaceFlag, reference::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `reference::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilReference.html)

"""
cmd_set_stencil_reference(command_buffer, face_mask::StencilFaceFlag, reference::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetStencilReference(command_buffer, face_mask, reference))

"""
    cmd_bind_descriptor_sets(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, first_set::Integer, descriptor_sets::AbstractArray{DescriptorSet}, dynamic_offsets::AbstractArray{<:Integer})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `layout`
- `first_set::Integer`
- `descriptor_sets::AbstractArray{DescriptorSet}`
- `dynamic_offsets::AbstractArray{<:Integer}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindDescriptorSets.html)

"""
cmd_bind_descriptor_sets(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, first_set::Integer, descriptor_sets::AbstractArray, dynamic_offsets::AbstractArray)::Cvoid = @dispatch(device(command_buffer), vkCmdBindDescriptorSets(command_buffer, pipeline_bind_point, layout, first_set, pointer_length(descriptor_sets), descriptor_sets, pointer_length(dynamic_offsets), dynamic_offsets))

"""
    cmd_bind_index_buffer(command_buffer, buffer, offset::Integer, index_type::IndexType)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `index_type::IndexType`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindIndexBuffer.html)

"""
cmd_bind_index_buffer(command_buffer, buffer, offset::Integer, index_type::IndexType)::Cvoid = @dispatch(device(command_buffer), vkCmdBindIndexBuffer(command_buffer, buffer, offset, index_type))

"""
    cmd_bind_vertex_buffers(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindVertexBuffers.html)

"""
cmd_bind_vertex_buffers(command_buffer, buffers::AbstractArray, offsets::AbstractArray)::Cvoid = @dispatch(device(command_buffer), vkCmdBindVertexBuffers(command_buffer, 0, pointer_length(buffers), buffers, offsets))

"""
    cmd_draw(command_buffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `vertex_count::Integer`
- `instance_count::Integer`
- `first_vertex::Integer`
- `first_instance::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDraw.html)

"""
cmd_draw(command_buffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDraw(command_buffer, vertex_count, instance_count, first_vertex, first_instance))

"""
    cmd_draw_indexed(command_buffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `index_count::Integer`
- `instance_count::Integer`
- `first_index::Integer`
- `vertex_offset::Integer`
- `first_instance::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexed.html)

"""
cmd_draw_indexed(command_buffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndexed(command_buffer, index_count, instance_count, first_index, vertex_offset, first_instance))

"""
    cmd_draw_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirect.html)

"""
cmd_draw_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndirect(command_buffer, buffer, offset, draw_count, stride))

"""
    cmd_draw_indexed_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexedIndirect.html)

"""
cmd_draw_indexed_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndexedIndirect(command_buffer, buffer, offset, draw_count, stride))

"""
    cmd_dispatch(command_buffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `group_count_x::Integer`
- `group_count_y::Integer`
- `group_count_z::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatch.html)

"""
cmd_dispatch(command_buffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDispatch(command_buffer, group_count_x, group_count_y, group_count_z))

"""
    cmd_dispatch_indirect(command_buffer, buffer, offset::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatchIndirect.html)

"""
cmd_dispatch_indirect(command_buffer, buffer, offset::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDispatchIndirect(command_buffer, buffer, offset))

"""
    cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray{_BufferCopy})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_buffer`
- `dst_buffer`
- `regions::AbstractArray{_BufferCopy}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBuffer.html)

"""
cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray{_BufferCopy})::Cvoid = @dispatch(device(command_buffer), vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, pointer_length(regions), regions))

"""
    cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageCopy})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageCopy}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImage.html)

"""
cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageCopy})::Cvoid = @dispatch(device(command_buffer), vkCmdCopyImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions))

"""
    cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageBlit}, filter::Filter)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageBlit}`
- `filter::Filter`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBlitImage.html)

"""
cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageBlit}, filter::Filter)::Cvoid = @dispatch(device(command_buffer), vkCmdBlitImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, filter))

"""
    cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_BufferImageCopy})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_buffer`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_BufferImageCopy}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBufferToImage.html)

"""
cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_BufferImageCopy})::Cvoid = @dispatch(device(command_buffer), vkCmdCopyBufferToImage(command_buffer, src_buffer, dst_image, dst_image_layout, pointer_length(regions), regions))

"""
    cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray{_BufferImageCopy})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_buffer`
- `regions::AbstractArray{_BufferImageCopy}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImageToBuffer.html)

"""
cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray{_BufferImageCopy})::Cvoid = @dispatch(device(command_buffer), vkCmdCopyImageToBuffer(command_buffer, src_image, src_image_layout, dst_buffer, pointer_length(regions), regions))

"""
    cmd_update_buffer(command_buffer, dst_buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `dst_buffer`
- `dst_offset::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdUpdateBuffer.html)

"""
cmd_update_buffer(command_buffer, dst_buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid})::Cvoid = @dispatch(device(command_buffer), vkCmdUpdateBuffer(command_buffer, dst_buffer, dst_offset, data_size, data))

"""
    cmd_fill_buffer(command_buffer, dst_buffer, dst_offset::Integer, size::Integer, data::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `dst_buffer`
- `dst_offset::Integer`
- `size::Integer`
- `data::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdFillBuffer.html)

"""
cmd_fill_buffer(command_buffer, dst_buffer, dst_offset::Integer, size::Integer, data::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdFillBuffer(command_buffer, dst_buffer, dst_offset, size, data))

"""
    cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::_ClearColorValue, ranges::AbstractArray{_ImageSubresourceRange})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `image`
- `image_layout::ImageLayout`
- `color::_ClearColorValue`
- `ranges::AbstractArray{_ImageSubresourceRange}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearColorImage.html)

"""
cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::_ClearColorValue, ranges::AbstractArray{_ImageSubresourceRange})::Cvoid = @dispatch(device(command_buffer), vkCmdClearColorImage(command_buffer, image, image_layout, color, pointer_length(ranges), ranges))

"""
    cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray{_ImageSubresourceRange})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `image`
- `image_layout::ImageLayout`
- `depth_stencil::_ClearDepthStencilValue`
- `ranges::AbstractArray{_ImageSubresourceRange}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearDepthStencilImage.html)

"""
cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray{_ImageSubresourceRange})::Cvoid = @dispatch(device(command_buffer), vkCmdClearDepthStencilImage(command_buffer, image, image_layout, depth_stencil, pointer_length(ranges), ranges))

"""
    cmd_clear_attachments(command_buffer, attachments::AbstractArray{_ClearAttachment}, rects::AbstractArray{_ClearRect})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `attachments::AbstractArray{_ClearAttachment}`
- `rects::AbstractArray{_ClearRect}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearAttachments.html)

"""
cmd_clear_attachments(command_buffer, attachments::AbstractArray{_ClearAttachment}, rects::AbstractArray{_ClearRect})::Cvoid = @dispatch(device(command_buffer), vkCmdClearAttachments(command_buffer, pointer_length(attachments), attachments, pointer_length(rects), rects))

"""
    cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageResolve})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageResolve}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResolveImage.html)

"""
cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageResolve})::Cvoid = @dispatch(device(command_buffer), vkCmdResolveImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions))

"""
    cmd_set_event(command_buffer, event, stage_mask::PipelineStageFlag)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::PipelineStageFlag`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetEvent.html)

"""
cmd_set_event(command_buffer, event, stage_mask::PipelineStageFlag)::Cvoid = @dispatch(device(command_buffer), vkCmdSetEvent(command_buffer, event, stage_mask))

"""
    cmd_reset_event(command_buffer, event, stage_mask::PipelineStageFlag)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::PipelineStageFlag`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetEvent.html)

"""
cmd_reset_event(command_buffer, event, stage_mask::PipelineStageFlag)::Cvoid = @dispatch(device(command_buffer), vkCmdResetEvent(command_buffer, event, stage_mask))

"""
    cmd_wait_events(command_buffer, events::AbstractArray{Event}, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `events::AbstractArray{Event}`
- `memory_barriers::AbstractArray{_MemoryBarrier}`
- `buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}`
- `image_memory_barriers::AbstractArray{_ImageMemoryBarrier}`
- `src_stage_mask`: defaults to `0`
- `dst_stage_mask`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWaitEvents.html)

"""
cmd_wait_events(command_buffer, events::AbstractArray, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdWaitEvents(command_buffer, pointer_length(events), events, src_stage_mask, dst_stage_mask, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers))

"""
    cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}; dependency_flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_stage_mask::PipelineStageFlag`
- `dst_stage_mask::PipelineStageFlag`
- `memory_barriers::AbstractArray{_MemoryBarrier}`
- `buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}`
- `image_memory_barriers::AbstractArray{_ImageMemoryBarrier}`
- `dependency_flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPipelineBarrier.html)

"""
cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}; dependency_flags = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdPipelineBarrier(command_buffer, src_stage_mask, dst_stage_mask, dependency_flags, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers))

"""
    cmd_begin_query(command_buffer, query_pool, query::Integer; flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginQuery.html)

"""
cmd_begin_query(command_buffer, query_pool, query::Integer; flags = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginQuery(command_buffer, query_pool, query, flags))

"""
    cmd_end_query(command_buffer, query_pool, query::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndQuery.html)

"""
cmd_end_query(command_buffer, query_pool, query::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdEndQuery(command_buffer, query_pool, query))

"""
    cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT)::Cvoid

Extension: VK\\_EXT\\_conditional\\_rendering

Arguments:
- `command_buffer` (externsync)
- `conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginConditionalRenderingEXT.html)

"""
cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginConditionalRenderingEXT(command_buffer, conditional_rendering_begin))

"""
    cmd_end_conditional_rendering_ext(command_buffer)::Cvoid

Extension: VK\\_EXT\\_conditional\\_rendering

Arguments:
- `command_buffer` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndConditionalRenderingEXT.html)

"""
cmd_end_conditional_rendering_ext(command_buffer)::Cvoid = @dispatch(device(command_buffer), vkCmdEndConditionalRenderingEXT(command_buffer))

"""
    cmd_reset_query_pool(command_buffer, query_pool, first_query::Integer, query_count::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetQueryPool.html)

"""
cmd_reset_query_pool(command_buffer, query_pool, first_query::Integer, query_count::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdResetQueryPool(command_buffer, query_pool, first_query, query_count))

"""
    cmd_write_timestamp(command_buffer, pipeline_stage::PipelineStageFlag, query_pool, query::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_stage::PipelineStageFlag`
- `query_pool`
- `query::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteTimestamp.html)

"""
cmd_write_timestamp(command_buffer, pipeline_stage::PipelineStageFlag, query_pool, query::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteTimestamp(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), query_pool, query))

"""
    cmd_copy_query_pool_results(command_buffer, query_pool, first_query::Integer, query_count::Integer, dst_buffer, dst_offset::Integer, stride::Integer; flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `dst_buffer`
- `dst_offset::Integer`
- `stride::Integer`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyQueryPoolResults.html)

"""
cmd_copy_query_pool_results(command_buffer, query_pool, first_query::Integer, query_count::Integer, dst_buffer, dst_offset::Integer, stride::Integer; flags = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyQueryPoolResults(command_buffer, query_pool, first_query, query_count, dst_buffer, dst_offset, stride, flags))

"""
    cmd_push_constants(command_buffer, layout, stage_flags::ShaderStageFlag, offset::Integer, size::Integer, values::Ptr{Cvoid})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `layout`
- `stage_flags::ShaderStageFlag`
- `offset::Integer`
- `size::Integer`
- `values::Ptr{Cvoid}` (must be a valid pointer with `size` bytes)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushConstants.html)

"""
cmd_push_constants(command_buffer, layout, stage_flags::ShaderStageFlag, offset::Integer, size::Integer, values::Ptr{Cvoid})::Cvoid = @dispatch(device(command_buffer), vkCmdPushConstants(command_buffer, layout, stage_flags, offset, size, values))

"""
    cmd_begin_render_pass(command_buffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `render_pass_begin::_RenderPassBeginInfo`
- `contents::SubpassContents`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginRenderPass.html)

"""
cmd_begin_render_pass(command_buffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginRenderPass(command_buffer, render_pass_begin, contents))

"""
    cmd_next_subpass(command_buffer, contents::SubpassContents)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `contents::SubpassContents`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdNextSubpass.html)

"""
cmd_next_subpass(command_buffer, contents::SubpassContents)::Cvoid = @dispatch(device(command_buffer), vkCmdNextSubpass(command_buffer, contents))

"""
    cmd_end_render_pass(command_buffer)::Cvoid

Arguments:
- `command_buffer` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndRenderPass.html)

"""
cmd_end_render_pass(command_buffer)::Cvoid = @dispatch(device(command_buffer), vkCmdEndRenderPass(command_buffer))

"""
    cmd_execute_commands(command_buffer, command_buffers::AbstractArray{CommandBuffer})::Cvoid

Arguments:
- `command_buffer` (externsync)
- `command_buffers::AbstractArray{CommandBuffer}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdExecuteCommands.html)

"""
cmd_execute_commands(command_buffer, command_buffers::AbstractArray)::Cvoid = @dispatch(device(command_buffer), vkCmdExecuteCommands(command_buffer, pointer_length(command_buffers), command_buffers))

"""
    get_physical_device_display_properties_khr(physical_device)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPropertiesKHR.html)

"""
function get_physical_device_display_properties_khr(physical_device)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayPropertiesKHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(DisplayPropertiesKHR, pProperties)
end

"""
    get_physical_device_display_plane_properties_khr(physical_device)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPlanePropertiesKHR.html)

"""
function get_physical_device_display_plane_properties_khr(physical_device)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayPlanePropertiesKHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(DisplayPlanePropertiesKHR, pProperties)
end

"""
    get_display_plane_supported_displays_khr(physical_device, plane_index::Integer)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `plane_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneSupportedDisplaysKHR.html)

"""
function get_display_plane_supported_displays_khr(physical_device, plane_index::Integer)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}
    pDisplayCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, C_NULL))
            pDisplays = Vector{VkDisplayKHR}(undef, pDisplayCount[])
            @check @dispatch(instance(physical_device), vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, pDisplays))
        end
    DisplayKHR.(pDisplays, identity, physical_device)
end

"""
    get_display_mode_properties_khr(physical_device, display)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayModePropertiesKHR.html)

"""
function get_display_mode_properties_khr(physical_device, display)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayModePropertiesKHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, pProperties))
        end
    from_vk.(DisplayModePropertiesKHR, pProperties)
end

"""
    create_display_mode_khr(physical_device, display, create_info::_DisplayModeCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `display` (externsync)
- `create_info::_DisplayModeCreateInfoKHR`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDisplayModeKHR.html)

"""
function create_display_mode_khr(physical_device, display, create_info::_DisplayModeCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}
    pMode = Ref{VkDisplayModeKHR}()
    @check @dispatch(instance(physical_device), vkCreateDisplayModeKHR(physical_device, display, create_info, allocator, pMode))
    DisplayModeKHR(pMode[], identity, display)
end

"""
    get_display_plane_capabilities_khr(physical_device, mode, plane_index::Integer)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `mode` (externsync)
- `plane_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneCapabilitiesKHR.html)

"""
function get_display_plane_capabilities_khr(physical_device, mode, plane_index::Integer)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilitiesKHR}()
    @check @dispatch(instance(physical_device), vkGetDisplayPlaneCapabilitiesKHR(physical_device, mode, plane_index, pCapabilities))
    from_vk(DisplayPlaneCapabilitiesKHR, pCapabilities[])
end

"""
    create_display_plane_surface_khr(instance, create_info::_DisplaySurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_DisplaySurfaceCreateInfoKHR`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDisplayPlaneSurfaceKHR.html)

"""
function create_display_plane_surface_khr(instance, create_info::_DisplaySurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check @dispatch(instance, vkCreateDisplayPlaneSurfaceKHR(instance, create_info, allocator, pSurface))
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

"""
    create_shared_swapchains_khr(device, create_infos::AbstractArray{_SwapchainCreateInfoKHR}; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}

Extension: VK\\_KHR\\_display\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INCOMPATIBLE_DISPLAY_KHR`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `create_infos::AbstractArray{_SwapchainCreateInfoKHR}` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSharedSwapchainsKHR.html)

"""
function create_shared_swapchains_khr(device, create_infos::AbstractArray{_SwapchainCreateInfoKHR}; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}
    pSwapchains = Vector{VkSwapchainKHR}(undef, pointer_length(create_infos))
    @check @dispatch(device, vkCreateSharedSwapchainsKHR(device, pointer_length(create_infos), create_infos, allocator, pSwapchains))
    SwapchainKHR.(pSwapchains, (x->destroy_swapchain_khr(device, x; allocator)), getproperty(create_infos, :surface))
end

"""
    destroy_surface_khr(instance, surface; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_surface

Arguments:
- `instance`
- `surface` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySurfaceKHR.html)

"""
destroy_surface_khr(instance, surface; allocator = C_NULL)::Cvoid = @dispatch(instance, vkDestroySurfaceKHR(instance, surface, allocator))

"""
    get_physical_device_surface_support_khr(physical_device, queue_family_index::Integer, surface)::ResultTypes.Result{Bool, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `queue_family_index::Integer`
- `surface`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html)

"""
function get_physical_device_surface_support_khr(physical_device, queue_family_index::Integer, surface)::ResultTypes.Result{Bool, VulkanError}
    pSupported = Ref{VkBool32}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceSupportKHR(physical_device, queue_family_index, surface, pSupported))
    from_vk(Bool, pSupported[])
end

"""
    get_physical_device_surface_capabilities_khr(physical_device, surface)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilitiesKHR.html)

"""
function get_physical_device_surface_capabilities_khr(physical_device, surface)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilitiesKHR}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device, surface, pSurfaceCapabilities))
    from_vk(SurfaceCapabilitiesKHR, pSurfaceCapabilities[])
end

"""
    get_physical_device_surface_formats_khr(physical_device, surface)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceFormatsKHR.html)

"""
function get_physical_device_surface_formats_khr(physical_device, surface)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, C_NULL))
            pSurfaceFormats = Vector{VkSurfaceFormatKHR}(undef, pSurfaceFormatCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, pSurfaceFormats))
        end
    from_vk.(SurfaceFormatKHR, pSurfaceFormats)
end

"""
    get_physical_device_surface_present_modes_khr(physical_device, surface)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModesKHR.html)

"""
function get_physical_device_surface_present_modes_khr(physical_device, surface)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, C_NULL))
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, pPresentModes))
        end
    pPresentModes
end

"""
    create_swapchain_khr(device, create_info::_SwapchainCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_NATIVE_WINDOW_IN_USE_KHR`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `device`
- `create_info::_SwapchainCreateInfoKHR` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSwapchainKHR.html)

"""
function create_swapchain_khr(device, create_info::_SwapchainCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}
    pSwapchain = Ref{VkSwapchainKHR}()
    @check @dispatch(device, vkCreateSwapchainKHR(device, create_info, allocator, pSwapchain))
    SwapchainKHR(pSwapchain[], (x->destroy_swapchain_khr(device, x; allocator)), getproperty(create_info, :surface))
end

"""
    destroy_swapchain_khr(device, swapchain; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_swapchain

Arguments:
- `device`
- `swapchain` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySwapchainKHR.html)

"""
destroy_swapchain_khr(device, swapchain; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroySwapchainKHR(device, swapchain, allocator))

"""
    get_swapchain_images_khr(device, swapchain)::ResultTypes.Result{Vector{Image}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `swapchain`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainImagesKHR.html)

"""
function get_swapchain_images_khr(device, swapchain)::ResultTypes.Result{Vector{Image}, VulkanError}
    pSwapchainImageCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, C_NULL))
            pSwapchainImages = Vector{VkImage}(undef, pSwapchainImageCount[])
            @check @dispatch(device, vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages))
        end
    Image.(pSwapchainImages, identity, device)
end

"""
    acquire_next_image_khr(device, swapchain, timeout::Integer; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
  - `NOT_READY`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `swapchain` (externsync)
- `timeout::Integer`
- `semaphore`: defaults to `C_NULL` (externsync)
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireNextImageKHR.html)

"""
function acquire_next_image_khr(device, swapchain, timeout::Integer; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check @dispatch(device, vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex))
    (pImageIndex[], _return_code)
end

"""
    queue_present_khr(queue, present_info::_PresentInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `queue` (externsync)
- `present_info::_PresentInfoKHR` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueuePresentKHR.html)

"""
queue_present_khr(queue, present_info::_PresentInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueuePresentKHR(queue, present_info)))

"""
    create_win_32_surface_khr(instance, create_info::_Win32SurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_KHR\\_win32\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_Win32SurfaceCreateInfoKHR`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateWin32SurfaceKHR.html)

"""
function create_win_32_surface_khr(instance, create_info::_Win32SurfaceCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check @dispatch(instance, vkCreateWin32SurfaceKHR(instance, create_info, allocator, pSurface))
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

"""
    get_physical_device_win_32_presentation_support_khr(physical_device, queue_family_index::Integer)::Bool

Extension: VK\\_KHR\\_win32\\_surface

Arguments:
- `physical_device`
- `queue_family_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceWin32PresentationSupportKHR.html)

"""
get_physical_device_win_32_presentation_support_khr(physical_device, queue_family_index::Integer)::Bool = from_vk(Bool, @dispatch(instance(physical_device), vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device, queue_family_index)))

"""
    create_debug_report_callback_ext(instance, create_info::_DebugReportCallbackCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}

Extension: VK\\_EXT\\_debug\\_report

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `instance`
- `create_info::_DebugReportCallbackCreateInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDebugReportCallbackEXT.html)

"""
function create_debug_report_callback_ext(instance, create_info::_DebugReportCallbackCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}
    pCallback = Ref{VkDebugReportCallbackEXT}()
    @check @dispatch(instance, vkCreateDebugReportCallbackEXT(instance, create_info, allocator, pCallback))
    DebugReportCallbackEXT(pCallback[], (x->destroy_debug_report_callback_ext(instance, x; allocator)), instance)
end

"""
    destroy_debug_report_callback_ext(instance, callback; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_debug\\_report

Arguments:
- `instance`
- `callback` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDebugReportCallbackEXT.html)

"""
destroy_debug_report_callback_ext(instance, callback; allocator = C_NULL)::Cvoid = @dispatch(instance, vkDestroyDebugReportCallbackEXT(instance, callback, allocator))

"""
    debug_report_message_ext(instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString)::Cvoid

Extension: VK\\_EXT\\_debug\\_report

Arguments:
- `instance`
- `flags::DebugReportFlagEXT`
- `object_type::DebugReportObjectTypeEXT`
- `object::Integer`
- `location::Integer`
- `message_code::Integer`
- `layer_prefix::AbstractString`
- `message::AbstractString`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugReportMessageEXT.html)

"""
debug_report_message_ext(instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString)::Cvoid = @dispatch(instance, vkDebugReportMessageEXT(instance, flags, object_type, object, location, message_code, layer_prefix, message))

"""
    debug_marker_set_object_name_ext(device, name_info::_DebugMarkerObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_marker

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `name_info::_DebugMarkerObjectNameInfoEXT` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugMarkerSetObjectNameEXT.html)

"""
debug_marker_set_object_name_ext(device, name_info::_DebugMarkerObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkDebugMarkerSetObjectNameEXT(device, name_info)))

"""
    debug_marker_set_object_tag_ext(device, tag_info::_DebugMarkerObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_marker

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `tag_info::_DebugMarkerObjectTagInfoEXT` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugMarkerSetObjectTagEXT.html)

"""
debug_marker_set_object_tag_ext(device, tag_info::_DebugMarkerObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkDebugMarkerSetObjectTagEXT(device, tag_info)))

"""
    cmd_debug_marker_begin_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)
- `marker_info::_DebugMarkerMarkerInfoEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerBeginEXT.html)

"""
cmd_debug_marker_begin_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdDebugMarkerBeginEXT(command_buffer, marker_info))

"""
    cmd_debug_marker_end_ext(command_buffer)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerEndEXT.html)

"""
cmd_debug_marker_end_ext(command_buffer)::Cvoid = @dispatch(device(command_buffer), vkCmdDebugMarkerEndEXT(command_buffer))

"""
    cmd_debug_marker_insert_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)
- `marker_info::_DebugMarkerMarkerInfoEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerInsertEXT.html)

"""
cmd_debug_marker_insert_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdDebugMarkerInsertEXT(command_buffer, marker_info))

"""
    get_physical_device_external_image_format_properties_nv(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}

Extension: VK\\_NV\\_external\\_memory\\_capabilities

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `tiling::ImageTiling`
- `usage::ImageUsageFlag`
- `flags`: defaults to `0`
- `external_handle_type`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalImageFormatPropertiesNV.html)

"""
function get_physical_device_external_image_format_properties_nv(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}
    pExternalImageFormatProperties = Ref{VkExternalImageFormatPropertiesNV}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physical_device, format, type, tiling, usage, flags, external_handle_type, pExternalImageFormatProperties))
    from_vk(ExternalImageFormatPropertiesNV, pExternalImageFormatProperties[])
end

"""
    get_memory_win_32_handle_nv(device, memory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::HANDLE)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `memory`
- `handle_type::ExternalMemoryHandleTypeFlagNV`
- `handle::HANDLE`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandleNV.html)

"""
get_memory_win_32_handle_nv(device, memory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetMemoryWin32HandleNV(device, memory, handle_type, to_vk(Ptr{vk.HANDLE}, handle))))

"""
    cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `is_preprocessed::Bool`
- `generated_commands_info::_GeneratedCommandsInfoNV`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdExecuteGeneratedCommandsNV.html)

"""
cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid = @dispatch(device(command_buffer), vkCmdExecuteGeneratedCommandsNV(command_buffer, is_preprocessed, generated_commands_info))

"""
    cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `generated_commands_info::_GeneratedCommandsInfoNV`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPreprocessGeneratedCommandsNV.html)

"""
cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::_GeneratedCommandsInfoNV)::Cvoid = @dispatch(device(command_buffer), vkCmdPreprocessGeneratedCommandsNV(command_buffer, generated_commands_info))

"""
    cmd_bind_pipeline_shader_group_nv(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, group_index::Integer)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `pipeline`
- `group_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindPipelineShaderGroupNV.html)

"""
cmd_bind_pipeline_shader_group_nv(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, group_index::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdBindPipelineShaderGroupNV(command_buffer, pipeline_bind_point, pipeline, group_index))

"""
    get_generated_commands_memory_requirements_nv(device, info::_GeneratedCommandsMemoryRequirementsInfoNV)::MemoryRequirements2

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `device`
- `info::_GeneratedCommandsMemoryRequirementsInfoNV`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetGeneratedCommandsMemoryRequirementsNV.html)

"""
function get_generated_commands_memory_requirements_nv(device, info::_GeneratedCommandsMemoryRequirementsInfoNV)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    @dispatch device vkGetGeneratedCommandsMemoryRequirementsNV(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    create_indirect_commands_layout_nv(device, create_info::_IndirectCommandsLayoutCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}

Extension: VK\\_NV\\_device\\_generated\\_commands

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_IndirectCommandsLayoutCreateInfoNV`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateIndirectCommandsLayoutNV.html)

"""
function create_indirect_commands_layout_nv(device, create_info::_IndirectCommandsLayoutCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}
    pIndirectCommandsLayout = Ref{VkIndirectCommandsLayoutNV}()
    @check @dispatch(device, vkCreateIndirectCommandsLayoutNV(device, create_info, allocator, pIndirectCommandsLayout))
    IndirectCommandsLayoutNV(pIndirectCommandsLayout[], (x->destroy_indirect_commands_layout_nv(device, x; allocator)), device)
end

"""
    destroy_indirect_commands_layout_nv(device, indirect_commands_layout; allocator = C_NULL)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `device`
- `indirect_commands_layout` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyIndirectCommandsLayoutNV.html)

"""
destroy_indirect_commands_layout_nv(device, indirect_commands_layout; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyIndirectCommandsLayoutNV(device, indirect_commands_layout, allocator))

"""
    get_physical_device_features_2(physical_device)::_PhysicalDeviceFeatures2

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFeatures2.html)

"""
function get_physical_device_features_2(physical_device)::_PhysicalDeviceFeatures2
    pFeatures = Ref{VkPhysicalDeviceFeatures2}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceFeatures2(physical_device, pFeatures)
    from_vk(_PhysicalDeviceFeatures2, pFeatures[])
end

"""
    get_physical_device_properties_2(physical_device)::PhysicalDeviceProperties2

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceProperties2.html)

"""
function get_physical_device_properties_2(physical_device)::PhysicalDeviceProperties2
    pProperties = Ref{VkPhysicalDeviceProperties2}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceProperties2(physical_device, pProperties)
    from_vk(PhysicalDeviceProperties2, pProperties[])
end

"""
    get_physical_device_format_properties_2(physical_device, format::Format)::FormatProperties2

Arguments:
- `physical_device`
- `format::Format`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFormatProperties2.html)

"""
function get_physical_device_format_properties_2(physical_device, format::Format)::FormatProperties2
    pFormatProperties = Ref{VkFormatProperties2}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceFormatProperties2(physical_device, format, pFormatProperties)
    from_vk(FormatProperties2, pFormatProperties[])
end

"""
    get_physical_device_image_format_properties_2(physical_device, image_format_info::_PhysicalDeviceImageFormatInfo2)::ResultTypes.Result{ImageFormatProperties2, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `image_format_info::_PhysicalDeviceImageFormatInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties2.html)

"""
function get_physical_device_image_format_properties_2(physical_device, image_format_info::_PhysicalDeviceImageFormatInfo2)::ResultTypes.Result{ImageFormatProperties2, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties2}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceImageFormatProperties2(physical_device, image_format_info, pImageFormatProperties))
    from_vk(ImageFormatProperties2, pImageFormatProperties[])
end

"""
    get_physical_device_queue_family_properties_2(physical_device)::Vector{QueueFamilyProperties2}

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties2.html)

"""
function get_physical_device_queue_family_properties_2(physical_device)::Vector{QueueFamilyProperties2}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, C_NULL)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties2}(undef, pQueueFamilyPropertyCount[])
    @dispatch instance(physical_device) vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    from_vk.(QueueFamilyProperties2, pQueueFamilyProperties)
end

"""
    get_physical_device_memory_properties_2(physical_device)::PhysicalDeviceMemoryProperties2

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMemoryProperties2.html)

"""
function get_physical_device_memory_properties_2(physical_device)::PhysicalDeviceMemoryProperties2
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties2}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceMemoryProperties2(physical_device, pMemoryProperties)
    from_vk(PhysicalDeviceMemoryProperties2, pMemoryProperties[])
end

"""
    get_physical_device_sparse_image_format_properties_2(physical_device, format_info::_PhysicalDeviceSparseImageFormatInfo2)::Vector{SparseImageFormatProperties2}

Arguments:
- `physical_device`
- `format_info::_PhysicalDeviceSparseImageFormatInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties2.html)

"""
function get_physical_device_sparse_image_format_properties_2(physical_device, format_info::_PhysicalDeviceSparseImageFormatInfo2)::Vector{SparseImageFormatProperties2}
    pPropertyCount = Ref{UInt32}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, C_NULL)
    pProperties = Vector{VkSparseImageFormatProperties2}(undef, pPropertyCount[])
    @dispatch instance(physical_device) vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, pProperties)
    from_vk.(SparseImageFormatProperties2, pProperties)
end

"""
    cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray{_WriteDescriptorSet})::Cvoid

Extension: VK\\_KHR\\_push\\_descriptor

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `layout`
- `set::Integer`
- `descriptor_writes::AbstractArray{_WriteDescriptorSet}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushDescriptorSetKHR.html)

"""
cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray{_WriteDescriptorSet})::Cvoid = @dispatch(device(command_buffer), vkCmdPushDescriptorSetKHR(command_buffer, pipeline_bind_point, layout, set, pointer_length(descriptor_writes), descriptor_writes))

"""
    trim_command_pool(device, command_pool; flags = 0)::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkTrimCommandPool.html)

"""
trim_command_pool(device, command_pool; flags = 0)::Cvoid = @dispatch(device, vkTrimCommandPool(device, command_pool, flags))

"""
    get_physical_device_external_buffer_properties(physical_device, external_buffer_info::_PhysicalDeviceExternalBufferInfo)::ExternalBufferProperties

Arguments:
- `physical_device`
- `external_buffer_info::_PhysicalDeviceExternalBufferInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalBufferProperties.html)

"""
function get_physical_device_external_buffer_properties(physical_device, external_buffer_info::_PhysicalDeviceExternalBufferInfo)::ExternalBufferProperties
    pExternalBufferProperties = Ref{VkExternalBufferProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceExternalBufferProperties(physical_device, external_buffer_info, pExternalBufferProperties)
    from_vk(ExternalBufferProperties, pExternalBufferProperties[])
end

"""
    get_memory_win_32_handle_khr(device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::HANDLE)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR`
- `handle::HANDLE`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandleKHR.html)

"""
get_memory_win_32_handle_khr(device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetMemoryWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle))))

"""
    get_memory_win_32_handle_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, handle::HANDLE)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `handle::HANDLE`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandlePropertiesKHR.html)

"""
function get_memory_win_32_handle_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, handle::vk.HANDLE)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}
    pMemoryWin32HandleProperties = Ref{VkMemoryWin32HandlePropertiesKHR}()
    @check @dispatch(device, vkGetMemoryWin32HandlePropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, pMemoryWin32HandleProperties))
    from_vk(MemoryWin32HandlePropertiesKHR, pMemoryWin32HandleProperties[])
end

"""
    get_memory_fd_khr(device, get_fd_info::_MemoryGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_MemoryGetFdInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryFdKHR.html)

"""
function get_memory_fd_khr(device, get_fd_info::_MemoryGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check @dispatch(device, vkGetMemoryFdKHR(device, get_fd_info, pFd))
    pFd[]
end

"""
    get_memory_fd_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `fd::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryFdPropertiesKHR.html)

"""
function get_memory_fd_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}
    pMemoryFdProperties = Ref{VkMemoryFdPropertiesKHR}()
    @check @dispatch(device, vkGetMemoryFdPropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd, pMemoryFdProperties))
    from_vk(MemoryFdPropertiesKHR, pMemoryFdProperties[])
end

"""
    get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo)::ExternalSemaphoreProperties

Arguments:
- `physical_device`
- `external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalSemaphoreProperties.html)

"""
function get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo)::ExternalSemaphoreProperties
    pExternalSemaphoreProperties = Ref{VkExternalSemaphoreProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceExternalSemaphoreProperties(physical_device, external_semaphore_info, pExternalSemaphoreProperties)
    from_vk(ExternalSemaphoreProperties, pExternalSemaphoreProperties[])
end

"""
    get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::HANDLE)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR`
- `handle::HANDLE`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreWin32HandleKHR.html)

"""
get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetSemaphoreWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle))))

"""
    import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportSemaphoreWin32HandleKHR.html)

"""
import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkImportSemaphoreWin32HandleKHR(device, import_semaphore_win_32_handle_info)))

"""
    get_semaphore_fd_khr(device, get_fd_info::_SemaphoreGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_SemaphoreGetFdInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreFdKHR.html)

"""
function get_semaphore_fd_khr(device, get_fd_info::_SemaphoreGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check @dispatch(device, vkGetSemaphoreFdKHR(device, get_fd_info, pFd))
    pFd[]
end

"""
    import_semaphore_fd_khr(device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportSemaphoreFdKHR.html)

"""
import_semaphore_fd_khr(device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkImportSemaphoreFdKHR(device, import_semaphore_fd_info)))

"""
    get_physical_device_external_fence_properties(physical_device, external_fence_info::_PhysicalDeviceExternalFenceInfo)::ExternalFenceProperties

Arguments:
- `physical_device`
- `external_fence_info::_PhysicalDeviceExternalFenceInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalFenceProperties.html)

"""
function get_physical_device_external_fence_properties(physical_device, external_fence_info::_PhysicalDeviceExternalFenceInfo)::ExternalFenceProperties
    pExternalFenceProperties = Ref{VkExternalFenceProperties}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceExternalFenceProperties(physical_device, external_fence_info, pExternalFenceProperties)
    from_vk(ExternalFenceProperties, pExternalFenceProperties[])
end

"""
    get_fence_win_32_handle_khr(device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::HANDLE)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_FenceGetWin32HandleInfoKHR`
- `handle::HANDLE`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceWin32HandleKHR.html)

"""
get_fence_win_32_handle_khr(device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::vk.HANDLE)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetFenceWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle))))

"""
    import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportFenceWin32HandleKHR.html)

"""
import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkImportFenceWin32HandleKHR(device, import_fence_win_32_handle_info)))

"""
    get_fence_fd_khr(device, get_fd_info::_FenceGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_FenceGetFdInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceFdKHR.html)

"""
function get_fence_fd_khr(device, get_fd_info::_FenceGetFdInfoKHR)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check @dispatch(device, vkGetFenceFdKHR(device, get_fd_info, pFd))
    pFd[]
end

"""
    import_fence_fd_khr(device, import_fence_fd_info::_ImportFenceFdInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_fence_fd_info::_ImportFenceFdInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportFenceFdKHR.html)

"""
import_fence_fd_khr(device, import_fence_fd_info::_ImportFenceFdInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkImportFenceFdKHR(device, import_fence_fd_info)))

"""
    release_display_ext(physical_device, display)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_direct\\_mode\\_display

Return codes:

Arguments:
- `physical_device`
- `display`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseDisplayEXT.html)

"""
release_display_ext(physical_device, display)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(instance(physical_device), vkReleaseDisplayEXT(physical_device, display)))

"""
    acquire_winrt_display_nv(physical_device, display)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_acquire\\_winrt\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `display`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireWinrtDisplayNV.html)

"""
acquire_winrt_display_nv(physical_device, display)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(instance(physical_device), vkAcquireWinrtDisplayNV(physical_device, display)))

"""
    get_winrt_display_nv(physical_device, device_relative_id::Integer)::ResultTypes.Result{DisplayKHR, VulkanError}

Extension: VK\\_NV\\_acquire\\_winrt\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `device_relative_id::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetWinrtDisplayNV.html)

"""
function get_winrt_display_nv(physical_device, device_relative_id::Integer)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check @dispatch(instance(physical_device), vkGetWinrtDisplayNV(physical_device, device_relative_id, pDisplay))
    DisplayKHR(pDisplay[], identity, physical_device)
end

"""
    display_power_control_ext(device, display, display_power_info::_DisplayPowerInfoEXT)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `display`
- `display_power_info::_DisplayPowerInfoEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDisplayPowerControlEXT.html)

"""
display_power_control_ext(device, display, display_power_info::_DisplayPowerInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkDisplayPowerControlEXT(device, display, display_power_info)))

"""
    register_device_event_ext(device, device_event_info::_DeviceEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `device_event_info::_DeviceEventInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkRegisterDeviceEventEXT.html)

"""
function register_device_event_ext(device, device_event_info::_DeviceEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check @dispatch(device, vkRegisterDeviceEventEXT(device, device_event_info, allocator, pFence))
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

"""
    register_display_event_ext(device, display, display_event_info::_DisplayEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `display`
- `display_event_info::_DisplayEventInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkRegisterDisplayEventEXT.html)

"""
function register_display_event_ext(device, display, display_event_info::_DisplayEventInfoEXT; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check @dispatch(device, vkRegisterDisplayEventEXT(device, display, display_event_info, allocator, pFence))
    Fence(pFence[], (x->destroy_fence(device, x; allocator)), device)
end

"""
    get_swapchain_counter_ext(device, swapchain, counter::SurfaceCounterFlagEXT)::ResultTypes.Result{UInt64, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`

Arguments:
- `device`
- `swapchain`
- `counter::SurfaceCounterFlagEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainCounterEXT.html)

"""
function get_swapchain_counter_ext(device, swapchain, counter::SurfaceCounterFlagEXT)::ResultTypes.Result{UInt64, VulkanError}
    pCounterValue = Ref{UInt64}()
    @check @dispatch(device, vkGetSwapchainCounterEXT(device, swapchain, VkSurfaceCounterFlagBitsEXT(counter.val), pCounterValue))
    pCounterValue[]
end

"""
    get_physical_device_surface_capabilities_2_ext(physical_device, surface)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}

Extension: VK\\_EXT\\_display\\_surface\\_counter

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2EXT.html)

"""
function get_physical_device_surface_capabilities_2_ext(physical_device, surface)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2EXT}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceCapabilities2EXT(physical_device, surface, pSurfaceCapabilities))
    from_vk(SurfaceCapabilities2EXT, pSurfaceCapabilities[])
end

"""
    enumerate_physical_device_groups(instance)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `instance`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDeviceGroups.html)

"""
function enumerate_physical_device_groups(instance)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}
    pPhysicalDeviceGroupCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance, vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, C_NULL))
            pPhysicalDeviceGroupProperties = Vector{VkPhysicalDeviceGroupProperties}(undef, pPhysicalDeviceGroupCount[])
            @check @dispatch(instance, vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties))
        end
    from_vk.(PhysicalDeviceGroupProperties, pPhysicalDeviceGroupProperties)
end

"""
    get_device_group_peer_memory_features(device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer)::PeerMemoryFeatureFlag

Arguments:
- `device`
- `heap_index::Integer`
- `local_device_index::Integer`
- `remote_device_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupPeerMemoryFeatures.html)

"""
function get_device_group_peer_memory_features(device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer)::PeerMemoryFeatureFlag
    pPeerMemoryFeatures = Ref{VkPeerMemoryFeatureFlags}()
    @dispatch device vkGetDeviceGroupPeerMemoryFeatures(device, heap_index, local_device_index, remote_device_index, pPeerMemoryFeatures)
    pPeerMemoryFeatures[]
end

"""
    bind_buffer_memory_2(device, bind_infos::AbstractArray{_BindBufferMemoryInfo})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindBufferMemoryInfo}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindBufferMemory2.html)

"""
bind_buffer_memory_2(device, bind_infos::AbstractArray{_BindBufferMemoryInfo})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBindBufferMemory2(device, pointer_length(bind_infos), bind_infos)))

"""
    bind_image_memory_2(device, bind_infos::AbstractArray{_BindImageMemoryInfo})::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindImageMemoryInfo}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindImageMemory2.html)

"""
bind_image_memory_2(device, bind_infos::AbstractArray{_BindImageMemoryInfo})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBindImageMemory2(device, pointer_length(bind_infos), bind_infos)))

"""
    cmd_set_device_mask(command_buffer, device_mask::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `device_mask::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDeviceMask.html)

"""
cmd_set_device_mask(command_buffer, device_mask::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDeviceMask(command_buffer, device_mask))

"""
    get_device_group_present_capabilities_khr(device)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupPresentCapabilitiesKHR.html)

"""
function get_device_group_present_capabilities_khr(device)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}
    pDeviceGroupPresentCapabilities = Ref{VkDeviceGroupPresentCapabilitiesKHR}()
    @check @dispatch(device, vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities))
    from_vk(DeviceGroupPresentCapabilitiesKHR, pDeviceGroupPresentCapabilities[])
end

"""
    get_device_group_surface_present_modes_khr(device, surface, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `surface` (externsync)
- `modes::DeviceGroupPresentModeFlagKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupSurfacePresentModesKHR.html)

"""
function get_device_group_surface_present_modes_khr(device, surface, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check @dispatch(device, vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes))
    pModes[]
end

"""
    acquire_next_image_2_khr(device, acquire_info::_AcquireNextImageInfoKHR)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
  - `NOT_READY`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `acquire_info::_AcquireNextImageInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireNextImage2KHR.html)

"""
function acquire_next_image_2_khr(device, acquire_info::_AcquireNextImageInfoKHR)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check @dispatch(device, vkAcquireNextImage2KHR(device, acquire_info, pImageIndex))
    (pImageIndex[], _return_code)
end

"""
    cmd_dispatch_base(command_buffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `base_group_x::Integer`
- `base_group_y::Integer`
- `base_group_z::Integer`
- `group_count_x::Integer`
- `group_count_y::Integer`
- `group_count_z::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatchBase.html)

"""
cmd_dispatch_base(command_buffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDispatchBase(command_buffer, base_group_x, base_group_y, base_group_z, group_count_x, group_count_y, group_count_z))

"""
    get_physical_device_present_rectangles_khr(physical_device, surface)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `surface` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDevicePresentRectanglesKHR.html)

"""
function get_physical_device_present_rectangles_khr(physical_device, surface)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}
    pRectCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, C_NULL))
            pRects = Vector{VkRect2D}(undef, pRectCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, pRects))
        end
    from_vk.(_Rect2D, pRects)
end

"""
    create_descriptor_update_template(device, create_info::_DescriptorUpdateTemplateCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_DescriptorUpdateTemplateCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorUpdateTemplate.html)

"""
function create_descriptor_update_template(device, create_info::_DescriptorUpdateTemplateCreateInfo; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}
    pDescriptorUpdateTemplate = Ref{VkDescriptorUpdateTemplate}()
    @check @dispatch(device, vkCreateDescriptorUpdateTemplate(device, create_info, allocator, pDescriptorUpdateTemplate))
    DescriptorUpdateTemplate(pDescriptorUpdateTemplate[], (x->destroy_descriptor_update_template(device, x; allocator)), device)
end

"""
    destroy_descriptor_update_template(device, descriptor_update_template; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_update_template` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorUpdateTemplate.html)

"""
destroy_descriptor_update_template(device, descriptor_update_template; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyDescriptorUpdateTemplate(device, descriptor_update_template, allocator))

"""
    update_descriptor_set_with_template(device, descriptor_set, descriptor_update_template, data::Ptr{Cvoid})::Cvoid

Arguments:
- `device`
- `descriptor_set` (externsync)
- `descriptor_update_template`
- `data::Ptr{Cvoid}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUpdateDescriptorSetWithTemplate.html)

"""
update_descriptor_set_with_template(device, descriptor_set, descriptor_update_template, data::Ptr{Cvoid})::Cvoid = @dispatch(device, vkUpdateDescriptorSetWithTemplate(device, descriptor_set, descriptor_update_template, data))

"""
    cmd_push_descriptor_set_with_template_khr(command_buffer, descriptor_update_template, layout, set::Integer, data::Ptr{Cvoid})::Cvoid

Extension: VK\\_KHR\\_push\\_descriptor

Arguments:
- `command_buffer` (externsync)
- `descriptor_update_template`
- `layout`
- `set::Integer`
- `data::Ptr{Cvoid}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushDescriptorSetWithTemplateKHR.html)

"""
cmd_push_descriptor_set_with_template_khr(command_buffer, descriptor_update_template, layout, set::Integer, data::Ptr{Cvoid})::Cvoid = @dispatch(device(command_buffer), vkCmdPushDescriptorSetWithTemplateKHR(command_buffer, descriptor_update_template, layout, set, data))

"""
    set_hdr_metadata_ext(device, swapchains::AbstractArray{SwapchainKHR}, metadata::AbstractArray{_HdrMetadataEXT})::Cvoid

Extension: VK\\_EXT\\_hdr\\_metadata

Arguments:
- `device`
- `swapchains::AbstractArray{SwapchainKHR}`
- `metadata::AbstractArray{_HdrMetadataEXT}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetHdrMetadataEXT.html)

"""
set_hdr_metadata_ext(device, swapchains::AbstractArray, metadata::AbstractArray{_HdrMetadataEXT})::Cvoid = @dispatch(device, vkSetHdrMetadataEXT(device, pointer_length(swapchains), swapchains, metadata))

"""
    get_swapchain_status_khr(device, swapchain)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_shared\\_presentable\\_image

Return codes:
- Success:
  - `SUCCESS`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `swapchain` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainStatusKHR.html)

"""
get_swapchain_status_khr(device, swapchain)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetSwapchainStatusKHR(device, swapchain)))

"""
    get_refresh_cycle_duration_google(device, swapchain)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}

Extension: VK\\_GOOGLE\\_display\\_timing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRefreshCycleDurationGOOGLE.html)

"""
function get_refresh_cycle_duration_google(device, swapchain)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}
    pDisplayTimingProperties = Ref{VkRefreshCycleDurationGOOGLE}()
    @check @dispatch(device, vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties))
    from_vk(RefreshCycleDurationGOOGLE, pDisplayTimingProperties[])
end

"""
    get_past_presentation_timing_google(device, swapchain)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}

Extension: VK\\_GOOGLE\\_display\\_timing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPastPresentationTimingGOOGLE.html)

"""
function get_past_presentation_timing_google(device, swapchain)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}
    pPresentationTimingCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, C_NULL))
            pPresentationTimings = Vector{VkPastPresentationTimingGOOGLE}(undef, pPresentationTimingCount[])
            @check @dispatch(device, vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings))
        end
    from_vk.(PastPresentationTimingGOOGLE, pPresentationTimings)
end

"""
    cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray{_ViewportWScalingNV})::Cvoid

Extension: VK\\_NV\\_clip\\_space\\_w\\_scaling

Arguments:
- `command_buffer` (externsync)
- `viewport_w_scalings::AbstractArray{_ViewportWScalingNV}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportWScalingNV.html)

"""
cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray{_ViewportWScalingNV})::Cvoid = @dispatch(device(command_buffer), vkCmdSetViewportWScalingNV(command_buffer, 0, pointer_length(viewport_w_scalings), viewport_w_scalings))

"""
    cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray{_Rect2D})::Cvoid

Extension: VK\\_EXT\\_discard\\_rectangles

Arguments:
- `command_buffer` (externsync)
- `discard_rectangles::AbstractArray{_Rect2D}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDiscardRectangleEXT.html)

"""
cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray{_Rect2D})::Cvoid = @dispatch(device(command_buffer), vkCmdSetDiscardRectangleEXT(command_buffer, 0, pointer_length(discard_rectangles), discard_rectangles))

"""
    cmd_set_sample_locations_ext(command_buffer, sample_locations_info::_SampleLocationsInfoEXT)::Cvoid

Extension: VK\\_EXT\\_sample\\_locations

Arguments:
- `command_buffer` (externsync)
- `sample_locations_info::_SampleLocationsInfoEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetSampleLocationsEXT.html)

"""
cmd_set_sample_locations_ext(command_buffer, sample_locations_info::_SampleLocationsInfoEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdSetSampleLocationsEXT(command_buffer, sample_locations_info))

"""
    get_physical_device_multisample_properties_ext(physical_device, samples::SampleCountFlag)::MultisamplePropertiesEXT

Extension: VK\\_EXT\\_sample\\_locations

Arguments:
- `physical_device`
- `samples::SampleCountFlag`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMultisamplePropertiesEXT.html)

"""
function get_physical_device_multisample_properties_ext(physical_device, samples::SampleCountFlag)::MultisamplePropertiesEXT
    pMultisampleProperties = Ref{VkMultisamplePropertiesEXT}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceMultisamplePropertiesEXT(physical_device, VkSampleCountFlagBits(samples.val), pMultisampleProperties)
    from_vk(MultisamplePropertiesEXT, pMultisampleProperties[])
end

"""
    get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}

Extension: VK\\_KHR\\_get\\_surface\\_capabilities2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2KHR.html)

"""
function get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2KHR}()
    @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceCapabilities2KHR(physical_device, surface_info, pSurfaceCapabilities))
    from_vk(SurfaceCapabilities2KHR, pSurfaceCapabilities[])
end

"""
    get_physical_device_surface_formats_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_surface\\_capabilities2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceFormats2KHR.html)

"""
function get_physical_device_surface_formats_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, C_NULL))
            pSurfaceFormats = Vector{VkSurfaceFormat2KHR}(undef, pSurfaceFormatCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, pSurfaceFormats))
        end
    from_vk.(SurfaceFormat2KHR, pSurfaceFormats)
end

"""
    get_physical_device_display_properties_2_khr(physical_device)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayProperties2KHR.html)

"""
function get_physical_device_display_properties_2_khr(physical_device)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayProperties2KHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(DisplayProperties2KHR, pProperties)
end

"""
    get_physical_device_display_plane_properties_2_khr(physical_device)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPlaneProperties2KHR.html)

"""
function get_physical_device_display_plane_properties_2_khr(physical_device)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayPlaneProperties2KHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(DisplayPlaneProperties2KHR, pProperties)
end

"""
    get_display_mode_properties_2_khr(physical_device, display)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayModeProperties2KHR.html)

"""
function get_display_mode_properties_2_khr(physical_device, display)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, C_NULL))
            pProperties = Vector{VkDisplayModeProperties2KHR}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, pProperties))
        end
    from_vk.(DisplayModeProperties2KHR, pProperties)
end

"""
    get_display_plane_capabilities_2_khr(physical_device, display_plane_info::_DisplayPlaneInfo2KHR)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display_plane_info::_DisplayPlaneInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneCapabilities2KHR.html)

"""
function get_display_plane_capabilities_2_khr(physical_device, display_plane_info::_DisplayPlaneInfo2KHR)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilities2KHR}()
    @check @dispatch(instance(physical_device), vkGetDisplayPlaneCapabilities2KHR(physical_device, display_plane_info, pCapabilities))
    from_vk(DisplayPlaneCapabilities2KHR, pCapabilities[])
end

"""
    get_buffer_memory_requirements_2(device, info::_BufferMemoryRequirementsInfo2)::MemoryRequirements2

Arguments:
- `device`
- `info::_BufferMemoryRequirementsInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferMemoryRequirements2.html)

"""
function get_buffer_memory_requirements_2(device, info::_BufferMemoryRequirementsInfo2)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    @dispatch device vkGetBufferMemoryRequirements2(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    get_image_memory_requirements_2(device, info::_ImageMemoryRequirementsInfo2)::MemoryRequirements2

Arguments:
- `device`
- `info::_ImageMemoryRequirementsInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageMemoryRequirements2.html)

"""
function get_image_memory_requirements_2(device, info::_ImageMemoryRequirementsInfo2)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    @dispatch device vkGetImageMemoryRequirements2(device, info, pMemoryRequirements)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    get_image_sparse_memory_requirements_2(device, info::_ImageSparseMemoryRequirementsInfo2)::Vector{SparseImageMemoryRequirements2}

Arguments:
- `device`
- `info::_ImageSparseMemoryRequirementsInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSparseMemoryRequirements2.html)

"""
function get_image_sparse_memory_requirements_2(device, info::_ImageSparseMemoryRequirementsInfo2)::Vector{SparseImageMemoryRequirements2}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    @dispatch device vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, C_NULL)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements2}(undef, pSparseMemoryRequirementCount[])
    @dispatch device vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    from_vk.(SparseImageMemoryRequirements2, pSparseMemoryRequirements)
end

"""
    create_sampler_ycbcr_conversion(device, create_info::_SamplerYcbcrConversionCreateInfo; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SamplerYcbcrConversionCreateInfo`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSamplerYcbcrConversion.html)

"""
function create_sampler_ycbcr_conversion(device, create_info::_SamplerYcbcrConversionCreateInfo; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}
    pYcbcrConversion = Ref{VkSamplerYcbcrConversion}()
    @check @dispatch(device, vkCreateSamplerYcbcrConversion(device, create_info, allocator, pYcbcrConversion))
    SamplerYcbcrConversion(pYcbcrConversion[], (x->destroy_sampler_ycbcr_conversion(device, x; allocator)), device)
end

"""
    destroy_sampler_ycbcr_conversion(device, ycbcr_conversion; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `ycbcr_conversion` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySamplerYcbcrConversion.html)

"""
destroy_sampler_ycbcr_conversion(device, ycbcr_conversion; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroySamplerYcbcrConversion(device, ycbcr_conversion, allocator))

"""
    get_device_queue_2(device, queue_info::_DeviceQueueInfo2)::Queue

Arguments:
- `device`
- `queue_info::_DeviceQueueInfo2`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceQueue2.html)

"""
function get_device_queue_2(device, queue_info::_DeviceQueueInfo2)::Queue
    pQueue = Ref{VkQueue}()
    @dispatch device vkGetDeviceQueue2(device, queue_info, pQueue)
    Queue(pQueue[], identity, device)
end

"""
    create_validation_cache_ext(device, create_info::_ValidationCacheCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_ValidationCacheCreateInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateValidationCacheEXT.html)

"""
function create_validation_cache_ext(device, create_info::_ValidationCacheCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}
    pValidationCache = Ref{VkValidationCacheEXT}()
    @check @dispatch(device, vkCreateValidationCacheEXT(device, create_info, allocator, pValidationCache))
    ValidationCacheEXT(pValidationCache[], (x->destroy_validation_cache_ext(device, x; allocator)), device)
end

"""
    destroy_validation_cache_ext(device, validation_cache; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_validation\\_cache

Arguments:
- `device`
- `validation_cache` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyValidationCacheEXT.html)

"""
destroy_validation_cache_ext(device, validation_cache; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyValidationCacheEXT(device, validation_cache, allocator))

"""
    get_validation_cache_data_ext(device, validation_cache)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `validation_cache`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetValidationCacheDataEXT.html)

"""
function get_validation_cache_data_ext(device, validation_cache)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, C_NULL))
            pData = Libc.malloc(pDataSize[])
            @check @dispatch(device, vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, pData))
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

"""
    merge_validation_caches_ext(device, dst_cache, src_caches::AbstractArray{ValidationCacheEXT})::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `dst_cache` (externsync)
- `src_caches::AbstractArray{ValidationCacheEXT}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMergeValidationCachesEXT.html)

"""
merge_validation_caches_ext(device, dst_cache, src_caches::AbstractArray)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkMergeValidationCachesEXT(device, dst_cache, pointer_length(src_caches), src_caches)))

"""
    get_descriptor_set_layout_support(device, create_info::_DescriptorSetLayoutCreateInfo)::DescriptorSetLayoutSupport

Arguments:
- `device`
- `create_info::_DescriptorSetLayoutCreateInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDescriptorSetLayoutSupport.html)

"""
function get_descriptor_set_layout_support(device, create_info::_DescriptorSetLayoutCreateInfo)::DescriptorSetLayoutSupport
    pSupport = Ref{VkDescriptorSetLayoutSupport}()
    @dispatch device vkGetDescriptorSetLayoutSupport(device, create_info, pSupport)
    from_vk(DescriptorSetLayoutSupport, pSupport[])
end

"""
    get_shader_info_amd(device, pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Extension: VK\\_AMD\\_shader\\_info

Return codes:
- Error:
  - `ERROR_FEATURE_NOT_PRESENT`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `pipeline`
- `shader_stage::ShaderStageFlag`
- `info_type::ShaderInfoTypeAMD`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetShaderInfoAMD.html)

"""
function get_shader_info_amd(device, pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pInfoSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, C_NULL))
            pInfo = Libc.malloc(pInfoSize[])
            @check @dispatch(device, vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, pInfo))
            if _return_code == VK_INCOMPLETE
                Libc.free(pInfo)
            end
        end
    (pInfoSize[], pInfo)
end

"""
    set_local_dimming_amd(device, swap_chain, local_dimming_enable::Bool)::Cvoid

Extension: VK\\_AMD\\_display\\_native\\_hdr

Arguments:
- `device`
- `swap_chain`
- `local_dimming_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetLocalDimmingAMD.html)

"""
set_local_dimming_amd(device, swap_chain, local_dimming_enable::Bool)::Cvoid = @dispatch(device, vkSetLocalDimmingAMD(device, swap_chain, local_dimming_enable))

"""
    get_physical_device_calibrateable_time_domains_ext(physical_device)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}

Extension: VK\\_EXT\\_calibrated\\_timestamps

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.html)

"""
function get_physical_device_calibrateable_time_domains_ext(physical_device)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}
    pTimeDomainCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, C_NULL))
            pTimeDomains = Vector{VkTimeDomainEXT}(undef, pTimeDomainCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, pTimeDomains))
        end
    pTimeDomains
end

"""
    get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT})::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}

Extension: VK\\_EXT\\_calibrated\\_timestamps

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetCalibratedTimestampsEXT.html)

"""
function get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT})::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}
    pTimestamps = Vector{UInt64}(undef, pointer_length(timestamp_infos))
    pMaxDeviation = Ref{UInt64}()
    @check @dispatch(device, vkGetCalibratedTimestampsEXT(device, pointer_length(timestamp_infos), timestamp_infos, pTimestamps, pMaxDeviation))
    (pTimestamps, pMaxDeviation[])
end

"""
    set_debug_utils_object_name_ext(device, name_info::_DebugUtilsObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `name_info::_DebugUtilsObjectNameInfoEXT` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetDebugUtilsObjectNameEXT.html)

"""
set_debug_utils_object_name_ext(device, name_info::_DebugUtilsObjectNameInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkSetDebugUtilsObjectNameEXT(device, name_info)))

"""
    set_debug_utils_object_tag_ext(device, tag_info::_DebugUtilsObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `tag_info::_DebugUtilsObjectTagInfoEXT` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetDebugUtilsObjectTagEXT.html)

"""
set_debug_utils_object_tag_ext(device, tag_info::_DebugUtilsObjectTagInfoEXT)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkSetDebugUtilsObjectTagEXT(device, tag_info)))

"""
    queue_begin_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`
- `label_info::_DebugUtilsLabelEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueBeginDebugUtilsLabelEXT.html)

"""
queue_begin_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT)::Cvoid = @dispatch(device(queue), vkQueueBeginDebugUtilsLabelEXT(queue, label_info))

"""
    queue_end_debug_utils_label_ext(queue)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueEndDebugUtilsLabelEXT.html)

"""
queue_end_debug_utils_label_ext(queue)::Cvoid = @dispatch(device(queue), vkQueueEndDebugUtilsLabelEXT(queue))

"""
    queue_insert_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`
- `label_info::_DebugUtilsLabelEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueInsertDebugUtilsLabelEXT.html)

"""
queue_insert_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT)::Cvoid = @dispatch(device(queue), vkQueueInsertDebugUtilsLabelEXT(queue, label_info))

"""
    cmd_begin_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)
- `label_info::_DebugUtilsLabelEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginDebugUtilsLabelEXT.html)

"""
cmd_begin_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginDebugUtilsLabelEXT(command_buffer, label_info))

"""
    cmd_end_debug_utils_label_ext(command_buffer)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndDebugUtilsLabelEXT.html)

"""
cmd_end_debug_utils_label_ext(command_buffer)::Cvoid = @dispatch(device(command_buffer), vkCmdEndDebugUtilsLabelEXT(command_buffer))

"""
    cmd_insert_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)
- `label_info::_DebugUtilsLabelEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdInsertDebugUtilsLabelEXT.html)

"""
cmd_insert_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT)::Cvoid = @dispatch(device(command_buffer), vkCmdInsertDebugUtilsLabelEXT(command_buffer, label_info))

"""
    create_debug_utils_messenger_ext(instance, create_info::_DebugUtilsMessengerCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `instance`
- `create_info::_DebugUtilsMessengerCreateInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDebugUtilsMessengerEXT.html)

"""
function create_debug_utils_messenger_ext(instance, create_info::_DebugUtilsMessengerCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}
    pMessenger = Ref{VkDebugUtilsMessengerEXT}()
    @check @dispatch(instance, vkCreateDebugUtilsMessengerEXT(instance, create_info, allocator, pMessenger))
    DebugUtilsMessengerEXT(pMessenger[], (x->destroy_debug_utils_messenger_ext(instance, x; allocator)), instance)
end

"""
    destroy_debug_utils_messenger_ext(instance, messenger; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `instance`
- `messenger` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDebugUtilsMessengerEXT.html)

"""
destroy_debug_utils_messenger_ext(instance, messenger; allocator = C_NULL)::Cvoid = @dispatch(instance, vkDestroyDebugUtilsMessengerEXT(instance, messenger, allocator))

"""
    submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `instance`
- `message_severity::DebugUtilsMessageSeverityFlagEXT`
- `message_types::DebugUtilsMessageTypeFlagEXT`
- `callback_data::_DebugUtilsMessengerCallbackDataEXT`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSubmitDebugUtilsMessageEXT.html)

"""
submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT)::Cvoid = @dispatch(instance, vkSubmitDebugUtilsMessageEXT(instance, VkDebugUtilsMessageSeverityFlagBitsEXT(message_severity.val), message_types, callback_data))

"""
    get_memory_host_pointer_properties_ext(device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid})::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}

Extension: VK\\_EXT\\_external\\_memory\\_host

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `host_pointer::Ptr{Cvoid}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryHostPointerPropertiesEXT.html)

"""
function get_memory_host_pointer_properties_ext(device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid})::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}
    pMemoryHostPointerProperties = Ref{VkMemoryHostPointerPropertiesEXT}()
    @check @dispatch(device, vkGetMemoryHostPointerPropertiesEXT(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), host_pointer, pMemoryHostPointerProperties))
    from_vk(MemoryHostPointerPropertiesEXT, pMemoryHostPointerProperties[])
end

"""
    cmd_write_buffer_marker_amd(command_buffer, pipeline_stage::PipelineStageFlag, dst_buffer, dst_offset::Integer, marker::Integer)::Cvoid

Extension: VK\\_AMD\\_buffer\\_marker

Arguments:
- `command_buffer` (externsync)
- `pipeline_stage::PipelineStageFlag`
- `dst_buffer`
- `dst_offset::Integer`
- `marker::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteBufferMarkerAMD.html)

"""
cmd_write_buffer_marker_amd(command_buffer, pipeline_stage::PipelineStageFlag, dst_buffer, dst_offset::Integer, marker::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteBufferMarkerAMD(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), dst_buffer, dst_offset, marker))

"""
    create_render_pass_2(device, create_info::_RenderPassCreateInfo2; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_RenderPassCreateInfo2`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRenderPass2.html)

"""
function create_render_pass_2(device, create_info::_RenderPassCreateInfo2; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check @dispatch(device, vkCreateRenderPass2(device, create_info, allocator, pRenderPass))
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x; allocator)), device)
end

"""
    cmd_begin_render_pass_2(command_buffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `render_pass_begin::_RenderPassBeginInfo`
- `subpass_begin_info::_SubpassBeginInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginRenderPass2.html)

"""
cmd_begin_render_pass_2(command_buffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginRenderPass2(command_buffer, render_pass_begin, subpass_begin_info))

"""
    cmd_next_subpass_2(command_buffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `subpass_begin_info::_SubpassBeginInfo`
- `subpass_end_info::_SubpassEndInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdNextSubpass2.html)

"""
cmd_next_subpass_2(command_buffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo)::Cvoid = @dispatch(device(command_buffer), vkCmdNextSubpass2(command_buffer, subpass_begin_info, subpass_end_info))

"""
    cmd_end_render_pass_2(command_buffer, subpass_end_info::_SubpassEndInfo)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `subpass_end_info::_SubpassEndInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndRenderPass2.html)

"""
cmd_end_render_pass_2(command_buffer, subpass_end_info::_SubpassEndInfo)::Cvoid = @dispatch(device(command_buffer), vkCmdEndRenderPass2(command_buffer, subpass_end_info))

"""
    get_semaphore_counter_value(device, semaphore)::ResultTypes.Result{UInt64, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `semaphore`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreCounterValue.html)

"""
function get_semaphore_counter_value(device, semaphore)::ResultTypes.Result{UInt64, VulkanError}
    pValue = Ref{UInt64}()
    @check @dispatch(device, vkGetSemaphoreCounterValue(device, semaphore, pValue))
    pValue[]
end

"""
    wait_semaphores(device, wait_info::_SemaphoreWaitInfo, timeout::Integer)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `wait_info::_SemaphoreWaitInfo`
- `timeout::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWaitSemaphores.html)

"""
wait_semaphores(device, wait_info::_SemaphoreWaitInfo, timeout::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkWaitSemaphores(device, wait_info, timeout)))

"""
    signal_semaphore(device, signal_info::_SemaphoreSignalInfo)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `signal_info::_SemaphoreSignalInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSignalSemaphore.html)

"""
signal_semaphore(device, signal_info::_SemaphoreSignalInfo)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkSignalSemaphore(device, signal_info)))

"""
    cmd_draw_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirectCount.html)

"""
cmd_draw_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride))

"""
    cmd_draw_indexed_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexedIndirectCount.html)

"""
cmd_draw_indexed_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndexedIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride))

"""
    cmd_set_checkpoint_nv(command_buffer, checkpoint_marker::Ptr{Cvoid})::Cvoid

Extension: VK\\_NV\\_device\\_diagnostic\\_checkpoints

Arguments:
- `command_buffer` (externsync)
- `checkpoint_marker::Ptr{Cvoid}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCheckpointNV.html)

"""
cmd_set_checkpoint_nv(command_buffer, checkpoint_marker::Ptr{Cvoid})::Cvoid = @dispatch(device(command_buffer), vkCmdSetCheckpointNV(command_buffer, checkpoint_marker))

"""
    get_queue_checkpoint_data_nv(queue)::Vector{CheckpointDataNV}

Extension: VK\\_NV\\_device\\_diagnostic\\_checkpoints

Arguments:
- `queue`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueueCheckpointDataNV.html)

"""
function get_queue_checkpoint_data_nv(queue)::Vector{CheckpointDataNV}
    pCheckpointDataCount = Ref{UInt32}()
    @dispatch device(queue) vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, C_NULL)
    pCheckpointData = Vector{VkCheckpointDataNV}(undef, pCheckpointDataCount[])
    @dispatch device(queue) vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData)
    from_vk.(CheckpointDataNV, pCheckpointData)
end

"""
    cmd_bind_transform_feedback_buffers_ext(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer}; sizes = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`
- `sizes`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindTransformFeedbackBuffersEXT.html)

"""
cmd_bind_transform_feedback_buffers_ext(command_buffer, buffers::AbstractArray, offsets::AbstractArray; sizes = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdBindTransformFeedbackBuffersEXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes))

"""
    cmd_begin_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray{Buffer}; counter_buffer_offsets = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `counter_buffers::AbstractArray{Buffer}`
- `counter_buffer_offsets`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginTransformFeedbackEXT.html)

"""
cmd_begin_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray; counter_buffer_offsets = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets))

"""
    cmd_end_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray{Buffer}; counter_buffer_offsets = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `counter_buffers::AbstractArray{Buffer}`
- `counter_buffer_offsets`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndTransformFeedbackEXT.html)

"""
cmd_end_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray; counter_buffer_offsets = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdEndTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets))

"""
    cmd_begin_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer; flags = 0)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `index::Integer`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginQueryIndexedEXT.html)

"""
cmd_begin_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer; flags = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdBeginQueryIndexedEXT(command_buffer, query_pool, query, flags, index))

"""
    cmd_end_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndQueryIndexedEXT.html)

"""
cmd_end_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdEndQueryIndexedEXT(command_buffer, query_pool, query, index))

"""
    cmd_draw_indirect_byte_count_ext(command_buffer, instance_count::Integer, first_instance::Integer, counter_buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `instance_count::Integer`
- `first_instance::Integer`
- `counter_buffer`
- `counter_buffer_offset::Integer`
- `counter_offset::Integer`
- `vertex_stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirectByteCountEXT.html)

"""
cmd_draw_indirect_byte_count_ext(command_buffer, instance_count::Integer, first_instance::Integer, counter_buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawIndirectByteCountEXT(command_buffer, instance_count, first_instance, counter_buffer, counter_buffer_offset, counter_offset, vertex_stride))

"""
    cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray{_Rect2D})::Cvoid

Extension: VK\\_NV\\_scissor\\_exclusive

Arguments:
- `command_buffer` (externsync)
- `exclusive_scissors::AbstractArray{_Rect2D}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetExclusiveScissorNV.html)

"""
cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray{_Rect2D})::Cvoid = @dispatch(device(command_buffer), vkCmdSetExclusiveScissorNV(command_buffer, 0, pointer_length(exclusive_scissors), exclusive_scissors))

"""
    cmd_bind_shading_rate_image_nv(command_buffer, image_layout::ImageLayout; image_view = C_NULL)::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `image_layout::ImageLayout`
- `image_view`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindShadingRateImageNV.html)

"""
cmd_bind_shading_rate_image_nv(command_buffer, image_layout::ImageLayout; image_view = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdBindShadingRateImageNV(command_buffer, image_view, image_layout))

"""
    cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV})::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportShadingRatePaletteNV.html)

"""
cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV})::Cvoid = @dispatch(device(command_buffer), vkCmdSetViewportShadingRatePaletteNV(command_buffer, 0, pointer_length(shading_rate_palettes), shading_rate_palettes))

"""
    cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV})::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `sample_order_type::CoarseSampleOrderTypeNV`
- `custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCoarseSampleOrderNV.html)

"""
cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV})::Cvoid = @dispatch(device(command_buffer), vkCmdSetCoarseSampleOrderNV(command_buffer, sample_order_type, pointer_length(custom_sample_orders), custom_sample_orders))

"""
    cmd_draw_mesh_tasks_nv(command_buffer, task_count::Integer, first_task::Integer)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `task_count::Integer`
- `first_task::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksNV.html)

"""
cmd_draw_mesh_tasks_nv(command_buffer, task_count::Integer, first_task::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawMeshTasksNV(command_buffer, task_count, first_task))

"""
    cmd_draw_mesh_tasks_indirect_nv(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksIndirectNV.html)

"""
cmd_draw_mesh_tasks_indirect_nv(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawMeshTasksIndirectNV(command_buffer, buffer, offset, draw_count, stride))

"""
    cmd_draw_mesh_tasks_indirect_count_nv(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksIndirectCountNV.html)

"""
cmd_draw_mesh_tasks_indirect_count_nv(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdDrawMeshTasksIndirectCountNV(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride))

"""
    compile_deferred_nv(device, pipeline, shader::Integer)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `shader::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCompileDeferredNV.html)

"""
compile_deferred_nv(device, pipeline, shader::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkCompileDeferredNV(device, pipeline, shader)))

"""
    create_acceleration_structure_nv(device, create_info::_AccelerationStructureCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_AccelerationStructureCreateInfoNV`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateAccelerationStructureNV.html)

"""
function create_acceleration_structure_nv(device, create_info::_AccelerationStructureCreateInfoNV; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureNV}()
    @check @dispatch(device, vkCreateAccelerationStructureNV(device, create_info, allocator, pAccelerationStructure))
    AccelerationStructureNV(pAccelerationStructure[], (x->destroy_acceleration_structure_nv(device, x; allocator)), device)
end

"""
    destroy_acceleration_structure_khr(device, acceleration_structure; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `acceleration_structure` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyAccelerationStructureKHR.html)

"""
destroy_acceleration_structure_khr(device, acceleration_structure; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyAccelerationStructureKHR(device, acceleration_structure, allocator))

"""
    destroy_acceleration_structure_nv(device, acceleration_structure; allocator = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `device`
- `acceleration_structure` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyAccelerationStructureNV.html)

"""
destroy_acceleration_structure_nv(device, acceleration_structure; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyAccelerationStructureNV(device, acceleration_structure, allocator))

"""
    get_acceleration_structure_memory_requirements_nv(device, info::_AccelerationStructureMemoryRequirementsInfoNV)::VkMemoryRequirements2KHR

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `device`
- `info::_AccelerationStructureMemoryRequirementsInfoNV`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureMemoryRequirementsNV.html)

"""
function get_acceleration_structure_memory_requirements_nv(device, info::_AccelerationStructureMemoryRequirementsInfoNV)::VkMemoryRequirements2KHR
    pMemoryRequirements = Ref{VkMemoryRequirements2KHR}()
    @dispatch device vkGetAccelerationStructureMemoryRequirementsNV(device, info, pMemoryRequirements)
    from_vk(VkMemoryRequirements2KHR, pMemoryRequirements[])
end

"""
    bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV})::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindAccelerationStructureMemoryNV.html)

"""
bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBindAccelerationStructureMemoryNV(device, pointer_length(bind_infos), bind_infos)))

"""
    cmd_copy_acceleration_structure_nv(command_buffer, dst, src, mode::CopyAccelerationStructureModeKHR)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `dst`
- `src`
- `mode::CopyAccelerationStructureModeKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureNV.html)

"""
cmd_copy_acceleration_structure_nv(command_buffer, dst, src, mode::CopyAccelerationStructureModeKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyAccelerationStructureNV(command_buffer, dst, src, mode))

"""
    cmd_copy_acceleration_structure_khr(command_buffer, info::_CopyAccelerationStructureInfoKHR)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyAccelerationStructureInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureKHR.html)

"""
cmd_copy_acceleration_structure_khr(command_buffer, info::_CopyAccelerationStructureInfoKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyAccelerationStructureKHR(command_buffer, info))

"""
    copy_acceleration_structure_khr(device, info::_CopyAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyAccelerationStructureInfoKHR`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyAccelerationStructureKHR.html)

"""
copy_acceleration_structure_khr(device, info::_CopyAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkCopyAccelerationStructureKHR(device, deferred_operation, info)))

"""
    cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::_CopyAccelerationStructureToMemoryInfoKHR)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyAccelerationStructureToMemoryInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureToMemoryKHR.html)

"""
cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::_CopyAccelerationStructureToMemoryInfoKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer, info))

"""
    copy_acceleration_structure_to_memory_khr(device, info::_CopyAccelerationStructureToMemoryInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyAccelerationStructureToMemoryInfoKHR`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyAccelerationStructureToMemoryKHR.html)

"""
copy_acceleration_structure_to_memory_khr(device, info::_CopyAccelerationStructureToMemoryInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkCopyAccelerationStructureToMemoryKHR(device, deferred_operation, info)))

"""
    cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::_CopyMemoryToAccelerationStructureInfoKHR)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyMemoryToAccelerationStructureInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyMemoryToAccelerationStructureKHR.html)

"""
cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::_CopyMemoryToAccelerationStructureInfoKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer, info))

"""
    copy_memory_to_acceleration_structure_khr(device, info::_CopyMemoryToAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyMemoryToAccelerationStructureInfoKHR`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyMemoryToAccelerationStructureKHR.html)

"""
copy_memory_to_acceleration_structure_khr(device, info::_CopyMemoryToAccelerationStructureInfoKHR; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkCopyMemoryToAccelerationStructureKHR(device, deferred_operation, info)))

"""
    cmd_write_acceleration_structures_properties_khr(command_buffer, acceleration_structures::AbstractArray{AccelerationStructureKHR}, query_type::QueryType, query_pool, first_query::Integer)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `acceleration_structures::AbstractArray{AccelerationStructureKHR}`
- `query_type::QueryType`
- `query_pool`
- `first_query::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesKHR.html)

"""
cmd_write_acceleration_structures_properties_khr(command_buffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool, first_query::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteAccelerationStructuresPropertiesKHR(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query))

"""
    cmd_write_acceleration_structures_properties_nv(command_buffer, acceleration_structures::AbstractArray{AccelerationStructureNV}, query_type::QueryType, query_pool, first_query::Integer)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `acceleration_structures::AbstractArray{AccelerationStructureNV}`
- `query_type::QueryType`
- `query_pool`
- `first_query::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesNV.html)

"""
cmd_write_acceleration_structures_properties_nv(command_buffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool, first_query::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteAccelerationStructuresPropertiesNV(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query))

"""
    cmd_build_acceleration_structure_nv(command_buffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer; instance_data = C_NULL, src = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `info::_AccelerationStructureInfoNV`
- `instance_offset::Integer`
- `update::Bool`
- `dst`
- `scratch`
- `scratch_offset::Integer`
- `instance_data`: defaults to `C_NULL`
- `src`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructureNV.html)

"""
cmd_build_acceleration_structure_nv(command_buffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer; instance_data = C_NULL, src = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdBuildAccelerationStructureNV(command_buffer, info, instance_data, instance_offset, update, dst, src, scratch, scratch_offset))

"""
    write_acceleration_structures_properties_khr(device, acceleration_structures::AbstractArray{AccelerationStructureKHR}, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `acceleration_structures::AbstractArray{AccelerationStructureKHR}`
- `query_type::QueryType`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `stride::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWriteAccelerationStructuresPropertiesKHR.html)

"""
write_acceleration_structures_properties_khr(device, acceleration_structures::AbstractArray, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkWriteAccelerationStructuresPropertiesKHR(device, pointer_length(acceleration_structures), acceleration_structures, query_type, data_size, data, stride)))

"""
    cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `miss_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `hit_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `callable_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `width::Integer`
- `height::Integer`
- `depth::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysKHR.html)

"""
cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdTraceRaysKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, width, height, depth))

"""
    cmd_trace_rays_nv(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table_buffer`
- `raygen_shader_binding_offset::Integer`
- `miss_shader_binding_offset::Integer`
- `miss_shader_binding_stride::Integer`
- `hit_shader_binding_offset::Integer`
- `hit_shader_binding_stride::Integer`
- `callable_shader_binding_offset::Integer`
- `callable_shader_binding_stride::Integer`
- `width::Integer`
- `height::Integer`
- `depth::Integer`
- `miss_shader_binding_table_buffer`: defaults to `C_NULL`
- `hit_shader_binding_table_buffer`: defaults to `C_NULL`
- `callable_shader_binding_table_buffer`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysNV.html)

"""
cmd_trace_rays_nv(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdTraceRaysNV(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset, miss_shader_binding_table_buffer, miss_shader_binding_offset, miss_shader_binding_stride, hit_shader_binding_table_buffer, hit_shader_binding_offset, hit_shader_binding_stride, callable_shader_binding_table_buffer, callable_shader_binding_offset, callable_shader_binding_stride, width, height, depth))

"""
    get_ray_tracing_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `first_group::Integer`
- `group_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingShaderGroupHandlesKHR.html)

"""
get_ray_tracing_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data)))

"""
    get_ray_tracing_capture_replay_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `first_group::Integer`
- `group_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.html)

"""
get_ray_tracing_capture_replay_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data)))

"""
    get_acceleration_structure_handle_nv(device, acceleration_structure, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `acceleration_structure`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureHandleNV.html)

"""
get_acceleration_structure_handle_nv(device, acceleration_structure, data_size::Integer, data::Ptr{Cvoid})::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetAccelerationStructureHandleNV(device, acceleration_structure, data_size, data)))

"""
    create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRayTracingPipelinesNV.html)

"""
function create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check @dispatch(device, vkCreateRayTracingPipelinesNV(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines))
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

"""
    create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS`

Arguments:
- `device`
- `create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}`
- `deferred_operation`: defaults to `C_NULL`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRayTracingPipelinesKHR.html)

"""
function create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check @dispatch(device, vkCreateRayTracingPipelinesKHR(device, deferred_operation, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines))
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x; allocator)), device), _return_code)
end

"""
    get_physical_device_cooperative_matrix_properties_nv(physical_device)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}

Extension: VK\\_NV\\_cooperative\\_matrix

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.html)

"""
function get_physical_device_cooperative_matrix_properties_nv(physical_device)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, C_NULL))
            pProperties = Vector{VkCooperativeMatrixPropertiesNV}(undef, pPropertyCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, pProperties))
        end
    from_vk.(_CooperativeMatrixPropertiesNV, pProperties)
end

"""
    cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `miss_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `hit_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `callable_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `indirect_device_address::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysIndirectKHR.html)

"""
cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdTraceRaysIndirectKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, indirect_device_address))

"""
    get_device_acceleration_structure_compatibility_khr(device, version_info::_AccelerationStructureVersionInfoKHR)::AccelerationStructureCompatibilityKHR

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `version_info::_AccelerationStructureVersionInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceAccelerationStructureCompatibilityKHR.html)

"""
function get_device_acceleration_structure_compatibility_khr(device, version_info::_AccelerationStructureVersionInfoKHR)::AccelerationStructureCompatibilityKHR
    pCompatibility = Ref{VkAccelerationStructureCompatibilityKHR}()
    @dispatch device vkGetDeviceAccelerationStructureCompatibilityKHR(device, version_info, pCompatibility)
    pCompatibility[]
end

"""
    get_ray_tracing_shader_group_stack_size_khr(device, pipeline, group::Integer, group_shader::ShaderGroupShaderKHR)::UInt64

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `device`
- `pipeline`
- `group::Integer`
- `group_shader::ShaderGroupShaderKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingShaderGroupStackSizeKHR.html)

"""
get_ray_tracing_shader_group_stack_size_khr(device, pipeline, group::Integer, group_shader::ShaderGroupShaderKHR)::UInt64 = @dispatch(device, vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, group_shader))

"""
    cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer, pipeline_stack_size::Integer)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `pipeline_stack_size::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetRayTracingPipelineStackSizeKHR.html)

"""
cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer, pipeline_stack_size::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetRayTracingPipelineStackSizeKHR(command_buffer, pipeline_stack_size))

"""
    get_image_view_handle_nvx(device, info::_ImageViewHandleInfoNVX)::UInt32

Extension: VK\\_NVX\\_image\\_view\\_handle

Arguments:
- `device`
- `info::_ImageViewHandleInfoNVX`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageViewHandleNVX.html)

"""
get_image_view_handle_nvx(device, info::_ImageViewHandleInfoNVX)::UInt32 = @dispatch(device, vkGetImageViewHandleNVX(device, info))

"""
    get_image_view_address_nvx(device, image_view)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}

Extension: VK\\_NVX\\_image\\_view\\_handle

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_UNKNOWN`

Arguments:
- `device`
- `image_view`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageViewAddressNVX.html)

"""
function get_image_view_address_nvx(device, image_view)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}
    pProperties = Ref{VkImageViewAddressPropertiesNVX}()
    @check @dispatch(device, vkGetImageViewAddressNVX(device, image_view, pProperties))
    from_vk(ImageViewAddressPropertiesNVX, pProperties[])
end

"""
    get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModes2EXT.html)

"""
function get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, C_NULL))
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, pPresentModes))
        end
    pPresentModes
end

"""
    get_device_group_surface_present_modes_2_ext(device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`
- `modes::DeviceGroupPresentModeFlagKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupSurfacePresentModes2EXT.html)

"""
function get_device_group_surface_present_modes_2_ext(device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check @dispatch(device, vkGetDeviceGroupSurfacePresentModes2EXT(device, surface_info, pModes))
    pModes[]
end

"""
    acquire_full_screen_exclusive_mode_ext(device, swapchain)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireFullScreenExclusiveModeEXT.html)

"""
acquire_full_screen_exclusive_mode_ext(device, swapchain)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkAcquireFullScreenExclusiveModeEXT(device, swapchain)))

"""
    release_full_screen_exclusive_mode_ext(device, swapchain)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseFullScreenExclusiveModeEXT.html)

"""
release_full_screen_exclusive_mode_ext(device, swapchain)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkReleaseFullScreenExclusiveModeEXT(device, swapchain)))

"""
    enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device, queue_family_index::Integer)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}

Extension: VK\\_KHR\\_performance\\_query

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `queue_family_index::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.html)

"""
function enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device, queue_family_index::Integer)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}
    pCounterCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, C_NULL, C_NULL))
            pCounters = Vector{VkPerformanceCounterKHR}(undef, pCounterCount[])
            pCounterDescriptions = Vector{VkPerformanceCounterDescriptionKHR}(undef, pCounterCount[])
            @check @dispatch(instance(physical_device), vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, pCounters, pCounterDescriptions))
        end
    (from_vk.(PerformanceCounterKHR, pCounters), from_vk.(PerformanceCounterDescriptionKHR, pCounterDescriptions))
end

"""
    get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR)::UInt32

Extension: VK\\_KHR\\_performance\\_query

Arguments:
- `physical_device`
- `performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.html)

"""
function get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR)::UInt32
    pNumPasses = Ref{UInt32}()
    @dispatch instance(physical_device) vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physical_device, performance_query_create_info, pNumPasses)
    pNumPasses[]
end

"""
    acquire_profiling_lock_khr(device, info::_AcquireProfilingLockInfoKHR)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_performance\\_query

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `TIMEOUT`

Arguments:
- `device`
- `info::_AcquireProfilingLockInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireProfilingLockKHR.html)

"""
acquire_profiling_lock_khr(device, info::_AcquireProfilingLockInfoKHR)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkAcquireProfilingLockKHR(device, info)))

"""
    release_profiling_lock_khr(device)::Cvoid

Extension: VK\\_KHR\\_performance\\_query

Arguments:
- `device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseProfilingLockKHR.html)

"""
release_profiling_lock_khr(device)::Cvoid = @dispatch(device, vkReleaseProfilingLockKHR(device))

"""
    get_image_drm_format_modifier_properties_ext(device, image)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}

Extension: VK\\_EXT\\_image\\_drm\\_format\\_modifier

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `image`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageDrmFormatModifierPropertiesEXT.html)

"""
function get_image_drm_format_modifier_properties_ext(device, image)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}
    pProperties = Ref{VkImageDrmFormatModifierPropertiesEXT}()
    @check @dispatch(device, vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties))
    from_vk(ImageDrmFormatModifierPropertiesEXT, pProperties[])
end

"""
    get_buffer_opaque_capture_address(device, info::_BufferDeviceAddressInfo)::UInt64

Arguments:
- `device`
- `info::_BufferDeviceAddressInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferOpaqueCaptureAddress.html)

"""
get_buffer_opaque_capture_address(device, info::_BufferDeviceAddressInfo)::UInt64 = @dispatch(device, vkGetBufferOpaqueCaptureAddress(device, info))

"""
    get_buffer_device_address(device, info::_BufferDeviceAddressInfo)::UInt64

Arguments:
- `device`
- `info::_BufferDeviceAddressInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferDeviceAddress.html)

"""
get_buffer_device_address(device, info::_BufferDeviceAddressInfo)::UInt64 = @dispatch(device, vkGetBufferDeviceAddress(device, info))

"""
    create_headless_surface_ext(instance, create_info::_HeadlessSurfaceCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_EXT\\_headless\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_HeadlessSurfaceCreateInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateHeadlessSurfaceEXT.html)

"""
function create_headless_surface_ext(instance, create_info::_HeadlessSurfaceCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check @dispatch(instance, vkCreateHeadlessSurfaceEXT(instance, create_info, allocator, pSurface))
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x; allocator)), instance)
end

"""
    get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}

Extension: VK\\_NV\\_coverage\\_reduction\\_mode

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.html)

"""
function get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}
    pCombinationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, C_NULL))
            pCombinations = Vector{VkFramebufferMixedSamplesCombinationNV}(undef, pCombinationCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, pCombinations))
        end
    from_vk.(FramebufferMixedSamplesCombinationNV, pCombinations)
end

"""
    initialize_performance_api_intel(device, initialize_info::_InitializePerformanceApiInfoINTEL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `initialize_info::_InitializePerformanceApiInfoINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkInitializePerformanceApiINTEL.html)

"""
initialize_performance_api_intel(device, initialize_info::_InitializePerformanceApiInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkInitializePerformanceApiINTEL(device, initialize_info)))

"""
    uninitialize_performance_api_intel(device)::Cvoid

Extension: VK\\_INTEL\\_performance\\_query

Arguments:
- `device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUninitializePerformanceApiINTEL.html)

"""
uninitialize_performance_api_intel(device)::Cvoid = @dispatch(device, vkUninitializePerformanceApiINTEL(device))

"""
    cmd_set_performance_marker_intel(command_buffer, marker_info::_PerformanceMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `marker_info::_PerformanceMarkerInfoINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceMarkerINTEL.html)

"""
cmd_set_performance_marker_intel(command_buffer, marker_info::_PerformanceMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkCmdSetPerformanceMarkerINTEL(command_buffer, marker_info)))

"""
    cmd_set_performance_stream_marker_intel(command_buffer, marker_info::_PerformanceStreamMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `marker_info::_PerformanceStreamMarkerInfoINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceStreamMarkerINTEL.html)

"""
cmd_set_performance_stream_marker_intel(command_buffer, marker_info::_PerformanceStreamMarkerInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkCmdSetPerformanceStreamMarkerINTEL(command_buffer, marker_info)))

"""
    cmd_set_performance_override_intel(command_buffer, override_info::_PerformanceOverrideInfoINTEL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `override_info::_PerformanceOverrideInfoINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceOverrideINTEL.html)

"""
cmd_set_performance_override_intel(command_buffer, override_info::_PerformanceOverrideInfoINTEL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(command_buffer), vkCmdSetPerformanceOverrideINTEL(command_buffer, override_info)))

"""
    acquire_performance_configuration_intel(device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `acquire_info::_PerformanceConfigurationAcquireInfoINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquirePerformanceConfigurationINTEL.html)

"""
function acquire_performance_configuration_intel(device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}
    pConfiguration = Ref{VkPerformanceConfigurationINTEL}()
    @check @dispatch(device, vkAcquirePerformanceConfigurationINTEL(device, acquire_info, pConfiguration))
    PerformanceConfigurationINTEL(pConfiguration[], identity, device)
end

"""
    release_performance_configuration_intel(device; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `configuration`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleasePerformanceConfigurationINTEL.html)

"""
release_performance_configuration_intel(device; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkReleasePerformanceConfigurationINTEL(device, configuration)))

"""
    queue_set_performance_configuration_intel(queue, configuration)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `queue`
- `configuration`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSetPerformanceConfigurationINTEL.html)

"""
queue_set_performance_configuration_intel(queue, configuration)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueueSetPerformanceConfigurationINTEL(queue, configuration)))

"""
    get_performance_parameter_intel(device, parameter::PerformanceParameterTypeINTEL)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `parameter::PerformanceParameterTypeINTEL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPerformanceParameterINTEL.html)

"""
function get_performance_parameter_intel(device, parameter::PerformanceParameterTypeINTEL)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}
    pValue = Ref{VkPerformanceValueINTEL}()
    @check @dispatch(device, vkGetPerformanceParameterINTEL(device, parameter, pValue))
    from_vk(_PerformanceValueINTEL, pValue[])
end

"""
    get_device_memory_opaque_capture_address(device, info::_DeviceMemoryOpaqueCaptureAddressInfo)::UInt64

Arguments:
- `device`
- `info::_DeviceMemoryOpaqueCaptureAddressInfo`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceMemoryOpaqueCaptureAddress.html)

"""
get_device_memory_opaque_capture_address(device, info::_DeviceMemoryOpaqueCaptureAddressInfo)::UInt64 = @dispatch(device, vkGetDeviceMemoryOpaqueCaptureAddress(device, info))

"""
    get_pipeline_executable_properties_khr(device, pipeline_info::_PipelineInfoKHR)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline_info::_PipelineInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutablePropertiesKHR.html)

"""
function get_pipeline_executable_properties_khr(device, pipeline_info::_PipelineInfoKHR)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}
    pExecutableCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, C_NULL))
            pProperties = Vector{VkPipelineExecutablePropertiesKHR}(undef, pExecutableCount[])
            @check @dispatch(device, vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, pProperties))
        end
    from_vk.(PipelineExecutablePropertiesKHR, pProperties)
end

"""
    get_pipeline_executable_statistics_khr(device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `executable_info::_PipelineExecutableInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutableStatisticsKHR.html)

"""
function get_pipeline_executable_statistics_khr(device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}
    pStatisticCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, C_NULL))
            pStatistics = Vector{VkPipelineExecutableStatisticKHR}(undef, pStatisticCount[])
            @check @dispatch(device, vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, pStatistics))
        end
    from_vk.(PipelineExecutableStatisticKHR, pStatistics)
end

"""
    get_pipeline_executable_internal_representations_khr(device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `executable_info::_PipelineExecutableInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutableInternalRepresentationsKHR.html)

"""
function get_pipeline_executable_internal_representations_khr(device, executable_info::_PipelineExecutableInfoKHR)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}
    pInternalRepresentationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(device, vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, C_NULL))
            pInternalRepresentations = Vector{VkPipelineExecutableInternalRepresentationKHR}(undef, pInternalRepresentationCount[])
            @check @dispatch(device, vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, pInternalRepresentations))
        end
    from_vk.(PipelineExecutableInternalRepresentationKHR, pInternalRepresentations)
end

"""
    cmd_set_line_stipple_ext(command_buffer, line_stipple_factor::Integer, line_stipple_pattern::Integer)::Cvoid

Extension: VK\\_EXT\\_line\\_rasterization

Arguments:
- `command_buffer` (externsync)
- `line_stipple_factor::Integer`
- `line_stipple_pattern::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLineStippleEXT.html)

"""
cmd_set_line_stipple_ext(command_buffer, line_stipple_factor::Integer, line_stipple_pattern::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetLineStippleEXT(command_buffer, line_stipple_factor, line_stipple_pattern))

"""
    get_physical_device_tool_properties_ext(physical_device)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}

Extension: VK\\_EXT\\_tooling\\_info

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceToolPropertiesEXT.html)

"""
function get_physical_device_tool_properties_ext(physical_device)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}
    pToolCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, C_NULL))
            pToolProperties = Vector{VkPhysicalDeviceToolPropertiesEXT}(undef, pToolCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, pToolProperties))
        end
    from_vk.(PhysicalDeviceToolPropertiesEXT, pToolProperties)
end

"""
    create_acceleration_structure_khr(device, create_info::_AccelerationStructureCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `create_info::_AccelerationStructureCreateInfoKHR`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateAccelerationStructureKHR.html)

"""
function create_acceleration_structure_khr(device, create_info::_AccelerationStructureCreateInfoKHR; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureKHR}()
    @check @dispatch(device, vkCreateAccelerationStructureKHR(device, create_info, allocator, pAccelerationStructure))
    AccelerationStructureKHR(pAccelerationStructure[], (x->destroy_acceleration_structure_khr(device, x; allocator)), device)
end

"""
    cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR})::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructuresKHR.html)

"""
cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR})::Cvoid = @dispatch(device(command_buffer), vkCmdBuildAccelerationStructuresKHR(command_buffer, pointer_length(infos), infos, build_range_infos))

"""
    cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, indirect_device_addresses::AbstractArray{<:Integer}, indirect_strides::AbstractArray{<:Integer}, max_primitive_counts::AbstractArray{<:Integer})::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `indirect_device_addresses::AbstractArray{<:Integer}`
- `indirect_strides::AbstractArray{<:Integer}`
- `max_primitive_counts::AbstractArray{<:Integer}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructuresIndirectKHR.html)

"""
cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray)::Cvoid = @dispatch(device(command_buffer), vkCmdBuildAccelerationStructuresIndirectKHR(command_buffer, pointer_length(infos), infos, indirect_device_addresses, indirect_strides, max_primitive_counts))

"""
    build_acceleration_structures_khr(device, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBuildAccelerationStructuresKHR.html)

"""
build_acceleration_structures_khr(device, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkBuildAccelerationStructuresKHR(device, deferred_operation, pointer_length(infos), infos, build_range_infos)))

"""
    get_acceleration_structure_device_address_khr(device, info::_AccelerationStructureDeviceAddressInfoKHR)::UInt64

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `info::_AccelerationStructureDeviceAddressInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureDeviceAddressKHR.html)

"""
get_acceleration_structure_device_address_khr(device, info::_AccelerationStructureDeviceAddressInfoKHR)::UInt64 = @dispatch(device, vkGetAccelerationStructureDeviceAddressKHR(device, info))

"""
    create_deferred_operation_khr(device; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDeferredOperationKHR.html)

"""
function create_deferred_operation_khr(device; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}
    pDeferredOperation = Ref{VkDeferredOperationKHR}()
    @check @dispatch(device, vkCreateDeferredOperationKHR(device, allocator, pDeferredOperation))
    DeferredOperationKHR(pDeferredOperation[], (x->destroy_deferred_operation_khr(device, x; allocator)), device)
end

"""
    destroy_deferred_operation_khr(device, operation; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Arguments:
- `device`
- `operation` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDeferredOperationKHR.html)

"""
destroy_deferred_operation_khr(device, operation; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyDeferredOperationKHR(device, operation, allocator))

"""
    get_deferred_operation_max_concurrency_khr(device, operation)::UInt32

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Arguments:
- `device`
- `operation`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeferredOperationMaxConcurrencyKHR.html)

"""
get_deferred_operation_max_concurrency_khr(device, operation)::UInt32 = @dispatch(device, vkGetDeferredOperationMaxConcurrencyKHR(device, operation))

"""
    get_deferred_operation_result_khr(device, operation)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`

Arguments:
- `device`
- `operation`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeferredOperationResultKHR.html)

"""
get_deferred_operation_result_khr(device, operation)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkGetDeferredOperationResultKHR(device, operation)))

"""
    deferred_operation_join_khr(device, operation)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Success:
  - `SUCCESS`
  - `THREAD_DONE_KHR`
  - `THREAD_IDLE_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `operation`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDeferredOperationJoinKHR.html)

"""
deferred_operation_join_khr(device, operation)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkDeferredOperationJoinKHR(device, operation)))

"""
    cmd_set_cull_mode_ext(command_buffer; cull_mode = 0)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `cull_mode`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCullModeEXT.html)

"""
cmd_set_cull_mode_ext(command_buffer; cull_mode = 0)::Cvoid = @dispatch(device(command_buffer), vkCmdSetCullModeEXT(command_buffer, cull_mode))

"""
    cmd_set_front_face_ext(command_buffer, front_face::FrontFace)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `front_face::FrontFace`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFrontFaceEXT.html)

"""
cmd_set_front_face_ext(command_buffer, front_face::FrontFace)::Cvoid = @dispatch(device(command_buffer), vkCmdSetFrontFaceEXT(command_buffer, front_face))

"""
    cmd_set_primitive_topology_ext(command_buffer, primitive_topology::PrimitiveTopology)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `primitive_topology::PrimitiveTopology`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPrimitiveTopologyEXT.html)

"""
cmd_set_primitive_topology_ext(command_buffer, primitive_topology::PrimitiveTopology)::Cvoid = @dispatch(device(command_buffer), vkCmdSetPrimitiveTopologyEXT(command_buffer, primitive_topology))

"""
    cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray{_Viewport})::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `viewports::AbstractArray{_Viewport}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportWithCountEXT.html)

"""
cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray{_Viewport})::Cvoid = @dispatch(device(command_buffer), vkCmdSetViewportWithCountEXT(command_buffer, pointer_length(viewports), viewports))

"""
    cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray{_Rect2D})::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `scissors::AbstractArray{_Rect2D}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetScissorWithCountEXT.html)

"""
cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray{_Rect2D})::Cvoid = @dispatch(device(command_buffer), vkCmdSetScissorWithCountEXT(command_buffer, pointer_length(scissors), scissors))

"""
    cmd_bind_vertex_buffers_2_ext(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer}; sizes = C_NULL, strides = C_NULL)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`
- `sizes`: defaults to `C_NULL`
- `strides`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindVertexBuffers2EXT.html)

"""
cmd_bind_vertex_buffers_2_ext(command_buffer, buffers::AbstractArray, offsets::AbstractArray; sizes = C_NULL, strides = C_NULL)::Cvoid = @dispatch(device(command_buffer), vkCmdBindVertexBuffers2EXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, strides))

"""
    cmd_set_depth_test_enable_ext(command_buffer, depth_test_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_test_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthTestEnableEXT.html)

"""
cmd_set_depth_test_enable_ext(command_buffer, depth_test_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthTestEnableEXT(command_buffer, depth_test_enable))

"""
    cmd_set_depth_write_enable_ext(command_buffer, depth_write_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_write_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthWriteEnableEXT.html)

"""
cmd_set_depth_write_enable_ext(command_buffer, depth_write_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthWriteEnableEXT(command_buffer, depth_write_enable))

"""
    cmd_set_depth_compare_op_ext(command_buffer, depth_compare_op::CompareOp)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_compare_op::CompareOp`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthCompareOpEXT.html)

"""
cmd_set_depth_compare_op_ext(command_buffer, depth_compare_op::CompareOp)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthCompareOpEXT(command_buffer, depth_compare_op))

"""
    cmd_set_depth_bounds_test_enable_ext(command_buffer, depth_bounds_test_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_bounds_test_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBoundsTestEnableEXT.html)

"""
cmd_set_depth_bounds_test_enable_ext(command_buffer, depth_bounds_test_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthBoundsTestEnableEXT(command_buffer, depth_bounds_test_enable))

"""
    cmd_set_stencil_test_enable_ext(command_buffer, stencil_test_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `stencil_test_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilTestEnableEXT.html)

"""
cmd_set_stencil_test_enable_ext(command_buffer, stencil_test_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetStencilTestEnableEXT(command_buffer, stencil_test_enable))

"""
    cmd_set_stencil_op_ext(command_buffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `fail_op::StencilOp`
- `pass_op::StencilOp`
- `depth_fail_op::StencilOp`
- `compare_op::CompareOp`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilOpEXT.html)

"""
cmd_set_stencil_op_ext(command_buffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp)::Cvoid = @dispatch(device(command_buffer), vkCmdSetStencilOpEXT(command_buffer, face_mask, fail_op, pass_op, depth_fail_op, compare_op))

"""
    cmd_set_patch_control_points_ext(command_buffer, patch_control_points::Integer)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `patch_control_points::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPatchControlPointsEXT.html)

"""
cmd_set_patch_control_points_ext(command_buffer, patch_control_points::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdSetPatchControlPointsEXT(command_buffer, patch_control_points))

"""
    cmd_set_rasterizer_discard_enable_ext(command_buffer, rasterizer_discard_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `rasterizer_discard_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetRasterizerDiscardEnableEXT.html)

"""
cmd_set_rasterizer_discard_enable_ext(command_buffer, rasterizer_discard_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetRasterizerDiscardEnableEXT(command_buffer, rasterizer_discard_enable))

"""
    cmd_set_depth_bias_enable_ext(command_buffer, depth_bias_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `depth_bias_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBiasEnableEXT.html)

"""
cmd_set_depth_bias_enable_ext(command_buffer, depth_bias_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetDepthBiasEnableEXT(command_buffer, depth_bias_enable))

"""
    cmd_set_logic_op_ext(command_buffer, logic_op::LogicOp)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `logic_op::LogicOp`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLogicOpEXT.html)

"""
cmd_set_logic_op_ext(command_buffer, logic_op::LogicOp)::Cvoid = @dispatch(device(command_buffer), vkCmdSetLogicOpEXT(command_buffer, logic_op))

"""
    cmd_set_primitive_restart_enable_ext(command_buffer, primitive_restart_enable::Bool)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `primitive_restart_enable::Bool`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPrimitiveRestartEnableEXT.html)

"""
cmd_set_primitive_restart_enable_ext(command_buffer, primitive_restart_enable::Bool)::Cvoid = @dispatch(device(command_buffer), vkCmdSetPrimitiveRestartEnableEXT(command_buffer, primitive_restart_enable))

"""
    create_private_data_slot_ext(device, create_info::_PrivateDataSlotCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}

Extension: VK\\_EXT\\_private\\_data

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_PrivateDataSlotCreateInfoEXT`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePrivateDataSlotEXT.html)

"""
function create_private_data_slot_ext(device, create_info::_PrivateDataSlotCreateInfoEXT; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}
    pPrivateDataSlot = Ref{VkPrivateDataSlotEXT}()
    @check @dispatch(device, vkCreatePrivateDataSlotEXT(device, create_info, allocator, pPrivateDataSlot))
    PrivateDataSlotEXT(pPrivateDataSlot[], (x->destroy_private_data_slot_ext(device, x; allocator)), device)
end

"""
    destroy_private_data_slot_ext(device, private_data_slot; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_private\\_data

Arguments:
- `device`
- `private_data_slot` (externsync)
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPrivateDataSlotEXT.html)

"""
destroy_private_data_slot_ext(device, private_data_slot; allocator = C_NULL)::Cvoid = @dispatch(device, vkDestroyPrivateDataSlotEXT(device, private_data_slot, allocator))

"""
    set_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, data::Integer)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_private\\_data

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `object_type::ObjectType`
- `object_handle::Integer`
- `private_data_slot`
- `data::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetPrivateDataEXT.html)

"""
set_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, data::Integer)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device, vkSetPrivateDataEXT(device, object_type, object_handle, private_data_slot, data)))

"""
    get_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot)::UInt64

Extension: VK\\_EXT\\_private\\_data

Arguments:
- `device`
- `object_type::ObjectType`
- `object_handle::Integer`
- `private_data_slot`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPrivateDataEXT.html)

"""
function get_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot)::UInt64
    pData = Ref{UInt64}()
    @dispatch device vkGetPrivateDataEXT(device, object_type, object_handle, private_data_slot, pData)
    pData[]
end

"""
    cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::_CopyBufferInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_buffer_info::_CopyBufferInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBuffer2KHR.html)

"""
cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::_CopyBufferInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyBuffer2KHR(command_buffer, copy_buffer_info))

"""
    cmd_copy_image_2_khr(command_buffer, copy_image_info::_CopyImageInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_image_info::_CopyImageInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImage2KHR.html)

"""
cmd_copy_image_2_khr(command_buffer, copy_image_info::_CopyImageInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyImage2KHR(command_buffer, copy_image_info))

"""
    cmd_blit_image_2_khr(command_buffer, blit_image_info::_BlitImageInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `blit_image_info::_BlitImageInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBlitImage2KHR.html)

"""
cmd_blit_image_2_khr(command_buffer, blit_image_info::_BlitImageInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdBlitImage2KHR(command_buffer, blit_image_info))

"""
    cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBufferToImage2KHR.html)

"""
cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyBufferToImage2KHR(command_buffer, copy_buffer_to_image_info))

"""
    cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImageToBuffer2KHR.html)

"""
cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdCopyImageToBuffer2KHR(command_buffer, copy_image_to_buffer_info))

"""
    cmd_resolve_image_2_khr(command_buffer, resolve_image_info::_ResolveImageInfo2KHR)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `resolve_image_info::_ResolveImageInfo2KHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResolveImage2KHR.html)

"""
cmd_resolve_image_2_khr(command_buffer, resolve_image_info::_ResolveImageInfo2KHR)::Cvoid = @dispatch(device(command_buffer), vkCmdResolveImage2KHR(command_buffer, resolve_image_info))

"""
    cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

Arguments:
- `command_buffer` (externsync)
- `fragment_size::_Extent2D`
- `combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFragmentShadingRateKHR.html)

"""
cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid = @dispatch(device(command_buffer), vkCmdSetFragmentShadingRateKHR(command_buffer, fragment_size, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops)))

"""
    get_physical_device_fragment_shading_rates_khr(physical_device)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `physical_device`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFragmentShadingRatesKHR.html)

"""
function get_physical_device_fragment_shading_rates_khr(physical_device)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}
    pFragmentShadingRateCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, C_NULL))
            pFragmentShadingRates = Vector{VkPhysicalDeviceFragmentShadingRateKHR}(undef, pFragmentShadingRateCount[])
            @check @dispatch(instance(physical_device), vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, pFragmentShadingRates))
        end
    from_vk.(PhysicalDeviceFragmentShadingRateKHR, pFragmentShadingRates)
end

"""
    cmd_set_fragment_shading_rate_enum_nv(command_buffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid

Extension: VK\\_NV\\_fragment\\_shading\\_rate\\_enums

Arguments:
- `command_buffer` (externsync)
- `shading_rate::FragmentShadingRateNV`
- `combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFragmentShadingRateEnumNV.html)

"""
cmd_set_fragment_shading_rate_enum_nv(command_buffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR})::Cvoid = @dispatch(device(command_buffer), vkCmdSetFragmentShadingRateEnumNV(command_buffer, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops)))

"""
    get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `build_type::AccelerationStructureBuildTypeKHR`
- `build_info::_AccelerationStructureBuildGeometryInfoKHR`
- `max_primitive_counts`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureBuildSizesKHR.html)

"""
function get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR
    pSizeInfo = Ref{VkAccelerationStructureBuildSizesInfoKHR}()
    @dispatch device vkGetAccelerationStructureBuildSizesKHR(device, build_type, build_info, max_primitive_counts, pSizeInfo)
    from_vk(_AccelerationStructureBuildSizesInfoKHR, pSizeInfo[])
end

"""
    cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}, vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT})::Cvoid

Extension: VK\\_EXT\\_vertex\\_input\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}`
- `vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetVertexInputEXT.html)

"""
cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}, vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT})::Cvoid = @dispatch(device(command_buffer), vkCmdSetVertexInputEXT(command_buffer, pointer_length(vertex_binding_descriptions), vertex_binding_descriptions, pointer_length(vertex_attribute_descriptions), vertex_attribute_descriptions))

"""
    cmd_set_color_write_enable_ext(command_buffer, color_write_enables::AbstractArray{Bool})::Cvoid

Extension: VK\\_EXT\\_color\\_write\\_enable

Arguments:
- `command_buffer` (externsync)
- `color_write_enables::AbstractArray{Bool}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetColorWriteEnableEXT.html)

"""
cmd_set_color_write_enable_ext(command_buffer, color_write_enables::AbstractArray)::Cvoid = @dispatch(device(command_buffer), vkCmdSetColorWriteEnableEXT(command_buffer, pointer_length(color_write_enables), color_write_enables))

"""
    cmd_set_event_2_khr(command_buffer, event, dependency_info::_DependencyInfoKHR)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `event`
- `dependency_info::_DependencyInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetEvent2KHR.html)

"""
cmd_set_event_2_khr(command_buffer, event, dependency_info::_DependencyInfoKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdSetEvent2KHR(command_buffer, event, dependency_info))

"""
    cmd_reset_event_2_khr(command_buffer, event, stage_mask::Integer)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetEvent2KHR.html)

"""
cmd_reset_event_2_khr(command_buffer, event, stage_mask::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdResetEvent2KHR(command_buffer, event, stage_mask))

"""
    cmd_wait_events_2_khr(command_buffer, events::AbstractArray{Event}, dependency_infos::AbstractArray{_DependencyInfoKHR})::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `events::AbstractArray{Event}`
- `dependency_infos::AbstractArray{_DependencyInfoKHR}`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWaitEvents2KHR.html)

"""
cmd_wait_events_2_khr(command_buffer, events::AbstractArray, dependency_infos::AbstractArray{_DependencyInfoKHR})::Cvoid = @dispatch(device(command_buffer), vkCmdWaitEvents2KHR(command_buffer, pointer_length(events), events, dependency_infos))

"""
    cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::_DependencyInfoKHR)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `dependency_info::_DependencyInfoKHR`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPipelineBarrier2KHR.html)

"""
cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::_DependencyInfoKHR)::Cvoid = @dispatch(device(command_buffer), vkCmdPipelineBarrier2KHR(command_buffer, dependency_info))

"""
    queue_submit_2_khr(queue, submits::AbstractArray{_SubmitInfo2KHR}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_synchronization2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `submits::AbstractArray{_SubmitInfo2KHR}`
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSubmit2KHR.html)

"""
queue_submit_2_khr(queue, submits::AbstractArray{_SubmitInfo2KHR}; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(@dispatch(device(queue), vkQueueSubmit2KHR(queue, pointer_length(submits), submits, fence)))

"""
    cmd_write_timestamp_2_khr(command_buffer, stage::Integer, query_pool, query::Integer)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `stage::Integer`
- `query_pool`
- `query::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteTimestamp2KHR.html)

"""
cmd_write_timestamp_2_khr(command_buffer, stage::Integer, query_pool, query::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteTimestamp2KHR(command_buffer, stage, query_pool, query))

"""
    cmd_write_buffer_marker_2_amd(command_buffer, stage::Integer, dst_buffer, dst_offset::Integer, marker::Integer)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `stage::Integer`
- `dst_buffer`
- `dst_offset::Integer`
- `marker::Integer`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteBufferMarker2AMD.html)

"""
cmd_write_buffer_marker_2_amd(command_buffer, stage::Integer, dst_buffer, dst_offset::Integer, marker::Integer)::Cvoid = @dispatch(device(command_buffer), vkCmdWriteBufferMarker2AMD(command_buffer, stage, dst_buffer, dst_offset, marker))

"""
    get_queue_checkpoint_data_2_nv(queue)::Vector{CheckpointData2NV}

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `queue`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueueCheckpointData2NV.html)

"""
function get_queue_checkpoint_data_2_nv(queue)::Vector{CheckpointData2NV}
    pCheckpointDataCount = Ref{UInt32}()
    @dispatch device(queue) vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, C_NULL)
    pCheckpointData = Vector{VkCheckpointData2NV}(undef, pCheckpointDataCount[])
    @dispatch device(queue) vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData)
    from_vk.(CheckpointData2NV, pCheckpointData)
end

"""
    create_instance(create_info::_InstanceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_LAYER_NOT_PRESENT`
  - `ERROR_EXTENSION_NOT_PRESENT`
  - `ERROR_INCOMPATIBLE_DRIVER`

Arguments:
- `create_info::_InstanceCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateInstance.html)

"""
function create_instance(create_info::_InstanceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Instance, VulkanError}
    pInstance = Ref{VkInstance}()
    @check vkCreateInstance(create_info, allocator, pInstance, fptr_create)
    Instance(pInstance[], (x->destroy_instance(x, fptr_destroy; allocator)))
end

"""
    destroy_instance(instance, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `instance` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyInstance.html)

"""
destroy_instance(instance, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyInstance(instance, allocator, fptr)

"""
    enumerate_physical_devices(instance, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `instance`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDevices.html)

"""
function enumerate_physical_devices(instance, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDevice}, VulkanError}
    pPhysicalDeviceCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, C_NULL, fptr)
            pPhysicalDevices = Vector{VkPhysicalDevice}(undef, pPhysicalDeviceCount[])
            @check vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices, fptr)
        end
    PhysicalDevice.(pPhysicalDevices, identity, instance)
end

"""
    get_device_proc_addr(device, name::AbstractString, fptr::FunctionPtr)::FunctionPtr

Arguments:
- `device`
- `name::AbstractString`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceProcAddr.html)

"""
get_device_proc_addr(device, name::AbstractString, fptr::FunctionPtr)::FunctionPtr = vkGetDeviceProcAddr(device, name, fptr)

"""
    get_instance_proc_addr(name::AbstractString, fptr::FunctionPtr; instance = C_NULL)::FunctionPtr

Arguments:
- `name::AbstractString`
- `fptr::FunctionPtr`
- `instance`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetInstanceProcAddr.html)

"""
get_instance_proc_addr(name::AbstractString, fptr::FunctionPtr; instance = C_NULL)::FunctionPtr = vkGetInstanceProcAddr(instance, name, fptr)

"""
    get_physical_device_properties(physical_device, fptr::FunctionPtr)::PhysicalDeviceProperties

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceProperties.html)

"""
function get_physical_device_properties(physical_device, fptr::FunctionPtr)::PhysicalDeviceProperties
    pProperties = Ref{VkPhysicalDeviceProperties}()
    vkGetPhysicalDeviceProperties(physical_device, pProperties, fptr)
    from_vk(PhysicalDeviceProperties, pProperties[])
end

"""
    get_physical_device_queue_family_properties(physical_device, fptr::FunctionPtr)::Vector{QueueFamilyProperties}

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties.html)

"""
function get_physical_device_queue_family_properties(physical_device, fptr::FunctionPtr)::Vector{QueueFamilyProperties}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, C_NULL, fptr)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties, fptr)
    from_vk.(QueueFamilyProperties, pQueueFamilyProperties)
end

"""
    get_physical_device_memory_properties(physical_device, fptr::FunctionPtr)::PhysicalDeviceMemoryProperties

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMemoryProperties.html)

"""
function get_physical_device_memory_properties(physical_device, fptr::FunctionPtr)::PhysicalDeviceMemoryProperties
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties}()
    vkGetPhysicalDeviceMemoryProperties(physical_device, pMemoryProperties, fptr)
    from_vk(PhysicalDeviceMemoryProperties, pMemoryProperties[])
end

"""
    get_physical_device_features(physical_device, fptr::FunctionPtr)::_PhysicalDeviceFeatures

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFeatures.html)

"""
function get_physical_device_features(physical_device, fptr::FunctionPtr)::_PhysicalDeviceFeatures
    pFeatures = Ref{VkPhysicalDeviceFeatures}()
    vkGetPhysicalDeviceFeatures(physical_device, pFeatures, fptr)
    from_vk(_PhysicalDeviceFeatures, pFeatures[])
end

"""
    get_physical_device_format_properties(physical_device, format::Format, fptr::FunctionPtr)::FormatProperties

Arguments:
- `physical_device`
- `format::Format`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFormatProperties.html)

"""
function get_physical_device_format_properties(physical_device, format::Format, fptr::FunctionPtr)::FormatProperties
    pFormatProperties = Ref{VkFormatProperties}()
    vkGetPhysicalDeviceFormatProperties(physical_device, format, pFormatProperties, fptr)
    from_vk(FormatProperties, pFormatProperties[])
end

"""
    get_physical_device_image_format_properties(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `tiling::ImageTiling`
- `usage::ImageUsageFlag`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties.html)

"""
function get_physical_device_image_format_properties(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{ImageFormatProperties, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties}()
    @check vkGetPhysicalDeviceImageFormatProperties(physical_device, format, type, tiling, usage, flags, pImageFormatProperties, fptr)
    from_vk(ImageFormatProperties, pImageFormatProperties[])
end

"""
    create_device(physical_device, create_info::_DeviceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_EXTENSION_NOT_PRESENT`
  - `ERROR_FEATURE_NOT_PRESENT`
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_DEVICE_LOST`

Arguments:
- `physical_device`
- `create_info::_DeviceCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDevice.html)

"""
function create_device(physical_device, create_info::_DeviceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Device, VulkanError}
    pDevice = Ref{VkDevice}()
    @check vkCreateDevice(physical_device, create_info, allocator, pDevice, fptr_create)
    Device(pDevice[], (x->destroy_device(x, fptr_destroy; allocator)), physical_device)
end

"""
    destroy_device(device, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDevice.html)

"""
destroy_device(device, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDevice(device, allocator, fptr)

"""
    enumerate_instance_version(fptr::FunctionPtr)::ResultTypes.Result{VersionNumber, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceVersion.html)

"""
function enumerate_instance_version(fptr::FunctionPtr)::ResultTypes.Result{VersionNumber, VulkanError}
    pApiVersion = Ref{UInt32}()
    @check vkEnumerateInstanceVersion(pApiVersion, fptr)
    from_vk(VersionNumber, pApiVersion[])
end

"""
    enumerate_instance_layer_properties(fptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceLayerProperties.html)

"""
function enumerate_instance_layer_properties(fptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties, fptr)
        end
    from_vk.(LayerProperties, pProperties)
end

"""
    enumerate_instance_extension_properties(fptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_LAYER_NOT_PRESENT`

Arguments:
- `fptr::FunctionPtr`
- `layer_name`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateInstanceExtensionProperties.html)

"""
function enumerate_instance_extension_properties(fptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateInstanceExtensionProperties(layer_name, pPropertyCount, pProperties, fptr)
        end
    from_vk.(ExtensionProperties, pProperties)
end

"""
    enumerate_device_layer_properties(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateDeviceLayerProperties.html)

"""
function enumerate_device_layer_properties(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{LayerProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkLayerProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceLayerProperties(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(LayerProperties, pProperties)
end

"""
    enumerate_device_extension_properties(physical_device, fptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_LAYER_NOT_PRESENT`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`
- `layer_name`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumerateDeviceExtensionProperties.html)

"""
function enumerate_device_extension_properties(physical_device, fptr::FunctionPtr; layer_name = C_NULL)::ResultTypes.Result{Vector{ExtensionProperties}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkExtensionProperties}(undef, pPropertyCount[])
            @check vkEnumerateDeviceExtensionProperties(physical_device, layer_name, pPropertyCount, pProperties, fptr)
        end
    from_vk.(ExtensionProperties, pProperties)
end

"""
    get_device_queue(device, queue_family_index::Integer, queue_index::Integer, fptr::FunctionPtr)::Queue

Arguments:
- `device`
- `queue_family_index::Integer`
- `queue_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceQueue.html)

"""
function get_device_queue(device, queue_family_index::Integer, queue_index::Integer, fptr::FunctionPtr)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue(device, queue_family_index, queue_index, pQueue, fptr)
    Queue(pQueue[], identity, device)
end

"""
    queue_submit(queue, submits::AbstractArray{_SubmitInfo}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `submits::AbstractArray{_SubmitInfo}`
- `fptr::FunctionPtr`
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSubmit.html)

"""
queue_submit(queue, submits::AbstractArray{_SubmitInfo}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit(queue, pointer_length(submits), submits, fence, fptr))

"""
    queue_wait_idle(queue, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueWaitIdle.html)

"""
queue_wait_idle(queue, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueWaitIdle(queue, fptr))

"""
    device_wait_idle(device, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDeviceWaitIdle.html)

"""
device_wait_idle(device, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDeviceWaitIdle(device, fptr))

"""
    allocate_memory(device, allocate_info::_MemoryAllocateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `allocate_info::_MemoryAllocateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateMemory.html)

"""
function allocate_memory(device, allocate_info::_MemoryAllocateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeviceMemory, VulkanError}
    pMemory = Ref{VkDeviceMemory}()
    @check vkAllocateMemory(device, allocate_info, allocator, pMemory, fptr_create)
    DeviceMemory(pMemory[], (x->free_memory(device, x, fptr_destroy; allocator)), device)
end

"""
    free_memory(device, memory, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `memory` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeMemory.html)

"""
free_memory(device, memory, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkFreeMemory(device, memory, allocator, fptr)

"""
    map_memory(device, memory, offset::Integer, size::Integer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_MEMORY_MAP_FAILED`

Arguments:
- `device`
- `memory` (externsync)
- `offset::Integer`
- `size::Integer`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMapMemory.html)

"""
function map_memory(device, memory, offset::Integer, size::Integer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Ptr{Cvoid}, VulkanError}
    ppData = Ref{Ptr{Cvoid}}()
    @check vkMapMemory(device, memory, offset, size, flags, ppData, fptr)
    ppData[]
end

"""
    unmap_memory(device, memory, fptr::FunctionPtr)::Cvoid

Arguments:
- `device`
- `memory` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUnmapMemory.html)

"""
unmap_memory(device, memory, fptr::FunctionPtr)::Cvoid = vkUnmapMemory(device, memory, fptr)

"""
    flush_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `memory_ranges::AbstractArray{_MappedMemoryRange}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFlushMappedMemoryRanges.html)

"""
flush_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkFlushMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges, fptr))

"""
    invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `memory_ranges::AbstractArray{_MappedMemoryRange}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkInvalidateMappedMemoryRanges.html)

"""
invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray{_MappedMemoryRange}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkInvalidateMappedMemoryRanges(device, pointer_length(memory_ranges), memory_ranges, fptr))

"""
    get_device_memory_commitment(device, memory, fptr::FunctionPtr)::UInt64

Arguments:
- `device`
- `memory`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceMemoryCommitment.html)

"""
function get_device_memory_commitment(device, memory, fptr::FunctionPtr)::UInt64
    pCommittedMemoryInBytes = Ref{VkDeviceSize}()
    vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes, fptr)
    pCommittedMemoryInBytes[]
end

"""
    get_buffer_memory_requirements(device, buffer, fptr::FunctionPtr)::MemoryRequirements

Arguments:
- `device`
- `buffer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferMemoryRequirements.html)

"""
function get_buffer_memory_requirements(device, buffer, fptr::FunctionPtr)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements, fptr)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

"""
    bind_buffer_memory(device, buffer, memory, memory_offset::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `buffer` (externsync)
- `memory`
- `memory_offset::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindBufferMemory.html)

"""
bind_buffer_memory(device, buffer, memory, memory_offset::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory(device, buffer, memory, memory_offset, fptr))

"""
    get_image_memory_requirements(device, image, fptr::FunctionPtr)::MemoryRequirements

Arguments:
- `device`
- `image`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageMemoryRequirements.html)

"""
function get_image_memory_requirements(device, image, fptr::FunctionPtr)::MemoryRequirements
    pMemoryRequirements = Ref{VkMemoryRequirements}()
    vkGetImageMemoryRequirements(device, image, pMemoryRequirements, fptr)
    from_vk(MemoryRequirements, pMemoryRequirements[])
end

"""
    bind_image_memory(device, image, memory, memory_offset::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `image` (externsync)
- `memory`
- `memory_offset::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindImageMemory.html)

"""
bind_image_memory(device, image, memory, memory_offset::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory(device, image, memory, memory_offset, fptr))

"""
    get_image_sparse_memory_requirements(device, image, fptr::FunctionPtr)::Vector{SparseImageMemoryRequirements}

Arguments:
- `device`
- `image`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSparseMemoryRequirements.html)

"""
function get_image_sparse_memory_requirements(device, image, fptr::FunctionPtr)::Vector{SparseImageMemoryRequirements}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, C_NULL, fptr)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements, fptr)
    from_vk.(SparseImageMemoryRequirements, pSparseMemoryRequirements)
end

"""
    get_physical_device_sparse_image_format_properties(physical_device, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling, fptr::FunctionPtr)::Vector{SparseImageFormatProperties}

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `samples::SampleCountFlag`
- `usage::ImageUsageFlag`
- `tiling::ImageTiling`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties.html)

"""
function get_physical_device_sparse_image_format_properties(physical_device, format::Format, type::ImageType, samples::SampleCountFlag, usage::ImageUsageFlag, tiling::ImageTiling, fptr::FunctionPtr)::Vector{SparseImageFormatProperties}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, C_NULL, fptr)
    pProperties = Vector{VkSparseImageFormatProperties}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties(physical_device, format, type, VkSampleCountFlagBits(samples.val), usage, tiling, pPropertyCount, pProperties, fptr)
    from_vk.(SparseImageFormatProperties, pProperties)
end

"""
    queue_bind_sparse(queue, bind_info::AbstractArray{_BindSparseInfo}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `bind_info::AbstractArray{_BindSparseInfo}` (externsync)
- `fptr::FunctionPtr`
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueBindSparse.html)

"""
queue_bind_sparse(queue, bind_info::AbstractArray{_BindSparseInfo}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueBindSparse(queue, pointer_length(bind_info), bind_info, fence, fptr))

"""
    create_fence(device, create_info::_FenceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_FenceCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateFence.html)

"""
function create_fence(device, create_info::_FenceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkCreateFence(device, create_info, allocator, pFence, fptr_create)
    Fence(pFence[], (x->destroy_fence(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_fence(device, fence, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `fence` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyFence.html)

"""
destroy_fence(device, fence, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyFence(device, fence, allocator, fptr)

"""
    reset_fences(device, fences::AbstractArray{Fence}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `fences::AbstractArray{Fence}` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetFences.html)

"""
reset_fences(device, fences::AbstractArray, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkResetFences(device, pointer_length(fences), fences, fptr))

"""
    get_fence_status(device, fence, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `fence`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceStatus.html)

"""
get_fence_status(device, fence, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceStatus(device, fence, fptr))

"""
    wait_for_fences(device, fences::AbstractArray{Fence}, wait_all::Bool, timeout::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `fences::AbstractArray{Fence}`
- `wait_all::Bool`
- `timeout::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWaitForFences.html)

"""
wait_for_fences(device, fences::AbstractArray, wait_all::Bool, timeout::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitForFences(device, pointer_length(fences), fences, wait_all, timeout, fptr))

"""
    create_semaphore(device, create_info::_SemaphoreCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SemaphoreCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSemaphore.html)

"""
function create_semaphore(device, create_info::_SemaphoreCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Semaphore, VulkanError}
    pSemaphore = Ref{VkSemaphore}()
    @check vkCreateSemaphore(device, create_info, allocator, pSemaphore, fptr_create)
    Semaphore(pSemaphore[], (x->destroy_semaphore(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_semaphore(device, semaphore, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `semaphore` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySemaphore.html)

"""
destroy_semaphore(device, semaphore, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySemaphore(device, semaphore, allocator, fptr)

"""
    create_event(device, create_info::_EventCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_EventCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateEvent.html)

"""
function create_event(device, create_info::_EventCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Event, VulkanError}
    pEvent = Ref{VkEvent}()
    @check vkCreateEvent(device, create_info, allocator, pEvent, fptr_create)
    Event(pEvent[], (x->destroy_event(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_event(device, event, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `event` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyEvent.html)

"""
destroy_event(device, event, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyEvent(device, event, allocator, fptr)

"""
    get_event_status(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `EVENT_SET`
  - `EVENT_RESET`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `event`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetEventStatus.html)

"""
get_event_status(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetEventStatus(device, event, fptr))

"""
    set_event(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `event` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetEvent.html)

"""
set_event(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetEvent(device, event, fptr))

"""
    reset_event(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `event` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetEvent.html)

"""
reset_event(device, event, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkResetEvent(device, event, fptr))

"""
    create_query_pool(device, create_info::_QueryPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_QueryPoolCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateQueryPool.html)

"""
function create_query_pool(device, create_info::_QueryPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{QueryPool, VulkanError}
    pQueryPool = Ref{VkQueryPool}()
    @check vkCreateQueryPool(device, create_info, allocator, pQueryPool, fptr_create)
    QueryPool(pQueryPool[], (x->destroy_query_pool(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_query_pool(device, query_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `query_pool` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyQueryPool.html)

"""
destroy_query_pool(device, query_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyQueryPool(device, query_pool, allocator, fptr)

"""
    get_query_pool_results(device, query_pool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `stride::Integer`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueryPoolResults.html)

"""
get_query_pool_results(device, query_pool, first_query::Integer, query_count::Integer, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkGetQueryPoolResults(device, query_pool, first_query, query_count, data_size, data, stride, flags, fptr))

"""
    reset_query_pool(device, query_pool, first_query::Integer, query_count::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `device`
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetQueryPool.html)

"""
reset_query_pool(device, query_pool, first_query::Integer, query_count::Integer, fptr::FunctionPtr)::Cvoid = vkResetQueryPool(device, query_pool, first_query, query_count, fptr)

"""
    create_buffer(device, create_info::_BufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `create_info::_BufferCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateBuffer.html)

"""
function create_buffer(device, create_info::_BufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Buffer, VulkanError}
    pBuffer = Ref{VkBuffer}()
    @check vkCreateBuffer(device, create_info, allocator, pBuffer, fptr_create)
    Buffer(pBuffer[], (x->destroy_buffer(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_buffer(device, buffer, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `buffer` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyBuffer.html)

"""
destroy_buffer(device, buffer, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyBuffer(device, buffer, allocator, fptr)

"""
    create_buffer_view(device, create_info::_BufferViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_BufferViewCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateBufferView.html)

"""
function create_buffer_view(device, create_info::_BufferViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{BufferView, VulkanError}
    pView = Ref{VkBufferView}()
    @check vkCreateBufferView(device, create_info, allocator, pView, fptr_create)
    BufferView(pView[], (x->destroy_buffer_view(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_buffer_view(device, buffer_view, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `buffer_view` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyBufferView.html)

"""
destroy_buffer_view(device, buffer_view, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyBufferView(device, buffer_view, allocator, fptr)

"""
    create_image(device, create_info::_ImageCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_ImageCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateImage.html)

"""
function create_image(device, create_info::_ImageCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Image, VulkanError}
    pImage = Ref{VkImage}()
    @check vkCreateImage(device, create_info, allocator, pImage, fptr_create)
    Image(pImage[], (x->destroy_image(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_image(device, image, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `image` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyImage.html)

"""
destroy_image(device, image, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyImage(device, image, allocator, fptr)

"""
    get_image_subresource_layout(device, image, subresource::_ImageSubresource, fptr::FunctionPtr)::SubresourceLayout

Arguments:
- `device`
- `image`
- `subresource::_ImageSubresource`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSubresourceLayout.html)

"""
function get_image_subresource_layout(device, image, subresource::_ImageSubresource, fptr::FunctionPtr)::SubresourceLayout
    pLayout = Ref{VkSubresourceLayout}()
    vkGetImageSubresourceLayout(device, image, subresource, pLayout, fptr)
    from_vk(SubresourceLayout, pLayout[])
end

"""
    create_image_view(device, create_info::_ImageViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_ImageViewCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateImageView.html)

"""
function create_image_view(device, create_info::_ImageViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ImageView, VulkanError}
    pView = Ref{VkImageView}()
    @check vkCreateImageView(device, create_info, allocator, pView, fptr_create)
    ImageView(pView[], (x->destroy_image_view(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_image_view(device, image_view, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `image_view` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyImageView.html)

"""
destroy_image_view(device, image_view, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyImageView(device, image_view, allocator, fptr)

"""
    create_shader_module(device, create_info::_ShaderModuleCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_info::_ShaderModuleCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateShaderModule.html)

"""
function create_shader_module(device, create_info::_ShaderModuleCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ShaderModule, VulkanError}
    pShaderModule = Ref{VkShaderModule}()
    @check vkCreateShaderModule(device, create_info, allocator, pShaderModule, fptr_create)
    ShaderModule(pShaderModule[], (x->destroy_shader_module(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_shader_module(device, shader_module, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `shader_module` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyShaderModule.html)

"""
destroy_shader_module(device, shader_module, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyShaderModule(device, shader_module, allocator, fptr)

"""
    create_pipeline_cache(device, create_info::_PipelineCacheCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_PipelineCacheCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePipelineCache.html)

"""
function create_pipeline_cache(device, create_info::_PipelineCacheCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineCache, VulkanError}
    pPipelineCache = Ref{VkPipelineCache}()
    @check vkCreatePipelineCache(device, create_info, allocator, pPipelineCache, fptr_create)
    PipelineCache(pPipelineCache[], (x->destroy_pipeline_cache(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_pipeline_cache(device, pipeline_cache, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline_cache` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipelineCache.html)

"""
destroy_pipeline_cache(device, pipeline_cache, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipelineCache(device, pipeline_cache, allocator, fptr)

"""
    get_pipeline_cache_data(device, pipeline_cache, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline_cache`
- `fptr::FunctionPtr`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineCacheData.html)

"""
function get_pipeline_cache_data(device, pipeline_cache, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, C_NULL, fptr)
            pData = Libc.malloc(pDataSize[])
            @check vkGetPipelineCacheData(device, pipeline_cache, pDataSize, pData, fptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

"""
    merge_pipeline_caches(device, dst_cache, src_caches::AbstractArray{PipelineCache}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `dst_cache` (externsync)
- `src_caches::AbstractArray{PipelineCache}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMergePipelineCaches.html)

"""
merge_pipeline_caches(device, dst_cache, src_caches::AbstractArray, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkMergePipelineCaches(device, dst_cache, pointer_length(src_caches), src_caches, fptr))

"""
    create_graphics_pipelines(device, create_infos::AbstractArray{_GraphicsPipelineCreateInfo}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_GraphicsPipelineCreateInfo}`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateGraphicsPipelines.html)

"""
function create_graphics_pipelines(device, create_infos::AbstractArray{_GraphicsPipelineCreateInfo}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateGraphicsPipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fptr_destroy; allocator)), device), _return_code)
end

"""
    create_compute_pipelines(device, create_infos::AbstractArray{_ComputePipelineCreateInfo}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_ComputePipelineCreateInfo}`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateComputePipelines.html)

"""
function create_compute_pipelines(device, create_infos::AbstractArray{_ComputePipelineCreateInfo}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateComputePipelines(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fptr_destroy; allocator)), device), _return_code)
end

"""
    destroy_pipeline(device, pipeline, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipeline.html)

"""
destroy_pipeline(device, pipeline, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipeline(device, pipeline, allocator, fptr)

"""
    create_pipeline_layout(device, create_info::_PipelineLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_PipelineLayoutCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePipelineLayout.html)

"""
function create_pipeline_layout(device, create_info::_PipelineLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PipelineLayout, VulkanError}
    pPipelineLayout = Ref{VkPipelineLayout}()
    @check vkCreatePipelineLayout(device, create_info, allocator, pPipelineLayout, fptr_create)
    PipelineLayout(pPipelineLayout[], (x->destroy_pipeline_layout(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_pipeline_layout(device, pipeline_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `pipeline_layout` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPipelineLayout.html)

"""
destroy_pipeline_layout(device, pipeline_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPipelineLayout(device, pipeline_layout, allocator, fptr)

"""
    create_sampler(device, create_info::_SamplerCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SamplerCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSampler.html)

"""
function create_sampler(device, create_info::_SamplerCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Sampler, VulkanError}
    pSampler = Ref{VkSampler}()
    @check vkCreateSampler(device, create_info, allocator, pSampler, fptr_create)
    Sampler(pSampler[], (x->destroy_sampler(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_sampler(device, sampler, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `sampler` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySampler.html)

"""
destroy_sampler(device, sampler, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySampler(device, sampler, allocator, fptr)

"""
    create_descriptor_set_layout(device, create_info::_DescriptorSetLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_DescriptorSetLayoutCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorSetLayout.html)

"""
function create_descriptor_set_layout(device, create_info::_DescriptorSetLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorSetLayout, VulkanError}
    pSetLayout = Ref{VkDescriptorSetLayout}()
    @check vkCreateDescriptorSetLayout(device, create_info, allocator, pSetLayout, fptr_create)
    DescriptorSetLayout(pSetLayout[], (x->destroy_descriptor_set_layout(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_descriptor_set_layout(device, descriptor_set_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_set_layout` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorSetLayout.html)

"""
destroy_descriptor_set_layout(device, descriptor_set_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorSetLayout(device, descriptor_set_layout, allocator, fptr)

"""
    create_descriptor_pool(device, create_info::_DescriptorPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FRAGMENTATION_EXT`

Arguments:
- `device`
- `create_info::_DescriptorPoolCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorPool.html)

"""
function create_descriptor_pool(device, create_info::_DescriptorPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorPool, VulkanError}
    pDescriptorPool = Ref{VkDescriptorPool}()
    @check vkCreateDescriptorPool(device, create_info, allocator, pDescriptorPool, fptr_create)
    DescriptorPool(pDescriptorPool[], (x->destroy_descriptor_pool(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_descriptor_pool(device, descriptor_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorPool.html)

"""
destroy_descriptor_pool(device, descriptor_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorPool(device, descriptor_pool, allocator, fptr)

"""
    reset_descriptor_pool(device, descriptor_pool, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetDescriptorPool.html)

"""
reset_descriptor_pool(device, descriptor_pool, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetDescriptorPool(device, descriptor_pool, flags, fptr))

"""
    allocate_descriptor_sets(device, allocate_info::_DescriptorSetAllocateInfo, fptr_create::FunctionPtr)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FRAGMENTED_POOL`
  - `ERROR_OUT_OF_POOL_MEMORY`

Arguments:
- `device`
- `allocate_info::_DescriptorSetAllocateInfo` (externsync)
- `fptr_create::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateDescriptorSets.html)

"""
function allocate_descriptor_sets(device, allocate_info::_DescriptorSetAllocateInfo, fptr_create::FunctionPtr)::ResultTypes.Result{Vector{DescriptorSet}, VulkanError}
    pDescriptorSets = Vector{VkDescriptorSet}(undef, allocate_info.vks.descriptorSetCount)
    @check vkAllocateDescriptorSets(device, allocate_info, pDescriptorSets, fptr_create)
    DescriptorSet.(pDescriptorSets, identity, getproperty(allocate_info, :descriptor_pool))
end

"""
    free_descriptor_sets(device, descriptor_pool, descriptor_sets::AbstractArray{DescriptorSet}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:

Arguments:
- `device`
- `descriptor_pool` (externsync)
- `descriptor_sets::AbstractArray{DescriptorSet}` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeDescriptorSets.html)

"""
free_descriptor_sets(device, descriptor_pool, descriptor_sets::AbstractArray, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkFreeDescriptorSets(device, descriptor_pool, pointer_length(descriptor_sets), descriptor_sets, fptr))

"""
    update_descriptor_sets(device, descriptor_writes::AbstractArray{_WriteDescriptorSet}, descriptor_copies::AbstractArray{_CopyDescriptorSet}, fptr::FunctionPtr)::Cvoid

Arguments:
- `device`
- `descriptor_writes::AbstractArray{_WriteDescriptorSet}` (externsync)
- `descriptor_copies::AbstractArray{_CopyDescriptorSet}` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUpdateDescriptorSets.html)

"""
update_descriptor_sets(device, descriptor_writes::AbstractArray{_WriteDescriptorSet}, descriptor_copies::AbstractArray{_CopyDescriptorSet}, fptr::FunctionPtr)::Cvoid = vkUpdateDescriptorSets(device, pointer_length(descriptor_writes), descriptor_writes, pointer_length(descriptor_copies), descriptor_copies, fptr)

"""
    create_framebuffer(device, create_info::_FramebufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_FramebufferCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateFramebuffer.html)

"""
function create_framebuffer(device, create_info::_FramebufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Framebuffer, VulkanError}
    pFramebuffer = Ref{VkFramebuffer}()
    @check vkCreateFramebuffer(device, create_info, allocator, pFramebuffer, fptr_create)
    Framebuffer(pFramebuffer[], (x->destroy_framebuffer(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_framebuffer(device, framebuffer, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `framebuffer` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyFramebuffer.html)

"""
destroy_framebuffer(device, framebuffer, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyFramebuffer(device, framebuffer, allocator, fptr)

"""
    create_render_pass(device, create_info::_RenderPassCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_RenderPassCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRenderPass.html)

"""
function create_render_pass(device, create_info::_RenderPassCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass(device, create_info, allocator, pRenderPass, fptr_create)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_render_pass(device, render_pass, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `render_pass` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyRenderPass.html)

"""
destroy_render_pass(device, render_pass, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyRenderPass(device, render_pass, allocator, fptr)

"""
    get_render_area_granularity(device, render_pass, fptr::FunctionPtr)::_Extent2D

Arguments:
- `device`
- `render_pass`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRenderAreaGranularity.html)

"""
function get_render_area_granularity(device, render_pass, fptr::FunctionPtr)::_Extent2D
    pGranularity = Ref{VkExtent2D}()
    vkGetRenderAreaGranularity(device, render_pass, pGranularity, fptr)
    from_vk(_Extent2D, pGranularity[])
end

"""
    create_command_pool(device, create_info::_CommandPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_CommandPoolCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateCommandPool.html)

"""
function create_command_pool(device, create_info::_CommandPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{CommandPool, VulkanError}
    pCommandPool = Ref{VkCommandPool}()
    @check vkCreateCommandPool(device, create_info, allocator, pCommandPool, fptr_create)
    CommandPool(pCommandPool[], (x->destroy_command_pool(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_command_pool(device, command_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyCommandPool.html)

"""
destroy_command_pool(device, command_pool, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyCommandPool(device, command_pool, allocator, fptr)

"""
    reset_command_pool(device, command_pool, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `command_pool` (externsync)
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetCommandPool.html)

"""
reset_command_pool(device, command_pool, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandPool(device, command_pool, flags, fptr))

"""
    allocate_command_buffers(device, allocate_info::_CommandBufferAllocateInfo, fptr_create::FunctionPtr)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `allocate_info::_CommandBufferAllocateInfo` (externsync)
- `fptr_create::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAllocateCommandBuffers.html)

"""
function allocate_command_buffers(device, allocate_info::_CommandBufferAllocateInfo, fptr_create::FunctionPtr)::ResultTypes.Result{Vector{CommandBuffer}, VulkanError}
    pCommandBuffers = Vector{VkCommandBuffer}(undef, allocate_info.vks.commandBufferCount)
    @check vkAllocateCommandBuffers(device, allocate_info, pCommandBuffers, fptr_create)
    CommandBuffer.(pCommandBuffers, identity, getproperty(allocate_info, :command_pool))
end

"""
    free_command_buffers(device, command_pool, command_buffers::AbstractArray{CommandBuffer}, fptr::FunctionPtr)::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `command_buffers::AbstractArray{CommandBuffer}` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkFreeCommandBuffers.html)

"""
free_command_buffers(device, command_pool, command_buffers::AbstractArray, fptr::FunctionPtr)::Cvoid = vkFreeCommandBuffers(device, command_pool, pointer_length(command_buffers), command_buffers, fptr)

"""
    begin_command_buffer(command_buffer, begin_info::_CommandBufferBeginInfo, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `begin_info::_CommandBufferBeginInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBeginCommandBuffer.html)

"""
begin_command_buffer(command_buffer, begin_info::_CommandBufferBeginInfo, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBeginCommandBuffer(command_buffer, begin_info, fptr))

"""
    end_command_buffer(command_buffer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEndCommandBuffer.html)

"""
end_command_buffer(command_buffer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkEndCommandBuffer(command_buffer, fptr))

"""
    reset_command_buffer(command_buffer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkResetCommandBuffer.html)

"""
reset_command_buffer(command_buffer, fptr::FunctionPtr; flags = 0)::ResultTypes.Result{Result, VulkanError} = @check(vkResetCommandBuffer(command_buffer, flags, fptr))

"""
    cmd_bind_pipeline(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `pipeline`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindPipeline.html)

"""
cmd_bind_pipeline(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, fptr::FunctionPtr)::Cvoid = vkCmdBindPipeline(command_buffer, pipeline_bind_point, pipeline, fptr)

"""
    cmd_set_viewport(command_buffer, viewports::AbstractArray{_Viewport}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `viewports::AbstractArray{_Viewport}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewport.html)

"""
cmd_set_viewport(command_buffer, viewports::AbstractArray{_Viewport}, fptr::FunctionPtr)::Cvoid = vkCmdSetViewport(command_buffer, 0, pointer_length(viewports), viewports, fptr)

"""
    cmd_set_scissor(command_buffer, scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `scissors::AbstractArray{_Rect2D}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetScissor.html)

"""
cmd_set_scissor(command_buffer, scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid = vkCmdSetScissor(command_buffer, 0, pointer_length(scissors), scissors, fptr)

"""
    cmd_set_line_width(command_buffer, line_width::Real, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `line_width::Real`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLineWidth.html)

"""
cmd_set_line_width(command_buffer, line_width::Real, fptr::FunctionPtr)::Cvoid = vkCmdSetLineWidth(command_buffer, line_width, fptr)

"""
    cmd_set_depth_bias(command_buffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `depth_bias_constant_factor::Real`
- `depth_bias_clamp::Real`
- `depth_bias_slope_factor::Real`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBias.html)

"""
cmd_set_depth_bias(command_buffer, depth_bias_constant_factor::Real, depth_bias_clamp::Real, depth_bias_slope_factor::Real, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthBias(command_buffer, depth_bias_constant_factor, depth_bias_clamp, depth_bias_slope_factor, fptr)

"""
    cmd_set_blend_constants(command_buffer, blend_constants::NTuple{4, Float32}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `blend_constants::NTuple{4, Float32}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetBlendConstants.html)

"""
cmd_set_blend_constants(command_buffer, blend_constants::NTuple{4, Float32}, fptr::FunctionPtr)::Cvoid = vkCmdSetBlendConstants(command_buffer, blend_constants, fptr)

"""
    cmd_set_depth_bounds(command_buffer, min_depth_bounds::Real, max_depth_bounds::Real, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `min_depth_bounds::Real`
- `max_depth_bounds::Real`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBounds.html)

"""
cmd_set_depth_bounds(command_buffer, min_depth_bounds::Real, max_depth_bounds::Real, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthBounds(command_buffer, min_depth_bounds, max_depth_bounds, fptr)

"""
    cmd_set_stencil_compare_mask(command_buffer, face_mask::StencilFaceFlag, compare_mask::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `compare_mask::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilCompareMask.html)

"""
cmd_set_stencil_compare_mask(command_buffer, face_mask::StencilFaceFlag, compare_mask::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetStencilCompareMask(command_buffer, face_mask, compare_mask, fptr)

"""
    cmd_set_stencil_write_mask(command_buffer, face_mask::StencilFaceFlag, write_mask::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `write_mask::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilWriteMask.html)

"""
cmd_set_stencil_write_mask(command_buffer, face_mask::StencilFaceFlag, write_mask::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetStencilWriteMask(command_buffer, face_mask, write_mask, fptr)

"""
    cmd_set_stencil_reference(command_buffer, face_mask::StencilFaceFlag, reference::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `reference::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilReference.html)

"""
cmd_set_stencil_reference(command_buffer, face_mask::StencilFaceFlag, reference::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetStencilReference(command_buffer, face_mask, reference, fptr)

"""
    cmd_bind_descriptor_sets(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, first_set::Integer, descriptor_sets::AbstractArray{DescriptorSet}, dynamic_offsets::AbstractArray{<:Integer}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `layout`
- `first_set::Integer`
- `descriptor_sets::AbstractArray{DescriptorSet}`
- `dynamic_offsets::AbstractArray{<:Integer}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindDescriptorSets.html)

"""
cmd_bind_descriptor_sets(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, first_set::Integer, descriptor_sets::AbstractArray, dynamic_offsets::AbstractArray, fptr::FunctionPtr)::Cvoid = vkCmdBindDescriptorSets(command_buffer, pipeline_bind_point, layout, first_set, pointer_length(descriptor_sets), descriptor_sets, pointer_length(dynamic_offsets), dynamic_offsets, fptr)

"""
    cmd_bind_index_buffer(command_buffer, buffer, offset::Integer, index_type::IndexType, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `index_type::IndexType`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindIndexBuffer.html)

"""
cmd_bind_index_buffer(command_buffer, buffer, offset::Integer, index_type::IndexType, fptr::FunctionPtr)::Cvoid = vkCmdBindIndexBuffer(command_buffer, buffer, offset, index_type, fptr)

"""
    cmd_bind_vertex_buffers(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindVertexBuffers.html)

"""
cmd_bind_vertex_buffers(command_buffer, buffers::AbstractArray, offsets::AbstractArray, fptr::FunctionPtr)::Cvoid = vkCmdBindVertexBuffers(command_buffer, 0, pointer_length(buffers), buffers, offsets, fptr)

"""
    cmd_draw(command_buffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `vertex_count::Integer`
- `instance_count::Integer`
- `first_vertex::Integer`
- `first_instance::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDraw.html)

"""
cmd_draw(command_buffer, vertex_count::Integer, instance_count::Integer, first_vertex::Integer, first_instance::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDraw(command_buffer, vertex_count, instance_count, first_vertex, first_instance, fptr)

"""
    cmd_draw_indexed(command_buffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `index_count::Integer`
- `instance_count::Integer`
- `first_index::Integer`
- `vertex_offset::Integer`
- `first_instance::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexed.html)

"""
cmd_draw_indexed(command_buffer, index_count::Integer, instance_count::Integer, first_index::Integer, vertex_offset::Integer, first_instance::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndexed(command_buffer, index_count, instance_count, first_index, vertex_offset, first_instance, fptr)

"""
    cmd_draw_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirect.html)

"""
cmd_draw_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndirect(command_buffer, buffer, offset, draw_count, stride, fptr)

"""
    cmd_draw_indexed_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexedIndirect.html)

"""
cmd_draw_indexed_indirect(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndexedIndirect(command_buffer, buffer, offset, draw_count, stride, fptr)

"""
    cmd_dispatch(command_buffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `group_count_x::Integer`
- `group_count_y::Integer`
- `group_count_z::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatch.html)

"""
cmd_dispatch(command_buffer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDispatch(command_buffer, group_count_x, group_count_y, group_count_z, fptr)

"""
    cmd_dispatch_indirect(command_buffer, buffer, offset::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatchIndirect.html)

"""
cmd_dispatch_indirect(command_buffer, buffer, offset::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDispatchIndirect(command_buffer, buffer, offset, fptr)

"""
    cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray{_BufferCopy}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_buffer`
- `dst_buffer`
- `regions::AbstractArray{_BufferCopy}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBuffer.html)

"""
cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray{_BufferCopy}, fptr::FunctionPtr)::Cvoid = vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, pointer_length(regions), regions, fptr)

"""
    cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageCopy}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageCopy}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImage.html)

"""
cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageCopy}, fptr::FunctionPtr)::Cvoid = vkCmdCopyImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, fptr)

"""
    cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageBlit}, filter::Filter, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageBlit}`
- `filter::Filter`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBlitImage.html)

"""
cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageBlit}, filter::Filter, fptr::FunctionPtr)::Cvoid = vkCmdBlitImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, filter, fptr)

"""
    cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_BufferImageCopy}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_buffer`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_BufferImageCopy}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBufferToImage.html)

"""
cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_BufferImageCopy}, fptr::FunctionPtr)::Cvoid = vkCmdCopyBufferToImage(command_buffer, src_buffer, dst_image, dst_image_layout, pointer_length(regions), regions, fptr)

"""
    cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray{_BufferImageCopy}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_buffer`
- `regions::AbstractArray{_BufferImageCopy}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImageToBuffer.html)

"""
cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray{_BufferImageCopy}, fptr::FunctionPtr)::Cvoid = vkCmdCopyImageToBuffer(command_buffer, src_image, src_image_layout, dst_buffer, pointer_length(regions), regions, fptr)

"""
    cmd_update_buffer(command_buffer, dst_buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `dst_buffer`
- `dst_offset::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdUpdateBuffer.html)

"""
cmd_update_buffer(command_buffer, dst_buffer, dst_offset::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid = vkCmdUpdateBuffer(command_buffer, dst_buffer, dst_offset, data_size, data, fptr)

"""
    cmd_fill_buffer(command_buffer, dst_buffer, dst_offset::Integer, size::Integer, data::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `dst_buffer`
- `dst_offset::Integer`
- `size::Integer`
- `data::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdFillBuffer.html)

"""
cmd_fill_buffer(command_buffer, dst_buffer, dst_offset::Integer, size::Integer, data::Integer, fptr::FunctionPtr)::Cvoid = vkCmdFillBuffer(command_buffer, dst_buffer, dst_offset, size, data, fptr)

"""
    cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::_ClearColorValue, ranges::AbstractArray{_ImageSubresourceRange}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `image`
- `image_layout::ImageLayout`
- `color::_ClearColorValue`
- `ranges::AbstractArray{_ImageSubresourceRange}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearColorImage.html)

"""
cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::_ClearColorValue, ranges::AbstractArray{_ImageSubresourceRange}, fptr::FunctionPtr)::Cvoid = vkCmdClearColorImage(command_buffer, image, image_layout, color, pointer_length(ranges), ranges, fptr)

"""
    cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray{_ImageSubresourceRange}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `image`
- `image_layout::ImageLayout`
- `depth_stencil::_ClearDepthStencilValue`
- `ranges::AbstractArray{_ImageSubresourceRange}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearDepthStencilImage.html)

"""
cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::_ClearDepthStencilValue, ranges::AbstractArray{_ImageSubresourceRange}, fptr::FunctionPtr)::Cvoid = vkCmdClearDepthStencilImage(command_buffer, image, image_layout, depth_stencil, pointer_length(ranges), ranges, fptr)

"""
    cmd_clear_attachments(command_buffer, attachments::AbstractArray{_ClearAttachment}, rects::AbstractArray{_ClearRect}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `attachments::AbstractArray{_ClearAttachment}`
- `rects::AbstractArray{_ClearRect}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdClearAttachments.html)

"""
cmd_clear_attachments(command_buffer, attachments::AbstractArray{_ClearAttachment}, rects::AbstractArray{_ClearRect}, fptr::FunctionPtr)::Cvoid = vkCmdClearAttachments(command_buffer, pointer_length(attachments), attachments, pointer_length(rects), rects, fptr)

"""
    cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageResolve}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_image`
- `src_image_layout::ImageLayout`
- `dst_image`
- `dst_image_layout::ImageLayout`
- `regions::AbstractArray{_ImageResolve}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResolveImage.html)

"""
cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray{_ImageResolve}, fptr::FunctionPtr)::Cvoid = vkCmdResolveImage(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, pointer_length(regions), regions, fptr)

"""
    cmd_set_event(command_buffer, event, stage_mask::PipelineStageFlag, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::PipelineStageFlag`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetEvent.html)

"""
cmd_set_event(command_buffer, event, stage_mask::PipelineStageFlag, fptr::FunctionPtr)::Cvoid = vkCmdSetEvent(command_buffer, event, stage_mask, fptr)

"""
    cmd_reset_event(command_buffer, event, stage_mask::PipelineStageFlag, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::PipelineStageFlag`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetEvent.html)

"""
cmd_reset_event(command_buffer, event, stage_mask::PipelineStageFlag, fptr::FunctionPtr)::Cvoid = vkCmdResetEvent(command_buffer, event, stage_mask, fptr)

"""
    cmd_wait_events(command_buffer, events::AbstractArray{Event}, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}, fptr::FunctionPtr; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `events::AbstractArray{Event}`
- `memory_barriers::AbstractArray{_MemoryBarrier}`
- `buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}`
- `image_memory_barriers::AbstractArray{_ImageMemoryBarrier}`
- `fptr::FunctionPtr`
- `src_stage_mask`: defaults to `0`
- `dst_stage_mask`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWaitEvents.html)

"""
cmd_wait_events(command_buffer, events::AbstractArray, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}, fptr::FunctionPtr; src_stage_mask = 0, dst_stage_mask = 0)::Cvoid = vkCmdWaitEvents(command_buffer, pointer_length(events), events, src_stage_mask, dst_stage_mask, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers, fptr)

"""
    cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}, fptr::FunctionPtr; dependency_flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `src_stage_mask::PipelineStageFlag`
- `dst_stage_mask::PipelineStageFlag`
- `memory_barriers::AbstractArray{_MemoryBarrier}`
- `buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}`
- `image_memory_barriers::AbstractArray{_ImageMemoryBarrier}`
- `fptr::FunctionPtr`
- `dependency_flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPipelineBarrier.html)

"""
cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray{_MemoryBarrier}, buffer_memory_barriers::AbstractArray{_BufferMemoryBarrier}, image_memory_barriers::AbstractArray{_ImageMemoryBarrier}, fptr::FunctionPtr; dependency_flags = 0)::Cvoid = vkCmdPipelineBarrier(command_buffer, src_stage_mask, dst_stage_mask, dependency_flags, pointer_length(memory_barriers), memory_barriers, pointer_length(buffer_memory_barriers), buffer_memory_barriers, pointer_length(image_memory_barriers), image_memory_barriers, fptr)

"""
    cmd_begin_query(command_buffer, query_pool, query::Integer, fptr::FunctionPtr; flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginQuery.html)

"""
cmd_begin_query(command_buffer, query_pool, query::Integer, fptr::FunctionPtr; flags = 0)::Cvoid = vkCmdBeginQuery(command_buffer, query_pool, query, flags, fptr)

"""
    cmd_end_query(command_buffer, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndQuery.html)

"""
cmd_end_query(command_buffer, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid = vkCmdEndQuery(command_buffer, query_pool, query, fptr)

"""
    cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_conditional\\_rendering

Arguments:
- `command_buffer` (externsync)
- `conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginConditionalRenderingEXT.html)

"""
cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::_ConditionalRenderingBeginInfoEXT, fptr::FunctionPtr)::Cvoid = vkCmdBeginConditionalRenderingEXT(command_buffer, conditional_rendering_begin, fptr)

"""
    cmd_end_conditional_rendering_ext(command_buffer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_conditional\\_rendering

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndConditionalRenderingEXT.html)

"""
cmd_end_conditional_rendering_ext(command_buffer, fptr::FunctionPtr)::Cvoid = vkCmdEndConditionalRenderingEXT(command_buffer, fptr)

"""
    cmd_reset_query_pool(command_buffer, query_pool, first_query::Integer, query_count::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetQueryPool.html)

"""
cmd_reset_query_pool(command_buffer, query_pool, first_query::Integer, query_count::Integer, fptr::FunctionPtr)::Cvoid = vkCmdResetQueryPool(command_buffer, query_pool, first_query, query_count, fptr)

"""
    cmd_write_timestamp(command_buffer, pipeline_stage::PipelineStageFlag, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `pipeline_stage::PipelineStageFlag`
- `query_pool`
- `query::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteTimestamp.html)

"""
cmd_write_timestamp(command_buffer, pipeline_stage::PipelineStageFlag, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteTimestamp(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), query_pool, query, fptr)

"""
    cmd_copy_query_pool_results(command_buffer, query_pool, first_query::Integer, query_count::Integer, dst_buffer, dst_offset::Integer, stride::Integer, fptr::FunctionPtr; flags = 0)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `first_query::Integer`
- `query_count::Integer`
- `dst_buffer`
- `dst_offset::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyQueryPoolResults.html)

"""
cmd_copy_query_pool_results(command_buffer, query_pool, first_query::Integer, query_count::Integer, dst_buffer, dst_offset::Integer, stride::Integer, fptr::FunctionPtr; flags = 0)::Cvoid = vkCmdCopyQueryPoolResults(command_buffer, query_pool, first_query, query_count, dst_buffer, dst_offset, stride, flags, fptr)

"""
    cmd_push_constants(command_buffer, layout, stage_flags::ShaderStageFlag, offset::Integer, size::Integer, values::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `layout`
- `stage_flags::ShaderStageFlag`
- `offset::Integer`
- `size::Integer`
- `values::Ptr{Cvoid}` (must be a valid pointer with `size` bytes)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushConstants.html)

"""
cmd_push_constants(command_buffer, layout, stage_flags::ShaderStageFlag, offset::Integer, size::Integer, values::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid = vkCmdPushConstants(command_buffer, layout, stage_flags, offset, size, values, fptr)

"""
    cmd_begin_render_pass(command_buffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `render_pass_begin::_RenderPassBeginInfo`
- `contents::SubpassContents`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginRenderPass.html)

"""
cmd_begin_render_pass(command_buffer, render_pass_begin::_RenderPassBeginInfo, contents::SubpassContents, fptr::FunctionPtr)::Cvoid = vkCmdBeginRenderPass(command_buffer, render_pass_begin, contents, fptr)

"""
    cmd_next_subpass(command_buffer, contents::SubpassContents, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `contents::SubpassContents`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdNextSubpass.html)

"""
cmd_next_subpass(command_buffer, contents::SubpassContents, fptr::FunctionPtr)::Cvoid = vkCmdNextSubpass(command_buffer, contents, fptr)

"""
    cmd_end_render_pass(command_buffer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndRenderPass.html)

"""
cmd_end_render_pass(command_buffer, fptr::FunctionPtr)::Cvoid = vkCmdEndRenderPass(command_buffer, fptr)

"""
    cmd_execute_commands(command_buffer, command_buffers::AbstractArray{CommandBuffer}, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `command_buffers::AbstractArray{CommandBuffer}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdExecuteCommands.html)

"""
cmd_execute_commands(command_buffer, command_buffers::AbstractArray, fptr::FunctionPtr)::Cvoid = vkCmdExecuteCommands(command_buffer, pointer_length(command_buffers), command_buffers, fptr)

"""
    get_physical_device_display_properties_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPropertiesKHR.html)

"""
function get_physical_device_display_properties_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayPropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayPropertiesKHR, pProperties)
end

"""
    get_physical_device_display_plane_properties_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPlanePropertiesKHR.html)

"""
function get_physical_device_display_plane_properties_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlanePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayPlanePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayPlanePropertiesKHR, pProperties)
end

"""
    get_display_plane_supported_displays_khr(physical_device, plane_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `plane_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneSupportedDisplaysKHR.html)

"""
function get_display_plane_supported_displays_khr(physical_device, plane_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayKHR}, VulkanError}
    pDisplayCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, C_NULL, fptr)
            pDisplays = Vector{VkDisplayKHR}(undef, pDisplayCount[])
            @check vkGetDisplayPlaneSupportedDisplaysKHR(physical_device, plane_index, pDisplayCount, pDisplays, fptr)
        end
    DisplayKHR.(pDisplays, identity, physical_device)
end

"""
    get_display_mode_properties_khr(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayModePropertiesKHR.html)

"""
function get_display_mode_properties_khr(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModePropertiesKHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayModePropertiesKHR}(undef, pPropertyCount[])
            @check vkGetDisplayModePropertiesKHR(physical_device, display, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayModePropertiesKHR, pProperties)
end

"""
    create_display_mode_khr(physical_device, display, create_info::_DisplayModeCreateInfoKHR, fptr_create::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `display` (externsync)
- `create_info::_DisplayModeCreateInfoKHR`
- `fptr_create::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDisplayModeKHR.html)

"""
function create_display_mode_khr(physical_device, display, create_info::_DisplayModeCreateInfoKHR, fptr_create::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DisplayModeKHR, VulkanError}
    pMode = Ref{VkDisplayModeKHR}()
    @check vkCreateDisplayModeKHR(physical_device, display, create_info, allocator, pMode, fptr_create)
    DisplayModeKHR(pMode[], identity, display)
end

"""
    get_display_plane_capabilities_khr(physical_device, mode, plane_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `mode` (externsync)
- `plane_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneCapabilitiesKHR.html)

"""
function get_display_plane_capabilities_khr(physical_device, mode, plane_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilitiesKHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilitiesKHR}()
    @check vkGetDisplayPlaneCapabilitiesKHR(physical_device, mode, plane_index, pCapabilities, fptr)
    from_vk(DisplayPlaneCapabilitiesKHR, pCapabilities[])
end

"""
    create_display_plane_surface_khr(instance, create_info::_DisplaySurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_KHR\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_DisplaySurfaceCreateInfoKHR`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDisplayPlaneSurfaceKHR.html)

"""
function create_display_plane_surface_khr(instance, create_info::_DisplaySurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateDisplayPlaneSurfaceKHR(instance, create_info, allocator, pSurface, fptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fptr_destroy; allocator)), instance)
end

"""
    create_shared_swapchains_khr(device, create_infos::AbstractArray{_SwapchainCreateInfoKHR}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}

Extension: VK\\_KHR\\_display\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INCOMPATIBLE_DISPLAY_KHR`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `create_infos::AbstractArray{_SwapchainCreateInfoKHR}` (externsync)
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSharedSwapchainsKHR.html)

"""
function create_shared_swapchains_khr(device, create_infos::AbstractArray{_SwapchainCreateInfoKHR}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Vector{SwapchainKHR}, VulkanError}
    pSwapchains = Vector{VkSwapchainKHR}(undef, pointer_length(create_infos))
    @check vkCreateSharedSwapchainsKHR(device, pointer_length(create_infos), create_infos, allocator, pSwapchains, fptr_create)
    SwapchainKHR.(pSwapchains, (x->destroy_swapchain_khr(device, x, fptr_destroy; allocator)), getproperty(create_infos, :surface))
end

"""
    destroy_surface_khr(instance, surface, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_surface

Arguments:
- `instance`
- `surface` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySurfaceKHR.html)

"""
destroy_surface_khr(instance, surface, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySurfaceKHR(instance, surface, allocator, fptr)

"""
    get_physical_device_surface_support_khr(physical_device, queue_family_index::Integer, surface, fptr::FunctionPtr)::ResultTypes.Result{Bool, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `queue_family_index::Integer`
- `surface`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html)

"""
function get_physical_device_surface_support_khr(physical_device, queue_family_index::Integer, surface, fptr::FunctionPtr)::ResultTypes.Result{Bool, VulkanError}
    pSupported = Ref{VkBool32}()
    @check vkGetPhysicalDeviceSurfaceSupportKHR(physical_device, queue_family_index, surface, pSupported, fptr)
    from_vk(Bool, pSupported[])
end

"""
    get_physical_device_surface_capabilities_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilitiesKHR.html)

"""
function get_physical_device_surface_capabilities_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilitiesKHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilitiesKHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device, surface, pSurfaceCapabilities, fptr)
    from_vk(SurfaceCapabilitiesKHR, pSurfaceCapabilities[])
end

"""
    get_physical_device_surface_formats_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceFormatsKHR.html)

"""
function get_physical_device_surface_formats_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormatKHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, C_NULL, fptr)
            pSurfaceFormats = Vector{VkSurfaceFormatKHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device, surface, pSurfaceFormatCount, pSurfaceFormats, fptr)
        end
    from_vk.(SurfaceFormatKHR, pSurfaceFormats)
end

"""
    get_physical_device_surface_present_modes_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}

Extension: VK\\_KHR\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModesKHR.html)

"""
function get_physical_device_surface_present_modes_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, C_NULL, fptr)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device, surface, pPresentModeCount, pPresentModes, fptr)
        end
    pPresentModes
end

"""
    create_swapchain_khr(device, create_info::_SwapchainCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_NATIVE_WINDOW_IN_USE_KHR`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `device`
- `create_info::_SwapchainCreateInfoKHR` (externsync)
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSwapchainKHR.html)

"""
function create_swapchain_khr(device, create_info::_SwapchainCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SwapchainKHR, VulkanError}
    pSwapchain = Ref{VkSwapchainKHR}()
    @check vkCreateSwapchainKHR(device, create_info, allocator, pSwapchain, fptr_create)
    SwapchainKHR(pSwapchain[], (x->destroy_swapchain_khr(device, x, fptr_destroy; allocator)), getproperty(create_info, :surface))
end

"""
    destroy_swapchain_khr(device, swapchain, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_swapchain

Arguments:
- `device`
- `swapchain` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySwapchainKHR.html)

"""
destroy_swapchain_khr(device, swapchain, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySwapchainKHR(device, swapchain, allocator, fptr)

"""
    get_swapchain_images_khr(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Vector{Image}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `swapchain`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainImagesKHR.html)

"""
function get_swapchain_images_khr(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Vector{Image}, VulkanError}
    pSwapchainImageCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, C_NULL, fptr)
            pSwapchainImages = Vector{VkImage}(undef, pSwapchainImageCount[])
            @check vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages, fptr)
        end
    Image.(pSwapchainImages, identity, device)
end

"""
    acquire_next_image_khr(device, swapchain, timeout::Integer, fptr::FunctionPtr; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
  - `NOT_READY`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `swapchain` (externsync)
- `timeout::Integer`
- `fptr::FunctionPtr`
- `semaphore`: defaults to `C_NULL` (externsync)
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireNextImageKHR.html)

"""
function acquire_next_image_khr(device, swapchain, timeout::Integer, fptr::FunctionPtr; semaphore = C_NULL, fence = C_NULL)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex, fptr)
    (pImageIndex[], _return_code)
end

"""
    queue_present_khr(queue, present_info::_PresentInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `queue` (externsync)
- `present_info::_PresentInfoKHR` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueuePresentKHR.html)

"""
queue_present_khr(queue, present_info::_PresentInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueuePresentKHR(queue, present_info, fptr))

"""
    create_win_32_surface_khr(instance, create_info::_Win32SurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_KHR\\_win32\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_Win32SurfaceCreateInfoKHR`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateWin32SurfaceKHR.html)

"""
function create_win_32_surface_khr(instance, create_info::_Win32SurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateWin32SurfaceKHR(instance, create_info, allocator, pSurface, fptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fptr_destroy; allocator)), instance)
end

"""
    get_physical_device_win_32_presentation_support_khr(physical_device, queue_family_index::Integer, fptr::FunctionPtr)::Bool

Extension: VK\\_KHR\\_win32\\_surface

Arguments:
- `physical_device`
- `queue_family_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceWin32PresentationSupportKHR.html)

"""
get_physical_device_win_32_presentation_support_khr(physical_device, queue_family_index::Integer, fptr::FunctionPtr)::Bool = from_vk(Bool, vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device, queue_family_index, fptr))

"""
    create_debug_report_callback_ext(instance, create_info::_DebugReportCallbackCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}

Extension: VK\\_EXT\\_debug\\_report

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `instance`
- `create_info::_DebugReportCallbackCreateInfoEXT`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDebugReportCallbackEXT.html)

"""
function create_debug_report_callback_ext(instance, create_info::_DebugReportCallbackCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugReportCallbackEXT, VulkanError}
    pCallback = Ref{VkDebugReportCallbackEXT}()
    @check vkCreateDebugReportCallbackEXT(instance, create_info, allocator, pCallback, fptr_create)
    DebugReportCallbackEXT(pCallback[], (x->destroy_debug_report_callback_ext(instance, x, fptr_destroy; allocator)), instance)
end

"""
    destroy_debug_report_callback_ext(instance, callback, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_debug\\_report

Arguments:
- `instance`
- `callback` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDebugReportCallbackEXT.html)

"""
destroy_debug_report_callback_ext(instance, callback, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDebugReportCallbackEXT(instance, callback, allocator, fptr)

"""
    debug_report_message_ext(instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_report

Arguments:
- `instance`
- `flags::DebugReportFlagEXT`
- `object_type::DebugReportObjectTypeEXT`
- `object::Integer`
- `location::Integer`
- `message_code::Integer`
- `layer_prefix::AbstractString`
- `message::AbstractString`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugReportMessageEXT.html)

"""
debug_report_message_ext(instance, flags::DebugReportFlagEXT, object_type::DebugReportObjectTypeEXT, object::Integer, location::Integer, message_code::Integer, layer_prefix::AbstractString, message::AbstractString, fptr::FunctionPtr)::Cvoid = vkDebugReportMessageEXT(instance, flags, object_type, object, location, message_code, layer_prefix, message, fptr)

"""
    debug_marker_set_object_name_ext(device, name_info::_DebugMarkerObjectNameInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_marker

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `name_info::_DebugMarkerObjectNameInfoEXT` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugMarkerSetObjectNameEXT.html)

"""
debug_marker_set_object_name_ext(device, name_info::_DebugMarkerObjectNameInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectNameEXT(device, name_info, fptr))

"""
    debug_marker_set_object_tag_ext(device, tag_info::_DebugMarkerObjectTagInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_marker

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `tag_info::_DebugMarkerObjectTagInfoEXT` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDebugMarkerSetObjectTagEXT.html)

"""
debug_marker_set_object_tag_ext(device, tag_info::_DebugMarkerObjectTagInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDebugMarkerSetObjectTagEXT(device, tag_info, fptr))

"""
    cmd_debug_marker_begin_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)
- `marker_info::_DebugMarkerMarkerInfoEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerBeginEXT.html)

"""
cmd_debug_marker_begin_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT, fptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerBeginEXT(command_buffer, marker_info, fptr)

"""
    cmd_debug_marker_end_ext(command_buffer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerEndEXT.html)

"""
cmd_debug_marker_end_ext(command_buffer, fptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerEndEXT(command_buffer, fptr)

"""
    cmd_debug_marker_insert_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_marker

Arguments:
- `command_buffer` (externsync)
- `marker_info::_DebugMarkerMarkerInfoEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDebugMarkerInsertEXT.html)

"""
cmd_debug_marker_insert_ext(command_buffer, marker_info::_DebugMarkerMarkerInfoEXT, fptr::FunctionPtr)::Cvoid = vkCmdDebugMarkerInsertEXT(command_buffer, marker_info, fptr)

"""
    get_physical_device_external_image_format_properties_nv(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fptr::FunctionPtr; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}

Extension: VK\\_NV\\_external\\_memory\\_capabilities

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `format::Format`
- `type::ImageType`
- `tiling::ImageTiling`
- `usage::ImageUsageFlag`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`
- `external_handle_type`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalImageFormatPropertiesNV.html)

"""
function get_physical_device_external_image_format_properties_nv(physical_device, format::Format, type::ImageType, tiling::ImageTiling, usage::ImageUsageFlag, fptr::FunctionPtr; flags = 0, external_handle_type = 0)::ResultTypes.Result{ExternalImageFormatPropertiesNV, VulkanError}
    pExternalImageFormatProperties = Ref{VkExternalImageFormatPropertiesNV}()
    @check vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physical_device, format, type, tiling, usage, flags, external_handle_type, pExternalImageFormatProperties, fptr)
    from_vk(ExternalImageFormatPropertiesNV, pExternalImageFormatProperties[])
end

"""
    get_memory_win_32_handle_nv(device, memory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `memory`
- `handle_type::ExternalMemoryHandleTypeFlagNV`
- `handle::HANDLE`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandleNV.html)

"""
get_memory_win_32_handle_nv(device, memory, handle_type::ExternalMemoryHandleTypeFlagNV, handle::vk.HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleNV(device, memory, handle_type, to_vk(Ptr{vk.HANDLE}, handle), fptr))

"""
    cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `is_preprocessed::Bool`
- `generated_commands_info::_GeneratedCommandsInfoNV`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdExecuteGeneratedCommandsNV.html)

"""
cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::_GeneratedCommandsInfoNV, fptr::FunctionPtr)::Cvoid = vkCmdExecuteGeneratedCommandsNV(command_buffer, is_preprocessed, generated_commands_info, fptr)

"""
    cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::_GeneratedCommandsInfoNV, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `generated_commands_info::_GeneratedCommandsInfoNV`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPreprocessGeneratedCommandsNV.html)

"""
cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::_GeneratedCommandsInfoNV, fptr::FunctionPtr)::Cvoid = vkCmdPreprocessGeneratedCommandsNV(command_buffer, generated_commands_info, fptr)

"""
    cmd_bind_pipeline_shader_group_nv(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, group_index::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `pipeline`
- `group_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindPipelineShaderGroupNV.html)

"""
cmd_bind_pipeline_shader_group_nv(command_buffer, pipeline_bind_point::PipelineBindPoint, pipeline, group_index::Integer, fptr::FunctionPtr)::Cvoid = vkCmdBindPipelineShaderGroupNV(command_buffer, pipeline_bind_point, pipeline, group_index, fptr)

"""
    get_generated_commands_memory_requirements_nv(device, info::_GeneratedCommandsMemoryRequirementsInfoNV, fptr::FunctionPtr)::MemoryRequirements2

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `device`
- `info::_GeneratedCommandsMemoryRequirementsInfoNV`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetGeneratedCommandsMemoryRequirementsNV.html)

"""
function get_generated_commands_memory_requirements_nv(device, info::_GeneratedCommandsMemoryRequirementsInfoNV, fptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetGeneratedCommandsMemoryRequirementsNV(device, info, pMemoryRequirements, fptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    create_indirect_commands_layout_nv(device, create_info::_IndirectCommandsLayoutCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}

Extension: VK\\_NV\\_device\\_generated\\_commands

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_IndirectCommandsLayoutCreateInfoNV`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateIndirectCommandsLayoutNV.html)

"""
function create_indirect_commands_layout_nv(device, create_info::_IndirectCommandsLayoutCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{IndirectCommandsLayoutNV, VulkanError}
    pIndirectCommandsLayout = Ref{VkIndirectCommandsLayoutNV}()
    @check vkCreateIndirectCommandsLayoutNV(device, create_info, allocator, pIndirectCommandsLayout, fptr_create)
    IndirectCommandsLayoutNV(pIndirectCommandsLayout[], (x->destroy_indirect_commands_layout_nv(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_indirect_commands_layout_nv(device, indirect_commands_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_NV\\_device\\_generated\\_commands

Arguments:
- `device`
- `indirect_commands_layout` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyIndirectCommandsLayoutNV.html)

"""
destroy_indirect_commands_layout_nv(device, indirect_commands_layout, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyIndirectCommandsLayoutNV(device, indirect_commands_layout, allocator, fptr)

"""
    get_physical_device_features_2(physical_device, fptr::FunctionPtr)::_PhysicalDeviceFeatures2

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFeatures2.html)

"""
function get_physical_device_features_2(physical_device, fptr::FunctionPtr)::_PhysicalDeviceFeatures2
    pFeatures = Ref{VkPhysicalDeviceFeatures2}()
    vkGetPhysicalDeviceFeatures2(physical_device, pFeatures, fptr)
    from_vk(_PhysicalDeviceFeatures2, pFeatures[])
end

"""
    get_physical_device_properties_2(physical_device, fptr::FunctionPtr)::PhysicalDeviceProperties2

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceProperties2.html)

"""
function get_physical_device_properties_2(physical_device, fptr::FunctionPtr)::PhysicalDeviceProperties2
    pProperties = Ref{VkPhysicalDeviceProperties2}()
    vkGetPhysicalDeviceProperties2(physical_device, pProperties, fptr)
    from_vk(PhysicalDeviceProperties2, pProperties[])
end

"""
    get_physical_device_format_properties_2(physical_device, format::Format, fptr::FunctionPtr)::FormatProperties2

Arguments:
- `physical_device`
- `format::Format`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFormatProperties2.html)

"""
function get_physical_device_format_properties_2(physical_device, format::Format, fptr::FunctionPtr)::FormatProperties2
    pFormatProperties = Ref{VkFormatProperties2}()
    vkGetPhysicalDeviceFormatProperties2(physical_device, format, pFormatProperties, fptr)
    from_vk(FormatProperties2, pFormatProperties[])
end

"""
    get_physical_device_image_format_properties_2(physical_device, image_format_info::_PhysicalDeviceImageFormatInfo2, fptr::FunctionPtr)::ResultTypes.Result{ImageFormatProperties2, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_FORMAT_NOT_SUPPORTED`

Arguments:
- `physical_device`
- `image_format_info::_PhysicalDeviceImageFormatInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceImageFormatProperties2.html)

"""
function get_physical_device_image_format_properties_2(physical_device, image_format_info::_PhysicalDeviceImageFormatInfo2, fptr::FunctionPtr)::ResultTypes.Result{ImageFormatProperties2, VulkanError}
    pImageFormatProperties = Ref{VkImageFormatProperties2}()
    @check vkGetPhysicalDeviceImageFormatProperties2(physical_device, image_format_info, pImageFormatProperties, fptr)
    from_vk(ImageFormatProperties2, pImageFormatProperties[])
end

"""
    get_physical_device_queue_family_properties_2(physical_device, fptr::FunctionPtr)::Vector{QueueFamilyProperties2}

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyProperties2.html)

"""
function get_physical_device_queue_family_properties_2(physical_device, fptr::FunctionPtr)::Vector{QueueFamilyProperties2}
    pQueueFamilyPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, C_NULL, fptr)
    pQueueFamilyProperties = Vector{VkQueueFamilyProperties2}(undef, pQueueFamilyPropertyCount[])
    vkGetPhysicalDeviceQueueFamilyProperties2(physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties, fptr)
    from_vk.(QueueFamilyProperties2, pQueueFamilyProperties)
end

"""
    get_physical_device_memory_properties_2(physical_device, fptr::FunctionPtr)::PhysicalDeviceMemoryProperties2

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMemoryProperties2.html)

"""
function get_physical_device_memory_properties_2(physical_device, fptr::FunctionPtr)::PhysicalDeviceMemoryProperties2
    pMemoryProperties = Ref{VkPhysicalDeviceMemoryProperties2}()
    vkGetPhysicalDeviceMemoryProperties2(physical_device, pMemoryProperties, fptr)
    from_vk(PhysicalDeviceMemoryProperties2, pMemoryProperties[])
end

"""
    get_physical_device_sparse_image_format_properties_2(physical_device, format_info::_PhysicalDeviceSparseImageFormatInfo2, fptr::FunctionPtr)::Vector{SparseImageFormatProperties2}

Arguments:
- `physical_device`
- `format_info::_PhysicalDeviceSparseImageFormatInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSparseImageFormatProperties2.html)

"""
function get_physical_device_sparse_image_format_properties_2(physical_device, format_info::_PhysicalDeviceSparseImageFormatInfo2, fptr::FunctionPtr)::Vector{SparseImageFormatProperties2}
    pPropertyCount = Ref{UInt32}()
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, C_NULL, fptr)
    pProperties = Vector{VkSparseImageFormatProperties2}(undef, pPropertyCount[])
    vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device, format_info, pPropertyCount, pProperties, fptr)
    from_vk.(SparseImageFormatProperties2, pProperties)
end

"""
    cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray{_WriteDescriptorSet}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_push\\_descriptor

Arguments:
- `command_buffer` (externsync)
- `pipeline_bind_point::PipelineBindPoint`
- `layout`
- `set::Integer`
- `descriptor_writes::AbstractArray{_WriteDescriptorSet}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushDescriptorSetKHR.html)

"""
cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray{_WriteDescriptorSet}, fptr::FunctionPtr)::Cvoid = vkCmdPushDescriptorSetKHR(command_buffer, pipeline_bind_point, layout, set, pointer_length(descriptor_writes), descriptor_writes, fptr)

"""
    trim_command_pool(device, command_pool, fptr::FunctionPtr; flags = 0)::Cvoid

Arguments:
- `device`
- `command_pool` (externsync)
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkTrimCommandPool.html)

"""
trim_command_pool(device, command_pool, fptr::FunctionPtr; flags = 0)::Cvoid = vkTrimCommandPool(device, command_pool, flags, fptr)

"""
    get_physical_device_external_buffer_properties(physical_device, external_buffer_info::_PhysicalDeviceExternalBufferInfo, fptr::FunctionPtr)::ExternalBufferProperties

Arguments:
- `physical_device`
- `external_buffer_info::_PhysicalDeviceExternalBufferInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalBufferProperties.html)

"""
function get_physical_device_external_buffer_properties(physical_device, external_buffer_info::_PhysicalDeviceExternalBufferInfo, fptr::FunctionPtr)::ExternalBufferProperties
    pExternalBufferProperties = Ref{VkExternalBufferProperties}()
    vkGetPhysicalDeviceExternalBufferProperties(physical_device, external_buffer_info, pExternalBufferProperties, fptr)
    from_vk(ExternalBufferProperties, pExternalBufferProperties[])
end

"""
    get_memory_win_32_handle_khr(device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR`
- `handle::HANDLE`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandleKHR.html)

"""
get_memory_win_32_handle_khr(device, get_win_32_handle_info::_MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetMemoryWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle), fptr))

"""
    get_memory_win_32_handle_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, handle::HANDLE, fptr::FunctionPtr)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `handle::HANDLE`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryWin32HandlePropertiesKHR.html)

"""
function get_memory_win_32_handle_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, handle::vk.HANDLE, fptr::FunctionPtr)::ResultTypes.Result{MemoryWin32HandlePropertiesKHR, VulkanError}
    pMemoryWin32HandleProperties = Ref{VkMemoryWin32HandlePropertiesKHR}()
    @check vkGetMemoryWin32HandlePropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), handle, pMemoryWin32HandleProperties, fptr)
    from_vk(MemoryWin32HandlePropertiesKHR, pMemoryWin32HandleProperties[])
end

"""
    get_memory_fd_khr(device, get_fd_info::_MemoryGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_MemoryGetFdInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryFdKHR.html)

"""
function get_memory_fd_khr(device, get_fd_info::_MemoryGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetMemoryFdKHR(device, get_fd_info, pFd, fptr)
    pFd[]
end

"""
    get_memory_fd_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer, fptr::FunctionPtr)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}

Extension: VK\\_KHR\\_external\\_memory\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `fd::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryFdPropertiesKHR.html)

"""
function get_memory_fd_properties_khr(device, handle_type::ExternalMemoryHandleTypeFlag, fd::Integer, fptr::FunctionPtr)::ResultTypes.Result{MemoryFdPropertiesKHR, VulkanError}
    pMemoryFdProperties = Ref{VkMemoryFdPropertiesKHR}()
    @check vkGetMemoryFdPropertiesKHR(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), fd, pMemoryFdProperties, fptr)
    from_vk(MemoryFdPropertiesKHR, pMemoryFdProperties[])
end

"""
    get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo, fptr::FunctionPtr)::ExternalSemaphoreProperties

Arguments:
- `physical_device`
- `external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalSemaphoreProperties.html)

"""
function get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::_PhysicalDeviceExternalSemaphoreInfo, fptr::FunctionPtr)::ExternalSemaphoreProperties
    pExternalSemaphoreProperties = Ref{VkExternalSemaphoreProperties}()
    vkGetPhysicalDeviceExternalSemaphoreProperties(physical_device, external_semaphore_info, pExternalSemaphoreProperties, fptr)
    from_vk(ExternalSemaphoreProperties, pExternalSemaphoreProperties[])
end

"""
    get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR`
- `handle::HANDLE`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreWin32HandleKHR.html)

"""
get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::_SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSemaphoreWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle), fptr))

"""
    import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportSemaphoreWin32HandleKHR.html)

"""
import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::_ImportSemaphoreWin32HandleInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreWin32HandleKHR(device, import_semaphore_win_32_handle_info, fptr))

"""
    get_semaphore_fd_khr(device, get_fd_info::_SemaphoreGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_SemaphoreGetFdInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreFdKHR.html)

"""
function get_semaphore_fd_khr(device, get_fd_info::_SemaphoreGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetSemaphoreFdKHR(device, get_fd_info, pFd, fptr)
    pFd[]
end

"""
    import_semaphore_fd_khr(device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_semaphore\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportSemaphoreFdKHR.html)

"""
import_semaphore_fd_khr(device, import_semaphore_fd_info::_ImportSemaphoreFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportSemaphoreFdKHR(device, import_semaphore_fd_info, fptr))

"""
    get_physical_device_external_fence_properties(physical_device, external_fence_info::_PhysicalDeviceExternalFenceInfo, fptr::FunctionPtr)::ExternalFenceProperties

Arguments:
- `physical_device`
- `external_fence_info::_PhysicalDeviceExternalFenceInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceExternalFenceProperties.html)

"""
function get_physical_device_external_fence_properties(physical_device, external_fence_info::_PhysicalDeviceExternalFenceInfo, fptr::FunctionPtr)::ExternalFenceProperties
    pExternalFenceProperties = Ref{VkExternalFenceProperties}()
    vkGetPhysicalDeviceExternalFenceProperties(physical_device, external_fence_info, pExternalFenceProperties, fptr)
    from_vk(ExternalFenceProperties, pExternalFenceProperties[])
end

"""
    get_fence_win_32_handle_khr(device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_win32

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_win_32_handle_info::_FenceGetWin32HandleInfoKHR`
- `handle::HANDLE`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceWin32HandleKHR.html)

"""
get_fence_win_32_handle_khr(device, get_win_32_handle_info::_FenceGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetFenceWin32HandleKHR(device, get_win_32_handle_info, to_vk(Ptr{vk.HANDLE}, handle), fptr))

"""
    import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_win32

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportFenceWin32HandleKHR.html)

"""
import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::_ImportFenceWin32HandleInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceWin32HandleKHR(device, import_fence_win_32_handle_info, fptr))

"""
    get_fence_fd_khr(device, get_fd_info::_FenceGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_fd

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `get_fd_info::_FenceGetFdInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetFenceFdKHR.html)

"""
function get_fence_fd_khr(device, get_fd_info::_FenceGetFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Int, VulkanError}
    pFd = Ref{Int}()
    @check vkGetFenceFdKHR(device, get_fd_info, pFd, fptr)
    pFd[]
end

"""
    import_fence_fd_khr(device, import_fence_fd_info::_ImportFenceFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_external\\_fence\\_fd

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `import_fence_fd_info::_ImportFenceFdInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkImportFenceFdKHR.html)

"""
import_fence_fd_khr(device, import_fence_fd_info::_ImportFenceFdInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkImportFenceFdKHR(device, import_fence_fd_info, fptr))

"""
    release_display_ext(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_direct\\_mode\\_display

Return codes:

Arguments:
- `physical_device`
- `display`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseDisplayEXT.html)

"""
release_display_ext(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseDisplayEXT(physical_device, display, fptr))

"""
    acquire_winrt_display_nv(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_acquire\\_winrt\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `display`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireWinrtDisplayNV.html)

"""
acquire_winrt_display_nv(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireWinrtDisplayNV(physical_device, display, fptr))

"""
    get_winrt_display_nv(physical_device, device_relative_id::Integer, fptr::FunctionPtr)::ResultTypes.Result{DisplayKHR, VulkanError}

Extension: VK\\_NV\\_acquire\\_winrt\\_display

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `device_relative_id::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetWinrtDisplayNV.html)

"""
function get_winrt_display_nv(physical_device, device_relative_id::Integer, fptr::FunctionPtr)::ResultTypes.Result{DisplayKHR, VulkanError}
    pDisplay = Ref{VkDisplayKHR}()
    @check vkGetWinrtDisplayNV(physical_device, device_relative_id, pDisplay, fptr)
    DisplayKHR(pDisplay[], identity, physical_device)
end

"""
    display_power_control_ext(device, display, display_power_info::_DisplayPowerInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `display`
- `display_power_info::_DisplayPowerInfoEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDisplayPowerControlEXT.html)

"""
display_power_control_ext(device, display, display_power_info::_DisplayPowerInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDisplayPowerControlEXT(device, display, display_power_info, fptr))

"""
    register_device_event_ext(device, device_event_info::_DeviceEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `device_event_info::_DeviceEventInfoEXT`
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkRegisterDeviceEventEXT.html)

"""
function register_device_event_ext(device, device_event_info::_DeviceEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDeviceEventEXT(device, device_event_info, allocator, pFence, fptr)
    Fence(pFence[], (x->destroy_fence(device, x, fptr_destroy; allocator)), device)
end

"""
    register_display_event_ext(device, display, display_event_info::_DisplayEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `display`
- `display_event_info::_DisplayEventInfoEXT`
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkRegisterDisplayEventEXT.html)

"""
function register_display_event_ext(device, display, display_event_info::_DisplayEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{Fence, VulkanError}
    pFence = Ref{VkFence}()
    @check vkRegisterDisplayEventEXT(device, display, display_event_info, allocator, pFence, fptr)
    Fence(pFence[], (x->destroy_fence(device, x, fptr_destroy; allocator)), device)
end

"""
    get_swapchain_counter_ext(device, swapchain, counter::SurfaceCounterFlagEXT, fptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}

Extension: VK\\_EXT\\_display\\_control

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`

Arguments:
- `device`
- `swapchain`
- `counter::SurfaceCounterFlagEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainCounterEXT.html)

"""
function get_swapchain_counter_ext(device, swapchain, counter::SurfaceCounterFlagEXT, fptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}
    pCounterValue = Ref{UInt64}()
    @check vkGetSwapchainCounterEXT(device, swapchain, VkSurfaceCounterFlagBitsEXT(counter.val), pCounterValue, fptr)
    pCounterValue[]
end

"""
    get_physical_device_surface_capabilities_2_ext(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}

Extension: VK\\_EXT\\_display\\_surface\\_counter

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2EXT.html)

"""
function get_physical_device_surface_capabilities_2_ext(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2EXT, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2EXT}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2EXT(physical_device, surface, pSurfaceCapabilities, fptr)
    from_vk(SurfaceCapabilities2EXT, pSurfaceCapabilities[])
end

"""
    enumerate_physical_device_groups(instance, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `instance`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDeviceGroups.html)

"""
function enumerate_physical_device_groups(instance, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceGroupProperties}, VulkanError}
    pPhysicalDeviceGroupCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, C_NULL, fptr)
            pPhysicalDeviceGroupProperties = Vector{VkPhysicalDeviceGroupProperties}(undef, pPhysicalDeviceGroupCount[])
            @check vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties, fptr)
        end
    from_vk.(PhysicalDeviceGroupProperties, pPhysicalDeviceGroupProperties)
end

"""
    get_device_group_peer_memory_features(device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer, fptr::FunctionPtr)::PeerMemoryFeatureFlag

Arguments:
- `device`
- `heap_index::Integer`
- `local_device_index::Integer`
- `remote_device_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupPeerMemoryFeatures.html)

"""
function get_device_group_peer_memory_features(device, heap_index::Integer, local_device_index::Integer, remote_device_index::Integer, fptr::FunctionPtr)::PeerMemoryFeatureFlag
    pPeerMemoryFeatures = Ref{VkPeerMemoryFeatureFlags}()
    vkGetDeviceGroupPeerMemoryFeatures(device, heap_index, local_device_index, remote_device_index, pPeerMemoryFeatures, fptr)
    pPeerMemoryFeatures[]
end

"""
    bind_buffer_memory_2(device, bind_infos::AbstractArray{_BindBufferMemoryInfo}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindBufferMemoryInfo}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindBufferMemory2.html)

"""
bind_buffer_memory_2(device, bind_infos::AbstractArray{_BindBufferMemoryInfo}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindBufferMemory2(device, pointer_length(bind_infos), bind_infos, fptr))

"""
    bind_image_memory_2(device, bind_infos::AbstractArray{_BindImageMemoryInfo}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindImageMemoryInfo}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindImageMemory2.html)

"""
bind_image_memory_2(device, bind_infos::AbstractArray{_BindImageMemoryInfo}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindImageMemory2(device, pointer_length(bind_infos), bind_infos, fptr))

"""
    cmd_set_device_mask(command_buffer, device_mask::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `device_mask::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDeviceMask.html)

"""
cmd_set_device_mask(command_buffer, device_mask::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetDeviceMask(command_buffer, device_mask, fptr)

"""
    get_device_group_present_capabilities_khr(device, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupPresentCapabilitiesKHR.html)

"""
function get_device_group_present_capabilities_khr(device, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentCapabilitiesKHR, VulkanError}
    pDeviceGroupPresentCapabilities = Ref{VkDeviceGroupPresentCapabilitiesKHR}()
    @check vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities, fptr)
    from_vk(DeviceGroupPresentCapabilitiesKHR, pDeviceGroupPresentCapabilities[])
end

"""
    get_device_group_surface_present_modes_khr(device, surface, modes::DeviceGroupPresentModeFlagKHR, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `surface` (externsync)
- `modes::DeviceGroupPresentModeFlagKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupSurfacePresentModesKHR.html)

"""
function get_device_group_surface_present_modes_khr(device, surface, modes::DeviceGroupPresentModeFlagKHR, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes, fptr)
    pModes[]
end

"""
    acquire_next_image_2_khr(device, acquire_info::_AcquireNextImageInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
  - `NOT_READY`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `acquire_info::_AcquireNextImageInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireNextImage2KHR.html)

"""
function acquire_next_image_2_khr(device, acquire_info::_AcquireNextImageInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt32, Result}, VulkanError}
    pImageIndex = Ref{UInt32}()
    @check vkAcquireNextImage2KHR(device, acquire_info, pImageIndex, fptr)
    (pImageIndex[], _return_code)
end

"""
    cmd_dispatch_base(command_buffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `base_group_x::Integer`
- `base_group_y::Integer`
- `base_group_z::Integer`
- `group_count_x::Integer`
- `group_count_y::Integer`
- `group_count_z::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDispatchBase.html)

"""
cmd_dispatch_base(command_buffer, base_group_x::Integer, base_group_y::Integer, base_group_z::Integer, group_count_x::Integer, group_count_y::Integer, group_count_z::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDispatchBase(command_buffer, base_group_x, base_group_y, base_group_z, group_count_x, group_count_y, group_count_z, fptr)

"""
    get_physical_device_present_rectangles_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}

Extension: VK\\_KHR\\_swapchain

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `surface` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDevicePresentRectanglesKHR.html)

"""
function get_physical_device_present_rectangles_khr(physical_device, surface, fptr::FunctionPtr)::ResultTypes.Result{Vector{_Rect2D}, VulkanError}
    pRectCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, C_NULL, fptr)
            pRects = Vector{VkRect2D}(undef, pRectCount[])
            @check vkGetPhysicalDevicePresentRectanglesKHR(physical_device, surface, pRectCount, pRects, fptr)
        end
    from_vk.(_Rect2D, pRects)
end

"""
    create_descriptor_update_template(device, create_info::_DescriptorUpdateTemplateCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_DescriptorUpdateTemplateCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDescriptorUpdateTemplate.html)

"""
function create_descriptor_update_template(device, create_info::_DescriptorUpdateTemplateCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DescriptorUpdateTemplate, VulkanError}
    pDescriptorUpdateTemplate = Ref{VkDescriptorUpdateTemplate}()
    @check vkCreateDescriptorUpdateTemplate(device, create_info, allocator, pDescriptorUpdateTemplate, fptr_create)
    DescriptorUpdateTemplate(pDescriptorUpdateTemplate[], (x->destroy_descriptor_update_template(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_descriptor_update_template(device, descriptor_update_template, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `descriptor_update_template` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDescriptorUpdateTemplate.html)

"""
destroy_descriptor_update_template(device, descriptor_update_template, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDescriptorUpdateTemplate(device, descriptor_update_template, allocator, fptr)

"""
    update_descriptor_set_with_template(device, descriptor_set, descriptor_update_template, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid

Arguments:
- `device`
- `descriptor_set` (externsync)
- `descriptor_update_template`
- `data::Ptr{Cvoid}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUpdateDescriptorSetWithTemplate.html)

"""
update_descriptor_set_with_template(device, descriptor_set, descriptor_update_template, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid = vkUpdateDescriptorSetWithTemplate(device, descriptor_set, descriptor_update_template, data, fptr)

"""
    cmd_push_descriptor_set_with_template_khr(command_buffer, descriptor_update_template, layout, set::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_push\\_descriptor

Arguments:
- `command_buffer` (externsync)
- `descriptor_update_template`
- `layout`
- `set::Integer`
- `data::Ptr{Cvoid}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPushDescriptorSetWithTemplateKHR.html)

"""
cmd_push_descriptor_set_with_template_khr(command_buffer, descriptor_update_template, layout, set::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid = vkCmdPushDescriptorSetWithTemplateKHR(command_buffer, descriptor_update_template, layout, set, data, fptr)

"""
    set_hdr_metadata_ext(device, swapchains::AbstractArray{SwapchainKHR}, metadata::AbstractArray{_HdrMetadataEXT}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_hdr\\_metadata

Arguments:
- `device`
- `swapchains::AbstractArray{SwapchainKHR}`
- `metadata::AbstractArray{_HdrMetadataEXT}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetHdrMetadataEXT.html)

"""
set_hdr_metadata_ext(device, swapchains::AbstractArray, metadata::AbstractArray{_HdrMetadataEXT}, fptr::FunctionPtr)::Cvoid = vkSetHdrMetadataEXT(device, pointer_length(swapchains), swapchains, metadata, fptr)

"""
    get_swapchain_status_khr(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_shared\\_presentable\\_image

Return codes:
- Success:
  - `SUCCESS`
  - `SUBOPTIMAL_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`
  - `ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT`

Arguments:
- `device`
- `swapchain` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSwapchainStatusKHR.html)

"""
get_swapchain_status_khr(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetSwapchainStatusKHR(device, swapchain, fptr))

"""
    get_refresh_cycle_duration_google(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}

Extension: VK\\_GOOGLE\\_display\\_timing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRefreshCycleDurationGOOGLE.html)

"""
function get_refresh_cycle_duration_google(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{RefreshCycleDurationGOOGLE, VulkanError}
    pDisplayTimingProperties = Ref{VkRefreshCycleDurationGOOGLE}()
    @check vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties, fptr)
    from_vk(RefreshCycleDurationGOOGLE, pDisplayTimingProperties[])
end

"""
    get_past_presentation_timing_google(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}

Extension: VK\\_GOOGLE\\_display\\_timing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_DEVICE_LOST`
  - `ERROR_OUT_OF_DATE_KHR`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPastPresentationTimingGOOGLE.html)

"""
function get_past_presentation_timing_google(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Vector{PastPresentationTimingGOOGLE}, VulkanError}
    pPresentationTimingCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, C_NULL, fptr)
            pPresentationTimings = Vector{VkPastPresentationTimingGOOGLE}(undef, pPresentationTimingCount[])
            @check vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings, fptr)
        end
    from_vk.(PastPresentationTimingGOOGLE, pPresentationTimings)
end

"""
    cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray{_ViewportWScalingNV}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_clip\\_space\\_w\\_scaling

Arguments:
- `command_buffer` (externsync)
- `viewport_w_scalings::AbstractArray{_ViewportWScalingNV}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportWScalingNV.html)

"""
cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray{_ViewportWScalingNV}, fptr::FunctionPtr)::Cvoid = vkCmdSetViewportWScalingNV(command_buffer, 0, pointer_length(viewport_w_scalings), viewport_w_scalings, fptr)

"""
    cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_discard\\_rectangles

Arguments:
- `command_buffer` (externsync)
- `discard_rectangles::AbstractArray{_Rect2D}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDiscardRectangleEXT.html)

"""
cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid = vkCmdSetDiscardRectangleEXT(command_buffer, 0, pointer_length(discard_rectangles), discard_rectangles, fptr)

"""
    cmd_set_sample_locations_ext(command_buffer, sample_locations_info::_SampleLocationsInfoEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_sample\\_locations

Arguments:
- `command_buffer` (externsync)
- `sample_locations_info::_SampleLocationsInfoEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetSampleLocationsEXT.html)

"""
cmd_set_sample_locations_ext(command_buffer, sample_locations_info::_SampleLocationsInfoEXT, fptr::FunctionPtr)::Cvoid = vkCmdSetSampleLocationsEXT(command_buffer, sample_locations_info, fptr)

"""
    get_physical_device_multisample_properties_ext(physical_device, samples::SampleCountFlag, fptr::FunctionPtr)::MultisamplePropertiesEXT

Extension: VK\\_EXT\\_sample\\_locations

Arguments:
- `physical_device`
- `samples::SampleCountFlag`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceMultisamplePropertiesEXT.html)

"""
function get_physical_device_multisample_properties_ext(physical_device, samples::SampleCountFlag, fptr::FunctionPtr)::MultisamplePropertiesEXT
    pMultisampleProperties = Ref{VkMultisamplePropertiesEXT}()
    vkGetPhysicalDeviceMultisamplePropertiesEXT(physical_device, VkSampleCountFlagBits(samples.val), pMultisampleProperties, fptr)
    from_vk(MultisamplePropertiesEXT, pMultisampleProperties[])
end

"""
    get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}

Extension: VK\\_KHR\\_get\\_surface\\_capabilities2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceCapabilities2KHR.html)

"""
function get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{SurfaceCapabilities2KHR, VulkanError}
    pSurfaceCapabilities = Ref{VkSurfaceCapabilities2KHR}()
    @check vkGetPhysicalDeviceSurfaceCapabilities2KHR(physical_device, surface_info, pSurfaceCapabilities, fptr)
    from_vk(SurfaceCapabilities2KHR, pSurfaceCapabilities[])
end

"""
    get_physical_device_surface_formats_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_surface\\_capabilities2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfaceFormats2KHR.html)

"""
function get_physical_device_surface_formats_2_khr(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{SurfaceFormat2KHR}, VulkanError}
    pSurfaceFormatCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, C_NULL, fptr)
            pSurfaceFormats = Vector{VkSurfaceFormat2KHR}(undef, pSurfaceFormatCount[])
            @check vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device, surface_info, pSurfaceFormatCount, pSurfaceFormats, fptr)
        end
    from_vk.(SurfaceFormat2KHR, pSurfaceFormats)
end

"""
    get_physical_device_display_properties_2_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayProperties2KHR.html)

"""
function get_physical_device_display_properties_2_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayProperties2KHR(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayProperties2KHR, pProperties)
end

"""
    get_physical_device_display_plane_properties_2_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceDisplayPlaneProperties2KHR.html)

"""
function get_physical_device_display_plane_properties_2_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayPlaneProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayPlaneProperties2KHR}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayPlaneProperties2KHR, pProperties)
end

"""
    get_display_mode_properties_2_khr(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayModeProperties2KHR.html)

"""
function get_display_mode_properties_2_khr(physical_device, display, fptr::FunctionPtr)::ResultTypes.Result{Vector{DisplayModeProperties2KHR}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkDisplayModeProperties2KHR}(undef, pPropertyCount[])
            @check vkGetDisplayModeProperties2KHR(physical_device, display, pPropertyCount, pProperties, fptr)
        end
    from_vk.(DisplayModeProperties2KHR, pProperties)
end

"""
    get_display_plane_capabilities_2_khr(physical_device, display_plane_info::_DisplayPlaneInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}

Extension: VK\\_KHR\\_get\\_display\\_properties2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `display_plane_info::_DisplayPlaneInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDisplayPlaneCapabilities2KHR.html)

"""
function get_display_plane_capabilities_2_khr(physical_device, display_plane_info::_DisplayPlaneInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{DisplayPlaneCapabilities2KHR, VulkanError}
    pCapabilities = Ref{VkDisplayPlaneCapabilities2KHR}()
    @check vkGetDisplayPlaneCapabilities2KHR(physical_device, display_plane_info, pCapabilities, fptr)
    from_vk(DisplayPlaneCapabilities2KHR, pCapabilities[])
end

"""
    get_buffer_memory_requirements_2(device, info::_BufferMemoryRequirementsInfo2, fptr::FunctionPtr)::MemoryRequirements2

Arguments:
- `device`
- `info::_BufferMemoryRequirementsInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferMemoryRequirements2.html)

"""
function get_buffer_memory_requirements_2(device, info::_BufferMemoryRequirementsInfo2, fptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetBufferMemoryRequirements2(device, info, pMemoryRequirements, fptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    get_image_memory_requirements_2(device, info::_ImageMemoryRequirementsInfo2, fptr::FunctionPtr)::MemoryRequirements2

Arguments:
- `device`
- `info::_ImageMemoryRequirementsInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageMemoryRequirements2.html)

"""
function get_image_memory_requirements_2(device, info::_ImageMemoryRequirementsInfo2, fptr::FunctionPtr)::MemoryRequirements2
    pMemoryRequirements = Ref{VkMemoryRequirements2}()
    vkGetImageMemoryRequirements2(device, info, pMemoryRequirements, fptr)
    from_vk(MemoryRequirements2, pMemoryRequirements[])
end

"""
    get_image_sparse_memory_requirements_2(device, info::_ImageSparseMemoryRequirementsInfo2, fptr::FunctionPtr)::Vector{SparseImageMemoryRequirements2}

Arguments:
- `device`
- `info::_ImageSparseMemoryRequirementsInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageSparseMemoryRequirements2.html)

"""
function get_image_sparse_memory_requirements_2(device, info::_ImageSparseMemoryRequirementsInfo2, fptr::FunctionPtr)::Vector{SparseImageMemoryRequirements2}
    pSparseMemoryRequirementCount = Ref{UInt32}()
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, C_NULL, fptr)
    pSparseMemoryRequirements = Vector{VkSparseImageMemoryRequirements2}(undef, pSparseMemoryRequirementCount[])
    vkGetImageSparseMemoryRequirements2(device, info, pSparseMemoryRequirementCount, pSparseMemoryRequirements, fptr)
    from_vk.(SparseImageMemoryRequirements2, pSparseMemoryRequirements)
end

"""
    create_sampler_ycbcr_conversion(device, create_info::_SamplerYcbcrConversionCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_SamplerYcbcrConversionCreateInfo`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateSamplerYcbcrConversion.html)

"""
function create_sampler_ycbcr_conversion(device, create_info::_SamplerYcbcrConversionCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SamplerYcbcrConversion, VulkanError}
    pYcbcrConversion = Ref{VkSamplerYcbcrConversion}()
    @check vkCreateSamplerYcbcrConversion(device, create_info, allocator, pYcbcrConversion, fptr_create)
    SamplerYcbcrConversion(pYcbcrConversion[], (x->destroy_sampler_ycbcr_conversion(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_sampler_ycbcr_conversion(device, ycbcr_conversion, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Arguments:
- `device`
- `ycbcr_conversion` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroySamplerYcbcrConversion.html)

"""
destroy_sampler_ycbcr_conversion(device, ycbcr_conversion, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroySamplerYcbcrConversion(device, ycbcr_conversion, allocator, fptr)

"""
    get_device_queue_2(device, queue_info::_DeviceQueueInfo2, fptr::FunctionPtr)::Queue

Arguments:
- `device`
- `queue_info::_DeviceQueueInfo2`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceQueue2.html)

"""
function get_device_queue_2(device, queue_info::_DeviceQueueInfo2, fptr::FunctionPtr)::Queue
    pQueue = Ref{VkQueue}()
    vkGetDeviceQueue2(device, queue_info, pQueue, fptr)
    Queue(pQueue[], identity, device)
end

"""
    create_validation_cache_ext(device, create_info::_ValidationCacheCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_ValidationCacheCreateInfoEXT`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateValidationCacheEXT.html)

"""
function create_validation_cache_ext(device, create_info::_ValidationCacheCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{ValidationCacheEXT, VulkanError}
    pValidationCache = Ref{VkValidationCacheEXT}()
    @check vkCreateValidationCacheEXT(device, create_info, allocator, pValidationCache, fptr_create)
    ValidationCacheEXT(pValidationCache[], (x->destroy_validation_cache_ext(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_validation_cache_ext(device, validation_cache, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_validation\\_cache

Arguments:
- `device`
- `validation_cache` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyValidationCacheEXT.html)

"""
destroy_validation_cache_ext(device, validation_cache, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyValidationCacheEXT(device, validation_cache, allocator, fptr)

"""
    get_validation_cache_data_ext(device, validation_cache, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `validation_cache`
- `fptr::FunctionPtr`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetValidationCacheDataEXT.html)

"""
function get_validation_cache_data_ext(device, validation_cache, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pDataSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, C_NULL, fptr)
            pData = Libc.malloc(pDataSize[])
            @check vkGetValidationCacheDataEXT(device, validation_cache, pDataSize, pData, fptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pData)
            end
        end
    (pDataSize[], pData)
end

"""
    merge_validation_caches_ext(device, dst_cache, src_caches::AbstractArray{ValidationCacheEXT}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_validation\\_cache

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `dst_cache` (externsync)
- `src_caches::AbstractArray{ValidationCacheEXT}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkMergeValidationCachesEXT.html)

"""
merge_validation_caches_ext(device, dst_cache, src_caches::AbstractArray, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkMergeValidationCachesEXT(device, dst_cache, pointer_length(src_caches), src_caches, fptr))

"""
    get_descriptor_set_layout_support(device, create_info::_DescriptorSetLayoutCreateInfo, fptr::FunctionPtr)::DescriptorSetLayoutSupport

Arguments:
- `device`
- `create_info::_DescriptorSetLayoutCreateInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDescriptorSetLayoutSupport.html)

"""
function get_descriptor_set_layout_support(device, create_info::_DescriptorSetLayoutCreateInfo, fptr::FunctionPtr)::DescriptorSetLayoutSupport
    pSupport = Ref{VkDescriptorSetLayoutSupport}()
    vkGetDescriptorSetLayoutSupport(device, create_info, pSupport, fptr)
    from_vk(DescriptorSetLayoutSupport, pSupport[])
end

"""
    get_shader_info_amd(device, pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}

Extension: VK\\_AMD\\_shader\\_info

Return codes:
- Error:
  - `ERROR_FEATURE_NOT_PRESENT`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `pipeline`
- `shader_stage::ShaderStageFlag`
- `info_type::ShaderInfoTypeAMD`
- `fptr::FunctionPtr`

!!! warning
    The pointer returned by this function holds memory owned by Julia. It is therefore **your** responsibility to free it after use (e.g. with `Libc.free`).

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetShaderInfoAMD.html)

"""
function get_shader_info_amd(device, pipeline, shader_stage::ShaderStageFlag, info_type::ShaderInfoTypeAMD, fptr::FunctionPtr)::ResultTypes.Result{Tuple{UInt, Ptr{Cvoid}}, VulkanError}
    pInfoSize = Ref{UInt}()
    @repeat_while_incomplete begin
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, C_NULL, fptr)
            pInfo = Libc.malloc(pInfoSize[])
            @check vkGetShaderInfoAMD(device, pipeline, VkShaderStageFlagBits(shader_stage.val), info_type, pInfoSize, pInfo, fptr)
            if _return_code == VK_INCOMPLETE
                Libc.free(pInfo)
            end
        end
    (pInfoSize[], pInfo)
end

"""
    set_local_dimming_amd(device, swap_chain, local_dimming_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_AMD\\_display\\_native\\_hdr

Arguments:
- `device`
- `swap_chain`
- `local_dimming_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetLocalDimmingAMD.html)

"""
set_local_dimming_amd(device, swap_chain, local_dimming_enable::Bool, fptr::FunctionPtr)::Cvoid = vkSetLocalDimmingAMD(device, swap_chain, local_dimming_enable, fptr)

"""
    get_physical_device_calibrateable_time_domains_ext(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}

Extension: VK\\_EXT\\_calibrated\\_timestamps

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.html)

"""
function get_physical_device_calibrateable_time_domains_ext(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{TimeDomainEXT}, VulkanError}
    pTimeDomainCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, C_NULL, fptr)
            pTimeDomains = Vector{VkTimeDomainEXT}(undef, pTimeDomainCount[])
            @check vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device, pTimeDomainCount, pTimeDomains, fptr)
        end
    pTimeDomains
end

"""
    get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT}, fptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}

Extension: VK\\_EXT\\_calibrated\\_timestamps

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetCalibratedTimestampsEXT.html)

"""
function get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray{_CalibratedTimestampInfoEXT}, fptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{UInt64}, UInt64}, VulkanError}
    pTimestamps = Vector{UInt64}(undef, pointer_length(timestamp_infos))
    pMaxDeviation = Ref{UInt64}()
    @check vkGetCalibratedTimestampsEXT(device, pointer_length(timestamp_infos), timestamp_infos, pTimestamps, pMaxDeviation, fptr)
    (pTimestamps, pMaxDeviation[])
end

"""
    set_debug_utils_object_name_ext(device, name_info::_DebugUtilsObjectNameInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `name_info::_DebugUtilsObjectNameInfoEXT` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetDebugUtilsObjectNameEXT.html)

"""
set_debug_utils_object_name_ext(device, name_info::_DebugUtilsObjectNameInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectNameEXT(device, name_info, fptr))

"""
    set_debug_utils_object_tag_ext(device, tag_info::_DebugUtilsObjectTagInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `tag_info::_DebugUtilsObjectTagInfoEXT` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetDebugUtilsObjectTagEXT.html)

"""
set_debug_utils_object_tag_ext(device, tag_info::_DebugUtilsObjectTagInfoEXT, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetDebugUtilsObjectTagEXT(device, tag_info, fptr))

"""
    queue_begin_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`
- `label_info::_DebugUtilsLabelEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueBeginDebugUtilsLabelEXT.html)

"""
queue_begin_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid = vkQueueBeginDebugUtilsLabelEXT(queue, label_info, fptr)

"""
    queue_end_debug_utils_label_ext(queue, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueEndDebugUtilsLabelEXT.html)

"""
queue_end_debug_utils_label_ext(queue, fptr::FunctionPtr)::Cvoid = vkQueueEndDebugUtilsLabelEXT(queue, fptr)

"""
    queue_insert_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `queue`
- `label_info::_DebugUtilsLabelEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueInsertDebugUtilsLabelEXT.html)

"""
queue_insert_debug_utils_label_ext(queue, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid = vkQueueInsertDebugUtilsLabelEXT(queue, label_info, fptr)

"""
    cmd_begin_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)
- `label_info::_DebugUtilsLabelEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginDebugUtilsLabelEXT.html)

"""
cmd_begin_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid = vkCmdBeginDebugUtilsLabelEXT(command_buffer, label_info, fptr)

"""
    cmd_end_debug_utils_label_ext(command_buffer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndDebugUtilsLabelEXT.html)

"""
cmd_end_debug_utils_label_ext(command_buffer, fptr::FunctionPtr)::Cvoid = vkCmdEndDebugUtilsLabelEXT(command_buffer, fptr)

"""
    cmd_insert_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `command_buffer` (externsync)
- `label_info::_DebugUtilsLabelEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdInsertDebugUtilsLabelEXT.html)

"""
cmd_insert_debug_utils_label_ext(command_buffer, label_info::_DebugUtilsLabelEXT, fptr::FunctionPtr)::Cvoid = vkCmdInsertDebugUtilsLabelEXT(command_buffer, label_info, fptr)

"""
    create_debug_utils_messenger_ext(instance, create_info::_DebugUtilsMessengerCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}

Extension: VK\\_EXT\\_debug\\_utils

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `instance`
- `create_info::_DebugUtilsMessengerCreateInfoEXT`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDebugUtilsMessengerEXT.html)

"""
function create_debug_utils_messenger_ext(instance, create_info::_DebugUtilsMessengerCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DebugUtilsMessengerEXT, VulkanError}
    pMessenger = Ref{VkDebugUtilsMessengerEXT}()
    @check vkCreateDebugUtilsMessengerEXT(instance, create_info, allocator, pMessenger, fptr_create)
    DebugUtilsMessengerEXT(pMessenger[], (x->destroy_debug_utils_messenger_ext(instance, x, fptr_destroy; allocator)), instance)
end

"""
    destroy_debug_utils_messenger_ext(instance, messenger, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `instance`
- `messenger` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDebugUtilsMessengerEXT.html)

"""
destroy_debug_utils_messenger_ext(instance, messenger, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDebugUtilsMessengerEXT(instance, messenger, allocator, fptr)

"""
    submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_debug\\_utils

Arguments:
- `instance`
- `message_severity::DebugUtilsMessageSeverityFlagEXT`
- `message_types::DebugUtilsMessageTypeFlagEXT`
- `callback_data::_DebugUtilsMessengerCallbackDataEXT`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSubmitDebugUtilsMessageEXT.html)

"""
submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::_DebugUtilsMessengerCallbackDataEXT, fptr::FunctionPtr)::Cvoid = vkSubmitDebugUtilsMessageEXT(instance, VkDebugUtilsMessageSeverityFlagBitsEXT(message_severity.val), message_types, callback_data, fptr)

"""
    get_memory_host_pointer_properties_ext(device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}

Extension: VK\\_EXT\\_external\\_memory\\_host

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_EXTERNAL_HANDLE`

Arguments:
- `device`
- `handle_type::ExternalMemoryHandleTypeFlag`
- `host_pointer::Ptr{Cvoid}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetMemoryHostPointerPropertiesEXT.html)

"""
function get_memory_host_pointer_properties_ext(device, handle_type::ExternalMemoryHandleTypeFlag, host_pointer::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{MemoryHostPointerPropertiesEXT, VulkanError}
    pMemoryHostPointerProperties = Ref{VkMemoryHostPointerPropertiesEXT}()
    @check vkGetMemoryHostPointerPropertiesEXT(device, VkExternalMemoryHandleTypeFlagBits(handle_type.val), host_pointer, pMemoryHostPointerProperties, fptr)
    from_vk(MemoryHostPointerPropertiesEXT, pMemoryHostPointerProperties[])
end

"""
    cmd_write_buffer_marker_amd(command_buffer, pipeline_stage::PipelineStageFlag, dst_buffer, dst_offset::Integer, marker::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_AMD\\_buffer\\_marker

Arguments:
- `command_buffer` (externsync)
- `pipeline_stage::PipelineStageFlag`
- `dst_buffer`
- `dst_offset::Integer`
- `marker::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteBufferMarkerAMD.html)

"""
cmd_write_buffer_marker_amd(command_buffer, pipeline_stage::PipelineStageFlag, dst_buffer, dst_offset::Integer, marker::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteBufferMarkerAMD(command_buffer, VkPipelineStageFlagBits(pipeline_stage.val), dst_buffer, dst_offset, marker, fptr)

"""
    create_render_pass_2(device, create_info::_RenderPassCreateInfo2, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `create_info::_RenderPassCreateInfo2`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRenderPass2.html)

"""
function create_render_pass_2(device, create_info::_RenderPassCreateInfo2, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{RenderPass, VulkanError}
    pRenderPass = Ref{VkRenderPass}()
    @check vkCreateRenderPass2(device, create_info, allocator, pRenderPass, fptr_create)
    RenderPass(pRenderPass[], (x->destroy_render_pass(device, x, fptr_destroy; allocator)), device)
end

"""
    cmd_begin_render_pass_2(command_buffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `render_pass_begin::_RenderPassBeginInfo`
- `subpass_begin_info::_SubpassBeginInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginRenderPass2.html)

"""
cmd_begin_render_pass_2(command_buffer, render_pass_begin::_RenderPassBeginInfo, subpass_begin_info::_SubpassBeginInfo, fptr::FunctionPtr)::Cvoid = vkCmdBeginRenderPass2(command_buffer, render_pass_begin, subpass_begin_info, fptr)

"""
    cmd_next_subpass_2(command_buffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `subpass_begin_info::_SubpassBeginInfo`
- `subpass_end_info::_SubpassEndInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdNextSubpass2.html)

"""
cmd_next_subpass_2(command_buffer, subpass_begin_info::_SubpassBeginInfo, subpass_end_info::_SubpassEndInfo, fptr::FunctionPtr)::Cvoid = vkCmdNextSubpass2(command_buffer, subpass_begin_info, subpass_end_info, fptr)

"""
    cmd_end_render_pass_2(command_buffer, subpass_end_info::_SubpassEndInfo, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `subpass_end_info::_SubpassEndInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndRenderPass2.html)

"""
cmd_end_render_pass_2(command_buffer, subpass_end_info::_SubpassEndInfo, fptr::FunctionPtr)::Cvoid = vkCmdEndRenderPass2(command_buffer, subpass_end_info, fptr)

"""
    get_semaphore_counter_value(device, semaphore, fptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `semaphore`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetSemaphoreCounterValue.html)

"""
function get_semaphore_counter_value(device, semaphore, fptr::FunctionPtr)::ResultTypes.Result{UInt64, VulkanError}
    pValue = Ref{UInt64}()
    @check vkGetSemaphoreCounterValue(device, semaphore, pValue, fptr)
    pValue[]
end

"""
    wait_semaphores(device, wait_info::_SemaphoreWaitInfo, timeout::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Success:
  - `SUCCESS`
  - `TIMEOUT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `device`
- `wait_info::_SemaphoreWaitInfo`
- `timeout::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWaitSemaphores.html)

"""
wait_semaphores(device, wait_info::_SemaphoreWaitInfo, timeout::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWaitSemaphores(device, wait_info, timeout, fptr))

"""
    signal_semaphore(device, signal_info::_SemaphoreSignalInfo, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `signal_info::_SemaphoreSignalInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSignalSemaphore.html)

"""
signal_semaphore(device, signal_info::_SemaphoreSignalInfo, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSignalSemaphore(device, signal_info, fptr))

"""
    cmd_draw_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirectCount.html)

"""
cmd_draw_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fptr)

"""
    cmd_draw_indexed_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndexedIndirectCount.html)

"""
cmd_draw_indexed_indirect_count(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndexedIndirectCount(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fptr)

"""
    cmd_set_checkpoint_nv(command_buffer, checkpoint_marker::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_device\\_diagnostic\\_checkpoints

Arguments:
- `command_buffer` (externsync)
- `checkpoint_marker::Ptr{Cvoid}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCheckpointNV.html)

"""
cmd_set_checkpoint_nv(command_buffer, checkpoint_marker::Ptr{Cvoid}, fptr::FunctionPtr)::Cvoid = vkCmdSetCheckpointNV(command_buffer, checkpoint_marker, fptr)

"""
    get_queue_checkpoint_data_nv(queue, fptr::FunctionPtr)::Vector{CheckpointDataNV}

Extension: VK\\_NV\\_device\\_diagnostic\\_checkpoints

Arguments:
- `queue`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueueCheckpointDataNV.html)

"""
function get_queue_checkpoint_data_nv(queue, fptr::FunctionPtr)::Vector{CheckpointDataNV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, C_NULL, fptr)
    pCheckpointData = Vector{VkCheckpointDataNV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData, fptr)
    from_vk.(CheckpointDataNV, pCheckpointData)
end

"""
    cmd_bind_transform_feedback_buffers_ext(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer}, fptr::FunctionPtr; sizes = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`
- `fptr::FunctionPtr`
- `sizes`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindTransformFeedbackBuffersEXT.html)

"""
cmd_bind_transform_feedback_buffers_ext(command_buffer, buffers::AbstractArray, offsets::AbstractArray, fptr::FunctionPtr; sizes = C_NULL)::Cvoid = vkCmdBindTransformFeedbackBuffersEXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, fptr)

"""
    cmd_begin_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray{Buffer}, fptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `counter_buffers::AbstractArray{Buffer}`
- `fptr::FunctionPtr`
- `counter_buffer_offsets`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginTransformFeedbackEXT.html)

"""
cmd_begin_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray, fptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdBeginTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets, fptr)

"""
    cmd_end_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray{Buffer}, fptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `counter_buffers::AbstractArray{Buffer}`
- `fptr::FunctionPtr`
- `counter_buffer_offsets`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndTransformFeedbackEXT.html)

"""
cmd_end_transform_feedback_ext(command_buffer, counter_buffers::AbstractArray, fptr::FunctionPtr; counter_buffer_offsets = C_NULL)::Cvoid = vkCmdEndTransformFeedbackEXT(command_buffer, 0, pointer_length(counter_buffers), counter_buffers, counter_buffer_offsets, fptr)

"""
    cmd_begin_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer, fptr::FunctionPtr; flags = 0)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `index::Integer`
- `fptr::FunctionPtr`
- `flags`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBeginQueryIndexedEXT.html)

"""
cmd_begin_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer, fptr::FunctionPtr; flags = 0)::Cvoid = vkCmdBeginQueryIndexedEXT(command_buffer, query_pool, query, flags, index, fptr)

"""
    cmd_end_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `query_pool`
- `query::Integer`
- `index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdEndQueryIndexedEXT.html)

"""
cmd_end_query_indexed_ext(command_buffer, query_pool, query::Integer, index::Integer, fptr::FunctionPtr)::Cvoid = vkCmdEndQueryIndexedEXT(command_buffer, query_pool, query, index, fptr)

"""
    cmd_draw_indirect_byte_count_ext(command_buffer, instance_count::Integer, first_instance::Integer, counter_buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_transform\\_feedback

Arguments:
- `command_buffer` (externsync)
- `instance_count::Integer`
- `first_instance::Integer`
- `counter_buffer`
- `counter_buffer_offset::Integer`
- `counter_offset::Integer`
- `vertex_stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawIndirectByteCountEXT.html)

"""
cmd_draw_indirect_byte_count_ext(command_buffer, instance_count::Integer, first_instance::Integer, counter_buffer, counter_buffer_offset::Integer, counter_offset::Integer, vertex_stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawIndirectByteCountEXT(command_buffer, instance_count, first_instance, counter_buffer, counter_buffer_offset, counter_offset, vertex_stride, fptr)

"""
    cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_scissor\\_exclusive

Arguments:
- `command_buffer` (externsync)
- `exclusive_scissors::AbstractArray{_Rect2D}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetExclusiveScissorNV.html)

"""
cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid = vkCmdSetExclusiveScissorNV(command_buffer, 0, pointer_length(exclusive_scissors), exclusive_scissors, fptr)

"""
    cmd_bind_shading_rate_image_nv(command_buffer, image_layout::ImageLayout, fptr::FunctionPtr; image_view = C_NULL)::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `image_layout::ImageLayout`
- `fptr::FunctionPtr`
- `image_view`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindShadingRateImageNV.html)

"""
cmd_bind_shading_rate_image_nv(command_buffer, image_layout::ImageLayout, fptr::FunctionPtr; image_view = C_NULL)::Cvoid = vkCmdBindShadingRateImageNV(command_buffer, image_view, image_layout, fptr)

"""
    cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportShadingRatePaletteNV.html)

"""
cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray{_ShadingRatePaletteNV}, fptr::FunctionPtr)::Cvoid = vkCmdSetViewportShadingRatePaletteNV(command_buffer, 0, pointer_length(shading_rate_palettes), shading_rate_palettes, fptr)

"""
    cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_shading\\_rate\\_image

Arguments:
- `command_buffer` (externsync)
- `sample_order_type::CoarseSampleOrderTypeNV`
- `custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCoarseSampleOrderNV.html)

"""
cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray{_CoarseSampleOrderCustomNV}, fptr::FunctionPtr)::Cvoid = vkCmdSetCoarseSampleOrderNV(command_buffer, sample_order_type, pointer_length(custom_sample_orders), custom_sample_orders, fptr)

"""
    cmd_draw_mesh_tasks_nv(command_buffer, task_count::Integer, first_task::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `task_count::Integer`
- `first_task::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksNV.html)

"""
cmd_draw_mesh_tasks_nv(command_buffer, task_count::Integer, first_task::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksNV(command_buffer, task_count, first_task, fptr)

"""
    cmd_draw_mesh_tasks_indirect_nv(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksIndirectNV.html)

"""
cmd_draw_mesh_tasks_indirect_nv(command_buffer, buffer, offset::Integer, draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksIndirectNV(command_buffer, buffer, offset, draw_count, stride, fptr)

"""
    cmd_draw_mesh_tasks_indirect_count_nv(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_mesh\\_shader

Arguments:
- `command_buffer` (externsync)
- `buffer`
- `offset::Integer`
- `count_buffer`
- `count_buffer_offset::Integer`
- `max_draw_count::Integer`
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdDrawMeshTasksIndirectCountNV.html)

"""
cmd_draw_mesh_tasks_indirect_count_nv(command_buffer, buffer, offset::Integer, count_buffer, count_buffer_offset::Integer, max_draw_count::Integer, stride::Integer, fptr::FunctionPtr)::Cvoid = vkCmdDrawMeshTasksIndirectCountNV(command_buffer, buffer, offset, count_buffer, count_buffer_offset, max_draw_count, stride, fptr)

"""
    compile_deferred_nv(device, pipeline, shader::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `shader::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCompileDeferredNV.html)

"""
compile_deferred_nv(device, pipeline, shader::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCompileDeferredNV(device, pipeline, shader, fptr))

"""
    create_acceleration_structure_nv(device, create_info::_AccelerationStructureCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_AccelerationStructureCreateInfoNV`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateAccelerationStructureNV.html)

"""
function create_acceleration_structure_nv(device, create_info::_AccelerationStructureCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureNV, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureNV}()
    @check vkCreateAccelerationStructureNV(device, create_info, allocator, pAccelerationStructure, fptr_create)
    AccelerationStructureNV(pAccelerationStructure[], (x->destroy_acceleration_structure_nv(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_acceleration_structure_khr(device, acceleration_structure, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `acceleration_structure` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyAccelerationStructureKHR.html)

"""
destroy_acceleration_structure_khr(device, acceleration_structure, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureKHR(device, acceleration_structure, allocator, fptr)

"""
    destroy_acceleration_structure_nv(device, acceleration_structure, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `device`
- `acceleration_structure` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyAccelerationStructureNV.html)

"""
destroy_acceleration_structure_nv(device, acceleration_structure, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyAccelerationStructureNV(device, acceleration_structure, allocator, fptr)

"""
    get_acceleration_structure_memory_requirements_nv(device, info::_AccelerationStructureMemoryRequirementsInfoNV, fptr::FunctionPtr)::VkMemoryRequirements2KHR

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `device`
- `info::_AccelerationStructureMemoryRequirementsInfoNV`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureMemoryRequirementsNV.html)

"""
function get_acceleration_structure_memory_requirements_nv(device, info::_AccelerationStructureMemoryRequirementsInfoNV, fptr::FunctionPtr)::VkMemoryRequirements2KHR
    pMemoryRequirements = Ref{VkMemoryRequirements2KHR}()
    vkGetAccelerationStructureMemoryRequirementsNV(device, info, pMemoryRequirements, fptr)
    from_vk(VkMemoryRequirements2KHR, pMemoryRequirements[])
end

"""
    bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBindAccelerationStructureMemoryNV.html)

"""
bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray{_BindAccelerationStructureMemoryInfoNV}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkBindAccelerationStructureMemoryNV(device, pointer_length(bind_infos), bind_infos, fptr))

"""
    cmd_copy_acceleration_structure_nv(command_buffer, dst, src, mode::CopyAccelerationStructureModeKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `dst`
- `src`
- `mode::CopyAccelerationStructureModeKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureNV.html)

"""
cmd_copy_acceleration_structure_nv(command_buffer, dst, src, mode::CopyAccelerationStructureModeKHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureNV(command_buffer, dst, src, mode, fptr)

"""
    cmd_copy_acceleration_structure_khr(command_buffer, info::_CopyAccelerationStructureInfoKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyAccelerationStructureInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureKHR.html)

"""
cmd_copy_acceleration_structure_khr(command_buffer, info::_CopyAccelerationStructureInfoKHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureKHR(command_buffer, info, fptr)

"""
    copy_acceleration_structure_khr(device, info::_CopyAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyAccelerationStructureInfoKHR`
- `fptr::FunctionPtr`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyAccelerationStructureKHR.html)

"""
copy_acceleration_structure_khr(device, info::_CopyAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureKHR(device, deferred_operation, info, fptr))

"""
    cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::_CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyAccelerationStructureToMemoryInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyAccelerationStructureToMemoryKHR.html)

"""
cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::_CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer, info, fptr)

"""
    copy_acceleration_structure_to_memory_khr(device, info::_CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyAccelerationStructureToMemoryInfoKHR`
- `fptr::FunctionPtr`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyAccelerationStructureToMemoryKHR.html)

"""
copy_acceleration_structure_to_memory_khr(device, info::_CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyAccelerationStructureToMemoryKHR(device, deferred_operation, info, fptr))

"""
    cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::_CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `info::_CopyMemoryToAccelerationStructureInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyMemoryToAccelerationStructureKHR.html)

"""
cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::_CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer, info, fptr)

"""
    copy_memory_to_acceleration_structure_khr(device, info::_CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `info::_CopyMemoryToAccelerationStructureInfoKHR`
- `fptr::FunctionPtr`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCopyMemoryToAccelerationStructureKHR.html)

"""
copy_memory_to_acceleration_structure_khr(device, info::_CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkCopyMemoryToAccelerationStructureKHR(device, deferred_operation, info, fptr))

"""
    cmd_write_acceleration_structures_properties_khr(command_buffer, acceleration_structures::AbstractArray{AccelerationStructureKHR}, query_type::QueryType, query_pool, first_query::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `acceleration_structures::AbstractArray{AccelerationStructureKHR}`
- `query_type::QueryType`
- `query_pool`
- `first_query::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesKHR.html)

"""
cmd_write_acceleration_structures_properties_khr(command_buffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool, first_query::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesKHR(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query, fptr)

"""
    cmd_write_acceleration_structures_properties_nv(command_buffer, acceleration_structures::AbstractArray{AccelerationStructureNV}, query_type::QueryType, query_pool, first_query::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `acceleration_structures::AbstractArray{AccelerationStructureNV}`
- `query_type::QueryType`
- `query_pool`
- `first_query::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteAccelerationStructuresPropertiesNV.html)

"""
cmd_write_acceleration_structures_properties_nv(command_buffer, acceleration_structures::AbstractArray, query_type::QueryType, query_pool, first_query::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteAccelerationStructuresPropertiesNV(command_buffer, pointer_length(acceleration_structures), acceleration_structures, query_type, query_pool, first_query, fptr)

"""
    cmd_build_acceleration_structure_nv(command_buffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer, fptr::FunctionPtr; instance_data = C_NULL, src = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `info::_AccelerationStructureInfoNV`
- `instance_offset::Integer`
- `update::Bool`
- `dst`
- `scratch`
- `scratch_offset::Integer`
- `fptr::FunctionPtr`
- `instance_data`: defaults to `C_NULL`
- `src`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructureNV.html)

"""
cmd_build_acceleration_structure_nv(command_buffer, info::_AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer, fptr::FunctionPtr; instance_data = C_NULL, src = C_NULL)::Cvoid = vkCmdBuildAccelerationStructureNV(command_buffer, info, instance_data, instance_offset, update, dst, src, scratch, scratch_offset, fptr)

"""
    write_acceleration_structures_properties_khr(device, acceleration_structures::AbstractArray{AccelerationStructureKHR}, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `acceleration_structures::AbstractArray{AccelerationStructureKHR}`
- `query_type::QueryType`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `stride::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkWriteAccelerationStructuresPropertiesKHR.html)

"""
write_acceleration_structures_properties_khr(device, acceleration_structures::AbstractArray, query_type::QueryType, data_size::Integer, data::Ptr{Cvoid}, stride::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkWriteAccelerationStructuresPropertiesKHR(device, pointer_length(acceleration_structures), acceleration_structures, query_type, data_size, data, stride, fptr))

"""
    cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `miss_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `hit_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `callable_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `width::Integer`
- `height::Integer`
- `depth::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysKHR.html)

"""
cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer, fptr::FunctionPtr)::Cvoid = vkCmdTraceRaysKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, width, height, depth, fptr)

"""
    cmd_trace_rays_nv(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer, fptr::FunctionPtr; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid

Extension: VK\\_NV\\_ray\\_tracing

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table_buffer`
- `raygen_shader_binding_offset::Integer`
- `miss_shader_binding_offset::Integer`
- `miss_shader_binding_stride::Integer`
- `hit_shader_binding_offset::Integer`
- `hit_shader_binding_stride::Integer`
- `callable_shader_binding_offset::Integer`
- `callable_shader_binding_stride::Integer`
- `width::Integer`
- `height::Integer`
- `depth::Integer`
- `fptr::FunctionPtr`
- `miss_shader_binding_table_buffer`: defaults to `C_NULL`
- `hit_shader_binding_table_buffer`: defaults to `C_NULL`
- `callable_shader_binding_table_buffer`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysNV.html)

"""
cmd_trace_rays_nv(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset::Integer, miss_shader_binding_offset::Integer, miss_shader_binding_stride::Integer, hit_shader_binding_offset::Integer, hit_shader_binding_stride::Integer, callable_shader_binding_offset::Integer, callable_shader_binding_stride::Integer, width::Integer, height::Integer, depth::Integer, fptr::FunctionPtr; miss_shader_binding_table_buffer = C_NULL, hit_shader_binding_table_buffer = C_NULL, callable_shader_binding_table_buffer = C_NULL)::Cvoid = vkCmdTraceRaysNV(command_buffer, raygen_shader_binding_table_buffer, raygen_shader_binding_offset, miss_shader_binding_table_buffer, miss_shader_binding_offset, miss_shader_binding_stride, hit_shader_binding_table_buffer, hit_shader_binding_offset, hit_shader_binding_stride, callable_shader_binding_table_buffer, callable_shader_binding_offset, callable_shader_binding_stride, width, height, depth, fptr)

"""
    get_ray_tracing_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `first_group::Integer`
- `group_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingShaderGroupHandlesKHR.html)

"""
get_ray_tracing_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data, fptr))

"""
    get_ray_tracing_capture_replay_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline`
- `first_group::Integer`
- `group_count::Integer`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.html)

"""
get_ray_tracing_capture_replay_shader_group_handles_khr(device, pipeline, first_group::Integer, group_count::Integer, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, first_group, group_count, data_size, data, fptr))

"""
    get_acceleration_structure_handle_nv(device, acceleration_structure, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `acceleration_structure`
- `data_size::Integer`
- `data::Ptr{Cvoid}` (must be a valid pointer with `data_size` bytes)
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureHandleNV.html)

"""
get_acceleration_structure_handle_nv(device, acceleration_structure, data_size::Integer, data::Ptr{Cvoid}, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetAccelerationStructureHandleNV(device, acceleration_structure, data_size, data, fptr))

"""
    create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Extension: VK\\_NV\\_ray\\_tracing

Return codes:
- Success:
  - `SUCCESS`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_SHADER_NV`

Arguments:
- `device`
- `create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRayTracingPipelinesNV.html)

"""
function create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoNV}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesNV(device, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fptr_destroy; allocator)), device), _return_code)
end

"""
    create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
  - `PIPELINE_COMPILE_REQUIRED_EXT`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS`

Arguments:
- `device`
- `create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `deferred_operation`: defaults to `C_NULL`
- `pipeline_cache`: defaults to `C_NULL`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateRayTracingPipelinesKHR.html)

"""
function create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray{_RayTracingPipelineCreateInfoKHR}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL)::ResultTypes.Result{Tuple{Vector{Pipeline}, Result}, VulkanError}
    pPipelines = Vector{VkPipeline}(undef, pointer_length(create_infos))
    @check vkCreateRayTracingPipelinesKHR(device, deferred_operation, pipeline_cache, pointer_length(create_infos), create_infos, allocator, pPipelines, fptr_create)
    (Pipeline.(pPipelines, (x->destroy_pipeline(device, x, fptr_destroy; allocator)), device), _return_code)
end

"""
    get_physical_device_cooperative_matrix_properties_nv(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}

Extension: VK\\_NV\\_cooperative\\_matrix

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.html)

"""
function get_physical_device_cooperative_matrix_properties_nv(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{_CooperativeMatrixPropertiesNV}, VulkanError}
    pPropertyCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, C_NULL, fptr)
            pProperties = Vector{VkCooperativeMatrixPropertiesNV}(undef, pPropertyCount[])
            @check vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device, pPropertyCount, pProperties, fptr)
        end
    from_vk.(_CooperativeMatrixPropertiesNV, pProperties)
end

"""
    cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `raygen_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `miss_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `hit_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `callable_shader_binding_table::_StridedDeviceAddressRegionKHR`
- `indirect_device_address::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdTraceRaysIndirectKHR.html)

"""
cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::_StridedDeviceAddressRegionKHR, miss_shader_binding_table::_StridedDeviceAddressRegionKHR, hit_shader_binding_table::_StridedDeviceAddressRegionKHR, callable_shader_binding_table::_StridedDeviceAddressRegionKHR, indirect_device_address::Integer, fptr::FunctionPtr)::Cvoid = vkCmdTraceRaysIndirectKHR(command_buffer, raygen_shader_binding_table, miss_shader_binding_table, hit_shader_binding_table, callable_shader_binding_table, indirect_device_address, fptr)

"""
    get_device_acceleration_structure_compatibility_khr(device, version_info::_AccelerationStructureVersionInfoKHR, fptr::FunctionPtr)::AccelerationStructureCompatibilityKHR

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `version_info::_AccelerationStructureVersionInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceAccelerationStructureCompatibilityKHR.html)

"""
function get_device_acceleration_structure_compatibility_khr(device, version_info::_AccelerationStructureVersionInfoKHR, fptr::FunctionPtr)::AccelerationStructureCompatibilityKHR
    pCompatibility = Ref{VkAccelerationStructureCompatibilityKHR}()
    vkGetDeviceAccelerationStructureCompatibilityKHR(device, version_info, pCompatibility, fptr)
    pCompatibility[]
end

"""
    get_ray_tracing_shader_group_stack_size_khr(device, pipeline, group::Integer, group_shader::ShaderGroupShaderKHR, fptr::FunctionPtr)::UInt64

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `device`
- `pipeline`
- `group::Integer`
- `group_shader::ShaderGroupShaderKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetRayTracingShaderGroupStackSizeKHR.html)

"""
get_ray_tracing_shader_group_stack_size_khr(device, pipeline, group::Integer, group_shader::ShaderGroupShaderKHR, fptr::FunctionPtr)::UInt64 = vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, group_shader, fptr)

"""
    cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer, pipeline_stack_size::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_ray\\_tracing\\_pipeline

Arguments:
- `command_buffer` (externsync)
- `pipeline_stack_size::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetRayTracingPipelineStackSizeKHR.html)

"""
cmd_set_ray_tracing_pipeline_stack_size_khr(command_buffer, pipeline_stack_size::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetRayTracingPipelineStackSizeKHR(command_buffer, pipeline_stack_size, fptr)

"""
    get_image_view_handle_nvx(device, info::_ImageViewHandleInfoNVX, fptr::FunctionPtr)::UInt32

Extension: VK\\_NVX\\_image\\_view\\_handle

Arguments:
- `device`
- `info::_ImageViewHandleInfoNVX`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageViewHandleNVX.html)

"""
get_image_view_handle_nvx(device, info::_ImageViewHandleInfoNVX, fptr::FunctionPtr)::UInt32 = vkGetImageViewHandleNVX(device, info, fptr)

"""
    get_image_view_address_nvx(device, image_view, fptr::FunctionPtr)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}

Extension: VK\\_NVX\\_image\\_view\\_handle

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_UNKNOWN`

Arguments:
- `device`
- `image_view`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageViewAddressNVX.html)

"""
function get_image_view_address_nvx(device, image_view, fptr::FunctionPtr)::ResultTypes.Result{ImageViewAddressPropertiesNVX, VulkanError}
    pProperties = Ref{VkImageViewAddressPropertiesNVX}()
    @check vkGetImageViewAddressNVX(device, image_view, pProperties, fptr)
    from_vk(ImageViewAddressPropertiesNVX, pProperties[])
end

"""
    get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `physical_device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSurfacePresentModes2EXT.html)

"""
function get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PresentModeKHR}, VulkanError}
    pPresentModeCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, C_NULL, fptr)
            pPresentModes = Vector{VkPresentModeKHR}(undef, pPresentModeCount[])
            @check vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device, surface_info, pPresentModeCount, pPresentModes, fptr)
        end
    pPresentModes
end

"""
    get_device_group_surface_present_modes_2_ext(device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `surface_info::_PhysicalDeviceSurfaceInfo2KHR`
- `modes::DeviceGroupPresentModeFlagKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceGroupSurfacePresentModes2EXT.html)

"""
function get_device_group_surface_present_modes_2_ext(device, surface_info::_PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR, fptr::FunctionPtr)::ResultTypes.Result{DeviceGroupPresentModeFlagKHR, VulkanError}
    pModes = Ref{VkDeviceGroupPresentModeFlagsKHR}()
    @check vkGetDeviceGroupSurfacePresentModes2EXT(device, surface_info, pModes, fptr)
    pModes[]
end

"""
    acquire_full_screen_exclusive_mode_ext(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireFullScreenExclusiveModeEXT.html)

"""
acquire_full_screen_exclusive_mode_ext(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireFullScreenExclusiveModeEXT(device, swapchain, fptr))

"""
    release_full_screen_exclusive_mode_ext(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_full\\_screen\\_exclusive

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_SURFACE_LOST_KHR`

Arguments:
- `device`
- `swapchain`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseFullScreenExclusiveModeEXT.html)

"""
release_full_screen_exclusive_mode_ext(device, swapchain, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkReleaseFullScreenExclusiveModeEXT(device, swapchain, fptr))

"""
    enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device, queue_family_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}

Extension: VK\\_KHR\\_performance\\_query

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_INITIALIZATION_FAILED`

Arguments:
- `physical_device`
- `queue_family_index::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.html)

"""
function enumerate_physical_device_queue_family_performance_query_counters_khr(physical_device, queue_family_index::Integer, fptr::FunctionPtr)::ResultTypes.Result{Tuple{Vector{PerformanceCounterKHR}, Vector{PerformanceCounterDescriptionKHR}}, VulkanError}
    pCounterCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, C_NULL, C_NULL, fptr)
            pCounters = Vector{VkPerformanceCounterKHR}(undef, pCounterCount[])
            pCounterDescriptions = Vector{VkPerformanceCounterDescriptionKHR}(undef, pCounterCount[])
            @check vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device, queue_family_index, pCounterCount, pCounters, pCounterDescriptions, fptr)
        end
    (from_vk.(PerformanceCounterKHR, pCounters), from_vk.(PerformanceCounterDescriptionKHR, pCounterDescriptions))
end

"""
    get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR, fptr::FunctionPtr)::UInt32

Extension: VK\\_KHR\\_performance\\_query

Arguments:
- `physical_device`
- `performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.html)

"""
function get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::_QueryPoolPerformanceCreateInfoKHR, fptr::FunctionPtr)::UInt32
    pNumPasses = Ref{UInt32}()
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physical_device, performance_query_create_info, pNumPasses, fptr)
    pNumPasses[]
end

"""
    acquire_profiling_lock_khr(device, info::_AcquireProfilingLockInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_performance\\_query

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `TIMEOUT`

Arguments:
- `device`
- `info::_AcquireProfilingLockInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquireProfilingLockKHR.html)

"""
acquire_profiling_lock_khr(device, info::_AcquireProfilingLockInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkAcquireProfilingLockKHR(device, info, fptr))

"""
    release_profiling_lock_khr(device, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_performance\\_query

Arguments:
- `device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleaseProfilingLockKHR.html)

"""
release_profiling_lock_khr(device, fptr::FunctionPtr)::Cvoid = vkReleaseProfilingLockKHR(device, fptr)

"""
    get_image_drm_format_modifier_properties_ext(device, image, fptr::FunctionPtr)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}

Extension: VK\\_EXT\\_image\\_drm\\_format\\_modifier

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `image`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetImageDrmFormatModifierPropertiesEXT.html)

"""
function get_image_drm_format_modifier_properties_ext(device, image, fptr::FunctionPtr)::ResultTypes.Result{ImageDrmFormatModifierPropertiesEXT, VulkanError}
    pProperties = Ref{VkImageDrmFormatModifierPropertiesEXT}()
    @check vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties, fptr)
    from_vk(ImageDrmFormatModifierPropertiesEXT, pProperties[])
end

"""
    get_buffer_opaque_capture_address(device, info::_BufferDeviceAddressInfo, fptr::FunctionPtr)::UInt64

Arguments:
- `device`
- `info::_BufferDeviceAddressInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferOpaqueCaptureAddress.html)

"""
get_buffer_opaque_capture_address(device, info::_BufferDeviceAddressInfo, fptr::FunctionPtr)::UInt64 = vkGetBufferOpaqueCaptureAddress(device, info, fptr)

"""
    get_buffer_device_address(device, info::_BufferDeviceAddressInfo, fptr::FunctionPtr)::UInt64

Arguments:
- `device`
- `info::_BufferDeviceAddressInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetBufferDeviceAddress.html)

"""
get_buffer_device_address(device, info::_BufferDeviceAddressInfo, fptr::FunctionPtr)::UInt64 = vkGetBufferDeviceAddress(device, info, fptr)

"""
    create_headless_surface_ext(instance, create_info::_HeadlessSurfaceCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}

Extension: VK\\_EXT\\_headless\\_surface

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `instance`
- `create_info::_HeadlessSurfaceCreateInfoEXT`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateHeadlessSurfaceEXT.html)

"""
function create_headless_surface_ext(instance, create_info::_HeadlessSurfaceCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{SurfaceKHR, VulkanError}
    pSurface = Ref{VkSurfaceKHR}()
    @check vkCreateHeadlessSurfaceEXT(instance, create_info, allocator, pSurface, fptr_create)
    SurfaceKHR(pSurface[], (x->destroy_surface_khr(instance, x, fptr_destroy; allocator)), instance)
end

"""
    get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}

Extension: VK\\_NV\\_coverage\\_reduction\\_mode

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.html)

"""
function get_physical_device_supported_framebuffer_mixed_samples_combinations_nv(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{FramebufferMixedSamplesCombinationNV}, VulkanError}
    pCombinationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, C_NULL, fptr)
            pCombinations = Vector{VkFramebufferMixedSamplesCombinationNV}(undef, pCombinationCount[])
            @check vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device, pCombinationCount, pCombinations, fptr)
        end
    from_vk.(FramebufferMixedSamplesCombinationNV, pCombinations)
end

"""
    initialize_performance_api_intel(device, initialize_info::_InitializePerformanceApiInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `initialize_info::_InitializePerformanceApiInfoINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkInitializePerformanceApiINTEL.html)

"""
initialize_performance_api_intel(device, initialize_info::_InitializePerformanceApiInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkInitializePerformanceApiINTEL(device, initialize_info, fptr))

"""
    uninitialize_performance_api_intel(device, fptr::FunctionPtr)::Cvoid

Extension: VK\\_INTEL\\_performance\\_query

Arguments:
- `device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkUninitializePerformanceApiINTEL.html)

"""
uninitialize_performance_api_intel(device, fptr::FunctionPtr)::Cvoid = vkUninitializePerformanceApiINTEL(device, fptr)

"""
    cmd_set_performance_marker_intel(command_buffer, marker_info::_PerformanceMarkerInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `marker_info::_PerformanceMarkerInfoINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceMarkerINTEL.html)

"""
cmd_set_performance_marker_intel(command_buffer, marker_info::_PerformanceMarkerInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceMarkerINTEL(command_buffer, marker_info, fptr))

"""
    cmd_set_performance_stream_marker_intel(command_buffer, marker_info::_PerformanceStreamMarkerInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `marker_info::_PerformanceStreamMarkerInfoINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceStreamMarkerINTEL.html)

"""
cmd_set_performance_stream_marker_intel(command_buffer, marker_info::_PerformanceStreamMarkerInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceStreamMarkerINTEL(command_buffer, marker_info, fptr))

"""
    cmd_set_performance_override_intel(command_buffer, override_info::_PerformanceOverrideInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `command_buffer` (externsync)
- `override_info::_PerformanceOverrideInfoINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPerformanceOverrideINTEL.html)

"""
cmd_set_performance_override_intel(command_buffer, override_info::_PerformanceOverrideInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkCmdSetPerformanceOverrideINTEL(command_buffer, override_info, fptr))

"""
    acquire_performance_configuration_intel(device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `acquire_info::_PerformanceConfigurationAcquireInfoINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkAcquirePerformanceConfigurationINTEL.html)

"""
function acquire_performance_configuration_intel(device, acquire_info::_PerformanceConfigurationAcquireInfoINTEL, fptr::FunctionPtr)::ResultTypes.Result{PerformanceConfigurationINTEL, VulkanError}
    pConfiguration = Ref{VkPerformanceConfigurationINTEL}()
    @check vkAcquirePerformanceConfigurationINTEL(device, acquire_info, pConfiguration, fptr)
    PerformanceConfigurationINTEL(pConfiguration[], identity, device)
end

"""
    release_performance_configuration_intel(device, fptr::FunctionPtr; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `fptr::FunctionPtr`
- `configuration`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkReleasePerformanceConfigurationINTEL.html)

"""
release_performance_configuration_intel(device, fptr::FunctionPtr; configuration = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkReleasePerformanceConfigurationINTEL(device, configuration, fptr))

"""
    queue_set_performance_configuration_intel(queue, configuration, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `queue`
- `configuration`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSetPerformanceConfigurationINTEL.html)

"""
queue_set_performance_configuration_intel(queue, configuration, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSetPerformanceConfigurationINTEL(queue, configuration, fptr))

"""
    get_performance_parameter_intel(device, parameter::PerformanceParameterTypeINTEL, fptr::FunctionPtr)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}

Extension: VK\\_INTEL\\_performance\\_query

Return codes:
- Error:
  - `ERROR_TOO_MANY_OBJECTS`
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `parameter::PerformanceParameterTypeINTEL`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPerformanceParameterINTEL.html)

"""
function get_performance_parameter_intel(device, parameter::PerformanceParameterTypeINTEL, fptr::FunctionPtr)::ResultTypes.Result{_PerformanceValueINTEL, VulkanError}
    pValue = Ref{VkPerformanceValueINTEL}()
    @check vkGetPerformanceParameterINTEL(device, parameter, pValue, fptr)
    from_vk(_PerformanceValueINTEL, pValue[])
end

"""
    get_device_memory_opaque_capture_address(device, info::_DeviceMemoryOpaqueCaptureAddressInfo, fptr::FunctionPtr)::UInt64

Arguments:
- `device`
- `info::_DeviceMemoryOpaqueCaptureAddressInfo`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeviceMemoryOpaqueCaptureAddress.html)

"""
get_device_memory_opaque_capture_address(device, info::_DeviceMemoryOpaqueCaptureAddressInfo, fptr::FunctionPtr)::UInt64 = vkGetDeviceMemoryOpaqueCaptureAddress(device, info, fptr)

"""
    get_pipeline_executable_properties_khr(device, pipeline_info::_PipelineInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `pipeline_info::_PipelineInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutablePropertiesKHR.html)

"""
function get_pipeline_executable_properties_khr(device, pipeline_info::_PipelineInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutablePropertiesKHR}, VulkanError}
    pExecutableCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, C_NULL, fptr)
            pProperties = Vector{VkPipelineExecutablePropertiesKHR}(undef, pExecutableCount[])
            @check vkGetPipelineExecutablePropertiesKHR(device, pipeline_info, pExecutableCount, pProperties, fptr)
        end
    from_vk.(PipelineExecutablePropertiesKHR, pProperties)
end

"""
    get_pipeline_executable_statistics_khr(device, executable_info::_PipelineExecutableInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `executable_info::_PipelineExecutableInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutableStatisticsKHR.html)

"""
function get_pipeline_executable_statistics_khr(device, executable_info::_PipelineExecutableInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableStatisticKHR}, VulkanError}
    pStatisticCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, C_NULL, fptr)
            pStatistics = Vector{VkPipelineExecutableStatisticKHR}(undef, pStatisticCount[])
            @check vkGetPipelineExecutableStatisticsKHR(device, executable_info, pStatisticCount, pStatistics, fptr)
        end
    from_vk.(PipelineExecutableStatisticKHR, pStatistics)
end

"""
    get_pipeline_executable_internal_representations_khr(device, executable_info::_PipelineExecutableInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}

Extension: VK\\_KHR\\_pipeline\\_executable\\_properties

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `executable_info::_PipelineExecutableInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPipelineExecutableInternalRepresentationsKHR.html)

"""
function get_pipeline_executable_internal_representations_khr(device, executable_info::_PipelineExecutableInfoKHR, fptr::FunctionPtr)::ResultTypes.Result{Vector{PipelineExecutableInternalRepresentationKHR}, VulkanError}
    pInternalRepresentationCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, C_NULL, fptr)
            pInternalRepresentations = Vector{VkPipelineExecutableInternalRepresentationKHR}(undef, pInternalRepresentationCount[])
            @check vkGetPipelineExecutableInternalRepresentationsKHR(device, executable_info, pInternalRepresentationCount, pInternalRepresentations, fptr)
        end
    from_vk.(PipelineExecutableInternalRepresentationKHR, pInternalRepresentations)
end

"""
    cmd_set_line_stipple_ext(command_buffer, line_stipple_factor::Integer, line_stipple_pattern::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_line\\_rasterization

Arguments:
- `command_buffer` (externsync)
- `line_stipple_factor::Integer`
- `line_stipple_pattern::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLineStippleEXT.html)

"""
cmd_set_line_stipple_ext(command_buffer, line_stipple_factor::Integer, line_stipple_pattern::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetLineStippleEXT(command_buffer, line_stipple_factor, line_stipple_pattern, fptr)

"""
    get_physical_device_tool_properties_ext(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}

Extension: VK\\_EXT\\_tooling\\_info

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceToolPropertiesEXT.html)

"""
function get_physical_device_tool_properties_ext(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceToolPropertiesEXT}, VulkanError}
    pToolCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, C_NULL, fptr)
            pToolProperties = Vector{VkPhysicalDeviceToolPropertiesEXT}(undef, pToolCount[])
            @check vkGetPhysicalDeviceToolPropertiesEXT(physical_device, pToolCount, pToolProperties, fptr)
        end
    from_vk.(PhysicalDeviceToolPropertiesEXT, pToolProperties)
end

"""
    create_acceleration_structure_khr(device, create_info::_AccelerationStructureCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR`

Arguments:
- `device`
- `create_info::_AccelerationStructureCreateInfoKHR`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateAccelerationStructureKHR.html)

"""
function create_acceleration_structure_khr(device, create_info::_AccelerationStructureCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{AccelerationStructureKHR, VulkanError}
    pAccelerationStructure = Ref{VkAccelerationStructureKHR}()
    @check vkCreateAccelerationStructureKHR(device, create_info, allocator, pAccelerationStructure, fptr_create)
    AccelerationStructureKHR(pAccelerationStructure[], (x->destroy_acceleration_structure_khr(device, x, fptr_destroy; allocator)), device)
end

"""
    cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructuresKHR.html)

"""
cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, fptr::FunctionPtr)::Cvoid = vkCmdBuildAccelerationStructuresKHR(command_buffer, pointer_length(infos), infos, build_range_infos, fptr)

"""
    cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, indirect_device_addresses::AbstractArray{<:Integer}, indirect_strides::AbstractArray{<:Integer}, max_primitive_counts::AbstractArray{<:Integer}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `command_buffer` (externsync)
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `indirect_device_addresses::AbstractArray{<:Integer}`
- `indirect_strides::AbstractArray{<:Integer}`
- `max_primitive_counts::AbstractArray{<:Integer}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBuildAccelerationStructuresIndirectKHR.html)

"""
cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray, fptr::FunctionPtr)::Cvoid = vkCmdBuildAccelerationStructuresIndirectKHR(command_buffer, pointer_length(infos), infos, indirect_device_addresses, indirect_strides, max_primitive_counts, fptr)

"""
    build_acceleration_structures_khr(device, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_acceleration\\_structure

Return codes:
- Success:
  - `SUCCESS`
  - `OPERATION_DEFERRED_KHR`
  - `OPERATION_NOT_DEFERRED_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}`
- `build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}`
- `fptr::FunctionPtr`
- `deferred_operation`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkBuildAccelerationStructuresKHR.html)

"""
build_acceleration_structures_khr(device, infos::AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, build_range_infos::AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, fptr::FunctionPtr; deferred_operation = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkBuildAccelerationStructuresKHR(device, deferred_operation, pointer_length(infos), infos, build_range_infos, fptr))

"""
    get_acceleration_structure_device_address_khr(device, info::_AccelerationStructureDeviceAddressInfoKHR, fptr::FunctionPtr)::UInt64

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `info::_AccelerationStructureDeviceAddressInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureDeviceAddressKHR.html)

"""
get_acceleration_structure_device_address_khr(device, info::_AccelerationStructureDeviceAddressInfoKHR, fptr::FunctionPtr)::UInt64 = vkGetAccelerationStructureDeviceAddressKHR(device, info, fptr)

"""
    create_deferred_operation_khr(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreateDeferredOperationKHR.html)

"""
function create_deferred_operation_khr(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{DeferredOperationKHR, VulkanError}
    pDeferredOperation = Ref{VkDeferredOperationKHR}()
    @check vkCreateDeferredOperationKHR(device, allocator, pDeferredOperation, fptr_create)
    DeferredOperationKHR(pDeferredOperation[], (x->destroy_deferred_operation_khr(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_deferred_operation_khr(device, operation, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Arguments:
- `device`
- `operation` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyDeferredOperationKHR.html)

"""
destroy_deferred_operation_khr(device, operation, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyDeferredOperationKHR(device, operation, allocator, fptr)

"""
    get_deferred_operation_max_concurrency_khr(device, operation, fptr::FunctionPtr)::UInt32

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Arguments:
- `device`
- `operation`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeferredOperationMaxConcurrencyKHR.html)

"""
get_deferred_operation_max_concurrency_khr(device, operation, fptr::FunctionPtr)::UInt32 = vkGetDeferredOperationMaxConcurrencyKHR(device, operation, fptr)

"""
    get_deferred_operation_result_khr(device, operation, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Success:
  - `SUCCESS`
  - `NOT_READY`

Arguments:
- `device`
- `operation`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetDeferredOperationResultKHR.html)

"""
get_deferred_operation_result_khr(device, operation, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkGetDeferredOperationResultKHR(device, operation, fptr))

"""
    deferred_operation_join_khr(device, operation, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_deferred\\_host\\_operations

Return codes:
- Success:
  - `SUCCESS`
  - `THREAD_DONE_KHR`
  - `THREAD_IDLE_KHR`
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`

Arguments:
- `device`
- `operation`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDeferredOperationJoinKHR.html)

"""
deferred_operation_join_khr(device, operation, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkDeferredOperationJoinKHR(device, operation, fptr))

"""
    cmd_set_cull_mode_ext(command_buffer, fptr::FunctionPtr; cull_mode = 0)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `fptr::FunctionPtr`
- `cull_mode`: defaults to `0`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetCullModeEXT.html)

"""
cmd_set_cull_mode_ext(command_buffer, fptr::FunctionPtr; cull_mode = 0)::Cvoid = vkCmdSetCullModeEXT(command_buffer, cull_mode, fptr)

"""
    cmd_set_front_face_ext(command_buffer, front_face::FrontFace, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `front_face::FrontFace`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFrontFaceEXT.html)

"""
cmd_set_front_face_ext(command_buffer, front_face::FrontFace, fptr::FunctionPtr)::Cvoid = vkCmdSetFrontFaceEXT(command_buffer, front_face, fptr)

"""
    cmd_set_primitive_topology_ext(command_buffer, primitive_topology::PrimitiveTopology, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `primitive_topology::PrimitiveTopology`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPrimitiveTopologyEXT.html)

"""
cmd_set_primitive_topology_ext(command_buffer, primitive_topology::PrimitiveTopology, fptr::FunctionPtr)::Cvoid = vkCmdSetPrimitiveTopologyEXT(command_buffer, primitive_topology, fptr)

"""
    cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray{_Viewport}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `viewports::AbstractArray{_Viewport}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetViewportWithCountEXT.html)

"""
cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray{_Viewport}, fptr::FunctionPtr)::Cvoid = vkCmdSetViewportWithCountEXT(command_buffer, pointer_length(viewports), viewports, fptr)

"""
    cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `scissors::AbstractArray{_Rect2D}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetScissorWithCountEXT.html)

"""
cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray{_Rect2D}, fptr::FunctionPtr)::Cvoid = vkCmdSetScissorWithCountEXT(command_buffer, pointer_length(scissors), scissors, fptr)

"""
    cmd_bind_vertex_buffers_2_ext(command_buffer, buffers::AbstractArray{Buffer}, offsets::AbstractArray{<:Integer}, fptr::FunctionPtr; sizes = C_NULL, strides = C_NULL)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `buffers::AbstractArray{Buffer}`
- `offsets::AbstractArray{<:Integer}`
- `fptr::FunctionPtr`
- `sizes`: defaults to `C_NULL`
- `strides`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBindVertexBuffers2EXT.html)

"""
cmd_bind_vertex_buffers_2_ext(command_buffer, buffers::AbstractArray, offsets::AbstractArray, fptr::FunctionPtr; sizes = C_NULL, strides = C_NULL)::Cvoid = vkCmdBindVertexBuffers2EXT(command_buffer, 0, pointer_length(buffers), buffers, offsets, sizes, strides, fptr)

"""
    cmd_set_depth_test_enable_ext(command_buffer, depth_test_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_test_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthTestEnableEXT.html)

"""
cmd_set_depth_test_enable_ext(command_buffer, depth_test_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthTestEnableEXT(command_buffer, depth_test_enable, fptr)

"""
    cmd_set_depth_write_enable_ext(command_buffer, depth_write_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_write_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthWriteEnableEXT.html)

"""
cmd_set_depth_write_enable_ext(command_buffer, depth_write_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthWriteEnableEXT(command_buffer, depth_write_enable, fptr)

"""
    cmd_set_depth_compare_op_ext(command_buffer, depth_compare_op::CompareOp, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_compare_op::CompareOp`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthCompareOpEXT.html)

"""
cmd_set_depth_compare_op_ext(command_buffer, depth_compare_op::CompareOp, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthCompareOpEXT(command_buffer, depth_compare_op, fptr)

"""
    cmd_set_depth_bounds_test_enable_ext(command_buffer, depth_bounds_test_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `depth_bounds_test_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBoundsTestEnableEXT.html)

"""
cmd_set_depth_bounds_test_enable_ext(command_buffer, depth_bounds_test_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthBoundsTestEnableEXT(command_buffer, depth_bounds_test_enable, fptr)

"""
    cmd_set_stencil_test_enable_ext(command_buffer, stencil_test_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `stencil_test_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilTestEnableEXT.html)

"""
cmd_set_stencil_test_enable_ext(command_buffer, stencil_test_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetStencilTestEnableEXT(command_buffer, stencil_test_enable, fptr)

"""
    cmd_set_stencil_op_ext(command_buffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `face_mask::StencilFaceFlag`
- `fail_op::StencilOp`
- `pass_op::StencilOp`
- `depth_fail_op::StencilOp`
- `compare_op::CompareOp`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetStencilOpEXT.html)

"""
cmd_set_stencil_op_ext(command_buffer, face_mask::StencilFaceFlag, fail_op::StencilOp, pass_op::StencilOp, depth_fail_op::StencilOp, compare_op::CompareOp, fptr::FunctionPtr)::Cvoid = vkCmdSetStencilOpEXT(command_buffer, face_mask, fail_op, pass_op, depth_fail_op, compare_op, fptr)

"""
    cmd_set_patch_control_points_ext(command_buffer, patch_control_points::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `patch_control_points::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPatchControlPointsEXT.html)

"""
cmd_set_patch_control_points_ext(command_buffer, patch_control_points::Integer, fptr::FunctionPtr)::Cvoid = vkCmdSetPatchControlPointsEXT(command_buffer, patch_control_points, fptr)

"""
    cmd_set_rasterizer_discard_enable_ext(command_buffer, rasterizer_discard_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `rasterizer_discard_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetRasterizerDiscardEnableEXT.html)

"""
cmd_set_rasterizer_discard_enable_ext(command_buffer, rasterizer_discard_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetRasterizerDiscardEnableEXT(command_buffer, rasterizer_discard_enable, fptr)

"""
    cmd_set_depth_bias_enable_ext(command_buffer, depth_bias_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `depth_bias_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBiasEnableEXT.html)

"""
cmd_set_depth_bias_enable_ext(command_buffer, depth_bias_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetDepthBiasEnableEXT(command_buffer, depth_bias_enable, fptr)

"""
    cmd_set_logic_op_ext(command_buffer, logic_op::LogicOp, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `logic_op::LogicOp`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetLogicOpEXT.html)

"""
cmd_set_logic_op_ext(command_buffer, logic_op::LogicOp, fptr::FunctionPtr)::Cvoid = vkCmdSetLogicOpEXT(command_buffer, logic_op, fptr)

"""
    cmd_set_primitive_restart_enable_ext(command_buffer, primitive_restart_enable::Bool, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_extended\\_dynamic\\_state2

Arguments:
- `command_buffer` (externsync)
- `primitive_restart_enable::Bool`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetPrimitiveRestartEnableEXT.html)

"""
cmd_set_primitive_restart_enable_ext(command_buffer, primitive_restart_enable::Bool, fptr::FunctionPtr)::Cvoid = vkCmdSetPrimitiveRestartEnableEXT(command_buffer, primitive_restart_enable, fptr)

"""
    create_private_data_slot_ext(device, create_info::_PrivateDataSlotCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}

Extension: VK\\_EXT\\_private\\_data

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `create_info::_PrivateDataSlotCreateInfoEXT`
- `fptr_create::FunctionPtr`
- `fptr_destroy::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCreatePrivateDataSlotEXT.html)

"""
function create_private_data_slot_ext(device, create_info::_PrivateDataSlotCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)::ResultTypes.Result{PrivateDataSlotEXT, VulkanError}
    pPrivateDataSlot = Ref{VkPrivateDataSlotEXT}()
    @check vkCreatePrivateDataSlotEXT(device, create_info, allocator, pPrivateDataSlot, fptr_create)
    PrivateDataSlotEXT(pPrivateDataSlot[], (x->destroy_private_data_slot_ext(device, x, fptr_destroy; allocator)), device)
end

"""
    destroy_private_data_slot_ext(device, private_data_slot, fptr::FunctionPtr; allocator = C_NULL)::Cvoid

Extension: VK\\_EXT\\_private\\_data

Arguments:
- `device`
- `private_data_slot` (externsync)
- `fptr::FunctionPtr`
- `allocator`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkDestroyPrivateDataSlotEXT.html)

"""
destroy_private_data_slot_ext(device, private_data_slot, fptr::FunctionPtr; allocator = C_NULL)::Cvoid = vkDestroyPrivateDataSlotEXT(device, private_data_slot, allocator, fptr)

"""
    set_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, data::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_EXT\\_private\\_data

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `device`
- `object_type::ObjectType`
- `object_handle::Integer`
- `private_data_slot`
- `data::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkSetPrivateDataEXT.html)

"""
set_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, data::Integer, fptr::FunctionPtr)::ResultTypes.Result{Result, VulkanError} = @check(vkSetPrivateDataEXT(device, object_type, object_handle, private_data_slot, data, fptr))

"""
    get_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, fptr::FunctionPtr)::UInt64

Extension: VK\\_EXT\\_private\\_data

Arguments:
- `device`
- `object_type::ObjectType`
- `object_handle::Integer`
- `private_data_slot`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPrivateDataEXT.html)

"""
function get_private_data_ext(device, object_type::ObjectType, object_handle::Integer, private_data_slot, fptr::FunctionPtr)::UInt64
    pData = Ref{UInt64}()
    vkGetPrivateDataEXT(device, object_type, object_handle, private_data_slot, pData, fptr)
    pData[]
end

"""
    cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::_CopyBufferInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_buffer_info::_CopyBufferInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBuffer2KHR.html)

"""
cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::_CopyBufferInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyBuffer2KHR(command_buffer, copy_buffer_info, fptr)

"""
    cmd_copy_image_2_khr(command_buffer, copy_image_info::_CopyImageInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_image_info::_CopyImageInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImage2KHR.html)

"""
cmd_copy_image_2_khr(command_buffer, copy_image_info::_CopyImageInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyImage2KHR(command_buffer, copy_image_info, fptr)

"""
    cmd_blit_image_2_khr(command_buffer, blit_image_info::_BlitImageInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `blit_image_info::_BlitImageInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdBlitImage2KHR.html)

"""
cmd_blit_image_2_khr(command_buffer, blit_image_info::_BlitImageInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdBlitImage2KHR(command_buffer, blit_image_info, fptr)

"""
    cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyBufferToImage2KHR.html)

"""
cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::_CopyBufferToImageInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyBufferToImage2KHR(command_buffer, copy_buffer_to_image_info, fptr)

"""
    cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdCopyImageToBuffer2KHR.html)

"""
cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::_CopyImageToBufferInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdCopyImageToBuffer2KHR(command_buffer, copy_image_to_buffer_info, fptr)

"""
    cmd_resolve_image_2_khr(command_buffer, resolve_image_info::_ResolveImageInfo2KHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_copy\\_commands2

Arguments:
- `command_buffer` (externsync)
- `resolve_image_info::_ResolveImageInfo2KHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResolveImage2KHR.html)

"""
cmd_resolve_image_2_khr(command_buffer, resolve_image_info::_ResolveImageInfo2KHR, fptr::FunctionPtr)::Cvoid = vkCmdResolveImage2KHR(command_buffer, resolve_image_info, fptr)

"""
    cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

Arguments:
- `command_buffer` (externsync)
- `fragment_size::_Extent2D`
- `combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFragmentShadingRateKHR.html)

"""
cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::_Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fptr::FunctionPtr)::Cvoid = vkCmdSetFragmentShadingRateKHR(command_buffer, fragment_size, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops), fptr)

"""
    get_physical_device_fragment_shading_rates_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}

Extension: VK\\_KHR\\_fragment\\_shading\\_rate

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`

Arguments:
- `physical_device`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetPhysicalDeviceFragmentShadingRatesKHR.html)

"""
function get_physical_device_fragment_shading_rates_khr(physical_device, fptr::FunctionPtr)::ResultTypes.Result{Vector{PhysicalDeviceFragmentShadingRateKHR}, VulkanError}
    pFragmentShadingRateCount = Ref{UInt32}()
    @repeat_while_incomplete begin
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, C_NULL, fptr)
            pFragmentShadingRates = Vector{VkPhysicalDeviceFragmentShadingRateKHR}(undef, pFragmentShadingRateCount[])
            @check vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device, pFragmentShadingRateCount, pFragmentShadingRates, fptr)
        end
    from_vk.(PhysicalDeviceFragmentShadingRateKHR, pFragmentShadingRates)
end

"""
    cmd_set_fragment_shading_rate_enum_nv(command_buffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_NV\\_fragment\\_shading\\_rate\\_enums

Arguments:
- `command_buffer` (externsync)
- `shading_rate::FragmentShadingRateNV`
- `combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetFragmentShadingRateEnumNV.html)

"""
cmd_set_fragment_shading_rate_enum_nv(command_buffer, shading_rate::FragmentShadingRateNV, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fptr::FunctionPtr)::Cvoid = vkCmdSetFragmentShadingRateEnumNV(command_buffer, shading_rate, to_vk(NTuple{2, VkFragmentShadingRateCombinerOpKHR}, combiner_ops), fptr)

"""
    get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR, fptr::FunctionPtr; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR

Extension: VK\\_KHR\\_acceleration\\_structure

Arguments:
- `device`
- `build_type::AccelerationStructureBuildTypeKHR`
- `build_info::_AccelerationStructureBuildGeometryInfoKHR`
- `fptr::FunctionPtr`
- `max_primitive_counts`: defaults to `C_NULL`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetAccelerationStructureBuildSizesKHR.html)

"""
function get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::_AccelerationStructureBuildGeometryInfoKHR, fptr::FunctionPtr; max_primitive_counts = C_NULL)::_AccelerationStructureBuildSizesInfoKHR
    pSizeInfo = Ref{VkAccelerationStructureBuildSizesInfoKHR}()
    vkGetAccelerationStructureBuildSizesKHR(device, build_type, build_info, max_primitive_counts, pSizeInfo, fptr)
    from_vk(_AccelerationStructureBuildSizesInfoKHR, pSizeInfo[])
end

"""
    cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}, vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_vertex\\_input\\_dynamic\\_state

Arguments:
- `command_buffer` (externsync)
- `vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}`
- `vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetVertexInputEXT.html)

"""
cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray{_VertexInputBindingDescription2EXT}, vertex_attribute_descriptions::AbstractArray{_VertexInputAttributeDescription2EXT}, fptr::FunctionPtr)::Cvoid = vkCmdSetVertexInputEXT(command_buffer, pointer_length(vertex_binding_descriptions), vertex_binding_descriptions, pointer_length(vertex_attribute_descriptions), vertex_attribute_descriptions, fptr)

"""
    cmd_set_color_write_enable_ext(command_buffer, color_write_enables::AbstractArray{Bool}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_EXT\\_color\\_write\\_enable

Arguments:
- `command_buffer` (externsync)
- `color_write_enables::AbstractArray{Bool}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetColorWriteEnableEXT.html)

"""
cmd_set_color_write_enable_ext(command_buffer, color_write_enables::AbstractArray, fptr::FunctionPtr)::Cvoid = vkCmdSetColorWriteEnableEXT(command_buffer, pointer_length(color_write_enables), color_write_enables, fptr)

"""
    cmd_set_event_2_khr(command_buffer, event, dependency_info::_DependencyInfoKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `event`
- `dependency_info::_DependencyInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetEvent2KHR.html)

"""
cmd_set_event_2_khr(command_buffer, event, dependency_info::_DependencyInfoKHR, fptr::FunctionPtr)::Cvoid = vkCmdSetEvent2KHR(command_buffer, event, dependency_info, fptr)

"""
    cmd_reset_event_2_khr(command_buffer, event, stage_mask::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `event`
- `stage_mask::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdResetEvent2KHR.html)

"""
cmd_reset_event_2_khr(command_buffer, event, stage_mask::Integer, fptr::FunctionPtr)::Cvoid = vkCmdResetEvent2KHR(command_buffer, event, stage_mask, fptr)

"""
    cmd_wait_events_2_khr(command_buffer, events::AbstractArray{Event}, dependency_infos::AbstractArray{_DependencyInfoKHR}, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `events::AbstractArray{Event}`
- `dependency_infos::AbstractArray{_DependencyInfoKHR}`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWaitEvents2KHR.html)

"""
cmd_wait_events_2_khr(command_buffer, events::AbstractArray, dependency_infos::AbstractArray{_DependencyInfoKHR}, fptr::FunctionPtr)::Cvoid = vkCmdWaitEvents2KHR(command_buffer, pointer_length(events), events, dependency_infos, fptr)

"""
    cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::_DependencyInfoKHR, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `dependency_info::_DependencyInfoKHR`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdPipelineBarrier2KHR.html)

"""
cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::_DependencyInfoKHR, fptr::FunctionPtr)::Cvoid = vkCmdPipelineBarrier2KHR(command_buffer, dependency_info, fptr)

"""
    queue_submit_2_khr(queue, submits::AbstractArray{_SubmitInfo2KHR}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError}

Extension: VK\\_KHR\\_synchronization2

Return codes:
- Error:
  - `ERROR_OUT_OF_HOST_MEMORY`
  - `ERROR_OUT_OF_DEVICE_MEMORY`
  - `ERROR_DEVICE_LOST`

Arguments:
- `queue` (externsync)
- `submits::AbstractArray{_SubmitInfo2KHR}`
- `fptr::FunctionPtr`
- `fence`: defaults to `C_NULL` (externsync)

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkQueueSubmit2KHR.html)

"""
queue_submit_2_khr(queue, submits::AbstractArray{_SubmitInfo2KHR}, fptr::FunctionPtr; fence = C_NULL)::ResultTypes.Result{Result, VulkanError} = @check(vkQueueSubmit2KHR(queue, pointer_length(submits), submits, fence, fptr))

"""
    cmd_write_timestamp_2_khr(command_buffer, stage::Integer, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `stage::Integer`
- `query_pool`
- `query::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteTimestamp2KHR.html)

"""
cmd_write_timestamp_2_khr(command_buffer, stage::Integer, query_pool, query::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteTimestamp2KHR(command_buffer, stage, query_pool, query, fptr)

"""
    cmd_write_buffer_marker_2_amd(command_buffer, stage::Integer, dst_buffer, dst_offset::Integer, marker::Integer, fptr::FunctionPtr)::Cvoid

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `command_buffer` (externsync)
- `stage::Integer`
- `dst_buffer`
- `dst_offset::Integer`
- `marker::Integer`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdWriteBufferMarker2AMD.html)

"""
cmd_write_buffer_marker_2_amd(command_buffer, stage::Integer, dst_buffer, dst_offset::Integer, marker::Integer, fptr::FunctionPtr)::Cvoid = vkCmdWriteBufferMarker2AMD(command_buffer, stage, dst_buffer, dst_offset, marker, fptr)

"""
    get_queue_checkpoint_data_2_nv(queue, fptr::FunctionPtr)::Vector{CheckpointData2NV}

Extension: VK\\_KHR\\_synchronization2

Arguments:
- `queue`
- `fptr::FunctionPtr`

[API documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkGetQueueCheckpointData2NV.html)

"""
function get_queue_checkpoint_data_2_nv(queue, fptr::FunctionPtr)::Vector{CheckpointData2NV}
    pCheckpointDataCount = Ref{UInt32}()
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, C_NULL, fptr)
    pCheckpointData = Vector{VkCheckpointData2NV}(undef, pCheckpointDataCount[])
    vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData, fptr)
    from_vk.(CheckpointData2NV, pCheckpointData)
end

"""

"""
create_instance(create_info::InstanceCreateInfo; allocator = C_NULL) = create_instance(convert(_InstanceCreateInfo, create_info); allocator)

"""

"""
create_device(physical_device, create_info::DeviceCreateInfo; allocator = C_NULL) = create_device(physical_device, convert(_DeviceCreateInfo, create_info); allocator)

"""

"""
queue_submit(queue, submits::AbstractArray; fence = C_NULL) = queue_submit(queue, convert(AbstractArray{_SubmitInfo}, submits); fence)

"""

"""
allocate_memory(device, allocate_info::MemoryAllocateInfo; allocator = C_NULL) = allocate_memory(device, convert(_MemoryAllocateInfo, allocate_info); allocator)

"""

"""
flush_mapped_memory_ranges(device, memory_ranges::AbstractArray) = flush_mapped_memory_ranges(device, convert(AbstractArray{_MappedMemoryRange}, memory_ranges))

"""

"""
invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray) = invalidate_mapped_memory_ranges(device, convert(AbstractArray{_MappedMemoryRange}, memory_ranges))

"""

"""
queue_bind_sparse(queue, bind_info::AbstractArray; fence = C_NULL) = queue_bind_sparse(queue, convert(AbstractArray{_BindSparseInfo}, bind_info); fence)

"""

"""
create_fence(device, create_info::FenceCreateInfo; allocator = C_NULL) = create_fence(device, convert(_FenceCreateInfo, create_info); allocator)

"""

"""
create_semaphore(device, create_info::SemaphoreCreateInfo; allocator = C_NULL) = create_semaphore(device, convert(_SemaphoreCreateInfo, create_info); allocator)

"""

"""
create_event(device, create_info::EventCreateInfo; allocator = C_NULL) = create_event(device, convert(_EventCreateInfo, create_info); allocator)

"""

"""
create_query_pool(device, create_info::QueryPoolCreateInfo; allocator = C_NULL) = create_query_pool(device, convert(_QueryPoolCreateInfo, create_info); allocator)

"""

"""
create_buffer(device, create_info::BufferCreateInfo; allocator = C_NULL) = create_buffer(device, convert(_BufferCreateInfo, create_info); allocator)

"""

"""
create_buffer_view(device, create_info::BufferViewCreateInfo; allocator = C_NULL) = create_buffer_view(device, convert(_BufferViewCreateInfo, create_info); allocator)

"""

"""
create_image(device, create_info::ImageCreateInfo; allocator = C_NULL) = create_image(device, convert(_ImageCreateInfo, create_info); allocator)

"""

"""
get_image_subresource_layout(device, image, subresource::ImageSubresource) = get_image_subresource_layout(device, image, convert(_ImageSubresource, subresource))

"""

"""
create_image_view(device, create_info::ImageViewCreateInfo; allocator = C_NULL) = create_image_view(device, convert(_ImageViewCreateInfo, create_info); allocator)

"""

"""
create_shader_module(device, create_info::ShaderModuleCreateInfo; allocator = C_NULL) = create_shader_module(device, convert(_ShaderModuleCreateInfo, create_info); allocator)

"""

"""
create_pipeline_cache(device, create_info::PipelineCacheCreateInfo; allocator = C_NULL) = create_pipeline_cache(device, convert(_PipelineCacheCreateInfo, create_info); allocator)

"""

"""
create_graphics_pipelines(device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL) = create_graphics_pipelines(device, convert(AbstractArray{_GraphicsPipelineCreateInfo}, create_infos); pipeline_cache, allocator)

"""

"""
create_compute_pipelines(device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL) = create_compute_pipelines(device, convert(AbstractArray{_ComputePipelineCreateInfo}, create_infos); pipeline_cache, allocator)

"""

"""
create_pipeline_layout(device, create_info::PipelineLayoutCreateInfo; allocator = C_NULL) = create_pipeline_layout(device, convert(_PipelineLayoutCreateInfo, create_info); allocator)

"""

"""
create_sampler(device, create_info::SamplerCreateInfo; allocator = C_NULL) = create_sampler(device, convert(_SamplerCreateInfo, create_info); allocator)

"""

"""
create_descriptor_set_layout(device, create_info::DescriptorSetLayoutCreateInfo; allocator = C_NULL) = create_descriptor_set_layout(device, convert(_DescriptorSetLayoutCreateInfo, create_info); allocator)

"""

"""
create_descriptor_pool(device, create_info::DescriptorPoolCreateInfo; allocator = C_NULL) = create_descriptor_pool(device, convert(_DescriptorPoolCreateInfo, create_info); allocator)

"""

"""
allocate_descriptor_sets(device, allocate_info::DescriptorSetAllocateInfo) = allocate_descriptor_sets(device, convert(_DescriptorSetAllocateInfo, allocate_info))

"""

"""
update_descriptor_sets(device, descriptor_writes::AbstractArray, descriptor_copies::AbstractArray) = update_descriptor_sets(device, convert(AbstractArray{_WriteDescriptorSet}, descriptor_writes), convert(AbstractArray{_CopyDescriptorSet}, descriptor_copies))

"""

"""
create_framebuffer(device, create_info::FramebufferCreateInfo; allocator = C_NULL) = create_framebuffer(device, convert(_FramebufferCreateInfo, create_info); allocator)

"""

"""
create_render_pass(device, create_info::RenderPassCreateInfo; allocator = C_NULL) = create_render_pass(device, convert(_RenderPassCreateInfo, create_info); allocator)

"""

"""
create_command_pool(device, create_info::CommandPoolCreateInfo; allocator = C_NULL) = create_command_pool(device, convert(_CommandPoolCreateInfo, create_info); allocator)

"""

"""
allocate_command_buffers(device, allocate_info::CommandBufferAllocateInfo) = allocate_command_buffers(device, convert(_CommandBufferAllocateInfo, allocate_info))

"""

"""
begin_command_buffer(command_buffer, begin_info::CommandBufferBeginInfo) = begin_command_buffer(command_buffer, convert(_CommandBufferBeginInfo, begin_info))

"""

"""
cmd_set_viewport(command_buffer, viewports::AbstractArray) = cmd_set_viewport(command_buffer, convert(AbstractArray{_Viewport}, viewports))

"""

"""
cmd_set_scissor(command_buffer, scissors::AbstractArray) = cmd_set_scissor(command_buffer, convert(AbstractArray{_Rect2D}, scissors))

"""

"""
cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray) = cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, convert(AbstractArray{_BufferCopy}, regions))

"""

"""
cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray) = cmd_copy_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageCopy}, regions))

"""

"""
cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter) = cmd_blit_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageBlit}, regions), filter)

"""

"""
cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray) = cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout, convert(AbstractArray{_BufferImageCopy}, regions))

"""

"""
cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray) = cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout, dst_buffer, convert(AbstractArray{_BufferImageCopy}, regions))

"""

"""
cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::ClearColorValue, ranges::AbstractArray) = cmd_clear_color_image(command_buffer, image, image_layout, convert(_ClearColorValue, color), convert(AbstractArray{_ImageSubresourceRange}, ranges))

"""

"""
cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::ClearDepthStencilValue, ranges::AbstractArray) = cmd_clear_depth_stencil_image(command_buffer, image, image_layout, convert(_ClearDepthStencilValue, depth_stencil), convert(AbstractArray{_ImageSubresourceRange}, ranges))

"""

"""
cmd_clear_attachments(command_buffer, attachments::AbstractArray, rects::AbstractArray) = cmd_clear_attachments(command_buffer, convert(AbstractArray{_ClearAttachment}, attachments), convert(AbstractArray{_ClearRect}, rects))

"""

"""
cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray) = cmd_resolve_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageResolve}, regions))

"""

"""
cmd_wait_events(command_buffer, events::AbstractArray, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; src_stage_mask = 0, dst_stage_mask = 0) = cmd_wait_events(command_buffer, events, convert(AbstractArray{_MemoryBarrier}, memory_barriers), convert(AbstractArray{_BufferMemoryBarrier}, buffer_memory_barriers), convert(AbstractArray{_ImageMemoryBarrier}, image_memory_barriers); src_stage_mask, dst_stage_mask)

"""

"""
cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray; dependency_flags = 0) = cmd_pipeline_barrier(command_buffer, src_stage_mask, dst_stage_mask, convert(AbstractArray{_MemoryBarrier}, memory_barriers), convert(AbstractArray{_BufferMemoryBarrier}, buffer_memory_barriers), convert(AbstractArray{_ImageMemoryBarrier}, image_memory_barriers); dependency_flags)

"""

"""
cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::ConditionalRenderingBeginInfoEXT) = cmd_begin_conditional_rendering_ext(command_buffer, convert(_ConditionalRenderingBeginInfoEXT, conditional_rendering_begin))

"""

"""
cmd_begin_render_pass(command_buffer, render_pass_begin::RenderPassBeginInfo, contents::SubpassContents) = cmd_begin_render_pass(command_buffer, convert(_RenderPassBeginInfo, render_pass_begin), contents)

"""

"""
create_display_mode_khr(physical_device, display, create_info::DisplayModeCreateInfoKHR; allocator = C_NULL) = create_display_mode_khr(physical_device, display, convert(_DisplayModeCreateInfoKHR, create_info); allocator)

"""

"""
create_display_plane_surface_khr(instance, create_info::DisplaySurfaceCreateInfoKHR; allocator = C_NULL) = create_display_plane_surface_khr(instance, convert(_DisplaySurfaceCreateInfoKHR, create_info); allocator)

"""

"""
create_shared_swapchains_khr(device, create_infos::AbstractArray; allocator = C_NULL) = create_shared_swapchains_khr(device, convert(AbstractArray{_SwapchainCreateInfoKHR}, create_infos); allocator)

"""

"""
create_swapchain_khr(device, create_info::SwapchainCreateInfoKHR; allocator = C_NULL) = create_swapchain_khr(device, convert(_SwapchainCreateInfoKHR, create_info); allocator)

"""

"""
queue_present_khr(queue, present_info::PresentInfoKHR) = queue_present_khr(queue, convert(_PresentInfoKHR, present_info))

"""

"""
create_win_32_surface_khr(instance, create_info::Win32SurfaceCreateInfoKHR; allocator = C_NULL) = create_win_32_surface_khr(instance, convert(_Win32SurfaceCreateInfoKHR, create_info); allocator)

"""

"""
create_debug_report_callback_ext(instance, create_info::DebugReportCallbackCreateInfoEXT; allocator = C_NULL) = create_debug_report_callback_ext(instance, convert(_DebugReportCallbackCreateInfoEXT, create_info); allocator)

"""

"""
debug_marker_set_object_name_ext(device, name_info::DebugMarkerObjectNameInfoEXT) = debug_marker_set_object_name_ext(device, convert(_DebugMarkerObjectNameInfoEXT, name_info))

"""

"""
debug_marker_set_object_tag_ext(device, tag_info::DebugMarkerObjectTagInfoEXT) = debug_marker_set_object_tag_ext(device, convert(_DebugMarkerObjectTagInfoEXT, tag_info))

"""

"""
cmd_debug_marker_begin_ext(command_buffer, marker_info::DebugMarkerMarkerInfoEXT) = cmd_debug_marker_begin_ext(command_buffer, convert(_DebugMarkerMarkerInfoEXT, marker_info))

"""

"""
cmd_debug_marker_insert_ext(command_buffer, marker_info::DebugMarkerMarkerInfoEXT) = cmd_debug_marker_insert_ext(command_buffer, convert(_DebugMarkerMarkerInfoEXT, marker_info))

"""

"""
cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::GeneratedCommandsInfoNV) = cmd_execute_generated_commands_nv(command_buffer, is_preprocessed, convert(_GeneratedCommandsInfoNV, generated_commands_info))

"""

"""
cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::GeneratedCommandsInfoNV) = cmd_preprocess_generated_commands_nv(command_buffer, convert(_GeneratedCommandsInfoNV, generated_commands_info))

"""

"""
get_generated_commands_memory_requirements_nv(device, info::GeneratedCommandsMemoryRequirementsInfoNV) = get_generated_commands_memory_requirements_nv(device, convert(_GeneratedCommandsMemoryRequirementsInfoNV, info))

"""

"""
create_indirect_commands_layout_nv(device, create_info::IndirectCommandsLayoutCreateInfoNV; allocator = C_NULL) = create_indirect_commands_layout_nv(device, convert(_IndirectCommandsLayoutCreateInfoNV, create_info); allocator)

"""

"""
get_physical_device_image_format_properties_2(physical_device, image_format_info::PhysicalDeviceImageFormatInfo2) = get_physical_device_image_format_properties_2(physical_device, convert(_PhysicalDeviceImageFormatInfo2, image_format_info))

"""

"""
get_physical_device_sparse_image_format_properties_2(physical_device, format_info::PhysicalDeviceSparseImageFormatInfo2) = get_physical_device_sparse_image_format_properties_2(physical_device, convert(_PhysicalDeviceSparseImageFormatInfo2, format_info))

"""

"""
cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray) = cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point, layout, set, convert(AbstractArray{_WriteDescriptorSet}, descriptor_writes))

"""

"""
get_physical_device_external_buffer_properties(physical_device, external_buffer_info::PhysicalDeviceExternalBufferInfo) = get_physical_device_external_buffer_properties(physical_device, convert(_PhysicalDeviceExternalBufferInfo, external_buffer_info))

"""

"""
get_memory_win_32_handle_khr(device, get_win_32_handle_info::MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE) = get_memory_win_32_handle_khr(device, convert(_MemoryGetWin32HandleInfoKHR, get_win_32_handle_info), handle)

"""

"""
get_memory_fd_khr(device, get_fd_info::MemoryGetFdInfoKHR) = get_memory_fd_khr(device, convert(_MemoryGetFdInfoKHR, get_fd_info))

"""

"""
get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::PhysicalDeviceExternalSemaphoreInfo) = get_physical_device_external_semaphore_properties(physical_device, convert(_PhysicalDeviceExternalSemaphoreInfo, external_semaphore_info))

"""

"""
get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE) = get_semaphore_win_32_handle_khr(device, convert(_SemaphoreGetWin32HandleInfoKHR, get_win_32_handle_info), handle)

"""

"""
import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::ImportSemaphoreWin32HandleInfoKHR) = import_semaphore_win_32_handle_khr(device, convert(_ImportSemaphoreWin32HandleInfoKHR, import_semaphore_win_32_handle_info))

"""

"""
get_semaphore_fd_khr(device, get_fd_info::SemaphoreGetFdInfoKHR) = get_semaphore_fd_khr(device, convert(_SemaphoreGetFdInfoKHR, get_fd_info))

"""

"""
import_semaphore_fd_khr(device, import_semaphore_fd_info::ImportSemaphoreFdInfoKHR) = import_semaphore_fd_khr(device, convert(_ImportSemaphoreFdInfoKHR, import_semaphore_fd_info))

"""

"""
get_physical_device_external_fence_properties(physical_device, external_fence_info::PhysicalDeviceExternalFenceInfo) = get_physical_device_external_fence_properties(physical_device, convert(_PhysicalDeviceExternalFenceInfo, external_fence_info))

"""

"""
get_fence_win_32_handle_khr(device, get_win_32_handle_info::FenceGetWin32HandleInfoKHR, handle::vk.HANDLE) = get_fence_win_32_handle_khr(device, convert(_FenceGetWin32HandleInfoKHR, get_win_32_handle_info), handle)

"""

"""
import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::ImportFenceWin32HandleInfoKHR) = import_fence_win_32_handle_khr(device, convert(_ImportFenceWin32HandleInfoKHR, import_fence_win_32_handle_info))

"""

"""
get_fence_fd_khr(device, get_fd_info::FenceGetFdInfoKHR) = get_fence_fd_khr(device, convert(_FenceGetFdInfoKHR, get_fd_info))

"""

"""
import_fence_fd_khr(device, import_fence_fd_info::ImportFenceFdInfoKHR) = import_fence_fd_khr(device, convert(_ImportFenceFdInfoKHR, import_fence_fd_info))

"""

"""
display_power_control_ext(device, display, display_power_info::DisplayPowerInfoEXT) = display_power_control_ext(device, display, convert(_DisplayPowerInfoEXT, display_power_info))

"""

"""
register_device_event_ext(device, device_event_info::DeviceEventInfoEXT; allocator = C_NULL) = register_device_event_ext(device, convert(_DeviceEventInfoEXT, device_event_info); allocator)

"""

"""
register_display_event_ext(device, display, display_event_info::DisplayEventInfoEXT; allocator = C_NULL) = register_display_event_ext(device, display, convert(_DisplayEventInfoEXT, display_event_info); allocator)

"""

"""
bind_buffer_memory_2(device, bind_infos::AbstractArray) = bind_buffer_memory_2(device, convert(AbstractArray{_BindBufferMemoryInfo}, bind_infos))

"""

"""
bind_image_memory_2(device, bind_infos::AbstractArray) = bind_image_memory_2(device, convert(AbstractArray{_BindImageMemoryInfo}, bind_infos))

"""

"""
acquire_next_image_2_khr(device, acquire_info::AcquireNextImageInfoKHR) = acquire_next_image_2_khr(device, convert(_AcquireNextImageInfoKHR, acquire_info))

"""

"""
create_descriptor_update_template(device, create_info::DescriptorUpdateTemplateCreateInfo; allocator = C_NULL) = create_descriptor_update_template(device, convert(_DescriptorUpdateTemplateCreateInfo, create_info); allocator)

"""

"""
set_hdr_metadata_ext(device, swapchains::AbstractArray, metadata::AbstractArray) = set_hdr_metadata_ext(device, swapchains, convert(AbstractArray{_HdrMetadataEXT}, metadata))

"""

"""
cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray) = cmd_set_viewport_w_scaling_nv(command_buffer, convert(AbstractArray{_ViewportWScalingNV}, viewport_w_scalings))

"""

"""
cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray) = cmd_set_discard_rectangle_ext(command_buffer, convert(AbstractArray{_Rect2D}, discard_rectangles))

"""

"""
cmd_set_sample_locations_ext(command_buffer, sample_locations_info::SampleLocationsInfoEXT) = cmd_set_sample_locations_ext(command_buffer, convert(_SampleLocationsInfoEXT, sample_locations_info))

"""

"""
get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR) = get_physical_device_surface_capabilities_2_khr(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info))

"""

"""
get_physical_device_surface_formats_2_khr(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR) = get_physical_device_surface_formats_2_khr(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info))

"""

"""
get_display_plane_capabilities_2_khr(physical_device, display_plane_info::DisplayPlaneInfo2KHR) = get_display_plane_capabilities_2_khr(physical_device, convert(_DisplayPlaneInfo2KHR, display_plane_info))

"""

"""
get_buffer_memory_requirements_2(device, info::BufferMemoryRequirementsInfo2) = get_buffer_memory_requirements_2(device, convert(_BufferMemoryRequirementsInfo2, info))

"""

"""
get_image_memory_requirements_2(device, info::ImageMemoryRequirementsInfo2) = get_image_memory_requirements_2(device, convert(_ImageMemoryRequirementsInfo2, info))

"""

"""
get_image_sparse_memory_requirements_2(device, info::ImageSparseMemoryRequirementsInfo2) = get_image_sparse_memory_requirements_2(device, convert(_ImageSparseMemoryRequirementsInfo2, info))

"""

"""
create_sampler_ycbcr_conversion(device, create_info::SamplerYcbcrConversionCreateInfo; allocator = C_NULL) = create_sampler_ycbcr_conversion(device, convert(_SamplerYcbcrConversionCreateInfo, create_info); allocator)

"""

"""
get_device_queue_2(device, queue_info::DeviceQueueInfo2) = get_device_queue_2(device, convert(_DeviceQueueInfo2, queue_info))

"""

"""
create_validation_cache_ext(device, create_info::ValidationCacheCreateInfoEXT; allocator = C_NULL) = create_validation_cache_ext(device, convert(_ValidationCacheCreateInfoEXT, create_info); allocator)

"""

"""
get_descriptor_set_layout_support(device, create_info::DescriptorSetLayoutCreateInfo) = get_descriptor_set_layout_support(device, convert(_DescriptorSetLayoutCreateInfo, create_info))

"""

"""
get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray) = get_calibrated_timestamps_ext(device, convert(AbstractArray{_CalibratedTimestampInfoEXT}, timestamp_infos))

"""

"""
set_debug_utils_object_name_ext(device, name_info::DebugUtilsObjectNameInfoEXT) = set_debug_utils_object_name_ext(device, convert(_DebugUtilsObjectNameInfoEXT, name_info))

"""

"""
set_debug_utils_object_tag_ext(device, tag_info::DebugUtilsObjectTagInfoEXT) = set_debug_utils_object_tag_ext(device, convert(_DebugUtilsObjectTagInfoEXT, tag_info))

"""

"""
queue_begin_debug_utils_label_ext(queue, label_info::DebugUtilsLabelEXT) = queue_begin_debug_utils_label_ext(queue, convert(_DebugUtilsLabelEXT, label_info))

"""

"""
queue_insert_debug_utils_label_ext(queue, label_info::DebugUtilsLabelEXT) = queue_insert_debug_utils_label_ext(queue, convert(_DebugUtilsLabelEXT, label_info))

"""

"""
cmd_begin_debug_utils_label_ext(command_buffer, label_info::DebugUtilsLabelEXT) = cmd_begin_debug_utils_label_ext(command_buffer, convert(_DebugUtilsLabelEXT, label_info))

"""

"""
cmd_insert_debug_utils_label_ext(command_buffer, label_info::DebugUtilsLabelEXT) = cmd_insert_debug_utils_label_ext(command_buffer, convert(_DebugUtilsLabelEXT, label_info))

"""

"""
create_debug_utils_messenger_ext(instance, create_info::DebugUtilsMessengerCreateInfoEXT; allocator = C_NULL) = create_debug_utils_messenger_ext(instance, convert(_DebugUtilsMessengerCreateInfoEXT, create_info); allocator)

"""

"""
submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::DebugUtilsMessengerCallbackDataEXT) = submit_debug_utils_message_ext(instance, message_severity, message_types, convert(_DebugUtilsMessengerCallbackDataEXT, callback_data))

"""

"""
create_render_pass_2(device, create_info::RenderPassCreateInfo2; allocator = C_NULL) = create_render_pass_2(device, convert(_RenderPassCreateInfo2, create_info); allocator)

"""

"""
cmd_begin_render_pass_2(command_buffer, render_pass_begin::RenderPassBeginInfo, subpass_begin_info::SubpassBeginInfo) = cmd_begin_render_pass_2(command_buffer, convert(_RenderPassBeginInfo, render_pass_begin), convert(_SubpassBeginInfo, subpass_begin_info))

"""

"""
cmd_next_subpass_2(command_buffer, subpass_begin_info::SubpassBeginInfo, subpass_end_info::SubpassEndInfo) = cmd_next_subpass_2(command_buffer, convert(_SubpassBeginInfo, subpass_begin_info), convert(_SubpassEndInfo, subpass_end_info))

"""

"""
cmd_end_render_pass_2(command_buffer, subpass_end_info::SubpassEndInfo) = cmd_end_render_pass_2(command_buffer, convert(_SubpassEndInfo, subpass_end_info))

"""

"""
wait_semaphores(device, wait_info::SemaphoreWaitInfo, timeout::Integer) = wait_semaphores(device, convert(_SemaphoreWaitInfo, wait_info), timeout)

"""

"""
signal_semaphore(device, signal_info::SemaphoreSignalInfo) = signal_semaphore(device, convert(_SemaphoreSignalInfo, signal_info))

"""

"""
cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray) = cmd_set_exclusive_scissor_nv(command_buffer, convert(AbstractArray{_Rect2D}, exclusive_scissors))

"""

"""
cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray) = cmd_set_viewport_shading_rate_palette_nv(command_buffer, convert(AbstractArray{_ShadingRatePaletteNV}, shading_rate_palettes))

"""

"""
cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray) = cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type, convert(AbstractArray{_CoarseSampleOrderCustomNV}, custom_sample_orders))

"""

"""
create_acceleration_structure_nv(device, create_info::AccelerationStructureCreateInfoNV; allocator = C_NULL) = create_acceleration_structure_nv(device, convert(_AccelerationStructureCreateInfoNV, create_info); allocator)

"""

"""
get_acceleration_structure_memory_requirements_nv(device, info::AccelerationStructureMemoryRequirementsInfoNV) = get_acceleration_structure_memory_requirements_nv(device, convert(_AccelerationStructureMemoryRequirementsInfoNV, info))

"""

"""
bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray) = bind_acceleration_structure_memory_nv(device, convert(AbstractArray{_BindAccelerationStructureMemoryInfoNV}, bind_infos))

"""

"""
cmd_copy_acceleration_structure_khr(command_buffer, info::CopyAccelerationStructureInfoKHR) = cmd_copy_acceleration_structure_khr(command_buffer, convert(_CopyAccelerationStructureInfoKHR, info))

"""

"""
copy_acceleration_structure_khr(device, info::CopyAccelerationStructureInfoKHR; deferred_operation = C_NULL) = copy_acceleration_structure_khr(device, convert(_CopyAccelerationStructureInfoKHR, info); deferred_operation)

"""

"""
cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::CopyAccelerationStructureToMemoryInfoKHR) = cmd_copy_acceleration_structure_to_memory_khr(command_buffer, convert(_CopyAccelerationStructureToMemoryInfoKHR, info))

"""

"""
copy_acceleration_structure_to_memory_khr(device, info::CopyAccelerationStructureToMemoryInfoKHR; deferred_operation = C_NULL) = copy_acceleration_structure_to_memory_khr(device, convert(_CopyAccelerationStructureToMemoryInfoKHR, info); deferred_operation)

"""

"""
cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::CopyMemoryToAccelerationStructureInfoKHR) = cmd_copy_memory_to_acceleration_structure_khr(command_buffer, convert(_CopyMemoryToAccelerationStructureInfoKHR, info))

"""

"""
copy_memory_to_acceleration_structure_khr(device, info::CopyMemoryToAccelerationStructureInfoKHR; deferred_operation = C_NULL) = copy_memory_to_acceleration_structure_khr(device, convert(_CopyMemoryToAccelerationStructureInfoKHR, info); deferred_operation)

"""

"""
cmd_build_acceleration_structure_nv(command_buffer, info::AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer; instance_data = C_NULL, src = C_NULL) = cmd_build_acceleration_structure_nv(command_buffer, convert(_AccelerationStructureInfoNV, info), instance_offset, update, dst, scratch, scratch_offset; instance_data, src)

"""

"""
cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::StridedDeviceAddressRegionKHR, miss_shader_binding_table::StridedDeviceAddressRegionKHR, hit_shader_binding_table::StridedDeviceAddressRegionKHR, callable_shader_binding_table::StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer) = cmd_trace_rays_khr(command_buffer, convert(_StridedDeviceAddressRegionKHR, raygen_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, miss_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, hit_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, callable_shader_binding_table), width, height, depth)

"""

"""
create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray; pipeline_cache = C_NULL, allocator = C_NULL) = create_ray_tracing_pipelines_nv(device, convert(AbstractArray{_RayTracingPipelineCreateInfoNV}, create_infos); pipeline_cache, allocator)

"""

"""
create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL) = create_ray_tracing_pipelines_khr(device, convert(AbstractArray{_RayTracingPipelineCreateInfoKHR}, create_infos); deferred_operation, pipeline_cache, allocator)

"""

"""
cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::StridedDeviceAddressRegionKHR, miss_shader_binding_table::StridedDeviceAddressRegionKHR, hit_shader_binding_table::StridedDeviceAddressRegionKHR, callable_shader_binding_table::StridedDeviceAddressRegionKHR, indirect_device_address::Integer) = cmd_trace_rays_indirect_khr(command_buffer, convert(_StridedDeviceAddressRegionKHR, raygen_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, miss_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, hit_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, callable_shader_binding_table), indirect_device_address)

"""

"""
get_device_acceleration_structure_compatibility_khr(device, version_info::AccelerationStructureVersionInfoKHR) = get_device_acceleration_structure_compatibility_khr(device, convert(_AccelerationStructureVersionInfoKHR, version_info))

"""

"""
get_image_view_handle_nvx(device, info::ImageViewHandleInfoNVX) = get_image_view_handle_nvx(device, convert(_ImageViewHandleInfoNVX, info))

"""

"""
get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR) = get_physical_device_surface_present_modes_2_ext(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info))

"""

"""
get_device_group_surface_present_modes_2_ext(device, surface_info::PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR) = get_device_group_surface_present_modes_2_ext(device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info), modes)

"""

"""
get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::QueryPoolPerformanceCreateInfoKHR) = get_physical_device_queue_family_performance_query_passes_khr(physical_device, convert(_QueryPoolPerformanceCreateInfoKHR, performance_query_create_info))

"""

"""
acquire_profiling_lock_khr(device, info::AcquireProfilingLockInfoKHR) = acquire_profiling_lock_khr(device, convert(_AcquireProfilingLockInfoKHR, info))

"""

"""
get_buffer_opaque_capture_address(device, info::BufferDeviceAddressInfo) = get_buffer_opaque_capture_address(device, convert(_BufferDeviceAddressInfo, info))

"""

"""
get_buffer_device_address(device, info::BufferDeviceAddressInfo) = get_buffer_device_address(device, convert(_BufferDeviceAddressInfo, info))

"""

"""
create_headless_surface_ext(instance, create_info::HeadlessSurfaceCreateInfoEXT; allocator = C_NULL) = create_headless_surface_ext(instance, convert(_HeadlessSurfaceCreateInfoEXT, create_info); allocator)

"""

"""
initialize_performance_api_intel(device, initialize_info::InitializePerformanceApiInfoINTEL) = initialize_performance_api_intel(device, convert(_InitializePerformanceApiInfoINTEL, initialize_info))

"""

"""
cmd_set_performance_marker_intel(command_buffer, marker_info::PerformanceMarkerInfoINTEL) = cmd_set_performance_marker_intel(command_buffer, convert(_PerformanceMarkerInfoINTEL, marker_info))

"""

"""
cmd_set_performance_stream_marker_intel(command_buffer, marker_info::PerformanceStreamMarkerInfoINTEL) = cmd_set_performance_stream_marker_intel(command_buffer, convert(_PerformanceStreamMarkerInfoINTEL, marker_info))

"""

"""
cmd_set_performance_override_intel(command_buffer, override_info::PerformanceOverrideInfoINTEL) = cmd_set_performance_override_intel(command_buffer, convert(_PerformanceOverrideInfoINTEL, override_info))

"""

"""
acquire_performance_configuration_intel(device, acquire_info::PerformanceConfigurationAcquireInfoINTEL) = acquire_performance_configuration_intel(device, convert(_PerformanceConfigurationAcquireInfoINTEL, acquire_info))

"""

"""
get_device_memory_opaque_capture_address(device, info::DeviceMemoryOpaqueCaptureAddressInfo) = get_device_memory_opaque_capture_address(device, convert(_DeviceMemoryOpaqueCaptureAddressInfo, info))

"""

"""
get_pipeline_executable_properties_khr(device, pipeline_info::PipelineInfoKHR) = get_pipeline_executable_properties_khr(device, convert(_PipelineInfoKHR, pipeline_info))

"""

"""
get_pipeline_executable_statistics_khr(device, executable_info::PipelineExecutableInfoKHR) = get_pipeline_executable_statistics_khr(device, convert(_PipelineExecutableInfoKHR, executable_info))

"""

"""
get_pipeline_executable_internal_representations_khr(device, executable_info::PipelineExecutableInfoKHR) = get_pipeline_executable_internal_representations_khr(device, convert(_PipelineExecutableInfoKHR, executable_info))

"""

"""
create_acceleration_structure_khr(device, create_info::AccelerationStructureCreateInfoKHR; allocator = C_NULL) = create_acceleration_structure_khr(device, convert(_AccelerationStructureCreateInfoKHR, create_info); allocator)

"""

"""
cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray, build_range_infos::AbstractArray) = cmd_build_acceleration_structures_khr(command_buffer, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), convert(AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, build_range_infos))

"""

"""
cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray) = cmd_build_acceleration_structures_indirect_khr(command_buffer, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), indirect_device_addresses, indirect_strides, max_primitive_counts)

"""

"""
build_acceleration_structures_khr(device, infos::AbstractArray, build_range_infos::AbstractArray; deferred_operation = C_NULL) = build_acceleration_structures_khr(device, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), convert(AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, build_range_infos); deferred_operation)

"""

"""
get_acceleration_structure_device_address_khr(device, info::AccelerationStructureDeviceAddressInfoKHR) = get_acceleration_structure_device_address_khr(device, convert(_AccelerationStructureDeviceAddressInfoKHR, info))

"""

"""
cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray) = cmd_set_viewport_with_count_ext(command_buffer, convert(AbstractArray{_Viewport}, viewports))

"""

"""
cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray) = cmd_set_scissor_with_count_ext(command_buffer, convert(AbstractArray{_Rect2D}, scissors))

"""

"""
create_private_data_slot_ext(device, create_info::PrivateDataSlotCreateInfoEXT; allocator = C_NULL) = create_private_data_slot_ext(device, convert(_PrivateDataSlotCreateInfoEXT, create_info); allocator)

"""

"""
cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::CopyBufferInfo2KHR) = cmd_copy_buffer_2_khr(command_buffer, convert(_CopyBufferInfo2KHR, copy_buffer_info))

"""

"""
cmd_copy_image_2_khr(command_buffer, copy_image_info::CopyImageInfo2KHR) = cmd_copy_image_2_khr(command_buffer, convert(_CopyImageInfo2KHR, copy_image_info))

"""

"""
cmd_blit_image_2_khr(command_buffer, blit_image_info::BlitImageInfo2KHR) = cmd_blit_image_2_khr(command_buffer, convert(_BlitImageInfo2KHR, blit_image_info))

"""

"""
cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::CopyBufferToImageInfo2KHR) = cmd_copy_buffer_to_image_2_khr(command_buffer, convert(_CopyBufferToImageInfo2KHR, copy_buffer_to_image_info))

"""

"""
cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::CopyImageToBufferInfo2KHR) = cmd_copy_image_to_buffer_2_khr(command_buffer, convert(_CopyImageToBufferInfo2KHR, copy_image_to_buffer_info))

"""

"""
cmd_resolve_image_2_khr(command_buffer, resolve_image_info::ResolveImageInfo2KHR) = cmd_resolve_image_2_khr(command_buffer, convert(_ResolveImageInfo2KHR, resolve_image_info))

"""

"""
cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}) = cmd_set_fragment_shading_rate_khr(command_buffer, convert(_Extent2D, fragment_size), combiner_ops)

"""

"""
get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::AccelerationStructureBuildGeometryInfoKHR; max_primitive_counts = C_NULL) = get_acceleration_structure_build_sizes_khr(device, build_type, convert(_AccelerationStructureBuildGeometryInfoKHR, build_info); max_primitive_counts)

"""

"""
cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray) = cmd_set_vertex_input_ext(command_buffer, convert(AbstractArray{_VertexInputBindingDescription2EXT}, vertex_binding_descriptions), convert(AbstractArray{_VertexInputAttributeDescription2EXT}, vertex_attribute_descriptions))

"""

"""
cmd_set_event_2_khr(command_buffer, event, dependency_info::DependencyInfoKHR) = cmd_set_event_2_khr(command_buffer, event, convert(_DependencyInfoKHR, dependency_info))

"""

"""
cmd_wait_events_2_khr(command_buffer, events::AbstractArray, dependency_infos::AbstractArray) = cmd_wait_events_2_khr(command_buffer, events, convert(AbstractArray{_DependencyInfoKHR}, dependency_infos))

"""

"""
cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::DependencyInfoKHR) = cmd_pipeline_barrier_2_khr(command_buffer, convert(_DependencyInfoKHR, dependency_info))

"""

"""
queue_submit_2_khr(queue, submits::AbstractArray; fence = C_NULL) = queue_submit_2_khr(queue, convert(AbstractArray{_SubmitInfo2KHR}, submits); fence)

"""

"""
create_instance(create_info::InstanceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_instance(convert(_InstanceCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_device(physical_device, create_info::DeviceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_device(physical_device, convert(_DeviceCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
queue_submit(queue, submits::AbstractArray, fptr::FunctionPtr; fence = C_NULL) = queue_submit(queue, convert(AbstractArray{_SubmitInfo}, submits), fptr; fence)

"""

"""
allocate_memory(device, allocate_info::MemoryAllocateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = allocate_memory(device, convert(_MemoryAllocateInfo, allocate_info), fptr_create, fptr_destroy; allocator)

"""

"""
flush_mapped_memory_ranges(device, memory_ranges::AbstractArray, fptr::FunctionPtr) = flush_mapped_memory_ranges(device, convert(AbstractArray{_MappedMemoryRange}, memory_ranges), fptr)

"""

"""
invalidate_mapped_memory_ranges(device, memory_ranges::AbstractArray, fptr::FunctionPtr) = invalidate_mapped_memory_ranges(device, convert(AbstractArray{_MappedMemoryRange}, memory_ranges), fptr)

"""

"""
queue_bind_sparse(queue, bind_info::AbstractArray, fptr::FunctionPtr; fence = C_NULL) = queue_bind_sparse(queue, convert(AbstractArray{_BindSparseInfo}, bind_info), fptr; fence)

"""

"""
create_fence(device, create_info::FenceCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_fence(device, convert(_FenceCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_semaphore(device, create_info::SemaphoreCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_semaphore(device, convert(_SemaphoreCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_event(device, create_info::EventCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_event(device, convert(_EventCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_query_pool(device, create_info::QueryPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_query_pool(device, convert(_QueryPoolCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_buffer(device, create_info::BufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_buffer(device, convert(_BufferCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_buffer_view(device, create_info::BufferViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_buffer_view(device, convert(_BufferViewCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_image(device, create_info::ImageCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_image(device, convert(_ImageCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
get_image_subresource_layout(device, image, subresource::ImageSubresource, fptr::FunctionPtr) = get_image_subresource_layout(device, image, convert(_ImageSubresource, subresource), fptr)

"""

"""
create_image_view(device, create_info::ImageViewCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_image_view(device, convert(_ImageViewCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_shader_module(device, create_info::ShaderModuleCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_shader_module(device, convert(_ShaderModuleCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_pipeline_cache(device, create_info::PipelineCacheCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_pipeline_cache(device, convert(_PipelineCacheCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_graphics_pipelines(device, create_infos::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL) = create_graphics_pipelines(device, convert(AbstractArray{_GraphicsPipelineCreateInfo}, create_infos), fptr_create, fptr_destroy; pipeline_cache, allocator)

"""

"""
create_compute_pipelines(device, create_infos::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL) = create_compute_pipelines(device, convert(AbstractArray{_ComputePipelineCreateInfo}, create_infos), fptr_create, fptr_destroy; pipeline_cache, allocator)

"""

"""
create_pipeline_layout(device, create_info::PipelineLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_pipeline_layout(device, convert(_PipelineLayoutCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_sampler(device, create_info::SamplerCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_sampler(device, convert(_SamplerCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_descriptor_set_layout(device, create_info::DescriptorSetLayoutCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_descriptor_set_layout(device, convert(_DescriptorSetLayoutCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_descriptor_pool(device, create_info::DescriptorPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_descriptor_pool(device, convert(_DescriptorPoolCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
allocate_descriptor_sets(device, allocate_info::DescriptorSetAllocateInfo, fptr_create::FunctionPtr) = allocate_descriptor_sets(device, convert(_DescriptorSetAllocateInfo, allocate_info), fptr_create)

"""

"""
update_descriptor_sets(device, descriptor_writes::AbstractArray, descriptor_copies::AbstractArray, fptr::FunctionPtr) = update_descriptor_sets(device, convert(AbstractArray{_WriteDescriptorSet}, descriptor_writes), convert(AbstractArray{_CopyDescriptorSet}, descriptor_copies), fptr)

"""

"""
create_framebuffer(device, create_info::FramebufferCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_framebuffer(device, convert(_FramebufferCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_render_pass(device, create_info::RenderPassCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_render_pass(device, convert(_RenderPassCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_command_pool(device, create_info::CommandPoolCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_command_pool(device, convert(_CommandPoolCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
allocate_command_buffers(device, allocate_info::CommandBufferAllocateInfo, fptr_create::FunctionPtr) = allocate_command_buffers(device, convert(_CommandBufferAllocateInfo, allocate_info), fptr_create)

"""

"""
begin_command_buffer(command_buffer, begin_info::CommandBufferBeginInfo, fptr::FunctionPtr) = begin_command_buffer(command_buffer, convert(_CommandBufferBeginInfo, begin_info), fptr)

"""

"""
cmd_set_viewport(command_buffer, viewports::AbstractArray, fptr::FunctionPtr) = cmd_set_viewport(command_buffer, convert(AbstractArray{_Viewport}, viewports), fptr)

"""

"""
cmd_set_scissor(command_buffer, scissors::AbstractArray, fptr::FunctionPtr) = cmd_set_scissor(command_buffer, convert(AbstractArray{_Rect2D}, scissors), fptr)

"""

"""
cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, regions::AbstractArray, fptr::FunctionPtr) = cmd_copy_buffer(command_buffer, src_buffer, dst_buffer, convert(AbstractArray{_BufferCopy}, regions), fptr)

"""

"""
cmd_copy_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, fptr::FunctionPtr) = cmd_copy_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageCopy}, regions), fptr)

"""

"""
cmd_blit_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, filter::Filter, fptr::FunctionPtr) = cmd_blit_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageBlit}, regions), filter, fptr)

"""

"""
cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, fptr::FunctionPtr) = cmd_copy_buffer_to_image(command_buffer, src_buffer, dst_image, dst_image_layout, convert(AbstractArray{_BufferImageCopy}, regions), fptr)

"""

"""
cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout::ImageLayout, dst_buffer, regions::AbstractArray, fptr::FunctionPtr) = cmd_copy_image_to_buffer(command_buffer, src_image, src_image_layout, dst_buffer, convert(AbstractArray{_BufferImageCopy}, regions), fptr)

"""

"""
cmd_clear_color_image(command_buffer, image, image_layout::ImageLayout, color::ClearColorValue, ranges::AbstractArray, fptr::FunctionPtr) = cmd_clear_color_image(command_buffer, image, image_layout, convert(_ClearColorValue, color), convert(AbstractArray{_ImageSubresourceRange}, ranges), fptr)

"""

"""
cmd_clear_depth_stencil_image(command_buffer, image, image_layout::ImageLayout, depth_stencil::ClearDepthStencilValue, ranges::AbstractArray, fptr::FunctionPtr) = cmd_clear_depth_stencil_image(command_buffer, image, image_layout, convert(_ClearDepthStencilValue, depth_stencil), convert(AbstractArray{_ImageSubresourceRange}, ranges), fptr)

"""

"""
cmd_clear_attachments(command_buffer, attachments::AbstractArray, rects::AbstractArray, fptr::FunctionPtr) = cmd_clear_attachments(command_buffer, convert(AbstractArray{_ClearAttachment}, attachments), convert(AbstractArray{_ClearRect}, rects), fptr)

"""

"""
cmd_resolve_image(command_buffer, src_image, src_image_layout::ImageLayout, dst_image, dst_image_layout::ImageLayout, regions::AbstractArray, fptr::FunctionPtr) = cmd_resolve_image(command_buffer, src_image, src_image_layout, dst_image, dst_image_layout, convert(AbstractArray{_ImageResolve}, regions), fptr)

"""

"""
cmd_wait_events(command_buffer, events::AbstractArray, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray, fptr::FunctionPtr; src_stage_mask = 0, dst_stage_mask = 0) = cmd_wait_events(command_buffer, events, convert(AbstractArray{_MemoryBarrier}, memory_barriers), convert(AbstractArray{_BufferMemoryBarrier}, buffer_memory_barriers), convert(AbstractArray{_ImageMemoryBarrier}, image_memory_barriers), fptr; src_stage_mask, dst_stage_mask)

"""

"""
cmd_pipeline_barrier(command_buffer, src_stage_mask::PipelineStageFlag, dst_stage_mask::PipelineStageFlag, memory_barriers::AbstractArray, buffer_memory_barriers::AbstractArray, image_memory_barriers::AbstractArray, fptr::FunctionPtr; dependency_flags = 0) = cmd_pipeline_barrier(command_buffer, src_stage_mask, dst_stage_mask, convert(AbstractArray{_MemoryBarrier}, memory_barriers), convert(AbstractArray{_BufferMemoryBarrier}, buffer_memory_barriers), convert(AbstractArray{_ImageMemoryBarrier}, image_memory_barriers), fptr; dependency_flags)

"""

"""
cmd_begin_conditional_rendering_ext(command_buffer, conditional_rendering_begin::ConditionalRenderingBeginInfoEXT, fptr::FunctionPtr) = cmd_begin_conditional_rendering_ext(command_buffer, convert(_ConditionalRenderingBeginInfoEXT, conditional_rendering_begin), fptr)

"""

"""
cmd_begin_render_pass(command_buffer, render_pass_begin::RenderPassBeginInfo, contents::SubpassContents, fptr::FunctionPtr) = cmd_begin_render_pass(command_buffer, convert(_RenderPassBeginInfo, render_pass_begin), contents, fptr)

"""

"""
create_display_mode_khr(physical_device, display, create_info::DisplayModeCreateInfoKHR, fptr_create::FunctionPtr; allocator = C_NULL) = create_display_mode_khr(physical_device, display, convert(_DisplayModeCreateInfoKHR, create_info), fptr_create; allocator)

"""

"""
create_display_plane_surface_khr(instance, create_info::DisplaySurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_display_plane_surface_khr(instance, convert(_DisplaySurfaceCreateInfoKHR, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_shared_swapchains_khr(device, create_infos::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_shared_swapchains_khr(device, convert(AbstractArray{_SwapchainCreateInfoKHR}, create_infos), fptr_create, fptr_destroy; allocator)

"""

"""
create_swapchain_khr(device, create_info::SwapchainCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_swapchain_khr(device, convert(_SwapchainCreateInfoKHR, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
queue_present_khr(queue, present_info::PresentInfoKHR, fptr::FunctionPtr) = queue_present_khr(queue, convert(_PresentInfoKHR, present_info), fptr)

"""

"""
create_win_32_surface_khr(instance, create_info::Win32SurfaceCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_win_32_surface_khr(instance, convert(_Win32SurfaceCreateInfoKHR, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_debug_report_callback_ext(instance, create_info::DebugReportCallbackCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_debug_report_callback_ext(instance, convert(_DebugReportCallbackCreateInfoEXT, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
debug_marker_set_object_name_ext(device, name_info::DebugMarkerObjectNameInfoEXT, fptr::FunctionPtr) = debug_marker_set_object_name_ext(device, convert(_DebugMarkerObjectNameInfoEXT, name_info), fptr)

"""

"""
debug_marker_set_object_tag_ext(device, tag_info::DebugMarkerObjectTagInfoEXT, fptr::FunctionPtr) = debug_marker_set_object_tag_ext(device, convert(_DebugMarkerObjectTagInfoEXT, tag_info), fptr)

"""

"""
cmd_debug_marker_begin_ext(command_buffer, marker_info::DebugMarkerMarkerInfoEXT, fptr::FunctionPtr) = cmd_debug_marker_begin_ext(command_buffer, convert(_DebugMarkerMarkerInfoEXT, marker_info), fptr)

"""

"""
cmd_debug_marker_insert_ext(command_buffer, marker_info::DebugMarkerMarkerInfoEXT, fptr::FunctionPtr) = cmd_debug_marker_insert_ext(command_buffer, convert(_DebugMarkerMarkerInfoEXT, marker_info), fptr)

"""

"""
cmd_execute_generated_commands_nv(command_buffer, is_preprocessed::Bool, generated_commands_info::GeneratedCommandsInfoNV, fptr::FunctionPtr) = cmd_execute_generated_commands_nv(command_buffer, is_preprocessed, convert(_GeneratedCommandsInfoNV, generated_commands_info), fptr)

"""

"""
cmd_preprocess_generated_commands_nv(command_buffer, generated_commands_info::GeneratedCommandsInfoNV, fptr::FunctionPtr) = cmd_preprocess_generated_commands_nv(command_buffer, convert(_GeneratedCommandsInfoNV, generated_commands_info), fptr)

"""

"""
get_generated_commands_memory_requirements_nv(device, info::GeneratedCommandsMemoryRequirementsInfoNV, fptr::FunctionPtr) = get_generated_commands_memory_requirements_nv(device, convert(_GeneratedCommandsMemoryRequirementsInfoNV, info), fptr)

"""

"""
create_indirect_commands_layout_nv(device, create_info::IndirectCommandsLayoutCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_indirect_commands_layout_nv(device, convert(_IndirectCommandsLayoutCreateInfoNV, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
get_physical_device_image_format_properties_2(physical_device, image_format_info::PhysicalDeviceImageFormatInfo2, fptr::FunctionPtr) = get_physical_device_image_format_properties_2(physical_device, convert(_PhysicalDeviceImageFormatInfo2, image_format_info), fptr)

"""

"""
get_physical_device_sparse_image_format_properties_2(physical_device, format_info::PhysicalDeviceSparseImageFormatInfo2, fptr::FunctionPtr) = get_physical_device_sparse_image_format_properties_2(physical_device, convert(_PhysicalDeviceSparseImageFormatInfo2, format_info), fptr)

"""

"""
cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point::PipelineBindPoint, layout, set::Integer, descriptor_writes::AbstractArray, fptr::FunctionPtr) = cmd_push_descriptor_set_khr(command_buffer, pipeline_bind_point, layout, set, convert(AbstractArray{_WriteDescriptorSet}, descriptor_writes), fptr)

"""

"""
get_physical_device_external_buffer_properties(physical_device, external_buffer_info::PhysicalDeviceExternalBufferInfo, fptr::FunctionPtr) = get_physical_device_external_buffer_properties(physical_device, convert(_PhysicalDeviceExternalBufferInfo, external_buffer_info), fptr)

"""

"""
get_memory_win_32_handle_khr(device, get_win_32_handle_info::MemoryGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr) = get_memory_win_32_handle_khr(device, convert(_MemoryGetWin32HandleInfoKHR, get_win_32_handle_info), handle, fptr)

"""

"""
get_memory_fd_khr(device, get_fd_info::MemoryGetFdInfoKHR, fptr::FunctionPtr) = get_memory_fd_khr(device, convert(_MemoryGetFdInfoKHR, get_fd_info), fptr)

"""

"""
get_physical_device_external_semaphore_properties(physical_device, external_semaphore_info::PhysicalDeviceExternalSemaphoreInfo, fptr::FunctionPtr) = get_physical_device_external_semaphore_properties(physical_device, convert(_PhysicalDeviceExternalSemaphoreInfo, external_semaphore_info), fptr)

"""

"""
get_semaphore_win_32_handle_khr(device, get_win_32_handle_info::SemaphoreGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr) = get_semaphore_win_32_handle_khr(device, convert(_SemaphoreGetWin32HandleInfoKHR, get_win_32_handle_info), handle, fptr)

"""

"""
import_semaphore_win_32_handle_khr(device, import_semaphore_win_32_handle_info::ImportSemaphoreWin32HandleInfoKHR, fptr::FunctionPtr) = import_semaphore_win_32_handle_khr(device, convert(_ImportSemaphoreWin32HandleInfoKHR, import_semaphore_win_32_handle_info), fptr)

"""

"""
get_semaphore_fd_khr(device, get_fd_info::SemaphoreGetFdInfoKHR, fptr::FunctionPtr) = get_semaphore_fd_khr(device, convert(_SemaphoreGetFdInfoKHR, get_fd_info), fptr)

"""

"""
import_semaphore_fd_khr(device, import_semaphore_fd_info::ImportSemaphoreFdInfoKHR, fptr::FunctionPtr) = import_semaphore_fd_khr(device, convert(_ImportSemaphoreFdInfoKHR, import_semaphore_fd_info), fptr)

"""

"""
get_physical_device_external_fence_properties(physical_device, external_fence_info::PhysicalDeviceExternalFenceInfo, fptr::FunctionPtr) = get_physical_device_external_fence_properties(physical_device, convert(_PhysicalDeviceExternalFenceInfo, external_fence_info), fptr)

"""

"""
get_fence_win_32_handle_khr(device, get_win_32_handle_info::FenceGetWin32HandleInfoKHR, handle::vk.HANDLE, fptr::FunctionPtr) = get_fence_win_32_handle_khr(device, convert(_FenceGetWin32HandleInfoKHR, get_win_32_handle_info), handle, fptr)

"""

"""
import_fence_win_32_handle_khr(device, import_fence_win_32_handle_info::ImportFenceWin32HandleInfoKHR, fptr::FunctionPtr) = import_fence_win_32_handle_khr(device, convert(_ImportFenceWin32HandleInfoKHR, import_fence_win_32_handle_info), fptr)

"""

"""
get_fence_fd_khr(device, get_fd_info::FenceGetFdInfoKHR, fptr::FunctionPtr) = get_fence_fd_khr(device, convert(_FenceGetFdInfoKHR, get_fd_info), fptr)

"""

"""
import_fence_fd_khr(device, import_fence_fd_info::ImportFenceFdInfoKHR, fptr::FunctionPtr) = import_fence_fd_khr(device, convert(_ImportFenceFdInfoKHR, import_fence_fd_info), fptr)

"""

"""
display_power_control_ext(device, display, display_power_info::DisplayPowerInfoEXT, fptr::FunctionPtr) = display_power_control_ext(device, display, convert(_DisplayPowerInfoEXT, display_power_info), fptr)

"""

"""
register_device_event_ext(device, device_event_info::DeviceEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL) = register_device_event_ext(device, convert(_DeviceEventInfoEXT, device_event_info), fptr; allocator)

"""

"""
register_display_event_ext(device, display, display_event_info::DisplayEventInfoEXT, fptr::FunctionPtr; allocator = C_NULL) = register_display_event_ext(device, display, convert(_DisplayEventInfoEXT, display_event_info), fptr; allocator)

"""

"""
bind_buffer_memory_2(device, bind_infos::AbstractArray, fptr::FunctionPtr) = bind_buffer_memory_2(device, convert(AbstractArray{_BindBufferMemoryInfo}, bind_infos), fptr)

"""

"""
bind_image_memory_2(device, bind_infos::AbstractArray, fptr::FunctionPtr) = bind_image_memory_2(device, convert(AbstractArray{_BindImageMemoryInfo}, bind_infos), fptr)

"""

"""
acquire_next_image_2_khr(device, acquire_info::AcquireNextImageInfoKHR, fptr::FunctionPtr) = acquire_next_image_2_khr(device, convert(_AcquireNextImageInfoKHR, acquire_info), fptr)

"""

"""
create_descriptor_update_template(device, create_info::DescriptorUpdateTemplateCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_descriptor_update_template(device, convert(_DescriptorUpdateTemplateCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
set_hdr_metadata_ext(device, swapchains::AbstractArray, metadata::AbstractArray, fptr::FunctionPtr) = set_hdr_metadata_ext(device, swapchains, convert(AbstractArray{_HdrMetadataEXT}, metadata), fptr)

"""

"""
cmd_set_viewport_w_scaling_nv(command_buffer, viewport_w_scalings::AbstractArray, fptr::FunctionPtr) = cmd_set_viewport_w_scaling_nv(command_buffer, convert(AbstractArray{_ViewportWScalingNV}, viewport_w_scalings), fptr)

"""

"""
cmd_set_discard_rectangle_ext(command_buffer, discard_rectangles::AbstractArray, fptr::FunctionPtr) = cmd_set_discard_rectangle_ext(command_buffer, convert(AbstractArray{_Rect2D}, discard_rectangles), fptr)

"""

"""
cmd_set_sample_locations_ext(command_buffer, sample_locations_info::SampleLocationsInfoEXT, fptr::FunctionPtr) = cmd_set_sample_locations_ext(command_buffer, convert(_SampleLocationsInfoEXT, sample_locations_info), fptr)

"""

"""
get_physical_device_surface_capabilities_2_khr(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr) = get_physical_device_surface_capabilities_2_khr(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info), fptr)

"""

"""
get_physical_device_surface_formats_2_khr(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr) = get_physical_device_surface_formats_2_khr(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info), fptr)

"""

"""
get_display_plane_capabilities_2_khr(physical_device, display_plane_info::DisplayPlaneInfo2KHR, fptr::FunctionPtr) = get_display_plane_capabilities_2_khr(physical_device, convert(_DisplayPlaneInfo2KHR, display_plane_info), fptr)

"""

"""
get_buffer_memory_requirements_2(device, info::BufferMemoryRequirementsInfo2, fptr::FunctionPtr) = get_buffer_memory_requirements_2(device, convert(_BufferMemoryRequirementsInfo2, info), fptr)

"""

"""
get_image_memory_requirements_2(device, info::ImageMemoryRequirementsInfo2, fptr::FunctionPtr) = get_image_memory_requirements_2(device, convert(_ImageMemoryRequirementsInfo2, info), fptr)

"""

"""
get_image_sparse_memory_requirements_2(device, info::ImageSparseMemoryRequirementsInfo2, fptr::FunctionPtr) = get_image_sparse_memory_requirements_2(device, convert(_ImageSparseMemoryRequirementsInfo2, info), fptr)

"""

"""
create_sampler_ycbcr_conversion(device, create_info::SamplerYcbcrConversionCreateInfo, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_sampler_ycbcr_conversion(device, convert(_SamplerYcbcrConversionCreateInfo, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
get_device_queue_2(device, queue_info::DeviceQueueInfo2, fptr::FunctionPtr) = get_device_queue_2(device, convert(_DeviceQueueInfo2, queue_info), fptr)

"""

"""
create_validation_cache_ext(device, create_info::ValidationCacheCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_validation_cache_ext(device, convert(_ValidationCacheCreateInfoEXT, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
get_descriptor_set_layout_support(device, create_info::DescriptorSetLayoutCreateInfo, fptr::FunctionPtr) = get_descriptor_set_layout_support(device, convert(_DescriptorSetLayoutCreateInfo, create_info), fptr)

"""

"""
get_calibrated_timestamps_ext(device, timestamp_infos::AbstractArray, fptr::FunctionPtr) = get_calibrated_timestamps_ext(device, convert(AbstractArray{_CalibratedTimestampInfoEXT}, timestamp_infos), fptr)

"""

"""
set_debug_utils_object_name_ext(device, name_info::DebugUtilsObjectNameInfoEXT, fptr::FunctionPtr) = set_debug_utils_object_name_ext(device, convert(_DebugUtilsObjectNameInfoEXT, name_info), fptr)

"""

"""
set_debug_utils_object_tag_ext(device, tag_info::DebugUtilsObjectTagInfoEXT, fptr::FunctionPtr) = set_debug_utils_object_tag_ext(device, convert(_DebugUtilsObjectTagInfoEXT, tag_info), fptr)

"""

"""
queue_begin_debug_utils_label_ext(queue, label_info::DebugUtilsLabelEXT, fptr::FunctionPtr) = queue_begin_debug_utils_label_ext(queue, convert(_DebugUtilsLabelEXT, label_info), fptr)

"""

"""
queue_insert_debug_utils_label_ext(queue, label_info::DebugUtilsLabelEXT, fptr::FunctionPtr) = queue_insert_debug_utils_label_ext(queue, convert(_DebugUtilsLabelEXT, label_info), fptr)

"""

"""
cmd_begin_debug_utils_label_ext(command_buffer, label_info::DebugUtilsLabelEXT, fptr::FunctionPtr) = cmd_begin_debug_utils_label_ext(command_buffer, convert(_DebugUtilsLabelEXT, label_info), fptr)

"""

"""
cmd_insert_debug_utils_label_ext(command_buffer, label_info::DebugUtilsLabelEXT, fptr::FunctionPtr) = cmd_insert_debug_utils_label_ext(command_buffer, convert(_DebugUtilsLabelEXT, label_info), fptr)

"""

"""
create_debug_utils_messenger_ext(instance, create_info::DebugUtilsMessengerCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_debug_utils_messenger_ext(instance, convert(_DebugUtilsMessengerCreateInfoEXT, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
submit_debug_utils_message_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_types::DebugUtilsMessageTypeFlagEXT, callback_data::DebugUtilsMessengerCallbackDataEXT, fptr::FunctionPtr) = submit_debug_utils_message_ext(instance, message_severity, message_types, convert(_DebugUtilsMessengerCallbackDataEXT, callback_data), fptr)

"""

"""
create_render_pass_2(device, create_info::RenderPassCreateInfo2, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_render_pass_2(device, convert(_RenderPassCreateInfo2, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
cmd_begin_render_pass_2(command_buffer, render_pass_begin::RenderPassBeginInfo, subpass_begin_info::SubpassBeginInfo, fptr::FunctionPtr) = cmd_begin_render_pass_2(command_buffer, convert(_RenderPassBeginInfo, render_pass_begin), convert(_SubpassBeginInfo, subpass_begin_info), fptr)

"""

"""
cmd_next_subpass_2(command_buffer, subpass_begin_info::SubpassBeginInfo, subpass_end_info::SubpassEndInfo, fptr::FunctionPtr) = cmd_next_subpass_2(command_buffer, convert(_SubpassBeginInfo, subpass_begin_info), convert(_SubpassEndInfo, subpass_end_info), fptr)

"""

"""
cmd_end_render_pass_2(command_buffer, subpass_end_info::SubpassEndInfo, fptr::FunctionPtr) = cmd_end_render_pass_2(command_buffer, convert(_SubpassEndInfo, subpass_end_info), fptr)

"""

"""
wait_semaphores(device, wait_info::SemaphoreWaitInfo, timeout::Integer, fptr::FunctionPtr) = wait_semaphores(device, convert(_SemaphoreWaitInfo, wait_info), timeout, fptr)

"""

"""
signal_semaphore(device, signal_info::SemaphoreSignalInfo, fptr::FunctionPtr) = signal_semaphore(device, convert(_SemaphoreSignalInfo, signal_info), fptr)

"""

"""
cmd_set_exclusive_scissor_nv(command_buffer, exclusive_scissors::AbstractArray, fptr::FunctionPtr) = cmd_set_exclusive_scissor_nv(command_buffer, convert(AbstractArray{_Rect2D}, exclusive_scissors), fptr)

"""

"""
cmd_set_viewport_shading_rate_palette_nv(command_buffer, shading_rate_palettes::AbstractArray, fptr::FunctionPtr) = cmd_set_viewport_shading_rate_palette_nv(command_buffer, convert(AbstractArray{_ShadingRatePaletteNV}, shading_rate_palettes), fptr)

"""

"""
cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type::CoarseSampleOrderTypeNV, custom_sample_orders::AbstractArray, fptr::FunctionPtr) = cmd_set_coarse_sample_order_nv(command_buffer, sample_order_type, convert(AbstractArray{_CoarseSampleOrderCustomNV}, custom_sample_orders), fptr)

"""

"""
create_acceleration_structure_nv(device, create_info::AccelerationStructureCreateInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_acceleration_structure_nv(device, convert(_AccelerationStructureCreateInfoNV, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
get_acceleration_structure_memory_requirements_nv(device, info::AccelerationStructureMemoryRequirementsInfoNV, fptr::FunctionPtr) = get_acceleration_structure_memory_requirements_nv(device, convert(_AccelerationStructureMemoryRequirementsInfoNV, info), fptr)

"""

"""
bind_acceleration_structure_memory_nv(device, bind_infos::AbstractArray, fptr::FunctionPtr) = bind_acceleration_structure_memory_nv(device, convert(AbstractArray{_BindAccelerationStructureMemoryInfoNV}, bind_infos), fptr)

"""

"""
cmd_copy_acceleration_structure_khr(command_buffer, info::CopyAccelerationStructureInfoKHR, fptr::FunctionPtr) = cmd_copy_acceleration_structure_khr(command_buffer, convert(_CopyAccelerationStructureInfoKHR, info), fptr)

"""

"""
copy_acceleration_structure_khr(device, info::CopyAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL) = copy_acceleration_structure_khr(device, convert(_CopyAccelerationStructureInfoKHR, info), fptr; deferred_operation)

"""

"""
cmd_copy_acceleration_structure_to_memory_khr(command_buffer, info::CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr) = cmd_copy_acceleration_structure_to_memory_khr(command_buffer, convert(_CopyAccelerationStructureToMemoryInfoKHR, info), fptr)

"""

"""
copy_acceleration_structure_to_memory_khr(device, info::CopyAccelerationStructureToMemoryInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL) = copy_acceleration_structure_to_memory_khr(device, convert(_CopyAccelerationStructureToMemoryInfoKHR, info), fptr; deferred_operation)

"""

"""
cmd_copy_memory_to_acceleration_structure_khr(command_buffer, info::CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr) = cmd_copy_memory_to_acceleration_structure_khr(command_buffer, convert(_CopyMemoryToAccelerationStructureInfoKHR, info), fptr)

"""

"""
copy_memory_to_acceleration_structure_khr(device, info::CopyMemoryToAccelerationStructureInfoKHR, fptr::FunctionPtr; deferred_operation = C_NULL) = copy_memory_to_acceleration_structure_khr(device, convert(_CopyMemoryToAccelerationStructureInfoKHR, info), fptr; deferred_operation)

"""

"""
cmd_build_acceleration_structure_nv(command_buffer, info::AccelerationStructureInfoNV, instance_offset::Integer, update::Bool, dst, scratch, scratch_offset::Integer, fptr::FunctionPtr; instance_data = C_NULL, src = C_NULL) = cmd_build_acceleration_structure_nv(command_buffer, convert(_AccelerationStructureInfoNV, info), instance_offset, update, dst, scratch, scratch_offset, fptr; instance_data, src)

"""

"""
cmd_trace_rays_khr(command_buffer, raygen_shader_binding_table::StridedDeviceAddressRegionKHR, miss_shader_binding_table::StridedDeviceAddressRegionKHR, hit_shader_binding_table::StridedDeviceAddressRegionKHR, callable_shader_binding_table::StridedDeviceAddressRegionKHR, width::Integer, height::Integer, depth::Integer, fptr::FunctionPtr) = cmd_trace_rays_khr(command_buffer, convert(_StridedDeviceAddressRegionKHR, raygen_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, miss_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, hit_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, callable_shader_binding_table), width, height, depth, fptr)

"""

"""
create_ray_tracing_pipelines_nv(device, create_infos::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; pipeline_cache = C_NULL, allocator = C_NULL) = create_ray_tracing_pipelines_nv(device, convert(AbstractArray{_RayTracingPipelineCreateInfoNV}, create_infos), fptr_create, fptr_destroy; pipeline_cache, allocator)

"""

"""
create_ray_tracing_pipelines_khr(device, create_infos::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; deferred_operation = C_NULL, pipeline_cache = C_NULL, allocator = C_NULL) = create_ray_tracing_pipelines_khr(device, convert(AbstractArray{_RayTracingPipelineCreateInfoKHR}, create_infos), fptr_create, fptr_destroy; deferred_operation, pipeline_cache, allocator)

"""

"""
cmd_trace_rays_indirect_khr(command_buffer, raygen_shader_binding_table::StridedDeviceAddressRegionKHR, miss_shader_binding_table::StridedDeviceAddressRegionKHR, hit_shader_binding_table::StridedDeviceAddressRegionKHR, callable_shader_binding_table::StridedDeviceAddressRegionKHR, indirect_device_address::Integer, fptr::FunctionPtr) = cmd_trace_rays_indirect_khr(command_buffer, convert(_StridedDeviceAddressRegionKHR, raygen_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, miss_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, hit_shader_binding_table), convert(_StridedDeviceAddressRegionKHR, callable_shader_binding_table), indirect_device_address, fptr)

"""

"""
get_device_acceleration_structure_compatibility_khr(device, version_info::AccelerationStructureVersionInfoKHR, fptr::FunctionPtr) = get_device_acceleration_structure_compatibility_khr(device, convert(_AccelerationStructureVersionInfoKHR, version_info), fptr)

"""

"""
get_image_view_handle_nvx(device, info::ImageViewHandleInfoNVX, fptr::FunctionPtr) = get_image_view_handle_nvx(device, convert(_ImageViewHandleInfoNVX, info), fptr)

"""

"""
get_physical_device_surface_present_modes_2_ext(physical_device, surface_info::PhysicalDeviceSurfaceInfo2KHR, fptr::FunctionPtr) = get_physical_device_surface_present_modes_2_ext(physical_device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info), fptr)

"""

"""
get_device_group_surface_present_modes_2_ext(device, surface_info::PhysicalDeviceSurfaceInfo2KHR, modes::DeviceGroupPresentModeFlagKHR, fptr::FunctionPtr) = get_device_group_surface_present_modes_2_ext(device, convert(_PhysicalDeviceSurfaceInfo2KHR, surface_info), modes, fptr)

"""

"""
get_physical_device_queue_family_performance_query_passes_khr(physical_device, performance_query_create_info::QueryPoolPerformanceCreateInfoKHR, fptr::FunctionPtr) = get_physical_device_queue_family_performance_query_passes_khr(physical_device, convert(_QueryPoolPerformanceCreateInfoKHR, performance_query_create_info), fptr)

"""

"""
acquire_profiling_lock_khr(device, info::AcquireProfilingLockInfoKHR, fptr::FunctionPtr) = acquire_profiling_lock_khr(device, convert(_AcquireProfilingLockInfoKHR, info), fptr)

"""

"""
get_buffer_opaque_capture_address(device, info::BufferDeviceAddressInfo, fptr::FunctionPtr) = get_buffer_opaque_capture_address(device, convert(_BufferDeviceAddressInfo, info), fptr)

"""

"""
get_buffer_device_address(device, info::BufferDeviceAddressInfo, fptr::FunctionPtr) = get_buffer_device_address(device, convert(_BufferDeviceAddressInfo, info), fptr)

"""

"""
create_headless_surface_ext(instance, create_info::HeadlessSurfaceCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_headless_surface_ext(instance, convert(_HeadlessSurfaceCreateInfoEXT, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
initialize_performance_api_intel(device, initialize_info::InitializePerformanceApiInfoINTEL, fptr::FunctionPtr) = initialize_performance_api_intel(device, convert(_InitializePerformanceApiInfoINTEL, initialize_info), fptr)

"""

"""
cmd_set_performance_marker_intel(command_buffer, marker_info::PerformanceMarkerInfoINTEL, fptr::FunctionPtr) = cmd_set_performance_marker_intel(command_buffer, convert(_PerformanceMarkerInfoINTEL, marker_info), fptr)

"""

"""
cmd_set_performance_stream_marker_intel(command_buffer, marker_info::PerformanceStreamMarkerInfoINTEL, fptr::FunctionPtr) = cmd_set_performance_stream_marker_intel(command_buffer, convert(_PerformanceStreamMarkerInfoINTEL, marker_info), fptr)

"""

"""
cmd_set_performance_override_intel(command_buffer, override_info::PerformanceOverrideInfoINTEL, fptr::FunctionPtr) = cmd_set_performance_override_intel(command_buffer, convert(_PerformanceOverrideInfoINTEL, override_info), fptr)

"""

"""
acquire_performance_configuration_intel(device, acquire_info::PerformanceConfigurationAcquireInfoINTEL, fptr::FunctionPtr) = acquire_performance_configuration_intel(device, convert(_PerformanceConfigurationAcquireInfoINTEL, acquire_info), fptr)

"""

"""
get_device_memory_opaque_capture_address(device, info::DeviceMemoryOpaqueCaptureAddressInfo, fptr::FunctionPtr) = get_device_memory_opaque_capture_address(device, convert(_DeviceMemoryOpaqueCaptureAddressInfo, info), fptr)

"""

"""
get_pipeline_executable_properties_khr(device, pipeline_info::PipelineInfoKHR, fptr::FunctionPtr) = get_pipeline_executable_properties_khr(device, convert(_PipelineInfoKHR, pipeline_info), fptr)

"""

"""
get_pipeline_executable_statistics_khr(device, executable_info::PipelineExecutableInfoKHR, fptr::FunctionPtr) = get_pipeline_executable_statistics_khr(device, convert(_PipelineExecutableInfoKHR, executable_info), fptr)

"""

"""
get_pipeline_executable_internal_representations_khr(device, executable_info::PipelineExecutableInfoKHR, fptr::FunctionPtr) = get_pipeline_executable_internal_representations_khr(device, convert(_PipelineExecutableInfoKHR, executable_info), fptr)

"""

"""
create_acceleration_structure_khr(device, create_info::AccelerationStructureCreateInfoKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_acceleration_structure_khr(device, convert(_AccelerationStructureCreateInfoKHR, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
cmd_build_acceleration_structures_khr(command_buffer, infos::AbstractArray, build_range_infos::AbstractArray, fptr::FunctionPtr) = cmd_build_acceleration_structures_khr(command_buffer, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), convert(AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, build_range_infos), fptr)

"""

"""
cmd_build_acceleration_structures_indirect_khr(command_buffer, infos::AbstractArray, indirect_device_addresses::AbstractArray, indirect_strides::AbstractArray, max_primitive_counts::AbstractArray, fptr::FunctionPtr) = cmd_build_acceleration_structures_indirect_khr(command_buffer, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), indirect_device_addresses, indirect_strides, max_primitive_counts, fptr)

"""

"""
build_acceleration_structures_khr(device, infos::AbstractArray, build_range_infos::AbstractArray, fptr::FunctionPtr; deferred_operation = C_NULL) = build_acceleration_structures_khr(device, convert(AbstractArray{_AccelerationStructureBuildGeometryInfoKHR}, infos), convert(AbstractArray{_AccelerationStructureBuildRangeInfoKHR}, build_range_infos), fptr; deferred_operation)

"""

"""
get_acceleration_structure_device_address_khr(device, info::AccelerationStructureDeviceAddressInfoKHR, fptr::FunctionPtr) = get_acceleration_structure_device_address_khr(device, convert(_AccelerationStructureDeviceAddressInfoKHR, info), fptr)

"""

"""
cmd_set_viewport_with_count_ext(command_buffer, viewports::AbstractArray, fptr::FunctionPtr) = cmd_set_viewport_with_count_ext(command_buffer, convert(AbstractArray{_Viewport}, viewports), fptr)

"""

"""
cmd_set_scissor_with_count_ext(command_buffer, scissors::AbstractArray, fptr::FunctionPtr) = cmd_set_scissor_with_count_ext(command_buffer, convert(AbstractArray{_Rect2D}, scissors), fptr)

"""

"""
create_private_data_slot_ext(device, create_info::PrivateDataSlotCreateInfoEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = create_private_data_slot_ext(device, convert(_PrivateDataSlotCreateInfoEXT, create_info), fptr_create, fptr_destroy; allocator)

"""

"""
cmd_copy_buffer_2_khr(command_buffer, copy_buffer_info::CopyBufferInfo2KHR, fptr::FunctionPtr) = cmd_copy_buffer_2_khr(command_buffer, convert(_CopyBufferInfo2KHR, copy_buffer_info), fptr)

"""

"""
cmd_copy_image_2_khr(command_buffer, copy_image_info::CopyImageInfo2KHR, fptr::FunctionPtr) = cmd_copy_image_2_khr(command_buffer, convert(_CopyImageInfo2KHR, copy_image_info), fptr)

"""

"""
cmd_blit_image_2_khr(command_buffer, blit_image_info::BlitImageInfo2KHR, fptr::FunctionPtr) = cmd_blit_image_2_khr(command_buffer, convert(_BlitImageInfo2KHR, blit_image_info), fptr)

"""

"""
cmd_copy_buffer_to_image_2_khr(command_buffer, copy_buffer_to_image_info::CopyBufferToImageInfo2KHR, fptr::FunctionPtr) = cmd_copy_buffer_to_image_2_khr(command_buffer, convert(_CopyBufferToImageInfo2KHR, copy_buffer_to_image_info), fptr)

"""

"""
cmd_copy_image_to_buffer_2_khr(command_buffer, copy_image_to_buffer_info::CopyImageToBufferInfo2KHR, fptr::FunctionPtr) = cmd_copy_image_to_buffer_2_khr(command_buffer, convert(_CopyImageToBufferInfo2KHR, copy_image_to_buffer_info), fptr)

"""

"""
cmd_resolve_image_2_khr(command_buffer, resolve_image_info::ResolveImageInfo2KHR, fptr::FunctionPtr) = cmd_resolve_image_2_khr(command_buffer, convert(_ResolveImageInfo2KHR, resolve_image_info), fptr)

"""

"""
cmd_set_fragment_shading_rate_khr(command_buffer, fragment_size::Extent2D, combiner_ops::NTuple{2, FragmentShadingRateCombinerOpKHR}, fptr::FunctionPtr) = cmd_set_fragment_shading_rate_khr(command_buffer, convert(_Extent2D, fragment_size), combiner_ops, fptr)

"""

"""
get_acceleration_structure_build_sizes_khr(device, build_type::AccelerationStructureBuildTypeKHR, build_info::AccelerationStructureBuildGeometryInfoKHR, fptr::FunctionPtr; max_primitive_counts = C_NULL) = get_acceleration_structure_build_sizes_khr(device, build_type, convert(_AccelerationStructureBuildGeometryInfoKHR, build_info), fptr; max_primitive_counts)

"""

"""
cmd_set_vertex_input_ext(command_buffer, vertex_binding_descriptions::AbstractArray, vertex_attribute_descriptions::AbstractArray, fptr::FunctionPtr) = cmd_set_vertex_input_ext(command_buffer, convert(AbstractArray{_VertexInputBindingDescription2EXT}, vertex_binding_descriptions), convert(AbstractArray{_VertexInputAttributeDescription2EXT}, vertex_attribute_descriptions), fptr)

"""

"""
cmd_set_event_2_khr(command_buffer, event, dependency_info::DependencyInfoKHR, fptr::FunctionPtr) = cmd_set_event_2_khr(command_buffer, event, convert(_DependencyInfoKHR, dependency_info), fptr)

"""

"""
cmd_wait_events_2_khr(command_buffer, events::AbstractArray, dependency_infos::AbstractArray, fptr::FunctionPtr) = cmd_wait_events_2_khr(command_buffer, events, convert(AbstractArray{_DependencyInfoKHR}, dependency_infos), fptr)

"""

"""
cmd_pipeline_barrier_2_khr(command_buffer, dependency_info::DependencyInfoKHR, fptr::FunctionPtr) = cmd_pipeline_barrier_2_khr(command_buffer, convert(_DependencyInfoKHR, dependency_info), fptr)

"""

"""
queue_submit_2_khr(queue, submits::AbstractArray, fptr::FunctionPtr; fence = C_NULL) = queue_submit_2_khr(queue, convert(AbstractArray{_SubmitInfo2KHR}, submits), fptr; fence)

"""

"""
create_instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = create_instance(_InstanceCreateInfo(enabled_layer_names, enabled_extension_names; next, flags, application_info); allocator)

"""

"""
create_instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = create_instance(_InstanceCreateInfo(enabled_layer_names, enabled_extension_names; next, flags, application_info), fptr_create, fptr_destroy; allocator)

"""

"""
create_device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, _DeviceCreateInfo(queue_create_infos, enabled_layer_names, enabled_extension_names; next, flags, enabled_features); allocator)

"""

"""
create_device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, _DeviceCreateInfo(queue_create_infos, enabled_layer_names, enabled_extension_names; next, flags, enabled_features), fptr_create, fptr_destroy; allocator)

"""

"""
allocate_memory(device, allocation_size::Integer, memory_type_index::Integer; allocator = C_NULL, next = C_NULL) = allocate_memory(device, _MemoryAllocateInfo(allocation_size, memory_type_index; next); allocator)

"""

"""
allocate_memory(device, allocation_size::Integer, memory_type_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = allocate_memory(device, _MemoryAllocateInfo(allocation_size, memory_type_index; next), fptr_create, fptr_destroy; allocator)

"""

"""
create_command_pool(device, queue_family_index::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_command_pool(device, _CommandPoolCreateInfo(queue_family_index; next, flags); allocator)

"""

"""
create_command_pool(device, queue_family_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_command_pool(device, _CommandPoolCreateInfo(queue_family_index; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer(device, _BufferCreateInfo(size, usage, sharing_mode, queue_family_indices; next, flags); allocator)

"""

"""
create_buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer(device, _BufferCreateInfo(size, usage, sharing_mode, queue_family_indices; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_buffer_view(device, buffer, format::Format, offset::Integer, range::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer_view(device, _BufferViewCreateInfo(buffer, format, offset, range; next, flags); allocator)

"""

"""
create_buffer_view(device, buffer, format::Format, offset::Integer, range::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_buffer_view(device, _BufferViewCreateInfo(buffer, format, offset, range; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, _ImageCreateInfo(image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; next, flags); allocator)

"""

"""
create_image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, _ImageCreateInfo(image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_image_view(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, _ImageViewCreateInfo(image, view_type, format, components, subresource_range; next, flags); allocator)

"""

"""
create_image_view(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, _ImageViewCreateInfo(image, view_type, format, components, subresource_range; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_shader_module(device, code_size::Integer, code::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_shader_module(device, _ShaderModuleCreateInfo(code_size, code; next, flags); allocator)

"""

"""
create_shader_module(device, code_size::Integer, code::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_shader_module(device, _ShaderModuleCreateInfo(code_size, code; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_pipeline_layout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray{_PushConstantRange}; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, _PipelineLayoutCreateInfo(set_layouts, push_constant_ranges; next, flags); allocator)

"""

"""
create_pipeline_layout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray{_PushConstantRange}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, _PipelineLayoutCreateInfo(set_layouts, push_constant_ranges; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; allocator = C_NULL, next = C_NULL, flags = 0) = create_sampler(device, _SamplerCreateInfo(mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; next, flags); allocator)

"""

"""
create_sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_sampler(device, _SamplerCreateInfo(mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_descriptor_set_layout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, _DescriptorSetLayoutCreateInfo(bindings; next, flags); allocator)

"""

"""
create_descriptor_set_layout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, _DescriptorSetLayoutCreateInfo(bindings; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_descriptor_pool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, _DescriptorPoolCreateInfo(max_sets, pool_sizes; next, flags); allocator)

"""

"""
create_descriptor_pool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, _DescriptorPoolCreateInfo(max_sets, pool_sizes; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_fence(device; allocator = C_NULL, next = C_NULL, flags = 0) = create_fence(device, _FenceCreateInfo(; next, flags); allocator)

"""

"""
create_fence(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_fence(device, _FenceCreateInfo(; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_semaphore(device; allocator = C_NULL, next = C_NULL, flags = 0) = create_semaphore(device, _SemaphoreCreateInfo(; next, flags); allocator)

"""

"""
create_semaphore(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_semaphore(device, _SemaphoreCreateInfo(; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_event(device; allocator = C_NULL, next = C_NULL, flags = 0) = create_event(device, _EventCreateInfo(; next, flags); allocator)

"""

"""
create_event(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_event(device, _EventCreateInfo(; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_query_pool(device, query_type::QueryType, query_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = create_query_pool(device, _QueryPoolCreateInfo(query_type, query_count; next, flags, pipeline_statistics); allocator)

"""

"""
create_query_pool(device, query_type::QueryType, query_count::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = create_query_pool(device, _QueryPoolCreateInfo(query_type, query_count; next, flags, pipeline_statistics), fptr_create, fptr_destroy; allocator)

"""

"""
create_framebuffer(device, render_pass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_framebuffer(device, _FramebufferCreateInfo(render_pass, attachments, width, height, layers; next, flags); allocator)

"""

"""
create_framebuffer(device, render_pass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_framebuffer(device, _FramebufferCreateInfo(render_pass, attachments, width, height, layers; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_render_pass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, _RenderPassCreateInfo(attachments, subpasses, dependencies; next, flags); allocator)

"""

"""
create_render_pass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, _RenderPassCreateInfo(attachments, subpasses, dependencies; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_render_pass_2(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, _RenderPassCreateInfo2(attachments, subpasses, dependencies, correlated_view_masks; next, flags); allocator)

"""

"""
create_render_pass_2(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, _RenderPassCreateInfo2(attachments, subpasses, dependencies, correlated_view_masks; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_pipeline_cache(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_pipeline_cache(device, _PipelineCacheCreateInfo(initial_data; next, flags, initial_data_size); allocator)

"""

"""
create_pipeline_cache(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_pipeline_cache(device, _PipelineCacheCreateInfo(initial_data; next, flags, initial_data_size), fptr_create, fptr_destroy; allocator)

"""

"""
create_indirect_commands_layout_nv(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point, tokens, stream_strides; next, flags); allocator)

"""

"""
create_indirect_commands_layout_nv(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, _IndirectCommandsLayoutCreateInfoNV(pipeline_bind_point, tokens, stream_strides; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_descriptor_update_template(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; next, flags); allocator)

"""

"""
create_descriptor_update_template(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, _DescriptorUpdateTemplateCreateInfo(descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; next, flags), fptr_create, fptr_destroy; allocator)

"""

"""
create_sampler_ycbcr_conversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, _SamplerYcbcrConversionCreateInfo(format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; next); allocator)

"""

"""
create_sampler_ycbcr_conversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, _SamplerYcbcrConversionCreateInfo(format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; next), fptr_create, fptr_destroy; allocator)

"""

"""
create_validation_cache_ext(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_validation_cache_ext(device, _ValidationCacheCreateInfoEXT(initial_data; next, flags, initial_data_size); allocator)

"""

"""
create_validation_cache_ext(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = create_validation_cache_ext(device, _ValidationCacheCreateInfoEXT(initial_data; next, flags, initial_data_size), fptr_create, fptr_destroy; allocator)

"""

"""
create_acceleration_structure_khr(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = create_acceleration_structure_khr(device, _AccelerationStructureCreateInfoKHR(buffer, offset, size, type; next, create_flags, device_address); allocator)

"""

"""
create_acceleration_structure_khr(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = create_acceleration_structure_khr(device, _AccelerationStructureCreateInfoKHR(buffer, offset, size, type; next, create_flags, device_address), fptr_create, fptr_destroy; allocator)

"""

"""
create_acceleration_structure_nv(device, compacted_size::Integer, info::_AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, _AccelerationStructureCreateInfoNV(compacted_size, info; next); allocator)

"""

"""
create_acceleration_structure_nv(device, compacted_size::Integer, info::_AccelerationStructureInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, _AccelerationStructureCreateInfoNV(compacted_size, info; next), fptr_create, fptr_destroy; allocator)

"""

"""
create_private_data_slot_ext(device, flags::PrivateDataSlotCreateFlagEXT; allocator = C_NULL, next = C_NULL) = create_private_data_slot_ext(device, _PrivateDataSlotCreateInfoEXT(flags; next); allocator)

"""

"""
create_private_data_slot_ext(device, flags::PrivateDataSlotCreateFlagEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_private_data_slot_ext(device, _PrivateDataSlotCreateInfoEXT(flags; next), fptr_create, fptr_destroy; allocator)

"""

"""
create_display_mode_khr(physical_device, display, parameters::_DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, _DisplayModeCreateInfoKHR(parameters; next, flags); allocator)

"""

"""
create_display_mode_khr(physical_device, display, parameters::_DisplayModeParametersKHR, fptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, _DisplayModeCreateInfoKHR(parameters; next, flags), fptr_create; allocator)

"""

"""
create_swapchain_khr(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, _SwapchainCreateInfoKHR(surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; next, flags, old_swapchain); allocator)

"""

"""
create_swapchain_khr(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, _SwapchainCreateInfoKHR(surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; next, flags, old_swapchain), fptr_create, fptr_destroy; allocator)

"""

"""
create_debug_report_callback_ext(instance, pfn_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_report_callback_ext(instance, _DebugReportCallbackCreateInfoEXT(pfn_callback; next, flags, user_data); allocator)

"""

"""
create_debug_report_callback_ext(instance, pfn_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_report_callback_ext(instance, _DebugReportCallbackCreateInfoEXT(pfn_callback; next, flags, user_data), fptr_create, fptr_destroy; allocator)

"""

"""
create_debug_utils_messenger_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_utils_messenger_ext(instance, _DebugUtilsMessengerCreateInfoEXT(message_severity, message_type, pfn_user_callback; next, flags, user_data); allocator)

"""

"""
create_debug_utils_messenger_ext(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = create_debug_utils_messenger_ext(instance, _DebugUtilsMessengerCreateInfoEXT(message_severity, message_type, pfn_user_callback; next, flags, user_data), fptr_create, fptr_destroy; allocator)

"""

"""
create_device(physical_device, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, convert(AbstractArray{_DeviceQueueCreateInfo}, queue_create_infos), enabled_layer_names, enabled_extension_names; allocator, next, flags, enabled_features)

"""

"""
create_device(physical_device, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = create_device(physical_device, convert(AbstractArray{_DeviceQueueCreateInfo}, queue_create_infos), enabled_layer_names, enabled_extension_names, fptr_create, fptr_destroy; allocator, next, flags, enabled_features)

"""

"""
create_image(device, image_type::ImageType, format::Format, extent::Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, image_type, format, convert(_Extent3D, extent), mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; allocator, next, flags)

"""

"""
create_image(device, image_type::ImageType, format::Format, extent::Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image(device, image_type, format, convert(_Extent3D, extent), mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_image_view(device, image, view_type::ImageViewType, format::Format, components::ComponentMapping, subresource_range::ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, image, view_type, format, convert(_ComponentMapping, components), convert(_ImageSubresourceRange, subresource_range); allocator, next, flags)

"""

"""
create_image_view(device, image, view_type::ImageViewType, format::Format, components::ComponentMapping, subresource_range::ImageSubresourceRange, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_image_view(device, image, view_type, format, convert(_ComponentMapping, components), convert(_ImageSubresourceRange, subresource_range), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_pipeline_layout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, set_layouts, convert(AbstractArray{_PushConstantRange}, push_constant_ranges); allocator, next, flags)

"""

"""
create_pipeline_layout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_pipeline_layout(device, set_layouts, convert(AbstractArray{_PushConstantRange}, push_constant_ranges), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_descriptor_set_layout(device, bindings::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, convert(AbstractArray{_DescriptorSetLayoutBinding}, bindings); allocator, next, flags)

"""

"""
create_descriptor_set_layout(device, bindings::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_set_layout(device, convert(AbstractArray{_DescriptorSetLayoutBinding}, bindings), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_descriptor_pool(device, max_sets::Integer, pool_sizes::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, max_sets, convert(AbstractArray{_DescriptorPoolSize}, pool_sizes); allocator, next, flags)

"""

"""
create_descriptor_pool(device, max_sets::Integer, pool_sizes::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_pool(device, max_sets, convert(AbstractArray{_DescriptorPoolSize}, pool_sizes), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_render_pass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, convert(AbstractArray{_AttachmentDescription}, attachments), convert(AbstractArray{_SubpassDescription}, subpasses), convert(AbstractArray{_SubpassDependency}, dependencies); allocator, next, flags)

"""

"""
create_render_pass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass(device, convert(AbstractArray{_AttachmentDescription}, attachments), convert(AbstractArray{_SubpassDescription}, subpasses), convert(AbstractArray{_SubpassDependency}, dependencies), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_render_pass_2(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, convert(AbstractArray{_AttachmentDescription2}, attachments), convert(AbstractArray{_SubpassDescription2}, subpasses), convert(AbstractArray{_SubpassDependency2}, dependencies), correlated_view_masks; allocator, next, flags)

"""

"""
create_render_pass_2(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_render_pass_2(device, convert(AbstractArray{_AttachmentDescription2}, attachments), convert(AbstractArray{_SubpassDescription2}, subpasses), convert(AbstractArray{_SubpassDependency2}, dependencies), correlated_view_masks, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_indirect_commands_layout_nv(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, pipeline_bind_point, convert(AbstractArray{_IndirectCommandsLayoutTokenNV}, tokens), stream_strides; allocator, next, flags)

"""

"""
create_indirect_commands_layout_nv(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_indirect_commands_layout_nv(device, pipeline_bind_point, convert(AbstractArray{_IndirectCommandsLayoutTokenNV}, tokens), stream_strides, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_descriptor_update_template(device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, convert(AbstractArray{_DescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; allocator, next, flags)

"""

"""
create_descriptor_update_template(device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_descriptor_update_template(device, convert(AbstractArray{_DescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
create_sampler_ycbcr_conversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, convert(_ComponentMapping, components), x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; allocator, next)

"""

"""
create_sampler_ycbcr_conversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, convert(_ComponentMapping, components), x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction, fptr_create, fptr_destroy; allocator, next)

"""

"""
create_acceleration_structure_nv(device, compacted_size::Integer, info::AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, compacted_size, convert(_AccelerationStructureInfoNV, info); allocator, next)

"""

"""
create_acceleration_structure_nv(device, compacted_size::Integer, info::AccelerationStructureInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = create_acceleration_structure_nv(device, compacted_size, convert(_AccelerationStructureInfoNV, info), fptr_create, fptr_destroy; allocator, next)

"""

"""
create_display_mode_khr(physical_device, display, parameters::DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, convert(_DisplayModeParametersKHR, parameters); allocator, next, flags)

"""

"""
create_display_mode_khr(physical_device, display, parameters::DisplayModeParametersKHR, fptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = create_display_mode_khr(physical_device, display, convert(_DisplayModeParametersKHR, parameters), fptr_create; allocator, next, flags)

"""

"""
create_swapchain_khr(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, convert(_Extent2D, image_extent), image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; allocator, next, flags, old_swapchain)

"""

"""
create_swapchain_khr(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, convert(_Extent2D, image_extent), image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped, fptr_create, fptr_destroy; allocator, next, flags, old_swapchain)

"""
    Instance(enabled_layer_names::AbstractArray{<:AbstractString}, enabled_extension_names::AbstractArray{<:AbstractString}; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL)


"""
Instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = unwrap(create_instance(enabled_layer_names, enabled_extension_names; allocator, next, flags, application_info))

"""
    Instance(enabled_layer_names::AbstractArray{<:AbstractString}, enabled_extension_names::AbstractArray{<:AbstractString}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL)


"""
Instance(enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, application_info = C_NULL) = unwrap(create_instance(enabled_layer_names, enabled_extension_names, fptr_create, fptr_destroy; allocator, next, flags, application_info))

"""
    Device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray{<:AbstractString}, enabled_extension_names::AbstractArray{<:AbstractString}; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL)


"""
Device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = unwrap(create_device(physical_device, queue_create_infos, enabled_layer_names, enabled_extension_names; allocator, next, flags, enabled_features))

"""
    Device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray{<:AbstractString}, enabled_extension_names::AbstractArray{<:AbstractString}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL)


"""
Device(physical_device, queue_create_infos::AbstractArray{_DeviceQueueCreateInfo}, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = unwrap(create_device(physical_device, queue_create_infos, enabled_layer_names, enabled_extension_names, fptr_create, fptr_destroy; allocator, next, flags, enabled_features))

"""
    DeviceMemory(device, allocation_size::Integer, memory_type_index::Integer; allocator = C_NULL, next = C_NULL)


"""
DeviceMemory(device, allocation_size::Integer, memory_type_index::Integer; allocator = C_NULL, next = C_NULL) = unwrap(allocate_memory(device, allocation_size, memory_type_index; allocator, next))

"""
    DeviceMemory(device, allocation_size::Integer, memory_type_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL)


"""
DeviceMemory(device, allocation_size::Integer, memory_type_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(allocate_memory(device, allocation_size, memory_type_index, fptr_create, fptr_destroy; allocator, next))

"""
    CommandPool(device, queue_family_index::Integer; allocator = C_NULL, next = C_NULL, flags = 0)


"""
CommandPool(device, queue_family_index::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_command_pool(device, queue_family_index; allocator, next, flags))

"""
    CommandPool(device, queue_family_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
CommandPool(device, queue_family_index::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_command_pool(device, queue_family_index, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer(device, size, usage, sharing_mode, queue_family_indices; allocator, next, flags))

"""
    Buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Buffer(device, size::Integer, usage::BufferUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer(device, size, usage, sharing_mode, queue_family_indices, fptr_create, fptr_destroy; allocator, next, flags))

"""
    BufferView(device, buffer, format::Format, offset::Integer, range::Integer; allocator = C_NULL, next = C_NULL, flags = 0)


"""
BufferView(device, buffer, format::Format, offset::Integer, range::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer_view(device, buffer, format, offset, range; allocator, next, flags))

"""
    BufferView(device, buffer, format::Format, offset::Integer, range::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
BufferView(device, buffer, format::Format, offset::Integer, range::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_buffer_view(device, buffer, format, offset, range, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image(device, image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; allocator, next, flags))

"""
    Image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}, initial_layout::ImageLayout, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Image(device, image_type::ImageType, format::Format, extent::_Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image(device, image_type, format, extent, mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout, fptr_create, fptr_destroy; allocator, next, flags))

"""
    ImageView(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0)


"""
ImageView(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image_view(device, image, view_type, format, components, subresource_range; allocator, next, flags))

"""
    ImageView(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
ImageView(device, image, view_type::ImageViewType, format::Format, components::_ComponentMapping, subresource_range::_ImageSubresourceRange, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_image_view(device, image, view_type, format, components, subresource_range, fptr_create, fptr_destroy; allocator, next, flags))

"""
    ShaderModule(device, code_size::Integer, code::AbstractArray{<:Integer}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
ShaderModule(device, code_size::Integer, code::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_shader_module(device, code_size, code; allocator, next, flags))

"""
    ShaderModule(device, code_size::Integer, code::AbstractArray{<:Integer}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
ShaderModule(device, code_size::Integer, code::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_shader_module(device, code_size, code, fptr_create, fptr_destroy; allocator, next, flags))

"""
    PipelineLayout(device, set_layouts::AbstractArray{DescriptorSetLayout}, push_constant_ranges::AbstractArray{_PushConstantRange}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
PipelineLayout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray{_PushConstantRange}; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_pipeline_layout(device, set_layouts, push_constant_ranges; allocator, next, flags))

"""
    PipelineLayout(device, set_layouts::AbstractArray{DescriptorSetLayout}, push_constant_ranges::AbstractArray{_PushConstantRange}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
PipelineLayout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray{_PushConstantRange}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_pipeline_layout(device, set_layouts, push_constant_ranges, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_sampler(device, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates; allocator, next, flags))

"""
    Sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Sampler(device, mag_filter::Filter, min_filter::Filter, mipmap_mode::SamplerMipmapMode, address_mode_u::SamplerAddressMode, address_mode_v::SamplerAddressMode, address_mode_w::SamplerAddressMode, mip_lod_bias::Real, anisotropy_enable::Bool, max_anisotropy::Real, compare_enable::Bool, compare_op::CompareOp, min_lod::Real, max_lod::Real, border_color::BorderColor, unnormalized_coordinates::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_sampler(device, mag_filter, min_filter, mipmap_mode, address_mode_u, address_mode_v, address_mode_w, mip_lod_bias, anisotropy_enable, max_anisotropy, compare_enable, compare_op, min_lod, max_lod, border_color, unnormalized_coordinates, fptr_create, fptr_destroy; allocator, next, flags))

"""
    DescriptorSetLayout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorSetLayout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_set_layout(device, bindings; allocator, next, flags))

"""
    DescriptorSetLayout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorSetLayout(device, bindings::AbstractArray{_DescriptorSetLayoutBinding}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_set_layout(device, bindings, fptr_create, fptr_destroy; allocator, next, flags))

"""
    DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_pool(device, max_sets, pool_sizes; allocator, next, flags))

"""
    DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray{_DescriptorPoolSize}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_pool(device, max_sets, pool_sizes, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Fence(device; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Fence(device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_fence(device; allocator, next, flags))

"""
    Fence(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Fence(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_fence(device, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Semaphore(device; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Semaphore(device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_semaphore(device; allocator, next, flags))

"""
    Semaphore(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Semaphore(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_semaphore(device, fptr_create, fptr_destroy; allocator, next, flags))

"""
    Event(device; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Event(device; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_event(device; allocator, next, flags))

"""
    Event(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Event(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_event(device, fptr_create, fptr_destroy; allocator, next, flags))

"""
    QueryPool(device, query_type::QueryType, query_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0)


"""
QueryPool(device, query_type::QueryType, query_count::Integer; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = unwrap(create_query_pool(device, query_type, query_count; allocator, next, flags, pipeline_statistics))

"""
    QueryPool(device, query_type::QueryType, query_count::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0)


"""
QueryPool(device, query_type::QueryType, query_count::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, pipeline_statistics = 0) = unwrap(create_query_pool(device, query_type, query_count, fptr_create, fptr_destroy; allocator, next, flags, pipeline_statistics))

"""
    Framebuffer(device, render_pass, attachments::AbstractArray{ImageView}, width::Integer, height::Integer, layers::Integer; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Framebuffer(device, render_pass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_framebuffer(device, render_pass, attachments, width, height, layers; allocator, next, flags))

"""
    Framebuffer(device, render_pass, attachments::AbstractArray{ImageView}, width::Integer, height::Integer, layers::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
Framebuffer(device, render_pass, attachments::AbstractArray, width::Integer, height::Integer, layers::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_framebuffer(device, render_pass, attachments, width, height, layers, fptr_create, fptr_destroy; allocator, next, flags))

"""
    RenderPass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
RenderPass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass(device, attachments, subpasses, dependencies; allocator, next, flags))

"""
    RenderPass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
RenderPass(device, attachments::AbstractArray{_AttachmentDescription}, subpasses::AbstractArray{_SubpassDescription}, dependencies::AbstractArray{_SubpassDependency}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass(device, attachments, subpasses, dependencies, fptr_create, fptr_destroy; allocator, next, flags))

"""
    RenderPass(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray{<:Integer}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
RenderPass(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass_2(device, attachments, subpasses, dependencies, correlated_view_masks; allocator, next, flags))

"""
    RenderPass(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray{<:Integer}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
RenderPass(device, attachments::AbstractArray{_AttachmentDescription2}, subpasses::AbstractArray{_SubpassDescription2}, dependencies::AbstractArray{_SubpassDependency2}, correlated_view_masks::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_render_pass_2(device, attachments, subpasses, dependencies, correlated_view_masks, fptr_create, fptr_destroy; allocator, next, flags))

"""
    PipelineCache(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0)


"""
PipelineCache(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_pipeline_cache(device, initial_data; allocator, next, flags, initial_data_size))

"""
    PipelineCache(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0)


"""
PipelineCache(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_pipeline_cache(device, initial_data, fptr_create, fptr_destroy; allocator, next, flags, initial_data_size))

"""
    IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray{<:Integer}; allocator = C_NULL, next = C_NULL, flags = 0)


"""
IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_indirect_commands_layout_nv(device, pipeline_bind_point, tokens, stream_strides; allocator, next, flags))

"""
    IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray{<:Integer}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray{_IndirectCommandsLayoutTokenNV}, stream_strides::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_indirect_commands_layout_nv(device, pipeline_bind_point, tokens, stream_strides, fptr_create, fptr_destroy; allocator, next, flags))

"""
    DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_update_template(device, descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; allocator, next, flags))

"""
    DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray{_DescriptorUpdateTemplateEntry}, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_descriptor_update_template(device, descriptor_update_entries, template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set, fptr_create, fptr_destroy; allocator, next, flags))

"""
    SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL)


"""
SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = unwrap(create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; allocator, next))

"""
    SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL)


"""
SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::_ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_sampler_ycbcr_conversion(device, format, ycbcr_model, ycbcr_range, components, x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction, fptr_create, fptr_destroy; allocator, next))

"""
    ValidationCacheEXT(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0)


"""
ValidationCacheEXT(device, initial_data::Ptr{Cvoid}; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_validation_cache_ext(device, initial_data; allocator, next, flags, initial_data_size))

"""
    ValidationCacheEXT(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0)


"""
ValidationCacheEXT(device, initial_data::Ptr{Cvoid}, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, initial_data_size = 0) = unwrap(create_validation_cache_ext(device, initial_data, fptr_create, fptr_destroy; allocator, next, flags, initial_data_size))

"""
    AccelerationStructureKHR(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0)


"""
AccelerationStructureKHR(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = unwrap(create_acceleration_structure_khr(device, buffer, offset, size, type; allocator, next, create_flags, device_address))

"""
    AccelerationStructureKHR(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0)


"""
AccelerationStructureKHR(device, buffer, offset::Integer, size::Integer, type::AccelerationStructureTypeKHR, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, create_flags = 0, device_address = 0) = unwrap(create_acceleration_structure_khr(device, buffer, offset, size, type, fptr_create, fptr_destroy; allocator, next, create_flags, device_address))

"""
    AccelerationStructureNV(device, compacted_size::Integer, info::_AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL)


"""
AccelerationStructureNV(device, compacted_size::Integer, info::_AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = unwrap(create_acceleration_structure_nv(device, compacted_size, info; allocator, next))

"""
    AccelerationStructureNV(device, compacted_size::Integer, info::_AccelerationStructureInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL)


"""
AccelerationStructureNV(device, compacted_size::Integer, info::_AccelerationStructureInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_acceleration_structure_nv(device, compacted_size, info, fptr_create, fptr_destroy; allocator, next))

"""
    DeferredOperationKHR(device; allocator = C_NULL)


"""
DeferredOperationKHR(device; allocator = C_NULL) = unwrap(create_deferred_operation_khr(device; allocator))

"""
    DeferredOperationKHR(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL)


"""
DeferredOperationKHR(device, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL) = unwrap(create_deferred_operation_khr(device, fptr_create, fptr_destroy; allocator))

"""
    PrivateDataSlotEXT(device, flags::PrivateDataSlotCreateFlagEXT; allocator = C_NULL, next = C_NULL)


"""
PrivateDataSlotEXT(device, flags::PrivateDataSlotCreateFlagEXT; allocator = C_NULL, next = C_NULL) = unwrap(create_private_data_slot_ext(device, flags; allocator, next))

"""
    PrivateDataSlotEXT(device, flags::PrivateDataSlotCreateFlagEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL)


"""
PrivateDataSlotEXT(device, flags::PrivateDataSlotCreateFlagEXT, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = unwrap(create_private_data_slot_ext(device, flags, fptr_create, fptr_destroy; allocator, next))

"""
    DisplayModeKHR(physical_device, display, parameters::_DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DisplayModeKHR(physical_device, display, parameters::_DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_display_mode_khr(physical_device, display, parameters; allocator, next, flags))

"""
    DisplayModeKHR(physical_device, display, parameters::_DisplayModeParametersKHR, fptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0)


"""
DisplayModeKHR(physical_device, display, parameters::_DisplayModeParametersKHR, fptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = unwrap(create_display_mode_khr(physical_device, display, parameters, fptr_create; allocator, next, flags))

"""
    SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL)


"""
SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = unwrap(create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; allocator, next, flags, old_swapchain))

"""
    SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray{<:Integer}, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL)


"""
SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::_Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = unwrap(create_swapchain_khr(device, surface, min_image_count, image_format, image_color_space, image_extent, image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped, fptr_create, fptr_destroy; allocator, next, flags, old_swapchain))

"""
    DebugReportCallbackEXT(instance, pfn_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL)


"""
DebugReportCallbackEXT(instance, pfn_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_report_callback_ext(instance, pfn_callback; allocator, next, flags, user_data))

"""
    DebugReportCallbackEXT(instance, pfn_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL)


"""
DebugReportCallbackEXT(instance, pfn_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_report_callback_ext(instance, pfn_callback, fptr_create, fptr_destroy; allocator, next, flags, user_data))

"""
    DebugUtilsMessengerEXT(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL)


"""
DebugUtilsMessengerEXT(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_utils_messenger_ext(instance, message_severity, message_type, pfn_user_callback; allocator, next, flags, user_data))

"""
    DebugUtilsMessengerEXT(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL)


"""
DebugUtilsMessengerEXT(instance, message_severity::DebugUtilsMessageSeverityFlagEXT, message_type::DebugUtilsMessageTypeFlagEXT, pfn_user_callback::FunctionPtr, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, user_data = C_NULL) = unwrap(create_debug_utils_messenger_ext(instance, message_severity, message_type, pfn_user_callback, fptr_create, fptr_destroy; allocator, next, flags, user_data))

"""

"""
Device(physical_device, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = Device(physical_device, convert(AbstractArray{_DeviceQueueCreateInfo}, queue_create_infos), enabled_layer_names, enabled_extension_names; allocator, next, flags, enabled_features)

"""

"""
Device(physical_device, queue_create_infos::AbstractArray, enabled_layer_names::AbstractArray, enabled_extension_names::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, enabled_features = C_NULL) = Device(physical_device, convert(AbstractArray{_DeviceQueueCreateInfo}, queue_create_infos), enabled_layer_names, enabled_extension_names, fptr_create, fptr_destroy; allocator, next, flags, enabled_features)

"""

"""
Image(device, image_type::ImageType, format::Format, extent::Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout; allocator = C_NULL, next = C_NULL, flags = 0) = Image(device, image_type, format, convert(_Extent3D, extent), mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout; allocator, next, flags)

"""

"""
Image(device, image_type::ImageType, format::Format, extent::Extent3D, mip_levels::Integer, array_layers::Integer, samples::SampleCountFlag, tiling::ImageTiling, usage::ImageUsageFlag, sharing_mode::SharingMode, queue_family_indices::AbstractArray, initial_layout::ImageLayout, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = Image(device, image_type, format, convert(_Extent3D, extent), mip_levels, array_layers, samples, tiling, usage, sharing_mode, queue_family_indices, initial_layout, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
ImageView(device, image, view_type::ImageViewType, format::Format, components::ComponentMapping, subresource_range::ImageSubresourceRange; allocator = C_NULL, next = C_NULL, flags = 0) = ImageView(device, image, view_type, format, convert(_ComponentMapping, components), convert(_ImageSubresourceRange, subresource_range); allocator, next, flags)

"""

"""
ImageView(device, image, view_type::ImageViewType, format::Format, components::ComponentMapping, subresource_range::ImageSubresourceRange, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = ImageView(device, image, view_type, format, convert(_ComponentMapping, components), convert(_ImageSubresourceRange, subresource_range), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
PipelineLayout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = PipelineLayout(device, set_layouts, convert(AbstractArray{_PushConstantRange}, push_constant_ranges); allocator, next, flags)

"""

"""
PipelineLayout(device, set_layouts::AbstractArray, push_constant_ranges::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = PipelineLayout(device, set_layouts, convert(AbstractArray{_PushConstantRange}, push_constant_ranges), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
DescriptorSetLayout(device, bindings::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorSetLayout(device, convert(AbstractArray{_DescriptorSetLayoutBinding}, bindings); allocator, next, flags)

"""

"""
DescriptorSetLayout(device, bindings::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorSetLayout(device, convert(AbstractArray{_DescriptorSetLayoutBinding}, bindings), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorPool(device, max_sets, convert(AbstractArray{_DescriptorPoolSize}, pool_sizes); allocator, next, flags)

"""

"""
DescriptorPool(device, max_sets::Integer, pool_sizes::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorPool(device, max_sets, convert(AbstractArray{_DescriptorPoolSize}, pool_sizes), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
RenderPass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = RenderPass(device, convert(AbstractArray{_AttachmentDescription}, attachments), convert(AbstractArray{_SubpassDescription}, subpasses), convert(AbstractArray{_SubpassDependency}, dependencies); allocator, next, flags)

"""

"""
RenderPass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = RenderPass(device, convert(AbstractArray{_AttachmentDescription}, attachments), convert(AbstractArray{_SubpassDescription}, subpasses), convert(AbstractArray{_SubpassDependency}, dependencies), fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
RenderPass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = RenderPass(device, convert(AbstractArray{_AttachmentDescription2}, attachments), convert(AbstractArray{_SubpassDescription2}, subpasses), convert(AbstractArray{_SubpassDependency2}, dependencies), correlated_view_masks; allocator, next, flags)

"""

"""
RenderPass(device, attachments::AbstractArray, subpasses::AbstractArray, dependencies::AbstractArray, correlated_view_masks::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = RenderPass(device, convert(AbstractArray{_AttachmentDescription2}, attachments), convert(AbstractArray{_SubpassDescription2}, subpasses), convert(AbstractArray{_SubpassDependency2}, dependencies), correlated_view_masks, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray; allocator = C_NULL, next = C_NULL, flags = 0) = IndirectCommandsLayoutNV(device, pipeline_bind_point, convert(AbstractArray{_IndirectCommandsLayoutTokenNV}, tokens), stream_strides; allocator, next, flags)

"""

"""
IndirectCommandsLayoutNV(device, pipeline_bind_point::PipelineBindPoint, tokens::AbstractArray, stream_strides::AbstractArray, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = IndirectCommandsLayoutNV(device, pipeline_bind_point, convert(AbstractArray{_IndirectCommandsLayoutTokenNV}, tokens), stream_strides, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorUpdateTemplate(device, convert(AbstractArray{_DescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set; allocator, next, flags)

"""

"""
DescriptorUpdateTemplate(device, descriptor_update_entries::AbstractArray, template_type::DescriptorUpdateTemplateType, descriptor_set_layout, pipeline_bind_point::PipelineBindPoint, pipeline_layout, set::Integer, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = DescriptorUpdateTemplate(device, convert(AbstractArray{_DescriptorUpdateTemplateEntry}, descriptor_update_entries), template_type, descriptor_set_layout, pipeline_bind_point, pipeline_layout, set, fptr_create, fptr_destroy; allocator, next, flags)

"""

"""
SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool; allocator = C_NULL, next = C_NULL) = SamplerYcbcrConversion(device, format, ycbcr_model, ycbcr_range, convert(_ComponentMapping, components), x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction; allocator, next)

"""

"""
SamplerYcbcrConversion(device, format::Format, ycbcr_model::SamplerYcbcrModelConversion, ycbcr_range::SamplerYcbcrRange, components::ComponentMapping, x_chroma_offset::ChromaLocation, y_chroma_offset::ChromaLocation, chroma_filter::Filter, force_explicit_reconstruction::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = SamplerYcbcrConversion(device, format, ycbcr_model, ycbcr_range, convert(_ComponentMapping, components), x_chroma_offset, y_chroma_offset, chroma_filter, force_explicit_reconstruction, fptr_create, fptr_destroy; allocator, next)

"""

"""
AccelerationStructureNV(device, compacted_size::Integer, info::AccelerationStructureInfoNV; allocator = C_NULL, next = C_NULL) = AccelerationStructureNV(device, compacted_size, convert(_AccelerationStructureInfoNV, info); allocator, next)

"""

"""
AccelerationStructureNV(device, compacted_size::Integer, info::AccelerationStructureInfoNV, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL) = AccelerationStructureNV(device, compacted_size, convert(_AccelerationStructureInfoNV, info), fptr_create, fptr_destroy; allocator, next)

"""

"""
DisplayModeKHR(physical_device, display, parameters::DisplayModeParametersKHR; allocator = C_NULL, next = C_NULL, flags = 0) = DisplayModeKHR(physical_device, display, convert(_DisplayModeParametersKHR, parameters); allocator, next, flags)

"""

"""
DisplayModeKHR(physical_device, display, parameters::DisplayModeParametersKHR, fptr_create::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0) = DisplayModeKHR(physical_device, display, convert(_DisplayModeParametersKHR, parameters), fptr_create; allocator, next, flags)

"""

"""
SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = SwapchainKHR(device, surface, min_image_count, image_format, image_color_space, convert(_Extent2D, image_extent), image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped; allocator, next, flags, old_swapchain)

"""

"""
SwapchainKHR(device, surface, min_image_count::Integer, image_format::Format, image_color_space::ColorSpaceKHR, image_extent::Extent2D, image_array_layers::Integer, image_usage::ImageUsageFlag, image_sharing_mode::SharingMode, queue_family_indices::AbstractArray, pre_transform::SurfaceTransformFlagKHR, composite_alpha::CompositeAlphaFlagKHR, present_mode::PresentModeKHR, clipped::Bool, fptr_create::FunctionPtr, fptr_destroy::FunctionPtr; allocator = C_NULL, next = C_NULL, flags = 0, old_swapchain = C_NULL) = SwapchainKHR(device, surface, min_image_count, image_format, image_color_space, convert(_Extent2D, image_extent), image_array_layers, image_usage, image_sharing_mode, queue_family_indices, pre_transform, composite_alpha, present_mode, clipped, fptr_create, fptr_destroy; allocator, next, flags, old_swapchain)

"""

"""
from_vk(T::Type{PhysicalDeviceProperties}, x::VkPhysicalDeviceProperties) = T(from_vk(VersionNumber, x.apiVersion), from_vk(VersionNumber, x.driverVersion), x.vendorID, x.deviceID, x.deviceType, from_vk(String, x.deviceName), from_vk(String, x.pipelineCacheUUID), from_vk(PhysicalDeviceLimits, x.limits), from_vk(PhysicalDeviceSparseProperties, x.sparseProperties))

"""

"""
from_vk(T::Type{ExtensionProperties}, x::VkExtensionProperties) = T(from_vk(String, x.extensionName), from_vk(VersionNumber, x.specVersion))

"""

"""
from_vk(T::Type{LayerProperties}, x::VkLayerProperties) = T(from_vk(String, x.layerName), from_vk(VersionNumber, x.specVersion), from_vk(VersionNumber, x.implementationVersion), from_vk(String, x.description))

"""

"""
from_vk(T::Type{QueueFamilyProperties}, x::VkQueueFamilyProperties) = T(x.queueFlags, x.queueCount, x.timestampValidBits, from_vk(_Extent3D, x.minImageTransferGranularity))

"""

"""
from_vk(T::Type{PhysicalDeviceMemoryProperties}, x::VkPhysicalDeviceMemoryProperties) = T(x.memoryTypeCount, from_vk.(MemoryType, x.memoryTypes), x.memoryHeapCount, from_vk.(MemoryHeap, x.memoryHeaps))

"""

"""
from_vk(T::Type{MemoryRequirements}, x::VkMemoryRequirements) = T(x.size, x.alignment, x.memoryTypeBits)

"""

"""
from_vk(T::Type{SparseImageFormatProperties}, x::VkSparseImageFormatProperties) = T(x.aspectMask, from_vk(_Extent3D, x.imageGranularity), x.flags)

"""

"""
from_vk(T::Type{SparseImageMemoryRequirements}, x::VkSparseImageMemoryRequirements) = T(from_vk(SparseImageFormatProperties, x.formatProperties), x.imageMipTailFirstLod, x.imageMipTailSize, x.imageMipTailOffset, x.imageMipTailStride)

"""

"""
from_vk(T::Type{MemoryType}, x::VkMemoryType) = T(x.propertyFlags, x.heapIndex)

"""

"""
from_vk(T::Type{MemoryHeap}, x::VkMemoryHeap) = T(x.size, x.flags)

"""

"""
from_vk(T::Type{FormatProperties}, x::VkFormatProperties) = T(x.linearTilingFeatures, x.optimalTilingFeatures, x.bufferFeatures)

"""

"""
from_vk(T::Type{ImageFormatProperties}, x::VkImageFormatProperties) = T(from_vk(_Extent3D, x.maxExtent), x.maxMipLevels, x.maxArrayLayers, x.sampleCounts, x.maxResourceSize)

"""

"""
from_vk(T::Type{SubresourceLayout}, x::VkSubresourceLayout) = T(x.offset, x.size, x.rowPitch, x.arrayPitch, x.depthPitch)

"""

"""
from_vk(T::Type{PhysicalDeviceSparseProperties}, x::VkPhysicalDeviceSparseProperties) = T(from_vk(Bool, x.residencyStandard2DBlockShape), from_vk(Bool, x.residencyStandard2DMultisampleBlockShape), from_vk(Bool, x.residencyStandard3DBlockShape), from_vk(Bool, x.residencyAlignedMipSize), from_vk(Bool, x.residencyNonResidentStrict))

"""

"""
from_vk(T::Type{PhysicalDeviceLimits}, x::VkPhysicalDeviceLimits) = T(x.maxImageDimension1D, x.maxImageDimension2D, x.maxImageDimension3D, x.maxImageDimensionCube, x.maxImageArrayLayers, x.maxTexelBufferElements, x.maxUniformBufferRange, x.maxStorageBufferRange, x.maxPushConstantsSize, x.maxMemoryAllocationCount, x.maxSamplerAllocationCount, x.bufferImageGranularity, x.sparseAddressSpaceSize, x.maxBoundDescriptorSets, x.maxPerStageDescriptorSamplers, x.maxPerStageDescriptorUniformBuffers, x.maxPerStageDescriptorStorageBuffers, x.maxPerStageDescriptorSampledImages, x.maxPerStageDescriptorStorageImages, x.maxPerStageDescriptorInputAttachments, x.maxPerStageResources, x.maxDescriptorSetSamplers, x.maxDescriptorSetUniformBuffers, x.maxDescriptorSetUniformBuffersDynamic, x.maxDescriptorSetStorageBuffers, x.maxDescriptorSetStorageBuffersDynamic, x.maxDescriptorSetSampledImages, x.maxDescriptorSetStorageImages, x.maxDescriptorSetInputAttachments, x.maxVertexInputAttributes, x.maxVertexInputBindings, x.maxVertexInputAttributeOffset, x.maxVertexInputBindingStride, x.maxVertexOutputComponents, x.maxTessellationGenerationLevel, x.maxTessellationPatchSize, x.maxTessellationControlPerVertexInputComponents, x.maxTessellationControlPerVertexOutputComponents, x.maxTessellationControlPerPatchOutputComponents, x.maxTessellationControlTotalOutputComponents, x.maxTessellationEvaluationInputComponents, x.maxTessellationEvaluationOutputComponents, x.maxGeometryShaderInvocations, x.maxGeometryInputComponents, x.maxGeometryOutputComponents, x.maxGeometryOutputVertices, x.maxGeometryTotalOutputComponents, x.maxFragmentInputComponents, x.maxFragmentOutputAttachments, x.maxFragmentDualSrcAttachments, x.maxFragmentCombinedOutputResources, x.maxComputeSharedMemorySize, x.maxComputeWorkGroupCount, x.maxComputeWorkGroupInvocations, x.maxComputeWorkGroupSize, x.subPixelPrecisionBits, x.subTexelPrecisionBits, x.mipmapPrecisionBits, x.maxDrawIndexedIndexValue, x.maxDrawIndirectCount, x.maxSamplerLodBias, x.maxSamplerAnisotropy, x.maxViewports, x.maxViewportDimensions, x.viewportBoundsRange, x.viewportSubPixelBits, x.minMemoryMapAlignment, x.minTexelBufferOffsetAlignment, x.minUniformBufferOffsetAlignment, x.minStorageBufferOffsetAlignment, x.minTexelOffset, x.maxTexelOffset, x.minTexelGatherOffset, x.maxTexelGatherOffset, x.minInterpolationOffset, x.maxInterpolationOffset, x.subPixelInterpolationOffsetBits, x.maxFramebufferWidth, x.maxFramebufferHeight, x.maxFramebufferLayers, x.framebufferColorSampleCounts, x.framebufferDepthSampleCounts, x.framebufferStencilSampleCounts, x.framebufferNoAttachmentsSampleCounts, x.maxColorAttachments, x.sampledImageColorSampleCounts, x.sampledImageIntegerSampleCounts, x.sampledImageDepthSampleCounts, x.sampledImageStencilSampleCounts, x.storageImageSampleCounts, x.maxSampleMaskWords, from_vk(Bool, x.timestampComputeAndGraphics), x.timestampPeriod, x.maxClipDistances, x.maxCullDistances, x.maxCombinedClipAndCullDistances, x.discreteQueuePriorities, x.pointSizeRange, x.lineWidthRange, x.pointSizeGranularity, x.lineWidthGranularity, from_vk(Bool, x.strictLines), from_vk(Bool, x.standardSampleLocations), x.optimalBufferCopyOffsetAlignment, x.optimalBufferCopyRowPitchAlignment, x.nonCoherentAtomSize)

"""

"""
from_vk(T::Type{DisplayPropertiesKHR}, x::VkDisplayPropertiesKHR) = T(DisplayKHR(x.display), unsafe_string(x.displayName), from_vk(_Extent2D, x.physicalDimensions), from_vk(_Extent2D, x.physicalResolution), x.supportedTransforms, from_vk(Bool, x.planeReorderPossible), from_vk(Bool, x.persistentContent))

"""

"""
from_vk(T::Type{DisplayPlanePropertiesKHR}, x::VkDisplayPlanePropertiesKHR) = T(DisplayKHR(x.currentDisplay), x.currentStackIndex)

"""

"""
from_vk(T::Type{DisplayModePropertiesKHR}, x::VkDisplayModePropertiesKHR) = T(DisplayModeKHR(x.displayMode), from_vk(_DisplayModeParametersKHR, x.parameters))

"""

"""
from_vk(T::Type{DisplayPlaneCapabilitiesKHR}, x::VkDisplayPlaneCapabilitiesKHR) = T(x.supportedAlpha, from_vk(_Offset2D, x.minSrcPosition), from_vk(_Offset2D, x.maxSrcPosition), from_vk(_Extent2D, x.minSrcExtent), from_vk(_Extent2D, x.maxSrcExtent), from_vk(_Offset2D, x.minDstPosition), from_vk(_Offset2D, x.maxDstPosition), from_vk(_Extent2D, x.minDstExtent), from_vk(_Extent2D, x.maxDstExtent))

"""

"""
from_vk(T::Type{SurfaceCapabilitiesKHR}, x::VkSurfaceCapabilitiesKHR) = T(x.minImageCount, x.maxImageCount, from_vk(_Extent2D, x.currentExtent), from_vk(_Extent2D, x.minImageExtent), from_vk(_Extent2D, x.maxImageExtent), x.maxImageArrayLayers, x.supportedTransforms, SurfaceTransformFlagKHR(UInt32(x.currentTransform)), x.supportedCompositeAlpha, x.supportedUsageFlags)

"""

"""
from_vk(T::Type{SurfaceFormatKHR}, x::VkSurfaceFormatKHR) = T(x.format, x.colorSpace)

"""

"""
from_vk(T::Type{ExternalImageFormatPropertiesNV}, x::VkExternalImageFormatPropertiesNV) = T(from_vk(ImageFormatProperties, x.imageFormatProperties), x.externalMemoryFeatures, x.exportFromImportedHandleTypes, x.compatibleHandleTypes)

"""

"""
from_vk(T::Type{PhysicalDeviceDeviceGeneratedCommandsPropertiesNV}, x::VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV) = T(x.sType, x.pNext, x.maxGraphicsShaderGroupCount, x.maxIndirectSequenceCount, x.maxIndirectCommandsTokenCount, x.maxIndirectCommandsStreamCount, x.maxIndirectCommandsTokenOffset, x.maxIndirectCommandsStreamStride, x.minSequencesCountBufferOffsetAlignment, x.minSequencesIndexBufferOffsetAlignment, x.minIndirectCommandsBufferOffsetAlignment)

"""

"""
from_vk(T::Type{PhysicalDeviceProperties2}, x::VkPhysicalDeviceProperties2) = T(x.sType, x.pNext, from_vk(PhysicalDeviceProperties, x.properties))

"""

"""
from_vk(T::Type{FormatProperties2}, x::VkFormatProperties2) = T(x.sType, x.pNext, from_vk(FormatProperties, x.formatProperties))

"""

"""
from_vk(T::Type{ImageFormatProperties2}, x::VkImageFormatProperties2) = T(x.sType, x.pNext, from_vk(ImageFormatProperties, x.imageFormatProperties))

"""

"""
from_vk(T::Type{QueueFamilyProperties2}, x::VkQueueFamilyProperties2) = T(x.sType, x.pNext, from_vk(QueueFamilyProperties, x.queueFamilyProperties))

"""

"""
from_vk(T::Type{PhysicalDeviceMemoryProperties2}, x::VkPhysicalDeviceMemoryProperties2) = T(x.sType, x.pNext, from_vk(PhysicalDeviceMemoryProperties, x.memoryProperties))

"""

"""
from_vk(T::Type{SparseImageFormatProperties2}, x::VkSparseImageFormatProperties2) = T(x.sType, x.pNext, from_vk(SparseImageFormatProperties, x.properties))

"""

"""
from_vk(T::Type{PhysicalDevicePushDescriptorPropertiesKHR}, x::VkPhysicalDevicePushDescriptorPropertiesKHR) = T(x.sType, x.pNext, x.maxPushDescriptors)

"""

"""
from_vk(T::Type{PhysicalDeviceDriverProperties}, x::VkPhysicalDeviceDriverProperties) = T(x.sType, x.pNext, x.driverID, from_vk(String, x.driverName), from_vk(String, x.driverInfo), from_vk(_ConformanceVersion, x.conformanceVersion))

"""

"""
from_vk(T::Type{ExternalMemoryProperties}, x::VkExternalMemoryProperties) = T(x.externalMemoryFeatures, x.exportFromImportedHandleTypes, x.compatibleHandleTypes)

"""

"""
from_vk(T::Type{ExternalImageFormatProperties}, x::VkExternalImageFormatProperties) = T(x.sType, x.pNext, from_vk(ExternalMemoryProperties, x.externalMemoryProperties))

"""

"""
from_vk(T::Type{ExternalBufferProperties}, x::VkExternalBufferProperties) = T(x.sType, x.pNext, from_vk(ExternalMemoryProperties, x.externalMemoryProperties))

"""

"""
from_vk(T::Type{PhysicalDeviceIDProperties}, x::VkPhysicalDeviceIDProperties) = T(x.sType, x.pNext, from_vk(String, x.deviceUUID), from_vk(String, x.driverUUID), from_vk(String, x.deviceLUID), x.deviceNodeMask, from_vk(Bool, x.deviceLUIDValid))

"""

"""
from_vk(T::Type{MemoryWin32HandlePropertiesKHR}, x::VkMemoryWin32HandlePropertiesKHR) = T(x.sType, x.pNext, x.memoryTypeBits)

"""

"""
from_vk(T::Type{MemoryFdPropertiesKHR}, x::VkMemoryFdPropertiesKHR) = T(x.sType, x.pNext, x.memoryTypeBits)

"""

"""
from_vk(T::Type{ExternalSemaphoreProperties}, x::VkExternalSemaphoreProperties) = T(x.sType, x.pNext, x.exportFromImportedHandleTypes, x.compatibleHandleTypes, x.externalSemaphoreFeatures)

"""

"""
from_vk(T::Type{ExternalFenceProperties}, x::VkExternalFenceProperties) = T(x.sType, x.pNext, x.exportFromImportedHandleTypes, x.compatibleHandleTypes, x.externalFenceFeatures)

"""

"""
from_vk(T::Type{PhysicalDeviceMultiviewProperties}, x::VkPhysicalDeviceMultiviewProperties) = T(x.sType, x.pNext, x.maxMultiviewViewCount, x.maxMultiviewInstanceIndex)

"""

"""
from_vk(T::Type{SurfaceCapabilities2EXT}, x::VkSurfaceCapabilities2EXT) = T(x.sType, x.pNext, x.minImageCount, x.maxImageCount, from_vk(_Extent2D, x.currentExtent), from_vk(_Extent2D, x.minImageExtent), from_vk(_Extent2D, x.maxImageExtent), x.maxImageArrayLayers, x.supportedTransforms, SurfaceTransformFlagKHR(UInt32(x.currentTransform)), x.supportedCompositeAlpha, x.supportedUsageFlags, x.supportedSurfaceCounters)

"""

"""
from_vk(T::Type{PhysicalDeviceGroupProperties}, x::VkPhysicalDeviceGroupProperties) = T(x.sType, x.pNext, x.physicalDeviceCount, PhysicalDevice.(x.physicalDevices), from_vk(Bool, x.subsetAllocation))

"""

"""
from_vk(T::Type{DeviceGroupPresentCapabilitiesKHR}, x::VkDeviceGroupPresentCapabilitiesKHR) = T(x.sType, x.pNext, from_vk(NTuple{Int(VK_MAX_DEVICE_GROUP_SIZE), UInt32}, x.presentMask), x.modes)

"""

"""
from_vk(T::Type{DisplayNativeHdrSurfaceCapabilitiesAMD}, x::VkDisplayNativeHdrSurfaceCapabilitiesAMD) = T(x.sType, x.pNext, from_vk(Bool, x.localDimmingSupport))

"""

"""
from_vk(T::Type{RefreshCycleDurationGOOGLE}, x::VkRefreshCycleDurationGOOGLE) = T(x.refreshDuration)

"""

"""
from_vk(T::Type{PastPresentationTimingGOOGLE}, x::VkPastPresentationTimingGOOGLE) = T(x.presentID, x.desiredPresentTime, x.actualPresentTime, x.earliestPresentTime, x.presentMargin)

"""

"""
from_vk(T::Type{PhysicalDeviceDiscardRectanglePropertiesEXT}, x::VkPhysicalDeviceDiscardRectanglePropertiesEXT) = T(x.sType, x.pNext, x.maxDiscardRectangles)

"""

"""
from_vk(T::Type{PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX}, x::VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) = T(x.sType, x.pNext, from_vk(Bool, x.perViewPositionAllComponents))

"""

"""
from_vk(T::Type{SurfaceCapabilities2KHR}, x::VkSurfaceCapabilities2KHR) = T(x.sType, x.pNext, from_vk(SurfaceCapabilitiesKHR, x.surfaceCapabilities))

"""

"""
from_vk(T::Type{SurfaceFormat2KHR}, x::VkSurfaceFormat2KHR) = T(x.sType, x.pNext, from_vk(SurfaceFormatKHR, x.surfaceFormat))

"""

"""
from_vk(T::Type{DisplayProperties2KHR}, x::VkDisplayProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayPropertiesKHR, x.displayProperties))

"""

"""
from_vk(T::Type{DisplayPlaneProperties2KHR}, x::VkDisplayPlaneProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayPlanePropertiesKHR, x.displayPlaneProperties))

"""

"""
from_vk(T::Type{DisplayModeProperties2KHR}, x::VkDisplayModeProperties2KHR) = T(x.sType, x.pNext, from_vk(DisplayModePropertiesKHR, x.displayModeProperties))

"""

"""
from_vk(T::Type{DisplayPlaneCapabilities2KHR}, x::VkDisplayPlaneCapabilities2KHR) = T(x.sType, x.pNext, from_vk(DisplayPlaneCapabilitiesKHR, x.capabilities))

"""

"""
from_vk(T::Type{SharedPresentSurfaceCapabilitiesKHR}, x::VkSharedPresentSurfaceCapabilitiesKHR) = T(x.sType, x.pNext, x.sharedPresentSupportedUsageFlags)

"""

"""
from_vk(T::Type{PhysicalDeviceSubgroupProperties}, x::VkPhysicalDeviceSubgroupProperties) = T(x.sType, x.pNext, x.subgroupSize, x.supportedStages, x.supportedOperations, from_vk(Bool, x.quadOperationsInAllStages))

"""

"""
from_vk(T::Type{MemoryRequirements2}, x::VkMemoryRequirements2) = T(x.sType, x.pNext, from_vk(MemoryRequirements, x.memoryRequirements))

"""

"""
from_vk(T::Type{SparseImageMemoryRequirements2}, x::VkSparseImageMemoryRequirements2) = T(x.sType, x.pNext, from_vk(SparseImageMemoryRequirements, x.memoryRequirements))

"""

"""
from_vk(T::Type{PhysicalDevicePointClippingProperties}, x::VkPhysicalDevicePointClippingProperties) = T(x.sType, x.pNext, x.pointClippingBehavior)

"""

"""
from_vk(T::Type{MemoryDedicatedRequirements}, x::VkMemoryDedicatedRequirements) = T(x.sType, x.pNext, from_vk(Bool, x.prefersDedicatedAllocation), from_vk(Bool, x.requiresDedicatedAllocation))

"""

"""
from_vk(T::Type{SamplerYcbcrConversionImageFormatProperties}, x::VkSamplerYcbcrConversionImageFormatProperties) = T(x.sType, x.pNext, x.combinedImageSamplerDescriptorCount)

"""

"""
from_vk(T::Type{TextureLODGatherFormatPropertiesAMD}, x::VkTextureLODGatherFormatPropertiesAMD) = T(x.sType, x.pNext, from_vk(Bool, x.supportsTextureGatherLODBiasAMD))

"""

"""
from_vk(T::Type{PhysicalDeviceProtectedMemoryProperties}, x::VkPhysicalDeviceProtectedMemoryProperties) = T(x.sType, x.pNext, from_vk(Bool, x.protectedNoFault))

"""

"""
from_vk(T::Type{PhysicalDeviceSamplerFilterMinmaxProperties}, x::VkPhysicalDeviceSamplerFilterMinmaxProperties) = T(x.sType, x.pNext, from_vk(Bool, x.filterMinmaxSingleComponentFormats), from_vk(Bool, x.filterMinmaxImageComponentMapping))

"""

"""
from_vk(T::Type{PhysicalDeviceSampleLocationsPropertiesEXT}, x::VkPhysicalDeviceSampleLocationsPropertiesEXT) = T(x.sType, x.pNext, x.sampleLocationSampleCounts, from_vk(_Extent2D, x.maxSampleLocationGridSize), x.sampleLocationCoordinateRange, x.sampleLocationSubPixelBits, from_vk(Bool, x.variableSampleLocations))

"""

"""
from_vk(T::Type{MultisamplePropertiesEXT}, x::VkMultisamplePropertiesEXT) = T(x.sType, x.pNext, from_vk(_Extent2D, x.maxSampleLocationGridSize))

"""

"""
from_vk(T::Type{PhysicalDeviceBlendOperationAdvancedPropertiesEXT}, x::VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT) = T(x.sType, x.pNext, x.advancedBlendMaxColorAttachments, from_vk(Bool, x.advancedBlendIndependentBlend), from_vk(Bool, x.advancedBlendNonPremultipliedSrcColor), from_vk(Bool, x.advancedBlendNonPremultipliedDstColor), from_vk(Bool, x.advancedBlendCorrelatedOverlap), from_vk(Bool, x.advancedBlendAllOperations))

"""

"""
from_vk(T::Type{PhysicalDeviceInlineUniformBlockPropertiesEXT}, x::VkPhysicalDeviceInlineUniformBlockPropertiesEXT) = T(x.sType, x.pNext, x.maxInlineUniformBlockSize, x.maxPerStageDescriptorInlineUniformBlocks, x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, x.maxDescriptorSetInlineUniformBlocks, x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)

"""

"""
from_vk(T::Type{PhysicalDeviceMaintenance3Properties}, x::VkPhysicalDeviceMaintenance3Properties) = T(x.sType, x.pNext, x.maxPerSetDescriptors, x.maxMemoryAllocationSize)

"""

"""
from_vk(T::Type{DescriptorSetLayoutSupport}, x::VkDescriptorSetLayoutSupport) = T(x.sType, x.pNext, from_vk(Bool, x.supported))

"""

"""
from_vk(T::Type{PhysicalDeviceFloatControlsProperties}, x::VkPhysicalDeviceFloatControlsProperties) = T(x.sType, x.pNext, x.denormBehaviorIndependence, x.roundingModeIndependence, from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat16), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat32), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat64), from_vk(Bool, x.shaderDenormPreserveFloat16), from_vk(Bool, x.shaderDenormPreserveFloat32), from_vk(Bool, x.shaderDenormPreserveFloat64), from_vk(Bool, x.shaderDenormFlushToZeroFloat16), from_vk(Bool, x.shaderDenormFlushToZeroFloat32), from_vk(Bool, x.shaderDenormFlushToZeroFloat64), from_vk(Bool, x.shaderRoundingModeRTEFloat16), from_vk(Bool, x.shaderRoundingModeRTEFloat32), from_vk(Bool, x.shaderRoundingModeRTEFloat64), from_vk(Bool, x.shaderRoundingModeRTZFloat16), from_vk(Bool, x.shaderRoundingModeRTZFloat32), from_vk(Bool, x.shaderRoundingModeRTZFloat64))

"""

"""
from_vk(T::Type{ShaderResourceUsageAMD}, x::VkShaderResourceUsageAMD) = T(x.numUsedVgprs, x.numUsedSgprs, x.ldsSizePerLocalWorkGroup, x.ldsUsageSizeInBytes, x.scratchMemUsageInBytes)

"""

"""
from_vk(T::Type{ShaderStatisticsInfoAMD}, x::VkShaderStatisticsInfoAMD) = T(x.shaderStageMask, from_vk(ShaderResourceUsageAMD, x.resourceUsage), x.numPhysicalVgprs, x.numPhysicalSgprs, x.numAvailableVgprs, x.numAvailableSgprs, x.computeWorkGroupSize)

"""

"""
from_vk(T::Type{DeviceMemoryReportCallbackDataEXT}, x::VkDeviceMemoryReportCallbackDataEXT) = T(x.sType, x.pNext, x.flags, x.type, x.memoryObjectId, x.size, x.objectType, x.objectHandle, x.heapIndex)

"""

"""
from_vk(T::Type{MemoryHostPointerPropertiesEXT}, x::VkMemoryHostPointerPropertiesEXT) = T(x.sType, x.pNext, x.memoryTypeBits)

"""

"""
from_vk(T::Type{PhysicalDeviceExternalMemoryHostPropertiesEXT}, x::VkPhysicalDeviceExternalMemoryHostPropertiesEXT) = T(x.sType, x.pNext, x.minImportedHostPointerAlignment)

"""

"""
from_vk(T::Type{PhysicalDeviceConservativeRasterizationPropertiesEXT}, x::VkPhysicalDeviceConservativeRasterizationPropertiesEXT) = T(x.sType, x.pNext, x.primitiveOverestimationSize, x.maxExtraPrimitiveOverestimationSize, x.extraPrimitiveOverestimationSizeGranularity, from_vk(Bool, x.primitiveUnderestimation), from_vk(Bool, x.conservativePointAndLineRasterization), from_vk(Bool, x.degenerateTrianglesRasterized), from_vk(Bool, x.degenerateLinesRasterized), from_vk(Bool, x.fullyCoveredFragmentShaderInputVariable), from_vk(Bool, x.conservativeRasterizationPostDepthCoverage))

"""

"""
from_vk(T::Type{PhysicalDeviceShaderCorePropertiesAMD}, x::VkPhysicalDeviceShaderCorePropertiesAMD) = T(x.sType, x.pNext, x.shaderEngineCount, x.shaderArraysPerEngineCount, x.computeUnitsPerShaderArray, x.simdPerComputeUnit, x.wavefrontsPerSimd, x.wavefrontSize, x.sgprsPerSimd, x.minSgprAllocation, x.maxSgprAllocation, x.sgprAllocationGranularity, x.vgprsPerSimd, x.minVgprAllocation, x.maxVgprAllocation, x.vgprAllocationGranularity)

"""

"""
from_vk(T::Type{PhysicalDeviceShaderCoreProperties2AMD}, x::VkPhysicalDeviceShaderCoreProperties2AMD) = T(x.sType, x.pNext, x.shaderCoreFeatures, x.activeComputeUnitCount)

"""

"""
from_vk(T::Type{PhysicalDeviceDescriptorIndexingProperties}, x::VkPhysicalDeviceDescriptorIndexingProperties) = T(x.sType, x.pNext, x.maxUpdateAfterBindDescriptorsInAllPools, from_vk(Bool, x.shaderUniformBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderSampledImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderInputAttachmentArrayNonUniformIndexingNative), from_vk(Bool, x.robustBufferAccessUpdateAfterBind), from_vk(Bool, x.quadDivergentImplicitLod), x.maxPerStageDescriptorUpdateAfterBindSamplers, x.maxPerStageDescriptorUpdateAfterBindUniformBuffers, x.maxPerStageDescriptorUpdateAfterBindStorageBuffers, x.maxPerStageDescriptorUpdateAfterBindSampledImages, x.maxPerStageDescriptorUpdateAfterBindStorageImages, x.maxPerStageDescriptorUpdateAfterBindInputAttachments, x.maxPerStageUpdateAfterBindResources, x.maxDescriptorSetUpdateAfterBindSamplers, x.maxDescriptorSetUpdateAfterBindUniformBuffers, x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, x.maxDescriptorSetUpdateAfterBindStorageBuffers, x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, x.maxDescriptorSetUpdateAfterBindSampledImages, x.maxDescriptorSetUpdateAfterBindStorageImages, x.maxDescriptorSetUpdateAfterBindInputAttachments)

"""

"""
from_vk(T::Type{DescriptorSetVariableDescriptorCountLayoutSupport}, x::VkDescriptorSetVariableDescriptorCountLayoutSupport) = T(x.sType, x.pNext, x.maxVariableDescriptorCount)

"""

"""
from_vk(T::Type{PhysicalDeviceTimelineSemaphoreProperties}, x::VkPhysicalDeviceTimelineSemaphoreProperties) = T(x.sType, x.pNext, x.maxTimelineSemaphoreValueDifference)

"""

"""
from_vk(T::Type{PhysicalDeviceVertexAttributeDivisorPropertiesEXT}, x::VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT) = T(x.sType, x.pNext, x.maxVertexAttribDivisor)

"""

"""
from_vk(T::Type{PhysicalDevicePCIBusInfoPropertiesEXT}, x::VkPhysicalDevicePCIBusInfoPropertiesEXT) = T(x.sType, x.pNext, x.pciDomain, x.pciBus, x.pciDevice, x.pciFunction)

"""

"""
from_vk(T::Type{QueueFamilyCheckpointPropertiesNV}, x::VkQueueFamilyCheckpointPropertiesNV) = T(x.sType, x.pNext, x.checkpointExecutionStageMask)

"""

"""
from_vk(T::Type{CheckpointDataNV}, x::VkCheckpointDataNV) = T(x.sType, x.pNext, PipelineStageFlag(UInt32(x.stage)), x.pCheckpointMarker)

"""

"""
from_vk(T::Type{PhysicalDeviceDepthStencilResolveProperties}, x::VkPhysicalDeviceDepthStencilResolveProperties) = T(x.sType, x.pNext, x.supportedDepthResolveModes, x.supportedStencilResolveModes, from_vk(Bool, x.independentResolveNone), from_vk(Bool, x.independentResolve))

"""

"""
from_vk(T::Type{PhysicalDeviceTransformFeedbackPropertiesEXT}, x::VkPhysicalDeviceTransformFeedbackPropertiesEXT) = T(x.sType, x.pNext, x.maxTransformFeedbackStreams, x.maxTransformFeedbackBuffers, x.maxTransformFeedbackBufferSize, x.maxTransformFeedbackStreamDataSize, x.maxTransformFeedbackBufferDataSize, x.maxTransformFeedbackBufferDataStride, from_vk(Bool, x.transformFeedbackQueries), from_vk(Bool, x.transformFeedbackStreamsLinesTriangles), from_vk(Bool, x.transformFeedbackRasterizationStreamSelect), from_vk(Bool, x.transformFeedbackDraw))

"""

"""
from_vk(T::Type{PhysicalDeviceShadingRateImagePropertiesNV}, x::VkPhysicalDeviceShadingRateImagePropertiesNV) = T(x.sType, x.pNext, from_vk(_Extent2D, x.shadingRateTexelSize), x.shadingRatePaletteSize, x.shadingRateMaxCoarseSamples)

"""

"""
from_vk(T::Type{PhysicalDeviceMeshShaderPropertiesNV}, x::VkPhysicalDeviceMeshShaderPropertiesNV) = T(x.sType, x.pNext, x.maxDrawMeshTasksCount, x.maxTaskWorkGroupInvocations, x.maxTaskWorkGroupSize, x.maxTaskTotalMemorySize, x.maxTaskOutputCount, x.maxMeshWorkGroupInvocations, x.maxMeshWorkGroupSize, x.maxMeshTotalMemorySize, x.maxMeshOutputVertices, x.maxMeshOutputPrimitives, x.maxMeshMultiviewViewCount, x.meshOutputPerVertexGranularity, x.meshOutputPerPrimitiveGranularity)

"""

"""
from_vk(T::Type{PhysicalDeviceAccelerationStructurePropertiesKHR}, x::VkPhysicalDeviceAccelerationStructurePropertiesKHR) = T(x.sType, x.pNext, x.maxGeometryCount, x.maxInstanceCount, x.maxPrimitiveCount, x.maxPerStageDescriptorAccelerationStructures, x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures, x.maxDescriptorSetAccelerationStructures, x.maxDescriptorSetUpdateAfterBindAccelerationStructures, x.minAccelerationStructureScratchOffsetAlignment)

"""

"""
from_vk(T::Type{PhysicalDeviceRayTracingPipelinePropertiesKHR}, x::VkPhysicalDeviceRayTracingPipelinePropertiesKHR) = T(x.sType, x.pNext, x.shaderGroupHandleSize, x.maxRayRecursionDepth, x.maxShaderGroupStride, x.shaderGroupBaseAlignment, x.shaderGroupHandleCaptureReplaySize, x.maxRayDispatchInvocationCount, x.shaderGroupHandleAlignment, x.maxRayHitAttributeSize)

"""

"""
from_vk(T::Type{PhysicalDeviceRayTracingPropertiesNV}, x::VkPhysicalDeviceRayTracingPropertiesNV) = T(x.sType, x.pNext, x.shaderGroupHandleSize, x.maxRecursionDepth, x.maxShaderGroupStride, x.shaderGroupBaseAlignment, x.maxGeometryCount, x.maxInstanceCount, x.maxTriangleCount, x.maxDescriptorSetAccelerationStructures)

"""

"""
from_vk(T::Type{DrmFormatModifierPropertiesListEXT}, x::VkDrmFormatModifierPropertiesListEXT) = T(x.sType, x.pNext, unsafe_wrap(Vector{DrmFormatModifierPropertiesEXT}, x.pDrmFormatModifierProperties, x.drmFormatModifierCount; own = true))

"""

"""
from_vk(T::Type{DrmFormatModifierPropertiesEXT}, x::VkDrmFormatModifierPropertiesEXT) = T(x.drmFormatModifier, x.drmFormatModifierPlaneCount, x.drmFormatModifierTilingFeatures)

"""

"""
from_vk(T::Type{ImageDrmFormatModifierPropertiesEXT}, x::VkImageDrmFormatModifierPropertiesEXT) = T(x.sType, x.pNext, x.drmFormatModifier)

"""

"""
from_vk(T::Type{PhysicalDeviceFragmentDensityMapPropertiesEXT}, x::VkPhysicalDeviceFragmentDensityMapPropertiesEXT) = T(x.sType, x.pNext, from_vk(_Extent2D, x.minFragmentDensityTexelSize), from_vk(_Extent2D, x.maxFragmentDensityTexelSize), from_vk(Bool, x.fragmentDensityInvocations))

"""

"""
from_vk(T::Type{PhysicalDeviceFragmentDensityMap2PropertiesEXT}, x::VkPhysicalDeviceFragmentDensityMap2PropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.subsampledLoads), from_vk(Bool, x.subsampledCoarseReconstructionEarlyAccess), x.maxSubsampledArrayLayers, x.maxDescriptorSetSubsampledSamplers)

"""

"""
from_vk(T::Type{PhysicalDeviceMemoryBudgetPropertiesEXT}, x::VkPhysicalDeviceMemoryBudgetPropertiesEXT) = T(x.sType, x.pNext, from_vk(NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}, x.heapBudget), from_vk(NTuple{Int(VK_MAX_MEMORY_HEAPS), UInt64}, x.heapUsage))

"""

"""
from_vk(T::Type{FilterCubicImageViewImageFormatPropertiesEXT}, x::VkFilterCubicImageViewImageFormatPropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.filterCubic), from_vk(Bool, x.filterCubicMinmax))

"""

"""
from_vk(T::Type{PhysicalDeviceCooperativeMatrixPropertiesNV}, x::VkPhysicalDeviceCooperativeMatrixPropertiesNV) = T(x.sType, x.pNext, x.cooperativeMatrixSupportedStages)

"""

"""
from_vk(T::Type{ImageViewAddressPropertiesNVX}, x::VkImageViewAddressPropertiesNVX) = T(x.sType, x.pNext, x.deviceAddress, x.size)

"""

"""
from_vk(T::Type{PipelineCreationFeedbackEXT}, x::VkPipelineCreationFeedbackEXT) = T(x.flags, x.duration)

"""

"""
from_vk(T::Type{PhysicalDevicePerformanceQueryPropertiesKHR}, x::VkPhysicalDevicePerformanceQueryPropertiesKHR) = T(x.sType, x.pNext, from_vk(Bool, x.allowCommandBufferQueryCopies))

"""

"""
from_vk(T::Type{PerformanceCounterKHR}, x::VkPerformanceCounterKHR) = T(x.sType, x.pNext, x.unit, x.scope, x.storage, from_vk(String, x.uuid))

"""

"""
from_vk(T::Type{PerformanceCounterDescriptionKHR}, x::VkPerformanceCounterDescriptionKHR) = T(x.sType, x.pNext, x.flags, from_vk(String, x.name), from_vk(String, x.category), from_vk(String, x.description))

"""

"""
from_vk(T::Type{FramebufferMixedSamplesCombinationNV}, x::VkFramebufferMixedSamplesCombinationNV) = T(x.sType, x.pNext, x.coverageReductionMode, SampleCountFlag(UInt32(x.rasterizationSamples)), x.depthStencilSamples, x.colorSamples)

"""

"""
from_vk(T::Type{PhysicalDeviceShaderSMBuiltinsPropertiesNV}, x::VkPhysicalDeviceShaderSMBuiltinsPropertiesNV) = T(x.sType, x.pNext, x.shaderSMCount, x.shaderWarpsPerSM)

"""

"""
from_vk(T::Type{PipelineExecutablePropertiesKHR}, x::VkPipelineExecutablePropertiesKHR) = T(x.sType, x.pNext, x.stages, from_vk(String, x.name), from_vk(String, x.description), x.subgroupSize)

"""

"""
from_vk(T::Type{PipelineExecutableStatisticKHR}, x::VkPipelineExecutableStatisticKHR) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.description), x.format, from_vk(PipelineExecutableStatisticValueKHR, x.value))

"""

"""
from_vk(T::Type{PipelineExecutableInternalRepresentationKHR}, x::VkPipelineExecutableInternalRepresentationKHR) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.description), from_vk(Bool, x.isText), x.dataSize, x.pData)

"""

"""
from_vk(T::Type{PhysicalDeviceTexelBufferAlignmentPropertiesEXT}, x::VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT) = T(x.sType, x.pNext, x.storageTexelBufferOffsetAlignmentBytes, from_vk(Bool, x.storageTexelBufferOffsetSingleTexelAlignment), x.uniformTexelBufferOffsetAlignmentBytes, from_vk(Bool, x.uniformTexelBufferOffsetSingleTexelAlignment))

"""

"""
from_vk(T::Type{PhysicalDeviceSubgroupSizeControlPropertiesEXT}, x::VkPhysicalDeviceSubgroupSizeControlPropertiesEXT) = T(x.sType, x.pNext, x.minSubgroupSize, x.maxSubgroupSize, x.maxComputeWorkgroupSubgroups, x.requiredSubgroupSizeStages)

"""

"""
from_vk(T::Type{PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT}, x::VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT) = T(x.sType, x.pNext, x.requiredSubgroupSize)

"""

"""
from_vk(T::Type{PhysicalDeviceLineRasterizationPropertiesEXT}, x::VkPhysicalDeviceLineRasterizationPropertiesEXT) = T(x.sType, x.pNext, x.lineSubPixelPrecisionBits)

"""

"""
from_vk(T::Type{PhysicalDeviceVulkan11Properties}, x::VkPhysicalDeviceVulkan11Properties) = T(x.sType, x.pNext, from_vk(String, x.deviceUUID), from_vk(String, x.driverUUID), from_vk(String, x.deviceLUID), x.deviceNodeMask, from_vk(Bool, x.deviceLUIDValid), x.subgroupSize, x.subgroupSupportedStages, x.subgroupSupportedOperations, from_vk(Bool, x.subgroupQuadOperationsInAllStages), x.pointClippingBehavior, x.maxMultiviewViewCount, x.maxMultiviewInstanceIndex, from_vk(Bool, x.protectedNoFault), x.maxPerSetDescriptors, x.maxMemoryAllocationSize)

"""

"""
from_vk(T::Type{PhysicalDeviceVulkan12Properties}, x::VkPhysicalDeviceVulkan12Properties) = T(x.sType, x.pNext, x.driverID, from_vk(String, x.driverName), from_vk(String, x.driverInfo), from_vk(_ConformanceVersion, x.conformanceVersion), x.denormBehaviorIndependence, x.roundingModeIndependence, from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat16), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat32), from_vk(Bool, x.shaderSignedZeroInfNanPreserveFloat64), from_vk(Bool, x.shaderDenormPreserveFloat16), from_vk(Bool, x.shaderDenormPreserveFloat32), from_vk(Bool, x.shaderDenormPreserveFloat64), from_vk(Bool, x.shaderDenormFlushToZeroFloat16), from_vk(Bool, x.shaderDenormFlushToZeroFloat32), from_vk(Bool, x.shaderDenormFlushToZeroFloat64), from_vk(Bool, x.shaderRoundingModeRTEFloat16), from_vk(Bool, x.shaderRoundingModeRTEFloat32), from_vk(Bool, x.shaderRoundingModeRTEFloat64), from_vk(Bool, x.shaderRoundingModeRTZFloat16), from_vk(Bool, x.shaderRoundingModeRTZFloat32), from_vk(Bool, x.shaderRoundingModeRTZFloat64), x.maxUpdateAfterBindDescriptorsInAllPools, from_vk(Bool, x.shaderUniformBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderSampledImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageBufferArrayNonUniformIndexingNative), from_vk(Bool, x.shaderStorageImageArrayNonUniformIndexingNative), from_vk(Bool, x.shaderInputAttachmentArrayNonUniformIndexingNative), from_vk(Bool, x.robustBufferAccessUpdateAfterBind), from_vk(Bool, x.quadDivergentImplicitLod), x.maxPerStageDescriptorUpdateAfterBindSamplers, x.maxPerStageDescriptorUpdateAfterBindUniformBuffers, x.maxPerStageDescriptorUpdateAfterBindStorageBuffers, x.maxPerStageDescriptorUpdateAfterBindSampledImages, x.maxPerStageDescriptorUpdateAfterBindStorageImages, x.maxPerStageDescriptorUpdateAfterBindInputAttachments, x.maxPerStageUpdateAfterBindResources, x.maxDescriptorSetUpdateAfterBindSamplers, x.maxDescriptorSetUpdateAfterBindUniformBuffers, x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, x.maxDescriptorSetUpdateAfterBindStorageBuffers, x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, x.maxDescriptorSetUpdateAfterBindSampledImages, x.maxDescriptorSetUpdateAfterBindStorageImages, x.maxDescriptorSetUpdateAfterBindInputAttachments, x.supportedDepthResolveModes, x.supportedStencilResolveModes, from_vk(Bool, x.independentResolveNone), from_vk(Bool, x.independentResolve), from_vk(Bool, x.filterMinmaxSingleComponentFormats), from_vk(Bool, x.filterMinmaxImageComponentMapping), x.maxTimelineSemaphoreValueDifference, x.framebufferIntegerColorSampleCounts)

"""

"""
from_vk(T::Type{PhysicalDeviceToolPropertiesEXT}, x::VkPhysicalDeviceToolPropertiesEXT) = T(x.sType, x.pNext, from_vk(String, x.name), from_vk(String, x.version), x.purposes, from_vk(String, x.description), from_vk(String, x.layer))

"""

"""
from_vk(T::Type{PhysicalDeviceCustomBorderColorPropertiesEXT}, x::VkPhysicalDeviceCustomBorderColorPropertiesEXT) = T(x.sType, x.pNext, x.maxCustomBorderColorSamplers)

"""

"""
from_vk(T::Type{PhysicalDeviceRobustness2PropertiesEXT}, x::VkPhysicalDeviceRobustness2PropertiesEXT) = T(x.sType, x.pNext, x.robustStorageBufferAccessSizeAlignment, x.robustUniformBufferAccessSizeAlignment)

"""

"""
from_vk(T::Type{PhysicalDeviceFragmentShadingRatePropertiesKHR}, x::VkPhysicalDeviceFragmentShadingRatePropertiesKHR) = T(x.sType, x.pNext, from_vk(_Extent2D, x.minFragmentShadingRateAttachmentTexelSize), from_vk(_Extent2D, x.maxFragmentShadingRateAttachmentTexelSize), x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio, from_vk(Bool, x.primitiveFragmentShadingRateWithMultipleViewports), from_vk(Bool, x.layeredShadingRateAttachments), from_vk(Bool, x.fragmentShadingRateNonTrivialCombinerOps), from_vk(_Extent2D, x.maxFragmentSize), x.maxFragmentSizeAspectRatio, x.maxFragmentShadingRateCoverageSamples, SampleCountFlag(UInt32(x.maxFragmentShadingRateRasterizationSamples)), from_vk(Bool, x.fragmentShadingRateWithShaderDepthStencilWrites), from_vk(Bool, x.fragmentShadingRateWithSampleMask), from_vk(Bool, x.fragmentShadingRateWithShaderSampleMask), from_vk(Bool, x.fragmentShadingRateWithConservativeRasterization), from_vk(Bool, x.fragmentShadingRateWithFragmentShaderInterlock), from_vk(Bool, x.fragmentShadingRateWithCustomSampleLocations), from_vk(Bool, x.fragmentShadingRateStrictMultiplyCombiner))

"""

"""
from_vk(T::Type{PhysicalDeviceFragmentShadingRateKHR}, x::VkPhysicalDeviceFragmentShadingRateKHR) = T(x.sType, x.pNext, x.sampleCounts, from_vk(_Extent2D, x.fragmentSize))

"""

"""
from_vk(T::Type{QueueFamilyCheckpointProperties2NV}, x::VkQueueFamilyCheckpointProperties2NV) = T(x.sType, x.pNext, x.checkpointExecutionStageMask)

"""

"""
from_vk(T::Type{CheckpointData2NV}, x::VkCheckpointData2NV) = T(x.sType, x.pNext, x.stage, x.pCheckpointMarker)

"""

"""
from_vk(T::Type{PhysicalDeviceProvokingVertexPropertiesEXT}, x::VkPhysicalDeviceProvokingVertexPropertiesEXT) = T(x.sType, x.pNext, from_vk(Bool, x.provokingVertexModePerPipeline), from_vk(Bool, x.transformFeedbackPreservesTriangleFanProvokingVertex))



export MAX_PHYSICAL_DEVICE_NAME_SIZE, UUID_SIZE, LUID_SIZE, MAX_DESCRIPTION_SIZE, MAX_MEMORY_TYPES, MAX_MEMORY_HEAPS, LOD_CLAMP_NONE, REMAINING_MIP_LEVELS, REMAINING_ARRAY_LAYERS, WHOLE_SIZE, ATTACHMENT_UNUSED, QUEUE_FAMILY_IGNORED, QUEUE_FAMILY_EXTERNAL, QUEUE_FAMILY_FOREIGN_EXT, SUBPASS_EXTERNAL, MAX_DEVICE_GROUP_SIZE, MAX_DRIVER_NAME_SIZE, MAX_DRIVER_INFO_SIZE, SHADER_UNUSED_KHR, ImageLayout, IMAGE_LAYOUT_UNDEFINED, IMAGE_LAYOUT_GENERAL, IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, IMAGE_LAYOUT_PREINITIALIZED, IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL, IMAGE_LAYOUT_PRESENT_SRC_KHR, IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR, IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR, IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR, IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR, IMAGE_LAYOUT_SHARED_PRESENT_KHR, IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV, IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT, IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR, IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR, AttachmentLoadOp, ATTACHMENT_LOAD_OP_LOAD, ATTACHMENT_LOAD_OP_CLEAR, ATTACHMENT_LOAD_OP_DONT_CARE, AttachmentStoreOp, ATTACHMENT_STORE_OP_STORE, ATTACHMENT_STORE_OP_DONT_CARE, ATTACHMENT_STORE_OP_NONE_QCOM, ImageType, IMAGE_TYPE_1D, IMAGE_TYPE_2D, IMAGE_TYPE_3D, ImageTiling, IMAGE_TILING_OPTIMAL, IMAGE_TILING_LINEAR, IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, ImageViewType, IMAGE_VIEW_TYPE_1D, IMAGE_VIEW_TYPE_2D, IMAGE_VIEW_TYPE_3D, IMAGE_VIEW_TYPE_CUBE, IMAGE_VIEW_TYPE_1D_ARRAY, IMAGE_VIEW_TYPE_2D_ARRAY, IMAGE_VIEW_TYPE_CUBE_ARRAY, CommandBufferLevel, COMMAND_BUFFER_LEVEL_PRIMARY, COMMAND_BUFFER_LEVEL_SECONDARY, ComponentSwizzle, COMPONENT_SWIZZLE_IDENTITY, COMPONENT_SWIZZLE_ZERO, COMPONENT_SWIZZLE_ONE, COMPONENT_SWIZZLE_R, COMPONENT_SWIZZLE_G, COMPONENT_SWIZZLE_B, COMPONENT_SWIZZLE_A, DescriptorType, DESCRIPTOR_TYPE_SAMPLER, DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, DESCRIPTOR_TYPE_SAMPLED_IMAGE, DESCRIPTOR_TYPE_STORAGE_IMAGE, DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, DESCRIPTOR_TYPE_UNIFORM_BUFFER, DESCRIPTOR_TYPE_STORAGE_BUFFER, DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, DESCRIPTOR_TYPE_INPUT_ATTACHMENT, DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV, DESCRIPTOR_TYPE_MUTABLE_VALVE, QueryType, QUERY_TYPE_OCCLUSION, QUERY_TYPE_PIPELINE_STATISTICS, QUERY_TYPE_TIMESTAMP, QUERY_TYPE_RESULT_STATUS_ONLY_KHR, QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR, QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT, QUERY_TYPE_PERFORMANCE_QUERY_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV, QUERY_TYPE_PERFORMANCE_QUERY_INTEL, BorderColor, BORDER_COLOR_FLOAT_TRANSPARENT_BLACK, BORDER_COLOR_INT_TRANSPARENT_BLACK, BORDER_COLOR_FLOAT_OPAQUE_BLACK, BORDER_COLOR_INT_OPAQUE_BLACK, BORDER_COLOR_FLOAT_OPAQUE_WHITE, BORDER_COLOR_INT_OPAQUE_WHITE, BORDER_COLOR_FLOAT_CUSTOM_EXT, BORDER_COLOR_INT_CUSTOM_EXT, PipelineBindPoint, PIPELINE_BIND_POINT_GRAPHICS, PIPELINE_BIND_POINT_COMPUTE, PIPELINE_BIND_POINT_RAY_TRACING_KHR, PipelineCacheHeaderVersion, PIPELINE_CACHE_HEADER_VERSION_ONE, PrimitiveTopology, PRIMITIVE_TOPOLOGY_POINT_LIST, PRIMITIVE_TOPOLOGY_LINE_LIST, PRIMITIVE_TOPOLOGY_LINE_STRIP, PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, PRIMITIVE_TOPOLOGY_PATCH_LIST, SharingMode, SHARING_MODE_EXCLUSIVE, SHARING_MODE_CONCURRENT, IndexType, INDEX_TYPE_UINT16, INDEX_TYPE_UINT32, INDEX_TYPE_NONE_KHR, INDEX_TYPE_UINT8_EXT, Filter, FILTER_NEAREST, FILTER_LINEAR, FILTER_CUBIC_IMG, SamplerMipmapMode, SAMPLER_MIPMAP_MODE_NEAREST, SAMPLER_MIPMAP_MODE_LINEAR, SamplerAddressMode, SAMPLER_ADDRESS_MODE_REPEAT, SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT, SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE, CompareOp, COMPARE_OP_NEVER, COMPARE_OP_LESS, COMPARE_OP_EQUAL, COMPARE_OP_LESS_OR_EQUAL, COMPARE_OP_GREATER, COMPARE_OP_NOT_EQUAL, COMPARE_OP_GREATER_OR_EQUAL, COMPARE_OP_ALWAYS, PolygonMode, POLYGON_MODE_FILL, POLYGON_MODE_LINE, POLYGON_MODE_POINT, POLYGON_MODE_FILL_RECTANGLE_NV, FrontFace, FRONT_FACE_COUNTER_CLOCKWISE, FRONT_FACE_CLOCKWISE, BlendFactor, BLEND_FACTOR_ZERO, BLEND_FACTOR_ONE, BLEND_FACTOR_SRC_COLOR, BLEND_FACTOR_ONE_MINUS_SRC_COLOR, BLEND_FACTOR_DST_COLOR, BLEND_FACTOR_ONE_MINUS_DST_COLOR, BLEND_FACTOR_SRC_ALPHA, BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, BLEND_FACTOR_DST_ALPHA, BLEND_FACTOR_ONE_MINUS_DST_ALPHA, BLEND_FACTOR_CONSTANT_COLOR, BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR, BLEND_FACTOR_CONSTANT_ALPHA, BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA, BLEND_FACTOR_SRC_ALPHA_SATURATE, BLEND_FACTOR_SRC1_COLOR, BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, BLEND_FACTOR_SRC1_ALPHA, BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA, BlendOp, BLEND_OP_ADD, BLEND_OP_SUBTRACT, BLEND_OP_REVERSE_SUBTRACT, BLEND_OP_MIN, BLEND_OP_MAX, BLEND_OP_ZERO_EXT, BLEND_OP_SRC_EXT, BLEND_OP_DST_EXT, BLEND_OP_SRC_OVER_EXT, BLEND_OP_DST_OVER_EXT, BLEND_OP_SRC_IN_EXT, BLEND_OP_DST_IN_EXT, BLEND_OP_SRC_OUT_EXT, BLEND_OP_DST_OUT_EXT, BLEND_OP_SRC_ATOP_EXT, BLEND_OP_DST_ATOP_EXT, BLEND_OP_XOR_EXT, BLEND_OP_MULTIPLY_EXT, BLEND_OP_SCREEN_EXT, BLEND_OP_OVERLAY_EXT, BLEND_OP_DARKEN_EXT, BLEND_OP_LIGHTEN_EXT, BLEND_OP_COLORDODGE_EXT, BLEND_OP_COLORBURN_EXT, BLEND_OP_HARDLIGHT_EXT, BLEND_OP_SOFTLIGHT_EXT, BLEND_OP_DIFFERENCE_EXT, BLEND_OP_EXCLUSION_EXT, BLEND_OP_INVERT_EXT, BLEND_OP_INVERT_RGB_EXT, BLEND_OP_LINEARDODGE_EXT, BLEND_OP_LINEARBURN_EXT, BLEND_OP_VIVIDLIGHT_EXT, BLEND_OP_LINEARLIGHT_EXT, BLEND_OP_PINLIGHT_EXT, BLEND_OP_HARDMIX_EXT, BLEND_OP_HSL_HUE_EXT, BLEND_OP_HSL_SATURATION_EXT, BLEND_OP_HSL_COLOR_EXT, BLEND_OP_HSL_LUMINOSITY_EXT, BLEND_OP_PLUS_EXT, BLEND_OP_PLUS_CLAMPED_EXT, BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, BLEND_OP_PLUS_DARKER_EXT, BLEND_OP_MINUS_EXT, BLEND_OP_MINUS_CLAMPED_EXT, BLEND_OP_CONTRAST_EXT, BLEND_OP_INVERT_OVG_EXT, BLEND_OP_RED_EXT, BLEND_OP_GREEN_EXT, BLEND_OP_BLUE_EXT, StencilOp, STENCIL_OP_KEEP, STENCIL_OP_ZERO, STENCIL_OP_REPLACE, STENCIL_OP_INCREMENT_AND_CLAMP, STENCIL_OP_DECREMENT_AND_CLAMP, STENCIL_OP_INVERT, STENCIL_OP_INCREMENT_AND_WRAP, STENCIL_OP_DECREMENT_AND_WRAP, LogicOp, LOGIC_OP_CLEAR, LOGIC_OP_AND, LOGIC_OP_AND_REVERSE, LOGIC_OP_COPY, LOGIC_OP_AND_INVERTED, LOGIC_OP_NO_OP, LOGIC_OP_XOR, LOGIC_OP_OR, LOGIC_OP_NOR, LOGIC_OP_EQUIVALENT, LOGIC_OP_INVERT, LOGIC_OP_OR_REVERSE, LOGIC_OP_COPY_INVERTED, LOGIC_OP_OR_INVERTED, LOGIC_OP_NAND, LOGIC_OP_SET, InternalAllocationType, INTERNAL_ALLOCATION_TYPE_EXECUTABLE, SystemAllocationScope, SYSTEM_ALLOCATION_SCOPE_COMMAND, SYSTEM_ALLOCATION_SCOPE_OBJECT, SYSTEM_ALLOCATION_SCOPE_CACHE, SYSTEM_ALLOCATION_SCOPE_DEVICE, SYSTEM_ALLOCATION_SCOPE_INSTANCE, PhysicalDeviceType, PHYSICAL_DEVICE_TYPE_OTHER, PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU, PHYSICAL_DEVICE_TYPE_DISCRETE_GPU, PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU, PHYSICAL_DEVICE_TYPE_CPU, VertexInputRate, VERTEX_INPUT_RATE_VERTEX, VERTEX_INPUT_RATE_INSTANCE, Format, FORMAT_UNDEFINED, FORMAT_R4G4_UNORM_PACK8, FORMAT_R4G4B4A4_UNORM_PACK16, FORMAT_B4G4R4A4_UNORM_PACK16, FORMAT_R5G6B5_UNORM_PACK16, FORMAT_B5G6R5_UNORM_PACK16, FORMAT_R5G5B5A1_UNORM_PACK16, FORMAT_B5G5R5A1_UNORM_PACK16, FORMAT_A1R5G5B5_UNORM_PACK16, FORMAT_R8_UNORM, FORMAT_R8_SNORM, FORMAT_R8_USCALED, FORMAT_R8_SSCALED, FORMAT_R8_UINT, FORMAT_R8_SINT, FORMAT_R8_SRGB, FORMAT_R8G8_UNORM, FORMAT_R8G8_SNORM, FORMAT_R8G8_USCALED, FORMAT_R8G8_SSCALED, FORMAT_R8G8_UINT, FORMAT_R8G8_SINT, FORMAT_R8G8_SRGB, FORMAT_R8G8B8_UNORM, FORMAT_R8G8B8_SNORM, FORMAT_R8G8B8_USCALED, FORMAT_R8G8B8_SSCALED, FORMAT_R8G8B8_UINT, FORMAT_R8G8B8_SINT, FORMAT_R8G8B8_SRGB, FORMAT_B8G8R8_UNORM, FORMAT_B8G8R8_SNORM, FORMAT_B8G8R8_USCALED, FORMAT_B8G8R8_SSCALED, FORMAT_B8G8R8_UINT, FORMAT_B8G8R8_SINT, FORMAT_B8G8R8_SRGB, FORMAT_R8G8B8A8_UNORM, FORMAT_R8G8B8A8_SNORM, FORMAT_R8G8B8A8_USCALED, FORMAT_R8G8B8A8_SSCALED, FORMAT_R8G8B8A8_UINT, FORMAT_R8G8B8A8_SINT, FORMAT_R8G8B8A8_SRGB, FORMAT_B8G8R8A8_UNORM, FORMAT_B8G8R8A8_SNORM, FORMAT_B8G8R8A8_USCALED, FORMAT_B8G8R8A8_SSCALED, FORMAT_B8G8R8A8_UINT, FORMAT_B8G8R8A8_SINT, FORMAT_B8G8R8A8_SRGB, FORMAT_A8B8G8R8_UNORM_PACK32, FORMAT_A8B8G8R8_SNORM_PACK32, FORMAT_A8B8G8R8_USCALED_PACK32, FORMAT_A8B8G8R8_SSCALED_PACK32, FORMAT_A8B8G8R8_UINT_PACK32, FORMAT_A8B8G8R8_SINT_PACK32, FORMAT_A8B8G8R8_SRGB_PACK32, FORMAT_A2R10G10B10_UNORM_PACK32, FORMAT_A2R10G10B10_SNORM_PACK32, FORMAT_A2R10G10B10_USCALED_PACK32, FORMAT_A2R10G10B10_SSCALED_PACK32, FORMAT_A2R10G10B10_UINT_PACK32, FORMAT_A2R10G10B10_SINT_PACK32, FORMAT_A2B10G10R10_UNORM_PACK32, FORMAT_A2B10G10R10_SNORM_PACK32, FORMAT_A2B10G10R10_USCALED_PACK32, FORMAT_A2B10G10R10_SSCALED_PACK32, FORMAT_A2B10G10R10_UINT_PACK32, FORMAT_A2B10G10R10_SINT_PACK32, FORMAT_R16_UNORM, FORMAT_R16_SNORM, FORMAT_R16_USCALED, FORMAT_R16_SSCALED, FORMAT_R16_UINT, FORMAT_R16_SINT, FORMAT_R16_SFLOAT, FORMAT_R16G16_UNORM, FORMAT_R16G16_SNORM, FORMAT_R16G16_USCALED, FORMAT_R16G16_SSCALED, FORMAT_R16G16_UINT, FORMAT_R16G16_SINT, FORMAT_R16G16_SFLOAT, FORMAT_R16G16B16_UNORM, FORMAT_R16G16B16_SNORM, FORMAT_R16G16B16_USCALED, FORMAT_R16G16B16_SSCALED, FORMAT_R16G16B16_UINT, FORMAT_R16G16B16_SINT, FORMAT_R16G16B16_SFLOAT, FORMAT_R16G16B16A16_UNORM, FORMAT_R16G16B16A16_SNORM, FORMAT_R16G16B16A16_USCALED, FORMAT_R16G16B16A16_SSCALED, FORMAT_R16G16B16A16_UINT, FORMAT_R16G16B16A16_SINT, FORMAT_R16G16B16A16_SFLOAT, FORMAT_R32_UINT, FORMAT_R32_SINT, FORMAT_R32_SFLOAT, FORMAT_R32G32_UINT, FORMAT_R32G32_SINT, FORMAT_R32G32_SFLOAT, FORMAT_R32G32B32_UINT, FORMAT_R32G32B32_SINT, FORMAT_R32G32B32_SFLOAT, FORMAT_R32G32B32A32_UINT, FORMAT_R32G32B32A32_SINT, FORMAT_R32G32B32A32_SFLOAT, FORMAT_R64_UINT, FORMAT_R64_SINT, FORMAT_R64_SFLOAT, FORMAT_R64G64_UINT, FORMAT_R64G64_SINT, FORMAT_R64G64_SFLOAT, FORMAT_R64G64B64_UINT, FORMAT_R64G64B64_SINT, FORMAT_R64G64B64_SFLOAT, FORMAT_R64G64B64A64_UINT, FORMAT_R64G64B64A64_SINT, FORMAT_R64G64B64A64_SFLOAT, FORMAT_B10G11R11_UFLOAT_PACK32, FORMAT_E5B9G9R9_UFLOAT_PACK32, FORMAT_D16_UNORM, FORMAT_X8_D24_UNORM_PACK32, FORMAT_D32_SFLOAT, FORMAT_S8_UINT, FORMAT_D16_UNORM_S8_UINT, FORMAT_D24_UNORM_S8_UINT, FORMAT_D32_SFLOAT_S8_UINT, FORMAT_BC1_RGB_UNORM_BLOCK, FORMAT_BC1_RGB_SRGB_BLOCK, FORMAT_BC1_RGBA_UNORM_BLOCK, FORMAT_BC1_RGBA_SRGB_BLOCK, FORMAT_BC2_UNORM_BLOCK, FORMAT_BC2_SRGB_BLOCK, FORMAT_BC3_UNORM_BLOCK, FORMAT_BC3_SRGB_BLOCK, FORMAT_BC4_UNORM_BLOCK, FORMAT_BC4_SNORM_BLOCK, FORMAT_BC5_UNORM_BLOCK, FORMAT_BC5_SNORM_BLOCK, FORMAT_BC6H_UFLOAT_BLOCK, FORMAT_BC6H_SFLOAT_BLOCK, FORMAT_BC7_UNORM_BLOCK, FORMAT_BC7_SRGB_BLOCK, FORMAT_ETC2_R8G8B8_UNORM_BLOCK, FORMAT_ETC2_R8G8B8_SRGB_BLOCK, FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, FORMAT_EAC_R11_UNORM_BLOCK, FORMAT_EAC_R11_SNORM_BLOCK, FORMAT_EAC_R11G11_UNORM_BLOCK, FORMAT_EAC_R11G11_SNORM_BLOCK, FORMAT_ASTC_4x4_UNORM_BLOCK, FORMAT_ASTC_4x4_SRGB_BLOCK, FORMAT_ASTC_5x4_UNORM_BLOCK, FORMAT_ASTC_5x4_SRGB_BLOCK, FORMAT_ASTC_5x5_UNORM_BLOCK, FORMAT_ASTC_5x5_SRGB_BLOCK, FORMAT_ASTC_6x5_UNORM_BLOCK, FORMAT_ASTC_6x5_SRGB_BLOCK, FORMAT_ASTC_6x6_UNORM_BLOCK, FORMAT_ASTC_6x6_SRGB_BLOCK, FORMAT_ASTC_8x5_UNORM_BLOCK, FORMAT_ASTC_8x5_SRGB_BLOCK, FORMAT_ASTC_8x6_UNORM_BLOCK, FORMAT_ASTC_8x6_SRGB_BLOCK, FORMAT_ASTC_8x8_UNORM_BLOCK, FORMAT_ASTC_8x8_SRGB_BLOCK, FORMAT_ASTC_10x5_UNORM_BLOCK, FORMAT_ASTC_10x5_SRGB_BLOCK, FORMAT_ASTC_10x6_UNORM_BLOCK, FORMAT_ASTC_10x6_SRGB_BLOCK, FORMAT_ASTC_10x8_UNORM_BLOCK, FORMAT_ASTC_10x8_SRGB_BLOCK, FORMAT_ASTC_10x10_UNORM_BLOCK, FORMAT_ASTC_10x10_SRGB_BLOCK, FORMAT_ASTC_12x10_UNORM_BLOCK, FORMAT_ASTC_12x10_SRGB_BLOCK, FORMAT_ASTC_12x12_UNORM_BLOCK, FORMAT_ASTC_12x12_SRGB_BLOCK, FORMAT_G8B8G8R8_422_UNORM, FORMAT_B8G8R8G8_422_UNORM, FORMAT_G8_B8_R8_3PLANE_420_UNORM, FORMAT_G8_B8R8_2PLANE_420_UNORM, FORMAT_G8_B8_R8_3PLANE_422_UNORM, FORMAT_G8_B8R8_2PLANE_422_UNORM, FORMAT_G8_B8_R8_3PLANE_444_UNORM, FORMAT_R10X6_UNORM_PACK16, FORMAT_R10X6G10X6_UNORM_2PACK16, FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, FORMAT_R12X4_UNORM_PACK16, FORMAT_R12X4G12X4_UNORM_2PACK16, FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, FORMAT_G16B16G16R16_422_UNORM, FORMAT_B16G16R16G16_422_UNORM, FORMAT_G16_B16_R16_3PLANE_420_UNORM, FORMAT_G16_B16R16_2PLANE_420_UNORM, FORMAT_G16_B16_R16_3PLANE_422_UNORM, FORMAT_G16_B16R16_2PLANE_422_UNORM, FORMAT_G16_B16_R16_3PLANE_444_UNORM, FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT, FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT, FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT, FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT, FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT, FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT, FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT, FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT, FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT, FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT, FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT, FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT, FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT, FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT, FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT, FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT, FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT, FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT, FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT, FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT, FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT, FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT, FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT, FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT, FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT, FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT, FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT, FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT, FORMAT_A4R4G4B4_UNORM_PACK16_EXT, FORMAT_A4B4G4R4_UNORM_PACK16_EXT, StructureType, STRUCTURE_TYPE_APPLICATION_INFO, STRUCTURE_TYPE_INSTANCE_CREATE_INFO, STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, STRUCTURE_TYPE_DEVICE_CREATE_INFO, STRUCTURE_TYPE_SUBMIT_INFO, STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, STRUCTURE_TYPE_BIND_SPARSE_INFO, STRUCTURE_TYPE_FENCE_CREATE_INFO, STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, STRUCTURE_TYPE_EVENT_CREATE_INFO, STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, STRUCTURE_TYPE_BUFFER_CREATE_INFO, STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, STRUCTURE_TYPE_IMAGE_CREATE_INFO, STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, STRUCTURE_TYPE_SAMPLER_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, STRUCTURE_TYPE_MEMORY_BARRIER, STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO, STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, STRUCTURE_TYPE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, STRUCTURE_TYPE_SUBPASS_END_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_PRESENT_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID, STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID, STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID, STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, STRUCTURE_TYPE_VIDEO_PROFILE_KHR, STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR, STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR, STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR, STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR, STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR, STRUCTURE_TYPE_VIDEO_PROFILES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT, STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, STRUCTURE_TYPE_PRESENT_REGIONS_KHR, STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_HDR_METADATA_EXT, STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID, STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID, STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, STRUCTURE_TYPE_GEOMETRY_NV, STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, STRUCTURE_TYPE_GEOMETRY_AABB_NV, STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT, STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT, STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, STRUCTURE_TYPE_CHECKPOINT_DATA_NV, STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT, STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, STRUCTURE_TYPE_PIPELINE_INFO_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT, STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, STRUCTURE_TYPE_RESERVED_QCOM, STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, STRUCTURE_TYPE_BUFFER_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA, STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, SubpassContents, SUBPASS_CONTENTS_INLINE, SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS, Result, SUCCESS, NOT_READY, TIMEOUT, EVENT_SET, EVENT_RESET, INCOMPLETE, ERROR_OUT_OF_HOST_MEMORY, ERROR_OUT_OF_DEVICE_MEMORY, ERROR_INITIALIZATION_FAILED, ERROR_DEVICE_LOST, ERROR_MEMORY_MAP_FAILED, ERROR_LAYER_NOT_PRESENT, ERROR_EXTENSION_NOT_PRESENT, ERROR_FEATURE_NOT_PRESENT, ERROR_INCOMPATIBLE_DRIVER, ERROR_TOO_MANY_OBJECTS, ERROR_FORMAT_NOT_SUPPORTED, ERROR_FRAGMENTED_POOL, ERROR_UNKNOWN, ERROR_OUT_OF_POOL_MEMORY, ERROR_INVALID_EXTERNAL_HANDLE, ERROR_FRAGMENTATION, ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, ERROR_SURFACE_LOST_KHR, ERROR_NATIVE_WINDOW_IN_USE_KHR, SUBOPTIMAL_KHR, ERROR_OUT_OF_DATE_KHR, ERROR_INCOMPATIBLE_DISPLAY_KHR, ERROR_VALIDATION_FAILED_EXT, ERROR_INVALID_SHADER_NV, ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, ERROR_NOT_PERMITTED_EXT, ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, THREAD_IDLE_KHR, THREAD_DONE_KHR, OPERATION_DEFERRED_KHR, OPERATION_NOT_DEFERRED_KHR, PIPELINE_COMPILE_REQUIRED_EXT, DynamicState, DYNAMIC_STATE_VIEWPORT, DYNAMIC_STATE_SCISSOR, DYNAMIC_STATE_LINE_WIDTH, DYNAMIC_STATE_DEPTH_BIAS, DYNAMIC_STATE_BLEND_CONSTANTS, DYNAMIC_STATE_DEPTH_BOUNDS, DYNAMIC_STATE_STENCIL_COMPARE_MASK, DYNAMIC_STATE_STENCIL_WRITE_MASK, DYNAMIC_STATE_STENCIL_REFERENCE, DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, DYNAMIC_STATE_DISCARD_RECTANGLE_EXT, DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR, DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV, DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV, DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV, DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR, DYNAMIC_STATE_LINE_STIPPLE_EXT, DYNAMIC_STATE_CULL_MODE_EXT, DYNAMIC_STATE_FRONT_FACE_EXT, DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT, DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT, DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT, DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT, DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT, DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT, DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT, DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT, DYNAMIC_STATE_STENCIL_OP_EXT, DYNAMIC_STATE_VERTEX_INPUT_EXT, DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, DYNAMIC_STATE_LOGIC_OP_EXT, DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT, DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT, DescriptorUpdateTemplateType, DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, ObjectType, OBJECT_TYPE_UNKNOWN, OBJECT_TYPE_INSTANCE, OBJECT_TYPE_PHYSICAL_DEVICE, OBJECT_TYPE_DEVICE, OBJECT_TYPE_QUEUE, OBJECT_TYPE_SEMAPHORE, OBJECT_TYPE_COMMAND_BUFFER, OBJECT_TYPE_FENCE, OBJECT_TYPE_DEVICE_MEMORY, OBJECT_TYPE_BUFFER, OBJECT_TYPE_IMAGE, OBJECT_TYPE_EVENT, OBJECT_TYPE_QUERY_POOL, OBJECT_TYPE_BUFFER_VIEW, OBJECT_TYPE_IMAGE_VIEW, OBJECT_TYPE_SHADER_MODULE, OBJECT_TYPE_PIPELINE_CACHE, OBJECT_TYPE_PIPELINE_LAYOUT, OBJECT_TYPE_RENDER_PASS, OBJECT_TYPE_PIPELINE, OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT, OBJECT_TYPE_SAMPLER, OBJECT_TYPE_DESCRIPTOR_POOL, OBJECT_TYPE_DESCRIPTOR_SET, OBJECT_TYPE_FRAMEBUFFER, OBJECT_TYPE_COMMAND_POOL, OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION, OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE, OBJECT_TYPE_SURFACE_KHR, OBJECT_TYPE_SWAPCHAIN_KHR, OBJECT_TYPE_DISPLAY_KHR, OBJECT_TYPE_DISPLAY_MODE_KHR, OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT, OBJECT_TYPE_VIDEO_SESSION_KHR, OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR, OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT, OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR, OBJECT_TYPE_VALIDATION_CACHE_EXT, OBJECT_TYPE_ACCELERATION_STRUCTURE_NV, OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL, OBJECT_TYPE_DEFERRED_OPERATION_KHR, OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV, OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT, SemaphoreType, SEMAPHORE_TYPE_BINARY, SEMAPHORE_TYPE_TIMELINE, PresentModeKHR, PRESENT_MODE_IMMEDIATE_KHR, PRESENT_MODE_MAILBOX_KHR, PRESENT_MODE_FIFO_KHR, PRESENT_MODE_FIFO_RELAXED_KHR, PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR, PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, ColorSpaceKHR, COLOR_SPACE_SRGB_NONLINEAR_KHR, COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT, COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT, COLOR_SPACE_DISPLAY_P3_LINEAR_EXT, COLOR_SPACE_DCI_P3_NONLINEAR_EXT, COLOR_SPACE_BT709_LINEAR_EXT, COLOR_SPACE_BT709_NONLINEAR_EXT, COLOR_SPACE_BT2020_LINEAR_EXT, COLOR_SPACE_HDR10_ST2084_EXT, COLOR_SPACE_DOLBYVISION_EXT, COLOR_SPACE_HDR10_HLG_EXT, COLOR_SPACE_ADOBERGB_LINEAR_EXT, COLOR_SPACE_ADOBERGB_NONLINEAR_EXT, COLOR_SPACE_PASS_THROUGH_EXT, COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT, COLOR_SPACE_DISPLAY_NATIVE_AMD, TimeDomainEXT, TIME_DOMAIN_DEVICE_EXT, TIME_DOMAIN_CLOCK_MONOTONIC_EXT, TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT, TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT, DebugReportObjectTypeEXT, DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT, DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT, DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT, DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT, DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT, DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT, DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT, DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT, DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT, DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT, DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT, DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT, DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT, DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT, DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT, DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT, DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT, DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT, DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT, DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT, DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT, DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT, DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT, DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT, DeviceMemoryReportEventTypeEXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT, DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT, RasterizationOrderAMD, RASTERIZATION_ORDER_STRICT_AMD, RASTERIZATION_ORDER_RELAXED_AMD, ValidationCheckEXT, VALIDATION_CHECK_ALL_EXT, VALIDATION_CHECK_SHADERS_EXT, ValidationFeatureEnableEXT, VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT, VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT, VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT, VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT, VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT, ValidationFeatureDisableEXT, VALIDATION_FEATURE_DISABLE_ALL_EXT, VALIDATION_FEATURE_DISABLE_SHADERS_EXT, VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT, VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT, VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT, VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT, VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT, IndirectCommandsTokenTypeNV, INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV, INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV, INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV, INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV, INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV, INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV, DisplayPowerStateEXT, DISPLAY_POWER_STATE_OFF_EXT, DISPLAY_POWER_STATE_SUSPEND_EXT, DISPLAY_POWER_STATE_ON_EXT, DeviceEventTypeEXT, DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT, DisplayEventTypeEXT, DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT, ViewportCoordinateSwizzleNV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV, VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV, VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV, DiscardRectangleModeEXT, DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT, DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT, PointClippingBehavior, POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES, POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY, SamplerReductionMode, SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE, SAMPLER_REDUCTION_MODE_MIN, SAMPLER_REDUCTION_MODE_MAX, TessellationDomainOrigin, TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT, TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT, SamplerYcbcrModelConversion, SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601, SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020, SamplerYcbcrRange, SAMPLER_YCBCR_RANGE_ITU_FULL, SAMPLER_YCBCR_RANGE_ITU_NARROW, ChromaLocation, CHROMA_LOCATION_COSITED_EVEN, CHROMA_LOCATION_MIDPOINT, BlendOverlapEXT, BLEND_OVERLAP_UNCORRELATED_EXT, BLEND_OVERLAP_DISJOINT_EXT, BLEND_OVERLAP_CONJOINT_EXT, CoverageModulationModeNV, COVERAGE_MODULATION_MODE_NONE_NV, COVERAGE_MODULATION_MODE_RGB_NV, COVERAGE_MODULATION_MODE_ALPHA_NV, COVERAGE_MODULATION_MODE_RGBA_NV, CoverageReductionModeNV, COVERAGE_REDUCTION_MODE_MERGE_NV, COVERAGE_REDUCTION_MODE_TRUNCATE_NV, ValidationCacheHeaderVersionEXT, VALIDATION_CACHE_HEADER_VERSION_ONE_EXT, ShaderInfoTypeAMD, SHADER_INFO_TYPE_STATISTICS_AMD, SHADER_INFO_TYPE_BINARY_AMD, SHADER_INFO_TYPE_DISASSEMBLY_AMD, QueueGlobalPriorityEXT, QUEUE_GLOBAL_PRIORITY_LOW_EXT, QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT, QUEUE_GLOBAL_PRIORITY_HIGH_EXT, QUEUE_GLOBAL_PRIORITY_REALTIME_EXT, ConservativeRasterizationModeEXT, CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT, CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT, CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT, VendorId, VENDOR_ID_VIV, VENDOR_ID_VSI, VENDOR_ID_KAZAN, VENDOR_ID_CODEPLAY, VENDOR_ID_MESA, VENDOR_ID_POCL, DriverId, DRIVER_ID_AMD_PROPRIETARY, DRIVER_ID_AMD_OPEN_SOURCE, DRIVER_ID_MESA_RADV, DRIVER_ID_NVIDIA_PROPRIETARY, DRIVER_ID_INTEL_PROPRIETARY_WINDOWS, DRIVER_ID_INTEL_OPEN_SOURCE_MESA, DRIVER_ID_IMAGINATION_PROPRIETARY, DRIVER_ID_QUALCOMM_PROPRIETARY, DRIVER_ID_ARM_PROPRIETARY, DRIVER_ID_GOOGLE_SWIFTSHADER, DRIVER_ID_GGP_PROPRIETARY, DRIVER_ID_BROADCOM_PROPRIETARY, DRIVER_ID_MESA_LLVMPIPE, DRIVER_ID_MOLTENVK, DRIVER_ID_COREAVI_PROPRIETARY, ShadingRatePaletteEntryNV, SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV, SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV, SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV, CoarseSampleOrderTypeNV, COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV, COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV, COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV, CopyAccelerationStructureModeKHR, COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR, COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR, COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR, COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR, BuildAccelerationStructureModeKHR, BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR, BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, AccelerationStructureTypeKHR, ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR, ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR, ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR, GeometryTypeKHR, GEOMETRY_TYPE_TRIANGLES_KHR, GEOMETRY_TYPE_AABBS_KHR, GEOMETRY_TYPE_INSTANCES_KHR, AccelerationStructureMemoryRequirementsTypeNV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV, ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV, AccelerationStructureBuildTypeKHR, ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR, ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR, RayTracingShaderGroupTypeKHR, RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR, RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR, RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR, AccelerationStructureCompatibilityKHR, ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR, ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR, ShaderGroupShaderKHR, SHADER_GROUP_SHADER_GENERAL_KHR, SHADER_GROUP_SHADER_CLOSEST_HIT_KHR, SHADER_GROUP_SHADER_ANY_HIT_KHR, SHADER_GROUP_SHADER_INTERSECTION_KHR, MemoryOverallocationBehaviorAMD, MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD, MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD, MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD, ScopeNV, SCOPE_DEVICE_NV, SCOPE_WORKGROUP_NV, SCOPE_SUBGROUP_NV, SCOPE_QUEUE_FAMILY_NV, ComponentTypeNV, COMPONENT_TYPE_FLOAT16_NV, COMPONENT_TYPE_FLOAT32_NV, COMPONENT_TYPE_FLOAT64_NV, COMPONENT_TYPE_SINT8_NV, COMPONENT_TYPE_SINT16_NV, COMPONENT_TYPE_SINT32_NV, COMPONENT_TYPE_SINT64_NV, COMPONENT_TYPE_UINT8_NV, COMPONENT_TYPE_UINT16_NV, COMPONENT_TYPE_UINT32_NV, COMPONENT_TYPE_UINT64_NV, FullScreenExclusiveEXT, FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT, FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT, FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT, FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT, PerformanceCounterScopeKHR, PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR, PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR, PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR, PerformanceCounterUnitKHR, PERFORMANCE_COUNTER_UNIT_GENERIC_KHR, PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR, PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR, PERFORMANCE_COUNTER_UNIT_BYTES_KHR, PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR, PERFORMANCE_COUNTER_UNIT_KELVIN_KHR, PERFORMANCE_COUNTER_UNIT_WATTS_KHR, PERFORMANCE_COUNTER_UNIT_VOLTS_KHR, PERFORMANCE_COUNTER_UNIT_AMPS_KHR, PERFORMANCE_COUNTER_UNIT_HERTZ_KHR, PERFORMANCE_COUNTER_UNIT_CYCLES_KHR, PerformanceCounterStorageKHR, PERFORMANCE_COUNTER_STORAGE_INT32_KHR, PERFORMANCE_COUNTER_STORAGE_INT64_KHR, PERFORMANCE_COUNTER_STORAGE_UINT32_KHR, PERFORMANCE_COUNTER_STORAGE_UINT64_KHR, PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR, PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR, PerformanceConfigurationTypeINTEL, PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL, QueryPoolSamplingModeINTEL, QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL, PerformanceOverrideTypeINTEL, PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL, PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL, PerformanceParameterTypeINTEL, PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL, PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL, PerformanceValueTypeINTEL, PERFORMANCE_VALUE_TYPE_UINT32_INTEL, PERFORMANCE_VALUE_TYPE_UINT64_INTEL, PERFORMANCE_VALUE_TYPE_FLOAT_INTEL, PERFORMANCE_VALUE_TYPE_BOOL_INTEL, PERFORMANCE_VALUE_TYPE_STRING_INTEL, ShaderFloatControlsIndependence, SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY, SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL, SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE, PipelineExecutableStatisticFormatKHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR, PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR, LineRasterizationModeEXT, LINE_RASTERIZATION_MODE_DEFAULT_EXT, LINE_RASTERIZATION_MODE_RECTANGULAR_EXT, LINE_RASTERIZATION_MODE_BRESENHAM_EXT, LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT, FragmentShadingRateCombinerOpKHR, FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR, FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR, FragmentShadingRateNV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV, FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV, FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV, FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV, FragmentShadingRateTypeNV, FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV, FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV, ProvokingVertexModeEXT, PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT, PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT, PipelineCacheCreateFlag, PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT, PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT, PIPELINE_CACHE_CREATE_RESERVED_2_BIT_EXT, QueueFlag, QUEUE_GRAPHICS_BIT, QUEUE_COMPUTE_BIT, QUEUE_TRANSFER_BIT, QUEUE_SPARSE_BINDING_BIT, QUEUE_PROTECTED_BIT, QUEUE_VIDEO_DECODE_BIT_KHR, QUEUE_VIDEO_ENCODE_BIT_KHR, CullModeFlag, CULL_MODE_FRONT_BIT, CULL_MODE_BACK_BIT, CULL_MODE_NONE, CULL_MODE_FRONT_AND_BACK, RenderPassCreateFlag, RENDER_PASS_CREATE_RESERVED_0_BIT_KHR, RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM, DeviceQueueCreateFlag, DEVICE_QUEUE_CREATE_PROTECTED_BIT, MemoryPropertyFlag, MEMORY_PROPERTY_DEVICE_LOCAL_BIT, MEMORY_PROPERTY_HOST_VISIBLE_BIT, MEMORY_PROPERTY_HOST_COHERENT_BIT, MEMORY_PROPERTY_HOST_CACHED_BIT, MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT, MEMORY_PROPERTY_PROTECTED_BIT, MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD, MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD, MEMORY_PROPERTY_RESERVED_8_BIT_NV, MemoryHeapFlag, MEMORY_HEAP_DEVICE_LOCAL_BIT, MEMORY_HEAP_MULTI_INSTANCE_BIT, MEMORY_HEAP_RESERVED_2_BIT_KHR, AccessFlag, ACCESS_INDIRECT_COMMAND_READ_BIT, ACCESS_INDEX_READ_BIT, ACCESS_VERTEX_ATTRIBUTE_READ_BIT, ACCESS_UNIFORM_READ_BIT, ACCESS_INPUT_ATTACHMENT_READ_BIT, ACCESS_SHADER_READ_BIT, ACCESS_SHADER_WRITE_BIT, ACCESS_COLOR_ATTACHMENT_READ_BIT, ACCESS_COLOR_ATTACHMENT_WRITE_BIT, ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT, ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, ACCESS_TRANSFER_READ_BIT, ACCESS_TRANSFER_WRITE_BIT, ACCESS_HOST_READ_BIT, ACCESS_HOST_WRITE_BIT, ACCESS_MEMORY_READ_BIT, ACCESS_MEMORY_WRITE_BIT, ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT, ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR, ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV, ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, ACCESS_COMMAND_PREPROCESS_READ_BIT_NV, ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV, ACCESS_NONE_KHR, BufferUsageFlag, BUFFER_USAGE_TRANSFER_SRC_BIT, BUFFER_USAGE_TRANSFER_DST_BIT, BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, BUFFER_USAGE_UNIFORM_BUFFER_BIT, BUFFER_USAGE_STORAGE_BUFFER_BIT, BUFFER_USAGE_INDEX_BUFFER_BIT, BUFFER_USAGE_VERTEX_BUFFER_BIT, BUFFER_USAGE_INDIRECT_BUFFER_BIT, BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR, BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR, BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR, BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT, BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT, BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT, BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR, BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR, BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR, BUFFER_USAGE_RESERVED_18_BIT_QCOM, BufferCreateFlag, BUFFER_CREATE_SPARSE_BINDING_BIT, BUFFER_CREATE_SPARSE_RESIDENCY_BIT, BUFFER_CREATE_SPARSE_ALIASED_BIT, BUFFER_CREATE_PROTECTED_BIT, BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, ShaderStageFlag, SHADER_STAGE_VERTEX_BIT, SHADER_STAGE_TESSELLATION_CONTROL_BIT, SHADER_STAGE_TESSELLATION_EVALUATION_BIT, SHADER_STAGE_GEOMETRY_BIT, SHADER_STAGE_FRAGMENT_BIT, SHADER_STAGE_COMPUTE_BIT, SHADER_STAGE_RAYGEN_BIT_KHR, SHADER_STAGE_ANY_HIT_BIT_KHR, SHADER_STAGE_CLOSEST_HIT_BIT_KHR, SHADER_STAGE_MISS_BIT_KHR, SHADER_STAGE_INTERSECTION_BIT_KHR, SHADER_STAGE_CALLABLE_BIT_KHR, SHADER_STAGE_TASK_BIT_NV, SHADER_STAGE_MESH_BIT_NV, SHADER_STAGE_ALL_GRAPHICS, SHADER_STAGE_ALL, ImageUsageFlag, IMAGE_USAGE_TRANSFER_SRC_BIT, IMAGE_USAGE_TRANSFER_DST_BIT, IMAGE_USAGE_SAMPLED_BIT, IMAGE_USAGE_STORAGE_BIT, IMAGE_USAGE_COLOR_ATTACHMENT_BIT, IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, IMAGE_USAGE_INPUT_ATTACHMENT_BIT, IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR, IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR, IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR, IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, IMAGE_USAGE_RESERVED_16_BIT_QCOM, IMAGE_USAGE_RESERVED_17_BIT_QCOM, IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, ImageCreateFlag, IMAGE_CREATE_SPARSE_BINDING_BIT, IMAGE_CREATE_SPARSE_RESIDENCY_BIT, IMAGE_CREATE_SPARSE_ALIASED_BIT, IMAGE_CREATE_MUTABLE_FORMAT_BIT, IMAGE_CREATE_CUBE_COMPATIBLE_BIT, IMAGE_CREATE_ALIAS_BIT, IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT, IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT, IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, IMAGE_CREATE_EXTENDED_USAGE_BIT, IMAGE_CREATE_PROTECTED_BIT, IMAGE_CREATE_DISJOINT_BIT, IMAGE_CREATE_CORNER_SAMPLED_BIT_NV, IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT, IMAGE_CREATE_SUBSAMPLED_BIT_EXT, ImageViewCreateFlag, IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT, IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT, SamplerCreateFlag, SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT, PipelineCreateFlag, PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT, PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT, PIPELINE_CREATE_DERIVATIVE_BIT, PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT, PIPELINE_CREATE_DISPATCH_BASE_BIT, PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR, PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR, PIPELINE_CREATE_DEFER_COMPILE_BIT_NV, PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR, PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR, PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV, PIPELINE_CREATE_LIBRARY_BIT_KHR, PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT, PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT, PIPELINE_CREATE_RESERVED_BIT_20_NV, PipelineShaderStageCreateFlag, PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV, PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT, PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR, ColorComponentFlag, COLOR_COMPONENT_R_BIT, COLOR_COMPONENT_G_BIT, COLOR_COMPONENT_B_BIT, COLOR_COMPONENT_A_BIT, FenceCreateFlag, FENCE_CREATE_SIGNALED_BIT, FormatFeatureFlag, FORMAT_FEATURE_SAMPLED_IMAGE_BIT, FORMAT_FEATURE_STORAGE_IMAGE_BIT, FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT, FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT, FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT, FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT, FORMAT_FEATURE_VERTEX_BUFFER_BIT, FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT, FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, FORMAT_FEATURE_BLIT_SRC_BIT, FORMAT_FEATURE_BLIT_DST_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT, FORMAT_FEATURE_TRANSFER_SRC_BIT, FORMAT_FEATURE_TRANSFER_DST_BIT, FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT, FORMAT_FEATURE_DISJOINT_BIT, FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT, FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG, FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR, FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR, FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR, FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR, FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR, FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT, FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, QueryControlFlag, QUERY_CONTROL_PRECISE_BIT, QueryResultFlag, QUERY_RESULT_64_BIT, QUERY_RESULT_WAIT_BIT, QUERY_RESULT_WITH_AVAILABILITY_BIT, QUERY_RESULT_PARTIAL_BIT, QUERY_RESULT_WITH_STATUS_BIT_KHR, CommandBufferUsageFlag, COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, QueryPipelineStatisticFlag, QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT, QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT, QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT, QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT, QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT, ImageAspectFlag, IMAGE_ASPECT_COLOR_BIT, IMAGE_ASPECT_DEPTH_BIT, IMAGE_ASPECT_STENCIL_BIT, IMAGE_ASPECT_METADATA_BIT, IMAGE_ASPECT_PLANE_0_BIT, IMAGE_ASPECT_PLANE_1_BIT, IMAGE_ASPECT_PLANE_2_BIT, IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT, IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT, SparseImageFormatFlag, SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT, SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT, SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT, SparseMemoryBindFlag, SPARSE_MEMORY_BIND_METADATA_BIT, PipelineStageFlag, PIPELINE_STAGE_TOP_OF_PIPE_BIT, PIPELINE_STAGE_DRAW_INDIRECT_BIT, PIPELINE_STAGE_VERTEX_INPUT_BIT, PIPELINE_STAGE_VERTEX_SHADER_BIT, PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, PIPELINE_STAGE_GEOMETRY_SHADER_BIT, PIPELINE_STAGE_FRAGMENT_SHADER_BIT, PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, PIPELINE_STAGE_COMPUTE_SHADER_BIT, PIPELINE_STAGE_TRANSFER_BIT, PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, PIPELINE_STAGE_HOST_BIT, PIPELINE_STAGE_ALL_GRAPHICS_BIT, PIPELINE_STAGE_ALL_COMMANDS_BIT, PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT, PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT, PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR, PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV, PIPELINE_STAGE_TASK_SHADER_BIT_NV, PIPELINE_STAGE_MESH_SHADER_BIT_NV, PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT, PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV, PIPELINE_STAGE_NONE_KHR, CommandPoolCreateFlag, COMMAND_POOL_CREATE_TRANSIENT_BIT, COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT, COMMAND_POOL_CREATE_PROTECTED_BIT, CommandPoolResetFlag, COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT, CommandBufferResetFlag, COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT, SampleCountFlag, SAMPLE_COUNT_1_BIT, SAMPLE_COUNT_2_BIT, SAMPLE_COUNT_4_BIT, SAMPLE_COUNT_8_BIT, SAMPLE_COUNT_16_BIT, SAMPLE_COUNT_32_BIT, SAMPLE_COUNT_64_BIT, AttachmentDescriptionFlag, ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT, StencilFaceFlag, STENCIL_FACE_FRONT_BIT, STENCIL_FACE_BACK_BIT, STENCIL_FACE_FRONT_AND_BACK, DescriptorPoolCreateFlag, DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT, DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT, DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE, DependencyFlag, DEPENDENCY_BY_REGION_BIT, DEPENDENCY_DEVICE_GROUP_BIT, DEPENDENCY_VIEW_LOCAL_BIT, SemaphoreWaitFlag, SEMAPHORE_WAIT_ANY_BIT, DisplayPlaneAlphaFlagKHR, DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR, DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR, DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR, DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR, CompositeAlphaFlagKHR, COMPOSITE_ALPHA_OPAQUE_BIT_KHR, COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR, COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR, COMPOSITE_ALPHA_INHERIT_BIT_KHR, SurfaceTransformFlagKHR, SURFACE_TRANSFORM_IDENTITY_BIT_KHR, SURFACE_TRANSFORM_ROTATE_90_BIT_KHR, SURFACE_TRANSFORM_ROTATE_180_BIT_KHR, SURFACE_TRANSFORM_ROTATE_270_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR, SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR, SURFACE_TRANSFORM_INHERIT_BIT_KHR, DebugReportFlagEXT, DEBUG_REPORT_INFORMATION_BIT_EXT, DEBUG_REPORT_WARNING_BIT_EXT, DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT, DEBUG_REPORT_ERROR_BIT_EXT, DEBUG_REPORT_DEBUG_BIT_EXT, ExternalMemoryHandleTypeFlagNV, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV, ExternalMemoryFeatureFlagNV, EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV, EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV, EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV, SubgroupFeatureFlag, SUBGROUP_FEATURE_BASIC_BIT, SUBGROUP_FEATURE_VOTE_BIT, SUBGROUP_FEATURE_ARITHMETIC_BIT, SUBGROUP_FEATURE_BALLOT_BIT, SUBGROUP_FEATURE_SHUFFLE_BIT, SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT, SUBGROUP_FEATURE_CLUSTERED_BIT, SUBGROUP_FEATURE_QUAD_BIT, SUBGROUP_FEATURE_PARTITIONED_BIT_NV, IndirectCommandsLayoutUsageFlagNV, INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV, INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV, INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV, IndirectStateFlagNV, INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV, PrivateDataSlotCreateFlagEXT, DescriptorSetLayoutCreateFlag, DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT, DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE, ExternalMemoryHandleTypeFlag, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID, EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA, EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_12_BIT_NV, ExternalMemoryFeatureFlag, EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT, EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT, EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT, ExternalSemaphoreHandleTypeFlag, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT, EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA, EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV, EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_6_BIT_NV, ExternalSemaphoreFeatureFlag, EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT, EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT, SemaphoreImportFlag, SEMAPHORE_IMPORT_TEMPORARY_BIT, ExternalFenceHandleTypeFlag, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT, EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV, EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV, ExternalFenceFeatureFlag, EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT, EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT, FenceImportFlag, FENCE_IMPORT_TEMPORARY_BIT, SurfaceCounterFlagEXT, SURFACE_COUNTER_VBLANK_BIT_EXT, PeerMemoryFeatureFlag, PEER_MEMORY_FEATURE_COPY_SRC_BIT, PEER_MEMORY_FEATURE_COPY_DST_BIT, PEER_MEMORY_FEATURE_GENERIC_SRC_BIT, PEER_MEMORY_FEATURE_GENERIC_DST_BIT, MemoryAllocateFlag, MEMORY_ALLOCATE_DEVICE_MASK_BIT, MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT, MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, DeviceGroupPresentModeFlagKHR, DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR, DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR, SwapchainCreateFlagKHR, SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR, SWAPCHAIN_CREATE_PROTECTED_BIT_KHR, SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR, SubpassDescriptionFlag, SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX, SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM, SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM, DebugUtilsMessageSeverityFlagEXT, DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT, DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT, DebugUtilsMessageTypeFlagEXT, DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT, DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT, DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT, DescriptorBindingFlag, DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT, DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT, DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT, DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT, DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM, ConditionalRenderingFlagEXT, CONDITIONAL_RENDERING_INVERTED_BIT_EXT, ResolveModeFlag, RESOLVE_MODE_SAMPLE_ZERO_BIT, RESOLVE_MODE_AVERAGE_BIT, RESOLVE_MODE_MIN_BIT, RESOLVE_MODE_MAX_BIT, RESOLVE_MODE_NONE, GeometryInstanceFlagKHR, GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR, GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR, GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR, GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR, GeometryFlagKHR, GEOMETRY_OPAQUE_BIT_KHR, GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR, BuildAccelerationStructureFlagKHR, BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR, BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_5_NV, AccelerationStructureCreateFlagKHR, ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR, ACCELERATION_STRUCTURE_CREATE_RESERVED_BIT_2_NV, FramebufferCreateFlag, FRAMEBUFFER_CREATE_IMAGELESS_BIT, DeviceDiagnosticsConfigFlagNV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV, DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV, PipelineCreationFeedbackFlagEXT, PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT, PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT, PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT, PerformanceCounterDescriptionFlagKHR, PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR, PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR, AcquireProfilingLockFlagKHR, ShaderCorePropertiesFlagAMD, ShaderModuleCreateFlag, SHADER_MODULE_CREATE_RESERVED_0_BIT_NV, PipelineCompilerControlFlagAMD, ToolPurposeFlagEXT, TOOL_PURPOSE_VALIDATION_BIT_EXT, TOOL_PURPOSE_PROFILING_BIT_EXT, TOOL_PURPOSE_TRACING_BIT_EXT, TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT, TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT, TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT, TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT, AccessFlag2KHR, ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR, ACCESS_2_INDEX_READ_BIT_KHR, ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR, ACCESS_2_UNIFORM_READ_BIT_KHR, ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR, ACCESS_2_SHADER_READ_BIT_KHR, ACCESS_2_SHADER_WRITE_BIT_KHR, ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR, ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR, ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR, ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR, ACCESS_2_TRANSFER_READ_BIT_KHR, ACCESS_2_TRANSFER_WRITE_BIT_KHR, ACCESS_2_HOST_READ_BIT_KHR, ACCESS_2_HOST_WRITE_BIT_KHR, ACCESS_2_MEMORY_READ_BIT_KHR, ACCESS_2_MEMORY_WRITE_BIT_KHR, ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR, ACCESS_2_SHADER_STORAGE_READ_BIT_KHR, ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR, ACCESS_2_VIDEO_DECODE_READ_BIT_KHR, ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR, ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR, ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR, ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT, ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV, ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV, ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR, ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR, ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, ACCESS_2_NONE_KHR, PipelineStageFlag2KHR, PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR, PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR, PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR, PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR, PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR, PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR, PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR, PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR, PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR, PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR, PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR, PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR, PIPELINE_STAGE_2_HOST_BIT_KHR, PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR, PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR, PIPELINE_STAGE_2_COPY_BIT_KHR, PIPELINE_STAGE_2_RESOLVE_BIT_KHR, PIPELINE_STAGE_2_BLIT_BIT_KHR, PIPELINE_STAGE_2_CLEAR_BIT_KHR, PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR, PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR, PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR, PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR, PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR, PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT, PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT, PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV, PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR, PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT, PIPELINE_STAGE_2_TASK_SHADER_BIT_NV, PIPELINE_STAGE_2_MESH_SHADER_BIT_NV, PIPELINE_STAGE_2_NONE_KHR, SubmitFlagKHR, SUBMIT_PROTECTED_BIT_KHR, EventCreateFlag, EVENT_CREATE_DEVICE_ONLY_BIT_KHR, Instance, PhysicalDevice, Device, Queue, CommandBuffer, DeviceMemory, CommandPool, Buffer, BufferView, Image, ImageView, ShaderModule, Pipeline, PipelineLayout, Sampler, DescriptorSet, DescriptorSetLayout, DescriptorPool, Fence, Semaphore, Event, QueryPool, Framebuffer, RenderPass, PipelineCache, IndirectCommandsLayoutNV, DescriptorUpdateTemplate, SamplerYcbcrConversion, ValidationCacheEXT, AccelerationStructureKHR, AccelerationStructureNV, PerformanceConfigurationINTEL, DeferredOperationKHR, PrivateDataSlotEXT, DisplayKHR, DisplayModeKHR, SurfaceKHR, SwapchainKHR, DebugReportCallbackEXT, DebugUtilsMessengerEXT, _BaseOutStructure, _BaseInStructure, _Offset2D, _Offset3D, _Extent2D, _Extent3D, _Viewport, _Rect2D, _ClearRect, _ComponentMapping, PhysicalDeviceProperties, ExtensionProperties, LayerProperties, _ApplicationInfo, _AllocationCallbacks, _DeviceQueueCreateInfo, _DeviceCreateInfo, _InstanceCreateInfo, QueueFamilyProperties, PhysicalDeviceMemoryProperties, _MemoryAllocateInfo, MemoryRequirements, SparseImageFormatProperties, SparseImageMemoryRequirements, MemoryType, MemoryHeap, _MappedMemoryRange, FormatProperties, ImageFormatProperties, _DescriptorBufferInfo, _DescriptorImageInfo, _WriteDescriptorSet, _CopyDescriptorSet, _BufferCreateInfo, _BufferViewCreateInfo, _ImageSubresource, _ImageSubresourceLayers, _ImageSubresourceRange, _MemoryBarrier, _BufferMemoryBarrier, _ImageMemoryBarrier, _ImageCreateInfo, SubresourceLayout, _ImageViewCreateInfo, _BufferCopy, _SparseMemoryBind, _SparseImageMemoryBind, _SparseBufferMemoryBindInfo, _SparseImageOpaqueMemoryBindInfo, _SparseImageMemoryBindInfo, _BindSparseInfo, _ImageCopy, _ImageBlit, _BufferImageCopy, _ImageResolve, _ShaderModuleCreateInfo, _DescriptorSetLayoutBinding, _DescriptorSetLayoutCreateInfo, _DescriptorPoolSize, _DescriptorPoolCreateInfo, _DescriptorSetAllocateInfo, _SpecializationMapEntry, _SpecializationInfo, _PipelineShaderStageCreateInfo, _ComputePipelineCreateInfo, _VertexInputBindingDescription, _VertexInputAttributeDescription, _PipelineVertexInputStateCreateInfo, _PipelineInputAssemblyStateCreateInfo, _PipelineTessellationStateCreateInfo, _PipelineViewportStateCreateInfo, _PipelineRasterizationStateCreateInfo, _PipelineMultisampleStateCreateInfo, _PipelineColorBlendAttachmentState, _PipelineColorBlendStateCreateInfo, _PipelineDynamicStateCreateInfo, _StencilOpState, _PipelineDepthStencilStateCreateInfo, _GraphicsPipelineCreateInfo, _PipelineCacheCreateInfo, _PushConstantRange, _PipelineLayoutCreateInfo, _SamplerCreateInfo, _CommandPoolCreateInfo, _CommandBufferAllocateInfo, _CommandBufferInheritanceInfo, _CommandBufferBeginInfo, _RenderPassBeginInfo, _ClearDepthStencilValue, _ClearAttachment, _AttachmentDescription, _AttachmentReference, _SubpassDescription, _SubpassDependency, _RenderPassCreateInfo, _EventCreateInfo, _FenceCreateInfo, _PhysicalDeviceFeatures, PhysicalDeviceSparseProperties, PhysicalDeviceLimits, _SemaphoreCreateInfo, _QueryPoolCreateInfo, _FramebufferCreateInfo, _DrawIndirectCommand, _DrawIndexedIndirectCommand, _DispatchIndirectCommand, _SubmitInfo, DisplayPropertiesKHR, DisplayPlanePropertiesKHR, _DisplayModeParametersKHR, DisplayModePropertiesKHR, _DisplayModeCreateInfoKHR, DisplayPlaneCapabilitiesKHR, _DisplaySurfaceCreateInfoKHR, _DisplayPresentInfoKHR, SurfaceCapabilitiesKHR, _Win32SurfaceCreateInfoKHR, SurfaceFormatKHR, _SwapchainCreateInfoKHR, _PresentInfoKHR, _DebugReportCallbackCreateInfoEXT, _ValidationFlagsEXT, _ValidationFeaturesEXT, _PipelineRasterizationStateRasterizationOrderAMD, _DebugMarkerObjectNameInfoEXT, _DebugMarkerObjectTagInfoEXT, _DebugMarkerMarkerInfoEXT, _DedicatedAllocationImageCreateInfoNV, _DedicatedAllocationBufferCreateInfoNV, _DedicatedAllocationMemoryAllocateInfoNV, ExternalImageFormatPropertiesNV, _ExternalMemoryImageCreateInfoNV, _ExportMemoryAllocateInfoNV, _ImportMemoryWin32HandleInfoNV, _ExportMemoryWin32HandleInfoNV, _Win32KeyedMutexAcquireReleaseInfoNV, _PhysicalDeviceDeviceGeneratedCommandsFeaturesNV, _DevicePrivateDataCreateInfoEXT, _PrivateDataSlotCreateInfoEXT, _PhysicalDevicePrivateDataFeaturesEXT, PhysicalDeviceDeviceGeneratedCommandsPropertiesNV, _GraphicsShaderGroupCreateInfoNV, _GraphicsPipelineShaderGroupsCreateInfoNV, _BindShaderGroupIndirectCommandNV, _BindIndexBufferIndirectCommandNV, _BindVertexBufferIndirectCommandNV, _SetStateFlagsIndirectCommandNV, _IndirectCommandsStreamNV, _IndirectCommandsLayoutTokenNV, _IndirectCommandsLayoutCreateInfoNV, _GeneratedCommandsInfoNV, _GeneratedCommandsMemoryRequirementsInfoNV, _PhysicalDeviceFeatures2, PhysicalDeviceProperties2, FormatProperties2, ImageFormatProperties2, _PhysicalDeviceImageFormatInfo2, QueueFamilyProperties2, PhysicalDeviceMemoryProperties2, SparseImageFormatProperties2, _PhysicalDeviceSparseImageFormatInfo2, PhysicalDevicePushDescriptorPropertiesKHR, _ConformanceVersion, PhysicalDeviceDriverProperties, _PresentRegionsKHR, _PresentRegionKHR, _RectLayerKHR, _PhysicalDeviceVariablePointersFeatures, ExternalMemoryProperties, _PhysicalDeviceExternalImageFormatInfo, ExternalImageFormatProperties, _PhysicalDeviceExternalBufferInfo, ExternalBufferProperties, PhysicalDeviceIDProperties, _ExternalMemoryImageCreateInfo, _ExternalMemoryBufferCreateInfo, _ExportMemoryAllocateInfo, _ImportMemoryWin32HandleInfoKHR, _ExportMemoryWin32HandleInfoKHR, MemoryWin32HandlePropertiesKHR, _MemoryGetWin32HandleInfoKHR, _ImportMemoryFdInfoKHR, MemoryFdPropertiesKHR, _MemoryGetFdInfoKHR, _Win32KeyedMutexAcquireReleaseInfoKHR, _PhysicalDeviceExternalSemaphoreInfo, ExternalSemaphoreProperties, _ExportSemaphoreCreateInfo, _ImportSemaphoreWin32HandleInfoKHR, _ExportSemaphoreWin32HandleInfoKHR, _D3D12FenceSubmitInfoKHR, _SemaphoreGetWin32HandleInfoKHR, _ImportSemaphoreFdInfoKHR, _SemaphoreGetFdInfoKHR, _PhysicalDeviceExternalFenceInfo, ExternalFenceProperties, _ExportFenceCreateInfo, _ImportFenceWin32HandleInfoKHR, _ExportFenceWin32HandleInfoKHR, _FenceGetWin32HandleInfoKHR, _ImportFenceFdInfoKHR, _FenceGetFdInfoKHR, _PhysicalDeviceMultiviewFeatures, PhysicalDeviceMultiviewProperties, _RenderPassMultiviewCreateInfo, SurfaceCapabilities2EXT, _DisplayPowerInfoEXT, _DeviceEventInfoEXT, _DisplayEventInfoEXT, _SwapchainCounterCreateInfoEXT, PhysicalDeviceGroupProperties, _MemoryAllocateFlagsInfo, _BindBufferMemoryInfo, _BindBufferMemoryDeviceGroupInfo, _BindImageMemoryInfo, _BindImageMemoryDeviceGroupInfo, _DeviceGroupRenderPassBeginInfo, _DeviceGroupCommandBufferBeginInfo, _DeviceGroupSubmitInfo, _DeviceGroupBindSparseInfo, DeviceGroupPresentCapabilitiesKHR, _ImageSwapchainCreateInfoKHR, _BindImageMemorySwapchainInfoKHR, _AcquireNextImageInfoKHR, _DeviceGroupPresentInfoKHR, _DeviceGroupDeviceCreateInfo, _DeviceGroupSwapchainCreateInfoKHR, _DescriptorUpdateTemplateEntry, _DescriptorUpdateTemplateCreateInfo, _XYColorEXT, _HdrMetadataEXT, DisplayNativeHdrSurfaceCapabilitiesAMD, _SwapchainDisplayNativeHdrCreateInfoAMD, RefreshCycleDurationGOOGLE, PastPresentationTimingGOOGLE, _PresentTimesInfoGOOGLE, _PresentTimeGOOGLE, _ViewportWScalingNV, _PipelineViewportWScalingStateCreateInfoNV, _ViewportSwizzleNV, _PipelineViewportSwizzleStateCreateInfoNV, PhysicalDeviceDiscardRectanglePropertiesEXT, _PipelineDiscardRectangleStateCreateInfoEXT, PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, _InputAttachmentAspectReference, _RenderPassInputAttachmentAspectCreateInfo, _PhysicalDeviceSurfaceInfo2KHR, SurfaceCapabilities2KHR, SurfaceFormat2KHR, DisplayProperties2KHR, DisplayPlaneProperties2KHR, DisplayModeProperties2KHR, _DisplayPlaneInfo2KHR, DisplayPlaneCapabilities2KHR, SharedPresentSurfaceCapabilitiesKHR, _PhysicalDevice16BitStorageFeatures, PhysicalDeviceSubgroupProperties, _PhysicalDeviceShaderSubgroupExtendedTypesFeatures, _BufferMemoryRequirementsInfo2, _ImageMemoryRequirementsInfo2, _ImageSparseMemoryRequirementsInfo2, MemoryRequirements2, SparseImageMemoryRequirements2, PhysicalDevicePointClippingProperties, MemoryDedicatedRequirements, _MemoryDedicatedAllocateInfo, _ImageViewUsageCreateInfo, _PipelineTessellationDomainOriginStateCreateInfo, _SamplerYcbcrConversionInfo, _SamplerYcbcrConversionCreateInfo, _BindImagePlaneMemoryInfo, _ImagePlaneMemoryRequirementsInfo, _PhysicalDeviceSamplerYcbcrConversionFeatures, SamplerYcbcrConversionImageFormatProperties, TextureLODGatherFormatPropertiesAMD, _ConditionalRenderingBeginInfoEXT, _ProtectedSubmitInfo, _PhysicalDeviceProtectedMemoryFeatures, PhysicalDeviceProtectedMemoryProperties, _DeviceQueueInfo2, _PipelineCoverageToColorStateCreateInfoNV, PhysicalDeviceSamplerFilterMinmaxProperties, _SampleLocationEXT, _SampleLocationsInfoEXT, _AttachmentSampleLocationsEXT, _SubpassSampleLocationsEXT, _RenderPassSampleLocationsBeginInfoEXT, _PipelineSampleLocationsStateCreateInfoEXT, PhysicalDeviceSampleLocationsPropertiesEXT, MultisamplePropertiesEXT, _SamplerReductionModeCreateInfo, _PhysicalDeviceBlendOperationAdvancedFeaturesEXT, PhysicalDeviceBlendOperationAdvancedPropertiesEXT, _PipelineColorBlendAdvancedStateCreateInfoEXT, _PhysicalDeviceInlineUniformBlockFeaturesEXT, PhysicalDeviceInlineUniformBlockPropertiesEXT, _WriteDescriptorSetInlineUniformBlockEXT, _DescriptorPoolInlineUniformBlockCreateInfoEXT, _PipelineCoverageModulationStateCreateInfoNV, _ImageFormatListCreateInfo, _ValidationCacheCreateInfoEXT, _ShaderModuleValidationCacheCreateInfoEXT, PhysicalDeviceMaintenance3Properties, DescriptorSetLayoutSupport, _PhysicalDeviceShaderDrawParametersFeatures, _PhysicalDeviceShaderFloat16Int8Features, PhysicalDeviceFloatControlsProperties, _PhysicalDeviceHostQueryResetFeatures, ShaderResourceUsageAMD, ShaderStatisticsInfoAMD, _DeviceQueueGlobalPriorityCreateInfoEXT, _DebugUtilsObjectNameInfoEXT, _DebugUtilsObjectTagInfoEXT, _DebugUtilsLabelEXT, _DebugUtilsMessengerCreateInfoEXT, _DebugUtilsMessengerCallbackDataEXT, _PhysicalDeviceDeviceMemoryReportFeaturesEXT, _DeviceDeviceMemoryReportCreateInfoEXT, DeviceMemoryReportCallbackDataEXT, _ImportMemoryHostPointerInfoEXT, MemoryHostPointerPropertiesEXT, PhysicalDeviceExternalMemoryHostPropertiesEXT, PhysicalDeviceConservativeRasterizationPropertiesEXT, _CalibratedTimestampInfoEXT, PhysicalDeviceShaderCorePropertiesAMD, PhysicalDeviceShaderCoreProperties2AMD, _PipelineRasterizationConservativeStateCreateInfoEXT, _PhysicalDeviceDescriptorIndexingFeatures, PhysicalDeviceDescriptorIndexingProperties, _DescriptorSetLayoutBindingFlagsCreateInfo, _DescriptorSetVariableDescriptorCountAllocateInfo, DescriptorSetVariableDescriptorCountLayoutSupport, _AttachmentDescription2, _AttachmentReference2, _SubpassDescription2, _SubpassDependency2, _RenderPassCreateInfo2, _SubpassBeginInfo, _SubpassEndInfo, _PhysicalDeviceTimelineSemaphoreFeatures, PhysicalDeviceTimelineSemaphoreProperties, _SemaphoreTypeCreateInfo, _TimelineSemaphoreSubmitInfo, _SemaphoreWaitInfo, _SemaphoreSignalInfo, _VertexInputBindingDivisorDescriptionEXT, _PipelineVertexInputDivisorStateCreateInfoEXT, PhysicalDeviceVertexAttributeDivisorPropertiesEXT, PhysicalDevicePCIBusInfoPropertiesEXT, _CommandBufferInheritanceConditionalRenderingInfoEXT, _PhysicalDevice8BitStorageFeatures, _PhysicalDeviceConditionalRenderingFeaturesEXT, _PhysicalDeviceVulkanMemoryModelFeatures, _PhysicalDeviceShaderAtomicInt64Features, _PhysicalDeviceShaderAtomicFloatFeaturesEXT, _PhysicalDeviceVertexAttributeDivisorFeaturesEXT, QueueFamilyCheckpointPropertiesNV, CheckpointDataNV, PhysicalDeviceDepthStencilResolveProperties, _SubpassDescriptionDepthStencilResolve, _ImageViewASTCDecodeModeEXT, _PhysicalDeviceASTCDecodeFeaturesEXT, _PhysicalDeviceTransformFeedbackFeaturesEXT, PhysicalDeviceTransformFeedbackPropertiesEXT, _PipelineRasterizationStateStreamCreateInfoEXT, _PhysicalDeviceRepresentativeFragmentTestFeaturesNV, _PipelineRepresentativeFragmentTestStateCreateInfoNV, _PhysicalDeviceExclusiveScissorFeaturesNV, _PipelineViewportExclusiveScissorStateCreateInfoNV, _PhysicalDeviceCornerSampledImageFeaturesNV, _PhysicalDeviceComputeShaderDerivativesFeaturesNV, _PhysicalDeviceFragmentShaderBarycentricFeaturesNV, _PhysicalDeviceShaderImageFootprintFeaturesNV, _PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, _ShadingRatePaletteNV, _PipelineViewportShadingRateImageStateCreateInfoNV, _PhysicalDeviceShadingRateImageFeaturesNV, PhysicalDeviceShadingRateImagePropertiesNV, _CoarseSampleLocationNV, _CoarseSampleOrderCustomNV, _PipelineViewportCoarseSampleOrderStateCreateInfoNV, _PhysicalDeviceMeshShaderFeaturesNV, PhysicalDeviceMeshShaderPropertiesNV, _DrawMeshTasksIndirectCommandNV, _RayTracingShaderGroupCreateInfoNV, _RayTracingShaderGroupCreateInfoKHR, _RayTracingPipelineCreateInfoNV, _RayTracingPipelineCreateInfoKHR, _GeometryTrianglesNV, _GeometryAABBNV, _GeometryDataNV, _GeometryNV, _AccelerationStructureInfoNV, _AccelerationStructureCreateInfoNV, _BindAccelerationStructureMemoryInfoNV, _WriteDescriptorSetAccelerationStructureKHR, _WriteDescriptorSetAccelerationStructureNV, _AccelerationStructureMemoryRequirementsInfoNV, _PhysicalDeviceAccelerationStructureFeaturesKHR, _PhysicalDeviceRayTracingPipelineFeaturesKHR, _PhysicalDeviceRayQueryFeaturesKHR, PhysicalDeviceAccelerationStructurePropertiesKHR, PhysicalDeviceRayTracingPipelinePropertiesKHR, PhysicalDeviceRayTracingPropertiesNV, _StridedDeviceAddressRegionKHR, _TraceRaysIndirectCommandKHR, DrmFormatModifierPropertiesListEXT, DrmFormatModifierPropertiesEXT, _PhysicalDeviceImageDrmFormatModifierInfoEXT, _ImageDrmFormatModifierListCreateInfoEXT, _ImageDrmFormatModifierExplicitCreateInfoEXT, ImageDrmFormatModifierPropertiesEXT, _ImageStencilUsageCreateInfo, _DeviceMemoryOverallocationCreateInfoAMD, _PhysicalDeviceFragmentDensityMapFeaturesEXT, _PhysicalDeviceFragmentDensityMap2FeaturesEXT, PhysicalDeviceFragmentDensityMapPropertiesEXT, PhysicalDeviceFragmentDensityMap2PropertiesEXT, _RenderPassFragmentDensityMapCreateInfoEXT, _PhysicalDeviceScalarBlockLayoutFeatures, _SurfaceProtectedCapabilitiesKHR, _PhysicalDeviceUniformBufferStandardLayoutFeatures, _PhysicalDeviceDepthClipEnableFeaturesEXT, _PipelineRasterizationDepthClipStateCreateInfoEXT, PhysicalDeviceMemoryBudgetPropertiesEXT, _PhysicalDeviceMemoryPriorityFeaturesEXT, _MemoryPriorityAllocateInfoEXT, _PhysicalDeviceBufferDeviceAddressFeatures, _PhysicalDeviceBufferDeviceAddressFeaturesEXT, _BufferDeviceAddressInfo, _BufferOpaqueCaptureAddressCreateInfo, _BufferDeviceAddressCreateInfoEXT, _PhysicalDeviceImageViewImageFormatInfoEXT, FilterCubicImageViewImageFormatPropertiesEXT, _PhysicalDeviceImagelessFramebufferFeatures, _FramebufferAttachmentsCreateInfo, _FramebufferAttachmentImageInfo, _RenderPassAttachmentBeginInfo, _PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, _PhysicalDeviceCooperativeMatrixFeaturesNV, PhysicalDeviceCooperativeMatrixPropertiesNV, _CooperativeMatrixPropertiesNV, _PhysicalDeviceYcbcrImageArraysFeaturesEXT, _ImageViewHandleInfoNVX, ImageViewAddressPropertiesNVX, PipelineCreationFeedbackEXT, _PipelineCreationFeedbackCreateInfoEXT, _SurfaceFullScreenExclusiveInfoEXT, _SurfaceFullScreenExclusiveWin32InfoEXT, _SurfaceCapabilitiesFullScreenExclusiveEXT, _PhysicalDevicePerformanceQueryFeaturesKHR, PhysicalDevicePerformanceQueryPropertiesKHR, PerformanceCounterKHR, PerformanceCounterDescriptionKHR, _QueryPoolPerformanceCreateInfoKHR, _AcquireProfilingLockInfoKHR, _PerformanceQuerySubmitInfoKHR, _HeadlessSurfaceCreateInfoEXT, _PhysicalDeviceCoverageReductionModeFeaturesNV, _PipelineCoverageReductionStateCreateInfoNV, FramebufferMixedSamplesCombinationNV, _PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, _PerformanceValueINTEL, _InitializePerformanceApiInfoINTEL, _QueryPoolPerformanceQueryCreateInfoINTEL, _PerformanceMarkerInfoINTEL, _PerformanceStreamMarkerInfoINTEL, _PerformanceOverrideInfoINTEL, _PerformanceConfigurationAcquireInfoINTEL, _PhysicalDeviceShaderClockFeaturesKHR, _PhysicalDeviceIndexTypeUint8FeaturesEXT, PhysicalDeviceShaderSMBuiltinsPropertiesNV, _PhysicalDeviceShaderSMBuiltinsFeaturesNV, _PhysicalDeviceFragmentShaderInterlockFeaturesEXT, _PhysicalDeviceSeparateDepthStencilLayoutsFeatures, _AttachmentReferenceStencilLayout, _AttachmentDescriptionStencilLayout, _PhysicalDevicePipelineExecutablePropertiesFeaturesKHR, _PipelineInfoKHR, PipelineExecutablePropertiesKHR, _PipelineExecutableInfoKHR, PipelineExecutableStatisticKHR, PipelineExecutableInternalRepresentationKHR, _PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, _PhysicalDeviceTexelBufferAlignmentFeaturesEXT, PhysicalDeviceTexelBufferAlignmentPropertiesEXT, _PhysicalDeviceSubgroupSizeControlFeaturesEXT, PhysicalDeviceSubgroupSizeControlPropertiesEXT, PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, _MemoryOpaqueCaptureAddressAllocateInfo, _DeviceMemoryOpaqueCaptureAddressInfo, _PhysicalDeviceLineRasterizationFeaturesEXT, PhysicalDeviceLineRasterizationPropertiesEXT, _PipelineRasterizationLineStateCreateInfoEXT, _PhysicalDevicePipelineCreationCacheControlFeaturesEXT, _PhysicalDeviceVulkan11Features, PhysicalDeviceVulkan11Properties, _PhysicalDeviceVulkan12Features, PhysicalDeviceVulkan12Properties, _PipelineCompilerControlCreateInfoAMD, _PhysicalDeviceCoherentMemoryFeaturesAMD, PhysicalDeviceToolPropertiesEXT, _SamplerCustomBorderColorCreateInfoEXT, PhysicalDeviceCustomBorderColorPropertiesEXT, _PhysicalDeviceCustomBorderColorFeaturesEXT, _AccelerationStructureGeometryTrianglesDataKHR, _AccelerationStructureGeometryAabbsDataKHR, _AccelerationStructureGeometryInstancesDataKHR, _AccelerationStructureGeometryKHR, _AccelerationStructureBuildGeometryInfoKHR, _AccelerationStructureBuildRangeInfoKHR, _AccelerationStructureCreateInfoKHR, _AabbPositionsKHR, _TransformMatrixKHR, _AccelerationStructureInstanceKHR, _AccelerationStructureDeviceAddressInfoKHR, _AccelerationStructureVersionInfoKHR, _CopyAccelerationStructureInfoKHR, _CopyAccelerationStructureToMemoryInfoKHR, _CopyMemoryToAccelerationStructureInfoKHR, _RayTracingPipelineInterfaceCreateInfoKHR, _PipelineLibraryCreateInfoKHR, _PhysicalDeviceExtendedDynamicStateFeaturesEXT, _PhysicalDeviceExtendedDynamicState2FeaturesEXT, _RenderPassTransformBeginInfoQCOM, _CopyCommandTransformInfoQCOM, _CommandBufferInheritanceRenderPassTransformInfoQCOM, _PhysicalDeviceDiagnosticsConfigFeaturesNV, _DeviceDiagnosticsConfigCreateInfoNV, _PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR, _PhysicalDeviceRobustness2FeaturesEXT, PhysicalDeviceRobustness2PropertiesEXT, _PhysicalDeviceImageRobustnessFeaturesEXT, _PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, _PhysicalDevice4444FormatsFeaturesEXT, _BufferCopy2KHR, _ImageCopy2KHR, _ImageBlit2KHR, _BufferImageCopy2KHR, _ImageResolve2KHR, _CopyBufferInfo2KHR, _CopyImageInfo2KHR, _BlitImageInfo2KHR, _CopyBufferToImageInfo2KHR, _CopyImageToBufferInfo2KHR, _ResolveImageInfo2KHR, _PhysicalDeviceShaderImageAtomicInt64FeaturesEXT, _FragmentShadingRateAttachmentInfoKHR, _PipelineFragmentShadingRateStateCreateInfoKHR, _PhysicalDeviceFragmentShadingRateFeaturesKHR, PhysicalDeviceFragmentShadingRatePropertiesKHR, PhysicalDeviceFragmentShadingRateKHR, _PhysicalDeviceShaderTerminateInvocationFeaturesKHR, _PhysicalDeviceFragmentShadingRateEnumsFeaturesNV, _PhysicalDeviceFragmentShadingRateEnumsPropertiesNV, _PipelineFragmentShadingRateEnumStateCreateInfoNV, _AccelerationStructureBuildSizesInfoKHR, _PhysicalDeviceMutableDescriptorTypeFeaturesVALVE, _MutableDescriptorTypeListVALVE, _MutableDescriptorTypeCreateInfoVALVE, _PhysicalDeviceVertexInputDynamicStateFeaturesEXT, _VertexInputBindingDescription2EXT, _VertexInputAttributeDescription2EXT, _PhysicalDeviceColorWriteEnableFeaturesEXT, _PipelineColorWriteCreateInfoEXT, _MemoryBarrier2KHR, _ImageMemoryBarrier2KHR, _BufferMemoryBarrier2KHR, _DependencyInfoKHR, _SemaphoreSubmitInfoKHR, _CommandBufferSubmitInfoKHR, _SubmitInfo2KHR, QueueFamilyCheckpointProperties2NV, CheckpointData2NV, _PhysicalDeviceSynchronization2FeaturesKHR, _PhysicalDeviceInheritedViewportScissorFeaturesNV, _CommandBufferInheritanceViewportScissorInfoNV, _PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, _PhysicalDeviceProvokingVertexFeaturesEXT, PhysicalDeviceProvokingVertexPropertiesEXT, _PipelineRasterizationProvokingVertexStateCreateInfoEXT, _ClearColorValue, _ClearValue, _PerformanceCounterResultKHR, _PerformanceValueDataINTEL, PipelineExecutableStatisticValueKHR, _DeviceOrHostAddressKHR, _DeviceOrHostAddressConstKHR, _AccelerationStructureGeometryDataKHR, BaseOutStructure, BaseInStructure, Offset2D, Offset3D, Extent2D, Extent3D, Viewport, Rect2D, ClearRect, ComponentMapping, ApplicationInfo, AllocationCallbacks, DeviceQueueCreateInfo, DeviceCreateInfo, InstanceCreateInfo, MemoryAllocateInfo, MappedMemoryRange, DescriptorBufferInfo, DescriptorImageInfo, WriteDescriptorSet, CopyDescriptorSet, BufferCreateInfo, BufferViewCreateInfo, ImageSubresource, ImageSubresourceLayers, ImageSubresourceRange, MemoryBarrier, BufferMemoryBarrier, ImageMemoryBarrier, ImageCreateInfo, ImageViewCreateInfo, BufferCopy, SparseMemoryBind, SparseImageMemoryBind, SparseBufferMemoryBindInfo, SparseImageOpaqueMemoryBindInfo, SparseImageMemoryBindInfo, BindSparseInfo, ImageCopy, ImageBlit, BufferImageCopy, ImageResolve, ShaderModuleCreateInfo, DescriptorSetLayoutBinding, DescriptorSetLayoutCreateInfo, DescriptorPoolSize, DescriptorPoolCreateInfo, DescriptorSetAllocateInfo, SpecializationMapEntry, SpecializationInfo, PipelineShaderStageCreateInfo, ComputePipelineCreateInfo, VertexInputBindingDescription, VertexInputAttributeDescription, PipelineVertexInputStateCreateInfo, PipelineInputAssemblyStateCreateInfo, PipelineTessellationStateCreateInfo, PipelineViewportStateCreateInfo, PipelineRasterizationStateCreateInfo, PipelineMultisampleStateCreateInfo, PipelineColorBlendAttachmentState, PipelineColorBlendStateCreateInfo, PipelineDynamicStateCreateInfo, StencilOpState, PipelineDepthStencilStateCreateInfo, GraphicsPipelineCreateInfo, PipelineCacheCreateInfo, PushConstantRange, PipelineLayoutCreateInfo, SamplerCreateInfo, CommandPoolCreateInfo, CommandBufferAllocateInfo, CommandBufferInheritanceInfo, CommandBufferBeginInfo, RenderPassBeginInfo, ClearDepthStencilValue, ClearAttachment, AttachmentDescription, AttachmentReference, SubpassDescription, SubpassDependency, RenderPassCreateInfo, EventCreateInfo, FenceCreateInfo, PhysicalDeviceFeatures, SemaphoreCreateInfo, QueryPoolCreateInfo, FramebufferCreateInfo, DrawIndirectCommand, DrawIndexedIndirectCommand, DispatchIndirectCommand, SubmitInfo, DisplayModeParametersKHR, DisplayModeCreateInfoKHR, DisplaySurfaceCreateInfoKHR, DisplayPresentInfoKHR, Win32SurfaceCreateInfoKHR, SwapchainCreateInfoKHR, PresentInfoKHR, DebugReportCallbackCreateInfoEXT, ValidationFlagsEXT, ValidationFeaturesEXT, PipelineRasterizationStateRasterizationOrderAMD, DebugMarkerObjectNameInfoEXT, DebugMarkerObjectTagInfoEXT, DebugMarkerMarkerInfoEXT, DedicatedAllocationImageCreateInfoNV, DedicatedAllocationBufferCreateInfoNV, DedicatedAllocationMemoryAllocateInfoNV, ExternalMemoryImageCreateInfoNV, ExportMemoryAllocateInfoNV, ImportMemoryWin32HandleInfoNV, ExportMemoryWin32HandleInfoNV, Win32KeyedMutexAcquireReleaseInfoNV, PhysicalDeviceDeviceGeneratedCommandsFeaturesNV, DevicePrivateDataCreateInfoEXT, PrivateDataSlotCreateInfoEXT, PhysicalDevicePrivateDataFeaturesEXT, GraphicsShaderGroupCreateInfoNV, GraphicsPipelineShaderGroupsCreateInfoNV, BindShaderGroupIndirectCommandNV, BindIndexBufferIndirectCommandNV, BindVertexBufferIndirectCommandNV, SetStateFlagsIndirectCommandNV, IndirectCommandsStreamNV, IndirectCommandsLayoutTokenNV, IndirectCommandsLayoutCreateInfoNV, GeneratedCommandsInfoNV, GeneratedCommandsMemoryRequirementsInfoNV, PhysicalDeviceFeatures2, PhysicalDeviceImageFormatInfo2, PhysicalDeviceSparseImageFormatInfo2, ConformanceVersion, PresentRegionsKHR, PresentRegionKHR, RectLayerKHR, PhysicalDeviceVariablePointersFeatures, PhysicalDeviceExternalImageFormatInfo, PhysicalDeviceExternalBufferInfo, ExternalMemoryImageCreateInfo, ExternalMemoryBufferCreateInfo, ExportMemoryAllocateInfo, ImportMemoryWin32HandleInfoKHR, ExportMemoryWin32HandleInfoKHR, MemoryGetWin32HandleInfoKHR, ImportMemoryFdInfoKHR, MemoryGetFdInfoKHR, Win32KeyedMutexAcquireReleaseInfoKHR, PhysicalDeviceExternalSemaphoreInfo, ExportSemaphoreCreateInfo, ImportSemaphoreWin32HandleInfoKHR, ExportSemaphoreWin32HandleInfoKHR, D3D12FenceSubmitInfoKHR, SemaphoreGetWin32HandleInfoKHR, ImportSemaphoreFdInfoKHR, SemaphoreGetFdInfoKHR, PhysicalDeviceExternalFenceInfo, ExportFenceCreateInfo, ImportFenceWin32HandleInfoKHR, ExportFenceWin32HandleInfoKHR, FenceGetWin32HandleInfoKHR, ImportFenceFdInfoKHR, FenceGetFdInfoKHR, PhysicalDeviceMultiviewFeatures, RenderPassMultiviewCreateInfo, DisplayPowerInfoEXT, DeviceEventInfoEXT, DisplayEventInfoEXT, SwapchainCounterCreateInfoEXT, MemoryAllocateFlagsInfo, BindBufferMemoryInfo, BindBufferMemoryDeviceGroupInfo, BindImageMemoryInfo, BindImageMemoryDeviceGroupInfo, DeviceGroupRenderPassBeginInfo, DeviceGroupCommandBufferBeginInfo, DeviceGroupSubmitInfo, DeviceGroupBindSparseInfo, ImageSwapchainCreateInfoKHR, BindImageMemorySwapchainInfoKHR, AcquireNextImageInfoKHR, DeviceGroupPresentInfoKHR, DeviceGroupDeviceCreateInfo, DeviceGroupSwapchainCreateInfoKHR, DescriptorUpdateTemplateEntry, DescriptorUpdateTemplateCreateInfo, XYColorEXT, HdrMetadataEXT, SwapchainDisplayNativeHdrCreateInfoAMD, PresentTimesInfoGOOGLE, PresentTimeGOOGLE, ViewportWScalingNV, PipelineViewportWScalingStateCreateInfoNV, ViewportSwizzleNV, PipelineViewportSwizzleStateCreateInfoNV, PipelineDiscardRectangleStateCreateInfoEXT, InputAttachmentAspectReference, RenderPassInputAttachmentAspectCreateInfo, PhysicalDeviceSurfaceInfo2KHR, DisplayPlaneInfo2KHR, PhysicalDevice16BitStorageFeatures, PhysicalDeviceShaderSubgroupExtendedTypesFeatures, BufferMemoryRequirementsInfo2, ImageMemoryRequirementsInfo2, ImageSparseMemoryRequirementsInfo2, MemoryDedicatedAllocateInfo, ImageViewUsageCreateInfo, PipelineTessellationDomainOriginStateCreateInfo, SamplerYcbcrConversionInfo, SamplerYcbcrConversionCreateInfo, BindImagePlaneMemoryInfo, ImagePlaneMemoryRequirementsInfo, PhysicalDeviceSamplerYcbcrConversionFeatures, ConditionalRenderingBeginInfoEXT, ProtectedSubmitInfo, PhysicalDeviceProtectedMemoryFeatures, DeviceQueueInfo2, PipelineCoverageToColorStateCreateInfoNV, SampleLocationEXT, SampleLocationsInfoEXT, AttachmentSampleLocationsEXT, SubpassSampleLocationsEXT, RenderPassSampleLocationsBeginInfoEXT, PipelineSampleLocationsStateCreateInfoEXT, SamplerReductionModeCreateInfo, PhysicalDeviceBlendOperationAdvancedFeaturesEXT, PipelineColorBlendAdvancedStateCreateInfoEXT, PhysicalDeviceInlineUniformBlockFeaturesEXT, WriteDescriptorSetInlineUniformBlockEXT, DescriptorPoolInlineUniformBlockCreateInfoEXT, PipelineCoverageModulationStateCreateInfoNV, ImageFormatListCreateInfo, ValidationCacheCreateInfoEXT, ShaderModuleValidationCacheCreateInfoEXT, PhysicalDeviceShaderDrawParametersFeatures, PhysicalDeviceShaderFloat16Int8Features, PhysicalDeviceHostQueryResetFeatures, DeviceQueueGlobalPriorityCreateInfoEXT, DebugUtilsObjectNameInfoEXT, DebugUtilsObjectTagInfoEXT, DebugUtilsLabelEXT, DebugUtilsMessengerCreateInfoEXT, DebugUtilsMessengerCallbackDataEXT, PhysicalDeviceDeviceMemoryReportFeaturesEXT, DeviceDeviceMemoryReportCreateInfoEXT, ImportMemoryHostPointerInfoEXT, CalibratedTimestampInfoEXT, PipelineRasterizationConservativeStateCreateInfoEXT, PhysicalDeviceDescriptorIndexingFeatures, DescriptorSetLayoutBindingFlagsCreateInfo, DescriptorSetVariableDescriptorCountAllocateInfo, AttachmentDescription2, AttachmentReference2, SubpassDescription2, SubpassDependency2, RenderPassCreateInfo2, SubpassBeginInfo, SubpassEndInfo, PhysicalDeviceTimelineSemaphoreFeatures, SemaphoreTypeCreateInfo, TimelineSemaphoreSubmitInfo, SemaphoreWaitInfo, SemaphoreSignalInfo, VertexInputBindingDivisorDescriptionEXT, PipelineVertexInputDivisorStateCreateInfoEXT, CommandBufferInheritanceConditionalRenderingInfoEXT, PhysicalDevice8BitStorageFeatures, PhysicalDeviceConditionalRenderingFeaturesEXT, PhysicalDeviceVulkanMemoryModelFeatures, PhysicalDeviceShaderAtomicInt64Features, PhysicalDeviceShaderAtomicFloatFeaturesEXT, PhysicalDeviceVertexAttributeDivisorFeaturesEXT, SubpassDescriptionDepthStencilResolve, ImageViewASTCDecodeModeEXT, PhysicalDeviceASTCDecodeFeaturesEXT, PhysicalDeviceTransformFeedbackFeaturesEXT, PipelineRasterizationStateStreamCreateInfoEXT, PhysicalDeviceRepresentativeFragmentTestFeaturesNV, PipelineRepresentativeFragmentTestStateCreateInfoNV, PhysicalDeviceExclusiveScissorFeaturesNV, PipelineViewportExclusiveScissorStateCreateInfoNV, PhysicalDeviceCornerSampledImageFeaturesNV, PhysicalDeviceComputeShaderDerivativesFeaturesNV, PhysicalDeviceFragmentShaderBarycentricFeaturesNV, PhysicalDeviceShaderImageFootprintFeaturesNV, PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, ShadingRatePaletteNV, PipelineViewportShadingRateImageStateCreateInfoNV, PhysicalDeviceShadingRateImageFeaturesNV, CoarseSampleLocationNV, CoarseSampleOrderCustomNV, PipelineViewportCoarseSampleOrderStateCreateInfoNV, PhysicalDeviceMeshShaderFeaturesNV, DrawMeshTasksIndirectCommandNV, RayTracingShaderGroupCreateInfoNV, RayTracingShaderGroupCreateInfoKHR, RayTracingPipelineCreateInfoNV, RayTracingPipelineCreateInfoKHR, GeometryTrianglesNV, GeometryAABBNV, GeometryDataNV, GeometryNV, AccelerationStructureInfoNV, AccelerationStructureCreateInfoNV, BindAccelerationStructureMemoryInfoNV, WriteDescriptorSetAccelerationStructureKHR, WriteDescriptorSetAccelerationStructureNV, AccelerationStructureMemoryRequirementsInfoNV, PhysicalDeviceAccelerationStructureFeaturesKHR, PhysicalDeviceRayTracingPipelineFeaturesKHR, PhysicalDeviceRayQueryFeaturesKHR, StridedDeviceAddressRegionKHR, TraceRaysIndirectCommandKHR, PhysicalDeviceImageDrmFormatModifierInfoEXT, ImageDrmFormatModifierListCreateInfoEXT, ImageDrmFormatModifierExplicitCreateInfoEXT, ImageStencilUsageCreateInfo, DeviceMemoryOverallocationCreateInfoAMD, PhysicalDeviceFragmentDensityMapFeaturesEXT, PhysicalDeviceFragmentDensityMap2FeaturesEXT, RenderPassFragmentDensityMapCreateInfoEXT, PhysicalDeviceScalarBlockLayoutFeatures, SurfaceProtectedCapabilitiesKHR, PhysicalDeviceUniformBufferStandardLayoutFeatures, PhysicalDeviceDepthClipEnableFeaturesEXT, PipelineRasterizationDepthClipStateCreateInfoEXT, PhysicalDeviceMemoryPriorityFeaturesEXT, MemoryPriorityAllocateInfoEXT, PhysicalDeviceBufferDeviceAddressFeatures, PhysicalDeviceBufferDeviceAddressFeaturesEXT, BufferDeviceAddressInfo, BufferOpaqueCaptureAddressCreateInfo, BufferDeviceAddressCreateInfoEXT, PhysicalDeviceImageViewImageFormatInfoEXT, PhysicalDeviceImagelessFramebufferFeatures, FramebufferAttachmentsCreateInfo, FramebufferAttachmentImageInfo, RenderPassAttachmentBeginInfo, PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, PhysicalDeviceCooperativeMatrixFeaturesNV, CooperativeMatrixPropertiesNV, PhysicalDeviceYcbcrImageArraysFeaturesEXT, ImageViewHandleInfoNVX, PipelineCreationFeedbackCreateInfoEXT, SurfaceFullScreenExclusiveInfoEXT, SurfaceFullScreenExclusiveWin32InfoEXT, SurfaceCapabilitiesFullScreenExclusiveEXT, PhysicalDevicePerformanceQueryFeaturesKHR, QueryPoolPerformanceCreateInfoKHR, AcquireProfilingLockInfoKHR, PerformanceQuerySubmitInfoKHR, HeadlessSurfaceCreateInfoEXT, PhysicalDeviceCoverageReductionModeFeaturesNV, PipelineCoverageReductionStateCreateInfoNV, PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, PerformanceValueINTEL, InitializePerformanceApiInfoINTEL, QueryPoolPerformanceQueryCreateInfoINTEL, PerformanceMarkerInfoINTEL, PerformanceStreamMarkerInfoINTEL, PerformanceOverrideInfoINTEL, PerformanceConfigurationAcquireInfoINTEL, PhysicalDeviceShaderClockFeaturesKHR, PhysicalDeviceIndexTypeUint8FeaturesEXT, PhysicalDeviceShaderSMBuiltinsFeaturesNV, PhysicalDeviceFragmentShaderInterlockFeaturesEXT, PhysicalDeviceSeparateDepthStencilLayoutsFeatures, AttachmentReferenceStencilLayout, AttachmentDescriptionStencilLayout, PhysicalDevicePipelineExecutablePropertiesFeaturesKHR, PipelineInfoKHR, PipelineExecutableInfoKHR, PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, PhysicalDeviceTexelBufferAlignmentFeaturesEXT, PhysicalDeviceSubgroupSizeControlFeaturesEXT, MemoryOpaqueCaptureAddressAllocateInfo, DeviceMemoryOpaqueCaptureAddressInfo, PhysicalDeviceLineRasterizationFeaturesEXT, PipelineRasterizationLineStateCreateInfoEXT, PhysicalDevicePipelineCreationCacheControlFeaturesEXT, PhysicalDeviceVulkan11Features, PhysicalDeviceVulkan12Features, PipelineCompilerControlCreateInfoAMD, PhysicalDeviceCoherentMemoryFeaturesAMD, SamplerCustomBorderColorCreateInfoEXT, PhysicalDeviceCustomBorderColorFeaturesEXT, AccelerationStructureGeometryTrianglesDataKHR, AccelerationStructureGeometryAabbsDataKHR, AccelerationStructureGeometryInstancesDataKHR, AccelerationStructureGeometryKHR, AccelerationStructureBuildGeometryInfoKHR, AccelerationStructureBuildRangeInfoKHR, AccelerationStructureCreateInfoKHR, AabbPositionsKHR, TransformMatrixKHR, AccelerationStructureInstanceKHR, AccelerationStructureDeviceAddressInfoKHR, AccelerationStructureVersionInfoKHR, CopyAccelerationStructureInfoKHR, CopyAccelerationStructureToMemoryInfoKHR, CopyMemoryToAccelerationStructureInfoKHR, RayTracingPipelineInterfaceCreateInfoKHR, PipelineLibraryCreateInfoKHR, PhysicalDeviceExtendedDynamicStateFeaturesEXT, PhysicalDeviceExtendedDynamicState2FeaturesEXT, RenderPassTransformBeginInfoQCOM, CopyCommandTransformInfoQCOM, CommandBufferInheritanceRenderPassTransformInfoQCOM, PhysicalDeviceDiagnosticsConfigFeaturesNV, DeviceDiagnosticsConfigCreateInfoNV, PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR, PhysicalDeviceRobustness2FeaturesEXT, PhysicalDeviceImageRobustnessFeaturesEXT, PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, PhysicalDevice4444FormatsFeaturesEXT, BufferCopy2KHR, ImageCopy2KHR, ImageBlit2KHR, BufferImageCopy2KHR, ImageResolve2KHR, CopyBufferInfo2KHR, CopyImageInfo2KHR, BlitImageInfo2KHR, CopyBufferToImageInfo2KHR, CopyImageToBufferInfo2KHR, ResolveImageInfo2KHR, PhysicalDeviceShaderImageAtomicInt64FeaturesEXT, FragmentShadingRateAttachmentInfoKHR, PipelineFragmentShadingRateStateCreateInfoKHR, PhysicalDeviceFragmentShadingRateFeaturesKHR, PhysicalDeviceShaderTerminateInvocationFeaturesKHR, PhysicalDeviceFragmentShadingRateEnumsFeaturesNV, PhysicalDeviceFragmentShadingRateEnumsPropertiesNV, PipelineFragmentShadingRateEnumStateCreateInfoNV, AccelerationStructureBuildSizesInfoKHR, PhysicalDeviceMutableDescriptorTypeFeaturesVALVE, MutableDescriptorTypeListVALVE, MutableDescriptorTypeCreateInfoVALVE, PhysicalDeviceVertexInputDynamicStateFeaturesEXT, VertexInputBindingDescription2EXT, VertexInputAttributeDescription2EXT, PhysicalDeviceColorWriteEnableFeaturesEXT, PipelineColorWriteCreateInfoEXT, MemoryBarrier2KHR, ImageMemoryBarrier2KHR, BufferMemoryBarrier2KHR, DependencyInfoKHR, SemaphoreSubmitInfoKHR, CommandBufferSubmitInfoKHR, SubmitInfo2KHR, PhysicalDeviceSynchronization2FeaturesKHR, PhysicalDeviceInheritedViewportScissorFeaturesNV, CommandBufferInheritanceViewportScissorInfoNV, PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, PhysicalDeviceProvokingVertexFeaturesEXT, PipelineRasterizationProvokingVertexStateCreateInfoEXT, ClearColorValue, ClearValue, PerformanceCounterResultKHR, PerformanceValueDataINTEL, DeviceOrHostAddressKHR, DeviceOrHostAddressConstKHR, AccelerationStructureGeometryDataKHR, create_instance, destroy_instance, enumerate_physical_devices, get_device_proc_addr, get_instance_proc_addr, get_physical_device_properties, get_physical_device_queue_family_properties, get_physical_device_memory_properties, get_physical_device_features, get_physical_device_format_properties, get_physical_device_image_format_properties, create_device, destroy_device, enumerate_instance_version, enumerate_instance_layer_properties, enumerate_instance_extension_properties, enumerate_device_layer_properties, enumerate_device_extension_properties, get_device_queue, queue_submit, queue_wait_idle, device_wait_idle, allocate_memory, free_memory, map_memory, unmap_memory, flush_mapped_memory_ranges, invalidate_mapped_memory_ranges, get_device_memory_commitment, get_buffer_memory_requirements, bind_buffer_memory, get_image_memory_requirements, bind_image_memory, get_image_sparse_memory_requirements, get_physical_device_sparse_image_format_properties, queue_bind_sparse, create_fence, destroy_fence, reset_fences, get_fence_status, wait_for_fences, create_semaphore, destroy_semaphore, create_event, destroy_event, get_event_status, set_event, reset_event, create_query_pool, destroy_query_pool, get_query_pool_results, reset_query_pool, create_buffer, destroy_buffer, create_buffer_view, destroy_buffer_view, create_image, destroy_image, get_image_subresource_layout, create_image_view, destroy_image_view, create_shader_module, destroy_shader_module, create_pipeline_cache, destroy_pipeline_cache, get_pipeline_cache_data, merge_pipeline_caches, create_graphics_pipelines, create_compute_pipelines, destroy_pipeline, create_pipeline_layout, destroy_pipeline_layout, create_sampler, destroy_sampler, create_descriptor_set_layout, destroy_descriptor_set_layout, create_descriptor_pool, destroy_descriptor_pool, reset_descriptor_pool, allocate_descriptor_sets, free_descriptor_sets, update_descriptor_sets, create_framebuffer, destroy_framebuffer, create_render_pass, destroy_render_pass, get_render_area_granularity, create_command_pool, destroy_command_pool, reset_command_pool, allocate_command_buffers, free_command_buffers, begin_command_buffer, end_command_buffer, reset_command_buffer, cmd_bind_pipeline, cmd_set_viewport, cmd_set_scissor, cmd_set_line_width, cmd_set_depth_bias, cmd_set_blend_constants, cmd_set_depth_bounds, cmd_set_stencil_compare_mask, cmd_set_stencil_write_mask, cmd_set_stencil_reference, cmd_bind_descriptor_sets, cmd_bind_index_buffer, cmd_bind_vertex_buffers, cmd_draw, cmd_draw_indexed, cmd_draw_indirect, cmd_draw_indexed_indirect, cmd_dispatch, cmd_dispatch_indirect, cmd_copy_buffer, cmd_copy_image, cmd_blit_image, cmd_copy_buffer_to_image, cmd_copy_image_to_buffer, cmd_update_buffer, cmd_fill_buffer, cmd_clear_color_image, cmd_clear_depth_stencil_image, cmd_clear_attachments, cmd_resolve_image, cmd_set_event, cmd_reset_event, cmd_wait_events, cmd_pipeline_barrier, cmd_begin_query, cmd_end_query, cmd_begin_conditional_rendering_ext, cmd_end_conditional_rendering_ext, cmd_reset_query_pool, cmd_write_timestamp, cmd_copy_query_pool_results, cmd_push_constants, cmd_begin_render_pass, cmd_next_subpass, cmd_end_render_pass, cmd_execute_commands, get_physical_device_display_properties_khr, get_physical_device_display_plane_properties_khr, get_display_plane_supported_displays_khr, get_display_mode_properties_khr, create_display_mode_khr, get_display_plane_capabilities_khr, create_display_plane_surface_khr, create_shared_swapchains_khr, destroy_surface_khr, get_physical_device_surface_support_khr, get_physical_device_surface_capabilities_khr, get_physical_device_surface_formats_khr, get_physical_device_surface_present_modes_khr, create_swapchain_khr, destroy_swapchain_khr, get_swapchain_images_khr, acquire_next_image_khr, queue_present_khr, create_win_32_surface_khr, get_physical_device_win_32_presentation_support_khr, create_debug_report_callback_ext, destroy_debug_report_callback_ext, debug_report_message_ext, debug_marker_set_object_name_ext, debug_marker_set_object_tag_ext, cmd_debug_marker_begin_ext, cmd_debug_marker_end_ext, cmd_debug_marker_insert_ext, get_physical_device_external_image_format_properties_nv, get_memory_win_32_handle_nv, cmd_execute_generated_commands_nv, cmd_preprocess_generated_commands_nv, cmd_bind_pipeline_shader_group_nv, get_generated_commands_memory_requirements_nv, create_indirect_commands_layout_nv, destroy_indirect_commands_layout_nv, get_physical_device_features_2, get_physical_device_properties_2, get_physical_device_format_properties_2, get_physical_device_image_format_properties_2, get_physical_device_queue_family_properties_2, get_physical_device_memory_properties_2, get_physical_device_sparse_image_format_properties_2, cmd_push_descriptor_set_khr, trim_command_pool, get_physical_device_external_buffer_properties, get_memory_win_32_handle_khr, get_memory_win_32_handle_properties_khr, get_memory_fd_khr, get_memory_fd_properties_khr, get_physical_device_external_semaphore_properties, get_semaphore_win_32_handle_khr, import_semaphore_win_32_handle_khr, get_semaphore_fd_khr, import_semaphore_fd_khr, get_physical_device_external_fence_properties, get_fence_win_32_handle_khr, import_fence_win_32_handle_khr, get_fence_fd_khr, import_fence_fd_khr, release_display_ext, acquire_winrt_display_nv, get_winrt_display_nv, display_power_control_ext, register_device_event_ext, register_display_event_ext, get_swapchain_counter_ext, get_physical_device_surface_capabilities_2_ext, enumerate_physical_device_groups, get_device_group_peer_memory_features, bind_buffer_memory_2, bind_image_memory_2, cmd_set_device_mask, get_device_group_present_capabilities_khr, get_device_group_surface_present_modes_khr, acquire_next_image_2_khr, cmd_dispatch_base, get_physical_device_present_rectangles_khr, create_descriptor_update_template, destroy_descriptor_update_template, update_descriptor_set_with_template, cmd_push_descriptor_set_with_template_khr, set_hdr_metadata_ext, get_swapchain_status_khr, get_refresh_cycle_duration_google, get_past_presentation_timing_google, cmd_set_viewport_w_scaling_nv, cmd_set_discard_rectangle_ext, cmd_set_sample_locations_ext, get_physical_device_multisample_properties_ext, get_physical_device_surface_capabilities_2_khr, get_physical_device_surface_formats_2_khr, get_physical_device_display_properties_2_khr, get_physical_device_display_plane_properties_2_khr, get_display_mode_properties_2_khr, get_display_plane_capabilities_2_khr, get_buffer_memory_requirements_2, get_image_memory_requirements_2, get_image_sparse_memory_requirements_2, create_sampler_ycbcr_conversion, destroy_sampler_ycbcr_conversion, get_device_queue_2, create_validation_cache_ext, destroy_validation_cache_ext, get_validation_cache_data_ext, merge_validation_caches_ext, get_descriptor_set_layout_support, get_shader_info_amd, set_local_dimming_amd, get_physical_device_calibrateable_time_domains_ext, get_calibrated_timestamps_ext, set_debug_utils_object_name_ext, set_debug_utils_object_tag_ext, queue_begin_debug_utils_label_ext, queue_end_debug_utils_label_ext, queue_insert_debug_utils_label_ext, cmd_begin_debug_utils_label_ext, cmd_end_debug_utils_label_ext, cmd_insert_debug_utils_label_ext, create_debug_utils_messenger_ext, destroy_debug_utils_messenger_ext, submit_debug_utils_message_ext, get_memory_host_pointer_properties_ext, cmd_write_buffer_marker_amd, create_render_pass_2, cmd_begin_render_pass_2, cmd_next_subpass_2, cmd_end_render_pass_2, get_semaphore_counter_value, wait_semaphores, signal_semaphore, cmd_draw_indirect_count, cmd_draw_indexed_indirect_count, cmd_set_checkpoint_nv, get_queue_checkpoint_data_nv, cmd_bind_transform_feedback_buffers_ext, cmd_begin_transform_feedback_ext, cmd_end_transform_feedback_ext, cmd_begin_query_indexed_ext, cmd_end_query_indexed_ext, cmd_draw_indirect_byte_count_ext, cmd_set_exclusive_scissor_nv, cmd_bind_shading_rate_image_nv, cmd_set_viewport_shading_rate_palette_nv, cmd_set_coarse_sample_order_nv, cmd_draw_mesh_tasks_nv, cmd_draw_mesh_tasks_indirect_nv, cmd_draw_mesh_tasks_indirect_count_nv, compile_deferred_nv, create_acceleration_structure_nv, destroy_acceleration_structure_khr, destroy_acceleration_structure_nv, get_acceleration_structure_memory_requirements_nv, bind_acceleration_structure_memory_nv, cmd_copy_acceleration_structure_nv, cmd_copy_acceleration_structure_khr, copy_acceleration_structure_khr, cmd_copy_acceleration_structure_to_memory_khr, copy_acceleration_structure_to_memory_khr, cmd_copy_memory_to_acceleration_structure_khr, copy_memory_to_acceleration_structure_khr, cmd_write_acceleration_structures_properties_khr, cmd_write_acceleration_structures_properties_nv, cmd_build_acceleration_structure_nv, write_acceleration_structures_properties_khr, cmd_trace_rays_khr, cmd_trace_rays_nv, get_ray_tracing_shader_group_handles_khr, get_ray_tracing_capture_replay_shader_group_handles_khr, get_acceleration_structure_handle_nv, create_ray_tracing_pipelines_nv, create_ray_tracing_pipelines_khr, get_physical_device_cooperative_matrix_properties_nv, cmd_trace_rays_indirect_khr, get_device_acceleration_structure_compatibility_khr, get_ray_tracing_shader_group_stack_size_khr, cmd_set_ray_tracing_pipeline_stack_size_khr, get_image_view_handle_nvx, get_image_view_address_nvx, get_physical_device_surface_present_modes_2_ext, get_device_group_surface_present_modes_2_ext, acquire_full_screen_exclusive_mode_ext, release_full_screen_exclusive_mode_ext, enumerate_physical_device_queue_family_performance_query_counters_khr, get_physical_device_queue_family_performance_query_passes_khr, acquire_profiling_lock_khr, release_profiling_lock_khr, get_image_drm_format_modifier_properties_ext, get_buffer_opaque_capture_address, get_buffer_device_address, create_headless_surface_ext, get_physical_device_supported_framebuffer_mixed_samples_combinations_nv, initialize_performance_api_intel, uninitialize_performance_api_intel, cmd_set_performance_marker_intel, cmd_set_performance_stream_marker_intel, cmd_set_performance_override_intel, acquire_performance_configuration_intel, release_performance_configuration_intel, queue_set_performance_configuration_intel, get_performance_parameter_intel, get_device_memory_opaque_capture_address, get_pipeline_executable_properties_khr, get_pipeline_executable_statistics_khr, get_pipeline_executable_internal_representations_khr, cmd_set_line_stipple_ext, get_physical_device_tool_properties_ext, create_acceleration_structure_khr, cmd_build_acceleration_structures_khr, cmd_build_acceleration_structures_indirect_khr, build_acceleration_structures_khr, get_acceleration_structure_device_address_khr, create_deferred_operation_khr, destroy_deferred_operation_khr, get_deferred_operation_max_concurrency_khr, get_deferred_operation_result_khr, deferred_operation_join_khr, cmd_set_cull_mode_ext, cmd_set_front_face_ext, cmd_set_primitive_topology_ext, cmd_set_viewport_with_count_ext, cmd_set_scissor_with_count_ext, cmd_bind_vertex_buffers_2_ext, cmd_set_depth_test_enable_ext, cmd_set_depth_write_enable_ext, cmd_set_depth_compare_op_ext, cmd_set_depth_bounds_test_enable_ext, cmd_set_stencil_test_enable_ext, cmd_set_stencil_op_ext, cmd_set_patch_control_points_ext, cmd_set_rasterizer_discard_enable_ext, cmd_set_depth_bias_enable_ext, cmd_set_logic_op_ext, cmd_set_primitive_restart_enable_ext, create_private_data_slot_ext, destroy_private_data_slot_ext, set_private_data_ext, get_private_data_ext, cmd_copy_buffer_2_khr, cmd_copy_image_2_khr, cmd_blit_image_2_khr, cmd_copy_buffer_to_image_2_khr, cmd_copy_image_to_buffer_2_khr, cmd_resolve_image_2_khr, cmd_set_fragment_shading_rate_khr, get_physical_device_fragment_shading_rates_khr, cmd_set_fragment_shading_rate_enum_nv, get_acceleration_structure_build_sizes_khr, cmd_set_vertex_input_ext, cmd_set_color_write_enable_ext, cmd_set_event_2_khr, cmd_reset_event_2_khr, cmd_wait_events_2_khr, cmd_pipeline_barrier_2_khr, queue_submit_2_khr, cmd_write_timestamp_2_khr, cmd_write_buffer_marker_2_amd, get_queue_checkpoint_data_2_nv
